
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 b1 00 20 4d 53 01 00 3b b9 02 00 21 53 01 00     ... MS..;...!S..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	21 53 01 00 21 53 01 00 21 53 01 00 00 00 00 00     !S..!S..!S......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	c9 4d 01 00 21 53 01 00 00 00 00 00 75 4d 01 00     .M..!S......uM..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	21 53 01 00                                         !S..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	79 4e 01 00 f7 e8 02 00 79 4e 01 00 79 4e 01 00     yN......yN..yN..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	bf e8 02 00 79 4e 01 00 79 4e 01 00 dd e8 02 00     ....yN..yN......
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
			switch (*fmt) {
  a0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
  b0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
  c0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
  d0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
  e0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..
  f0:	79 4e 01 00 79 4e 01 00 79 4e 01 00 79 4e 01 00     yN..yN..yN..yN..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
				align = VA_STACK_ALIGN(void *);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
			switch (*fmt) {
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fd62 	bl	cbe8 <__udivmoddi4>
		buf = (void *) ROUND_UP(buf, align);
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
		if (is_str_arg) {
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
			int v = va_arg(ap, int);
     14a:	414d      	adcs	r5, r1

			if (buf0 != NULL) {
				*(int *)buf = v;
     14c:	eb56 060c 	adcs.w	r6, r6, ip
			}
			buf += sizeof(int);
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				arg_idx--;
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
				parsing = false;
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				continue;
     15e:	eb59 0901 	adcs.w	r9, r9, r1
				if (fmt[-1] == 'l') {
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
					if (fmt[-2] == 'l') {
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
						align = VA_STACK_ALIGN(long long);
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
				size = sizeof(void *);
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
					v.ld = va_arg(ap, long double);
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf = (void *) ROUND_UP(buf, align);
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
					if (BUF_OFFSET + size > len) {
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
						*(long double *)buf = v.ld;
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf += size;
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
				parsing = false;
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
			switch (*fmt) {
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
			if (*++fmt == '\0') {
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
			if (!parsing) {
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				if (*fmt == '%') {
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
					arg_idx++;
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
					parsing = true;
     1c6:	ea18 0802 	ands.w	r8, r8, r2
				align = VA_STACK_ALIGN(size_t);
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
			switch (*fmt) {
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
				parsing = false;
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ec:	ea18 0802 	ands.w	r8, r8, r2
				}
			}
			buf += sizeof(long long);
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
		} else if (size == sizeof(int)) {
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
			int v = va_arg(ap, int);
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
			if (buf0 != NULL) {
     200:	eb56 060a 	adcs.w	r6, r6, sl
		} else if (size == sizeof(long long)) {
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
			s = va_arg(ap, char *);
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
			if (is_ro && !do_ro) {
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     232:	ea1a 0a02 	ands.w	sl, sl, r2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     236:	eb76 060a 	sbcs.w	r6, r6, sl
					__ASSERT(false, "String with too many arguments");
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
					__ASSERT(false, "str_ptr_pos[] too small");
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     250:	ea19 0902 	ands.w	r9, r9, r2
				if (buf0 != NULL) {
     254:	eb75 0509 	sbcs.w	r5, r5, r9
					str_ptr_pos[s_idx] = s_ptr_idx;
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
					str_ptr_arg[s_idx] = arg_idx;
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
						s_rw_cnt++;
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
					__ASSERT(false, "str_ptr_pos[] too small");
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
				if (buf0 != NULL) {
     288:	4013      	ands	r3, r2
					str_ptr_pos[s_idx] = s_ptr_idx;
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
					str_ptr_arg[s_idx] = arg_idx;
     29c:	4770      	bx	lr
					if (is_ro) {
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
						s_ro_cnt++;
     2ae:	b402      	push	{r1}
				s_idx++;
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
					if (BUF_OFFSET + size > len) {
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
			buf += sizeof(char *);
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
			switch (*fmt) {
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
				} else if (is_ro) {
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
					len += 1;
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
				} else if (rws_pos_en) {
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
					len += strlen(s) + 1 + 1;
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
		__ASSERT(false, "too many format args");
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     322:	930e      	str	r3, [sp, #56]	; 0x38
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     332:	fbe9 0264 	umaal	r0, r2, r9, r4

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
		for (i = 0; i < s_idx; i++) {
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
			*buf++ = str_ptr_arg[i];
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
	for (i = 0; i < s_idx; i++) {
     364:	fba9 5408 	umull	r5, r4, r9, r8
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     368:	fbea b468 	umaal	fp, r4, sl, r8
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
			if (BUF_OFFSET + 1 > len) {
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
			if (BUF_OFFSET + 1 > len) {
     384:	fbee 6568 	umaal	r6, r5, lr, r8
			*buf++ = pos;
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
		for (i = 0; i < s_idx; i++) {
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
		if (rws_pos_en) {
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
			*buf++ = str_ptr_arg[i];
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
		if (BUF_OFFSET + 1 + size > len) {
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
		*buf++ = str_ptr_pos[i];
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
		memcpy(buf, s, size);
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
		buf += size;
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
	for (i = 0; i < s_idx; i++) {
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
			size = strlen(s) + 1;
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
		return -EFAULT;
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fd8d 	bl	72f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fd9b 	bl	7320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f fc49 	bl	1008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000e88 	.word	0x20000e88
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00d fa43 	bl	dce4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f010 fb45 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000e88 	.word	0x20000e88

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 ffd6 	bl	7914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00c f85d 	bl	ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00c f80a 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f ff68 	bl	10882 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 ff95 	bl	78e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000e88 	.word	0x20000e88

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <sdc_init+0x22>
     9dc:	f00b ff90 	bl	c900 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <sdc_init+0x1c>
     9e6:	f00b fe41 	bl	c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <sdc_init+0x28>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <sdc_init+0x1e>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <__data_size+0x1a>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <__data_size+0x1e>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f010 fb11 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <__data_size+0x22>)
     a1c:	4668      	mov	r0, sp
     a1e:	f010 fa92 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <__data_size+0x26>)
     a28:	f010 fa8d 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <__data_size+0x2a>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <__data_size+0x10>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <__data_size+0x14>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <sdc_init+0x1e>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000e88 	.word	0x20000e88
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 ff29 	bl	7934 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fc99 	bl	7438 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f fb98 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f fbac 	bl	1029e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000ea8 	.word	0x20000ea8

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000ea8 	.word	0x20000ea8

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000ea8 	.word	0x20000ea8

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000ea8 	.word	0x20000ea8

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f010 f973 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 ff31 	bl	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00c f941 	bl	cf08 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00c f9a1 	bl	cfd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00c f94f 	bl	cf64 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000eb4 	.word	0x20000eb4
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c bbbb 	b.w	d4be <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c bbb2 	b.w	d4be <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00f f9b1 	bl	10148 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	200010c0 	.word	0x200010c0

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	200010c0 	.word	0x200010c0

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	200010c0 	.word	0x200010c0

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fe82 	bl	dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	200010c0 	.word	0x200010c0
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fea3 	bl	dcd0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fe02 	bl	dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	200010c0 	.word	0x200010c0
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fe7b 	bl	dcd0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	200010c0 	.word	0x200010c0
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fdfc 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	200010c0 	.word	0x200010c0
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	200010c0 	.word	0x200010c0
    1074:	000002a8 	.word	0x000002a8
    1078:	0000f377 	.word	0x0000f377

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fe30 	bl	dd16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fe21 	bl	dd02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fd76 	bl	dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fce3 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fcda 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c fd9b 	bl	dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fd7a 	bl	dc5c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c fd44 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f ff3d 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fd2e 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c fc5d 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c fc0f 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fd2a 	bl	dd66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fd1c 	bl	dd66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f fd03 	bl	10d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fcf3 	bl	dd84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fcf5 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fcf0 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f fd64 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fce6 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fce1 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fcdb 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fcb1 	bl	dd84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f fcb2 	bl	10d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000344 	.word	0x20000344
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f fc9e 	bl	10d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000344 	.word	0x20000344

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b faaf 	bl	ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00b fa68 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	200015d4 	.word	0x200015d4
    1528:	20000330 	.word	0x20000330

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	20000330 	.word	0x20000330

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	200015d4 	.word	0x200015d4
    1560:	20000330 	.word	0x20000330

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	200015d4 	.word	0x200015d4
    1588:	20000330 	.word	0x20000330

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	200015d4 	.word	0x200015d4
    15ac:	20000330 	.word	0x20000330

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	200015d4 	.word	0x200015d4

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	20000330 	.word	0x20000330

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	200015d4 	.word	0x200015d4
    1604:	20000330 	.word	0x20000330
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	200015d4 	.word	0x200015d4

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000346 	.word	0x20000346

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000346 	.word	0x20000346

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000346 	.word	0x20000346

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000d5a 	.word	0x20000d5a

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c ffbb 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000d38 	.word	0x20000d38
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fd2b 	bl	8174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 facb 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fda9 	bl	827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fe8c 	bl	8448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fe7f 	bl	8434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 feb5 	bl	84a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fc1a 	bl	7f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fc79 	bl	8048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 ff4e 	bl	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fcc5 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fcb4 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c fb6a 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f9ac 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00f fbf0 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000d10 	.word	0x20000d10
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00f fb4b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00c f879 	bl	d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00c f813 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b ffc3 	bl	d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000d5a 	.word	0x20000d5a

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 be6b 	b.w	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00f fadb 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000d68 	.word	0x20000d68
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00c ba58 	b.w	df1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f934 	bl	7d2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f90e 	bl	7ce4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00c f836 	bl	db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f8f3 	bl	7d20 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00c f9c7 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f006 f809 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fc3b 	bl	840c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fafb 	bl	31c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fe84 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fd58 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fd4f 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000d10 	.word	0x20000d10
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00c f934 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 ff76 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000d10 	.word	0x20000d10
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f006 f8c9 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ffed 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00f f927 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fce2 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000d5a 	.word	0x20000d5a
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000d5a 	.word	0x20000d5a
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 bb6e 	b.w	8454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fce7 	bl	d808 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f9f2 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fea2 	bl	7c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f9e4 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fede 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f006 f8aa 	bl	8058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 fa60 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000d10 	.word	0x20000d10
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_HEAP_MEM_POOL_SIZE+0xa0>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b ffd0 	bl	df2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_HEAP_MEM_POOL_SIZE+0xa4>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c fb44 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c fad9 	bl	e56e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b ffaf 	bl	df2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
    2012:	e007      	b.n	2024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_HEAP_MEM_POOL_SIZE+0x44>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fd06 	bl	da36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_HEAP_MEM_POOL_SIZE+0x44>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f930 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_HEAP_MEM_POOL_SIZE+0xa4>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fddf 	bl	7c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_HEAP_MEM_POOL_SIZE+0x80>
    2078:	f006 f922 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fe1c 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f9a2 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000d38 	.word	0x20000d38
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	200017cd 	.word	0x200017cd

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 fa92 	bl	861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	200015fa 	.word	0x200015fa
    2108:	20000338 	.word	0x20000338

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	200015fa 	.word	0x200015fa

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	200015fa 	.word	0x200015fa

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	200015fa 	.word	0x200015fa

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fe54 	bl	de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	200015fa 	.word	0x200015fa

000021a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    21a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21ac:	460e      	mov	r6, r1
    21ae:	4607      	mov	r7, r0
    21b0:	4615      	mov	r5, r2
    21b2:	2106      	movs	r1, #6
    21b4:	4630      	mov	r0, r6
    21b6:	f00c f8c7 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    21ba:	4c0d      	ldr	r4, [pc, #52]	; (21f0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    21bc:	b160      	cbz	r0, 21d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    21be:	2000      	movs	r0, #0
    21c0:	e004      	b.n	21cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    21c2:	1821      	adds	r1, r4, r0
    21c4:	1c40      	adds	r0, r0, #1
    21c6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    21ca:	b2c0      	uxtb	r0, r0
    21cc:	78a1      	ldrb	r1, [r4, #2]
    21ce:	4281      	cmp	r1, r0
    21d0:	d8f7      	bhi.n	21c2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    21d2:	2001      	movs	r0, #1
    21d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21d8:	4631      	mov	r1, r6
    21da:	4638      	mov	r0, r7
    21dc:	f00b feb6 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    21e0:	2808      	cmp	r0, #8
    21e2:	d003      	beq.n	21ec <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    21e4:	4420      	add	r0, r4
    21e6:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    21ea:	e7f2      	b.n	21d2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    21ec:	2000      	movs	r0, #0
    21ee:	e7f1      	b.n	21d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    21f0:	200015fa 	.word	0x200015fa

000021f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21f4:	4904      	ldr	r1, [pc, #16]	; (2208 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21f6:	788a      	ldrb	r2, [r1, #2]
    21f8:	4282      	cmp	r2, r0
    21fa:	d903      	bls.n	2204 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21fc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2200:	1cc0      	adds	r0, r0, #3
    2202:	4770      	bx	lr
    2204:	2000      	movs	r0, #0
    2206:	4770      	bx	lr
    2208:	200015fa 	.word	0x200015fa

0000220c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    220c:	4908      	ldr	r1, [pc, #32]	; (2230 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    220e:	788a      	ldrb	r2, [r1, #2]
    2210:	4282      	cmp	r2, r0
    2212:	d903      	bls.n	221c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    2214:	180a      	adds	r2, r1, r0
    2216:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    221a:	b10a      	cbz	r2, 2220 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    221c:	2000      	movs	r0, #0
    221e:	4770      	bx	lr
    2220:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2224:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2228:	f200 100b 	addw	r0, r0, #267	; 0x10b
    222c:	4770      	bx	lr
    222e:	0000      	.short	0x0000
    2230:	200015fa 	.word	0x200015fa

00002234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2234:	b510      	push	{r4, lr}
    2236:	f240 12d3 	movw	r2, #467	; 0x1d3
    223a:	2100      	movs	r1, #0
    223c:	4808      	ldr	r0, [pc, #32]	; (2260 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    223e:	f00e fefc 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2242:	2208      	movs	r2, #8
    2244:	21ff      	movs	r1, #255	; 0xff
    2246:	4807      	ldr	r0, [pc, #28]	; (2264 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2248:	f00e fef7 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    224c:	4805      	ldr	r0, [pc, #20]	; (2264 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    224e:	2100      	movs	r1, #0
    2250:	1f00      	subs	r0, r0, #4
    2252:	7001      	strb	r1, [r0, #0]
    2254:	7041      	strb	r1, [r0, #1]
    2256:	f44f 7161 	mov.w	r1, #900	; 0x384
    225a:	8041      	strh	r1, [r0, #2]
    225c:	bd10      	pop	{r4, pc}
    225e:	0000      	.short	0x0000
    2260:	200015fa 	.word	0x200015fa
    2264:	20000338 	.word	0x20000338

00002268 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    2268:	4901      	ldr	r1, [pc, #4]	; (2270 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    226a:	7008      	strb	r0, [r1, #0]
    226c:	4770      	bx	lr
    226e:	0000      	.short	0x0000
    2270:	20000334 	.word	0x20000334

00002274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    2276:	7800      	ldrb	r0, [r0, #0]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000334 	.word	0x20000334

00002280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2280:	4b0b      	ldr	r3, [pc, #44]	; (22b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2282:	b510      	push	{r4, lr}
    2284:	789c      	ldrb	r4, [r3, #2]
    2286:	4284      	cmp	r4, r0
    2288:	d90f      	bls.n	22aa <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    228a:	4418      	add	r0, r3
    228c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2290:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2294:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2298:	700b      	strb	r3, [r1, #0]
    229a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    229e:	6011      	str	r1, [r2, #0]
    22a0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    22a4:	8090      	strh	r0, [r2, #4]
    22a6:	2001      	movs	r0, #1
    22a8:	bd10      	pop	{r4, pc}
    22aa:	2000      	movs	r0, #0
    22ac:	bd10      	pop	{r4, pc}
    22ae:	0000      	.short	0x0000
    22b0:	200015fa 	.word	0x200015fa

000022b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    22b4:	4907      	ldr	r1, [pc, #28]	; (22d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    22b6:	788a      	ldrb	r2, [r1, #2]
    22b8:	4282      	cmp	r2, r0
    22ba:	d909      	bls.n	22d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    22bc:	4408      	add	r0, r1
    22be:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    22c2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    22c6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    22ca:	f000 0001 	and.w	r0, r0, #1
    22ce:	4770      	bx	lr
    22d0:	2000      	movs	r0, #0
    22d2:	4770      	bx	lr
    22d4:	200015fa 	.word	0x200015fa

000022d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    22d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22dc:	4698      	mov	r8, r3
    22de:	4691      	mov	r9, r2
    22e0:	460c      	mov	r4, r1
    22e2:	4605      	mov	r5, r0
    22e4:	f000 f962 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    22e8:	4606      	mov	r6, r0
    22ea:	2810      	cmp	r0, #16
    22ec:	d006      	beq.n	22fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    22ee:	f000 f92d 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22f2:	2810      	cmp	r0, #16
    22f4:	d002      	beq.n	22fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    22f6:	2012      	movs	r0, #18
    22f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22fc:	4f18      	ldr	r7, [pc, #96]	; (2360 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    22fe:	78b8      	ldrb	r0, [r7, #2]
    2300:	2808      	cmp	r0, #8
    2302:	d22a      	bcs.n	235a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    2304:	2e10      	cmp	r6, #16
    2306:	d105      	bne.n	2314 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    2308:	2200      	movs	r2, #0
    230a:	4621      	mov	r1, r4
    230c:	4628      	mov	r0, r5
    230e:	f000 f931 	bl	2574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2312:	4606      	mov	r6, r0
    2314:	78bc      	ldrb	r4, [r7, #2]
    2316:	2210      	movs	r2, #16
    2318:	1c60      	adds	r0, r4, #1
    231a:	70b8      	strb	r0, [r7, #2]
    231c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    2320:	1ce8      	adds	r0, r5, #3
    2322:	4649      	mov	r1, r9
    2324:	f00b ffd8 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2328:	f105 0083 	add.w	r0, r5, #131	; 0x83
    232c:	2210      	movs	r2, #16
    232e:	4641      	mov	r1, r8
    2330:	f00b ffd2 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2334:	2110      	movs	r1, #16
    2336:	4640      	mov	r0, r8
    2338:	f00c f806 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    233c:	443c      	add	r4, r7
    233e:	2110      	movs	r1, #16
    2340:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    2344:	4648      	mov	r0, r9
    2346:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    234a:	f00b fffd 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    234e:	77e0      	strb	r0, [r4, #31]
    2350:	f804 6c29 	strb.w	r6, [r4, #-41]
    2354:	2000      	movs	r0, #0
    2356:	73e0      	strb	r0, [r4, #15]
    2358:	e7ce      	b.n	22f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    235a:	2007      	movs	r0, #7
    235c:	e7cc      	b.n	22f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    235e:	0000      	.short	0x0000
    2360:	200015fa 	.word	0x200015fa

00002364 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    2364:	4806      	ldr	r0, [pc, #24]	; (2380 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    2366:	b510      	push	{r4, lr}
    2368:	7880      	ldrb	r0, [r0, #2]
    236a:	1e40      	subs	r0, r0, #1
    236c:	b244      	sxtb	r4, r0
    236e:	e004      	b.n	237a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    2370:	b2e0      	uxtb	r0, r4
    2372:	f000 f979 	bl	2668 <CONFIG_BT_RX_STACK_SIZE+0xe8>
    2376:	1e64      	subs	r4, r4, #1
    2378:	b264      	sxtb	r4, r4
    237a:	2c00      	cmp	r4, #0
    237c:	daf8      	bge.n	2370 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    237e:	bd10      	pop	{r4, pc}
    2380:	200015fa 	.word	0x200015fa

00002384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2384:	4801      	ldr	r0, [pc, #4]	; (238c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2386:	8840      	ldrh	r0, [r0, #2]
    2388:	4770      	bx	lr
    238a:	0000      	.short	0x0000
    238c:	20000334 	.word	0x20000334

00002390 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    2390:	b138      	cbz	r0, 23a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2392:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    2396:	4288      	cmp	r0, r1
    2398:	d803      	bhi.n	23a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    239a:	4903      	ldr	r1, [pc, #12]	; (23a8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    239c:	8048      	strh	r0, [r1, #2]
    239e:	2001      	movs	r0, #1
    23a0:	4770      	bx	lr
    23a2:	2000      	movs	r0, #0
    23a4:	4770      	bx	lr
    23a6:	0000      	.short	0x0000
    23a8:	20000334 	.word	0x20000334

000023ac <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    23ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23b0:	4614      	mov	r4, r2
    23b2:	2501      	movs	r5, #1
    23b4:	2200      	movs	r2, #0
    23b6:	461f      	mov	r7, r3
    23b8:	462e      	mov	r6, r5
    23ba:	7022      	strb	r2, [r4, #0]
    23bc:	f000 f8f6 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    23c0:	2810      	cmp	r0, #16
    23c2:	d024      	beq.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23c4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 241c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    23c8:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    23cc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    23d0:	f001 0101 	and.w	r1, r1, #1
    23d4:	7021      	strb	r1, [r4, #0]
    23d6:	f000 f8b9 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    23da:	4604      	mov	r4, r0
    23dc:	2810      	cmp	r0, #16
    23de:	d016      	beq.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23e0:	b107      	cbz	r7, 23e4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    23e2:	703c      	strb	r4, [r7, #0]
    23e4:	4620      	mov	r0, r4
    23e6:	f7ff ff05 	bl	21f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23ea:	b180      	cbz	r0, 240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23ec:	f898 1002 	ldrb.w	r1, [r8, #2]
    23f0:	4640      	mov	r0, r8
    23f2:	42a1      	cmp	r1, r4
    23f4:	d903      	bls.n	23fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    23f6:	1901      	adds	r1, r0, r4
    23f8:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    23fc:	e000      	b.n	2400 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    23fe:	2600      	movs	r6, #0
    2400:	eb08 0004 	add.w	r0, r8, r4
    2404:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2408:	2801      	cmp	r0, #1
    240a:	d004      	beq.n	2416 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    240c:	2500      	movs	r5, #0
    240e:	ea45 0006 	orr.w	r0, r5, r6
    2412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2416:	2501      	movs	r5, #1
    2418:	e7f9      	b.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    241a:	0000      	.short	0x0000
    241c:	200015fa 	.word	0x200015fa

00002420 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	460d      	mov	r5, r1
    2424:	4606      	mov	r6, r0
    2426:	f000 f8c1 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    242a:	4c10      	ldr	r4, [pc, #64]	; (246c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    242c:	2810      	cmp	r0, #16
    242e:	d007      	beq.n	2440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2430:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2434:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2438:	07c9      	lsls	r1, r1, #31
    243a:	d001      	beq.n	2440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    243c:	2001      	movs	r0, #1
    243e:	bd70      	pop	{r4, r5, r6, pc}
    2440:	7861      	ldrb	r1, [r4, #1]
    2442:	2908      	cmp	r1, #8
    2444:	d210      	bcs.n	2468 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2446:	2810      	cmp	r0, #16
    2448:	d008      	beq.n	245c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    244a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    244e:	2101      	movs	r1, #1
    2450:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2454:	7860      	ldrb	r0, [r4, #1]
    2456:	1c40      	adds	r0, r0, #1
    2458:	7060      	strb	r0, [r4, #1]
    245a:	e7ef      	b.n	243c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    245c:	2201      	movs	r2, #1
    245e:	4629      	mov	r1, r5
    2460:	4630      	mov	r0, r6
    2462:	f000 f887 	bl	2574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2466:	e7f5      	b.n	2454 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2468:	2000      	movs	r0, #0
    246a:	bd70      	pop	{r4, r5, r6, pc}
    246c:	200015fa 	.word	0x200015fa

00002470 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2470:	b570      	push	{r4, r5, r6, lr}
    2472:	4d0b      	ldr	r5, [pc, #44]	; (24a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2474:	7828      	ldrb	r0, [r5, #0]
    2476:	1e40      	subs	r0, r0, #1
    2478:	b244      	sxtb	r4, r0
    247a:	e00a      	b.n	2492 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    247c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2480:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2484:	07c0      	lsls	r0, r0, #31
    2486:	d002      	beq.n	248e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2488:	b2e0      	uxtb	r0, r4
    248a:	f000 f935 	bl	26f8 <CONFIG_BT_RX_STACK_SIZE+0x178>
    248e:	1e64      	subs	r4, r4, #1
    2490:	b264      	sxtb	r4, r4
    2492:	2c00      	cmp	r4, #0
    2494:	daf2      	bge.n	247c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2496:	4903      	ldr	r1, [pc, #12]	; (24a4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2498:	2000      	movs	r0, #0
    249a:	7048      	strb	r0, [r1, #1]
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	0000      	.short	0x0000
    24a0:	200015fa 	.word	0x200015fa
    24a4:	20000334 	.word	0x20000334

000024a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    24a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24ac:	2400      	movs	r4, #0
    24ae:	4625      	mov	r5, r4
    24b0:	4e18      	ldr	r6, [pc, #96]	; (2514 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    24b2:	e029      	b.n	2508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    24b4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    24b8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    24bc:	07c0      	lsls	r0, r0, #31
    24be:	d021      	beq.n	2504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    24c0:	4628      	mov	r0, r5
    24c2:	f000 f843 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24c6:	4603      	mov	r3, r0
    24c8:	f7ff fe94 	bl	21f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    24cc:	4601      	mov	r1, r0
    24ce:	2000      	movs	r0, #0
    24d0:	2b10      	cmp	r3, #16
    24d2:	d009      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    24d4:	18f2      	adds	r2, r6, r3
    24d6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    24da:	f1bc 0f01 	cmp.w	ip, #1
    24de:	d002      	beq.n	24e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    24e0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    24e4:	b102      	cbz	r2, 24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    24e6:	2001      	movs	r0, #1
    24e8:	1e40      	subs	r0, r0, #1
    24ea:	4201      	tst	r1, r0
    24ec:	d10a      	bne.n	2504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    24ee:	480a      	ldr	r0, [pc, #40]	; (2518 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    24f0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    24f4:	5503      	strb	r3, [r0, r4]
    24f6:	4620      	mov	r0, r4
    24f8:	1c64      	adds	r4, r4, #1
    24fa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    24fe:	b2e4      	uxtb	r4, r4
    2500:	f006 f88c 	bl	861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2504:	1c6d      	adds	r5, r5, #1
    2506:	b2ed      	uxtb	r5, r5
    2508:	7830      	ldrb	r0, [r6, #0]
    250a:	42a8      	cmp	r0, r5
    250c:	d8d2      	bhi.n	24b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2512:	0000      	.short	0x0000
    2514:	200015fa 	.word	0x200015fa
    2518:	20000338 	.word	0x20000338
    251c:	4602      	mov	r2, r0
    251e:	4809      	ldr	r0, [pc, #36]	; (2544 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2520:	b510      	push	{r4, lr}
    2522:	7800      	ldrb	r0, [r0, #0]
    2524:	460b      	mov	r3, r1
    2526:	b158      	cbz	r0, 2540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2528:	4807      	ldr	r0, [pc, #28]	; (2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    252a:	7881      	ldrb	r1, [r0, #2]
    252c:	b141      	cbz	r1, 2540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    252e:	b10b      	cbz	r3, 2534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2530:	1cc0      	adds	r0, r0, #3
    2532:	e001      	b.n	2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2534:	4804      	ldr	r0, [pc, #16]	; (2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2536:	3083      	adds	r0, #131	; 0x83
    2538:	f005 fa84 	bl	7a44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    253c:	2001      	movs	r0, #1
    253e:	bd10      	pop	{r4, pc}
    2540:	2000      	movs	r0, #0
    2542:	bd10      	pop	{r4, pc}
    2544:	20000334 	.word	0x20000334
    2548:	200015fa 	.word	0x200015fa
    254c:	4908      	ldr	r1, [pc, #32]	; (2570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    254e:	b510      	push	{r4, lr}
    2550:	4603      	mov	r3, r0
    2552:	2000      	movs	r0, #0
    2554:	788a      	ldrb	r2, [r1, #2]
    2556:	e006      	b.n	2566 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2558:	180c      	adds	r4, r1, r0
    255a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    255e:	429c      	cmp	r4, r3
    2560:	d004      	beq.n	256c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2562:	1c40      	adds	r0, r0, #1
    2564:	b2c0      	uxtb	r0, r0
    2566:	4282      	cmp	r2, r0
    2568:	d8f6      	bhi.n	2558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    256a:	2010      	movs	r0, #16
    256c:	bd10      	pop	{r4, pc}
    256e:	0000      	.short	0x0000
    2570:	200015fa 	.word	0x200015fa
    2574:	b570      	push	{r4, r5, r6, lr}
    2576:	4b0c      	ldr	r3, [pc, #48]	; (25a8 <CONFIG_BT_RX_STACK_SIZE+0x28>)
    2578:	4604      	mov	r4, r0
    257a:	7818      	ldrb	r0, [r3, #0]
    257c:	1c45      	adds	r5, r0, #1
    257e:	701d      	strb	r5, [r3, #0]
    2580:	2810      	cmp	r0, #16
    2582:	d303      	bcc.n	258c <CONFIG_BT_RX_STACK_SIZE+0xc>
    2584:	2146      	movs	r1, #70	; 0x46
    2586:	2028      	movs	r0, #40	; 0x28
    2588:	f7fe fa6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    258c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2590:	680d      	ldr	r5, [r1, #0]
    2592:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2596:	8889      	ldrh	r1, [r1, #4]
    2598:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    259c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    25a0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    25a4:	bd70      	pop	{r4, r5, r6, pc}
    25a6:	0000      	.short	0x0000
    25a8:	200015fa 	.word	0x200015fa
    25ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ae:	4c1a      	ldr	r4, [pc, #104]	; (2618 <CONFIG_BT_RX_STACK_SIZE+0x98>)
    25b0:	4603      	mov	r3, r0
    25b2:	2000      	movs	r0, #0
    25b4:	7825      	ldrb	r5, [r4, #0]
    25b6:	e02a      	b.n	260e <CONFIG_BT_RX_STACK_SIZE+0x8e>
    25b8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    25bc:	780f      	ldrb	r7, [r1, #0]
    25be:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    25c2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    25c6:	ea87 070c 	eor.w	r7, r7, ip
    25ca:	405e      	eors	r6, r3
    25cc:	443e      	add	r6, r7
    25ce:	784f      	ldrb	r7, [r1, #1]
    25d0:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    25d4:	ea87 070c 	eor.w	r7, r7, ip
    25d8:	443e      	add	r6, r7
    25da:	788f      	ldrb	r7, [r1, #2]
    25dc:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    25e0:	ea87 070c 	eor.w	r7, r7, ip
    25e4:	443e      	add	r6, r7
    25e6:	78cf      	ldrb	r7, [r1, #3]
    25e8:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    25ec:	ea87 070c 	eor.w	r7, r7, ip
    25f0:	443e      	add	r6, r7
    25f2:	790f      	ldrb	r7, [r1, #4]
    25f4:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    25f8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    25fc:	ea87 070c 	eor.w	r7, r7, ip
    2600:	443e      	add	r6, r7
    2602:	794f      	ldrb	r7, [r1, #5]
    2604:	4057      	eors	r7, r2
    2606:	42f7      	cmn	r7, r6
    2608:	d004      	beq.n	2614 <CONFIG_BT_RX_STACK_SIZE+0x94>
    260a:	1c40      	adds	r0, r0, #1
    260c:	b2c0      	uxtb	r0, r0
    260e:	4285      	cmp	r5, r0
    2610:	d8d2      	bhi.n	25b8 <CONFIG_BT_RX_STACK_SIZE+0x38>
    2612:	2010      	movs	r0, #16
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	0000      	.short	0x0000
    2618:	200015fa 	.word	0x200015fa
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	4605      	mov	r5, r0
    2620:	f7ff ff94 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2624:	2810      	cmp	r0, #16
    2626:	d11c      	bne.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    2628:	4c0e      	ldr	r4, [pc, #56]	; (2664 <CONFIG_BT_RX_STACK_SIZE+0xe4>)
    262a:	7820      	ldrb	r0, [r4, #0]
    262c:	1e40      	subs	r0, r0, #1
    262e:	b2c0      	uxtb	r0, r0
    2630:	7020      	strb	r0, [r4, #0]
    2632:	42a8      	cmp	r0, r5
    2634:	d015      	beq.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    2636:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    263a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    263e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2642:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2646:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    264a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    264e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2652:	7820      	ldrb	r0, [r4, #0]
    2654:	f7ff ff7a 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2658:	2810      	cmp	r0, #16
    265a:	d002      	beq.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    265c:	4420      	add	r0, r4
    265e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	200015fa 	.word	0x200015fa
    2668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    266c:	4c21      	ldr	r4, [pc, #132]	; (26f4 <CONFIG_BT_RX_STACK_SIZE+0x174>)
    266e:	4606      	mov	r6, r0
    2670:	19a7      	adds	r7, r4, r6
    2672:	78a0      	ldrb	r0, [r4, #2]
    2674:	1e40      	subs	r0, r0, #1
    2676:	b2c5      	uxtb	r5, r0
    2678:	70a5      	strb	r5, [r4, #2]
    267a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    267e:	42ae      	cmp	r6, r5
    2680:	d02a      	beq.n	26d8 <CONFIG_BT_RX_STACK_SIZE+0x158>
    2682:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    2686:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    268a:	f10a 0103 	add.w	r1, sl, #3
    268e:	f109 0003 	add.w	r0, r9, #3
    2692:	2210      	movs	r2, #16
    2694:	f00e fc57 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2698:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    269c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    26a0:	2210      	movs	r2, #16
    26a2:	f00e fc50 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26a6:	1960      	adds	r0, r4, r5
    26a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    26ac:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    26b0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    26b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    26bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    26c0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    26c4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    26c8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    26cc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    26d0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    26d4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    26d8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    26dc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    26e0:	07c0      	lsls	r0, r0, #31
    26e2:	d104      	bne.n	26ee <CONFIG_BT_RX_STACK_SIZE+0x16e>
    26e4:	4640      	mov	r0, r8
    26e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26ea:	f7ff bf97 	b.w	261c <CONFIG_BT_RX_STACK_SIZE+0x9c>
    26ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26f2:	0000      	.short	0x0000
    26f4:	200015fa 	.word	0x200015fa
    26f8:	4905      	ldr	r1, [pc, #20]	; (2710 <CONFIG_BT_RX_STACK_SIZE+0x190>)
    26fa:	784a      	ldrb	r2, [r1, #1]
    26fc:	1e52      	subs	r2, r2, #1
    26fe:	704a      	strb	r2, [r1, #1]
    2700:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2704:	2200      	movs	r2, #0
    2706:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    270a:	f7ff bf87 	b.w	261c <CONFIG_BT_RX_STACK_SIZE+0x9c>
    270e:	0000      	.short	0x0000
    2710:	200015fa 	.word	0x200015fa

00002714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2718:	4604      	mov	r4, r0
    271a:	f100 0788 	add.w	r7, r0, #136	; 0x88
    271e:	b171      	cbz	r1, 273e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2720:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2724:	1e75      	subs	r5, r6, #1
    2726:	2901      	cmp	r1, #1
    2728:	d016      	beq.n	2758 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    272a:	2902      	cmp	r1, #2
    272c:	d025      	beq.n	277a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    272e:	2903      	cmp	r1, #3
    2730:	d110      	bne.n	2754 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2732:	4631      	mov	r1, r6
    2734:	4628      	mov	r0, r5
    2736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    273a:	f00b be71 	b.w	e420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    273e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2742:	2100      	movs	r1, #0
    2744:	f00e fc79 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2748:	4638      	mov	r0, r7
    274a:	f000 f84d 	bl	27e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    274e:	2020      	movs	r0, #32
    2750:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2758:	6921      	ldr	r1, [r4, #16]
    275a:	480d      	ldr	r0, [pc, #52]	; (2790 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    275c:	460a      	mov	r2, r1
    275e:	4408      	add	r0, r1
    2760:	fbb0 f0f1 	udiv	r0, r0, r1
    2764:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    2768:	f640 30b8 	movw	r0, #3000	; 0xbb8
    276c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    2770:	8b63      	ldrh	r3, [r4, #26]
    2772:	4638      	mov	r0, r7
    2774:	f000 f80e 	bl	2794 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    2778:	e7db      	b.n	2732 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    277a:	6901      	ldr	r1, [r0, #16]
    277c:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    2780:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    2784:	4638      	mov	r0, r7
    2786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    278a:	f000 b803 	b.w	2794 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    278e:	0000      	.short	0x0000
    2790:	01c9c37f 	.word	0x01c9c37f
    2794:	b510      	push	{r4, lr}
    2796:	2400      	movs	r4, #0
    2798:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    279c:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    27a0:	434c      	muls	r4, r1
    27a2:	fbb4 f4f2 	udiv	r4, r4, r2
    27a6:	f820 4912 	strh.w	r4, [r0], #-18
    27aa:	f240 2471 	movw	r4, #625	; 0x271
    27ae:	4363      	muls	r3, r4
    27b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27b4:	1e5b      	subs	r3, r3, #1
    27b6:	fbb3 f3f2 	udiv	r3, r3, r2
    27ba:	8203      	strh	r3, [r0, #16]
    27bc:	4b09      	ldr	r3, [pc, #36]	; (27e4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    27be:	fbb3 f3f2 	udiv	r3, r3, r2
    27c2:	1c5b      	adds	r3, r3, #1
    27c4:	82c3      	strh	r3, [r0, #22]
    27c6:	8903      	ldrh	r3, [r0, #8]
    27c8:	4363      	muls	r3, r4
    27ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27ce:	1e5b      	subs	r3, r3, #1
    27d0:	fbb3 f3f2 	udiv	r3, r3, r2
    27d4:	6043      	str	r3, [r0, #4]
    27d6:	6803      	ldr	r3, [r0, #0]
    27d8:	434b      	muls	r3, r1
    27da:	fbb3 f1f2 	udiv	r1, r3, r2
    27de:	6001      	str	r1, [r0, #0]
    27e0:	bd10      	pop	{r4, pc}
    27e2:	0000      	.short	0x0000
    27e4:	02625a00 	.word	0x02625a00
    27e8:	2101      	movs	r1, #1
    27ea:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    27ee:	490b      	ldr	r1, [pc, #44]	; (281c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    27f0:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    27f4:	2107      	movs	r1, #7
    27f6:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    27fa:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    27fe:	780a      	ldrb	r2, [r1, #0]
    2800:	f022 0204 	bic.w	r2, r2, #4
    2804:	700a      	strb	r2, [r1, #0]
    2806:	21fe      	movs	r1, #254	; 0xfe
    2808:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    280c:	217f      	movs	r1, #127	; 0x7f
    280e:	7641      	strb	r1, [r0, #25]
    2810:	4903      	ldr	r1, [pc, #12]	; (2820 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2812:	6081      	str	r1, [r0, #8]
    2814:	2100      	movs	r1, #0
    2816:	e9c0 1100 	strd	r1, r1, [r0]
    281a:	4770      	bx	lr
    281c:	3404492f 	.word	0x3404492f
    2820:	fffce000 	.word	0xfffce000

00002824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2824:	4902      	ldr	r1, [pc, #8]	; (2830 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2826:	f991 1000 	ldrsb.w	r1, [r1]
    282a:	f00b bdaa 	b.w	e382 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x3a>
    282e:	0000      	.short	0x0000
    2830:	20000354 	.word	0x20000354

00002834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2834:	b508      	push	{r3, lr}
    2836:	207f      	movs	r0, #127	; 0x7f
    2838:	f88d 0000 	strb.w	r0, [sp]
    283c:	4668      	mov	r0, sp
    283e:	f005 fded 	bl	841c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2842:	b140      	cbz	r0, 2856 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2844:	4805      	ldr	r0, [pc, #20]	; (285c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2846:	7840      	ldrb	r0, [r0, #1]
    2848:	4240      	negs	r0, r0
    284a:	b241      	sxtb	r1, r0
    284c:	f99d 0000 	ldrsb.w	r0, [sp]
    2850:	f00b fd97 	bl	e382 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x3a>
    2854:	bd08      	pop	{r3, pc}
    2856:	f99d 0000 	ldrsb.w	r0, [sp]
    285a:	bd08      	pop	{r3, pc}
    285c:	20000354 	.word	0x20000354

00002860 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    2860:	4909      	ldr	r1, [pc, #36]	; (2888 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    2862:	b508      	push	{r3, lr}
    2864:	7809      	ldrb	r1, [r1, #0]
    2866:	f88d 1000 	strb.w	r1, [sp]
    286a:	9900      	ldr	r1, [sp, #0]
    286c:	9100      	str	r1, [sp, #0]
    286e:	f89d 1000 	ldrb.w	r1, [sp]
    2872:	b109      	cbz	r1, 2878 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    2874:	2000      	movs	r0, #0
    2876:	bd08      	pop	{r3, pc}
    2878:	4903      	ldr	r1, [pc, #12]	; (2888 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    287a:	f8d1 2001 	ldr.w	r2, [r1, #1]
    287e:	6002      	str	r2, [r0, #0]
    2880:	7949      	ldrb	r1, [r1, #5]
    2882:	7101      	strb	r1, [r0, #4]
    2884:	2001      	movs	r0, #1
    2886:	bd08      	pop	{r3, pc}
    2888:	20000356 	.word	0x20000356

0000288c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    288c:	4905      	ldr	r1, [pc, #20]	; (28a4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    288e:	22ff      	movs	r2, #255	; 0xff
    2890:	700a      	strb	r2, [r1, #0]
    2892:	460a      	mov	r2, r1
    2894:	6803      	ldr	r3, [r0, #0]
    2896:	f8c2 3001 	str.w	r3, [r2, #1]
    289a:	7900      	ldrb	r0, [r0, #4]
    289c:	7150      	strb	r0, [r2, #5]
    289e:	2000      	movs	r0, #0
    28a0:	7008      	strb	r0, [r1, #0]
    28a2:	4770      	bx	lr
    28a4:	20000356 	.word	0x20000356
    28a8:	b570      	push	{r4, r5, r6, lr}
    28aa:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    28ae:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    28b2:	2401      	movs	r4, #1
    28b4:	fb03 2101 	mla	r1, r3, r1, r2
    28b8:	2225      	movs	r2, #37	; 0x25
    28ba:	fbb1 f3f2 	udiv	r3, r1, r2
    28be:	fb02 1113 	mls	r1, r2, r3, r1
    28c2:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    28c6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    28ca:	f001 0307 	and.w	r3, r1, #7
    28ce:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    28d2:	fa04 f303 	lsl.w	r3, r4, r3
    28d6:	421a      	tst	r2, r3
    28d8:	d004      	beq.n	28e4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    28da:	bf00      	nop
    28dc:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    28e0:	2000      	movs	r0, #0
    28e2:	bd70      	pop	{r4, r5, r6, pc}
    28e4:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    28e8:	fbb1 f3f2 	udiv	r3, r1, r2
    28ec:	fb02 1113 	mls	r1, r2, r3, r1
    28f0:	1c49      	adds	r1, r1, #1
    28f2:	b2c9      	uxtb	r1, r1
    28f4:	2300      	movs	r3, #0
    28f6:	18c5      	adds	r5, r0, r3
    28f8:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    28fc:	428a      	cmp	r2, r1
    28fe:	d312      	bcc.n	2926 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2900:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2904:	2200      	movs	r2, #0
    2906:	bf00      	nop
    2908:	fa04 f602 	lsl.w	r6, r4, r2
    290c:	4235      	tst	r5, r6
    290e:	d001      	beq.n	2914 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2910:	1e49      	subs	r1, r1, #1
    2912:	b2c9      	uxtb	r1, r1
    2914:	b121      	cbz	r1, 2920 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2916:	1c52      	adds	r2, r2, #1
    2918:	b2d2      	uxtb	r2, r2
    291a:	2a08      	cmp	r2, #8
    291c:	d3f4      	bcc.n	2908 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    291e:	e004      	b.n	292a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2920:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2924:	e7da      	b.n	28dc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2926:	1a89      	subs	r1, r1, r2
    2928:	b2c9      	uxtb	r1, r1
    292a:	1c5b      	adds	r3, r3, #1
    292c:	b2db      	uxtb	r3, r3
    292e:	2b05      	cmp	r3, #5
    2930:	d3e1      	bcc.n	28f6 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2932:	201f      	movs	r0, #31
    2934:	bd70      	pop	{r4, r5, r6, pc}
    2936:	0000      	movs	r0, r0
    2938:	b570      	push	{r4, r5, r6, lr}
    293a:	1c49      	adds	r1, r1, #1
    293c:	2300      	movs	r3, #0
    293e:	b2c9      	uxtb	r1, r1
    2940:	2401      	movs	r4, #1
    2942:	18c5      	adds	r5, r0, r3
    2944:	79aa      	ldrb	r2, [r5, #6]
    2946:	428a      	cmp	r2, r1
    2948:	d312      	bcc.n	2970 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    294a:	f895 5001 	ldrb.w	r5, [r5, #1]
    294e:	2200      	movs	r2, #0
    2950:	fa04 f602 	lsl.w	r6, r4, r2
    2954:	4235      	tst	r5, r6
    2956:	d001      	beq.n	295c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    2958:	1e49      	subs	r1, r1, #1
    295a:	b2c9      	uxtb	r1, r1
    295c:	b121      	cbz	r1, 2968 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    295e:	1c52      	adds	r2, r2, #1
    2960:	b2d2      	uxtb	r2, r2
    2962:	2a08      	cmp	r2, #8
    2964:	d3f4      	bcc.n	2950 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    2966:	e005      	b.n	2974 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    2968:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    296c:	b2c0      	uxtb	r0, r0
    296e:	bd70      	pop	{r4, r5, r6, pc}
    2970:	1a89      	subs	r1, r1, r2
    2972:	b2c9      	uxtb	r1, r1
    2974:	1c5b      	adds	r3, r3, #1
    2976:	b2db      	uxtb	r3, r3
    2978:	2b05      	cmp	r3, #5
    297a:	d3e2      	bcc.n	2942 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    297c:	219d      	movs	r1, #157	; 0x9d
    297e:	2046      	movs	r0, #70	; 0x46
    2980:	f7fe f870 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002984 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2984:	7841      	ldrb	r1, [r0, #1]
    2986:	b141      	cbz	r1, 299a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2988:	78c0      	ldrb	r0, [r0, #3]
    298a:	282b      	cmp	r0, #43	; 0x2b
    298c:	d203      	bcs.n	2996 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    298e:	4a04      	ldr	r2, [pc, #16]	; (29a0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2990:	5c10      	ldrb	r0, [r2, r0]
    2992:	4288      	cmp	r0, r1
    2994:	d101      	bne.n	299a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2996:	2001      	movs	r0, #1
    2998:	4770      	bx	lr
    299a:	2000      	movs	r0, #0
    299c:	4770      	bx	lr
    299e:	0000      	.short	0x0000
    29a0:	00011184 	.word	0x00011184

000029a4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    29a4:	b510      	push	{r4, lr}
    29a6:	2201      	movs	r2, #1
    29a8:	70c1      	strb	r1, [r0, #3]
    29aa:	292b      	cmp	r1, #43	; 0x2b
    29ac:	d202      	bcs.n	29b4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    29ae:	4a06      	ldr	r2, [pc, #24]	; (29c8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    29b0:	5c52      	ldrb	r2, [r2, r1]
    29b2:	e006      	b.n	29c2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    29b4:	29ff      	cmp	r1, #255	; 0xff
    29b6:	d004      	beq.n	29c2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    29b8:	f240 4175 	movw	r1, #1141	; 0x475
    29bc:	202a      	movs	r0, #42	; 0x2a
    29be:	f7fe f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29c2:	7042      	strb	r2, [r0, #1]
    29c4:	bd10      	pop	{r4, pc}
    29c6:	0000      	.short	0x0000
    29c8:	00011184 	.word	0x00011184

000029cc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    29cc:	4904      	ldr	r1, [pc, #16]	; (29e0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    29ce:	7c89      	ldrb	r1, [r1, #18]
    29d0:	0749      	lsls	r1, r1, #29
    29d2:	d400      	bmi.n	29d6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    29d4:	b108      	cbz	r0, 29da <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    29d6:	2000      	movs	r0, #0
    29d8:	4770      	bx	lr
    29da:	2001      	movs	r0, #1
    29dc:	4770      	bx	lr
    29de:	0000      	.short	0x0000
    29e0:	200010cc 	.word	0x200010cc

000029e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    29e4:	4803      	ldr	r0, [pc, #12]	; (29f4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    29e6:	7c80      	ldrb	r0, [r0, #18]
    29e8:	0780      	lsls	r0, r0, #30
    29ea:	d401      	bmi.n	29f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    29ec:	2001      	movs	r0, #1
    29ee:	4770      	bx	lr
    29f0:	2000      	movs	r0, #0
    29f2:	4770      	bx	lr
    29f4:	200010cc 	.word	0x200010cc

000029f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    29f8:	4803      	ldr	r0, [pc, #12]	; (2a08 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    29fa:	7c80      	ldrb	r0, [r0, #18]
    29fc:	07c0      	lsls	r0, r0, #31
    29fe:	d001      	beq.n	2a04 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2a00:	2000      	movs	r0, #0
    2a02:	4770      	bx	lr
    2a04:	2001      	movs	r0, #1
    2a06:	4770      	bx	lr
    2a08:	200010cc 	.word	0x200010cc
    2a0c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2a10:	4688      	mov	r8, r1
    2a12:	4699      	mov	r9, r3
    2a14:	4615      	mov	r5, r2
    2a16:	4604      	mov	r4, r0
    2a18:	a901      	add	r1, sp, #4
    2a1a:	f00b faf8 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2a1e:	bbb0      	cbnz	r0, 2a8e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2a20:	9e02      	ldr	r6, [sp, #8]
    2a22:	2001      	movs	r0, #1
    2a24:	3688      	adds	r6, #136	; 0x88
    2a26:	b17d      	cbz	r5, 2a48 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2a28:	4620      	mov	r0, r4
    2a2a:	f7fe fbfd 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a2e:	0004      	movs	r4, r0
    2a30:	d00d      	beq.n	2a4e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2a32:	4629      	mov	r1, r5
    2a34:	f00a ffd1 	bl	d9da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2a38:	b118      	cbz	r0, 2a42 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2a3a:	4918      	ldr	r1, [pc, #96]	; (2a9c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2a3c:	8849      	ldrh	r1, [r1, #2]
    2a3e:	42a9      	cmp	r1, r5
    2a40:	d207      	bcs.n	2a52 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2a42:	2000      	movs	r0, #0
    2a44:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a48:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2a4c:	e01f      	b.n	2a8e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2a4e:	2167      	movs	r1, #103	; 0x67
    2a50:	e020      	b.n	2a94 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2a52:	4601      	mov	r1, r0
    2a54:	466a      	mov	r2, sp
    2a56:	4620      	mov	r0, r4
    2a58:	f00a ffb8 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a5c:	9800      	ldr	r0, [sp, #0]
    2a5e:	2700      	movs	r7, #0
    2a60:	8007      	strh	r7, [r0, #0]
    2a62:	7087      	strb	r7, [r0, #2]
    2a64:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2a68:	b109      	cbz	r1, 2a6e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2a6a:	f04f 0802 	mov.w	r8, #2
    2a6e:	4641      	mov	r1, r8
    2a70:	f00b fde3 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2a74:	9800      	ldr	r0, [sp, #0]
    2a76:	462a      	mov	r2, r5
    2a78:	4649      	mov	r1, r9
    2a7a:	1cc0      	adds	r0, r0, #3
    2a7c:	f00e fa63 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a80:	4620      	mov	r0, r4
    2a82:	4629      	mov	r1, r5
    2a84:	f00a ff60 	bl	d948 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2a88:	b118      	cbz	r0, 2a92 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    2a8a:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2a8e:	2001      	movs	r0, #1
    2a90:	e7d8      	b.n	2a44 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2a92:	217c      	movs	r1, #124	; 0x7c
    2a94:	202b      	movs	r0, #43	; 0x2b
    2a96:	f7fd ffe5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a9a:	0000      	.short	0x0000
    2a9c:	200010cc 	.word	0x200010cc

00002aa0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2aa0:	4809      	ldr	r0, [pc, #36]	; (2ac8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2aa2:	b082      	sub	sp, #8
    2aa4:	7a00      	ldrb	r0, [r0, #8]
    2aa6:	f88d 0000 	strb.w	r0, [sp]
    2aaa:	9800      	ldr	r0, [sp, #0]
    2aac:	9000      	str	r0, [sp, #0]
    2aae:	f89d 0000 	ldrb.w	r0, [sp]
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d105      	bne.n	2ac2 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2ab6:	2202      	movs	r2, #2
    2ab8:	4904      	ldr	r1, [pc, #16]	; (2acc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2aba:	4803      	ldr	r0, [pc, #12]	; (2ac8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2abc:	b002      	add	sp, #8
    2abe:	f00b bdef 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ac2:	b002      	add	sp, #8
    2ac4:	4770      	bx	lr
    2ac6:	0000      	.short	0x0000
    2ac8:	200010e4 	.word	0x200010e4
    2acc:	0000e6e7 	.word	0x0000e6e7

00002ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ad4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2c94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    2ad8:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2c98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2adc:	4683      	mov	fp, r0
    2ade:	f04f 0901 	mov.w	r9, #1
    2ae2:	2600      	movs	r6, #0
    2ae4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2ae8:	7a00      	ldrb	r0, [r0, #8]
    2aea:	f88d 0000 	strb.w	r0, [sp]
    2aee:	9800      	ldr	r0, [sp, #0]
    2af0:	9000      	str	r0, [sp, #0]
    2af2:	f89d 1000 	ldrb.w	r1, [sp]
    2af6:	292a      	cmp	r1, #42	; 0x2a
    2af8:	d106      	bne.n	2b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2afa:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2afe:	b119      	cbz	r1, 2b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2b00:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2b04:	2800      	cmp	r0, #0
    2b06:	d06f      	beq.n	2be8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2b08:	2700      	movs	r7, #0
    2b0a:	f88d 6000 	strb.w	r6, [sp]
    2b0e:	4668      	mov	r0, sp
    2b10:	f000 f924 	bl	2d5c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2b14:	f89d 1000 	ldrb.w	r1, [sp]
    2b18:	2900      	cmp	r1, #0
    2b1a:	d1f8      	bne.n	2b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d063      	beq.n	2be8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2b20:	4604      	mov	r4, r0
    2b22:	7a00      	ldrb	r0, [r0, #8]
    2b24:	f88d 0000 	strb.w	r0, [sp]
    2b28:	9800      	ldr	r0, [sp, #0]
    2b2a:	9000      	str	r0, [sp, #0]
    2b2c:	f89d 5000 	ldrb.w	r5, [sp]
    2b30:	1ea8      	subs	r0, r5, #2
    2b32:	2830      	cmp	r0, #48	; 0x30
    2b34:	d27b      	bcs.n	2c2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2b36:	e8df f000 	tbb	[pc, r0]
    2b3a:	3b18      	.short	0x3b18
    2b3c:	97359727 	.word	0x97359727
    2b40:	7b977b3b 	.word	0x7b977b3b
    2b44:	7b417b7b 	.word	0x7b417b7b
    2b48:	97359797 	.word	0x97359797
    2b4c:	35977b7b 	.word	0x35977b7b
    2b50:	7b979797 	.word	0x7b979797
    2b54:	7b97975a 	.word	0x7b97975a
    2b58:	8f7b7b97 	.word	0x8f7b7b97
    2b5c:	2197977b 	.word	0x2197977b
    2b60:	97816963 	.word	0x97816963
    2b64:	97979797 	.word	0x97979797
    2b68:	6397      	.short	0x6397
    2b6a:	6862      	ldr	r2, [r4, #4]
    2b6c:	b912      	cbnz	r2, 2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2b6e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    2b72:	e076      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2b74:	4659      	mov	r1, fp
    2b76:	4620      	mov	r0, r4
    2b78:	4790      	blx	r2
    2b7a:	e050      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2b7c:	6862      	ldr	r2, [r4, #4]
    2b7e:	2a00      	cmp	r2, #0
    2b80:	d1f8      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2b82:	f240 11ad 	movw	r1, #429	; 0x1ad
    2b86:	e06c      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2b88:	f001 ff70 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    2b8c:	b128      	cbz	r0, 2b9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2b8e:	6862      	ldr	r2, [r4, #4]
    2b90:	b12a      	cbz	r2, 2b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    2b92:	4659      	mov	r1, fp
    2b94:	4620      	mov	r0, r4
    2b96:	4790      	blx	r2
    2b98:	e07a      	b.n	2c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2b9a:	2701      	movs	r7, #1
    2b9c:	e03f      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2b9e:	f240 2133 	movw	r1, #563	; 0x233
    2ba2:	e05e      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ba4:	6862      	ldr	r2, [r4, #4]
    2ba6:	2a00      	cmp	r2, #0
    2ba8:	d1e4      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2baa:	f240 213f 	movw	r1, #575	; 0x23f
    2bae:	e058      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bb0:	6862      	ldr	r2, [r4, #4]
    2bb2:	2a00      	cmp	r2, #0
    2bb4:	d1de      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2bb6:	f240 214b 	movw	r1, #587	; 0x24b
    2bba:	e052      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bbc:	6860      	ldr	r0, [r4, #4]
    2bbe:	465d      	mov	r5, fp
    2bc0:	b180      	cbz	r0, 2be4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2bc2:	8804      	ldrh	r4, [r0, #0]
    2bc4:	4620      	mov	r0, r4
    2bc6:	f7fe fb2f 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2bca:	b170      	cbz	r0, 2bea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2bcc:	706e      	strb	r6, [r5, #1]
    2bce:	220f      	movs	r2, #15
    2bd0:	702a      	strb	r2, [r5, #0]
    2bd2:	80ec      	strh	r4, [r5, #6]
    2bd4:	f8a5 9008 	strh.w	r9, [r5, #8]
    2bd8:	4631      	mov	r1, r6
    2bda:	f885 9004 	strb.w	r9, [r5, #4]
    2bde:	f00a ff93 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2be2:	e055      	b.n	2c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2be4:	21ce      	movs	r1, #206	; 0xce
    2be6:	e03c      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2be8:	e031      	b.n	2c4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2bea:	21ae      	movs	r1, #174	; 0xae
    2bec:	e039      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bee:	6862      	ldr	r2, [r4, #4]
    2bf0:	b11a      	cbz	r2, 2bfa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2bf2:	4659      	mov	r1, fp
    2bf4:	4620      	mov	r0, r4
    2bf6:	4790      	blx	r2
    2bf8:	e7cf      	b.n	2b9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2bfa:	f240 2163 	movw	r1, #611	; 0x263
    2bfe:	e030      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c00:	6862      	ldr	r2, [r4, #4]
    2c02:	2a00      	cmp	r2, #0
    2c04:	d1b6      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c06:	f240 216f 	movw	r1, #623	; 0x26f
    2c0a:	e02a      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c0c:	f88b 6001 	strb.w	r6, [fp, #1]
    2c10:	211a      	movs	r1, #26
    2c12:	f88b 1000 	strb.w	r1, [fp]
    2c16:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2c1a:	f8cb 1004 	str.w	r1, [fp, #4]
    2c1e:	7226      	strb	r6, [r4, #8]
    2c20:	2d21      	cmp	r5, #33	; 0x21
    2c22:	d024      	beq.n	2c6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2c24:	2d14      	cmp	r5, #20
    2c26:	d025      	beq.n	2c74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2c28:	2d22      	cmp	r5, #34	; 0x22
    2c2a:	d02a      	beq.n	2c82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2c2c:	e02e      	b.n	2c8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2c2e:	e01b      	b.n	2c68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2c30:	6862      	ldr	r2, [r4, #4]
    2c32:	2a00      	cmp	r2, #0
    2c34:	d19e      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c36:	f240 2196 	movw	r1, #662	; 0x296
    2c3a:	e012      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c3c:	4817      	ldr	r0, [pc, #92]	; (2c9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2c3e:	6802      	ldr	r2, [r0, #0]
    2c40:	b122      	cbz	r2, 2c4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2c42:	6860      	ldr	r0, [r4, #4]
    2c44:	b128      	cbz	r0, 2c52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2c46:	8800      	ldrh	r0, [r0, #0]
    2c48:	4659      	mov	r1, fp
    2c4a:	4790      	blx	r2
    2c4c:	2002      	movs	r0, #2
    2c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c52:	f240 219f 	movw	r1, #671	; 0x29f
    2c56:	e004      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c58:	6862      	ldr	r2, [r4, #4]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d18a      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c5e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2c62:	2010      	movs	r0, #16
    2c64:	f7fd fefe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c68:	f240 21bd 	movw	r1, #701	; 0x2bd
    2c6c:	e7f9      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c6e:	f7ff feb9 	bl	29e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2c72:	e008      	b.n	2c86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2c74:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2c78:	f000 0001 	and.w	r0, r0, #1
    2c7c:	f7ff fea6 	bl	29cc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2c80:	e001      	b.n	2c86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2c82:	f7ff feb9 	bl	29f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2c86:	2800      	cmp	r0, #0
    2c88:	f47f af2c 	bne.w	2ae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2c8c:	2f00      	cmp	r7, #0
    2c8e:	d1fb      	bne.n	2c88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2c90:	2004      	movs	r0, #4
    2c92:	e7dc      	b.n	2c4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2c94:	200010f8 	.word	0x200010f8
    2c98:	200010cc 	.word	0x200010cc
    2c9c:	200000b0 	.word	0x200000b0

00002ca0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ca0:	4901      	ldr	r1, [pc, #4]	; (2ca8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ca2:	7008      	strb	r0, [r1, #0]
    2ca4:	f000 b8b0 	b.w	2e08 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2ca8:	2000035c 	.word	0x2000035c

00002cac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2cac:	4902      	ldr	r1, [pc, #8]	; (2cb8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2cae:	4801      	ldr	r0, [pc, #4]	; (2cb4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2cb0:	6008      	str	r0, [r1, #0]
    2cb2:	4770      	bx	lr
    2cb4:	00002cbd 	.word	0x00002cbd
    2cb8:	200000b0 	.word	0x200000b0
    2cbc:	b538      	push	{r3, r4, r5, lr}
    2cbe:	000d      	movs	r5, r1
    2cc0:	d014      	beq.n	2cec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2cc2:	80a8      	strh	r0, [r5, #4]
    2cc4:	2100      	movs	r1, #0
    2cc6:	7269      	strb	r1, [r5, #9]
    2cc8:	f7fe fa98 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2ccc:	4604      	mov	r4, r0
    2cce:	f00a fe5f 	bl	d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2cd2:	b168      	cbz	r0, 2cf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2cd4:	4601      	mov	r1, r0
    2cd6:	466a      	mov	r2, sp
    2cd8:	4620      	mov	r0, r4
    2cda:	f00a fe77 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2cde:	80e8      	strh	r0, [r5, #6]
    2ce0:	b148      	cbz	r0, 2cf6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2ce2:	28fb      	cmp	r0, #251	; 0xfb
    2ce4:	d90a      	bls.n	2cfc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2ce6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2cea:	e032      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cec:	21fc      	movs	r1, #252	; 0xfc
    2cee:	e030      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cf0:	f240 1105 	movw	r1, #261	; 0x105
    2cf4:	e02d      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cf6:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2cfa:	e02a      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cfc:	9800      	ldr	r0, [sp, #0]
    2cfe:	f00b fc5a 	bl	e5b6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2d02:	2801      	cmp	r0, #1
    2d04:	d004      	beq.n	2d10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2d06:	2802      	cmp	r0, #2
    2d08:	d002      	beq.n	2d10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2d0a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2d0e:	e020      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d10:	7228      	strb	r0, [r5, #8]
    2d12:	6828      	ldr	r0, [r5, #0]
    2d14:	b1a8      	cbz	r0, 2d42 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2d16:	9900      	ldr	r1, [sp, #0]
    2d18:	88ea      	ldrh	r2, [r5, #6]
    2d1a:	1cc9      	adds	r1, r1, #3
    2d1c:	f00e f913 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2d20:	4620      	mov	r0, r4
    2d22:	f00a fdfd 	bl	d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2d26:	b178      	cbz	r0, 2d48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2d28:	4620      	mov	r0, r4
    2d2a:	2100      	movs	r1, #0
    2d2c:	f00a feec 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2d30:	b168      	cbz	r0, 2d4e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2d32:	4809      	ldr	r0, [pc, #36]	; (2d58 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2d34:	7cc1      	ldrb	r1, [r0, #19]
    2d36:	2900      	cmp	r1, #0
    2d38:	d002      	beq.n	2d40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2d3a:	8a81      	ldrh	r1, [r0, #20]
    2d3c:	1e49      	subs	r1, r1, #1
    2d3e:	8281      	strh	r1, [r0, #20]
    2d40:	bd38      	pop	{r3, r4, r5, pc}
    2d42:	f240 1123 	movw	r1, #291	; 0x123
    2d46:	e004      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d48:	f44f 7194 	mov.w	r1, #296	; 0x128
    2d4c:	e001      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d4e:	f240 112d 	movw	r1, #301	; 0x12d
    2d52:	2010      	movs	r0, #16
    2d54:	f7fd fe86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d58:	200010cc 	.word	0x200010cc
    2d5c:	b538      	push	{r3, r4, r5, lr}
    2d5e:	4602      	mov	r2, r0
    2d60:	4b11      	ldr	r3, [pc, #68]	; (2da8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2d62:	2000      	movs	r0, #0
    2d64:	7010      	strb	r0, [r2, #0]
    2d66:	6858      	ldr	r0, [r3, #4]
    2d68:	7a01      	ldrb	r1, [r0, #8]
    2d6a:	f88d 1000 	strb.w	r1, [sp]
    2d6e:	9900      	ldr	r1, [sp, #0]
    2d70:	9100      	str	r1, [sp, #0]
    2d72:	f89d 5000 	ldrb.w	r5, [sp]
    2d76:	2401      	movs	r4, #1
    2d78:	2d01      	cmp	r5, #1
    2d7a:	d006      	beq.n	2d8a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2d7c:	f3ef 8110 	mrs	r1, PRIMASK
    2d80:	b672      	cpsid	i
    2d82:	6805      	ldr	r5, [r0, #0]
    2d84:	605d      	str	r5, [r3, #4]
    2d86:	b111      	cbz	r1, 2d8e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2d88:	e002      	b.n	2d90 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2d8a:	2000      	movs	r0, #0
    2d8c:	bd38      	pop	{r3, r4, r5, pc}
    2d8e:	b662      	cpsie	i
    2d90:	7a01      	ldrb	r1, [r0, #8]
    2d92:	f88d 1000 	strb.w	r1, [sp]
    2d96:	9900      	ldr	r1, [sp, #0]
    2d98:	9100      	str	r1, [sp, #0]
    2d9a:	f89d 3000 	ldrb.w	r3, [sp]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d1f4      	bne.n	2d8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2da2:	7014      	strb	r4, [r2, #0]
    2da4:	bd38      	pop	{r3, r4, r5, pc}
    2da6:	0000      	.short	0x0000
    2da8:	200010f8 	.word	0x200010f8
    2dac:	b538      	push	{r3, r4, r5, lr}
    2dae:	b1d0      	cbz	r0, 2de6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2db0:	6041      	str	r1, [r0, #4]
    2db2:	f100 0108 	add.w	r1, r0, #8
    2db6:	700a      	strb	r2, [r1, #0]
    2db8:	f3ef 8310 	mrs	r3, PRIMASK
    2dbc:	b672      	cpsid	i
    2dbe:	4c10      	ldr	r4, [pc, #64]	; (2e00 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2dc0:	6004      	str	r4, [r0, #0]
    2dc2:	1f21      	subs	r1, r4, #4
    2dc4:	684a      	ldr	r2, [r1, #4]
    2dc6:	b14a      	cbz	r2, 2ddc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2dc8:	7a12      	ldrb	r2, [r2, #8]
    2dca:	f88d 2000 	strb.w	r2, [sp]
    2dce:	9a00      	ldr	r2, [sp, #0]
    2dd0:	9200      	str	r2, [sp, #0]
    2dd2:	f89d 5000 	ldrb.w	r5, [sp]
    2dd6:	2d01      	cmp	r5, #1
    2dd8:	d100      	bne.n	2ddc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2dda:	600c      	str	r4, [r1, #0]
    2ddc:	680a      	ldr	r2, [r1, #0]
    2dde:	6010      	str	r0, [r2, #0]
    2de0:	6008      	str	r0, [r1, #0]
    2de2:	b12b      	cbz	r3, 2df0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2de4:	e005      	b.n	2df2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2de6:	f240 21e2 	movw	r1, #738	; 0x2e2
    2dea:	2010      	movs	r0, #16
    2dec:	f7fd fe3a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2df0:	b662      	cpsie	i
    2df2:	4804      	ldr	r0, [pc, #16]	; (2e04 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2df4:	7800      	ldrb	r0, [r0, #0]
    2df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2dfa:	f009 bdf9 	b.w	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dfe:	0000      	.short	0x0000
    2e00:	200010fc 	.word	0x200010fc
    2e04:	2000035c 	.word	0x2000035c
    2e08:	4808      	ldr	r0, [pc, #32]	; (2e2c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2e0a:	b510      	push	{r4, lr}
    2e0c:	2100      	movs	r1, #0
    2e0e:	6141      	str	r1, [r0, #20]
    2e10:	6181      	str	r1, [r0, #24]
    2e12:	61c1      	str	r1, [r0, #28]
    2e14:	6201      	str	r1, [r0, #32]
    2e16:	2212      	movs	r2, #18
    2e18:	f00e f90f 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2e1c:	4803      	ldr	r0, [pc, #12]	; (2e2c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2e1e:	3014      	adds	r0, #20
    2e20:	2101      	movs	r1, #1
    2e22:	7301      	strb	r1, [r0, #12]
    2e24:	1d01      	adds	r1, r0, #4
    2e26:	6041      	str	r1, [r0, #4]
    2e28:	6001      	str	r1, [r0, #0]
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	200010e4 	.word	0x200010e4

00002e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2e30:	b4f0      	push	{r4, r5, r6, r7}
    2e32:	8150      	strh	r0, [r2, #10]
    2e34:	890c      	ldrh	r4, [r1, #8]
    2e36:	4613      	mov	r3, r2
    2e38:	8194      	strh	r4, [r2, #12]
    2e3a:	898a      	ldrh	r2, [r1, #12]
    2e3c:	81da      	strh	r2, [r3, #14]
    2e3e:	8948      	ldrh	r0, [r1, #10]
    2e40:	8218      	strh	r0, [r3, #16]
    2e42:	89cd      	ldrh	r5, [r1, #14]
    2e44:	825d      	strh	r5, [r3, #18]
    2e46:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2e48:	42ae      	cmp	r6, r5
    2e4a:	d108      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e4c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2e4e:	4285      	cmp	r5, r0
    2e50:	d105      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e52:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2e54:	4295      	cmp	r5, r2
    2e56:	d102      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e58:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2e5a:	42a2      	cmp	r2, r4
    2e5c:	d001      	beq.n	2e62 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2e5e:	2201      	movs	r2, #1
    2e60:	e000      	b.n	2e64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2e62:	2200      	movs	r2, #0
    2e64:	751a      	strb	r2, [r3, #20]
    2e66:	8548      	strh	r0, [r1, #42]	; 0x2a
    2e68:	8a58      	ldrh	r0, [r3, #18]
    2e6a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2e6c:	8998      	ldrh	r0, [r3, #12]
    2e6e:	8588      	strh	r0, [r1, #44]	; 0x2c
    2e70:	89d8      	ldrh	r0, [r3, #14]
    2e72:	8608      	strh	r0, [r1, #48]	; 0x30
    2e74:	bcf0      	pop	{r4, r5, r6, r7}
    2e76:	2214      	movs	r2, #20
    2e78:	4901      	ldr	r1, [pc, #4]	; (2e80 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2e7a:	4618      	mov	r0, r3
    2e7c:	f00b bc24 	b.w	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2e80:	0000e8a5 	.word	0x0000e8a5

00002e84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2e84:	8150      	strh	r0, [r2, #10]
    2e86:	8a88      	ldrh	r0, [r1, #20]
    2e88:	8190      	strh	r0, [r2, #12]
    2e8a:	8ac8      	ldrh	r0, [r1, #22]
    2e8c:	81d0      	strh	r0, [r2, #14]
    2e8e:	8b08      	ldrh	r0, [r1, #24]
    2e90:	8210      	strh	r0, [r2, #16]
    2e92:	8b48      	ldrh	r0, [r1, #26]
    2e94:	4613      	mov	r3, r2
    2e96:	8250      	strh	r0, [r2, #18]
    2e98:	2221      	movs	r2, #33	; 0x21
    2e9a:	4902      	ldr	r1, [pc, #8]	; (2ea4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2e9c:	4618      	mov	r0, r3
    2e9e:	f00b bbff 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ea2:	0000      	.short	0x0000
    2ea4:	0000e8db 	.word	0x0000e8db

00002ea8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eaa:	f06f 021f 	mvn.w	r2, #31
    2eae:	0c01      	lsrs	r1, r0, #16
    2eb0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2eb4:	251f      	movs	r5, #31
    2eb6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2eba:	3854      	subs	r0, #84	; 0x54
    2ebc:	d00d      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ebe:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2ec2:	3855      	subs	r0, #85	; 0x55
    2ec4:	d009      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ec6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2eca:	38aa      	subs	r0, #170	; 0xaa
    2ecc:	d005      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ece:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2ed2:	38aa      	subs	r0, #170	; 0xaa
    2ed4:	d001      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ed6:	2001      	movs	r0, #1
    2ed8:	e000      	b.n	2edc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2eda:	2000      	movs	r0, #0
    2edc:	2200      	movs	r2, #0
    2ede:	4613      	mov	r3, r2
    2ee0:	ea4f 0402 	mov.w	r4, r2
    2ee4:	ea82 0701 	eor.w	r7, r2, r1
    2ee8:	43ff      	mvns	r7, r7
    2eea:	431f      	orrs	r7, r3
    2eec:	1c7f      	adds	r7, r7, #1
    2eee:	d00f      	beq.n	2f10 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2ef0:	f006 0701 	and.w	r7, r6, #1
    2ef4:	0852      	lsrs	r2, r2, #1
    2ef6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2efa:	f005 0701 	and.w	r7, r5, #1
    2efe:	085b      	lsrs	r3, r3, #1
    2f00:	0876      	lsrs	r6, r6, #1
    2f02:	086d      	lsrs	r5, r5, #1
    2f04:	1c64      	adds	r4, r4, #1
    2f06:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f0a:	2c16      	cmp	r4, #22
    2f0c:	d3ea      	bcc.n	2ee4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f10:	2000      	movs	r0, #0
    2f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f14 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2f14:	b510      	push	{r4, lr}
    2f16:	4604      	mov	r4, r0
    2f18:	f00b fd6f 	bl	e9fa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f1c:	b308      	cbz	r0, 2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f1e:	43e0      	mvns	r0, r4
    2f20:	f00b fd6b 	bl	e9fa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f24:	b1e8      	cbz	r0, 2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f26:	16a0      	asrs	r0, r4, #26
    2f28:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2f2c:	1e41      	subs	r1, r0, #1
    2f2e:	4208      	tst	r0, r1
    2f30:	d017      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f32:	4620      	mov	r0, r4
    2f34:	f00b fdb0 	bl	ea98 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2f38:	2818      	cmp	r0, #24
    2f3a:	d812      	bhi.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f3c:	b2a0      	uxth	r0, r4
    2f3e:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2f42:	d107      	bne.n	2f54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2f44:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2f48:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2f4c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2f50:	4281      	cmp	r1, r0
    2f52:	d006      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f54:	4804      	ldr	r0, [pc, #16]	; (2f68 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2f56:	4044      	eors	r4, r0
    2f58:	1e60      	subs	r0, r4, #1
    2f5a:	4204      	tst	r4, r0
    2f5c:	d001      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f5e:	2001      	movs	r0, #1
    2f60:	bd10      	pop	{r4, pc}
    2f62:	2000      	movs	r0, #0
    2f64:	bd10      	pop	{r4, pc}
    2f66:	0000      	.short	0x0000
    2f68:	8e89bed6 	.word	0x8e89bed6

00002f6c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f6c:	b510      	push	{r4, lr}
    2f6e:	4804      	ldr	r0, [pc, #16]	; (2f80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f70:	f00b fd54 	bl	ea1c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f74:	4802      	ldr	r0, [pc, #8]	; (2f80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f7a:	3008      	adds	r0, #8
    2f7c:	f00b bd4e 	b.w	ea1c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f80:	200000b4 	.word	0x200000b4

00002f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2f84:	4801      	ldr	r0, [pc, #4]	; (2f8c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2f86:	f000 b803 	b.w	2f90 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2f8a:	0000      	.short	0x0000
    2f8c:	200000bc 	.word	0x200000bc
    2f90:	b510      	push	{r4, lr}
    2f92:	e9d0 2100 	ldrd	r2, r1, [r0]
    2f96:	4b09      	ldr	r3, [pc, #36]	; (2fbc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2f98:	4c09      	ldr	r4, [pc, #36]	; (2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2f9a:	4353      	muls	r3, r2
    2f9c:	4354      	muls	r4, r2
    2f9e:	4051      	eors	r1, r2
    2fa0:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fa4:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fa8:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fac:	e9c0 2100 	strd	r2, r1, [r0]
    2fb0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2fb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fb8:	4618      	mov	r0, r3
    2fba:	bd10      	pop	{r4, pc}
    2fbc:	c6ef3760 	.word	0xc6ef3760
    2fc0:	9e3779bb 	.word	0x9e3779bb

00002fc4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2fc4:	b570      	push	{r4, r5, r6, lr}
    2fc6:	6845      	ldr	r5, [r0, #4]
    2fc8:	1d0c      	adds	r4, r1, #4
    2fca:	2300      	movs	r3, #0
    2fcc:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2fd0:	3588      	adds	r5, #136	; 0x88
    2fd2:	2601      	movs	r6, #1
    2fd4:	4619      	mov	r1, r3
    2fd6:	4628      	mov	r0, r5
    2fd8:	f00b f842 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fdc:	b190      	cbz	r0, 3004 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2fde:	6820      	ldr	r0, [r4, #0]
    2fe0:	4a09      	ldr	r2, [pc, #36]	; (3008 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2fe2:	7921      	ldrb	r1, [r4, #4]
    2fe4:	4010      	ands	r0, r2
    2fe6:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2fea:	f001 0107 	and.w	r1, r1, #7
    2fee:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2ff2:	2000      	movs	r0, #0
    2ff4:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2ff8:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2ffc:	2004      	movs	r0, #4
    2ffe:	77a8      	strb	r0, [r5, #30]
    3000:	2000      	movs	r0, #0
    3002:	bd70      	pop	{r4, r5, r6, pc}
    3004:	2001      	movs	r0, #1
    3006:	bd70      	pop	{r4, r5, r6, pc}
    3008:	3704492f 	.word	0x3704492f

0000300c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    300c:	b510      	push	{r4, lr}
    300e:	1d04      	adds	r4, r0, #4
    3010:	f004 fce0 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3014:	4a03      	ldr	r2, [pc, #12]	; (3024 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    3016:	f001 0107 	and.w	r1, r1, #7
    301a:	4010      	ands	r0, r2
    301c:	6020      	str	r0, [r4, #0]
    301e:	6061      	str	r1, [r4, #4]
    3020:	bd10      	pop	{r4, pc}
    3022:	0000      	.short	0x0000
    3024:	3704492f 	.word	0x3704492f

00003028 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    302c:	4605      	mov	r5, r0
    302e:	7803      	ldrb	r3, [r0, #0]
    3030:	6840      	ldr	r0, [r0, #4]
    3032:	1d0f      	adds	r7, r1, #4
    3034:	f100 0688 	add.w	r6, r0, #136	; 0x88
    3038:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    303c:	4680      	mov	r8, r0
    303e:	7f72      	ldrb	r2, [r6, #29]
    3040:	2107      	movs	r1, #7
    3042:	4630      	mov	r0, r6
    3044:	f00b f80c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3048:	b1d0      	cbz	r0, 3080 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    304a:	6838      	ldr	r0, [r7, #0]
    304c:	4a17      	ldr	r2, [pc, #92]	; (30ac <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    304e:	7939      	ldrb	r1, [r7, #4]
    3050:	4010      	ands	r0, r2
    3052:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    3056:	f001 0107 	and.w	r1, r1, #7
    305a:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    305e:	2000      	movs	r0, #0
    3060:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    3064:	7770      	strb	r0, [r6, #29]
    3066:	6869      	ldr	r1, [r5, #4]
    3068:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    306c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3070:	f88d 1000 	strb.w	r1, [sp]
    3074:	9900      	ldr	r1, [sp, #0]
    3076:	9100      	str	r1, [sp, #0]
    3078:	f89d 1000 	ldrb.w	r1, [sp]
    307c:	b999      	cbnz	r1, 30a6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    307e:	e002      	b.n	3086 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3080:	2001      	movs	r0, #1
    3082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3086:	f8b8 1000 	ldrh.w	r1, [r8]
    308a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    308e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3092:	6839      	ldr	r1, [r7, #0]
    3094:	66e1      	str	r1, [r4, #108]	; 0x6c
    3096:	6879      	ldr	r1, [r7, #4]
    3098:	6721      	str	r1, [r4, #112]	; 0x70
    309a:	2208      	movs	r2, #8
    309c:	4904      	ldr	r1, [pc, #16]	; (30b0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    309e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30a2:	f00b fafd 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30a6:	2000      	movs	r0, #0
    30a8:	e7eb      	b.n	3082 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    30aa:	0000      	.short	0x0000
    30ac:	3704492f 	.word	0x3704492f
    30b0:	0000eba3 	.word	0x0000eba3

000030b4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	1d0d      	adds	r5, r1, #4
    30b8:	6844      	ldr	r4, [r0, #4]
    30ba:	f004 fc8b 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    30be:	4a06      	ldr	r2, [pc, #24]	; (30d8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    30c0:	4010      	ands	r0, r2
    30c2:	f001 0207 	and.w	r2, r1, #7
    30c6:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    30ca:	4001      	ands	r1, r0
    30cc:	f361 0007 	bfi	r0, r1, #0, #8
    30d0:	6028      	str	r0, [r5, #0]
    30d2:	606a      	str	r2, [r5, #4]
    30d4:	bd70      	pop	{r4, r5, r6, pc}
    30d6:	0000      	.short	0x0000
    30d8:	3704492f 	.word	0x3704492f

000030dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    30dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e0:	6844      	ldr	r4, [r0, #4]
    30e2:	460d      	mov	r5, r1
    30e4:	7803      	ldrb	r3, [r0, #0]
    30e6:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    30ea:	3488      	adds	r4, #136	; 0x88
    30ec:	2701      	movs	r7, #1
    30ee:	2108      	movs	r1, #8
    30f0:	4620      	mov	r0, r4
    30f2:	f00a ffb5 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    30f6:	b930      	cbnz	r0, 3106 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    30f8:	2300      	movs	r3, #0
    30fa:	7fa2      	ldrb	r2, [r4, #30]
    30fc:	4619      	mov	r1, r3
    30fe:	4620      	mov	r0, r4
    3100:	f00a ffae 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3104:	b320      	cbz	r0, 3150 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    3106:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    310a:	f04f 0600 	mov.w	r6, #0
    310e:	0780      	lsls	r0, r0, #30
    3110:	d419      	bmi.n	3146 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    3112:	4628      	mov	r0, r5
    3114:	f00b faab 	bl	e66e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    3118:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    311c:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3120:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3124:	8868      	ldrh	r0, [r5, #2]
    3126:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    312a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    312e:	f040 0002 	orr.w	r0, r0, #2
    3132:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    3136:	07c0      	lsls	r0, r0, #31
    3138:	d00d      	beq.n	3156 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    313a:	2203      	movs	r2, #3
    313c:	4912      	ldr	r1, [pc, #72]	; (3188 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    313e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3142:	f00b fac1 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3146:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    314a:	07c0      	lsls	r0, r0, #31
    314c:	d003      	beq.n	3156 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    314e:	e00e      	b.n	316e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    3150:	2001      	movs	r0, #1
    3152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3156:	2300      	movs	r3, #0
    3158:	7fa2      	ldrb	r2, [r4, #30]
    315a:	4619      	mov	r1, r3
    315c:	4620      	mov	r0, r4
    315e:	f00a ff7f 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3162:	b140      	cbz	r0, 3176 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    3164:	77a7      	strb	r7, [r4, #30]
    3166:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    316a:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    316e:	7f60      	ldrb	r0, [r4, #29]
    3170:	2801      	cmp	r0, #1
    3172:	d004      	beq.n	317e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    3174:	e006      	b.n	3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    3176:	2148      	movs	r1, #72	; 0x48
    3178:	2040      	movs	r0, #64	; 0x40
    317a:	f7fd fc73 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    317e:	7766      	strb	r6, [r4, #29]
    3180:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    3184:	2000      	movs	r0, #0
    3186:	e7e4      	b.n	3152 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    3188:	0000ebd1 	.word	0x0000ebd1

0000318c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    318c:	4907      	ldr	r1, [pc, #28]	; (31ac <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    318e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3192:	1300      	asrs	r0, r0, #12
    3194:	7809      	ldrb	r1, [r1, #0]
    3196:	b240      	sxtb	r0, r0
    3198:	4249      	negs	r1, r1
    319a:	b249      	sxtb	r1, r1
    319c:	4408      	add	r0, r1
    319e:	f300 0007 	ssat	r0, #8, r0
    31a2:	2800      	cmp	r0, #0
    31a4:	dc00      	bgt.n	31a8 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    31a6:	2000      	movs	r0, #0
    31a8:	b2c0      	uxtb	r0, r0
    31aa:	4770      	bx	lr
    31ac:	200000c4 	.word	0x200000c4

000031b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    31b0:	4a04      	ldr	r2, [pc, #16]	; (31c4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    31b2:	6892      	ldr	r2, [r2, #8]
    31b4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    31b8:	434b      	muls	r3, r1
    31ba:	4342      	muls	r2, r0
    31bc:	eb03 3022 	add.w	r0, r3, r2, asr #12
    31c0:	4770      	bx	lr
    31c2:	0000      	.short	0x0000
    31c4:	200000c4 	.word	0x200000c4

000031c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ca:	6844      	ldr	r4, [r0, #4]
    31cc:	4606      	mov	r6, r0
    31ce:	f104 0588 	add.w	r5, r4, #136	; 0x88
    31d2:	f000 f87f 	bl	32d4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    31d6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    31da:	2901      	cmp	r1, #1
    31dc:	d11a      	bne.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31de:	2800      	cmp	r0, #0
    31e0:	d018      	beq.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31e2:	6870      	ldr	r0, [r6, #4]
    31e4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    31e8:	f88d 1000 	strb.w	r1, [sp]
    31ec:	9900      	ldr	r1, [sp, #0]
    31ee:	9100      	str	r1, [sp, #0]
    31f0:	f89d 1000 	ldrb.w	r1, [sp]
    31f4:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    31f8:	2900      	cmp	r1, #0
    31fa:	d10b      	bne.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31fc:	8821      	ldrh	r1, [r4, #0]
    31fe:	8141      	strh	r1, [r0, #10]
    3200:	7e69      	ldrb	r1, [r5, #25]
    3202:	7301      	strb	r1, [r0, #12]
    3204:	7ea9      	ldrb	r1, [r5, #26]
    3206:	7341      	strb	r1, [r0, #13]
    3208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    320c:	221f      	movs	r2, #31
    320e:	4902      	ldr	r1, [pc, #8]	; (3218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3210:	f00b ba46 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3216:	0000      	.short	0x0000
    3218:	0000ec69 	.word	0x0000ec69
    321c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3220:	4a0d      	ldr	r2, [pc, #52]	; (3258 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3222:	b510      	push	{r4, lr}
    3224:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3228:	1309      	asrs	r1, r1, #12
    322a:	1300      	asrs	r0, r0, #12
    322c:	b24b      	sxtb	r3, r1
    322e:	f992 4000 	ldrsb.w	r4, [r2]
    3232:	4240      	negs	r0, r0
    3234:	2100      	movs	r1, #0
    3236:	b240      	sxtb	r0, r0
    3238:	42a3      	cmp	r3, r4
    323a:	da02      	bge.n	3242 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    323c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3240:	e005      	b.n	324e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3242:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3246:	42a3      	cmp	r3, r4
    3248:	dd04      	ble.n	3254 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    324a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    324e:	4408      	add	r0, r1
    3250:	f300 0107 	ssat	r1, #8, r0
    3254:	4608      	mov	r0, r1
    3256:	bd10      	pop	{r4, pc}
    3258:	200000c4 	.word	0x200000c4
    325c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3260:	2200      	movs	r2, #0
    3262:	704a      	strb	r2, [r1, #1]
    3264:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    3268:	700a      	strb	r2, [r1, #0]
    326a:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    326e:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3272:	f00c fb0b 	bl	f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3276:	4606      	mov	r6, r0
    3278:	68a0      	ldr	r0, [r4, #8]
    327a:	f7ff ffcf 	bl	321c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    327e:	0007      	movs	r7, r0
    3280:	d021      	beq.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3282:	4620      	mov	r0, r4
    3284:	f00b fcf8 	bl	ec78 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    3288:	2800      	cmp	r0, #0
    328a:	d01c      	beq.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    328c:	8828      	ldrh	r0, [r5, #0]
    328e:	4669      	mov	r1, sp
    3290:	f00a febd 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3294:	b118      	cbz	r0, 329e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3296:	2189      	movs	r1, #137	; 0x89
    3298:	207a      	movs	r0, #122	; 0x7a
    329a:	f7fd fbe3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    329e:	1c76      	adds	r6, r6, #1
    32a0:	b2f1      	uxtb	r1, r6
    32a2:	2302      	movs	r3, #2
    32a4:	463a      	mov	r2, r7
    32a6:	4668      	mov	r0, sp
    32a8:	f00c fb0f 	bl	f8ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    32ac:	2800      	cmp	r0, #0
    32ae:	d10a      	bne.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    32b0:	4806      	ldr	r0, [pc, #24]	; (32cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    32b2:	4907      	ldr	r1, [pc, #28]	; (32d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    32b4:	7900      	ldrb	r0, [r0, #4]
    32b6:	fba0 6501 	umull	r6, r5, r0, r1
    32ba:	f008 f9e1 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32be:	1980      	adds	r0, r0, r6
    32c0:	4169      	adcs	r1, r5
    32c2:	e9c4 0100 	strd	r0, r1, [r4]
    32c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    32ca:	0000      	.short	0x0000
    32cc:	200000c4 	.word	0x200000c4
    32d0:	000f4240 	.word	0x000f4240
    32d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32d8:	4607      	mov	r7, r0
    32da:	f7ff faab 	bl	2834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    32de:	687c      	ldr	r4, [r7, #4]
    32e0:	4605      	mov	r5, r0
    32e2:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    32e6:	3488      	adds	r4, #136	; 0x88
    32e8:	287f      	cmp	r0, #127	; 0x7f
    32ea:	d03c      	beq.n	3366 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    32ec:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    32f0:	687e      	ldr	r6, [r7, #4]
    32f2:	76a0      	strb	r0, [r4, #26]
    32f4:	4629      	mov	r1, r5
    32f6:	68a0      	ldr	r0, [r4, #8]
    32f8:	f7ff ff5a 	bl	31b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    32fc:	60a0      	str	r0, [r4, #8]
    32fe:	481b      	ldr	r0, [pc, #108]	; (336c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3300:	7940      	ldrb	r0, [r0, #5]
    3302:	b190      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3304:	6878      	ldr	r0, [r7, #4]
    3306:	f100 0888 	add.w	r8, r0, #136	; 0x88
    330a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    330e:	f7ff ff85 	bl	321c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3312:	b150      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3314:	4640      	mov	r0, r8
    3316:	f00b fcaf 	bl	ec78 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    331a:	b130      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    331c:	6878      	ldr	r0, [r7, #4]
    331e:	2231      	movs	r2, #49	; 0x31
    3320:	4913      	ldr	r1, [pc, #76]	; (3370 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3322:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    3326:	f00b f9cf 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    332a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    332e:	2100      	movs	r1, #0
    3330:	1a28      	subs	r0, r5, r0
    3332:	d500      	bpl.n	3336 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3334:	4240      	negs	r0, r0
    3336:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    333a:	4282      	cmp	r2, r0
    333c:	dc10      	bgt.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    333e:	2aff      	cmp	r2, #255	; 0xff
    3340:	d00e      	beq.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3342:	7f20      	ldrb	r0, [r4, #28]
    3344:	1c40      	adds	r0, r0, #1
    3346:	b2c0      	uxtb	r0, r0
    3348:	7720      	strb	r0, [r4, #28]
    334a:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    334e:	4290      	cmp	r0, r2
    3350:	d802      	bhi.n	3358 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3352:	7ee0      	ldrb	r0, [r4, #27]
    3354:	287f      	cmp	r0, #127	; 0x7f
    3356:	d103      	bne.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3358:	2000      	movs	r0, #0
    335a:	76e5      	strb	r5, [r4, #27]
    335c:	7720      	strb	r0, [r4, #28]
    335e:	2101      	movs	r1, #1
    3360:	4608      	mov	r0, r1
    3362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3366:	2000      	movs	r0, #0
    3368:	e7fb      	b.n	3362 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    336a:	0000      	.short	0x0000
    336c:	200000c4 	.word	0x200000c4
    3370:	0000325d 	.word	0x0000325d

00003374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    3374:	4801      	ldr	r0, [pc, #4]	; (337c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    3376:	6840      	ldr	r0, [r0, #4]
    3378:	30a0      	adds	r0, #160	; 0xa0
    337a:	4770      	bx	lr
    337c:	200000d0 	.word	0x200000d0

00003380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    3380:	b510      	push	{r4, lr}
    3382:	4c21      	ldr	r4, [pc, #132]	; (3408 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    3384:	6860      	ldr	r0, [r4, #4]
    3386:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    338a:	f00b fc9e 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    338e:	6861      	ldr	r1, [r4, #4]
    3390:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    3394:	314a      	adds	r1, #74	; 0x4a
    3396:	f7fe f945 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    339a:	6860      	ldr	r0, [r4, #4]
    339c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    33a0:	f00b fc9a 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33a4:	6861      	ldr	r1, [r4, #4]
    33a6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    33aa:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    33ae:	314a      	adds	r1, #74	; 0x4a
    33b0:	f00b fc77 	bl	eca2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    33b4:	b930      	cbnz	r0, 33c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    33b6:	6861      	ldr	r1, [r4, #4]
    33b8:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    33bc:	314a      	adds	r1, #74	; 0x4a
    33be:	f00b fc79 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    33c2:	b108      	cbz	r0, 33c8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    33c4:	2101      	movs	r1, #1
    33c6:	e000      	b.n	33ca <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    33c8:	2100      	movs	r1, #0
    33ca:	6860      	ldr	r0, [r4, #4]
    33cc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    33d0:	b919      	cbnz	r1, 33da <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    33d2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    33d6:	2800      	cmp	r0, #0
    33d8:	d014      	beq.n	3404 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    33da:	f7fe ffd3 	bl	2384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    33de:	490b      	ldr	r1, [pc, #44]	; (340c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    33e0:	fba0 2301 	umull	r2, r3, r0, r1
    33e4:	6860      	ldr	r0, [r4, #4]
    33e6:	3090      	adds	r0, #144	; 0x90
    33e8:	f00b fcc8 	bl	ed7c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    33ec:	6860      	ldr	r0, [r4, #4]
    33ee:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    33f2:	b110      	cbz	r0, 33fa <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    33f4:	2000      	movs	r0, #0
    33f6:	f7fe feaf 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    33fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33fe:	2000      	movs	r0, #0
    3400:	f000 be38 	b.w	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    3404:	bd10      	pop	{r4, pc}
    3406:	0000      	.short	0x0000
    3408:	200000d0 	.word	0x200000d0
    340c:	000f4240 	.word	0x000f4240

00003410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3410:	4a04      	ldr	r2, [pc, #16]	; (3424 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3412:	2803      	cmp	r0, #3
    3414:	6852      	ldr	r2, [r2, #4]
    3416:	d100      	bne.n	341a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    3418:	6551      	str	r1, [r2, #84]	; 0x54
    341a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    341e:	2000      	movs	r0, #0
    3420:	4770      	bx	lr
    3422:	0000      	.short	0x0000
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    3428:	4806      	ldr	r0, [pc, #24]	; (3444 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    342a:	b508      	push	{r3, lr}
    342c:	6840      	ldr	r0, [r0, #4]
    342e:	7a00      	ldrb	r0, [r0, #8]
    3430:	f88d 0000 	strb.w	r0, [sp]
    3434:	9800      	ldr	r0, [sp, #0]
    3436:	9000      	str	r0, [sp, #0]
    3438:	f89d 0000 	ldrb.w	r0, [sp]
    343c:	2800      	cmp	r0, #0
    343e:	d000      	beq.n	3442 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3440:	2001      	movs	r0, #1
    3442:	bd08      	pop	{r3, pc}
    3444:	200000d0 	.word	0x200000d0

00003448 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    3448:	4902      	ldr	r1, [pc, #8]	; (3454 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    344a:	6849      	ldr	r1, [r1, #4]
    344c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3450:	2000      	movs	r0, #0
    3452:	4770      	bx	lr
    3454:	200000d0 	.word	0x200000d0

00003458 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    3458:	480a      	ldr	r0, [pc, #40]	; (3484 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    345a:	6841      	ldr	r1, [r0, #4]
    345c:	6e88      	ldr	r0, [r1, #104]	; 0x68
    345e:	b170      	cbz	r0, 347e <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    3460:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    3464:	22ff      	movs	r2, #255	; 0xff
    3466:	7002      	strb	r2, [r0, #0]
    3468:	2200      	movs	r2, #0
    346a:	668a      	str	r2, [r1, #104]	; 0x68
    346c:	7002      	strb	r2, [r0, #0]
    346e:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    3472:	2001      	movs	r0, #1
    3474:	4088      	lsls	r0, r1
    3476:	4904      	ldr	r1, [pc, #16]	; (3488 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    3478:	6008      	str	r0, [r1, #0]
    347a:	2000      	movs	r0, #0
    347c:	4770      	bx	lr
    347e:	200c      	movs	r0, #12
    3480:	4770      	bx	lr
    3482:	0000      	.short	0x0000
    3484:	200000d0 	.word	0x200000d0
    3488:	4001f508 	.word	0x4001f508

0000348c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    348c:	4602      	mov	r2, r0
    348e:	480c      	ldr	r0, [pc, #48]	; (34c0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    3490:	b510      	push	{r4, lr}
    3492:	6082      	str	r2, [r0, #8]
    3494:	68c0      	ldr	r0, [r0, #12]
    3496:	460c      	mov	r4, r1
    3498:	b168      	cbz	r0, 34b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    349a:	f000 ffe5 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    349e:	f00b fd53 	bl	ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    34a2:	4620      	mov	r0, r4
    34a4:	f000 f8c0 	bl	3628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    34a8:	2800      	cmp	r0, #0
    34aa:	d007      	beq.n	34bc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    34ac:	f640 119d 	movw	r1, #2461	; 0x99d
    34b0:	2032      	movs	r0, #50	; 0x32
    34b2:	f7fd fad7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34b6:	f640 1197 	movw	r1, #2455	; 0x997
    34ba:	e7f9      	b.n	34b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    34bc:	bd10      	pop	{r4, pc}
    34be:	0000      	.short	0x0000
    34c0:	200000d0 	.word	0x200000d0

000034c4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    34c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34c8:	4c0f      	ldr	r4, [pc, #60]	; (3508 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    34ca:	4605      	mov	r5, r0
    34cc:	4616      	mov	r6, r2
    34ce:	6860      	ldr	r0, [r4, #4]
    34d0:	460f      	mov	r7, r1
    34d2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34d6:	f00b fbff 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    34da:	b158      	cbz	r0, 34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34dc:	b955      	cbnz	r5, 34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34de:	4638      	mov	r0, r7
    34e0:	f00b fbf3 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e4:	4631      	mov	r1, r6
    34e6:	f00a fd31 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    34ea:	2808      	cmp	r0, #8
    34ec:	d002      	beq.n	34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34ee:	2001      	movs	r0, #1
    34f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34f4:	6860      	ldr	r0, [r4, #4]
    34f6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34fa:	f00b fbe6 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3502:	f7fe b8bb 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    3506:	0000      	.short	0x0000
    3508:	200000d0 	.word	0x200000d0

0000350c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    350c:	b510      	push	{r4, lr}
    350e:	4c0a      	ldr	r4, [pc, #40]	; (3538 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3510:	6860      	ldr	r0, [r4, #4]
    3512:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3514:	b159      	cbz	r1, 352e <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    3516:	2202      	movs	r2, #2
    3518:	7242      	strb	r2, [r0, #9]
    351a:	8809      	ldrh	r1, [r1, #0]
    351c:	8141      	strh	r1, [r0, #10]
    351e:	2212      	movs	r2, #18
    3520:	4906      	ldr	r1, [pc, #24]	; (353c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3522:	f00b f8bd 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3526:	6861      	ldr	r1, [r4, #4]
    3528:	2000      	movs	r0, #0
    352a:	6548      	str	r0, [r1, #84]	; 0x54
    352c:	bd10      	pop	{r4, pc}
    352e:	f240 4122 	movw	r1, #1058	; 0x422
    3532:	2032      	movs	r0, #50	; 0x32
    3534:	f7fd fa96 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3538:	200000d0 	.word	0x200000d0
    353c:	00003871 	.word	0x00003871

00003540 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3540:	b570      	push	{r4, r5, r6, lr}
    3542:	4c13      	ldr	r4, [pc, #76]	; (3590 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3544:	4615      	mov	r5, r2
    3546:	460e      	mov	r6, r1
    3548:	2800      	cmp	r0, #0
    354a:	d016      	beq.n	357a <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    354c:	f04f 0200 	mov.w	r2, #0
    3550:	6861      	ldr	r1, [r4, #4]
    3552:	f801 2f51 	strb.w	r2, [r1, #81]!
    3556:	7248      	strb	r0, [r1, #9]
    3558:	f04f 0008 	mov.w	r0, #8
    355c:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    3560:	d114      	bne.n	358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    3562:	4630      	mov	r0, r6
    3564:	f00b fbb1 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3568:	4629      	mov	r1, r5
    356a:	f00a fcef 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    356e:	6861      	ldr	r1, [r4, #4]
    3570:	2808      	cmp	r0, #8
    3572:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    3576:	d003      	beq.n	3580 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    3578:	e008      	b.n	358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    357a:	f04f 0201 	mov.w	r2, #1
    357e:	e7e7      	b.n	3550 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    3580:	4630      	mov	r0, r6
    3582:	f00b fba9 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    3586:	b108      	cbz	r0, 358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    3588:	2012      	movs	r0, #18
    358a:	bd70      	pop	{r4, r5, r6, pc}
    358c:	2000      	movs	r0, #0
    358e:	bd70      	pop	{r4, r5, r6, pc}
    3590:	200000d0 	.word	0x200000d0

00003594 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    3594:	b510      	push	{r4, lr}
    3596:	b1b1      	cbz	r1, 35c6 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    3598:	4a0d      	ldr	r2, [pc, #52]	; (35d0 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    359a:	6852      	ldr	r2, [r2, #4]
    359c:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    35a0:	6808      	ldr	r0, [r1, #0]
    35a2:	6610      	str	r0, [r2, #96]	; 0x60
    35a4:	8888      	ldrh	r0, [r1, #4]
    35a6:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    35aa:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    35ae:	f852 1f54 	ldr.w	r1, [r2, #84]!
    35b2:	7248      	strb	r0, [r1, #9]
    35b4:	f852 0908 	ldr.w	r0, [r2], #-8
    35b8:	f852 1c02 	ldr.w	r1, [r2, #-2]
    35bc:	f8c0 100a 	str.w	r1, [r0, #10]
    35c0:	8851      	ldrh	r1, [r2, #2]
    35c2:	81c1      	strh	r1, [r0, #14]
    35c4:	bd10      	pop	{r4, pc}
    35c6:	f640 31a7 	movw	r1, #2983	; 0xba7
    35ca:	2032      	movs	r0, #50	; 0x32
    35cc:	f7fd fa4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35d0:	200000d0 	.word	0x200000d0

000035d4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    35d4:	4902      	ldr	r1, [pc, #8]	; (35e0 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    35d6:	4801      	ldr	r0, [pc, #4]	; (35dc <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    35d8:	60c8      	str	r0, [r1, #12]
    35da:	4770      	bx	lr
    35dc:	000046a4 	.word	0x000046a4
    35e0:	200000d0 	.word	0x200000d0

000035e4 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    35e4:	4902      	ldr	r1, [pc, #8]	; (35f0 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    35e6:	6849      	ldr	r1, [r1, #4]
    35e8:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    35ec:	4770      	bx	lr
    35ee:	0000      	.short	0x0000
    35f0:	200000d0 	.word	0x200000d0

000035f4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	4605      	mov	r5, r0
    35f8:	f7fd fe2e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    35fc:	4604      	mov	r4, r0
    35fe:	f7fd fe31 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3602:	4621      	mov	r1, r4
    3604:	f00b fbb8 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3608:	0001      	movs	r1, r0
    360a:	d006      	beq.n	361a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    360c:	4805      	ldr	r0, [pc, #20]	; (3624 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    360e:	68c0      	ldr	r0, [r0, #12]
    3610:	6802      	ldr	r2, [r0, #0]
    3612:	4628      	mov	r0, r5
    3614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3618:	4710      	bx	r2
    361a:	f640 21ab 	movw	r1, #2731	; 0xaab
    361e:	2032      	movs	r0, #50	; 0x32
    3620:	f7fd fa20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3624:	200000d0 	.word	0x200000d0

00003628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    3628:	b570      	push	{r4, r5, r6, lr}
    362a:	4d19      	ldr	r5, [pc, #100]	; (3690 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    362c:	4604      	mov	r4, r0
    362e:	6868      	ldr	r0, [r5, #4]
    3630:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3634:	2901      	cmp	r1, #1
    3636:	d004      	beq.n	3642 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3638:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    363c:	b108      	cbz	r0, 3642 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    363e:	200c      	movs	r0, #12
    3640:	bd70      	pop	{r4, r5, r6, pc}
    3642:	f7fd fe33 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    3646:	f00b fc7f 	bl	ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    364a:	f000 f8c1 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    364e:	2246      	movs	r2, #70	; 0x46
    3650:	2100      	movs	r1, #0
    3652:	6868      	ldr	r0, [r5, #4]
    3654:	f00d fcf1 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3658:	6869      	ldr	r1, [r5, #4]
    365a:	2200      	movs	r2, #0
    365c:	2001      	movs	r0, #1
    365e:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    3662:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    3666:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    366a:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    366e:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    3672:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    3676:	2007      	movs	r0, #7
    3678:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    367c:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    3680:	23ff      	movs	r3, #255	; 0xff
    3682:	7003      	strb	r3, [r0, #0]
    3684:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    3688:	668a      	str	r2, [r1, #104]	; 0x68
    368a:	7002      	strb	r2, [r0, #0]
    368c:	2000      	movs	r0, #0
    368e:	bd70      	pop	{r4, r5, r6, pc}
    3690:	200000d0 	.word	0x200000d0

00003694 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    3694:	4805      	ldr	r0, [pc, #20]	; (36ac <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    3696:	b510      	push	{r4, lr}
    3698:	6840      	ldr	r0, [r0, #4]
    369a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    369e:	f00b fb14 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36a6:	f7fd bfe9 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    36aa:	0000      	.short	0x0000
    36ac:	200000d0 	.word	0x200000d0

000036b0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    36b0:	b140      	cbz	r0, 36c4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    36b2:	2802      	cmp	r0, #2
    36b4:	d006      	beq.n	36c4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    36b6:	2200      	movs	r2, #0
    36b8:	4903      	ldr	r1, [pc, #12]	; (36c8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    36ba:	6849      	ldr	r1, [r1, #4]
    36bc:	f801 2f51 	strb.w	r2, [r1, #81]!
    36c0:	7208      	strb	r0, [r1, #8]
    36c2:	4770      	bx	lr
    36c4:	2201      	movs	r2, #1
    36c6:	e7f7      	b.n	36b8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    36c8:	200000d0 	.word	0x200000d0

000036cc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    36cc:	4902      	ldr	r1, [pc, #8]	; (36d8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    36ce:	6849      	ldr	r1, [r1, #4]
    36d0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    36d4:	4770      	bx	lr
    36d6:	0000      	.short	0x0000
    36d8:	200000d0 	.word	0x200000d0

000036dc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    36dc:	b510      	push	{r4, lr}
    36de:	4603      	mov	r3, r0
    36e0:	7800      	ldrb	r0, [r0, #0]
    36e2:	07c0      	lsls	r0, r0, #31
    36e4:	d005      	beq.n	36f2 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    36e6:	7858      	ldrb	r0, [r3, #1]
    36e8:	2100      	movs	r1, #0
    36ea:	f7ff fe91 	bl	3410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    36ee:	2800      	cmp	r0, #0
    36f0:	d10c      	bne.n	370c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    36f2:	4c07      	ldr	r4, [pc, #28]	; (3710 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    36f4:	7898      	ldrb	r0, [r3, #2]
    36f6:	6861      	ldr	r1, [r4, #4]
    36f8:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    36fc:	78d8      	ldrb	r0, [r3, #3]
    36fe:	f7ff ffd7 	bl	36b0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3702:	6861      	ldr	r1, [r4, #4]
    3704:	7918      	ldrb	r0, [r3, #4]
    3706:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    370a:	2000      	movs	r0, #0
    370c:	bd10      	pop	{r4, pc}
    370e:	0000      	.short	0x0000
    3710:	200000d0 	.word	0x200000d0

00003714 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3714:	4801      	ldr	r0, [pc, #4]	; (371c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    3716:	68c0      	ldr	r0, [r0, #12]
    3718:	6840      	ldr	r0, [r0, #4]
    371a:	4700      	bx	r0
    371c:	200000d0 	.word	0x200000d0

00003720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3720:	4807      	ldr	r0, [pc, #28]	; (3740 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3722:	b508      	push	{r3, lr}
    3724:	6840      	ldr	r0, [r0, #4]
    3726:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    372a:	f88d 0000 	strb.w	r0, [sp]
    372e:	9800      	ldr	r0, [sp, #0]
    3730:	9000      	str	r0, [sp, #0]
    3732:	f89d 0000 	ldrb.w	r0, [sp]
    3736:	2800      	cmp	r0, #0
    3738:	d000      	beq.n	373c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    373a:	2001      	movs	r0, #1
    373c:	bd08      	pop	{r3, pc}
    373e:	0000      	.short	0x0000
    3740:	200000d0 	.word	0x200000d0

00003744 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3744:	b510      	push	{r4, lr}
    3746:	f000 f951 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    374a:	4b0c      	ldr	r3, [pc, #48]	; (377c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    374c:	b140      	cbz	r0, 3760 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    374e:	6858      	ldr	r0, [r3, #4]
    3750:	2101      	movs	r1, #1
    3752:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    3756:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3758:	8809      	ldrh	r1, [r1, #0]
    375a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    375e:	e004      	b.n	376a <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    3760:	6859      	ldr	r1, [r3, #4]
    3762:	2000      	movs	r0, #0
    3764:	f801 0f42 	strb.w	r0, [r1, #66]!
    3768:	8048      	strh	r0, [r1, #2]
    376a:	6858      	ldr	r0, [r3, #4]
    376c:	2217      	movs	r2, #23
    376e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3772:	4903      	ldr	r1, [pc, #12]	; (3780 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    3774:	3038      	adds	r0, #56	; 0x38
    3776:	f00a bf93 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	00004401 	.word	0x00004401

00003784 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    3784:	4802      	ldr	r0, [pc, #8]	; (3790 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    3786:	6840      	ldr	r0, [r0, #4]
    3788:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    378c:	4770      	bx	lr
    378e:	0000      	.short	0x0000
    3790:	200000d0 	.word	0x200000d0

00003794 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    3794:	b510      	push	{r4, lr}
    3796:	f000 f929 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    379a:	490c      	ldr	r1, [pc, #48]	; (37cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    379c:	b128      	cbz	r0, 37aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    379e:	6848      	ldr	r0, [r1, #4]
    37a0:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    37a4:	2801      	cmp	r0, #1
    37a6:	d00e      	beq.n	37c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    37a8:	e00c      	b.n	37c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    37aa:	6849      	ldr	r1, [r1, #4]
    37ac:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    37b0:	2801      	cmp	r0, #1
    37b2:	d001      	beq.n	37b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    37b4:	2802      	cmp	r0, #2
    37b6:	d105      	bne.n	37c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    37b8:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    37bc:	2801      	cmp	r0, #1
    37be:	d003      	beq.n	37c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    37c0:	2803      	cmp	r0, #3
    37c2:	d001      	beq.n	37c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    37c4:	2000      	movs	r0, #0
    37c6:	bd10      	pop	{r4, pc}
    37c8:	2001      	movs	r0, #1
    37ca:	bd10      	pop	{r4, pc}
    37cc:	200000d0 	.word	0x200000d0
    37d0:	b510      	push	{r4, lr}
    37d2:	4c07      	ldr	r4, [pc, #28]	; (37f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    37d4:	6860      	ldr	r0, [r4, #4]
    37d6:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    37da:	2800      	cmp	r0, #0
    37dc:	d007      	beq.n	37ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    37de:	f004 fb23 	bl	7e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    37e2:	f004 f947 	bl	7a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    37e6:	6861      	ldr	r1, [r4, #4]
    37e8:	2000      	movs	r0, #0
    37ea:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    37ee:	bd10      	pop	{r4, pc}
    37f0:	200000d0 	.word	0x200000d0
    37f4:	b518      	push	{r3, r4, lr}
    37f6:	2300      	movs	r3, #0
    37f8:	704b      	strb	r3, [r1, #1]
    37fa:	2207      	movs	r2, #7
    37fc:	700a      	strb	r2, [r1, #0]
    37fe:	4a07      	ldr	r2, [pc, #28]	; (381c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3800:	6852      	ldr	r2, [r2, #4]
    3802:	7203      	strb	r3, [r0, #8]
    3804:	6b54      	ldr	r4, [r2, #52]	; 0x34
    3806:	604c      	str	r4, [r1, #4]
    3808:	7a04      	ldrb	r4, [r0, #8]
    380a:	f88d 4000 	strb.w	r4, [sp]
    380e:	9c00      	ldr	r4, [sp, #0]
    3810:	9400      	str	r4, [sp, #0]
    3812:	f89d 4000 	ldrb.w	r4, [sp]
    3816:	2c00      	cmp	r4, #0
    3818:	d1f3      	bne.n	3802 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    381a:	bd18      	pop	{r3, r4, pc}
    381c:	200000d0 	.word	0x200000d0
    3820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3824:	4d10      	ldr	r5, [pc, #64]	; (3868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    3826:	4606      	mov	r6, r0
    3828:	460f      	mov	r7, r1
    382a:	6868      	ldr	r0, [r5, #4]
    382c:	490f      	ldr	r1, [pc, #60]	; (386c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    382e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3832:	5c0c      	ldrb	r4, [r1, r0]
    3834:	4620      	mov	r0, r4
    3836:	f004 fe37 	bl	84a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    383a:	6868      	ldr	r0, [r5, #4]
    383c:	2101      	movs	r1, #1
    383e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3842:	2025      	movs	r0, #37	; 0x25
    3844:	f004 fe06 	bl	8454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    3848:	4638      	mov	r0, r7
    384a:	f004 fd39 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    384e:	f04f 0101 	mov.w	r1, #1
    3852:	4608      	mov	r0, r1
    3854:	b126      	cbz	r6, 3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    3856:	f004 fb93 	bl	7f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    385a:	b918      	cbnz	r0, 3864 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3860:	f004 fb54 	bl	7f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3864:	2001      	movs	r0, #1
    3866:	e7f9      	b.n	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    3868:	200000d0 	.word	0x200000d0
    386c:	000111af 	.word	0x000111af
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	4e1a      	ldr	r6, [pc, #104]	; (38dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    3874:	460c      	mov	r4, r1
    3876:	6870      	ldr	r0, [r6, #4]
    3878:	7a41      	ldrb	r1, [r0, #9]
    387a:	b191      	cbz	r1, 38a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    387c:	8940      	ldrh	r0, [r0, #10]
    387e:	2100      	movs	r1, #0
    3880:	f00a fa1d 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3884:	0005      	movs	r5, r0
    3886:	d025      	beq.n	38d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    3888:	8828      	ldrh	r0, [r5, #0]
    388a:	f00a fa9f 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    388e:	8828      	ldrh	r0, [r5, #0]
    3890:	2100      	movs	r1, #0
    3892:	f7fd fb4b 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3896:	b188      	cbz	r0, 38bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    3898:	f240 31f2 	movw	r1, #1010	; 0x3f2
    389c:	2032      	movs	r0, #50	; 0x32
    389e:	f7fd f8e1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38a2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38a4:	f8d0 200e 	ldr.w	r2, [r0, #14]
    38a8:	f841 2f03 	str.w	r2, [r1, #3]!
    38ac:	8a42      	ldrh	r2, [r0, #18]
    38ae:	808a      	strh	r2, [r1, #4]
    38b0:	7b40      	ldrb	r0, [r0, #13]
    38b2:	f00b fa0a 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    38b6:	6871      	ldr	r1, [r6, #4]
    38b8:	6d49      	ldr	r1, [r1, #84]	; 0x54
    38ba:	7088      	strb	r0, [r1, #2]
    38bc:	2500      	movs	r5, #0
    38be:	7065      	strb	r5, [r4, #1]
    38c0:	2015      	movs	r0, #21
    38c2:	7020      	strb	r0, [r4, #0]
    38c4:	6871      	ldr	r1, [r6, #4]
    38c6:	2221      	movs	r2, #33	; 0x21
    38c8:	1d20      	adds	r0, r4, #4
    38ca:	3109      	adds	r1, #9
    38cc:	f00d fb3b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    38d0:	71e5      	strb	r5, [r4, #7]
    38d2:	bd70      	pop	{r4, r5, r6, pc}
    38d4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    38d8:	e7e0      	b.n	389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    38da:	0000      	.short	0x0000
    38dc:	200000d0 	.word	0x200000d0
    38e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38e2:	2600      	movs	r6, #0
    38e4:	460f      	mov	r7, r1
    38e6:	4605      	mov	r5, r0
    38e8:	f88d 6000 	strb.w	r6, [sp]
    38ec:	466b      	mov	r3, sp
    38ee:	f000 f895 	bl	3a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    38f2:	0001      	movs	r1, r0
    38f4:	4810      	ldr	r0, [pc, #64]	; (3938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    38f6:	d003      	beq.n	3900 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    38f8:	6840      	ldr	r0, [r0, #4]
    38fa:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    38fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3900:	6840      	ldr	r0, [r0, #4]
    3902:	f89d 1000 	ldrb.w	r1, [sp]
    3906:	2f07      	cmp	r7, #7
    3908:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    390c:	d301      	bcc.n	3912 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    390e:	4634      	mov	r4, r6
    3910:	e002      	b.n	3918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3912:	0022      	movs	r2, r4
    3914:	d100      	bne.n	3918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3916:	460c      	mov	r4, r1
    3918:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    391c:	6869      	ldr	r1, [r5, #4]
    391e:	2900      	cmp	r1, #0
    3920:	d0ed      	beq.n	38fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3922:	7c69      	ldrb	r1, [r5, #17]
    3924:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    3928:	6869      	ldr	r1, [r5, #4]
    392a:	680a      	ldr	r2, [r1, #0]
    392c:	f840 2f82 	str.w	r2, [r0, #130]!
    3930:	8889      	ldrh	r1, [r1, #4]
    3932:	8081      	strh	r1, [r0, #4]
    3934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3936:	0000      	.short	0x0000
    3938:	200000d0 	.word	0x200000d0
    393c:	b510      	push	{r4, lr}
    393e:	4915      	ldr	r1, [pc, #84]	; (3994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3940:	6842      	ldr	r2, [r0, #4]
    3942:	6849      	ldr	r1, [r1, #4]
    3944:	7813      	ldrb	r3, [r2, #0]
    3946:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    394a:	42a3      	cmp	r3, r4
    394c:	d11f      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    394e:	7853      	ldrb	r3, [r2, #1]
    3950:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3954:	42a3      	cmp	r3, r4
    3956:	d11a      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3958:	7893      	ldrb	r3, [r2, #2]
    395a:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    395e:	42a3      	cmp	r3, r4
    3960:	d115      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3962:	78d3      	ldrb	r3, [r2, #3]
    3964:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    3968:	42a3      	cmp	r3, r4
    396a:	d110      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    396c:	7913      	ldrb	r3, [r2, #4]
    396e:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    3972:	42a3      	cmp	r3, r4
    3974:	d10b      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3976:	7952      	ldrb	r2, [r2, #5]
    3978:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    397c:	429a      	cmp	r2, r3
    397e:	d106      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3980:	7c40      	ldrb	r0, [r0, #17]
    3982:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    3986:	4288      	cmp	r0, r1
    3988:	d101      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    398a:	2001      	movs	r0, #1
    398c:	bd10      	pop	{r4, pc}
    398e:	2000      	movs	r0, #0
    3990:	bd10      	pop	{r4, pc}
    3992:	0000      	.short	0x0000
    3994:	200000d0 	.word	0x200000d0
    3998:	b510      	push	{r4, lr}
    399a:	7801      	ldrb	r1, [r0, #0]
    399c:	b08c      	sub	sp, #48	; 0x30
    399e:	f001 040f 	and.w	r4, r1, #15
    39a2:	4622      	mov	r2, r4
    39a4:	a901      	add	r1, sp, #4
    39a6:	f000 ff0b 	bl	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    39aa:	f004 fa5f 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39ae:	f000 fba1 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    39b2:	2c04      	cmp	r4, #4
    39b4:	d114      	bne.n	39e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    39b6:	a801      	add	r0, sp, #4
    39b8:	f7ff ffc0 	bl	393c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    39bc:	b180      	cbz	r0, 39e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    39be:	a80b      	add	r0, sp, #44	; 0x2c
    39c0:	f000 fba0 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    39c4:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    39c8:	9000      	str	r0, [sp, #0]
    39ca:	4807      	ldr	r0, [pc, #28]	; (39e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    39cc:	6840      	ldr	r0, [r0, #4]
    39ce:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    39d2:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    39d6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    39da:	a801      	add	r0, sp, #4
    39dc:	f00b fa69 	bl	eeb2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    39e0:	b00c      	add	sp, #48	; 0x30
    39e2:	2005      	movs	r0, #5
    39e4:	bd10      	pop	{r4, pc}
    39e6:	0000      	.short	0x0000
    39e8:	200000d0 	.word	0x200000d0
    39ec:	4804      	ldr	r0, [pc, #16]	; (3a00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    39ee:	6840      	ldr	r0, [r0, #4]
    39f0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    39f4:	2803      	cmp	r0, #3
    39f6:	d001      	beq.n	39fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    39f8:	2000      	movs	r0, #0
    39fa:	4770      	bx	lr
    39fc:	2001      	movs	r0, #1
    39fe:	4770      	bx	lr
    3a00:	200000d0 	.word	0x200000d0
    3a04:	7c82      	ldrb	r2, [r0, #18]
    3a06:	6883      	ldr	r3, [r0, #8]
    3a08:	4803      	ldr	r0, [pc, #12]	; (3a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    3a0a:	6841      	ldr	r1, [r0, #4]
    3a0c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3a10:	314a      	adds	r1, #74	; 0x4a
    3a12:	f00a b9df 	b.w	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3a16:	0000      	.short	0x0000
    3a18:	200000d0 	.word	0x200000d0
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	6841      	ldr	r1, [r0, #4]
    3a20:	461e      	mov	r6, r3
    3a22:	4604      	mov	r4, r0
    3a24:	b1c1      	cbz	r1, 3a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    3a26:	7c60      	ldrb	r0, [r4, #17]
    3a28:	f00b f944 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3a2c:	4d10      	ldr	r5, [pc, #64]	; (3a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3a2e:	6869      	ldr	r1, [r5, #4]
    3a30:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3a34:	b141      	cbz	r1, 3a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    3a36:	b138      	cbz	r0, 3a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    3a38:	f00a fa7e 	bl	df38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3a3c:	6869      	ldr	r1, [r5, #4]
    3a3e:	f801 0f78 	strb.w	r0, [r1, #120]!
    3a42:	7048      	strb	r0, [r1, #1]
    3a44:	2001      	movs	r0, #1
    3a46:	71c8      	strb	r0, [r1, #7]
    3a48:	686b      	ldr	r3, [r5, #4]
    3a4a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3a4e:	28ff      	cmp	r0, #255	; 0xff
    3a50:	d004      	beq.n	3a5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3a52:	f7fe fc2f 	bl	22b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    3a56:	7030      	strb	r0, [r6, #0]
    3a58:	2000      	movs	r0, #0
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	7c60      	ldrb	r0, [r4, #17]
    3a5e:	4632      	mov	r2, r6
    3a60:	3378      	adds	r3, #120	; 0x78
    3a62:	6861      	ldr	r1, [r4, #4]
    3a64:	f7fe fca2 	bl	23ac <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    3a68:	f080 0001 	eor.w	r0, r0, #1
    3a6c:	bd70      	pop	{r4, r5, r6, pc}
    3a6e:	0000      	.short	0x0000
    3a70:	200000d0 	.word	0x200000d0
    3a74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3a78:	4c40      	ldr	r4, [pc, #256]	; (3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>)
    3a7a:	2500      	movs	r5, #0
    3a7c:	466f      	mov	r7, sp
    3a7e:	6860      	ldr	r0, [r4, #4]
    3a80:	7245      	strb	r5, [r0, #9]
    3a82:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a84:	880a      	ldrh	r2, [r1, #0]
    3a86:	8142      	strh	r2, [r0, #10]
    3a88:	6908      	ldr	r0, [r1, #16]
    3a8a:	f00a fad0 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a8e:	6861      	ldr	r1, [r4, #4]
    3a90:	f821 0f20 	strh.w	r0, [r1, #32]!
    3a94:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3a96:	8b02      	ldrh	r2, [r0, #24]
    3a98:	804a      	strh	r2, [r1, #2]
    3a9a:	8b40      	ldrh	r0, [r0, #26]
    3a9c:	8088      	strh	r0, [r1, #4]
    3a9e:	718d      	strb	r5, [r1, #6]
    3aa0:	20ff      	movs	r0, #255	; 0xff
    3aa2:	71c8      	strb	r0, [r1, #7]
    3aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3aa8:	8108      	strh	r0, [r1, #8]
    3aaa:	4669      	mov	r1, sp
    3aac:	68a0      	ldr	r0, [r4, #8]
    3aae:	f00a fd07 	bl	e4c0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    3ab2:	68a0      	ldr	r0, [r4, #8]
    3ab4:	7800      	ldrb	r0, [r0, #0]
    3ab6:	f3c0 1680 	ubfx	r6, r0, #6, #1
    3aba:	6860      	ldr	r0, [r4, #4]
    3abc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ac0:	b120      	cbz	r0, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ac2:	4639      	mov	r1, r7
    3ac4:	4630      	mov	r0, r6
    3ac6:	f00b f8f5 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3aca:	b940      	cbnz	r0, 3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3acc:	6860      	ldr	r0, [r4, #4]
    3ace:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3ad2:	b158      	cbz	r0, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ad4:	4639      	mov	r1, r7
    3ad6:	4630      	mov	r0, r6
    3ad8:	f00b f8e3 	bl	eca2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3adc:	b130      	cbz	r0, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ade:	6860      	ldr	r0, [r4, #4]
    3ae0:	9900      	ldr	r1, [sp, #0]
    3ae2:	6141      	str	r1, [r0, #20]
    3ae4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3ae8:	8301      	strh	r1, [r0, #24]
    3aea:	e002      	b.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
    3aec:	6860      	ldr	r0, [r4, #4]
    3aee:	6145      	str	r5, [r0, #20]
    3af0:	8305      	strh	r5, [r0, #24]
    3af2:	6861      	ldr	r1, [r4, #4]
    3af4:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    3af8:	28ff      	cmp	r0, #255	; 0xff
    3afa:	d017      	beq.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
    3afc:	f101 020e 	add.w	r2, r1, #14
    3b00:	310d      	adds	r1, #13
    3b02:	f7fe fbbd 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3b06:	b160      	cbz	r0, 3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b08:	6860      	ldr	r0, [r4, #4]
    3b0a:	7b41      	ldrb	r1, [r0, #13]
    3b0c:	f041 0102 	orr.w	r1, r1, #2
    3b10:	7341      	strb	r1, [r0, #13]
    3b12:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    3b16:	f8c0 101a 	str.w	r1, [r0, #26]
    3b1a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3b1e:	83c1      	strh	r1, [r0, #30]
    3b20:	e010      	b.n	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b22:	f241 5197 	movw	r1, #5527	; 0x1597
    3b26:	2032      	movs	r0, #50	; 0x32
    3b28:	f7fc ff9c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b2c:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3b30:	7348      	strb	r0, [r1, #13]
    3b32:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    3b36:	f841 0f0e 	str.w	r0, [r1, #14]!
    3b3a:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3b3e:	8088      	strh	r0, [r1, #4]
    3b40:	60cd      	str	r5, [r1, #12]
    3b42:	820d      	strh	r5, [r1, #16]
    3b44:	6860      	ldr	r0, [r4, #4]
    3b46:	6d42      	ldr	r2, [r0, #84]	; 0x54
    3b48:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3b4c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3b50:	2212      	movs	r2, #18
    3b52:	490b      	ldr	r1, [pc, #44]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3b54:	f00a fda4 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3b58:	6860      	ldr	r0, [r4, #4]
    3b5a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3b5c:	302a      	adds	r0, #42	; 0x2a
    3b5e:	880a      	ldrh	r2, [r1, #0]
    3b60:	4908      	ldr	r1, [pc, #32]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3b62:	868a      	strh	r2, [r1, #52]	; 0x34
    3b64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    3b66:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    3b6a:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    3b6e:	2206      	movs	r2, #6
    3b70:	4905      	ldr	r1, [pc, #20]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3b72:	f00a fda9 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3b76:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	200000d0 	.word	0x200000d0
    3b80:	00003871 	.word	0x00003871
    3b84:	20000d80 	.word	0x20000d80
    3b88:	000037f5 	.word	0x000037f5
    3b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b90:	4c4c      	ldr	r4, [pc, #304]	; (3cc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22c>)
    3b92:	4606      	mov	r6, r0
    3b94:	2100      	movs	r1, #0
    3b96:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    3b9a:	3570      	adds	r5, #112	; 0x70
    3b9c:	8001      	strh	r1, [r0, #0]
    3b9e:	2e03      	cmp	r6, #3
    3ba0:	d002      	beq.n	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3ba2:	2e05      	cmp	r6, #5
    3ba4:	d004      	beq.n	3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    3ba6:	e051      	b.n	3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>
    3ba8:	2103      	movs	r1, #3
    3baa:	f00a fca0 	bl	e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3bae:	e04d      	b.n	3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>
    3bb0:	2105      	movs	r1, #5
    3bb2:	f00a fc9c 	bl	e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3bb6:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3bba:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bbc:	6949      	ldr	r1, [r1, #20]
    3bbe:	f8c7 100f 	str.w	r1, [r7, #15]
    3bc2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bc4:	69c9      	ldr	r1, [r1, #28]
    3bc6:	74f9      	strb	r1, [r7, #19]
    3bc8:	0a0a      	lsrs	r2, r1, #8
    3bca:	753a      	strb	r2, [r7, #20]
    3bcc:	0c09      	lsrs	r1, r1, #16
    3bce:	7579      	strb	r1, [r7, #21]
    3bd0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3bd2:	6901      	ldr	r1, [r0, #16]
    3bd4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3bd6:	f00a fbb1 	bl	e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3bda:	75b8      	strb	r0, [r7, #22]
    3bdc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3be0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3be2:	6901      	ldr	r1, [r0, #16]
    3be4:	6a00      	ldr	r0, [r0, #32]
    3be6:	f00a fb92 	bl	e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3bea:	75f8      	strb	r0, [r7, #23]
    3bec:	0a00      	lsrs	r0, r0, #8
    3bee:	7638      	strb	r0, [r7, #24]
    3bf0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3bf4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3bf6:	6900      	ldr	r0, [r0, #16]
    3bf8:	f00a fa19 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3bfc:	7678      	strb	r0, [r7, #25]
    3bfe:	0a00      	lsrs	r0, r0, #8
    3c00:	76b8      	strb	r0, [r7, #26]
    3c02:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3c06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c08:	8b09      	ldrh	r1, [r1, #24]
    3c0a:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3c0e:	0a09      	lsrs	r1, r1, #8
    3c10:	7079      	strb	r1, [r7, #1]
    3c12:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c14:	8b49      	ldrh	r1, [r1, #26]
    3c16:	70b9      	strb	r1, [r7, #2]
    3c18:	0a09      	lsrs	r1, r1, #8
    3c1a:	70f9      	strb	r1, [r7, #3]
    3c1c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c1e:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3c22:	607a      	str	r2, [r7, #4]
    3c24:	7909      	ldrb	r1, [r1, #4]
    3c26:	7239      	strb	r1, [r7, #8]
    3c28:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3c2a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3c2e:	7a78      	ldrb	r0, [r7, #9]
    3c30:	f001 011f 	and.w	r1, r1, #31
    3c34:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3c38:	4308      	orrs	r0, r1
    3c3a:	7278      	strb	r0, [r7, #9]
    3c3c:	f003 fefa 	bl	7a34 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3c40:	7a79      	ldrb	r1, [r7, #9]
    3c42:	f001 011f 	and.w	r1, r1, #31
    3c46:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3c4a:	7279      	strb	r1, [r7, #9]
    3c4c:	f105 0112 	add.w	r1, r5, #18
    3c50:	68a0      	ldr	r0, [r4, #8]
    3c52:	f00a fc67 	bl	e524 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3c56:	7e69      	ldrb	r1, [r5, #25]
    3c58:	68a0      	ldr	r0, [r4, #8]
    3c5a:	f00a fc69 	bl	e530 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3c5e:	6860      	ldr	r0, [r4, #4]
    3c60:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3c64:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3c68:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3c6c:	b188      	cbz	r0, 3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3c6e:	f7ff febd 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3c72:	b130      	cbz	r0, 3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
    3c74:	6860      	ldr	r0, [r4, #4]
    3c76:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3c7a:	b111      	cbz	r1, 3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
    3c7c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3c80:	e002      	b.n	3c88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f0>
    3c82:	6860      	ldr	r0, [r4, #4]
    3c84:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3c88:	f7fe fac0 	bl	220c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3c8c:	b108      	cbz	r0, 3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3c8e:	2701      	movs	r7, #1
    3c90:	4605      	mov	r5, r0
    3c92:	4629      	mov	r1, r5
    3c94:	68a0      	ldr	r0, [r4, #8]
    3c96:	f00a fc52 	bl	e53e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3c9a:	4639      	mov	r1, r7
    3c9c:	68a0      	ldr	r0, [r4, #8]
    3c9e:	f00a fc54 	bl	e54a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ca2:	68a0      	ldr	r0, [r4, #8]
    3ca4:	f004 fb0c 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3ca8:	2e05      	cmp	r6, #5
    3caa:	d108      	bne.n	3cbe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x226>
    3cac:	6860      	ldr	r0, [r4, #4]
    3cae:	682a      	ldr	r2, [r5, #0]
    3cb0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3cb2:	f8c1 200a 	str.w	r2, [r1, #10]
    3cb6:	88aa      	ldrh	r2, [r5, #4]
    3cb8:	81ca      	strh	r2, [r1, #14]
    3cba:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3cbc:	7247      	strb	r7, [r0, #9]
    3cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	200000d0 	.word	0x200000d0
    3cc8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3ccc:	4f65      	ldr	r7, [pc, #404]	; (3e64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3cc>)
    3cce:	4604      	mov	r4, r0
    3cd0:	6878      	ldr	r0, [r7, #4]
    3cd2:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3cd6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3cda:	b180      	cbz	r0, 3cfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x266>
    3cdc:	2600      	movs	r6, #0
    3cde:	2500      	movs	r5, #0
    3ce0:	7ca0      	ldrb	r0, [r4, #18]
    3ce2:	68a1      	ldr	r1, [r4, #8]
    3ce4:	f00a ffe6 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3ce8:	4682      	mov	sl, r0
    3cea:	f7ff fe7f 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cee:	b140      	cbz	r0, 3d02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26a>
    3cf0:	6878      	ldr	r0, [r7, #4]
    3cf2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3cf6:	b121      	cbz	r1, 3d02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26a>
    3cf8:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3cfc:	e004      	b.n	3d08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x270>
    3cfe:	2601      	movs	r6, #1
    3d00:	e7ed      	b.n	3cde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x246>
    3d02:	6878      	ldr	r0, [r7, #4]
    3d04:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3d08:	4683      	mov	fp, r0
    3d0a:	f7fe fa0b 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3d0e:	ea5f 0900 	movs.w	r9, r0
    3d12:	d00c      	beq.n	3d2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x296>
    3d14:	4658      	mov	r0, fp
    3d16:	f7fe f9f9 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3d1a:	b100      	cbz	r0, 3d1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x286>
    3d1c:	2601      	movs	r6, #1
    3d1e:	f1ba 0f00 	cmp.w	sl, #0
    3d22:	d004      	beq.n	3d2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x296>
    3d24:	4648      	mov	r0, r9
    3d26:	68a1      	ldr	r1, [r4, #8]
    3d28:	f00a f8b9 	bl	de9e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3d2c:	4605      	mov	r5, r0
    3d2e:	6878      	ldr	r0, [r7, #4]
    3d30:	46b9      	mov	r9, r7
    3d32:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3d36:	b10d      	cbz	r5, 3d3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a4>
    3d38:	f047 0702 	orr.w	r7, r7, #2
    3d3c:	f7ff fe56 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3d40:	b3a0      	cbz	r0, 3dac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x314>
    3d42:	6860      	ldr	r0, [r4, #4]
    3d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3d48:	7802      	ldrb	r2, [r0, #0]
    3d4a:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3d4e:	429a      	cmp	r2, r3
    3d50:	d11f      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d52:	7842      	ldrb	r2, [r0, #1]
    3d54:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3d58:	429a      	cmp	r2, r3
    3d5a:	d11a      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d5c:	7882      	ldrb	r2, [r0, #2]
    3d5e:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3d62:	429a      	cmp	r2, r3
    3d64:	d115      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d66:	78c2      	ldrb	r2, [r0, #3]
    3d68:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3d6c:	429a      	cmp	r2, r3
    3d6e:	d110      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d70:	7902      	ldrb	r2, [r0, #4]
    3d72:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d76:	429a      	cmp	r2, r3
    3d78:	d10b      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d7a:	7940      	ldrb	r0, [r0, #5]
    3d7c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d80:	4290      	cmp	r0, r2
    3d82:	d106      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d84:	7c60      	ldrb	r0, [r4, #17]
    3d86:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3d8a:	4288      	cmp	r0, r1
    3d8c:	d101      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d8e:	2001      	movs	r0, #1
    3d90:	e000      	b.n	3d94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fc>
    3d92:	2000      	movs	r0, #0
    3d94:	4f34      	ldr	r7, [pc, #208]	; (3e68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d0>)
    3d96:	4682      	mov	sl, r0
    3d98:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3d9c:	2808      	cmp	r0, #8
    3d9e:	d006      	beq.n	3dae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x316>
    3da0:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3da4:	4288      	cmp	r0, r1
    3da6:	d102      	bne.n	3dae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x316>
    3da8:	2001      	movs	r0, #1
    3daa:	e001      	b.n	3db0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x318>
    3dac:	e021      	b.n	3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3dae:	2000      	movs	r0, #0
    3db0:	4681      	mov	r9, r0
    3db2:	b925      	cbnz	r5, 3dbe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x326>
    3db4:	b12e      	cbz	r6, 3dc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32a>
    3db6:	4620      	mov	r0, r4
    3db8:	f7ff fe24 	bl	3a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3dbc:	b108      	cbz	r0, 3dc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32a>
    3dbe:	2001      	movs	r0, #1
    3dc0:	e000      	b.n	3dc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32c>
    3dc2:	2000      	movs	r0, #0
    3dc4:	f1b8 0f00 	cmp.w	r8, #0
    3dc8:	d009      	beq.n	3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dca:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3dce:	2901      	cmp	r1, #1
    3dd0:	d003      	beq.n	3dda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x342>
    3dd2:	b921      	cbnz	r1, 3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dd4:	ea5a 0109 	orrs.w	r1, sl, r9
    3dd8:	d001      	beq.n	3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dda:	2101      	movs	r1, #1
    3ddc:	e000      	b.n	3de0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x348>
    3dde:	2100      	movs	r1, #0
    3de0:	4208      	tst	r0, r1
    3de2:	d003      	beq.n	3dec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x354>
    3de4:	200c      	movs	r0, #12
    3de6:	b004      	add	sp, #16
    3de8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3dec:	f004 f83e 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3df0:	e036      	b.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3df2:	f004 f83b 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3df6:	f1b8 0f00 	cmp.w	r8, #0
    3dfa:	d031      	beq.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3dfc:	4620      	mov	r0, r4
    3dfe:	f7ff fe01 	bl	3a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3e02:	b900      	cbnz	r0, 3e06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36e>
    3e04:	b175      	cbz	r5, 3e24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38c>
    3e06:	a803      	add	r0, sp, #12
    3e08:	f000 f97c 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3e0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3e10:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e14:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e18:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e20:	463b      	mov	r3, r7
    3e22:	e018      	b.n	3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3e24:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3e28:	464d      	mov	r5, r9
    3e2a:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3e2e:	2803      	cmp	r0, #3
    3e30:	d001      	beq.n	3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
    3e32:	2802      	cmp	r0, #2
    3e34:	d114      	bne.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3e36:	f1ba 0f00 	cmp.w	sl, #0
    3e3a:	d011      	beq.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3e3c:	a803      	add	r0, sp, #12
    3e3e:	f000 f961 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3e42:	686a      	ldr	r2, [r5, #4]
    3e44:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e48:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e4c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e50:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e54:	23fe      	movs	r3, #254	; 0xfe
    3e56:	2101      	movs	r1, #1
    3e58:	4620      	mov	r0, r4
    3e5a:	324a      	adds	r2, #74	; 0x4a
    3e5c:	f00a ffb1 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e60:	2005      	movs	r0, #5
    3e62:	e7c0      	b.n	3de6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34e>
    3e64:	200000d0 	.word	0x200000d0
    3e68:	20000d80 	.word	0x20000d80
    3e6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e6e:	4c3f      	ldr	r4, [pc, #252]	; (3f6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d4>)
    3e70:	4605      	mov	r5, r0
    3e72:	6860      	ldr	r0, [r4, #4]
    3e74:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e78:	2900      	cmp	r1, #0
    3e7a:	d06c      	beq.n	3f56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4be>
    3e7c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e80:	2802      	cmp	r0, #2
    3e82:	d02c      	beq.n	3ede <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x446>
    3e84:	2801      	cmp	r0, #1
    3e86:	d043      	beq.n	3f10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x478>
    3e88:	f7ff fdb0 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d067      	beq.n	3f60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c8>
    3e90:	686a      	ldr	r2, [r5, #4]
    3e92:	6861      	ldr	r1, [r4, #4]
    3e94:	7810      	ldrb	r0, [r2, #0]
    3e96:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3e9a:	4298      	cmp	r0, r3
    3e9c:	d14c      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3e9e:	7850      	ldrb	r0, [r2, #1]
    3ea0:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ea4:	4298      	cmp	r0, r3
    3ea6:	d147      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ea8:	7890      	ldrb	r0, [r2, #2]
    3eaa:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3eae:	4298      	cmp	r0, r3
    3eb0:	d142      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3eb2:	78d0      	ldrb	r0, [r2, #3]
    3eb4:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3eb8:	4298      	cmp	r0, r3
    3eba:	d13d      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ebc:	7910      	ldrb	r0, [r2, #4]
    3ebe:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3ec2:	4298      	cmp	r0, r3
    3ec4:	d138      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ec6:	7950      	ldrb	r0, [r2, #5]
    3ec8:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3ecc:	4290      	cmp	r0, r2
    3ece:	d133      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ed0:	7c68      	ldrb	r0, [r5, #17]
    3ed2:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3ed6:	4290      	cmp	r0, r2
    3ed8:	d12e      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3eda:	2001      	movs	r0, #1
    3edc:	e02d      	b.n	3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
    3ede:	a803      	add	r0, sp, #12
    3ee0:	f000 f910 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3ee4:	6862      	ldr	r2, [r4, #4]
    3ee6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3eea:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3eee:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3ef2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3ef6:	23ff      	movs	r3, #255	; 0xff
    3ef8:	2100      	movs	r1, #0
    3efa:	4628      	mov	r0, r5
    3efc:	324a      	adds	r2, #74	; 0x4a
    3efe:	f00a ff60 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3f02:	6861      	ldr	r1, [r4, #4]
    3f04:	2001      	movs	r0, #1
    3f06:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3f0a:	200b      	movs	r0, #11
    3f0c:	b004      	add	sp, #16
    3f0e:	bd70      	pop	{r4, r5, r6, pc}
    3f10:	a803      	add	r0, sp, #12
    3f12:	f000 f8f7 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3f16:	6862      	ldr	r2, [r4, #4]
    3f18:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f1c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3f20:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3f24:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3f28:	23ff      	movs	r3, #255	; 0xff
    3f2a:	2100      	movs	r1, #0
    3f2c:	4628      	mov	r0, r5
    3f2e:	324a      	adds	r2, #74	; 0x4a
    3f30:	f00a ff47 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3f34:	2005      	movs	r0, #5
    3f36:	e7e9      	b.n	3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>
    3f38:	2000      	movs	r0, #0
    3f3a:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3f3e:	2901      	cmp	r1, #1
    3f40:	d00c      	beq.n	3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f42:	b958      	cbnz	r0, 3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f44:	490a      	ldr	r1, [pc, #40]	; (3f70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d8>)
    3f46:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3f4a:	2808      	cmp	r0, #8
    3f4c:	d003      	beq.n	3f56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4be>
    3f4e:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3f52:	4281      	cmp	r1, r0
    3f54:	d002      	beq.n	3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f56:	f003 ff89 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f5a:	e7eb      	b.n	3f34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49c>
    3f5c:	200c      	movs	r0, #12
    3f5e:	e7d5      	b.n	3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>
    3f60:	f640 61df 	movw	r1, #3807	; 0xedf
    3f64:	2032      	movs	r0, #50	; 0x32
    3f66:	f7fc fd7d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f6a:	0000      	.short	0x0000
    3f6c:	200000d0 	.word	0x200000d0
    3f70:	20000d80 	.word	0x20000d80
    3f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3f76:	4c1e      	ldr	r4, [pc, #120]	; (3ff0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x558>)
    3f78:	4605      	mov	r5, r0
    3f7a:	6860      	ldr	r0, [r4, #4]
    3f7c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3f80:	b129      	cbz	r1, 3f8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f6>
    3f82:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f86:	2802      	cmp	r0, #2
    3f88:	d004      	beq.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f8a:	2801      	cmp	r0, #1
    3f8c:	d01b      	beq.n	3fc6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52e>
    3f8e:	f003 ff6d 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f92:	e02a      	b.n	3fea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x552>
    3f94:	a803      	add	r0, sp, #12
    3f96:	f000 f8b5 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3f9a:	6862      	ldr	r2, [r4, #4]
    3f9c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3fa0:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3fa4:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3fa8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3fac:	23ff      	movs	r3, #255	; 0xff
    3fae:	2106      	movs	r1, #6
    3fb0:	4628      	mov	r0, r5
    3fb2:	324a      	adds	r2, #74	; 0x4a
    3fb4:	f00a ff05 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3fb8:	6862      	ldr	r2, [r4, #4]
    3fba:	200b      	movs	r0, #11
    3fbc:	2100      	movs	r1, #0
    3fbe:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3fc2:	b004      	add	sp, #16
    3fc4:	bd70      	pop	{r4, r5, r6, pc}
    3fc6:	a803      	add	r0, sp, #12
    3fc8:	f000 f89c 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3fcc:	6862      	ldr	r2, [r4, #4]
    3fce:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3fd2:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3fd6:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3fda:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3fde:	23ff      	movs	r3, #255	; 0xff
    3fe0:	2106      	movs	r1, #6
    3fe2:	4628      	mov	r0, r5
    3fe4:	324a      	adds	r2, #74	; 0x4a
    3fe6:	f00a feec 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3fea:	2005      	movs	r0, #5
    3fec:	e7e9      	b.n	3fc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52a>
    3fee:	0000      	.short	0x0000
    3ff0:	200000d0 	.word	0x200000d0
    3ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3ff6:	b389      	cbz	r1, 405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
    3ff8:	2901      	cmp	r1, #1
    3ffa:	d034      	beq.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    3ffc:	2505      	movs	r5, #5
    3ffe:	2902      	cmp	r1, #2
    4000:	d004      	beq.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    4002:	2906      	cmp	r1, #6
    4004:	d025      	beq.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    4006:	f003 ff31 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    400a:	e01f      	b.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    400c:	4606      	mov	r6, r0
    400e:	f003 ff2d 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4012:	4c17      	ldr	r4, [pc, #92]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    4014:	6860      	ldr	r0, [r4, #4]
    4016:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    401a:	b1b9      	cbz	r1, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    401c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4020:	2801      	cmp	r0, #1
    4022:	d001      	beq.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4024:	2802      	cmp	r0, #2
    4026:	d111      	bne.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4028:	a803      	add	r0, sp, #12
    402a:	f000 f86b 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    402e:	6862      	ldr	r2, [r4, #4]
    4030:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4034:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4038:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    403c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4040:	23ff      	movs	r3, #255	; 0xff
    4042:	2102      	movs	r1, #2
    4044:	4630      	mov	r0, r6
    4046:	324a      	adds	r2, #74	; 0x4a
    4048:	f00a febb 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    404c:	b004      	add	sp, #16
    404e:	4628      	mov	r0, r5
    4050:	bd70      	pop	{r4, r5, r6, pc}
    4052:	b004      	add	sp, #16
    4054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4058:	f7ff bf8c 	b.w	3f74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4dc>
    405c:	b004      	add	sp, #16
    405e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4062:	f7ff bf03 	b.w	3e6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d4>
    4066:	b004      	add	sp, #16
    4068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    406c:	f7ff be2c 	b.w	3cc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x230>
    4070:	200000d0 	.word	0x200000d0
    4074:	b570      	push	{r4, r5, r6, lr}
    4076:	4c11      	ldr	r4, [pc, #68]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    4078:	4605      	mov	r5, r0
    407a:	6861      	ldr	r1, [r4, #4]
    407c:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    4080:	2800      	cmp	r0, #0
    4082:	d019      	beq.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    4084:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    4088:	2800      	cmp	r0, #0
    408a:	d015      	beq.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    408c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    4090:	314a      	adds	r1, #74	; 0x4a
    4092:	f00a fe0f 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    4096:	b140      	cbz	r0, 40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    4098:	f7fe f80e 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    409c:	6861      	ldr	r1, [r4, #4]
    409e:	462a      	mov	r2, r5
    40a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40a4:	314a      	adds	r1, #74	; 0x4a
    40a6:	f009 bec5 	b.w	de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    40aa:	6860      	ldr	r0, [r4, #4]
    40ac:	4629      	mov	r1, r5
    40ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40b2:	304a      	adds	r0, #74	; 0x4a
    40b4:	f009 bead 	b.w	de12 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    40b8:	bd70      	pop	{r4, r5, r6, pc}
    40ba:	0000      	.short	0x0000
    40bc:	200000d0 	.word	0x200000d0
    40c0:	4602      	mov	r2, r0
    40c2:	480b      	ldr	r0, [pc, #44]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    40c4:	b082      	sub	sp, #8
    40c6:	6840      	ldr	r0, [r0, #4]
    40c8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    40cc:	f88d 1000 	strb.w	r1, [sp]
    40d0:	9900      	ldr	r1, [sp, #0]
    40d2:	9100      	str	r1, [sp, #0]
    40d4:	f89d 1000 	ldrb.w	r1, [sp]
    40d8:	2900      	cmp	r1, #0
    40da:	d107      	bne.n	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40dc:	6e81      	ldr	r1, [r0, #104]	; 0x68
    40de:	2900      	cmp	r1, #0
    40e0:	d004      	beq.n	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40e2:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    40e6:	b002      	add	sp, #8
    40e8:	f007 baac 	b.w	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    40ec:	b002      	add	sp, #8
    40ee:	4770      	bx	lr
    40f0:	200000d0 	.word	0x200000d0
    40f4:	b510      	push	{r4, lr}
    40f6:	f7fe fb9d 	bl	2834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    40fa:	4901      	ldr	r1, [pc, #4]	; (4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>)
    40fc:	7008      	strb	r0, [r1, #0]
    40fe:	bd10      	pop	{r4, pc}
    4100:	200000d0 	.word	0x200000d0
    4104:	4a07      	ldr	r2, [pc, #28]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    4106:	b510      	push	{r4, lr}
    4108:	f992 1000 	ldrsb.w	r1, [r2]
    410c:	297f      	cmp	r1, #127	; 0x7f
    410e:	d003      	beq.n	4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>
    4110:	7001      	strb	r1, [r0, #0]
    4112:	207f      	movs	r0, #127	; 0x7f
    4114:	7010      	strb	r0, [r2, #0]
    4116:	bd10      	pop	{r4, pc}
    4118:	f44f 6189 	mov.w	r1, #1096	; 0x448
    411c:	2032      	movs	r0, #50	; 0x32
    411e:	f7fc fca1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4122:	0000      	.short	0x0000
    4124:	200000d0 	.word	0x200000d0
    4128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    412c:	4607      	mov	r7, r0
    412e:	f7fd f893 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4132:	4604      	mov	r4, r0
    4134:	f7fd f896 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4138:	4621      	mov	r1, r4
    413a:	f00a fe1d 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    413e:	0005      	movs	r5, r0
    4140:	d012      	beq.n	4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>
    4142:	4c2d      	ldr	r4, [pc, #180]	; (41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>)
    4144:	6860      	ldr	r0, [r4, #4]
    4146:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    414a:	2801      	cmp	r0, #1
    414c:	d004      	beq.n	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    414e:	2802      	cmp	r0, #2
    4150:	d002      	beq.n	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    4152:	f7ff fc4b 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4156:	b150      	cbz	r0, 416e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16e>
    4158:	f06f 0613 	mvn.w	r6, #19
    415c:	b33f      	cbz	r7, 41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
    415e:	4628      	mov	r0, r5
    4160:	f00a f996 	bl	e490 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    4164:	b950      	cbnz	r0, 417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>
    4166:	e005      	b.n	4174 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x174>
    4168:	f241 5142 	movw	r1, #5442	; 0x1542
    416c:	e03a      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    416e:	f241 5148 	movw	r1, #5448	; 0x1548
    4172:	e037      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    4174:	4628      	mov	r0, r5
    4176:	f00a f9ad 	bl	e4d4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    417a:	b1c0      	cbz	r0, 41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
    417c:	6861      	ldr	r1, [r4, #4]
    417e:	4628      	mov	r0, r5
    4180:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4184:	2a05      	cmp	r2, #5
    4186:	d202      	bcs.n	418e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18e>
    4188:	f241 41cc 	movw	r1, #5324	; 0x14cc
    418c:	e02a      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    418e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4192:	2a0b      	cmp	r2, #11
    4194:	d302      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    4196:	f241 41cd 	movw	r1, #5325	; 0x14cd
    419a:	e023      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    419c:	68e2      	ldr	r2, [r4, #12]
    419e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    41a2:	6952      	ldr	r2, [r2, #20]
    41a4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    41a8:	5851      	ldr	r1, [r2, r1]
    41aa:	4788      	blx	r1
    41ac:	e016      	b.n	41dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1dc>
    41ae:	6860      	ldr	r0, [r4, #4]
    41b0:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    41b4:	2905      	cmp	r1, #5
    41b6:	d202      	bcs.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b8:	f241 5138 	movw	r1, #5432	; 0x1538
    41bc:	e012      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41be:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    41c2:	290b      	cmp	r1, #11
    41c4:	d302      	bcc.n	41cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1cc>
    41c6:	f241 5139 	movw	r1, #5433	; 0x1539
    41ca:	e00b      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41cc:	68e1      	ldr	r1, [r4, #12]
    41ce:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    41d2:	6989      	ldr	r1, [r1, #24]
    41d4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    41d8:	5808      	ldr	r0, [r1, r0]
    41da:	4780      	blx	r0
    41dc:	280f      	cmp	r0, #15
    41de:	d304      	bcc.n	41ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ea>
    41e0:	f241 515d 	movw	r1, #5469	; 0x155d
    41e4:	2032      	movs	r0, #50	; 0x32
    41e6:	f7fc fc3d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41ea:	68e1      	ldr	r1, [r4, #12]
    41ec:	6909      	ldr	r1, [r1, #16]
    41ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    41f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41f6:	4700      	bx	r0
    41f8:	200000d0 	.word	0x200000d0
    41fc:	b510      	push	{r4, lr}
    41fe:	b118      	cbz	r0, 4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>
    4200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4204:	f000 b922 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    4208:	2900      	cmp	r1, #0
    420a:	d01d      	beq.n	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    420c:	480f      	ldr	r0, [pc, #60]	; (424c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24c>)
    420e:	6841      	ldr	r1, [r0, #4]
    4210:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4214:	2a0b      	cmp	r2, #11
    4216:	d202      	bcs.n	421e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21e>
    4218:	f241 6118 	movw	r1, #5656	; 0x1618
    421c:	e005      	b.n	422a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22a>
    421e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4222:	2a0f      	cmp	r2, #15
    4224:	d304      	bcc.n	4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>
    4226:	f241 6119 	movw	r1, #5657	; 0x1619
    422a:	2032      	movs	r0, #50	; 0x32
    422c:	f7fc fc1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4230:	68c0      	ldr	r0, [r0, #12]
    4232:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    4236:	6880      	ldr	r0, [r0, #8]
    4238:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    423c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4240:	5840      	ldr	r0, [r0, r1]
    4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4246:	4700      	bx	r0
    4248:	bd10      	pop	{r4, pc}
    424a:	0000      	.short	0x0000
    424c:	200000d0 	.word	0x200000d0
    4250:	b510      	push	{r4, lr}
    4252:	f7ff fabd 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4256:	f000 f907 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    425a:	4805      	ldr	r0, [pc, #20]	; (4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>)
    425c:	6881      	ldr	r1, [r0, #8]
    425e:	2000      	movs	r0, #0
    4260:	f7ff fc08 	bl	3a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    4264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4268:	2002      	movs	r0, #2
    426a:	f000 bae1 	b.w	4830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    426e:	0000      	.short	0x0000
    4270:	200000d0 	.word	0x200000d0
    4274:	b510      	push	{r4, lr}
    4276:	f7fc ffef 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    427a:	4604      	mov	r4, r0
    427c:	f7fc fff2 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4280:	4621      	mov	r1, r4
    4282:	f00a fd79 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4286:	b150      	cbz	r0, 429e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29e>
    4288:	f004 f81a 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    428c:	2000      	movs	r0, #0
    428e:	f003 fee3 	bl	8058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4292:	4905      	ldr	r1, [pc, #20]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4294:	2006      	movs	r0, #6
    4296:	6849      	ldr	r1, [r1, #4]
    4298:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    429c:	bd10      	pop	{r4, pc}
    429e:	f240 612b 	movw	r1, #1579	; 0x62b
    42a2:	2032      	movs	r0, #50	; 0x32
    42a4:	f7fc fbde 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	490f      	ldr	r1, [pc, #60]	; (42ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ec>)
    42ae:	b510      	push	{r4, lr}
    42b0:	6848      	ldr	r0, [r1, #4]
    42b2:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    42b6:	2a06      	cmp	r2, #6
    42b8:	d202      	bcs.n	42c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c0>
    42ba:	f241 6146 	movw	r1, #5702	; 0x1646
    42be:	e005      	b.n	42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>
    42c0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    42c4:	2a0b      	cmp	r2, #11
    42c6:	d304      	bcc.n	42d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d2>
    42c8:	f241 6147 	movw	r1, #5703	; 0x1647
    42cc:	2032      	movs	r0, #50	; 0x32
    42ce:	f7fc fbc9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42d2:	68c9      	ldr	r1, [r1, #12]
    42d4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42d8:	68c9      	ldr	r1, [r1, #12]
    42da:	f06f 0213 	mvn.w	r2, #19
    42de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    42e2:	5808      	ldr	r0, [r1, r0]
    42e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e8:	4700      	bx	r0
    42ea:	0000      	.short	0x0000
    42ec:	200000d0 	.word	0x200000d0
    42f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f4:	4c31      	ldr	r4, [pc, #196]	; (43bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3bc>)
    42f6:	4605      	mov	r5, r0
    42f8:	460e      	mov	r6, r1
    42fa:	6860      	ldr	r0, [r4, #4]
    42fc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4300:	b120      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4302:	2801      	cmp	r0, #1
    4304:	d002      	beq.n	430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4306:	200c      	movs	r0, #12
    4308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    430c:	f003 ff32 	bl	8174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4310:	f003 fd8a 	bl	7e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4314:	f003 fbae 	bl	7a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4318:	f004 f9b0 	bl	867c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    431c:	4828      	ldr	r0, [pc, #160]	; (43c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c0>)
    431e:	f003 fe93 	bl	8048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4322:	4828      	ldr	r0, [pc, #160]	; (43c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c4>)
    4324:	f004 f890 	bl	8448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4328:	4827      	ldr	r0, [pc, #156]	; (43c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c8>)
    432a:	f004 f883 	bl	8434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    432e:	4630      	mov	r0, r6
    4330:	f003 ffc6 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4334:	7968      	ldrb	r0, [r5, #5]
    4336:	b110      	cbz	r0, 433e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33e>
    4338:	2001      	movs	r0, #1
    433a:	f7ff fec1 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    433e:	7928      	ldrb	r0, [r5, #4]
    4340:	2803      	cmp	r0, #3
    4342:	d001      	beq.n	4348 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x348>
    4344:	b118      	cbz	r0, 434e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34e>
    4346:	e018      	b.n	437a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37a>
    4348:	f640 2141 	movw	r1, #2625	; 0xa41
    434c:	e033      	b.n	43b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b6>
    434e:	6861      	ldr	r1, [r4, #4]
    4350:	2000      	movs	r0, #0
    4352:	2503      	movs	r5, #3
    4354:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    4358:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    435c:	1c52      	adds	r2, r2, #1
    435e:	fbb2 f7f5 	udiv	r7, r2, r5
    4362:	fb05 2217 	mls	r2, r5, r7, r2
    4366:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    436a:	fa23 f202 	lsr.w	r2, r3, r2
    436e:	07d2      	lsls	r2, r2, #31
    4370:	d103      	bne.n	437a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37a>
    4372:	1c40      	adds	r0, r0, #1
    4374:	b2c0      	uxtb	r0, r0
    4376:	2803      	cmp	r0, #3
    4378:	d3ee      	bcc.n	4358 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x358>
    437a:	6860      	ldr	r0, [r4, #4]
    437c:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    4380:	f003 ff7c 	bl	827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4384:	4631      	mov	r1, r6
    4386:	2001      	movs	r0, #1
    4388:	f7ff fa4a 	bl	3820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    438c:	2800      	cmp	r0, #0
    438e:	d0bb      	beq.n	4308 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x308>
    4390:	f000 f922 	bl	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    4394:	6860      	ldr	r0, [r4, #4]
    4396:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    439a:	b138      	cbz	r0, 43ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ac>
    439c:	f7fd fe90 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    43a0:	480a      	ldr	r0, [pc, #40]	; (43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>)
    43a2:	6800      	ldr	r0, [r0, #0]
    43a4:	2803      	cmp	r0, #3
    43a6:	d004      	beq.n	43b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b2>
    43a8:	2000      	movs	r0, #0
    43aa:	e7ad      	b.n	4308 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x308>
    43ac:	f7fe f87c 	bl	24a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    43b0:	e7f6      	b.n	43a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a0>
    43b2:	f640 2153 	movw	r1, #2643	; 0xa53
    43b6:	2032      	movs	r0, #50	; 0x32
    43b8:	f7fc fb54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43bc:	200000d0 	.word	0x200000d0
    43c0:	000046c0 	.word	0x000046c0
    43c4:	00555555 	.word	0x00555555
    43c8:	8e89bed6 	.word	0x8e89bed6
    43cc:	40001550 	.word	0x40001550
    43d0:	b510      	push	{r4, lr}
    43d2:	2000      	movs	r0, #0
    43d4:	f7ff fe74 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    43d8:	4808      	ldr	r0, [pc, #32]	; (43fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3fc>)
    43da:	6840      	ldr	r0, [r0, #4]
    43dc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    43e0:	b128      	cbz	r0, 43ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ee>
    43e2:	2801      	cmp	r0, #1
    43e4:	d003      	beq.n	43ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ee>
    43e6:	2802      	cmp	r0, #2
    43e8:	d004      	beq.n	43f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f4>
    43ea:	200c      	movs	r0, #12
    43ec:	bd10      	pop	{r4, pc}
    43ee:	f000 f82d 	bl	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    43f2:	e001      	b.n	43f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f8>
    43f4:	f000 f840 	bl	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    43f8:	2000      	movs	r0, #0
    43fa:	bd10      	pop	{r4, pc}
    43fc:	200000d0 	.word	0x200000d0
    4400:	b510      	push	{r4, lr}
    4402:	2000      	movs	r0, #0
    4404:	7048      	strb	r0, [r1, #1]
    4406:	2019      	movs	r0, #25
    4408:	7008      	strb	r0, [r1, #0]
    440a:	480f      	ldr	r0, [pc, #60]	; (4448 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x448>)
    440c:	6840      	ldr	r0, [r0, #4]
    440e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4412:	6048      	str	r0, [r1, #4]
    4414:	7908      	ldrb	r0, [r1, #4]
    4416:	2801      	cmp	r0, #1
    4418:	d114      	bne.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    441a:	88cc      	ldrh	r4, [r1, #6]
    441c:	2100      	movs	r1, #0
    441e:	4620      	mov	r0, r4
    4420:	f009 fc4d 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4424:	2800      	cmp	r0, #0
    4426:	d00d      	beq.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    4428:	4620      	mov	r0, r4
    442a:	f009 fccf 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    442e:	2100      	movs	r1, #0
    4430:	4620      	mov	r0, r4
    4432:	f7fc fd7b 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4436:	2800      	cmp	r0, #0
    4438:	d004      	beq.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    443a:	f44f 6182 	mov.w	r1, #1040	; 0x410
    443e:	2032      	movs	r0, #50	; 0x32
    4440:	f7fc fb10 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4444:	bd10      	pop	{r4, pc}
    4446:	0000      	.short	0x0000
    4448:	200000d0 	.word	0x200000d0
    444c:	b510      	push	{r4, lr}
    444e:	f7ff f9bf 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4452:	4904      	ldr	r1, [pc, #16]	; (4464 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x464>)
    4454:	2001      	movs	r0, #1
    4456:	6849      	ldr	r1, [r1, #4]
    4458:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4460:	f000 bb0a 	b.w	4a78 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    4464:	200000d0 	.word	0x200000d0
    4468:	4902      	ldr	r1, [pc, #8]	; (4474 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x474>)
    446a:	2000      	movs	r0, #0
    446c:	6849      	ldr	r1, [r1, #4]
    446e:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4472:	4770      	bx	lr
    4474:	200000d0 	.word	0x200000d0
    4478:	b570      	push	{r4, r5, r6, lr}
    447a:	f7fc feed 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    447e:	4604      	mov	r4, r0
    4480:	f7fc fef0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4484:	4621      	mov	r1, r4
    4486:	f00a fc77 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    448a:	0004      	movs	r4, r0
    448c:	d020      	beq.n	44d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d0>
    448e:	f00a fc80 	bl	ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    4492:	2000      	movs	r0, #0
    4494:	f000 f9fa 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4498:	b1f8      	cbz	r0, 44da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4da>
    449a:	4d20      	ldr	r5, [pc, #128]	; (451c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x51c>)
    449c:	6868      	ldr	r0, [r5, #4]
    449e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    44a2:	2802      	cmp	r0, #2
    44a4:	d003      	beq.n	44ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ae>
    44a6:	4621      	mov	r1, r4
    44a8:	2000      	movs	r0, #0
    44aa:	f7ff f9b9 	bl	3820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    44ae:	1ce0      	adds	r0, r4, #3
    44b0:	f009 fd3f 	bl	df32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    44b4:	6869      	ldr	r1, [r5, #4]
    44b6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    44ba:	b128      	cbz	r0, 44c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c8>
    44bc:	2440      	movs	r4, #64	; 0x40
    44be:	f003 faf9 	bl	7ab4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    44c2:	4620      	mov	r0, r4
    44c4:	f003 fcbe 	bl	7e44 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    44c8:	f7ff fa90 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    44cc:	b970      	cbnz	r0, 44ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ec>
    44ce:	e008      	b.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
    44d0:	f240 5119 	movw	r1, #1305	; 0x519
    44d4:	2032      	movs	r0, #50	; 0x32
    44d6:	f7fc fac5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44de:	f7ff bfb5 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    44e2:	6868      	ldr	r0, [r5, #4]
    44e4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    44e8:	2802      	cmp	r0, #2
    44ea:	d104      	bne.n	44f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f6>
    44ec:	2100      	movs	r1, #0
    44ee:	2201      	movs	r2, #1
    44f0:	4608      	mov	r0, r1
    44f2:	f003 ff6d 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    44f6:	6868      	ldr	r0, [r5, #4]
    44f8:	21ff      	movs	r1, #255	; 0xff
    44fa:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    44fe:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4502:	2100      	movs	r1, #0
    4504:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    4508:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    450c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4510:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4514:	2105      	movs	r1, #5
    4516:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    451a:	bd70      	pop	{r4, r5, r6, pc}
    451c:	200000d0 	.word	0x200000d0
    4520:	b570      	push	{r4, r5, r6, lr}
    4522:	f7fc fe99 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4526:	4604      	mov	r4, r0
    4528:	f7fc fe9c 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    452c:	4621      	mov	r1, r4
    452e:	f00a fc23 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4532:	0005      	movs	r5, r0
    4534:	d028      	beq.n	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    4536:	4e19      	ldr	r6, [pc, #100]	; (459c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59c>)
    4538:	2004      	movs	r0, #4
    453a:	6874      	ldr	r4, [r6, #4]
    453c:	3470      	adds	r4, #112	; 0x70
    453e:	f000 f9a5 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4542:	b330      	cbz	r0, 4592 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x592>
    4544:	200c      	movs	r0, #12
    4546:	7020      	strb	r0, [r4, #0]
    4548:	2000      	movs	r0, #0
    454a:	f000 f971 	bl	4830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    454e:	7828      	ldrb	r0, [r5, #0]
    4550:	6871      	ldr	r1, [r6, #4]
    4552:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4556:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    455a:	2005      	movs	r0, #5
    455c:	f7ff fb16 	bl	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
    4560:	4a0f      	ldr	r2, [pc, #60]	; (45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>)
    4562:	68b1      	ldr	r1, [r6, #8]
    4564:	2520      	movs	r5, #32
    4566:	6d50      	ldr	r0, [r2, #84]	; 0x54
    4568:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    456c:	7808      	ldrb	r0, [r1, #0]
    456e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    4572:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    4576:	4318      	orrs	r0, r3
    4578:	7008      	strb	r0, [r1, #0]
    457a:	6d50      	ldr	r0, [r2, #84]	; 0x54
    457c:	7ea2      	ldrb	r2, [r4, #26]
    457e:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    4582:	4011      	ands	r1, r2
    4584:	7001      	strb	r1, [r0, #0]
    4586:	bd70      	pop	{r4, r5, r6, pc}
    4588:	f240 619a 	movw	r1, #1690	; 0x69a
    458c:	2032      	movs	r0, #50	; 0x32
    458e:	f7fc fa69 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4596:	f7ff bf59 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    459a:	0000      	.short	0x0000
    459c:	200000d0 	.word	0x200000d0
    45a0:	20000d80 	.word	0x20000d80
    45a4:	b510      	push	{r4, lr}
    45a6:	2003      	movs	r0, #3
    45a8:	f000 f970 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    45ac:	b168      	cbz	r0, 45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ae:	2003      	movs	r0, #3
    45b0:	f7ff faec 	bl	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
    45b4:	2201      	movs	r2, #1
    45b6:	4611      	mov	r1, r2
    45b8:	2000      	movs	r0, #0
    45ba:	f003 ff09 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    45be:	4905      	ldr	r1, [pc, #20]	; (45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>)
    45c0:	200b      	movs	r0, #11
    45c2:	6849      	ldr	r1, [r1, #4]
    45c4:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    45c8:	bd10      	pop	{r4, pc}
    45ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45ce:	f7ff bf3d 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    45d2:	0000      	.short	0x0000
    45d4:	200000d0 	.word	0x200000d0
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	4d19      	ldr	r5, [pc, #100]	; (4640 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x640>)
    45dc:	2000      	movs	r0, #0
    45de:	686c      	ldr	r4, [r5, #4]
    45e0:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    45e4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    45e8:	b910      	cbnz	r0, 45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>
    45ea:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    45ee:	b308      	cbz	r0, 4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    45f0:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    45f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    45f8:	4050      	eors	r0, r2
    45fa:	ea70 0101 	orns	r1, r0, r1
    45fe:	d019      	beq.n	4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    4600:	f007 f83e 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4604:	e9d4 2300 	ldrd	r2, r3, [r4]
    4608:	1a80      	subs	r0, r0, r2
    460a:	4199      	sbcs	r1, r3
    460c:	d312      	bcc.n	4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    460e:	f7fd feb9 	bl	2384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4612:	490c      	ldr	r1, [pc, #48]	; (4644 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x644>)
    4614:	fba0 2301 	umull	r2, r3, r0, r1
    4618:	6868      	ldr	r0, [r5, #4]
    461a:	3090      	adds	r0, #144	; 0x90
    461c:	f00a fbae 	bl	ed7c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4620:	6868      	ldr	r0, [r5, #4]
    4622:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    4626:	b110      	cbz	r0, 462e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62e>
    4628:	2001      	movs	r0, #1
    462a:	f7fd fd95 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    462e:	2001      	movs	r0, #1
    4630:	f7ff fd20 	bl	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    4634:	6869      	ldr	r1, [r5, #4]
    4636:	2002      	movs	r0, #2
    4638:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    463c:	bd70      	pop	{r4, r5, r6, pc}
    463e:	0000      	.short	0x0000
    4640:	200000d0 	.word	0x200000d0
    4644:	000f4240 	.word	0x000f4240
    4648:	00004469 	.word	0x00004469
    464c:	0000444d 	.word	0x0000444d
    4650:	0000ed59 	.word	0x0000ed59
    4654:	0000ed59 	.word	0x0000ed59
    4658:	0000ed59 	.word	0x0000ed59
    465c:	00004479 	.word	0x00004479
    4660:	0000ed59 	.word	0x0000ed59
    4664:	0000ed59 	.word	0x0000ed59
    4668:	0000ed59 	.word	0x0000ed59
    466c:	0000ed59 	.word	0x0000ed59
    4670:	0000ed59 	.word	0x0000ed59
    4674:	000045a5 	.word	0x000045a5
    4678:	00004521 	.word	0x00004521
    467c:	0000ed59 	.word	0x0000ed59
    4680:	0000ed59 	.word	0x0000ed59
    4684:	00004275 	.word	0x00004275
    4688:	00004251 	.word	0x00004251
    468c:	00000000 	.word	0x00000000
    4690:	0000ed63 	.word	0x0000ed63
    4694:	0000ed01 	.word	0x0000ed01
    4698:	0000ed13 	.word	0x0000ed13
    469c:	0000ed21 	.word	0x0000ed21
    46a0:	00003999 	.word	0x00003999
    46a4:	000042f1 	.word	0x000042f1
    46a8:	000043d1 	.word	0x000043d1
    46ac:	00004684 	.word	0x00004684
    46b0:	0000468c 	.word	0x0000468c
    46b4:	00004648 	.word	0x00004648
    46b8:	0000469c 	.word	0x0000469c
    46bc:	00004694 	.word	0x00004694
    46c0:	000042ad 	.word	0x000042ad
    46c4:	00004129 	.word	0x00004129
    46c8:	000041fd 	.word	0x000041fd
    46cc:	0000ed75 	.word	0x0000ed75
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4604      	mov	r4, r0
    46d4:	7800      	ldrb	r0, [r0, #0]
    46d6:	2805      	cmp	r0, #5
    46d8:	d001      	beq.n	46de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6de>
    46da:	2148      	movs	r1, #72	; 0x48
    46dc:	e058      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    46de:	7ba0      	ldrb	r0, [r4, #14]
    46e0:	06c0      	lsls	r0, r0, #27
    46e2:	d401      	bmi.n	46e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e8>
    46e4:	2149      	movs	r1, #73	; 0x49
    46e6:	e053      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    46e8:	221c      	movs	r2, #28
    46ea:	1d21      	adds	r1, r4, #4
    46ec:	482f      	ldr	r0, [pc, #188]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    46ee:	f00c fc2a 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46f2:	482e      	ldr	r0, [pc, #184]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    46f4:	7b22      	ldrb	r2, [r4, #12]
    46f6:	f104 0120 	add.w	r1, r4, #32
    46fa:	301c      	adds	r0, #28
    46fc:	f00c fc23 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4700:	482a      	ldr	r0, [pc, #168]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    4702:	f04f 0201 	mov.w	r2, #1
    4706:	7a81      	ldrb	r1, [r0, #10]
    4708:	0749      	lsls	r1, r1, #29
    470a:	d502      	bpl.n	4712 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x712>
    470c:	7cc1      	ldrb	r1, [r0, #19]
    470e:	29fe      	cmp	r1, #254	; 0xfe
    4710:	d00c      	beq.n	472c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72c>
    4712:	2304      	movs	r3, #4
    4714:	7023      	strb	r3, [r4, #0]
    4716:	6801      	ldr	r1, [r0, #0]
    4718:	6061      	str	r1, [r4, #4]
    471a:	6841      	ldr	r1, [r0, #4]
    471c:	60a1      	str	r1, [r4, #8]
    471e:	8901      	ldrh	r1, [r0, #8]
    4720:	81a1      	strh	r1, [r4, #12]
    4722:	7a81      	ldrb	r1, [r0, #10]
    4724:	070d      	lsls	r5, r1, #28
    4726:	d519      	bpl.n	475c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x75c>
    4728:	73a3      	strb	r3, [r4, #14]
    472a:	e02d      	b.n	4788 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x788>
    472c:	2113      	movs	r1, #19
    472e:	7021      	strb	r1, [r4, #0]
    4730:	7801      	ldrb	r1, [r0, #0]
    4732:	7121      	strb	r1, [r4, #4]
    4734:	7162      	strb	r2, [r4, #5]
    4736:	7841      	ldrb	r1, [r0, #1]
    4738:	71a1      	strb	r1, [r4, #6]
    473a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    473e:	f8c4 1007 	str.w	r1, [r4, #7]
    4742:	88c1      	ldrh	r1, [r0, #6]
    4744:	f8a4 100b 	strh.w	r1, [r4, #11]
    4748:	21fe      	movs	r1, #254	; 0xfe
    474a:	7361      	strb	r1, [r4, #13]
    474c:	6941      	ldr	r1, [r0, #20]
    474e:	f8c4 100e 	str.w	r1, [r4, #14]
    4752:	8b01      	ldrh	r1, [r0, #24]
    4754:	8261      	strh	r1, [r4, #18]
    4756:	7a40      	ldrb	r0, [r0, #9]
    4758:	7520      	strb	r0, [r4, #20]
    475a:	bd70      	pop	{r4, r5, r6, pc}
    475c:	07cb      	lsls	r3, r1, #31
    475e:	d003      	beq.n	4768 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x768>
    4760:	078b      	lsls	r3, r1, #30
    4762:	d501      	bpl.n	4768 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x768>
    4764:	2100      	movs	r1, #0
    4766:	e00e      	b.n	4786 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x786>
    4768:	074b      	lsls	r3, r1, #29
    476a:	d501      	bpl.n	4770 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x770>
    476c:	73a2      	strb	r2, [r4, #14]
    476e:	e00b      	b.n	4788 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x788>
    4770:	07ca      	lsls	r2, r1, #31
    4772:	d110      	bne.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4774:	078a      	lsls	r2, r1, #30
    4776:	d501      	bpl.n	477c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x77c>
    4778:	2102      	movs	r1, #2
    477a:	e004      	b.n	4786 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x786>
    477c:	07ca      	lsls	r2, r1, #31
    477e:	d10a      	bne.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4780:	0789      	lsls	r1, r1, #30
    4782:	d408      	bmi.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4784:	2103      	movs	r1, #3
    4786:	73a1      	strb	r1, [r4, #14]
    4788:	7a02      	ldrb	r2, [r0, #8]
    478a:	2a1f      	cmp	r2, #31
    478c:	d905      	bls.n	479a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x79a>
    478e:	218d      	movs	r1, #141	; 0x8d
    4790:	2033      	movs	r0, #51	; 0x33
    4792:	f7fc f967 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4796:	218a      	movs	r1, #138	; 0x8a
    4798:	e7fa      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    479a:	f104 000f 	add.w	r0, r4, #15
    479e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47a2:	4902      	ldr	r1, [pc, #8]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    47a4:	311c      	adds	r1, #28
    47a6:	f00c bbce 	b.w	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    47aa:	0000      	.short	0x0000
    47ac:	200017dd 	.word	0x200017dd
    47b0:	2100      	movs	r1, #0
    47b2:	7201      	strb	r1, [r0, #8]
    47b4:	2204      	movs	r2, #4
    47b6:	4901      	ldr	r1, [pc, #4]	; (47bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7bc>)
    47b8:	f009 bf72 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    47bc:	0000ef4d 	.word	0x0000ef4d

000047c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    47c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47c4:	4616      	mov	r6, r2
    47c6:	460c      	mov	r4, r1
    47c8:	4605      	mov	r5, r0
    47ca:	f009 fe7f 	bl	e4cc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    47ce:	7460      	strb	r0, [r4, #17]
    47d0:	4628      	mov	r0, r5
    47d2:	f009 fe72 	bl	e4ba <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    47d6:	74a0      	strb	r0, [r4, #18]
    47d8:	1cea      	adds	r2, r5, #3
    47da:	4b14      	ldr	r3, [pc, #80]	; (482c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    47dc:	1d90      	adds	r0, r2, #6
    47de:	2100      	movs	r1, #0
    47e0:	2e07      	cmp	r6, #7
    47e2:	d21f      	bcs.n	4824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    47e4:	e8df f006 	tbb	[pc, r6]
    47e8:	1e110b04 	.word	0x1e110b04
    47ec:	00041e13 	.word	0x00041e13
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	e00d      	b.n	4810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    47f4:	60e0      	str	r0, [r4, #12]
    47f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47fa:	60e1      	str	r1, [r4, #12]
    47fc:	e7fb      	b.n	47f6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    47fe:	785b      	ldrb	r3, [r3, #1]
    4800:	7063      	strb	r3, [r4, #1]
    4802:	e9c4 2001 	strd	r2, r0, [r4, #4]
    4806:	7421      	strb	r1, [r4, #16]
    4808:	e7f7      	b.n	47fa <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    480a:	789b      	ldrb	r3, [r3, #2]
    480c:	e000      	b.n	4810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    480e:	78db      	ldrb	r3, [r3, #3]
    4810:	7063      	strb	r3, [r4, #1]
    4812:	e9c4 2101 	strd	r2, r1, [r4, #4]
    4816:	786a      	ldrb	r2, [r5, #1]
    4818:	1f92      	subs	r2, r2, #6
    481a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    481e:	7422      	strb	r2, [r4, #16]
    4820:	d0eb      	beq.n	47fa <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4822:	e7e7      	b.n	47f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4824:	7061      	strb	r1, [r4, #1]
    4826:	6061      	str	r1, [r4, #4]
    4828:	60a1      	str	r1, [r4, #8]
    482a:	e7ec      	b.n	4806 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    482c:	000111b2 	.word	0x000111b2

00004830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4830:	b570      	push	{r4, r5, r6, lr}
    4832:	b140      	cbz	r0, 4846 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4834:	2801      	cmp	r0, #1
    4836:	d006      	beq.n	4846 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4838:	2802      	cmp	r0, #2
    483a:	d00a      	beq.n	4852 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    483c:	2803      	cmp	r0, #3
    483e:	d006      	beq.n	484e <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4840:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4844:	e015      	b.n	4872 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    4846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    484a:	f000 b97d 	b.w	4b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    484e:	2001      	movs	r0, #1
    4850:	e000      	b.n	4854 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4852:	2000      	movs	r0, #0
    4854:	4c0c      	ldr	r4, [pc, #48]	; (4888 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    4856:	2101      	movs	r1, #1
    4858:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    485c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    4860:	6a20      	ldr	r0, [r4, #32]
    4862:	2500      	movs	r5, #0
    4864:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    4868:	7821      	ldrb	r1, [r4, #0]
    486a:	2905      	cmp	r1, #5
    486c:	d004      	beq.n	4878 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    486e:	f640 0149 	movw	r1, #2121	; 0x849
    4872:	2021      	movs	r0, #33	; 0x21
    4874:	f7fc f8f6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4878:	f000 fd9a 	bl	53b0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    487c:	6225      	str	r5, [r4, #32]
    487e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4882:	f000 b9c5 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4886:	0000      	.short	0x0000
    4888:	20000e28 	.word	0x20000e28

0000488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    488c:	b570      	push	{r4, r5, r6, lr}
    488e:	4605      	mov	r5, r0
    4890:	f006 fef6 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4894:	4c16      	ldr	r4, [pc, #88]	; (48f0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    4896:	6921      	ldr	r1, [r4, #16]
    4898:	1a46      	subs	r6, r0, r1
    489a:	b155      	cbz	r5, 48b2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    489c:	2d03      	cmp	r5, #3
    489e:	d00d      	beq.n	48bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    48a0:	2d04      	cmp	r5, #4
    48a2:	d00e      	beq.n	48c2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    48a4:	2d06      	cmp	r5, #6
    48a6:	d01d      	beq.n	48e4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    48a8:	f240 31d6 	movw	r1, #982	; 0x3d6
    48ac:	2021      	movs	r0, #33	; 0x21
    48ae:	f7fc f8d9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48b2:	2001      	movs	r0, #1
    48b4:	f00a fbe8 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    48b8:	3098      	adds	r0, #152	; 0x98
    48ba:	e004      	b.n	48c6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    48bc:	f44f 7057 	mov.w	r0, #860	; 0x35c
    48c0:	e001      	b.n	48c6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    48c2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    48c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    48c8:	1835      	adds	r5, r6, r0
    48ca:	39f4      	subs	r1, #244	; 0xf4
    48cc:	428d      	cmp	r5, r1
    48ce:	d307      	bcc.n	48e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    48d0:	2600      	movs	r6, #0
    48d2:	f000 fac9 	bl	4e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    48d6:	b140      	cbz	r0, 48ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    48d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    48da:	38f4      	subs	r0, #244	; 0xf4
    48dc:	4285      	cmp	r5, r0
    48de:	d203      	bcs.n	48e8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    48e0:	2601      	movs	r6, #1
    48e2:	e002      	b.n	48ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    48e4:	2001      	movs	r0, #1
    48e6:	bd70      	pop	{r4, r5, r6, pc}
    48e8:	2600      	movs	r6, #0
    48ea:	4630      	mov	r0, r6
    48ec:	bd70      	pop	{r4, r5, r6, pc}
    48ee:	0000      	.short	0x0000
    48f0:	20000e28 	.word	0x20000e28

000048f4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    48f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48f6:	4c1e      	ldr	r4, [pc, #120]	; (4970 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    48f8:	4607      	mov	r7, r0
    48fa:	b087      	sub	sp, #28
    48fc:	7820      	ldrb	r0, [r4, #0]
    48fe:	460e      	mov	r6, r1
    4900:	b110      	cbz	r0, 4908 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4902:	200c      	movs	r0, #12
    4904:	b007      	add	sp, #28
    4906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4908:	f7fe fd34 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    490c:	4605      	mov	r5, r0
    490e:	6227      	str	r7, [r4, #32]
    4910:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4914:	b110      	cbz	r0, 491c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    4916:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    491a:	e025      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    491c:	2005      	movs	r0, #5
    491e:	7020      	strb	r0, [r4, #0]
    4920:	2000      	movs	r0, #0
    4922:	7060      	strb	r0, [r4, #1]
    4924:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    4928:	f000 fae4 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    492c:	64a0      	str	r0, [r4, #72]	; 0x48
    492e:	2100      	movs	r1, #0
    4930:	4810      	ldr	r0, [pc, #64]	; (4974 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4932:	f006 fc77 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4936:	7028      	strb	r0, [r5, #0]
    4938:	2820      	cmp	r0, #32
    493a:	d00d      	beq.n	4958 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    493c:	4633      	mov	r3, r6
    493e:	2200      	movs	r2, #0
    4940:	2101      	movs	r1, #1
    4942:	4668      	mov	r0, sp
    4944:	f000 fb30 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4948:	b148      	cbz	r0, 495e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    494a:	7828      	ldrb	r0, [r5, #0]
    494c:	4669      	mov	r1, sp
    494e:	f00a fbc6 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4952:	b138      	cbz	r0, 4964 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4954:	2000      	movs	r0, #0
    4956:	e7d5      	b.n	4904 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    4958:	f240 310a 	movw	r1, #778	; 0x30a
    495c:	e004      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    495e:	f240 310d 	movw	r1, #781	; 0x30d
    4962:	e001      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4964:	f240 310e 	movw	r1, #782	; 0x30e
    4968:	2021      	movs	r0, #33	; 0x21
    496a:	f7fc f87b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496e:	0000      	.short	0x0000
    4970:	20000e28 	.word	0x20000e28
    4974:	00004c31 	.word	0x00004c31

00004978 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    4978:	4902      	ldr	r1, [pc, #8]	; (4984 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    497a:	6a09      	ldr	r1, [r1, #32]
    497c:	6001      	str	r1, [r0, #0]
    497e:	f000 b83d 	b.w	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4982:	0000      	.short	0x0000
    4984:	20000e28 	.word	0x20000e28

00004988 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	b086      	sub	sp, #24
    498c:	4606      	mov	r6, r0
    498e:	b111      	cbz	r1, 4996 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    4990:	2011      	movs	r0, #17
    4992:	b006      	add	sp, #24
    4994:	bd70      	pop	{r4, r5, r6, pc}
    4996:	4c17      	ldr	r4, [pc, #92]	; (49f4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    4998:	7820      	ldrb	r0, [r4, #0]
    499a:	b108      	cbz	r0, 49a0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    499c:	200c      	movs	r0, #12
    499e:	e7f8      	b.n	4992 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    49a0:	f7fe fce8 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    49a4:	4605      	mov	r5, r0
    49a6:	2000      	movs	r0, #0
    49a8:	7060      	strb	r0, [r4, #1]
    49aa:	2004      	movs	r0, #4
    49ac:	7020      	strb	r0, [r4, #0]
    49ae:	f000 faa1 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    49b2:	64a0      	str	r0, [r4, #72]	; 0x48
    49b4:	2100      	movs	r1, #0
    49b6:	4810      	ldr	r0, [pc, #64]	; (49f8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    49b8:	f006 fc34 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    49bc:	7028      	strb	r0, [r5, #0]
    49be:	2820      	cmp	r0, #32
    49c0:	d00d      	beq.n	49de <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    49c2:	4633      	mov	r3, r6
    49c4:	2200      	movs	r2, #0
    49c6:	2101      	movs	r1, #1
    49c8:	4668      	mov	r0, sp
    49ca:	f000 faed 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    49ce:	b148      	cbz	r0, 49e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    49d0:	7828      	ldrb	r0, [r5, #0]
    49d2:	4669      	mov	r1, sp
    49d4:	f00a fb83 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    49d8:	b138      	cbz	r0, 49ea <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    49da:	2000      	movs	r0, #0
    49dc:	e7d9      	b.n	4992 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    49de:	f240 3162 	movw	r1, #866	; 0x362
    49e2:	e004      	b.n	49ee <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    49e4:	f44f 7159 	mov.w	r1, #868	; 0x364
    49e8:	e001      	b.n	49ee <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    49ea:	f240 3165 	movw	r1, #869	; 0x365
    49ee:	2021      	movs	r0, #33	; 0x21
    49f0:	f7fc f838 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49f4:	20000e28 	.word	0x20000e28
    49f8:	00004c31 	.word	0x00004c31

000049fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    49fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a00:	2700      	movs	r7, #0
    4a02:	f7fe fcb7 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a06:	4c18      	ldr	r4, [pc, #96]	; (4a68 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    4a08:	4605      	mov	r5, r0
    4a0a:	7820      	ldrb	r0, [r4, #0]
    4a0c:	2804      	cmp	r0, #4
    4a0e:	d005      	beq.n	4a1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4a10:	7820      	ldrb	r0, [r4, #0]
    4a12:	2805      	cmp	r0, #5
    4a14:	d002      	beq.n	4a1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4a16:	200c      	movs	r0, #12
    4a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a1c:	2001      	movs	r0, #1
    4a1e:	7060      	strb	r0, [r4, #1]
    4a20:	7b20      	ldrb	r0, [r4, #12]
    4a22:	b160      	cbz	r0, 4a3e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4a24:	f3ef 8610 	mrs	r6, PRIMASK
    4a28:	b672      	cpsid	i
    4a2a:	7b20      	ldrb	r0, [r4, #12]
    4a2c:	b128      	cbz	r0, 4a3a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4a2e:	7b60      	ldrb	r0, [r4, #13]
    4a30:	b118      	cbz	r0, 4a3a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4a32:	f00a f95b 	bl	ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4a36:	f000 f8eb 	bl	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4a3a:	b126      	cbz	r6, 4a46 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4a3c:	e004      	b.n	4a48 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4a3e:	7828      	ldrb	r0, [r5, #0]
    4a40:	f006 f984 	bl	ad4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4a44:	e000      	b.n	4a48 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4a46:	b662      	cpsie	i
    4a48:	7828      	ldrb	r0, [r5, #0]
    4a4a:	f006 fad3 	bl	aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4a4e:	f000 fc03 	bl	5258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4a52:	2000      	movs	r0, #0
    4a54:	7060      	strb	r0, [r4, #1]
    4a56:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4a5a:	b100      	cbz	r0, 4a5e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    4a5c:	270c      	movs	r7, #12
    4a5e:	f000 fc27 	bl	52b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4a62:	4638      	mov	r0, r7
    4a64:	e7d8      	b.n	4a18 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    4a66:	0000      	.short	0x0000
    4a68:	20000e28 	.word	0x20000e28

00004a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    4a6c:	4801      	ldr	r0, [pc, #4]	; (4a74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    4a6e:	7800      	ldrb	r0, [r0, #0]
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20000e28 	.word	0x20000e28

00004a78 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    4a78:	b510      	push	{r4, lr}
    4a7a:	4c10      	ldr	r4, [pc, #64]	; (4abc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    4a7c:	b086      	sub	sp, #24
    4a7e:	7b20      	ldrb	r0, [r4, #12]
    4a80:	b1b0      	cbz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4a82:	7860      	ldrb	r0, [r4, #1]
    4a84:	b9a0      	cbnz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4a86:	2300      	movs	r3, #0
    4a88:	461a      	mov	r2, r3
    4a8a:	4619      	mov	r1, r3
    4a8c:	4668      	mov	r0, sp
    4a8e:	f000 fa8b 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4a92:	b158      	cbz	r0, 4aac <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    4a94:	f7fe fc6e 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a98:	7800      	ldrb	r0, [r0, #0]
    4a9a:	4669      	mov	r1, sp
    4a9c:	f00a fb1f 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4aa0:	b930      	cbnz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4aa2:	f240 71ae 	movw	r1, #1966	; 0x7ae
    4aa6:	2021      	movs	r0, #33	; 0x21
    4aa8:	f7fb ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aac:	2001      	movs	r0, #1
    4aae:	70a0      	strb	r0, [r4, #2]
    4ab0:	b006      	add	sp, #24
    4ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ab6:	f000 b8ab 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4aba:	0000      	.short	0x0000
    4abc:	20000e28 	.word	0x20000e28

00004ac0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4ac0:	b508      	push	{r3, lr}
    4ac2:	2260      	movs	r2, #96	; 0x60
    4ac4:	2100      	movs	r1, #0
    4ac6:	480c      	ldr	r0, [pc, #48]	; (4af8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    4ac8:	f00c fab7 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4acc:	f7fe fc52 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4ad0:	2120      	movs	r1, #32
    4ad2:	7001      	strb	r1, [r0, #0]
    4ad4:	f000 f812 	bl	4afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    4ad8:	b120      	cbz	r0, 4ae4 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    4ada:	f240 2135 	movw	r1, #565	; 0x235
    4ade:	2021      	movs	r0, #33	; 0x21
    4ae0:	f7fb ffc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ae4:	f242 7010 	movw	r0, #10000	; 0x2710
    4ae8:	9000      	str	r0, [sp, #0]
    4aea:	2201      	movs	r2, #1
    4aec:	4669      	mov	r1, sp
    4aee:	1080      	asrs	r0, r0, #2
    4af0:	f000 f940 	bl	4d74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4af4:	bd08      	pop	{r3, pc}
    4af6:	0000      	.short	0x0000
    4af8:	20000e28 	.word	0x20000e28

00004afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4afc:	4803      	ldr	r0, [pc, #12]	; (4b0c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4afe:	b510      	push	{r4, lr}
    4b00:	7800      	ldrb	r0, [r0, #0]
    4b02:	b108      	cbz	r0, 4b08 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4b04:	f7ff ff7a 	bl	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4b08:	2000      	movs	r0, #0
    4b0a:	bd10      	pop	{r4, pc}
    4b0c:	20000e28 	.word	0x20000e28

00004b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4b10:	490c      	ldr	r1, [pc, #48]	; (4b44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4b12:	b508      	push	{r3, lr}
    4b14:	7809      	ldrb	r1, [r1, #0]
    4b16:	b121      	cbz	r1, 4b22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    4b18:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4b1c:	2021      	movs	r0, #33	; 0x21
    4b1e:	f7fb ffa1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b22:	2300      	movs	r3, #0
    4b24:	9300      	str	r3, [sp, #0]
    4b26:	7801      	ldrb	r1, [r0, #0]
    4b28:	461a      	mov	r2, r3
    4b2a:	07c9      	lsls	r1, r1, #31
    4b2c:	d003      	beq.n	4b36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4b2e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4b32:	2201      	movs	r2, #1
    4b34:	9000      	str	r0, [sp, #0]
    4b36:	4669      	mov	r1, sp
    4b38:	4618      	mov	r0, r3
    4b3a:	f000 f91b 	bl	4d74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4b3e:	2000      	movs	r0, #0
    4b40:	bd08      	pop	{r3, pc}
    4b42:	0000      	.short	0x0000
    4b44:	20000e28 	.word	0x20000e28
    4b48:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4b4c:	4c2e      	ldr	r4, [pc, #184]	; (4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4b4e:	4680      	mov	r8, r0
    4b50:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4b54:	461e      	mov	r6, r3
    4b56:	f003 fad3 	bl	8100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b5a:	4607      	mov	r7, r0
    4b5c:	6a20      	ldr	r0, [r4, #32]
    4b5e:	2101      	movs	r1, #1
    4b60:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    4b64:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    4b68:	3062      	adds	r0, #98	; 0x62
    4b6a:	21ff      	movs	r1, #255	; 0xff
    4b6c:	7281      	strb	r1, [r0, #10]
    4b6e:	6a20      	ldr	r0, [r4, #32]
    4b70:	f04f 0900 	mov.w	r9, #0
    4b74:	4649      	mov	r1, r9
    4b76:	302c      	adds	r0, #44	; 0x2c
    4b78:	f009 fe41 	bl	e7fe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4b7c:	462a      	mov	r2, r5
    4b7e:	4633      	mov	r3, r6
    4b80:	2101      	movs	r1, #1
    4b82:	4640      	mov	r0, r8
    4b84:	9700      	str	r7, [sp, #0]
    4b86:	f00a fa91 	bl	f0ac <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    4b8a:	6a27      	ldr	r7, [r4, #32]
    4b8c:	4606      	mov	r6, r0
    4b8e:	460d      	mov	r5, r1
    4b90:	f8d7 8010 	ldr.w	r8, [r7, #16]
    4b94:	f002 fa5a 	bl	704c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    4b98:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4b9c:	4288      	cmp	r0, r1
    4b9e:	d00b      	beq.n	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    4ba0:	e9cd 6500 	strd	r6, r5, [sp]
    4ba4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    4ba8:	4642      	mov	r2, r8
    4baa:	f00a fdfb 	bl	f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4bae:	4540      	cmp	r0, r8
    4bb0:	d903      	bls.n	4bba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    4bb2:	f240 410c 	movw	r1, #1036	; 0x40c
    4bb6:	e01d      	b.n	4bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    4bb8:	2000      	movs	r0, #0
    4bba:	4914      	ldr	r1, [pc, #80]	; (4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4bbc:	4607      	mov	r7, r0
    4bbe:	6809      	ldr	r1, [r1, #0]
    4bc0:	4288      	cmp	r0, r1
    4bc2:	6a20      	ldr	r0, [r4, #32]
    4bc4:	6901      	ldr	r1, [r0, #16]
    4bc6:	d202      	bcs.n	4bce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4bc8:	440f      	add	r7, r1
    4bca:	6201      	str	r1, [r0, #32]
    4bcc:	e004      	b.n	4bd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4bce:	4638      	mov	r0, r7
    4bd0:	f009 fba3 	bl	e31a <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4bd4:	6a21      	ldr	r1, [r4, #32]
    4bd6:	6208      	str	r0, [r1, #32]
    4bd8:	6a20      	ldr	r0, [r4, #32]
    4bda:	6901      	ldr	r1, [r0, #16]
    4bdc:	2005      	movs	r0, #5
    4bde:	f009 fba4 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4be2:	6a21      	ldr	r1, [r4, #32]
    4be4:	8488      	strh	r0, [r1, #36]	; 0x24
    4be6:	6a21      	ldr	r1, [r4, #32]
    4be8:	6a0a      	ldr	r2, [r1, #32]
    4bea:	1aba      	subs	r2, r7, r2
    4bec:	4290      	cmp	r0, r2
    4bee:	d804      	bhi.n	4bfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4bf0:	f640 0137 	movw	r1, #2103	; 0x837
    4bf4:	2021      	movs	r0, #33	; 0x21
    4bf6:	f7fb ff35 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bfa:	19f2      	adds	r2, r6, r7
    4bfc:	eb45 0509 	adc.w	r5, r5, r9
    4c00:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4c04:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4c08:	20000e28 	.word	0x20000e28
    4c0c:	200000e0 	.word	0x200000e0
    4c10:	b510      	push	{r4, lr}
    4c12:	4c06      	ldr	r4, [pc, #24]	; (4c2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4c14:	7b20      	ldrb	r0, [r4, #12]
    4c16:	2800      	cmp	r0, #0
    4c18:	d006      	beq.n	4c28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4c1a:	f003 fa77 	bl	810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4c1e:	f006 fb29 	bl	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4c22:	2000      	movs	r0, #0
    4c24:	7320      	strb	r0, [r4, #12]
    4c26:	7360      	strb	r0, [r4, #13]
    4c28:	bd10      	pop	{r4, pc}
    4c2a:	0000      	.short	0x0000
    4c2c:	20000e28 	.word	0x20000e28
    4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c32:	b087      	sub	sp, #28
    4c34:	460d      	mov	r5, r1
    4c36:	f7fe fb9d 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4c3a:	2701      	movs	r7, #1
    4c3c:	4c3f      	ldr	r4, [pc, #252]	; (4d3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4c3e:	2d09      	cmp	r5, #9
    4c40:	d278      	bcs.n	4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4c42:	e8df f005 	tbb	[pc, r5]
    4c46:	3905      	.short	0x3905
    4c48:	774a4f4f 	.word	0x774a4f4f
    4c4c:	00726d64 	.word	0x00726d64
    4c50:	7327      	strb	r7, [r4, #12]
    4c52:	7861      	ldrb	r1, [r4, #1]
    4c54:	2900      	cmp	r1, #0
    4c56:	d12d      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4c58:	7800      	ldrb	r0, [r0, #0]
    4c5a:	f005 fc55 	bl	a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4c5e:	4605      	mov	r5, r0
    4c60:	460e      	mov	r6, r1
    4c62:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4c66:	f000 fb3f 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4c6a:	b118      	cbz	r0, 4c74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4c6c:	2000      	movs	r0, #0
    4c6e:	f88d 0004 	strb.w	r0, [sp, #4]
    4c72:	e001      	b.n	4c78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4c74:	f88d 7004 	strb.w	r7, [sp, #4]
    4c78:	f000 f950 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4c7c:	4633      	mov	r3, r6
    4c7e:	462a      	mov	r2, r5
    4c80:	f00a fa2f 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c84:	6861      	ldr	r1, [r4, #4]
    4c86:	fbb0 f2f1 	udiv	r2, r0, r1
    4c8a:	fb01 0012 	mls	r0, r1, r2, r0
    4c8e:	b150      	cbz	r0, 4ca6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4c90:	f05f 0000 	movs.w	r0, #0
    4c94:	f88d 0005 	strb.w	r0, [sp, #5]
    4c98:	4668      	mov	r0, sp
    4c9a:	f7fe fcab 	bl	35f4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4c9e:	b120      	cbz	r0, 4caa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ca0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ca4:	e043      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4ca6:	2001      	movs	r0, #1
    4ca8:	e7f4      	b.n	4c94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4caa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4cac:	38e3      	subs	r0, #227	; 0xe3
    4cae:	63a0      	str	r0, [r4, #56]	; 0x38
    4cb0:	f006 fbfa 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4cb4:	b007      	add	sp, #28
    4cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cb8:	7860      	ldrb	r0, [r4, #1]
    4cba:	b130      	cbz	r0, 4cca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4cbc:	f00a f816 	bl	ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4cc0:	b007      	add	sp, #28
    4cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4cc6:	f7ff bfa3 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4cca:	7367      	strb	r7, [r4, #13]
    4ccc:	f7fe fd22 	bl	3714 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d0ef      	beq.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4cd4:	f240 11e1 	movw	r1, #481	; 0x1e1
    4cd8:	e029      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4cda:	b007      	add	sp, #28
    4cdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4ce0:	f003 bbe8 	b.w	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4ce4:	7805      	ldrb	r5, [r0, #0]
    4ce6:	2300      	movs	r3, #0
    4ce8:	2201      	movs	r2, #1
    4cea:	4619      	mov	r1, r3
    4cec:	4668      	mov	r0, sp
    4cee:	f000 f95b 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4cf2:	b140      	cbz	r0, 4d06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4cf4:	4669      	mov	r1, sp
    4cf6:	4628      	mov	r0, r5
    4cf8:	f00a f9f1 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d1d9      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d00:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4d04:	e013      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4d06:	70a7      	strb	r7, [r4, #2]
    4d08:	f000 f81a 	bl	4d40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4d0c:	e7d2      	b.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d0e:	f000 f8ab 	bl	4e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4d12:	2800      	cmp	r0, #0
    4d14:	d1ce      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d16:	b007      	add	sp, #28
    4d18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4d1c:	f009 bfe4 	b.w	ece8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4d20:	b007      	add	sp, #28
    4d22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4d26:	f000 b80b 	b.w	4d40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4d2a:	f240 2113 	movw	r1, #531	; 0x213
    4d2e:	2021      	movs	r0, #33	; 0x21
    4d30:	f7fb fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d34:	f240 2117 	movw	r1, #535	; 0x217
    4d38:	e7f9      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4d3a:	0000      	.short	0x0000
    4d3c:	20000e28 	.word	0x20000e28
    4d40:	b510      	push	{r4, lr}
    4d42:	4c0b      	ldr	r4, [pc, #44]	; (4d70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4d44:	7820      	ldrb	r0, [r4, #0]
    4d46:	b138      	cbz	r0, 4d58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4d48:	f000 fa86 	bl	5258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4d4c:	78a0      	ldrb	r0, [r4, #2]
    4d4e:	b150      	cbz	r0, 4d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4d50:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4d54:	b128      	cbz	r0, 4d62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4d56:	e006      	b.n	4d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4d58:	f240 117b 	movw	r1, #379	; 0x17b
    4d5c:	2021      	movs	r0, #33	; 0x21
    4d5e:	f7fb fe81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d62:	f7fe fcef 	bl	3744 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d6a:	f000 baa1 	b.w	52b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4d6e:	0000      	.short	0x0000
    4d70:	20000e28 	.word	0x20000e28
    4d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d78:	4d11      	ldr	r5, [pc, #68]	; (4dc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4d7a:	4616      	mov	r6, r2
    4d7c:	460f      	mov	r7, r1
    4d7e:	2400      	movs	r4, #0
    4d80:	6068      	str	r0, [r5, #4]
    4d82:	f00a f976 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d86:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4dc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4d8a:	2100      	movs	r1, #0
    4d8c:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4d90:	4232      	tst	r2, r6
    4d92:	d007      	beq.n	4da4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4d94:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4d98:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4d9c:	1a1b      	subs	r3, r3, r0
    4d9e:	1c64      	adds	r4, r4, #1
    4da0:	b2e4      	uxtb	r4, r4
    4da2:	6093      	str	r3, [r2, #8]
    4da4:	1c49      	adds	r1, r1, #1
    4da6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4daa:	d0ef      	beq.n	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4dac:	f016 0f0e 	tst.w	r6, #14
    4db0:	d004      	beq.n	4dbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4db2:	f240 7103 	movw	r1, #1795	; 0x703
    4db6:	2021      	movs	r0, #33	; 0x21
    4db8:	f7fb fe54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dc0:	20000e28 	.word	0x20000e28
    4dc4:	000111b6 	.word	0x000111b6
    4dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4dcc:	b086      	sub	sp, #24
    4dce:	4692      	mov	sl, r2
    4dd0:	4607      	mov	r7, r0
    4dd2:	4689      	mov	r9, r1
    4dd4:	f000 fa94 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4dd8:	4d22      	ldr	r5, [pc, #136]	; (4e64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4dda:	f04f 0800 	mov.w	r8, #0
    4dde:	686a      	ldr	r2, [r5, #4]
    4de0:	1886      	adds	r6, r0, r2
    4de2:	eb41 0108 	adc.w	r1, r1, r8
    4de6:	460c      	mov	r4, r1
    4de8:	460b      	mov	r3, r1
    4dea:	4632      	mov	r2, r6
    4dec:	4638      	mov	r0, r7
    4dee:	4649      	mov	r1, r9
    4df0:	f00a f977 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4df4:	4607      	mov	r7, r0
    4df6:	f00a f96b 	bl	f0d0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4dfa:	4287      	cmp	r7, r0
    4dfc:	da13      	bge.n	4e26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4dfe:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4e02:	f000 fa7d 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4e06:	4632      	mov	r2, r6
    4e08:	4623      	mov	r3, r4
    4e0a:	f00a f96a 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4e0e:	6869      	ldr	r1, [r5, #4]
    4e10:	fbb0 f1f1 	udiv	r1, r0, r1
    4e14:	f8ca 1000 	str.w	r1, [sl]
    4e18:	6868      	ldr	r0, [r5, #4]
    4e1a:	1980      	adds	r0, r0, r6
    4e1c:	eb48 0104 	adc.w	r1, r8, r4
    4e20:	b006      	add	sp, #24
    4e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e26:	f88d 8000 	strb.w	r8, [sp]
    4e2a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4e2c:	9001      	str	r0, [sp, #4]
    4e2e:	f00a f909 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4e32:	f8ad 0008 	strh.w	r0, [sp, #8]
    4e36:	2001      	movs	r0, #1
    4e38:	f88d 000b 	strb.w	r0, [sp, #11]
    4e3c:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4e40:	f000 fa5e 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4e48:	f000 f9ec 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4e4c:	f88d 000a 	strb.w	r0, [sp, #10]
    4e50:	4668      	mov	r0, sp
    4e52:	6869      	ldr	r1, [r5, #4]
    4e54:	f009 fa10 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4e58:	f8ca 0000 	str.w	r0, [sl]
    4e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4e60:	e7de      	b.n	4e20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4e62:	0000      	.short	0x0000
    4e64:	20000e28 	.word	0x20000e28
    4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e6c:	f006 fc08 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4e70:	4c1f      	ldr	r4, [pc, #124]	; (4ef0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4e72:	4606      	mov	r6, r0
    4e74:	460d      	mov	r5, r1
    4e76:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4e7a:	f000 f9d3 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4e7e:	4607      	mov	r7, r0
    4e80:	f005 fae6 	bl	a450 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4e84:	4602      	mov	r2, r0
    4e86:	2865      	cmp	r0, #101	; 0x65
    4e88:	d323      	bcc.n	4ed2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4e8a:	1c50      	adds	r0, r2, #1
    4e8c:	d024      	beq.n	4ed8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4e8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e92:	1888      	adds	r0, r1, r2
    4e94:	4283      	cmp	r3, r0
    4e96:	d800      	bhi.n	4e9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4e98:	1a5a      	subs	r2, r3, r1
    4e9a:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4e9e:	1830      	adds	r0, r6, r0
    4ea0:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ea4:	f000 fa42 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4ea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4eaa:	4408      	add	r0, r1
    4eac:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4eae:	1a45      	subs	r5, r0, r1
    4eb0:	f241 3088 	movw	r0, #5000	; 0x1388
    4eb4:	4285      	cmp	r5, r0
    4eb6:	d900      	bls.n	4eba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4eb8:	4605      	mov	r5, r0
    4eba:	f006 fbe1 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4ebe:	1b80      	subs	r0, r0, r6
    4ec0:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4ec4:	4285      	cmp	r5, r0
    4ec6:	d304      	bcc.n	4ed2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4ec8:	4639      	mov	r1, r7
    4eca:	4628      	mov	r0, r5
    4ecc:	f005 f9e2 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4ed0:	b120      	cbz	r0, 4edc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4ed2:	2000      	movs	r0, #0
    4ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4eda:	e7e7      	b.n	4eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4edc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4ede:	4428      	add	r0, r5
    4ee0:	6320      	str	r0, [r4, #48]	; 0x30
    4ee2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4ee4:	4428      	add	r0, r5
    4ee6:	63a0      	str	r0, [r4, #56]	; 0x38
    4ee8:	f006 fade 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4eec:	2001      	movs	r0, #1
    4eee:	e7f1      	b.n	4ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4ef0:	20000e28 	.word	0x20000e28
    4ef4:	b510      	push	{r4, lr}
    4ef6:	2400      	movs	r4, #0
    4ef8:	f00a f8bb 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4efc:	4a06      	ldr	r2, [pc, #24]	; (4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4efe:	2100      	movs	r1, #0
    4f00:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4f04:	4404      	add	r4, r0
    4f06:	689b      	ldr	r3, [r3, #8]
    4f08:	1c49      	adds	r1, r1, #1
    4f0a:	441c      	add	r4, r3
    4f0c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4f10:	d0f6      	beq.n	4f00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4f12:	4620      	mov	r0, r4
    4f14:	bd10      	pop	{r4, pc}
    4f16:	0000      	.short	0x0000
    4f18:	20000e28 	.word	0x20000e28
    4f1c:	4901      	ldr	r1, [pc, #4]	; (4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4f1e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4f22:	4770      	bx	lr
    4f24:	20000e28 	.word	0x20000e28
    4f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f2c:	4606      	mov	r6, r0
    4f2e:	481d      	ldr	r0, [pc, #116]	; (4fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4f30:	4688      	mov	r8, r1
    4f32:	4615      	mov	r5, r2
    4f34:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4f38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4f3c:	2701      	movs	r7, #1
    4f3e:	4050      	eors	r0, r2
    4f40:	b086      	sub	sp, #24
    4f42:	ea70 0101 	orns	r1, r0, r1
    4f46:	d021      	beq.n	4f8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4f48:	2400      	movs	r4, #0
    4f4a:	f88d 4000 	strb.w	r4, [sp]
    4f4e:	9501      	str	r5, [sp, #4]
    4f50:	f00a f878 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4f54:	f8ad 0008 	strh.w	r0, [sp, #8]
    4f58:	f88d 700b 	strb.w	r7, [sp, #11]
    4f5c:	f00a f8b8 	bl	f0d0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4f60:	1982      	adds	r2, r0, r6
    4f62:	eb44 0008 	adc.w	r0, r4, r8
    4f66:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4f6a:	2002      	movs	r0, #2
    4f6c:	f88d 000a 	strb.w	r0, [sp, #10]
    4f70:	4668      	mov	r0, sp
    4f72:	f005 fdbb 	bl	aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4f76:	b168      	cbz	r0, 4f94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4f78:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4f7c:	194a      	adds	r2, r1, r5
    4f7e:	4909      	ldr	r1, [pc, #36]	; (4fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4f80:	4160      	adcs	r0, r4
    4f82:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4f86:	1a9a      	subs	r2, r3, r2
    4f88:	4181      	sbcs	r1, r0
    4f8a:	d408      	bmi.n	4f9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4f8c:	2001      	movs	r0, #1
    4f8e:	b006      	add	sp, #24
    4f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f94:	f240 5135 	movw	r1, #1333	; 0x535
    4f98:	2021      	movs	r0, #33	; 0x21
    4f9a:	f7fb fd63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f9e:	2000      	movs	r0, #0
    4fa0:	e7f5      	b.n	4f8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4fa2:	0000      	.short	0x0000
    4fa4:	20000e28 	.word	0x20000e28
    4fa8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fac:	b087      	sub	sp, #28
    4fae:	4614      	mov	r4, r2
    4fb0:	4606      	mov	r6, r0
    4fb2:	f006 fb65 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4fb6:	4d99      	ldr	r5, [pc, #612]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fb8:	4680      	mov	r8, r0
    4fba:	4689      	mov	r9, r1
    4fbc:	68a8      	ldr	r0, [r5, #8]
    4fbe:	f04f 0a00 	mov.w	sl, #0
    4fc2:	9002      	str	r0, [sp, #8]
    4fc4:	f7ff ff96 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4fc8:	6869      	ldr	r1, [r5, #4]
    4fca:	4288      	cmp	r0, r1
    4fcc:	d101      	bne.n	4fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4fce:	2001      	movs	r0, #1
    4fd0:	e000      	b.n	4fd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4fd2:	2000      	movs	r0, #0
    4fd4:	9004      	str	r0, [sp, #16]
    4fd6:	4020      	ands	r0, r4
    4fd8:	9003      	str	r0, [sp, #12]
    4fda:	9808      	ldr	r0, [sp, #32]
    4fdc:	2800      	cmp	r0, #0
    4fde:	d07f      	beq.n	50e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4fe0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4fe4:	eb18 0b02 	adds.w	fp, r8, r2
    4fe8:	f149 0400 	adc.w	r4, r9, #0
    4fec:	f002 f834 	bl	7058 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4ff0:	9000      	str	r0, [sp, #0]
    4ff2:	488a      	ldr	r0, [pc, #552]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4ff4:	7800      	ldrb	r0, [r0, #0]
    4ff6:	4f89      	ldr	r7, [pc, #548]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4ff8:	3740      	adds	r7, #64	; 0x40
    4ffa:	2805      	cmp	r0, #5
    4ffc:	d135      	bne.n	506a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ffe:	4887      	ldr	r0, [pc, #540]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5000:	6a00      	ldr	r0, [r0, #32]
    5002:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5006:	f002 f807 	bl	7018 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    500a:	9900      	ldr	r1, [sp, #0]
    500c:	4605      	mov	r5, r0
    500e:	4288      	cmp	r0, r1
    5010:	d009      	beq.n	5026 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    5012:	4882      	ldr	r0, [pc, #520]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5014:	4629      	mov	r1, r5
    5016:	6a00      	ldr	r0, [r0, #32]
    5018:	f500 700a 	add.w	r0, r0, #552	; 0x228
    501c:	f001 ffc0 	bl	6fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5020:	2000      	movs	r0, #0
    5022:	61b8      	str	r0, [r7, #24]
    5024:	e00c      	b.n	5040 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    5026:	497d      	ldr	r1, [pc, #500]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5028:	6a08      	ldr	r0, [r1, #32]
    502a:	f500 700a 	add.w	r0, r0, #552	; 0x228
    502e:	61b8      	str	r0, [r7, #24]
    5030:	6a08      	ldr	r0, [r1, #32]
    5032:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    5034:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5038:	4282      	cmp	r2, r0
    503a:	d300      	bcc.n	503e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    503c:	4610      	mov	r0, r2
    503e:	6488      	str	r0, [r1, #72]	; 0x48
    5040:	4876      	ldr	r0, [pc, #472]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5042:	6a00      	ldr	r0, [r0, #32]
    5044:	b158      	cbz	r0, 505e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    5046:	b16d      	cbz	r5, 5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    5048:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    504c:	f8d5 c000 	ldr.w	ip, [r5]
    5050:	eb1c 0303 	adds.w	r3, ip, r3
    5054:	eb41 010a 	adc.w	r1, r1, sl
    5058:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    505c:	e005      	b.n	506a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    505e:	f240 7185 	movw	r1, #1925	; 0x785
    5062:	e01a      	b.n	509a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    5064:	2100      	movs	r1, #0
    5066:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    506a:	4638      	mov	r0, r7
    506c:	9900      	ldr	r1, [sp, #0]
    506e:	f001 ff97 	bl	6fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5072:	486a      	ldr	r0, [pc, #424]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5074:	9a00      	ldr	r2, [sp, #0]
    5076:	6845      	ldr	r5, [r0, #4]
    5078:	b192      	cbz	r2, 50a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    507a:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    507e:	6817      	ldr	r7, [r2, #0]
    5080:	e9cd b400 	strd	fp, r4, [sp]
    5084:	18f8      	adds	r0, r7, r3
    5086:	eb41 010a 	adc.w	r1, r1, sl
    508a:	462a      	mov	r2, r5
    508c:	f00a fb8a 	bl	f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    5090:	4601      	mov	r1, r0
    5092:	42a8      	cmp	r0, r5
    5094:	d905      	bls.n	50a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    5096:	f240 31f9 	movw	r1, #1017	; 0x3f9
    509a:	2021      	movs	r0, #33	; 0x21
    509c:	f7fb fce2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a0:	2100      	movs	r1, #0
    50a2:	eb1b 0501 	adds.w	r5, fp, r1
    50a6:	495d      	ldr	r1, [pc, #372]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    50a8:	4650      	mov	r0, sl
    50aa:	4144      	adcs	r4, r0
    50ac:	684a      	ldr	r2, [r1, #4]
    50ae:	1aab      	subs	r3, r5, r2
    50b0:	eb64 020a 	sbc.w	r2, r4, sl
    50b4:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    50b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    50ba:	3128      	adds	r1, #40	; 0x28
    50bc:	b152      	cbz	r2, 50d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    50be:	f242 7310 	movw	r3, #10000	; 0x2710
    50c2:	435a      	muls	r2, r3
    50c4:	18aa      	adds	r2, r5, r2
    50c6:	eb44 000a 	adc.w	r0, r4, sl
    50ca:	e9c1 2000 	strd	r2, r0, [r1]
    50ce:	2001      	movs	r0, #1
    50d0:	e051      	b.n	5176 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    50d2:	e005      	b.n	50e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    50d4:	f04f 30ff 	mov.w	r0, #4294967295
    50d8:	0842      	lsrs	r2, r0, #1
    50da:	e9c1 0200 	strd	r0, r2, [r1]
    50de:	e7f6      	b.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    50e0:	9803      	ldr	r0, [sp, #12]
    50e2:	b1d8      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    50e4:	2001      	movs	r0, #1
    50e6:	f009 ffcf 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    50ea:	4604      	mov	r4, r0
    50ec:	2001      	movs	r0, #1
    50ee:	f003 f8f7 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    50f2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    50f6:	4401      	add	r1, r0
    50f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50fc:	fbb1 f0f0 	udiv	r0, r1, r0
    5100:	1822      	adds	r2, r4, r0
    5102:	4640      	mov	r0, r8
    5104:	4649      	mov	r1, r9
    5106:	32f4      	adds	r2, #244	; 0xf4
    5108:	f7ff ff0e 	bl	4f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    510c:	b908      	cbnz	r0, 5112 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    510e:	2000      	movs	r0, #0
    5110:	9002      	str	r0, [sp, #8]
    5112:	4645      	mov	r5, r8
    5114:	464c      	mov	r4, r9
    5116:	f8cd a014 	str.w	sl, [sp, #20]
    511a:	e02d      	b.n	5178 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    511c:	b13c      	cbz	r4, 512e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    511e:	aa05      	add	r2, sp, #20
    5120:	4640      	mov	r0, r8
    5122:	4649      	mov	r1, r9
    5124:	f7ff fe50 	bl	4dc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    5128:	4605      	mov	r5, r0
    512a:	460c      	mov	r4, r1
    512c:	e024      	b.n	5178 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    512e:	4640      	mov	r0, r8
    5130:	4649      	mov	r1, r9
    5132:	f000 f8e5 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    5136:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    513a:	4602      	mov	r2, r0
    513c:	4608      	mov	r0, r1
    513e:	f8db 1008 	ldr.w	r1, [fp, #8]
    5142:	9102      	str	r1, [sp, #8]
    5144:	f8db 3004 	ldr.w	r3, [fp, #4]
    5148:	4657      	mov	r7, sl
    514a:	189d      	adds	r5, r3, r2
    514c:	eb4a 0400 	adc.w	r4, sl, r0
    5150:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    5154:	f000 f8c8 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5158:	f8db 1004 	ldr.w	r1, [fp, #4]
    515c:	4348      	muls	r0, r1
    515e:	9000      	str	r0, [sp, #0]
    5160:	f7ff fedc 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	9a00      	ldr	r2, [sp, #0]
    5166:	1880      	adds	r0, r0, r2
    5168:	4179      	adcs	r1, r7
    516a:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    516e:	4621      	mov	r1, r4
    5170:	4628      	mov	r0, r5
    5172:	f000 f8b9 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5176:	9005      	str	r0, [sp, #20]
    5178:	2001      	movs	r0, #1
    517a:	f009 ff85 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    517e:	4607      	mov	r7, r0
    5180:	2001      	movs	r0, #1
    5182:	f003 f8ad 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5186:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    518a:	4401      	add	r1, r0
    518c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5190:	fbb1 f0f0 	udiv	r0, r1, r0
    5194:	4407      	add	r7, r0
    5196:	4628      	mov	r0, r5
    5198:	4621      	mov	r1, r4
    519a:	37f4      	adds	r7, #244	; 0xf4
    519c:	9a02      	ldr	r2, [sp, #8]
    519e:	f000 f8c5 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    51a2:	491e      	ldr	r1, [pc, #120]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    51a4:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    51a8:	6892      	ldr	r2, [r2, #8]
    51aa:	4282      	cmp	r2, r0
    51ac:	d800      	bhi.n	51b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    51ae:	4610      	mov	r0, r2
    51b0:	6348      	str	r0, [r1, #52]	; 0x34
    51b2:	9a08      	ldr	r2, [sp, #32]
    51b4:	b10a      	cbz	r2, 51ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    51b6:	e9c1 5404 	strd	r5, r4, [r1, #16]
    51ba:	e9c1 5406 	strd	r5, r4, [r1, #24]
    51be:	468b      	mov	fp, r1
    51c0:	9904      	ldr	r1, [sp, #16]
    51c2:	b111      	cbz	r1, 51ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    51c4:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    51c8:	e001      	b.n	51ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    51ca:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    51ce:	2001      	movs	r0, #1
    51d0:	72f0      	strb	r0, [r6, #11]
    51d2:	f009 ff37 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    51d6:	8130      	strh	r0, [r6, #8]
    51d8:	4628      	mov	r0, r5
    51da:	4621      	mov	r1, r4
    51dc:	f000 f822 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    51e0:	72b0      	strb	r0, [r6, #10]
    51e2:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    51e6:	6070      	str	r0, [r6, #4]
    51e8:	9803      	ldr	r0, [sp, #12]
    51ea:	b148      	cbz	r0, 5200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    51ec:	2001      	movs	r0, #1
    51ee:	7030      	strb	r0, [r6, #0]
    51f0:	4a0b      	ldr	r2, [pc, #44]	; (5220 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    51f2:	4640      	mov	r0, r8
    51f4:	4649      	mov	r1, r9
    51f6:	f000 f899 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    51fa:	1bc0      	subs	r0, r0, r7
    51fc:	6130      	str	r0, [r6, #16]
    51fe:	e003      	b.n	5208 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5200:	f886 a000 	strb.w	sl, [r6]
    5204:	e9c6 5404 	strd	r5, r4, [r6, #16]
    5208:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    520c:	42b8      	cmp	r0, r7
    520e:	d303      	bcc.n	5218 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5210:	2001      	movs	r0, #1
    5212:	b00b      	add	sp, #44	; 0x2c
    5214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5218:	2000      	movs	r0, #0
    521a:	e7fa      	b.n	5212 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    521c:	20000e28 	.word	0x20000e28
    5220:	0f424000 	.word	0x0f424000
    5224:	b570      	push	{r4, r5, r6, lr}
    5226:	4604      	mov	r4, r0
    5228:	480a      	ldr	r0, [pc, #40]	; (5254 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    522a:	460d      	mov	r5, r1
    522c:	7801      	ldrb	r1, [r0, #0]
    522e:	2904      	cmp	r1, #4
    5230:	d10d      	bne.n	524e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5232:	6840      	ldr	r0, [r0, #4]
    5234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5238:	0046      	lsls	r6, r0, #1
    523a:	f7ff fe6f 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    523e:	4622      	mov	r2, r4
    5240:	462b      	mov	r3, r5
    5242:	f009 ff4e 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5246:	42b0      	cmp	r0, r6
    5248:	d201      	bcs.n	524e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    524a:	2002      	movs	r0, #2
    524c:	bd70      	pop	{r4, r5, r6, pc}
    524e:	2001      	movs	r0, #1
    5250:	bd70      	pop	{r4, r5, r6, pc}
    5252:	0000      	.short	0x0000
    5254:	20000e28 	.word	0x20000e28
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	4d14      	ldr	r5, [pc, #80]	; (52ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    525c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5260:	f105 0440 	add.w	r4, r5, #64	; 0x40
    5264:	2800      	cmp	r0, #0
    5266:	7828      	ldrb	r0, [r5, #0]
    5268:	d00f      	beq.n	528a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    526a:	2805      	cmp	r0, #5
    526c:	d004      	beq.n	5278 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    526e:	f240 2157 	movw	r1, #599	; 0x257
    5272:	2021      	movs	r0, #33	; 0x21
    5274:	f7fb fbf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5278:	4620      	mov	r0, r4
    527a:	f009 ff00 	bl	f07e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    527e:	b178      	cbz	r0, 52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    5280:	4620      	mov	r0, r4
    5282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5286:	f001 be69 	b.w	6f5c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    528a:	2805      	cmp	r0, #5
    528c:	d108      	bne.n	52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    528e:	4620      	mov	r0, r4
    5290:	f009 fef5 	bl	f07e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    5294:	b920      	cbnz	r0, 52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    5296:	6a28      	ldr	r0, [r5, #32]
    5298:	f500 700a 	add.w	r0, r0, #552	; 0x228
    529c:	f001 fea0 	bl	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    52a0:	4620      	mov	r0, r4
    52a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52a6:	f001 be9b 	b.w	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    52aa:	0000      	.short	0x0000
    52ac:	20000e28 	.word	0x20000e28
    52b0:	b510      	push	{r4, lr}
    52b2:	f7fe f8d1 	bl	3458 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    52b6:	490b      	ldr	r1, [pc, #44]	; (52e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    52b8:	2000      	movs	r0, #0
    52ba:	7088      	strb	r0, [r1, #2]
    52bc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    52c0:	6208      	str	r0, [r1, #32]
    52c2:	7008      	strb	r0, [r1, #0]
    52c4:	f7fe f856 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    52c8:	4604      	mov	r4, r0
    52ca:	7800      	ldrb	r0, [r0, #0]
    52cc:	f005 fe70 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    52d0:	b110      	cbz	r0, 52d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    52d2:	2020      	movs	r0, #32
    52d4:	7020      	strb	r0, [r4, #0]
    52d6:	bd10      	pop	{r4, pc}
    52d8:	f240 3192 	movw	r1, #914	; 0x392
    52dc:	2021      	movs	r0, #33	; 0x21
    52de:	f7fb fbc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e2:	0000      	.short	0x0000
    52e4:	20000e28 	.word	0x20000e28
    52e8:	b510      	push	{r4, lr}
    52ea:	4604      	mov	r4, r0
    52ec:	f7ff fe16 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    52f0:	4902      	ldr	r1, [pc, #8]	; (52fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    52f2:	1a20      	subs	r0, r4, r0
    52f4:	6849      	ldr	r1, [r1, #4]
    52f6:	fbb0 f0f1 	udiv	r0, r0, r1
    52fa:	bd10      	pop	{r4, pc}
    52fc:	20000e28 	.word	0x20000e28
    5300:	b570      	push	{r4, r5, r6, lr}
    5302:	4604      	mov	r4, r0
    5304:	460d      	mov	r5, r1
    5306:	f7ff fe09 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    530a:	4622      	mov	r2, r4
    530c:	462b      	mov	r3, r5
    530e:	f009 fee8 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5312:	4905      	ldr	r1, [pc, #20]	; (5328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5314:	684c      	ldr	r4, [r1, #4]
    5316:	fbb0 f0f4 	udiv	r0, r0, r4
    531a:	4344      	muls	r4, r0
    531c:	f7ff fdfe 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5320:	1900      	adds	r0, r0, r4
    5322:	f141 0100 	adc.w	r1, r1, #0
    5326:	bd70      	pop	{r4, r5, r6, pc}
    5328:	20000e28 	.word	0x20000e28
    532c:	4b0a      	ldr	r3, [pc, #40]	; (5358 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    532e:	b510      	push	{r4, lr}
    5330:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5334:	1a20      	subs	r0, r4, r0
    5336:	eb63 0301 	sbc.w	r3, r3, r1
    533a:	2400      	movs	r4, #0
    533c:	4621      	mov	r1, r4
    533e:	1a24      	subs	r4, r4, r0
    5340:	4199      	sbcs	r1, r3
    5342:	da06      	bge.n	5352 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5344:	2100      	movs	r1, #0
    5346:	1a14      	subs	r4, r2, r0
    5348:	eb71 0403 	sbcs.w	r4, r1, r3
    534c:	da00      	bge.n	5350 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    534e:	4610      	mov	r0, r2
    5350:	bd10      	pop	{r4, pc}
    5352:	2000      	movs	r0, #0
    5354:	bd10      	pop	{r4, pc}
    5356:	0000      	.short	0x0000
    5358:	20000e28 	.word	0x20000e28

0000535c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	f002 fecf 	bl	8100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    5362:	4c0d      	ldr	r4, [pc, #52]	; (5398 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    5364:	4606      	mov	r6, r0
    5366:	4602      	mov	r2, r0
    5368:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    536c:	4628      	mov	r0, r5
    536e:	f008 fe64 	bl	e03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    5372:	6060      	str	r0, [r4, #4]
    5374:	42a8      	cmp	r0, r5
    5376:	d005      	beq.n	5384 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    5378:	68e1      	ldr	r1, [r4, #12]
    537a:	1b40      	subs	r0, r0, r5
    537c:	4408      	add	r0, r1
    537e:	60e0      	str	r0, [r4, #12]
    5380:	f006 f892 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5384:	6860      	ldr	r0, [r4, #4]
    5386:	42b0      	cmp	r0, r6
    5388:	d301      	bcc.n	538e <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    538a:	7820      	ldrb	r0, [r4, #0]
    538c:	b108      	cbz	r0, 5392 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    538e:	2000      	movs	r0, #0
    5390:	bd70      	pop	{r4, r5, r6, pc}
    5392:	2001      	movs	r0, #1
    5394:	bd70      	pop	{r4, r5, r6, pc}
    5396:	0000      	.short	0x0000
    5398:	20001108 	.word	0x20001108

0000539c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    539c:	4903      	ldr	r1, [pc, #12]	; (53ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    539e:	2000      	movs	r0, #0
    53a0:	6008      	str	r0, [r1, #0]
    53a2:	6048      	str	r0, [r1, #4]
    53a4:	6088      	str	r0, [r1, #8]
    53a6:	60c8      	str	r0, [r1, #12]
    53a8:	f000 b856 	b.w	5458 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    53ac:	20001108 	.word	0x20001108

000053b0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    53b0:	b510      	push	{r4, lr}
    53b2:	b086      	sub	sp, #24
    53b4:	0004      	movs	r4, r0
    53b6:	d005      	beq.n	53c4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    53b8:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    53bc:	b128      	cbz	r0, 53ca <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    53be:	f240 1177 	movw	r1, #375	; 0x177
    53c2:	e025      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53c4:	f44f 71bb 	mov.w	r1, #374	; 0x176
    53c8:	e022      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53ca:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    53ce:	2820      	cmp	r0, #32
    53d0:	d002      	beq.n	53d8 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    53d2:	f240 1179 	movw	r1, #377	; 0x179
    53d6:	e01b      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53d8:	4621      	mov	r1, r4
    53da:	480f      	ldr	r0, [pc, #60]	; (5418 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    53dc:	f005 ff22 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    53e0:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    53e4:	2820      	cmp	r0, #32
    53e6:	d00e      	beq.n	5406 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    53e8:	2300      	movs	r3, #0
    53ea:	2201      	movs	r2, #1
    53ec:	4621      	mov	r1, r4
    53ee:	4668      	mov	r0, sp
    53f0:	f009 fecb 	bl	f18a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    53f4:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    53f8:	4669      	mov	r1, sp
    53fa:	f009 ffad 	bl	f358 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    53fe:	b128      	cbz	r0, 540c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5400:	b006      	add	sp, #24
    5402:	2000      	movs	r0, #0
    5404:	bd10      	pop	{r4, pc}
    5406:	f44f 71be 	mov.w	r1, #380	; 0x17c
    540a:	e001      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    540c:	f240 117f 	movw	r1, #383	; 0x17f
    5410:	2035      	movs	r0, #53	; 0x35
    5412:	f7fb fb27 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5416:	0000      	.short	0x0000
    5418:	00005519 	.word	0x00005519

0000541c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    541c:	4901      	ldr	r1, [pc, #4]	; (5424 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    541e:	7048      	strb	r0, [r1, #1]
    5420:	4770      	bx	lr
    5422:	0000      	.short	0x0000
    5424:	20001108 	.word	0x20001108

00005428 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    5428:	b570      	push	{r4, r5, r6, lr}
    542a:	4605      	mov	r5, r0
    542c:	4809      	ldr	r0, [pc, #36]	; (5454 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    542e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5432:	fbb0 f4f1 	udiv	r4, r0, r1
    5436:	f009 fe1c 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    543a:	1901      	adds	r1, r0, r4
    543c:	4628      	mov	r0, r5
    543e:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5442:	f009 f9f5 	bl	e830 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    5446:	f640 0148 	movw	r1, #2120	; 0x848
    544a:	4288      	cmp	r0, r1
    544c:	d300      	bcc.n	5450 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    544e:	4608      	mov	r0, r1
    5450:	b280      	uxth	r0, r0
    5452:	bd70      	pop	{r4, r5, r6, pc}
    5454:	000122f9 	.word	0x000122f9
    5458:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    545c:	4d15      	ldr	r5, [pc, #84]	; (54b4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    545e:	2001      	movs	r0, #1
    5460:	7028      	strb	r0, [r5, #0]
    5462:	2400      	movs	r4, #0
    5464:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5468:	e00b      	b.n	5482 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    546a:	2100      	movs	r1, #0
    546c:	f008 fc27 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5470:	0007      	movs	r7, r0
    5472:	d009      	beq.n	5488 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    5474:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    5478:	f005 fdbc 	bl	aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    547c:	4638      	mov	r0, r7
    547e:	f009 ff3c 	bl	f2fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    5482:	9400      	str	r4, [sp, #0]
    5484:	9401      	str	r4, [sp, #4]
    5486:	e00d      	b.n	54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5488:	f240 1199 	movw	r1, #409	; 0x199
    548c:	2035      	movs	r0, #53	; 0x35
    548e:	f7fb fae9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5492:	9800      	ldr	r0, [sp, #0]
    5494:	b130      	cbz	r0, 54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5496:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    549a:	b119      	cbz	r1, 54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    549c:	8800      	ldrh	r0, [r0, #0]
    549e:	42b0      	cmp	r0, r6
    54a0:	d1e3      	bne.n	546a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    54a2:	e004      	b.n	54ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    54a4:	4668      	mov	r0, sp
    54a6:	f7fb fcfb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    54aa:	2800      	cmp	r0, #0
    54ac:	d0f1      	beq.n	5492 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    54ae:	702c      	strb	r4, [r5, #0]
    54b0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    54b4:	20001108 	.word	0x20001108
    54b8:	b510      	push	{r4, lr}
    54ba:	4604      	mov	r4, r0
    54bc:	2901      	cmp	r1, #1
    54be:	d102      	bne.n	54c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    54c0:	480a      	ldr	r0, [pc, #40]	; (54ec <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    54c2:	7800      	ldrb	r0, [r0, #0]
    54c4:	b140      	cbz	r0, 54d8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    54c6:	2004      	movs	r0, #4
    54c8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    54cc:	f002 fe1e 	bl	810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    54d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54d4:	f005 bece 	b.w	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    54d8:	2200      	movs	r2, #0
    54da:	2101      	movs	r1, #1
    54dc:	4620      	mov	r0, r4
    54de:	f009 ff24 	bl	f32a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    54e2:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    54e6:	1c40      	adds	r0, r0, #1
    54e8:	8020      	strh	r0, [r4, #0]
    54ea:	e7ef      	b.n	54cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    54ec:	20001108 	.word	0x20001108
    54f0:	b510      	push	{r4, lr}
    54f2:	4604      	mov	r4, r0
    54f4:	4608      	mov	r0, r1
    54f6:	f002 fef3 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    54fa:	4906      	ldr	r1, [pc, #24]	; (5514 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    54fc:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5500:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5504:	4408      	add	r0, r1
    5506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    550a:	fbb0 f0f1 	udiv	r0, r0, r1
    550e:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5512:	bd10      	pop	{r4, pc}
    5514:	0000f35c 	.word	0x0000f35c
    5518:	b570      	push	{r4, r5, r6, lr}
    551a:	0004      	movs	r4, r0
    551c:	d008      	beq.n	5530 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    551e:	2909      	cmp	r1, #9
    5520:	d25f      	bcs.n	55e2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5522:	e8df f001 	tbb	[pc, r1]
    5526:	3807      	.short	0x3807
    5528:	5e3c4040 	.word	0x5e3c4040
    552c:	00594e47 	.word	0x00594e47
    5530:	21b7      	movs	r1, #183	; 0xb7
    5532:	e053      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5534:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5538:	b358      	cbz	r0, 5592 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    553a:	4620      	mov	r0, r4
    553c:	f000 f928 	bl	5790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5540:	f009 fd97 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5544:	f200 103b 	addw	r0, r0, #315	; 0x13b
    5548:	b285      	uxth	r5, r0
    554a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    554e:	2128      	movs	r1, #40	; 0x28
    5550:	f009 fe07 	bl	f162 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5554:	182e      	adds	r6, r5, r0
    5556:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5558:	6920      	ldr	r0, [r4, #16]
    555a:	4288      	cmp	r0, r1
    555c:	d200      	bcs.n	5560 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    555e:	4601      	mov	r1, r0
    5560:	4632      	mov	r2, r6
    5562:	4620      	mov	r0, r4
    5564:	f009 f8d4 	bl	e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5568:	4d1f      	ldr	r5, [pc, #124]	; (55e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    556a:	6068      	str	r0, [r5, #4]
    556c:	7869      	ldrb	r1, [r5, #1]
    556e:	b121      	cbz	r1, 557a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    5570:	4632      	mov	r2, r6
    5572:	4620      	mov	r0, r4
    5574:	6921      	ldr	r1, [r4, #16]
    5576:	f009 f8cb 	bl	e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    557a:	60a8      	str	r0, [r5, #8]
    557c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5580:	f009 f927 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5584:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    5588:	60e8      	str	r0, [r5, #12]
    558a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    558e:	f005 bf8b 	b.w	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5592:	21bf      	movs	r1, #191	; 0xbf
    5594:	e022      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    559a:	f009 bef0 	b.w	f37e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    559e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55a2:	f002 bf87 	b.w	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    55a6:	4620      	mov	r0, r4
    55a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55ac:	2201      	movs	r2, #1
    55ae:	2100      	movs	r1, #0
    55b0:	f009 bebb 	b.w	f32a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    55b4:	2001      	movs	r0, #1
    55b6:	f004 fe5d 	bl	a274 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    55ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55be:	f008 bc9c 	b.w	defa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    55c2:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    55c6:	2804      	cmp	r0, #4
    55c8:	d001      	beq.n	55ce <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    55ca:	21fe      	movs	r1, #254	; 0xfe
    55cc:	e006      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    55ce:	4620      	mov	r0, r4
    55d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55d4:	f009 be91 	b.w	f2fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    55d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    55dc:	2035      	movs	r0, #53	; 0x35
    55de:	f7fb fa41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55e2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    55e6:	e7f9      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    55e8:	20001108 	.word	0x20001108

000055ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    55ec:	4806      	ldr	r0, [pc, #24]	; (5608 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    55ee:	4905      	ldr	r1, [pc, #20]	; (5604 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    55f0:	6501      	str	r1, [r0, #80]	; 0x50
    55f2:	4906      	ldr	r1, [pc, #24]	; (560c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    55f4:	6541      	str	r1, [r0, #84]	; 0x54
    55f6:	4807      	ldr	r0, [pc, #28]	; (5614 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    55f8:	4905      	ldr	r1, [pc, #20]	; (5610 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    55fa:	6501      	str	r1, [r0, #80]	; 0x50
    55fc:	4906      	ldr	r1, [pc, #24]	; (5618 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    55fe:	6541      	str	r1, [r0, #84]	; 0x54
    5600:	4770      	bx	lr
    5602:	0000      	.short	0x0000
    5604:	000067b5 	.word	0x000067b5
    5608:	200000f8 	.word	0x200000f8
    560c:	0000688d 	.word	0x0000688d
    5610:	0000f551 	.word	0x0000f551
    5614:	200001a4 	.word	0x200001a4
    5618:	0000f57b 	.word	0x0000f57b

0000561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    561c:	b570      	push	{r4, r5, r6, lr}
    561e:	4605      	mov	r5, r0
    5620:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5624:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    5628:	b1c9      	cbz	r1, 565e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    562a:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    562e:	1a0c      	subs	r4, r1, r0
    5630:	f1b4 0404 	subs.w	r4, r4, #4
    5634:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    5638:	b140      	cbz	r0, 564c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    563a:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    563e:	2300      	movs	r3, #0
    5640:	2109      	movs	r1, #9
    5642:	f105 0088 	add.w	r0, r5, #136	; 0x88
    5646:	f008 fd0b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    564a:	b160      	cbz	r0, 5666 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    564c:	4628      	mov	r0, r5
    564e:	f00a f89a 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5652:	b138      	cbz	r0, 5664 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5654:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    5658:	1a40      	subs	r0, r0, r1
    565a:	1f00      	subs	r0, r0, #4
    565c:	e003      	b.n	5666 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    565e:	f1c0 0402 	rsb	r4, r0, #2
    5662:	e7e7      	b.n	5634 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    5664:	4620      	mov	r0, r4
    5666:	42a0      	cmp	r0, r4
    5668:	da00      	bge.n	566c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    566a:	4604      	mov	r4, r0
    566c:	2c00      	cmp	r4, #0
    566e:	dc01      	bgt.n	5674 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    5670:	2000      	movs	r0, #0
    5672:	bd70      	pop	{r4, r5, r6, pc}
    5674:	b2a0      	uxth	r0, r4
    5676:	bd70      	pop	{r4, r5, r6, pc}

00005678 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    5678:	481d      	ldr	r0, [pc, #116]	; (56f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    567a:	491c      	ldr	r1, [pc, #112]	; (56ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    567c:	6081      	str	r1, [r0, #8]
    567e:	491d      	ldr	r1, [pc, #116]	; (56f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    5680:	61c1      	str	r1, [r0, #28]
    5682:	491d      	ldr	r1, [pc, #116]	; (56f8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    5684:	62c1      	str	r1, [r0, #44]	; 0x2c
    5686:	491d      	ldr	r1, [pc, #116]	; (56fc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    5688:	6101      	str	r1, [r0, #16]
    568a:	491d      	ldr	r1, [pc, #116]	; (5700 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    568c:	6141      	str	r1, [r0, #20]
    568e:	491d      	ldr	r1, [pc, #116]	; (5704 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    5690:	6441      	str	r1, [r0, #68]	; 0x44
    5692:	491d      	ldr	r1, [pc, #116]	; (5708 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    5694:	6181      	str	r1, [r0, #24]
    5696:	491d      	ldr	r1, [pc, #116]	; (570c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    5698:	6301      	str	r1, [r0, #48]	; 0x30
    569a:	491d      	ldr	r1, [pc, #116]	; (5710 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    569c:	6241      	str	r1, [r0, #36]	; 0x24
    569e:	491d      	ldr	r1, [pc, #116]	; (5714 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    56a0:	64c1      	str	r1, [r0, #76]	; 0x4c
    56a2:	491d      	ldr	r1, [pc, #116]	; (5718 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    56a4:	6481      	str	r1, [r0, #72]	; 0x48
    56a6:	491d      	ldr	r1, [pc, #116]	; (571c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    56a8:	6341      	str	r1, [r0, #52]	; 0x34
    56aa:	491d      	ldr	r1, [pc, #116]	; (5720 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    56ac:	6381      	str	r1, [r0, #56]	; 0x38
    56ae:	481e      	ldr	r0, [pc, #120]	; (5728 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    56b0:	491c      	ldr	r1, [pc, #112]	; (5724 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    56b2:	6081      	str	r1, [r0, #8]
    56b4:	491d      	ldr	r1, [pc, #116]	; (572c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    56b6:	61c1      	str	r1, [r0, #28]
    56b8:	491d      	ldr	r1, [pc, #116]	; (5730 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    56ba:	6201      	str	r1, [r0, #32]
    56bc:	491d      	ldr	r1, [pc, #116]	; (5734 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    56be:	6041      	str	r1, [r0, #4]
    56c0:	491d      	ldr	r1, [pc, #116]	; (5738 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    56c2:	6001      	str	r1, [r0, #0]
    56c4:	491d      	ldr	r1, [pc, #116]	; (573c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    56c6:	6281      	str	r1, [r0, #40]	; 0x28
    56c8:	491d      	ldr	r1, [pc, #116]	; (5740 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    56ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    56cc:	491d      	ldr	r1, [pc, #116]	; (5744 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    56ce:	60c1      	str	r1, [r0, #12]
    56d0:	491d      	ldr	r1, [pc, #116]	; (5748 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    56d2:	6181      	str	r1, [r0, #24]
    56d4:	491d      	ldr	r1, [pc, #116]	; (574c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    56d6:	6301      	str	r1, [r0, #48]	; 0x30
    56d8:	491d      	ldr	r1, [pc, #116]	; (5750 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    56da:	6481      	str	r1, [r0, #72]	; 0x48
    56dc:	491d      	ldr	r1, [pc, #116]	; (5754 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    56de:	64c1      	str	r1, [r0, #76]	; 0x4c
    56e0:	491d      	ldr	r1, [pc, #116]	; (5758 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    56e2:	6441      	str	r1, [r0, #68]	; 0x44
    56e4:	491d      	ldr	r1, [pc, #116]	; (575c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    56e6:	6241      	str	r1, [r0, #36]	; 0x24
    56e8:	4770      	bx	lr
    56ea:	0000      	.short	0x0000
    56ec:	00006bbd 	.word	0x00006bbd
    56f0:	200000f8 	.word	0x200000f8
    56f4:	00006c01 	.word	0x00006c01
    56f8:	0000f45f 	.word	0x0000f45f
    56fc:	000066f5 	.word	0x000066f5
    5700:	0000f47f 	.word	0x0000f47f
    5704:	00006ac1 	.word	0x00006ac1
    5708:	00006b41 	.word	0x00006b41
    570c:	00006c49 	.word	0x00006c49
    5710:	00006731 	.word	0x00006731
    5714:	0000f431 	.word	0x0000f431
    5718:	0000f3fb 	.word	0x0000f3fb
    571c:	00006af5 	.word	0x00006af5
    5720:	0000690d 	.word	0x0000690d
    5724:	0000f719 	.word	0x0000f719
    5728:	200001a4 	.word	0x200001a4
    572c:	0000f749 	.word	0x0000f749
    5730:	0000f54d 	.word	0x0000f54d
    5734:	0000f4bf 	.word	0x0000f4bf
    5738:	0000f4e9 	.word	0x0000f4e9
    573c:	0000f5dd 	.word	0x0000f5dd
    5740:	0000f60f 	.word	0x0000f60f
    5744:	0000f513 	.word	0x0000f513
    5748:	0000f6fb 	.word	0x0000f6fb
    574c:	0000f783 	.word	0x0000f783
    5750:	0000f5a9 	.word	0x0000f5a9
    5754:	0000f5d3 	.word	0x0000f5d3
    5758:	0000f6d9 	.word	0x0000f6d9
    575c:	0000f5a5 	.word	0x0000f5a5

00005760 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    5760:	4806      	ldr	r0, [pc, #24]	; (577c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    5762:	4905      	ldr	r1, [pc, #20]	; (5778 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    5764:	6581      	str	r1, [r0, #88]	; 0x58
    5766:	4906      	ldr	r1, [pc, #24]	; (5780 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    5768:	65c1      	str	r1, [r0, #92]	; 0x5c
    576a:	4807      	ldr	r0, [pc, #28]	; (5788 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    576c:	4905      	ldr	r1, [pc, #20]	; (5784 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    576e:	6581      	str	r1, [r0, #88]	; 0x58
    5770:	4906      	ldr	r1, [pc, #24]	; (578c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    5772:	6601      	str	r1, [r0, #96]	; 0x60
    5774:	4770      	bx	lr
    5776:	0000      	.short	0x0000
    5778:	00006919 	.word	0x00006919
    577c:	200000f8 	.word	0x200000f8
    5780:	00006a51 	.word	0x00006a51
    5784:	0000f635 	.word	0x0000f635
    5788:	200001a4 	.word	0x200001a4
    578c:	0000f65f 	.word	0x0000f65f

00005790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    5790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5792:	4d39      	ldr	r5, [pc, #228]	; (5878 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    5794:	2600      	movs	r6, #0
    5796:	f1a5 070c 	sub.w	r7, r5, #12
    579a:	702e      	strb	r6, [r5, #0]
    579c:	6068      	str	r0, [r5, #4]
    579e:	807e      	strh	r6, [r7, #2]
    57a0:	707e      	strb	r6, [r7, #1]
    57a2:	4604      	mov	r4, r0
    57a4:	703e      	strb	r6, [r7, #0]
    57a6:	8800      	ldrh	r0, [r0, #0]
    57a8:	f7fb ff18 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    57ac:	6868      	ldr	r0, [r5, #4]
    57ae:	8800      	ldrh	r0, [r0, #0]
    57b0:	f7fb febc 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    57b4:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    57b8:	1c40      	adds	r0, r0, #1
    57ba:	b282      	uxth	r2, r0
    57bc:	6868      	ldr	r0, [r5, #4]
    57be:	f100 0388 	add.w	r3, r0, #136	; 0x88
    57c2:	4601      	mov	r1, r0
    57c4:	4618      	mov	r0, r3
    57c6:	f008 fe09 	bl	e3dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    57ca:	b120      	cbz	r0, 57d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    57cc:	f240 11c1 	movw	r1, #449	; 0x1c1
    57d0:	2036      	movs	r0, #54	; 0x36
    57d2:	f7fb f947 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57d6:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    57da:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    57de:	2825      	cmp	r0, #37	; 0x25
    57e0:	d10a      	bne.n	57f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    57e2:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    57e6:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    57ea:	1a40      	subs	r0, r0, r1
    57ec:	b200      	sxth	r0, r0
    57ee:	2800      	cmp	r0, #0
    57f0:	db02      	blt.n	57f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    57f2:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    57f6:	e011      	b.n	581c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    57f8:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    57fc:	2825      	cmp	r0, #37	; 0x25
    57fe:	d003      	beq.n	5808 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5800:	2826      	cmp	r0, #38	; 0x26
    5802:	d001      	beq.n	5808 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5804:	2827      	cmp	r0, #39	; 0x27
    5806:	d10c      	bne.n	5822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5808:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    580c:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5810:	1a40      	subs	r0, r0, r1
    5812:	b200      	sxth	r0, r0
    5814:	2800      	cmp	r0, #0
    5816:	db04      	blt.n	5822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5818:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    581c:	f000 febe 	bl	659c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5820:	b318      	cbz	r0, 586a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5822:	f000 fd43 	bl	62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    5826:	2800      	cmp	r0, #0
    5828:	d125      	bne.n	5876 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    582a:	6868      	ldr	r0, [r5, #4]
    582c:	3088      	adds	r0, #136	; 0x88
    582e:	f009 fdb4 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5832:	b120      	cbz	r0, 583e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5834:	6868      	ldr	r0, [r5, #4]
    5836:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    583a:	f000 fbdd 	bl	5ff8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    583e:	480f      	ldr	r0, [pc, #60]	; (587c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5840:	9000      	str	r0, [sp, #0]
    5842:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    5846:	4b0e      	ldr	r3, [pc, #56]	; (5880 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    5848:	4a0e      	ldr	r2, [pc, #56]	; (5884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    584a:	f7fb ff49 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    584e:	6868      	ldr	r0, [r5, #4]
    5850:	2300      	movs	r3, #0
    5852:	2105      	movs	r1, #5
    5854:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5858:	3088      	adds	r0, #136	; 0x88
    585a:	f008 fc01 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    585e:	2800      	cmp	r0, #0
    5860:	d009      	beq.n	5876 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    5862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5866:	f7fb bf35 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    586a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    586e:	2100      	movs	r1, #0
    5870:	4608      	mov	r0, r1
    5872:	f000 bcc3 	b.w	61fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    5876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5878:	200000f0 	.word	0x200000f0
    587c:	000061fd 	.word	0x000061fd
    5880:	00005a65 	.word	0x00005a65
    5884:	00006515 	.word	0x00006515

00005888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    588a:	460d      	mov	r5, r1
    588c:	4604      	mov	r4, r0
    588e:	2600      	movs	r6, #0
    5890:	e051      	b.n	5936 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    5892:	bf00      	nop
    5894:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5898:	1c40      	adds	r0, r0, #1
    589a:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    589e:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    58a2:	1c40      	adds	r0, r0, #1
    58a4:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    58a8:	4620      	mov	r0, r4
    58aa:	f009 ff6c 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    58ae:	b198      	cbz	r0, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    58b0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    58b4:	1c40      	adds	r0, r0, #1
    58b6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    58ba:	4620      	mov	r0, r4
    58bc:	f009 fd8e 	bl	f3dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    58c0:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    58c4:	4288      	cmp	r0, r1
    58c6:	d307      	bcc.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    58c8:	220f      	movs	r2, #15
    58ca:	491d      	ldr	r1, [pc, #116]	; (5940 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    58cc:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    58d0:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    58d4:	f008 fef8 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    58d8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    58dc:	b120      	cbz	r0, 58e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    58de:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    58e2:	1c40      	adds	r0, r0, #1
    58e4:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    58e8:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    58ec:	b120      	cbz	r0, 58f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    58ee:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    58f2:	1c40      	adds	r0, r0, #1
    58f4:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    58f8:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    58fc:	f88d 0000 	strb.w	r0, [sp]
    5900:	9800      	ldr	r0, [sp, #0]
    5902:	9000      	str	r0, [sp, #0]
    5904:	f89d 0000 	ldrb.w	r0, [sp]
    5908:	b940      	cbnz	r0, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    590a:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    590e:	2300      	movs	r3, #0
    5910:	2101      	movs	r1, #1
    5912:	f104 0088 	add.w	r0, r4, #136	; 0x88
    5916:	f008 fba3 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    591a:	b120      	cbz	r0, 5926 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    591c:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5920:	1c40      	adds	r0, r0, #1
    5922:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    5926:	4620      	mov	r0, r4
    5928:	f000 fa30 	bl	5d8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    592c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5930:	1c40      	adds	r0, r0, #1
    5932:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    5936:	1e6d      	subs	r5, r5, #1
    5938:	b2ad      	uxth	r5, r5
    593a:	d2ab      	bcs.n	5894 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    593e:	0000      	.short	0x0000
    5940:	0000ebbf 	.word	0x0000ebbf
    5944:	4411      	add	r1, r2
    5946:	78c2      	ldrb	r2, [r0, #3]
    5948:	480c      	ldr	r0, [pc, #48]	; (597c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    594a:	1d89      	adds	r1, r1, #6
    594c:	b289      	uxth	r1, r1
    594e:	6840      	ldr	r0, [r0, #4]
    5950:	2a01      	cmp	r2, #1
    5952:	d006      	beq.n	5962 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5954:	b142      	cbz	r2, 5968 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    5956:	2a18      	cmp	r2, #24
    5958:	d105      	bne.n	5966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    595a:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    595e:	b132      	cbz	r2, 596e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    5960:	e009      	b.n	5976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5962:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    5966:	4770      	bx	lr
    5968:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    596c:	4770      	bx	lr
    596e:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    5972:	b902      	cbnz	r2, 5976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5974:	2100      	movs	r1, #0
    5976:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    597a:	4770      	bx	lr
    597c:	200000f0 	.word	0x200000f0
    5980:	490b      	ldr	r1, [pc, #44]	; (59b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    5982:	78c2      	ldrb	r2, [r0, #3]
    5984:	6849      	ldr	r1, [r1, #4]
    5986:	2a01      	cmp	r2, #1
    5988:	d006      	beq.n	5998 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    598a:	b15a      	cbz	r2, 59a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    598c:	2a18      	cmp	r2, #24
    598e:	d108      	bne.n	59a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    5990:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    5994:	f008 be37 	b.w	e606 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    5998:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    599c:	7241      	strb	r1, [r0, #9]
    599e:	0a09      	lsrs	r1, r1, #8
    59a0:	7281      	strb	r1, [r0, #10]
    59a2:	4770      	bx	lr
    59a4:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    59a8:	7341      	strb	r1, [r0, #13]
    59aa:	0a09      	lsrs	r1, r1, #8
    59ac:	7381      	strb	r1, [r0, #14]
    59ae:	4770      	bx	lr
    59b0:	200000f0 	.word	0x200000f0
    59b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    59b6:	4c2a      	ldr	r4, [pc, #168]	; (5a60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    59b8:	2300      	movs	r3, #0
    59ba:	4619      	mov	r1, r3
    59bc:	6860      	ldr	r0, [r4, #4]
    59be:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    59c2:	3088      	adds	r0, #136	; 0x88
    59c4:	f008 fb4c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    59c8:	2800      	cmp	r0, #0
    59ca:	d048      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59cc:	6860      	ldr	r0, [r4, #4]
    59ce:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    59d2:	f88d 1000 	strb.w	r1, [sp]
    59d6:	9900      	ldr	r1, [sp, #0]
    59d8:	9100      	str	r1, [sp, #0]
    59da:	f89d 1000 	ldrb.w	r1, [sp]
    59de:	2500      	movs	r5, #0
    59e0:	2900      	cmp	r1, #0
    59e2:	d03c      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59e4:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    59e8:	f008 fb9d 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    59ec:	2800      	cmp	r0, #0
    59ee:	d136      	bne.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59f0:	6860      	ldr	r0, [r4, #4]
    59f2:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    59f6:	280a      	cmp	r0, #10
    59f8:	d931      	bls.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59fa:	4668      	mov	r0, sp
    59fc:	f7fc ff30 	bl	2860 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5a00:	2800      	cmp	r0, #0
    5a02:	d02c      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a04:	6861      	ldr	r1, [r4, #4]
    5a06:	2205      	movs	r2, #5
    5a08:	4668      	mov	r0, sp
    5a0a:	31ae      	adds	r1, #174	; 0xae
    5a0c:	f00b fa89 	bl	10f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a10:	b310      	cbz	r0, 5a58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5a12:	6860      	ldr	r0, [r4, #4]
    5a14:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5a18:	7808      	ldrb	r0, [r1, #0]
    5a1a:	b158      	cbz	r0, 5a34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5a1c:	2205      	movs	r2, #5
    5a1e:	4668      	mov	r0, sp
    5a20:	1c49      	adds	r1, r1, #1
    5a22:	f00b fa7e 	bl	10f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a26:	2800      	cmp	r0, #0
    5a28:	d119      	bne.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a2a:	6860      	ldr	r0, [r4, #4]
    5a2c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a30:	7800      	ldrb	r0, [r0, #0]
    5a32:	b940      	cbnz	r0, 5a46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5a34:	6860      	ldr	r0, [r4, #4]
    5a36:	9900      	ldr	r1, [sp, #0]
    5a38:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a3c:	f8c0 1001 	str.w	r1, [r0, #1]
    5a40:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5a44:	7141      	strb	r1, [r0, #5]
    5a46:	6860      	ldr	r0, [r4, #4]
    5a48:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a4c:	7801      	ldrb	r1, [r0, #0]
    5a4e:	1c49      	adds	r1, r1, #1
    5a50:	7001      	strb	r1, [r0, #0]
    5a52:	2001      	movs	r0, #1
    5a54:	f000 fe0c 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a58:	6860      	ldr	r0, [r4, #4]
    5a5a:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    5a5e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5a60:	200000f0 	.word	0x200000f0
    5a64:	4a0c      	ldr	r2, [pc, #48]	; (5a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    5a66:	7851      	ldrb	r1, [r2, #1]
    5a68:	b9a1      	cbnz	r1, 5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a6a:	f102 010c 	add.w	r1, r2, #12
    5a6e:	2801      	cmp	r0, #1
    5a70:	6849      	ldr	r1, [r1, #4]
    5a72:	d008      	beq.n	5a86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    5a74:	7890      	ldrb	r0, [r2, #2]
    5a76:	0740      	lsls	r0, r0, #29
    5a78:	d503      	bpl.n	5a82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    5a7a:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    5a7e:	2806      	cmp	r0, #6
    5a80:	d008      	beq.n	5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a82:	2001      	movs	r0, #1
    5a84:	4770      	bx	lr
    5a86:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    5a8a:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    5a8c:	4288      	cmp	r0, r1
    5a8e:	d801      	bhi.n	5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a90:	f7ff bc64 	b.w	535c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    5a94:	2000      	movs	r0, #0
    5a96:	4770      	bx	lr
    5a98:	200000e4 	.word	0x200000e4
    5a9c:	b538      	push	{r3, r4, r5, lr}
    5a9e:	4c93      	ldr	r4, [pc, #588]	; (5cec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    5aa0:	6860      	ldr	r0, [r4, #4]
    5aa2:	3088      	adds	r0, #136	; 0x88
    5aa4:	f009 fc79 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d164      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5aac:	6860      	ldr	r0, [r4, #4]
    5aae:	2300      	movs	r3, #0
    5ab0:	2101      	movs	r1, #1
    5ab2:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5ab6:	3088      	adds	r0, #136	; 0x88
    5ab8:	f008 fad2 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5abc:	2800      	cmp	r0, #0
    5abe:	d15a      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5ac0:	6860      	ldr	r0, [r4, #4]
    5ac2:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    5ac6:	f88d 1000 	strb.w	r1, [sp]
    5aca:	9900      	ldr	r1, [sp, #0]
    5acc:	9100      	str	r1, [sp, #0]
    5ace:	f89d 1000 	ldrb.w	r1, [sp]
    5ad2:	b109      	cbz	r1, 5ad8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5ad4:	2002      	movs	r0, #2
    5ad6:	e03c      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5ad8:	2500      	movs	r5, #0
    5ada:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ade:	462b      	mov	r3, r5
    5ae0:	4629      	mov	r1, r5
    5ae2:	3088      	adds	r0, #136	; 0x88
    5ae4:	f008 fabc 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae8:	b128      	cbz	r0, 5af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5aea:	6860      	ldr	r0, [r4, #4]
    5aec:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5af0:	b108      	cbz	r0, 5af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5af2:	2012      	movs	r0, #18
    5af4:	e02d      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5af6:	6860      	ldr	r0, [r4, #4]
    5af8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5afc:	2a19      	cmp	r2, #25
    5afe:	d027      	beq.n	5b50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5b00:	dc06      	bgt.n	5b10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5b02:	2a03      	cmp	r2, #3
    5b04:	d029      	beq.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    5b06:	2a12      	cmp	r2, #18
    5b08:	d01e      	beq.n	5b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    5b0a:	2a13      	cmp	r2, #19
    5b0c:	d104      	bne.n	5b18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5b0e:	e019      	b.n	5b44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5b10:	2a24      	cmp	r2, #36	; 0x24
    5b12:	d02a      	beq.n	5b6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5b14:	2a2f      	cmp	r2, #47	; 0x2f
    5b16:	d02f      	beq.n	5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    5b18:	2300      	movs	r3, #0
    5b1a:	2104      	movs	r1, #4
    5b1c:	3088      	adds	r0, #136	; 0x88
    5b1e:	f008 fa9f 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b22:	2800      	cmp	r0, #0
    5b24:	d127      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5b26:	6860      	ldr	r0, [r4, #4]
    5b28:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5b2c:	291e      	cmp	r1, #30
    5b2e:	d048      	beq.n	5bc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5b30:	dc29      	bgt.n	5b86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5b32:	2901      	cmp	r1, #1
    5b34:	d036      	beq.n	5ba4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    5b36:	2902      	cmp	r1, #2
    5b38:	d041      	beq.n	5bbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5b3a:	2903      	cmp	r1, #3
    5b3c:	d02c      	beq.n	5b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5b3e:	2904      	cmp	r1, #4
    5b40:	d13c      	bne.n	5bbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5b42:	e0b7      	b.n	5cb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5b44:	200b      	movs	r0, #11
    5b46:	e004      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b4c:	f000 bca2 	b.w	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5b50:	2006      	movs	r0, #6
    5b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b56:	f000 bd8b 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b5a:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    5b5e:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5b62:	2007      	movs	r0, #7
    5b64:	f000 fd84 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b68:	e009      	b.n	5b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    5b6a:	2018      	movs	r0, #24
    5b6c:	f000 fd80 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b70:	6860      	ldr	r0, [r4, #4]
    5b72:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2001      	movs	r0, #1
    5b7a:	f000 fd81 	bl	6680 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5b7e:	6860      	ldr	r0, [r4, #4]
    5b80:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    5b84:	bd38      	pop	{r3, r4, r5, pc}
    5b86:	291f      	cmp	r1, #31
    5b88:	d01b      	beq.n	5bc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5b8a:	2922      	cmp	r1, #34	; 0x22
    5b8c:	d061      	beq.n	5c52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    5b8e:	2928      	cmp	r1, #40	; 0x28
    5b90:	d071      	beq.n	5c76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    5b92:	292f      	cmp	r1, #47	; 0x2f
    5b94:	d17d      	bne.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5b96:	e089      	b.n	5cac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    5b98:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    5b9c:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5ba0:	2007      	movs	r0, #7
    5ba2:	e08a      	b.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5ba4:	200c      	movs	r0, #12
    5ba6:	f000 fd63 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5baa:	6860      	ldr	r0, [r4, #4]
    5bac:	f820 5fe2 	strh.w	r5, [r0, #226]!
    5bb0:	7941      	ldrb	r1, [r0, #5]
    5bb2:	f041 0101 	orr.w	r1, r1, #1
    5bb6:	7141      	strb	r1, [r0, #5]
    5bb8:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5bbc:	e069      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5bbe:	2013      	movs	r0, #19
    5bc0:	e039      	b.n	5c36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5bc2:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5bc6:	f88d 2000 	strb.w	r2, [sp]
    5bca:	9a00      	ldr	r2, [sp, #0]
    5bcc:	9200      	str	r2, [sp, #0]
    5bce:	f89d 2000 	ldrb.w	r2, [sp]
    5bd2:	bbba      	cbnz	r2, 5c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5bd4:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5bd8:	f88d 2000 	strb.w	r2, [sp]
    5bdc:	9a00      	ldr	r2, [sp, #0]
    5bde:	9200      	str	r2, [sp, #0]
    5be0:	f89d 2000 	ldrb.w	r2, [sp]
    5be4:	b37a      	cbz	r2, 5c46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5be6:	2925      	cmp	r1, #37	; 0x25
    5be8:	d031      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bea:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5bee:	2925      	cmp	r1, #37	; 0x25
    5bf0:	d02d      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bf2:	2926      	cmp	r1, #38	; 0x26
    5bf4:	d02b      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bf6:	2300      	movs	r3, #0
    5bf8:	f200 2262 	addw	r2, r0, #610	; 0x262
    5bfc:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5c00:	f008 fd78 	bl	e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5c04:	6860      	ldr	r0, [r4, #4]
    5c06:	211f      	movs	r1, #31
    5c08:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5c0c:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5c10:	6860      	ldr	r0, [r4, #4]
    5c12:	f008 fd8a 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5c16:	2104      	movs	r1, #4
    5c18:	6860      	ldr	r0, [r4, #4]
    5c1a:	f009 fa64 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c1e:	f000 f867 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5c22:	6861      	ldr	r1, [r4, #4]
    5c24:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5c28:	8bc2      	ldrh	r2, [r0, #30]
    5c2a:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5c2e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5c30:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5c34:	2015      	movs	r0, #21
    5c36:	f000 fd1b 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5c3a:	6860      	ldr	r0, [r4, #4]
    5c3c:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5c40:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5c44:	e025      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c46:	e7ff      	b.n	5c48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5c48:	291f      	cmp	r1, #31
    5c4a:	d0e1      	beq.n	5c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5c4c:	e021      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c4e:	2301      	movs	r3, #1
    5c50:	e7d2      	b.n	5bf8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5c52:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5c56:	2901      	cmp	r1, #1
    5c58:	d108      	bne.n	5c6c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5c5a:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5c5e:	f88d 1000 	strb.w	r1, [sp]
    5c62:	9900      	ldr	r1, [sp, #0]
    5c64:	9100      	str	r1, [sp, #0]
    5c66:	f89d 1000 	ldrb.w	r1, [sp]
    5c6a:	b129      	cbz	r1, 5c78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5c6c:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5c70:	2902      	cmp	r1, #2
    5c72:	d006      	beq.n	5c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5c74:	e00d      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c76:	e01f      	b.n	5cb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5c78:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5c7c:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5c80:	e002      	b.n	5c88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5c82:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5c86:	6840      	ldr	r0, [r0, #4]
    5c88:	f000 fd04 	bl	6694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5c8c:	2018      	movs	r0, #24
    5c8e:	f000 fcef 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5c92:	6860      	ldr	r0, [r4, #4]
    5c94:	3088      	adds	r0, #136	; 0x88
    5c96:	f009 fb80 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5c9a:	2800      	cmp	r0, #0
    5c9c:	f47f af72 	bne.w	5b84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ca0:	6860      	ldr	r0, [r4, #4]
    5ca2:	3088      	adds	r0, #136	; 0x88
    5ca4:	f009 fb79 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ca8:	b158      	cbz	r0, 5cc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5caa:	e015      	b.n	5cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5cac:	2000      	movs	r0, #0
    5cae:	f000 fce7 	bl	6680 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5cb2:	e004      	b.n	5cbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5cb4:	2009      	movs	r0, #9
    5cb6:	e000      	b.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5cb8:	2024      	movs	r0, #36	; 0x24
    5cba:	f000 fcd9 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5cbe:	6860      	ldr	r0, [r4, #4]
    5cc0:	e7be      	b.n	5c40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5cc2:	6860      	ldr	r0, [r4, #4]
    5cc4:	2300      	movs	r3, #0
    5cc6:	4619      	mov	r1, r3
    5cc8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ccc:	3088      	adds	r0, #136	; 0x88
    5cce:	f008 f9c7 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5cd2:	b108      	cbz	r0, 5cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5cd4:	f000 fb14 	bl	6300 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5cd8:	6860      	ldr	r0, [r4, #4]
    5cda:	3088      	adds	r0, #136	; 0x88
    5cdc:	f009 fb5d 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ce0:	2800      	cmp	r0, #0
    5ce2:	d1db      	bne.n	5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ce8:	f7ff be64 	b.w	59b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5cec:	200000f0 	.word	0x200000f0
    5cf0:	4808      	ldr	r0, [pc, #32]	; (5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5cf2:	6843      	ldr	r3, [r0, #4]
    5cf4:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5cf8:	2801      	cmp	r0, #1
    5cfa:	d006      	beq.n	5d0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5cfc:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5d00:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5d04:	8818      	ldrh	r0, [r3, #0]
    5d06:	f7fd b893 	b.w	2e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5d0a:	2002      	movs	r0, #2
    5d0c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5d10:	4770      	bx	lr
    5d12:	0000      	.short	0x0000
    5d14:	200000f0 	.word	0x200000f0
    5d18:	b538      	push	{r3, r4, r5, lr}
    5d1a:	4d1a      	ldr	r5, [pc, #104]	; (5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5d1c:	686b      	ldr	r3, [r5, #4]
    5d1e:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5d22:	2917      	cmp	r1, #23
    5d24:	d001      	beq.n	5d2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5d26:	2914      	cmp	r1, #20
    5d28:	d102      	bne.n	5d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5d2a:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5d2e:	b109      	cbz	r1, 5d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5d30:	2002      	movs	r0, #2
    5d32:	bd38      	pop	{r3, r4, r5, pc}
    5d34:	2400      	movs	r4, #0
    5d36:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5d3a:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5d3e:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5d42:	f88d 1000 	strb.w	r1, [sp]
    5d46:	9900      	ldr	r1, [sp, #0]
    5d48:	9100      	str	r1, [sp, #0]
    5d4a:	f89d 1000 	ldrb.w	r1, [sp]
    5d4e:	b121      	cbz	r1, 5d5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5d50:	f240 31df 	movw	r1, #991	; 0x3df
    5d54:	2036      	movs	r0, #54	; 0x36
    5d56:	f7fa fe85 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d5a:	8819      	ldrh	r1, [r3, #0]
    5d5c:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5d60:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5d64:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5d68:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5d6c:	f203 2012 	addw	r0, r3, #530	; 0x212
    5d70:	220c      	movs	r2, #12
    5d72:	4905      	ldr	r1, [pc, #20]	; (5d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5d74:	f008 fc94 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d78:	6868      	ldr	r0, [r5, #4]
    5d7a:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5d7e:	2000      	movs	r0, #0
    5d80:	bd38      	pop	{r3, r4, r5, pc}
    5d82:	0000      	.short	0x0000
    5d84:	200000f0 	.word	0x200000f0
    5d88:	0000eb23 	.word	0x0000eb23
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4604      	mov	r4, r0
    5d90:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5d94:	2500      	movs	r5, #0
    5d96:	280b      	cmp	r0, #11
    5d98:	d001      	beq.n	5d9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5d9a:	280c      	cmp	r0, #12
    5d9c:	d108      	bne.n	5db0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5d9e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5da2:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5da6:	1a89      	subs	r1, r1, r2
    5da8:	1c49      	adds	r1, r1, #1
    5daa:	0409      	lsls	r1, r1, #16
    5dac:	0c09      	lsrs	r1, r1, #16
    5dae:	d032      	beq.n	5e16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5db0:	280d      	cmp	r0, #13
    5db2:	d001      	beq.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5db4:	280e      	cmp	r0, #14
    5db6:	d12d      	bne.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5db8:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5dbc:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5dc0:	1a40      	subs	r0, r0, r1
    5dc2:	1c40      	adds	r0, r0, #1
    5dc4:	0400      	lsls	r0, r0, #16
    5dc6:	0c00      	lsrs	r0, r0, #16
    5dc8:	d124      	bne.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5dca:	8820      	ldrh	r0, [r4, #0]
    5dcc:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5dd0:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5dd4:	f008 f92b 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5dd8:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5ddc:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5de0:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5de4:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5de8:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5dec:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5df0:	2209      	movs	r2, #9
    5df2:	4919      	ldr	r1, [pc, #100]	; (5e58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5df4:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5df8:	f008 fc66 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5dfc:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5e00:	2102      	movs	r1, #2
    5e02:	4620      	mov	r0, r4
    5e04:	f7fc fc86 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5e08:	2103      	movs	r1, #3
    5e0a:	4620      	mov	r0, r4
    5e0c:	f009 f96b 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5e10:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5e14:	bd70      	pop	{r4, r5, r6, pc}
    5e16:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5e1a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5e1e:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5e22:	7940      	ldrb	r0, [r0, #5]
    5e24:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5e28:	2103      	movs	r1, #3
    5e2a:	4620      	mov	r0, r4
    5e2c:	f7fc fc72 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5e30:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5e34:	7800      	ldrb	r0, [r0, #0]
    5e36:	b148      	cbz	r0, 5e4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5e38:	2101      	movs	r1, #1
    5e3a:	20fe      	movs	r0, #254	; 0xfe
    5e3c:	f001 f858 	bl	6ef0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5e40:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5e44:	20ff      	movs	r0, #255	; 0xff
    5e46:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5e4a:	bd70      	pop	{r4, r5, r6, pc}
    5e4c:	f240 2152 	movw	r1, #594	; 0x252
    5e50:	2036      	movs	r0, #54	; 0x36
    5e52:	f7fa fe07 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	0000      	.short	0x0000
    5e58:	0000eae5 	.word	0x0000eae5
    5e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e5e:	4d28      	ldr	r5, [pc, #160]	; (5f00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5e60:	f04f 0600 	mov.w	r6, #0
    5e64:	f105 040c 	add.w	r4, r5, #12
    5e68:	8869      	ldrh	r1, [r5, #2]
    5e6a:	0748      	lsls	r0, r1, #29
    5e6c:	d510      	bpl.n	5e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5e6e:	6860      	ldr	r0, [r4, #4]
    5e70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5e74:	2a03      	cmp	r2, #3
    5e76:	d004      	beq.n	5e82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5e78:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5e7c:	2a06      	cmp	r2, #6
    5e7e:	d107      	bne.n	5e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5e80:	e002      	b.n	5e88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5e82:	f240 7109 	movw	r1, #1801	; 0x709
    5e86:	e025      	b.n	5ed4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5e88:	2201      	movs	r2, #1
    5e8a:	702a      	strb	r2, [r5, #0]
    5e8c:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5e90:	0788      	lsls	r0, r1, #30
    5e92:	d50a      	bpl.n	5eaa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5e94:	6868      	ldr	r0, [r5, #4]
    5e96:	78c0      	ldrb	r0, [r0, #3]
    5e98:	282b      	cmp	r0, #43	; 0x2b
    5e9a:	d219      	bcs.n	5ed0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5e9c:	4919      	ldr	r1, [pc, #100]	; (5f04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5e9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ea2:	b1a9      	cbz	r1, 5ed0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ea4:	4816      	ldr	r0, [pc, #88]	; (5f00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ea6:	300c      	adds	r0, #12
    5ea8:	4788      	blx	r1
    5eaa:	f000 f86d 	bl	5f88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5eae:	f000 f82b 	bl	5f08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5eb2:	4607      	mov	r7, r0
    5eb4:	7868      	ldrb	r0, [r5, #1]
    5eb6:	0700      	lsls	r0, r0, #28
    5eb8:	d51c      	bpl.n	5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	2300      	movs	r3, #0
    5ebe:	2105      	movs	r1, #5
    5ec0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ec4:	3088      	adds	r0, #136	; 0x88
    5ec6:	f008 f8cb 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5eca:	b130      	cbz	r0, 5eda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5ecc:	2708      	movs	r7, #8
    5ece:	e011      	b.n	5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5ed0:	f640 0149 	movw	r1, #2121	; 0x849
    5ed4:	2036      	movs	r0, #54	; 0x36
    5ed6:	f7fa fdc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eda:	4669      	mov	r1, sp
    5edc:	2003      	movs	r0, #3
    5ede:	9600      	str	r6, [sp, #0]
    5ee0:	f7fb fcd4 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5ee4:	9800      	ldr	r0, [sp, #0]
    5ee6:	b128      	cbz	r0, 5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5ee8:	7206      	strb	r6, [r0, #8]
    5eea:	222a      	movs	r2, #42	; 0x2a
    5eec:	6861      	ldr	r1, [r4, #4]
    5eee:	9800      	ldr	r0, [sp, #0]
    5ef0:	f008 fbd6 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5ef4:	6860      	ldr	r0, [r4, #4]
    5ef6:	f7ff ff49 	bl	5d8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5efa:	4638      	mov	r0, r7
    5efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5efe:	0000      	.short	0x0000
    5f00:	200000e4 	.word	0x200000e4
    5f04:	200001a4 	.word	0x200001a4
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	4c1d      	ldr	r4, [pc, #116]	; (5f80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5f0c:	2000      	movs	r0, #0
    5f0e:	78a1      	ldrb	r1, [r4, #2]
    5f10:	07c9      	lsls	r1, r1, #31
    5f12:	d01d      	beq.n	5f50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5f14:	68a0      	ldr	r0, [r4, #8]
    5f16:	2300      	movs	r3, #0
    5f18:	2105      	movs	r1, #5
    5f1a:	78c5      	ldrb	r5, [r0, #3]
    5f1c:	f104 000c 	add.w	r0, r4, #12
    5f20:	6840      	ldr	r0, [r0, #4]
    5f22:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f26:	3088      	adds	r0, #136	; 0x88
    5f28:	f008 f89a 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f2c:	b188      	cbz	r0, 5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f2e:	2d06      	cmp	r5, #6
    5f30:	d00f      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f32:	dc06      	bgt.n	5f42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5f34:	2d02      	cmp	r5, #2
    5f36:	d00c      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f38:	2d04      	cmp	r5, #4
    5f3a:	d00a      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f3c:	2d05      	cmp	r5, #5
    5f3e:	d106      	bne.n	5f4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5f40:	e007      	b.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f42:	2d0b      	cmp	r5, #11
    5f44:	d005      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f46:	2d0d      	cmp	r5, #13
    5f48:	d003      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f4a:	2d11      	cmp	r5, #17
    5f4c:	d001      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f4e:	2008      	movs	r0, #8
    5f50:	bd70      	pop	{r4, r5, r6, pc}
    5f52:	68a0      	ldr	r0, [r4, #8]
    5f54:	f7fc fd16 	bl	2984 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5f58:	b160      	cbz	r0, 5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f5a:	68a0      	ldr	r0, [r4, #8]
    5f5c:	78c0      	ldrb	r0, [r0, #3]
    5f5e:	282b      	cmp	r0, #43	; 0x2b
    5f60:	d208      	bcs.n	5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f62:	4908      	ldr	r1, [pc, #32]	; (5f84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5f64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5f68:	b121      	cbz	r1, 5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f6e:	4804      	ldr	r0, [pc, #16]	; (5f80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5f70:	300c      	adds	r0, #12
    5f72:	4708      	bx	r1
    5f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f78:	2000      	movs	r0, #0
    5f7a:	f000 bbdf 	b.w	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5f7e:	0000      	.short	0x0000
    5f80:	200000e4 	.word	0x200000e4
    5f84:	200000f8 	.word	0x200000f8
    5f88:	b570      	push	{r4, r5, r6, lr}
    5f8a:	4d1a      	ldr	r5, [pc, #104]	; (5ff4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5f8c:	78a8      	ldrb	r0, [r5, #2]
    5f8e:	0700      	lsls	r0, r0, #28
    5f90:	d52e      	bpl.n	5ff0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5f92:	f105 040c 	add.w	r4, r5, #12
    5f96:	2100      	movs	r1, #0
    5f98:	6860      	ldr	r0, [r4, #4]
    5f9a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5f9e:	f000 ffa7 	bl	6ef0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5fa2:	6860      	ldr	r0, [r4, #4]
    5fa4:	3088      	adds	r0, #136	; 0x88
    5fa6:	f009 f9f8 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5faa:	b160      	cbz	r0, 5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5fac:	6860      	ldr	r0, [r4, #4]
    5fae:	21fe      	movs	r1, #254	; 0xfe
    5fb0:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5fb4:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5fb8:	290b      	cmp	r1, #11
    5fba:	d009      	beq.n	5fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5fbc:	290d      	cmp	r1, #13
    5fbe:	d009      	beq.n	5fd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5fc0:	2925      	cmp	r1, #37	; 0x25
    5fc2:	d10c      	bne.n	5fde <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5fc4:	e008      	b.n	5fd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5fc6:	f640 0155 	movw	r1, #2133	; 0x855
    5fca:	2036      	movs	r0, #54	; 0x36
    5fcc:	f7fa fd4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fd0:	210c      	movs	r1, #12
    5fd2:	e002      	b.n	5fda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5fd4:	210e      	movs	r1, #14
    5fd6:	e000      	b.n	5fda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5fd8:	2126      	movs	r1, #38	; 0x26
    5fda:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5fde:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5fe2:	2907      	cmp	r1, #7
    5fe4:	d104      	bne.n	5ff0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5fe6:	2102      	movs	r1, #2
    5fe8:	7029      	strb	r1, [r5, #0]
    5fea:	2100      	movs	r1, #0
    5fec:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5ff0:	bd70      	pop	{r4, r5, r6, pc}
    5ff2:	0000      	.short	0x0000
    5ff4:	200000e4 	.word	0x200000e4
    5ff8:	b538      	push	{r3, r4, r5, lr}
    5ffa:	4605      	mov	r5, r0
    5ffc:	4668      	mov	r0, sp
    5ffe:	f7fb fad7 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    6002:	b348      	cbz	r0, 6058 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    6004:	2222      	movs	r2, #34	; 0x22
    6006:	2100      	movs	r1, #0
    6008:	9800      	ldr	r0, [sp, #0]
    600a:	f00b f816 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    600e:	2103      	movs	r1, #3
    6010:	9800      	ldr	r0, [sp, #0]
    6012:	f008 fb12 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6016:	9800      	ldr	r0, [sp, #0]
    6018:	7801      	ldrb	r1, [r0, #0]
    601a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    601e:	7001      	strb	r1, [r0, #0]
    6020:	4629      	mov	r1, r5
    6022:	f7fc fcbf 	bl	29a4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    6026:	2100      	movs	r1, #0
    6028:	4c73      	ldr	r4, [pc, #460]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    602a:	2d26      	cmp	r5, #38	; 0x26
    602c:	d277      	bcs.n	611e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    602e:	e8df f005 	tbb	[pc, r5]
    6032:	222a      	.short	0x222a
    6034:	dbdb5216 	.word	0xdbdb5216
    6038:	7b771cd4 	.word	0x7b771cd4
    603c:	db6bd4d4 	.word	0xdb6bd4d4
    6040:	bcdbdbdb 	.word	0xbcdbdbdb
    6044:	8080d4d4 	.word	0x8080d4d4
    6048:	dba3db99 	.word	0xdba3db99
    604c:	dbdbdbdb 	.word	0xdbdbdbdb
    6050:	dbdbdbdb 	.word	0xdbdbdbdb
    6054:	b6b6b6db 	.word	0xb6b6b6db
    6058:	f640 217b 	movw	r1, #2683	; 0xa7b
    605c:	e0c9      	b.n	61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    605e:	6860      	ldr	r0, [r4, #4]
    6060:	9900      	ldr	r1, [sp, #0]
    6062:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    6066:	7108      	strb	r0, [r1, #4]
    6068:	e0b7      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    606a:	6861      	ldr	r1, [r4, #4]
    606c:	9800      	ldr	r0, [sp, #0]
    606e:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    6072:	7101      	strb	r1, [r0, #4]
    6074:	e0b1      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    607c:	9800      	ldr	r0, [sp, #0]
    607e:	1c49      	adds	r1, r1, #1
    6080:	f008 fa6c 	bl	e55c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    6084:	e0a9      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6086:	6860      	ldr	r0, [r4, #4]
    6088:	9d00      	ldr	r5, [sp, #0]
    608a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    608e:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    6092:	f008 f953 	bl	e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6096:	7128      	strb	r0, [r5, #4]
    6098:	6860      	ldr	r0, [r4, #4]
    609a:	9d00      	ldr	r5, [sp, #0]
    609c:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    60a0:	c803      	ldmia	r0, {r0, r1}
    60a2:	f008 f934 	bl	e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    60a6:	7168      	strb	r0, [r5, #5]
    60a8:	0a00      	lsrs	r0, r0, #8
    60aa:	71a8      	strb	r0, [r5, #6]
    60ac:	6860      	ldr	r0, [r4, #4]
    60ae:	9d00      	ldr	r5, [sp, #0]
    60b0:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    60b4:	f007 ffbb 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    60b8:	71e8      	strb	r0, [r5, #7]
    60ba:	0a00      	lsrs	r0, r0, #8
    60bc:	7228      	strb	r0, [r5, #8]
    60be:	6862      	ldr	r2, [r4, #4]
    60c0:	9800      	ldr	r0, [sp, #0]
    60c2:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    60c6:	7241      	strb	r1, [r0, #9]
    60c8:	0a09      	lsrs	r1, r1, #8
    60ca:	7281      	strb	r1, [r0, #10]
    60cc:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    60d0:	f008 fa49 	bl	e566 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    60d4:	e081      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    60d6:	6861      	ldr	r1, [r4, #4]
    60d8:	9800      	ldr	r0, [sp, #0]
    60da:	f201 2179 	addw	r1, r1, #633	; 0x279
    60de:	f008 fa57 	bl	e590 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    60e2:	6861      	ldr	r1, [r4, #4]
    60e4:	9800      	ldr	r0, [sp, #0]
    60e6:	f201 2181 	addw	r1, r1, #641	; 0x281
    60ea:	f008 fa4a 	bl	e582 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    60ee:	6861      	ldr	r1, [r4, #4]
    60f0:	9800      	ldr	r0, [sp, #0]
    60f2:	f201 2193 	addw	r1, r1, #659	; 0x293
    60f6:	f008 fa50 	bl	e59a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    60fa:	6861      	ldr	r1, [r4, #4]
    60fc:	9800      	ldr	r0, [sp, #0]
    60fe:	f501 7190 	add.w	r1, r1, #288	; 0x120
    6102:	f008 fa41 	bl	e588 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    6106:	e068      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6108:	9800      	ldr	r0, [sp, #0]
    610a:	220c      	movs	r2, #12
    610c:	7102      	strb	r2, [r0, #4]
    610e:	2259      	movs	r2, #89	; 0x59
    6110:	7142      	strb	r2, [r0, #5]
    6112:	7181      	strb	r1, [r0, #6]
    6114:	214b      	movs	r1, #75	; 0x4b
    6116:	71c1      	strb	r1, [r0, #7]
    6118:	2112      	movs	r1, #18
    611a:	7201      	strb	r1, [r0, #8]
    611c:	e05d      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    611e:	e063      	b.n	61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    6120:	9800      	ldr	r0, [sp, #0]
    6122:	f7fc ff73 	bl	300c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    6126:	e058      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6128:	4833      	ldr	r0, [pc, #204]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    612a:	9900      	ldr	r1, [sp, #0]
    612c:	f7fc ffc2 	bl	30b4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    6130:	e053      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6132:	6860      	ldr	r0, [r4, #4]
    6134:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    6138:	9800      	ldr	r0, [sp, #0]
    613a:	f008 fa8e 	bl	e65a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    613e:	6860      	ldr	r0, [r4, #4]
    6140:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    6144:	9800      	ldr	r0, [sp, #0]
    6146:	f008 fa8c 	bl	e662 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    614a:	6860      	ldr	r0, [r4, #4]
    614c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    6150:	9800      	ldr	r0, [sp, #0]
    6152:	f008 fa7a 	bl	e64a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    6156:	6860      	ldr	r0, [r4, #4]
    6158:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    615c:	9800      	ldr	r0, [sp, #0]
    615e:	f008 fa78 	bl	e652 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    6162:	e03a      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6164:	6861      	ldr	r1, [r4, #4]
    6166:	9800      	ldr	r0, [sp, #0]
    6168:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    616c:	7101      	strb	r1, [r0, #4]
    616e:	6861      	ldr	r1, [r4, #4]
    6170:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    6174:	7141      	strb	r1, [r0, #5]
    6176:	e030      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6178:	6860      	ldr	r0, [r4, #4]
    617a:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    617e:	f008 f824 	bl	e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6182:	4601      	mov	r1, r0
    6184:	9800      	ldr	r0, [sp, #0]
    6186:	f008 fa44 	bl	e612 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    618a:	6860      	ldr	r0, [r4, #4]
    618c:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    6190:	f008 f81b 	bl	e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6194:	4601      	mov	r1, r0
    6196:	9800      	ldr	r0, [sp, #0]
    6198:	f008 fa39 	bl	e60e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    619c:	e01d      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    619e:	4a16      	ldr	r2, [pc, #88]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    61a0:	4628      	mov	r0, r5
    61a2:	9900      	ldr	r1, [sp, #0]
    61a4:	f009 fb2a 	bl	f7fc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    61a8:	e017      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    61aa:	6860      	ldr	r0, [r4, #4]
    61ac:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    61b0:	b141      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    61b2:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    61b6:	9800      	ldr	r0, [sp, #0]
    61b8:	f008 fa39 	bl	e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    61bc:	6860      	ldr	r0, [r4, #4]
    61be:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    61c2:	e007      	b.n	61d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    61c4:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    61c8:	9800      	ldr	r0, [sp, #0]
    61ca:	f008 fa30 	bl	e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    61ce:	6860      	ldr	r0, [r4, #4]
    61d0:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    61d4:	9800      	ldr	r0, [sp, #0]
    61d6:	f008 fa2e 	bl	e636 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    61da:	f7fb f9c3 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    61de:	b130      	cbz	r0, 61ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    61e0:	9800      	ldr	r0, [sp, #0]
    61e2:	f7ff fbcd 	bl	5980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    61e6:	bd38      	pop	{r3, r4, r5, pc}
    61e8:	f640 314e 	movw	r1, #2894	; 0xb4e
    61ec:	e001      	b.n	61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    61ee:	f640 3154 	movw	r1, #2900	; 0xb54
    61f2:	2036      	movs	r0, #54	; 0x36
    61f4:	f7fa fc36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61f8:	200000f0 	.word	0x200000f0
    61fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6200:	4e28      	ldr	r6, [pc, #160]	; (62a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6202:	4680      	mov	r8, r0
    6204:	460d      	mov	r5, r1
    6206:	8870      	ldrh	r0, [r6, #2]
    6208:	f106 040c 	add.w	r4, r6, #12
    620c:	05c1      	lsls	r1, r0, #23
    620e:	6860      	ldr	r0, [r4, #4]
    6210:	f04f 0700 	mov.w	r7, #0
    6214:	d502      	bpl.n	621c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    6216:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    621a:	e004      	b.n	6226 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    621c:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6220:	1c49      	adds	r1, r1, #1
    6222:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    6226:	f009 faae 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    622a:	b1f0      	cbz	r0, 626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    622c:	8870      	ldrh	r0, [r6, #2]
    622e:	0500      	lsls	r0, r0, #20
    6230:	d506      	bpl.n	6240 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6232:	6860      	ldr	r0, [r4, #4]
    6234:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    6238:	b111      	cbz	r1, 6240 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    623a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    623e:	e014      	b.n	626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6240:	6860      	ldr	r0, [r4, #4]
    6242:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    6246:	1c49      	adds	r1, r1, #1
    6248:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    624c:	f009 f8c6 	bl	f3dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    6256:	4291      	cmp	r1, r2
    6258:	d307      	bcc.n	626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    625a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    625e:	220f      	movs	r2, #15
    6260:	4911      	ldr	r1, [pc, #68]	; (62a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    6262:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    6266:	f008 fa2f 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    626a:	8870      	ldrh	r0, [r6, #2]
    626c:	f410 7f40 	tst.w	r0, #768	; 0x300
    6270:	d008      	beq.n	6284 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    6272:	6860      	ldr	r0, [r4, #4]
    6274:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    6278:	b921      	cbnz	r1, 6284 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    627a:	2101      	movs	r1, #1
    627c:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    6280:	f008 ff31 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6284:	ea58 0005 	orrs.w	r0, r8, r5
    6288:	d104      	bne.n	6294 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    628a:	f7ff fde7 	bl	5e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    628e:	4605      	mov	r5, r0
    6290:	f7ff fc04 	bl	5a9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    6294:	4629      	mov	r1, r5
    6296:	4640      	mov	r0, r8
    6298:	f000 fd36 	bl	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    629c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62a0:	f7fb b94a 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    62a4:	200000e4 	.word	0x200000e4
    62a8:	0000ebbf 	.word	0x0000ebbf
    62ac:	4813      	ldr	r0, [pc, #76]	; (62fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    62ae:	6840      	ldr	r0, [r0, #4]
    62b0:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    62b4:	b129      	cbz	r1, 62c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    62b6:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    62ba:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    62be:	4291      	cmp	r1, r2
    62c0:	d215      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62c2:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    62c6:	b129      	cbz	r1, 62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    62c8:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    62cc:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    62d0:	4291      	cmp	r1, r2
    62d2:	d20c      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62d4:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    62d8:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    62dc:	428a      	cmp	r2, r1
    62de:	d206      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62e0:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    62e4:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    62e8:	b11a      	cbz	r2, 62f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    62ea:	4288      	cmp	r0, r1
    62ec:	d303      	bcc.n	62f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    62ee:	2001      	movs	r0, #1
    62f0:	4770      	bx	lr
    62f2:	2806      	cmp	r0, #6
    62f4:	d2fb      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62f6:	2000      	movs	r0, #0
    62f8:	4770      	bx	lr
    62fa:	0000      	.short	0x0000
    62fc:	200000f0 	.word	0x200000f0
    6300:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6302:	4c63      	ldr	r4, [pc, #396]	; (6490 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6304:	6860      	ldr	r0, [r4, #4]
    6306:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    630a:	f88d 1000 	strb.w	r1, [sp]
    630e:	9900      	ldr	r1, [sp, #0]
    6310:	9100      	str	r1, [sp, #0]
    6312:	f89d 1000 	ldrb.w	r1, [sp]
    6316:	2500      	movs	r5, #0
    6318:	b129      	cbz	r1, 6326 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    631a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    631e:	f007 ff02 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6322:	2800      	cmp	r0, #0
    6324:	d07d      	beq.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6326:	6860      	ldr	r0, [r4, #4]
    6328:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    632c:	b181      	cbz	r1, 6350 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    632e:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6332:	b149      	cbz	r1, 6348 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6334:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    6338:	b108      	cbz	r0, 633e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    633a:	200a      	movs	r0, #10
    633c:	e071      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    633e:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6342:	2036      	movs	r0, #54	; 0x36
    6344:	f7fa fb8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6348:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    634c:	f000 b8a2 	b.w	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6350:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6354:	b109      	cbz	r1, 635a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    6356:	2008      	movs	r0, #8
    6358:	e063      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    635a:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    635e:	b179      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    6360:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    6364:	0780      	lsls	r0, r0, #30
    6366:	d10a      	bne.n	637e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    6368:	200c      	movs	r0, #12
    636a:	f000 f981 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    636e:	6860      	ldr	r0, [r4, #4]
    6370:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    6374:	f041 0101 	orr.w	r1, r1, #1
    6378:	7001      	strb	r1, [r0, #0]
    637a:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    637e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6380:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6384:	f88d 1004 	strb.w	r1, [sp, #4]
    6388:	9901      	ldr	r1, [sp, #4]
    638a:	9101      	str	r1, [sp, #4]
    638c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6390:	b141      	cbz	r1, 63a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    6392:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6396:	f88d 1000 	strb.w	r1, [sp]
    639a:	9900      	ldr	r1, [sp, #0]
    639c:	9100      	str	r1, [sp, #0]
    639e:	f89d 1000 	ldrb.w	r1, [sp]
    63a2:	b121      	cbz	r1, 63ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    63a4:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    63a8:	2901      	cmp	r1, #1
    63aa:	d021      	beq.n	63f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    63ac:	e02e      	b.n	640c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    63ae:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    63b2:	2925      	cmp	r1, #37	; 0x25
    63b4:	d01a      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63b6:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ba:	2925      	cmp	r1, #37	; 0x25
    63bc:	d016      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63be:	2926      	cmp	r1, #38	; 0x26
    63c0:	d014      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63c2:	2300      	movs	r3, #0
    63c4:	f200 2262 	addw	r2, r0, #610	; 0x262
    63c8:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    63cc:	f008 f992 	bl	e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    63d0:	6860      	ldr	r0, [r4, #4]
    63d2:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    63d6:	6861      	ldr	r1, [r4, #4]
    63d8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    63dc:	8bc2      	ldrh	r2, [r0, #30]
    63de:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    63e2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    63e4:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    63e8:	2014      	movs	r0, #20
    63ea:	e01a      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    63ec:	2301      	movs	r3, #1
    63ee:	e7e9      	b.n	63c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    63f0:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    63f4:	f88d 1000 	strb.w	r1, [sp]
    63f8:	9900      	ldr	r1, [sp, #0]
    63fa:	9100      	str	r1, [sp, #0]
    63fc:	f89d 1000 	ldrb.w	r1, [sp]
    6400:	b921      	cbnz	r1, 640c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6402:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6406:	f007 fe8e 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    640a:	b170      	cbz	r0, 642a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    640c:	6860      	ldr	r0, [r4, #4]
    640e:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6412:	f88d 1000 	strb.w	r1, [sp]
    6416:	9900      	ldr	r1, [sp, #0]
    6418:	9100      	str	r1, [sp, #0]
    641a:	f89d 1000 	ldrb.w	r1, [sp]
    641e:	b329      	cbz	r1, 646c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6420:	2023      	movs	r0, #35	; 0x23
    6422:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6426:	f000 b923 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    642a:	6860      	ldr	r0, [r4, #4]
    642c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6430:	f008 ffbb 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6434:	4605      	mov	r5, r0
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    643c:	f008 ffb5 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6440:	4606      	mov	r6, r0
    6442:	6860      	ldr	r0, [r4, #4]
    6444:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    6448:	4628      	mov	r0, r5
    644a:	f008 ffb9 	bl	f3c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    644e:	b158      	cbz	r0, 6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6450:	6860      	ldr	r0, [r4, #4]
    6452:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    6456:	4630      	mov	r0, r6
    6458:	f008 ffb2 	bl	f3c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    645c:	b120      	cbz	r0, 6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    645e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6462:	2000      	movs	r0, #0
    6464:	f000 b8de 	b.w	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6468:	2016      	movs	r0, #22
    646a:	e7da      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    646c:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    6470:	f88d 0000 	strb.w	r0, [sp]
    6474:	9800      	ldr	r0, [sp, #0]
    6476:	9000      	str	r0, [sp, #0]
    6478:	f89d 0000 	ldrb.w	r0, [sp]
    647c:	2800      	cmp	r0, #0
    647e:	f43f af7e 	beq.w	637e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    6482:	2025      	movs	r0, #37	; 0x25
    6484:	f000 f8f4 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6488:	6860      	ldr	r0, [r4, #4]
    648a:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    648e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6490:	200000f0 	.word	0x200000f0
    6494:	b510      	push	{r4, lr}
    6496:	4c1e      	ldr	r4, [pc, #120]	; (6510 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    6498:	6862      	ldr	r2, [r4, #4]
    649a:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    649e:	2808      	cmp	r0, #8
    64a0:	d20d      	bcs.n	64be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    64a2:	f1c0 0108 	rsb	r1, r0, #8
    64a6:	f200 2093 	addw	r0, r0, #659	; 0x293
    64aa:	b2c9      	uxtb	r1, r1
    64ac:	4410      	add	r0, r2
    64ae:	f7fa fb6b 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    64b2:	6861      	ldr	r1, [r4, #4]
    64b4:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    64b8:	4410      	add	r0, r2
    64ba:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    64be:	6862      	ldr	r2, [r4, #4]
    64c0:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    64c4:	3808      	subs	r0, #8
    64c6:	2804      	cmp	r0, #4
    64c8:	d20d      	bcs.n	64e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    64ca:	f1c0 0104 	rsb	r1, r0, #4
    64ce:	f500 7090 	add.w	r0, r0, #288	; 0x120
    64d2:	b2c9      	uxtb	r1, r1
    64d4:	4410      	add	r0, r2
    64d6:	f7fa fb57 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    64da:	6861      	ldr	r1, [r4, #4]
    64dc:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    64e0:	4410      	add	r0, r2
    64e2:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    64e6:	6860      	ldr	r0, [r4, #4]
    64e8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    64ec:	290c      	cmp	r1, #12
    64ee:	d30e      	bcc.n	650e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    64f0:	d005      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    64f2:	f640 31c5 	movw	r1, #3013	; 0xbc5
    64f6:	f04f 0036 	mov.w	r0, #54	; 0x36
    64fa:	f7fa fab3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64fe:	2100      	movs	r1, #0
    6500:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6508:	2003      	movs	r0, #3
    650a:	f000 b8b1 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    650e:	bd10      	pop	{r4, pc}
    6510:	200000f0 	.word	0x200000f0
    6514:	b570      	push	{r4, r5, r6, lr}
    6516:	4b20      	ldr	r3, [pc, #128]	; (6598 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    6518:	4602      	mov	r2, r0
    651a:	460c      	mov	r4, r1
    651c:	8858      	ldrh	r0, [r3, #2]
    651e:	4310      	orrs	r0, r2
    6520:	8058      	strh	r0, [r3, #2]
    6522:	f103 000c 	add.w	r0, r3, #12
    6526:	0791      	lsls	r1, r2, #30
    6528:	6840      	ldr	r0, [r0, #4]
    652a:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    652e:	d507      	bpl.n	6540 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6530:	b121      	cbz	r1, 653c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6532:	f640 41cc 	movw	r1, #3276	; 0xccc
    6536:	2036      	movs	r0, #54	; 0x36
    6538:	f7fa fa94 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    653c:	605c      	str	r4, [r3, #4]
    653e:	e003      	b.n	6548 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6540:	b101      	cbz	r1, 6544 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6542:	609c      	str	r4, [r3, #8]
    6544:	0791      	lsls	r1, r2, #30
    6546:	d515      	bpl.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6548:	78e1      	ldrb	r1, [r4, #3]
    654a:	2906      	cmp	r1, #6
    654c:	d002      	beq.n	6554 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    654e:	290b      	cmp	r1, #11
    6550:	d110      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6552:	e008      	b.n	6566 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6554:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6558:	2919      	cmp	r1, #25
    655a:	d10b      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    655c:	2100      	movs	r1, #0
    655e:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    6562:	2101      	movs	r1, #1
    6564:	e004      	b.n	6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    6566:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    656a:	2913      	cmp	r1, #19
    656c:	d102      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    656e:	2100      	movs	r1, #0
    6570:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    6574:	0691      	lsls	r1, r2, #26
    6576:	d501      	bpl.n	657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    6578:	2108      	movs	r1, #8
    657a:	7059      	strb	r1, [r3, #1]
    657c:	0611      	lsls	r1, r2, #24
    657e:	d50a      	bpl.n	6596 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    6580:	8b02      	ldrh	r2, [r0, #24]
    6582:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    6586:	4620      	mov	r0, r4
    6588:	f7ff f9dc 	bl	5944 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    658c:	4620      	mov	r0, r4
    658e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6592:	f7ff b9f5 	b.w	5980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    6596:	bd70      	pop	{r4, r5, r6, pc}
    6598:	200000e4 	.word	0x200000e4
    659c:	b570      	push	{r4, r5, r6, lr}
    659e:	4c20      	ldr	r4, [pc, #128]	; (6620 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    65a0:	2501      	movs	r5, #1
    65a2:	6862      	ldr	r2, [r4, #4]
    65a4:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    65a8:	b909      	cbnz	r1, 65ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    65aa:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    65ae:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    65b2:	b908      	cbnz	r0, 65b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    65b4:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    65b8:	f102 0362 	add.w	r3, r2, #98	; 0x62
    65bc:	7219      	strb	r1, [r3, #8]
    65be:	7258      	strb	r0, [r3, #9]
    65c0:	20ff      	movs	r0, #255	; 0xff
    65c2:	7298      	strb	r0, [r3, #10]
    65c4:	4610      	mov	r0, r2
    65c6:	f009 f9dd 	bl	f984 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    65ca:	2000      	movs	r0, #0
    65cc:	f000 f82a 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    65d0:	6860      	ldr	r0, [r4, #4]
    65d2:	302c      	adds	r0, #44	; 0x2c
    65d4:	f008 f8fd 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    65d8:	4606      	mov	r6, r0
    65da:	6860      	ldr	r0, [r4, #4]
    65dc:	f008 f8a5 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    65e0:	b130      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    65e2:	6861      	ldr	r1, [r4, #4]
    65e4:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    65e8:	f831 0b2c 	ldrh.w	r0, [r1], #44
    65ec:	f7fc fc20 	bl	2e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    65f0:	2104      	movs	r1, #4
    65f2:	6860      	ldr	r0, [r4, #4]
    65f4:	f008 fd77 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    65f8:	6860      	ldr	r0, [r4, #4]
    65fa:	302c      	adds	r0, #44	; 0x2c
    65fc:	f008 f8e9 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6600:	4604      	mov	r4, r0
    6602:	42a6      	cmp	r6, r4
    6604:	d20a      	bcs.n	661c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    6606:	f003 ff6f 	bl	a4e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    660a:	4601      	mov	r1, r0
    660c:	1ba0      	subs	r0, r4, r6
    660e:	2865      	cmp	r0, #101	; 0x65
    6610:	d200      	bcs.n	6614 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6612:	2065      	movs	r0, #101	; 0x65
    6614:	f003 fe3e 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6618:	b100      	cbz	r0, 661c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    661a:	2500      	movs	r5, #0
    661c:	4628      	mov	r0, r5
    661e:	bd70      	pop	{r4, r5, r6, pc}
    6620:	200000f0 	.word	0x200000f0
    6624:	b510      	push	{r4, lr}
    6626:	4c10      	ldr	r4, [pc, #64]	; (6668 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    6628:	6861      	ldr	r1, [r4, #4]
    662a:	880a      	ldrh	r2, [r1, #0]
    662c:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6630:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6634:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    6638:	f008 feb7 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    663c:	6861      	ldr	r1, [r4, #4]
    663e:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6642:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    6646:	f008 feb0 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    664a:	6863      	ldr	r3, [r4, #4]
    664c:	2215      	movs	r2, #21
    664e:	4907      	ldr	r1, [pc, #28]	; (666c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6650:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6654:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    6658:	f008 f836 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    665c:	6861      	ldr	r1, [r4, #4]
    665e:	2000      	movs	r0, #0
    6660:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    6664:	bd10      	pop	{r4, pc}
    6666:	0000      	.short	0x0000
    6668:	200000f0 	.word	0x200000f0
    666c:	000107fd 	.word	0x000107fd
    6670:	4902      	ldr	r1, [pc, #8]	; (667c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    6672:	6849      	ldr	r1, [r1, #4]
    6674:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    6678:	f000 bb10 	b.w	6c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    667c:	200000f0 	.word	0x200000f0
    6680:	4903      	ldr	r1, [pc, #12]	; (6690 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    6682:	6849      	ldr	r1, [r1, #4]
    6684:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    6688:	2011      	movs	r0, #17
    668a:	f7ff bff1 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    668e:	0000      	.short	0x0000
    6690:	200000f0 	.word	0x200000f0
    6694:	b538      	push	{r3, r4, r5, lr}
    6696:	4c11      	ldr	r4, [pc, #68]	; (66dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    6698:	6862      	ldr	r2, [r4, #4]
    669a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    669e:	f8ad 2000 	strh.w	r2, [sp]
    66a2:	f007 fdb9 	bl	e218 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    66a6:	f89d 3000 	ldrb.w	r3, [sp]
    66aa:	b2c2      	uxtb	r2, r0
    66ac:	2100      	movs	r1, #0
    66ae:	4293      	cmp	r3, r2
    66b0:	d003      	beq.n	66ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    66b2:	6863      	ldr	r3, [r4, #4]
    66b4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    66b8:	e002      	b.n	66c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    66ba:	6862      	ldr	r2, [r4, #4]
    66bc:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    66c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
    66c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    66c8:	4282      	cmp	r2, r0
    66ca:	d003      	beq.n	66d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    66cc:	6861      	ldr	r1, [r4, #4]
    66ce:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    66d2:	bd38      	pop	{r3, r4, r5, pc}
    66d4:	6860      	ldr	r0, [r4, #4]
    66d6:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    66da:	bd38      	pop	{r3, r4, r5, pc}
    66dc:	200000f0 	.word	0x200000f0
    66e0:	4a03      	ldr	r2, [pc, #12]	; (66f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    66e2:	6852      	ldr	r2, [r2, #4]
    66e4:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    66e8:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    66ec:	4770      	bx	lr
    66ee:	0000      	.short	0x0000
    66f0:	200000f0 	.word	0x200000f0
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	6841      	ldr	r1, [r0, #4]
    66f8:	4604      	mov	r4, r0
    66fa:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    66fe:	2814      	cmp	r0, #20
    6700:	d001      	beq.n	6706 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6702:	2002      	movs	r0, #2
    6704:	bd70      	pop	{r4, r5, r6, pc}
    6706:	4d09      	ldr	r5, [pc, #36]	; (672c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    6708:	f201 219b 	addw	r1, r1, #667	; 0x29b
    670c:	68a8      	ldr	r0, [r5, #8]
    670e:	f007 ff4d 	bl	e5ac <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6712:	6861      	ldr	r1, [r4, #4]
    6714:	68a8      	ldr	r0, [r5, #8]
    6716:	f501 7192 	add.w	r1, r1, #292	; 0x124
    671a:	f007 ff44 	bl	e5a6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    671e:	6861      	ldr	r1, [r4, #4]
    6720:	2017      	movs	r0, #23
    6722:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6726:	2000      	movs	r0, #0
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	0000      	.short	0x0000
    672c:	200000e4 	.word	0x200000e4
    6730:	4901      	ldr	r1, [pc, #4]	; (6738 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6732:	6889      	ldr	r1, [r1, #8]
    6734:	f7fc bc78 	b.w	3028 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6738:	200000e4 	.word	0x200000e4
    673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6740:	4e1b      	ldr	r6, [pc, #108]	; (67b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6742:	2500      	movs	r5, #0
    6744:	f106 010c 	add.w	r1, r6, #12
    6748:	2703      	movs	r7, #3
    674a:	f8d1 c004 	ldr.w	ip, [r1, #4]
    674e:	2401      	movs	r4, #1
    6750:	b1a0      	cbz	r0, 677c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6752:	68b0      	ldr	r0, [r6, #8]
    6754:	78c0      	ldrb	r0, [r0, #3]
    6756:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    675a:	fa04 f000 	lsl.w	r0, r4, r0
    675e:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    6762:	b130      	cbz	r0, 6772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    6764:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    6768:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    676c:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    6770:	e019      	b.n	67a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    6772:	f240 6195 	movw	r1, #1685	; 0x695
    6776:	2036      	movs	r0, #54	; 0x36
    6778:	f7fa f974 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    677c:	4688      	mov	r8, r1
    677e:	2300      	movs	r3, #0
    6780:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    6784:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    6788:	4619      	mov	r1, r3
    678a:	f007 fc69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    678e:	b168      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    6790:	68b0      	ldr	r0, [r6, #8]
    6792:	78c1      	ldrb	r1, [r0, #3]
    6794:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6798:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    679c:	f800 7fa6 	strb.w	r7, [r0, #166]!
    67a0:	8785      	strh	r5, [r0, #60]	; 0x3c
    67a2:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    67a6:	2000      	movs	r0, #0
    67a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ac:	2001      	movs	r0, #1
    67ae:	e7fb      	b.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    67b0:	200000e4 	.word	0x200000e4
    67b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67b8:	4604      	mov	r4, r0
    67ba:	6840      	ldr	r0, [r0, #4]
    67bc:	2300      	movs	r3, #0
    67be:	4619      	mov	r1, r3
    67c0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    67c4:	3088      	adds	r0, #136	; 0x88
    67c6:	f007 fc4b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67ca:	b310      	cbz	r0, 6812 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    67cc:	4d2e      	ldr	r5, [pc, #184]	; (6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    67ce:	68a8      	ldr	r0, [r5, #8]
    67d0:	f007 fefd 	bl	e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    67d4:	b300      	cbz	r0, 6818 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    67d6:	68a8      	ldr	r0, [r5, #8]
    67d8:	f007 fef3 	bl	e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67dc:	4607      	mov	r7, r0
    67de:	68a8      	ldr	r0, [r5, #8]
    67e0:	f007 fef3 	bl	e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67e4:	4680      	mov	r8, r0
    67e6:	68a8      	ldr	r0, [r5, #8]
    67e8:	f007 fee9 	bl	e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67ec:	4606      	mov	r6, r0
    67ee:	68a8      	ldr	r0, [r5, #8]
    67f0:	f007 fee9 	bl	e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67f4:	4601      	mov	r1, r0
    67f6:	9700      	str	r7, [sp, #0]
    67f8:	6860      	ldr	r0, [r4, #4]
    67fa:	4643      	mov	r3, r8
    67fc:	4632      	mov	r2, r6
    67fe:	302c      	adds	r0, #44	; 0x2c
    6800:	f008 f821 	bl	e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6804:	6860      	ldr	r0, [r4, #4]
    6806:	2501      	movs	r5, #1
    6808:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    680c:	291d      	cmp	r1, #29
    680e:	d008      	beq.n	6822 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6810:	e009      	b.n	6826 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6812:	2001      	movs	r0, #1
    6814:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6818:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    681c:	2000      	movs	r0, #0
    681e:	f7ff bf8d 	b.w	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6822:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    6826:	6860      	ldr	r0, [r4, #4]
    6828:	2600      	movs	r6, #0
    682a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    682e:	2901      	cmp	r1, #1
    6830:	d011      	beq.n	6856 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6832:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6836:	f88d 1004 	strb.w	r1, [sp, #4]
    683a:	9901      	ldr	r1, [sp, #4]
    683c:	9101      	str	r1, [sp, #4]
    683e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6842:	b941      	cbnz	r1, 6856 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6844:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6848:	f88d 1000 	strb.w	r1, [sp]
    684c:	9900      	ldr	r1, [sp, #0]
    684e:	9100      	str	r1, [sp, #0]
    6850:	f89d 1000 	ldrb.w	r1, [sp]
    6854:	b151      	cbz	r1, 686c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    6856:	211f      	movs	r1, #31
    6858:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    685c:	6860      	ldr	r0, [r4, #4]
    685e:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6862:	6860      	ldr	r0, [r4, #4]
    6864:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6868:	2000      	movs	r0, #0
    686a:	e7d3      	b.n	6814 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    686c:	211e      	movs	r1, #30
    686e:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    6872:	4805      	ldr	r0, [pc, #20]	; (6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6874:	300c      	adds	r0, #12
    6876:	6843      	ldr	r3, [r0, #4]
    6878:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    687c:	8818      	ldrh	r0, [r3, #0]
    687e:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    6882:	f7fc faff 	bl	2e84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    6886:	e7e9      	b.n	685c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    6888:	200000e4 	.word	0x200000e4
    688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6890:	4604      	mov	r4, r0
    6892:	6840      	ldr	r0, [r0, #4]
    6894:	2300      	movs	r3, #0
    6896:	210a      	movs	r1, #10
    6898:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    689c:	3088      	adds	r0, #136	; 0x88
    689e:	f007 fbdf 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68a2:	b370      	cbz	r0, 6902 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    68a4:	4d18      	ldr	r5, [pc, #96]	; (6908 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    68a6:	68a8      	ldr	r0, [r5, #8]
    68a8:	f007 fe91 	bl	e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    68ac:	b1e8      	cbz	r0, 68ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    68ae:	68a8      	ldr	r0, [r5, #8]
    68b0:	f007 fe87 	bl	e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    68b4:	4607      	mov	r7, r0
    68b6:	68a8      	ldr	r0, [r5, #8]
    68b8:	f007 fe87 	bl	e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    68bc:	4680      	mov	r8, r0
    68be:	68a8      	ldr	r0, [r5, #8]
    68c0:	f007 fe7d 	bl	e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    68c4:	4606      	mov	r6, r0
    68c6:	68a8      	ldr	r0, [r5, #8]
    68c8:	f007 fe7d 	bl	e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    68cc:	4601      	mov	r1, r0
    68ce:	9700      	str	r7, [sp, #0]
    68d0:	6860      	ldr	r0, [r4, #4]
    68d2:	4643      	mov	r3, r8
    68d4:	4632      	mov	r2, r6
    68d6:	302c      	adds	r0, #44	; 0x2c
    68d8:	f007 ffb5 	bl	e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    68dc:	6860      	ldr	r0, [r4, #4]
    68de:	f007 ff24 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    68e2:	2104      	movs	r1, #4
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f008 fbfe 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    68ea:	6861      	ldr	r1, [r4, #4]
    68ec:	2000      	movs	r0, #0
    68ee:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    68f2:	6861      	ldr	r1, [r4, #4]
    68f4:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    68f8:	f7ff f9fa 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    68fc:	2000      	movs	r0, #0
    68fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6902:	e7ff      	b.n	6904 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6904:	2001      	movs	r0, #1
    6906:	e7fa      	b.n	68fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    6908:	200000e4 	.word	0x200000e4
    690c:	4901      	ldr	r1, [pc, #4]	; (6914 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    690e:	6889      	ldr	r1, [r1, #8]
    6910:	f7fc bb58 	b.w	2fc4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6914:	200000e4 	.word	0x200000e4
    6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691c:	4604      	mov	r4, r0
    691e:	6840      	ldr	r0, [r0, #4]
    6920:	f04f 0800 	mov.w	r8, #0
    6924:	b086      	sub	sp, #24
    6926:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    692a:	4643      	mov	r3, r8
    692c:	4641      	mov	r1, r8
    692e:	3088      	adds	r0, #136	; 0x88
    6930:	f007 fb96 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6934:	b190      	cbz	r0, 695c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    6936:	6860      	ldr	r0, [r4, #4]
    6938:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    693c:	2824      	cmp	r0, #36	; 0x24
    693e:	d011      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6940:	2825      	cmp	r0, #37	; 0x25
    6942:	d00f      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6944:	2826      	cmp	r0, #38	; 0x26
    6946:	d00d      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6948:	4668      	mov	r0, sp
    694a:	f7fa fe1f 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    694e:	b158      	cbz	r0, 6968 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6950:	9800      	ldr	r0, [sp, #0]
    6952:	a903      	add	r1, sp, #12
    6954:	78c0      	ldrb	r0, [r0, #3]
    6956:	f88d 000c 	strb.w	r0, [sp, #12]
    695a:	e006      	b.n	696a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    695c:	2001      	movs	r0, #1
    695e:	b006      	add	sp, #24
    6960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6964:	2020      	movs	r0, #32
    6966:	e7fa      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    6968:	2100      	movs	r1, #0
    696a:	6860      	ldr	r0, [r4, #4]
    696c:	ab02      	add	r3, sp, #8
    696e:	2216      	movs	r2, #22
    6970:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6974:	f007 fc2f 	bl	e1d6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    6978:	2501      	movs	r5, #1
    697a:	2600      	movs	r6, #0
    697c:	b180      	cbz	r0, 69a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    697e:	2116      	movs	r1, #22
    6980:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6984:	f7ff feac 	bl	66e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    6988:	6861      	ldr	r1, [r4, #4]
    698a:	202f      	movs	r0, #47	; 0x2f
    698c:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6990:	6860      	ldr	r0, [r4, #4]
    6992:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6996:	6860      	ldr	r0, [r4, #4]
    6998:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    699c:	2000      	movs	r0, #0
    699e:	e7de      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    69a0:	4f29      	ldr	r7, [pc, #164]	; (6a48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    69a2:	68b8      	ldr	r0, [r7, #8]
    69a4:	f007 fe25 	bl	e5f2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    69a8:	b1b8      	cbz	r0, 69da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    69aa:	68b8      	ldr	r0, [r7, #8]
    69ac:	6862      	ldr	r2, [r4, #4]
    69ae:	7901      	ldrb	r1, [r0, #4]
    69b0:	f001 0107 	and.w	r1, r1, #7
    69b4:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    69b8:	7940      	ldrb	r0, [r0, #5]
    69ba:	f000 0107 	and.w	r1, r0, #7
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    69c4:	6860      	ldr	r0, [r4, #4]
    69c6:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    69ca:	f88d 200c 	strb.w	r2, [sp, #12]
    69ce:	9a03      	ldr	r2, [sp, #12]
    69d0:	9203      	str	r2, [sp, #12]
    69d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    69d6:	bb5a      	cbnz	r2, 6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    69d8:	e004      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    69da:	2000      	movs	r0, #0
    69dc:	f7ff feae 	bl	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    69e0:	4680      	mov	r8, r0
    69e2:	e02f      	b.n	6a44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    69e4:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    69e8:	2a01      	cmp	r2, #1
    69ea:	d021      	beq.n	6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    69ec:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    69f0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    69f4:	7857      	ldrb	r7, [r2, #1]
    69f6:	429f      	cmp	r7, r3
    69f8:	d106      	bne.n	6a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    69fa:	7812      	ldrb	r2, [r2, #0]
    69fc:	428a      	cmp	r2, r1
    69fe:	d103      	bne.n	6a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6a00:	2102      	movs	r1, #2
    6a02:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    6a06:	e013      	b.n	6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6a08:	480f      	ldr	r0, [pc, #60]	; (6a48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    6a0a:	300c      	adds	r0, #12
    6a0c:	6841      	ldr	r1, [r0, #4]
    6a0e:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6a12:	880a      	ldrh	r2, [r1, #0]
    6a14:	f820 2b02 	strh.w	r2, [r0], #2
    6a18:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6a1c:	f800 2b01 	strb.w	r2, [r0], #1
    6a20:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6a24:	f800 190d 	strb.w	r1, [r0], #-13
    6a28:	2222      	movs	r2, #34	; 0x22
    6a2a:	4908      	ldr	r1, [pc, #32]	; (6a4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6a2c:	f007 fe38 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2022      	movs	r0, #34	; 0x22
    6a34:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6a38:	6860      	ldr	r0, [r4, #4]
    6a3a:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6a3e:	6860      	ldr	r0, [r4, #4]
    6a40:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6a44:	4640      	mov	r0, r8
    6a46:	e78a      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    6a48:	200000e4 	.word	0x200000e4
    6a4c:	00010827 	.word	0x00010827
    6a50:	b570      	push	{r4, r5, r6, lr}
    6a52:	4604      	mov	r4, r0
    6a54:	6840      	ldr	r0, [r0, #4]
    6a56:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6a5a:	2820      	cmp	r0, #32
    6a5c:	d001      	beq.n	6a62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    6a5e:	2001      	movs	r0, #1
    6a60:	bd70      	pop	{r4, r5, r6, pc}
    6a62:	4e16      	ldr	r6, [pc, #88]	; (6abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    6a64:	68b0      	ldr	r0, [r6, #8]
    6a66:	f007 fdd6 	bl	e616 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    6a6a:	b1f0      	cbz	r0, 6aaa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    6a6c:	68b0      	ldr	r0, [r6, #8]
    6a6e:	6862      	ldr	r2, [r4, #4]
    6a70:	7901      	ldrb	r1, [r0, #4]
    6a72:	7940      	ldrb	r0, [r0, #5]
    6a74:	f001 0107 	and.w	r1, r1, #7
    6a78:	f361 0507 	bfi	r5, r1, #0, #8
    6a7c:	4629      	mov	r1, r5
    6a7e:	f000 0007 	and.w	r0, r0, #7
    6a82:	f360 210f 	bfi	r1, r0, #8, #8
    6a86:	2001      	movs	r0, #1
    6a88:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    6a8c:	6862      	ldr	r2, [r4, #4]
    6a8e:	2000      	movs	r0, #0
    6a90:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    6a94:	6862      	ldr	r2, [r4, #4]
    6a96:	2024      	movs	r0, #36	; 0x24
    6a98:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    6a9c:	6860      	ldr	r0, [r4, #4]
    6a9e:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    6aa2:	f7ff fdf7 	bl	6694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    6aa6:	2000      	movs	r0, #0
    6aa8:	bd70      	pop	{r4, r5, r6, pc}
    6aaa:	2001      	movs	r0, #1
    6aac:	f7ff fe46 	bl	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6ab0:	4604      	mov	r4, r0
    6ab2:	201e      	movs	r0, #30
    6ab4:	f7ff fdb6 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6ab8:	4620      	mov	r0, r4
    6aba:	bd70      	pop	{r4, r5, r6, pc}
    6abc:	200000e4 	.word	0x200000e4
    6ac0:	b570      	push	{r4, r5, r6, lr}
    6ac2:	4604      	mov	r4, r0
    6ac4:	6840      	ldr	r0, [r0, #4]
    6ac6:	4d0a      	ldr	r5, [pc, #40]	; (6af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    6ac8:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6acc:	f041 0104 	orr.w	r1, r1, #4
    6ad0:	7001      	strb	r1, [r0, #0]
    6ad2:	68a8      	ldr	r0, [r5, #8]
    6ad4:	f007 fda9 	bl	e62a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6ad8:	4606      	mov	r6, r0
    6ada:	68a8      	ldr	r0, [r5, #8]
    6adc:	f007 fda9 	bl	e632 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6ae0:	4601      	mov	r1, r0
    6ae2:	4622      	mov	r2, r4
    6ae4:	4630      	mov	r0, r6
    6ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6aea:	f000 b8b3 	b.w	6c54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6aee:	0000      	.short	0x0000
    6af0:	200000e4 	.word	0x200000e4
    6af4:	4a11      	ldr	r2, [pc, #68]	; (6b3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6af6:	4911      	ldr	r1, [pc, #68]	; (6b3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6af8:	320c      	adds	r2, #12
    6afa:	6852      	ldr	r2, [r2, #4]
    6afc:	6889      	ldr	r1, [r1, #8]
    6afe:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6b02:	7909      	ldrb	r1, [r1, #4]
    6b04:	f1a3 0210 	sub.w	r2, r3, #16
    6b08:	2a0c      	cmp	r2, #12
    6b0a:	d801      	bhi.n	6b10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6b0c:	2303      	movs	r3, #3
    6b0e:	e008      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b10:	2b28      	cmp	r3, #40	; 0x28
    6b12:	d00a      	beq.n	6b2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6b14:	2b1d      	cmp	r3, #29
    6b16:	d00a      	beq.n	6b2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    6b18:	2b05      	cmp	r3, #5
    6b1a:	d00a      	beq.n	6b32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6b1c:	2b20      	cmp	r3, #32
    6b1e:	d00a      	beq.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6b20:	23fe      	movs	r3, #254	; 0xfe
    6b22:	4602      	mov	r2, r0
    6b24:	4618      	mov	r0, r3
    6b26:	f000 b895 	b.w	6c54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6b2a:	2323      	movs	r3, #35	; 0x23
    6b2c:	e7f9      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b2e:	2314      	movs	r3, #20
    6b30:	e7f7      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b32:	2312      	movs	r3, #18
    6b34:	e7f5      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b36:	2316      	movs	r3, #22
    6b38:	e7f3      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b3a:	0000      	.short	0x0000
    6b3c:	200000e4 	.word	0x200000e4
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	4604      	mov	r4, r0
    6b44:	6840      	ldr	r0, [r0, #4]
    6b46:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6b4a:	291b      	cmp	r1, #27
    6b4c:	d001      	beq.n	6b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6b4e:	2002      	movs	r0, #2
    6b50:	bd70      	pop	{r4, r5, r6, pc}
    6b52:	2500      	movs	r5, #0
    6b54:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    6b58:	6860      	ldr	r0, [r4, #4]
    6b5a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    6b5e:	6860      	ldr	r0, [r4, #4]
    6b60:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    6b64:	6860      	ldr	r0, [r4, #4]
    6b66:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    6b6a:	b161      	cbz	r1, 6b86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    6b6c:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    6b70:	6860      	ldr	r0, [r4, #4]
    6b72:	220d      	movs	r2, #13
    6b74:	8801      	ldrh	r1, [r0, #0]
    6b76:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b7a:	6860      	ldr	r0, [r4, #4]
    6b7c:	490d      	ldr	r1, [pc, #52]	; (6bb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    6b7e:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b82:	6860      	ldr	r0, [r4, #4]
    6b84:	e00c      	b.n	6ba0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    6b86:	8801      	ldrh	r1, [r0, #0]
    6b88:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b8c:	6860      	ldr	r0, [r4, #4]
    6b8e:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b92:	6861      	ldr	r1, [r4, #4]
    6b94:	2001      	movs	r0, #1
    6b96:	220c      	movs	r2, #12
    6b98:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    6b9c:	4906      	ldr	r1, [pc, #24]	; (6bb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    6b9e:	6860      	ldr	r0, [r4, #4]
    6ba0:	f200 2012 	addw	r0, r0, #530	; 0x212
    6ba4:	f007 fd7c 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6ba8:	6860      	ldr	r0, [r4, #4]
    6baa:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    6bae:	2000      	movs	r0, #0
    6bb0:	bd70      	pop	{r4, r5, r6, pc}
    6bb2:	0000      	.short	0x0000
    6bb4:	0000eb41 	.word	0x0000eb41
    6bb8:	0000eb23 	.word	0x0000eb23
    6bbc:	b510      	push	{r4, lr}
    6bbe:	4604      	mov	r4, r0
    6bc0:	6840      	ldr	r0, [r0, #4]
    6bc2:	2300      	movs	r3, #0
    6bc4:	2101      	movs	r1, #1
    6bc6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6bca:	3088      	adds	r0, #136	; 0x88
    6bcc:	f007 fa48 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6bd0:	b108      	cbz	r0, 6bd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6bd2:	2000      	movs	r0, #0
    6bd4:	bd10      	pop	{r4, pc}
    6bd6:	4809      	ldr	r0, [pc, #36]	; (6bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6bd8:	6880      	ldr	r0, [r0, #8]
    6bda:	f007 fd46 	bl	e66a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6bde:	6861      	ldr	r1, [r4, #4]
    6be0:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6be4:	6861      	ldr	r1, [r4, #4]
    6be6:	2006      	movs	r0, #6
    6be8:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6bec:	6861      	ldr	r1, [r4, #4]
    6bee:	2000      	movs	r0, #0
    6bf0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6bf4:	6861      	ldr	r1, [r4, #4]
    6bf6:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6bfa:	e7ea      	b.n	6bd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6bfc:	200000e4 	.word	0x200000e4
    6c00:	4602      	mov	r2, r0
    6c02:	480f      	ldr	r0, [pc, #60]	; (6c40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6c04:	b510      	push	{r4, lr}
    6c06:	6880      	ldr	r0, [r0, #8]
    6c08:	6851      	ldr	r1, [r2, #4]
    6c0a:	2400      	movs	r4, #0
    6c0c:	7900      	ldrb	r0, [r0, #4]
    6c0e:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6c12:	2812      	cmp	r0, #18
    6c14:	d006      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c16:	2814      	cmp	r0, #20
    6c18:	d004      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c1a:	2816      	cmp	r0, #22
    6c1c:	d002      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c1e:	2823      	cmp	r0, #35	; 0x23
    6c20:	d10c      	bne.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c22:	e004      	b.n	6c2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6c24:	2101      	movs	r1, #1
    6c26:	f000 f91d 	bl	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6c2a:	4604      	mov	r4, r0
    6c2c:	e006      	b.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c2e:	2928      	cmp	r1, #40	; 0x28
    6c30:	d104      	bne.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c32:	4804      	ldr	r0, [pc, #16]	; (6c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6c34:	6801      	ldr	r1, [r0, #0]
    6c36:	b109      	cbz	r1, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c38:	4610      	mov	r0, r2
    6c3a:	4788      	blx	r1
    6c3c:	4620      	mov	r0, r4
    6c3e:	bd10      	pop	{r4, pc}
    6c40:	200000e4 	.word	0x200000e4
    6c44:	20000254 	.word	0x20000254
    6c48:	4901      	ldr	r1, [pc, #4]	; (6c50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6c4a:	6889      	ldr	r1, [r1, #8]
    6c4c:	f7fc ba46 	b.w	30dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c50:	200000e4 	.word	0x200000e4
    6c54:	4603      	mov	r3, r0
    6c56:	2000      	movs	r0, #0
    6c58:	2b23      	cmp	r3, #35	; 0x23
    6c5a:	d017      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c5c:	dc0b      	bgt.n	6c76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6c5e:	2b03      	cmp	r3, #3
    6c60:	d011      	beq.n	6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6c62:	2b12      	cmp	r3, #18
    6c64:	d003      	beq.n	6c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6c66:	2b14      	cmp	r3, #20
    6c68:	d001      	beq.n	6c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6c6a:	2b16      	cmp	r3, #22
    6c6c:	d10a      	bne.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c6e:	2100      	movs	r1, #0
    6c70:	4618      	mov	r0, r3
    6c72:	f000 b8f7 	b.w	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6c76:	2b24      	cmp	r3, #36	; 0x24
    6c78:	d008      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c7a:	2b25      	cmp	r3, #37	; 0x25
    6c7c:	d006      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c7e:	2bfe      	cmp	r3, #254	; 0xfe
    6c80:	d100      	bne.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c82:	2002      	movs	r0, #2
    6c84:	4770      	bx	lr
    6c86:	4608      	mov	r0, r1
    6c88:	f7ff b846 	b.w	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6c8c:	4a02      	ldr	r2, [pc, #8]	; (6c98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6c8e:	6812      	ldr	r2, [r2, #0]
    6c90:	2a00      	cmp	r2, #0
    6c92:	d0f7      	beq.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c94:	4618      	mov	r0, r3
    6c96:	4710      	bx	r2
    6c98:	20000250 	.word	0x20000250
    6c9c:	280c      	cmp	r0, #12
    6c9e:	d01a      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca0:	2813      	cmp	r0, #19
    6ca2:	d018      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca4:	2818      	cmp	r0, #24
    6ca6:	d016      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca8:	4910      	ldr	r1, [pc, #64]	; (6cec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6caa:	2200      	movs	r2, #0
    6cac:	2811      	cmp	r0, #17
    6cae:	6849      	ldr	r1, [r1, #4]
    6cb0:	d012      	beq.n	6cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6cb2:	2807      	cmp	r0, #7
    6cb4:	d00f      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cb6:	2809      	cmp	r0, #9
    6cb8:	d00d      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cba:	2815      	cmp	r0, #21
    6cbc:	d012      	beq.n	6ce4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6cbe:	2824      	cmp	r0, #36	; 0x24
    6cc0:	d009      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cc2:	2801      	cmp	r0, #1
    6cc4:	d007      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d005      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cca:	2802      	cmp	r0, #2
    6ccc:	d003      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cce:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6cd2:	2001      	movs	r0, #1
    6cd4:	7108      	strb	r0, [r1, #4]
    6cd6:	4770      	bx	lr
    6cd8:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6cdc:	b110      	cbz	r0, 6ce4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6cde:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6ce2:	4770      	bx	lr
    6ce4:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6ce8:	4770      	bx	lr
    6cea:	0000      	.short	0x0000
    6cec:	200000f0 	.word	0x200000f0
    6cf0:	4904      	ldr	r1, [pc, #16]	; (6d04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6cf2:	2000      	movs	r0, #0
    6cf4:	6849      	ldr	r1, [r1, #4]
    6cf6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6cfa:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6cfe:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6d02:	4770      	bx	lr
    6d04:	200000f0 	.word	0x200000f0
    6d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d0c:	4d53      	ldr	r5, [pc, #332]	; (6e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6d0e:	4680      	mov	r8, r0
    6d10:	460f      	mov	r7, r1
    6d12:	6868      	ldr	r0, [r5, #4]
    6d14:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6d18:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6d1c:	f88d 0000 	strb.w	r0, [sp]
    6d20:	9800      	ldr	r0, [sp, #0]
    6d22:	9000      	str	r0, [sp, #0]
    6d24:	f89d 0000 	ldrb.w	r0, [sp]
    6d28:	2600      	movs	r6, #0
    6d2a:	b930      	cbnz	r0, 6d3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6d2c:	7fe2      	ldrb	r2, [r4, #31]
    6d2e:	2300      	movs	r3, #0
    6d30:	2101      	movs	r1, #1
    6d32:	4620      	mov	r0, r4
    6d34:	f007 f994 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d38:	b120      	cbz	r0, 6d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6d3a:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6d3e:	1c40      	adds	r0, r0, #1
    6d40:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6d44:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6d48:	b121      	cbz	r1, 6d54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6d4a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6d4e:	1c40      	adds	r0, r0, #1
    6d50:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6d54:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6d58:	b120      	cbz	r0, 6d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6d5a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6d5e:	1c52      	adds	r2, r2, #1
    6d60:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6d64:	f1b8 0f00 	cmp.w	r8, #0
    6d68:	d114      	bne.n	6d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6d6a:	4a3c      	ldr	r2, [pc, #240]	; (6e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6d6c:	3a0c      	subs	r2, #12
    6d6e:	7812      	ldrb	r2, [r2, #0]
    6d70:	2a02      	cmp	r2, #2
    6d72:	d006      	beq.n	6d82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6d74:	2a01      	cmp	r2, #1
    6d76:	d006      	beq.n	6d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6d78:	b1df      	cbz	r7, 6db2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6d7a:	06f8      	lsls	r0, r7, #27
    6d7c:	d508      	bpl.n	6d90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6d7e:	201e      	movs	r0, #30
    6d80:	e043      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d82:	2016      	movs	r0, #22
    6d84:	e041      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d86:	6868      	ldr	r0, [r5, #4]
    6d88:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6d8c:	bba0      	cbnz	r0, 6df8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6d8e:	e05e      	b.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6d90:	0738      	lsls	r0, r7, #28
    6d92:	d501      	bpl.n	6d98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6d94:	203d      	movs	r0, #61	; 0x3d
    6d96:	e038      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d98:	07b8      	lsls	r0, r7, #30
    6d9a:	d001      	beq.n	6da0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6d9c:	202a      	movs	r0, #42	; 0x2a
    6d9e:	e034      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6da0:	06b8      	lsls	r0, r7, #26
    6da2:	d404      	bmi.n	6dae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6da4:	f640 515f 	movw	r1, #3423	; 0xd5f
    6da8:	2036      	movs	r0, #54	; 0x36
    6daa:	f7f9 fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dae:	2023      	movs	r0, #35	; 0x23
    6db0:	e02b      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6db2:	b129      	cbz	r1, 6dc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6db4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6db8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6dbc:	4291      	cmp	r1, r2
    6dbe:	d81a      	bhi.n	6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dc0:	b128      	cbz	r0, 6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6dc2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6dc6:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6dca:	4288      	cmp	r0, r1
    6dcc:	d813      	bhi.n	6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dce:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6dd2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6dd6:	4281      	cmp	r1, r0
    6dd8:	d309      	bcc.n	6dee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6dda:	686a      	ldr	r2, [r5, #4]
    6ddc:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6de0:	f88d 2000 	strb.w	r2, [sp]
    6de4:	9a00      	ldr	r2, [sp, #0]
    6de6:	9200      	str	r2, [sp, #0]
    6de8:	f89d 2000 	ldrb.w	r2, [sp]
    6dec:	b91a      	cbnz	r2, 6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dee:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6df2:	4291      	cmp	r1, r2
    6df4:	d301      	bcc.n	6dfa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6df6:	2022      	movs	r0, #34	; 0x22
    6df8:	e007      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6dfa:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6dfe:	b301      	cbz	r1, 6e42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6e00:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6e04:	4281      	cmp	r1, r0
    6e06:	d322      	bcc.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6e08:	2008      	movs	r0, #8
    6e0a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6e0e:	220b      	movs	r2, #11
    6e10:	4913      	ldr	r1, [pc, #76]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6e12:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6e16:	f007 fc43 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6e1a:	7766      	strb	r6, [r4, #29]
    6e1c:	77a6      	strb	r6, [r4, #30]
    6e1e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6e22:	2102      	movs	r1, #2
    6e24:	6868      	ldr	r0, [r5, #4]
    6e26:	f008 f95e 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6e2a:	6868      	ldr	r0, [r5, #4]
    6e2c:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6e30:	2901      	cmp	r1, #1
    6e32:	d104      	bne.n	6e3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6e34:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6e38:	7801      	ldrb	r1, [r0, #0]
    6e3a:	1e49      	subs	r1, r1, #1
    6e3c:	7001      	strb	r1, [r0, #0]
    6e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e42:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6e46:	2806      	cmp	r0, #6
    6e48:	d301      	bcc.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6e4a:	203e      	movs	r0, #62	; 0x3e
    6e4c:	e7dd      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6e4e:	6868      	ldr	r0, [r5, #4]
    6e50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e54:	2100      	movs	r1, #0
    6e56:	f008 b946 	b.w	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6e5a:	0000      	.short	0x0000
    6e5c:	200000f0 	.word	0x200000f0
    6e60:	0000eaa1 	.word	0x0000eaa1
    6e64:	b570      	push	{r4, r5, r6, lr}
    6e66:	460e      	mov	r6, r1
    6e68:	4601      	mov	r1, r0
    6e6a:	6850      	ldr	r0, [r2, #4]
    6e6c:	4614      	mov	r4, r2
    6e6e:	2500      	movs	r5, #0
    6e70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6e74:	481d      	ldr	r0, [pc, #116]	; (6eec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6e76:	6840      	ldr	r0, [r0, #4]
    6e78:	3088      	adds	r0, #136	; 0x88
    6e7a:	2912      	cmp	r1, #18
    6e7c:	d008      	beq.n	6e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6e7e:	2914      	cmp	r1, #20
    6e80:	d010      	beq.n	6ea4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6e82:	2916      	cmp	r1, #22
    6e84:	d01e      	beq.n	6ec4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6e86:	f240 613e 	movw	r1, #1598	; 0x63e
    6e8a:	2036      	movs	r0, #54	; 0x36
    6e8c:	f7f9 fdea 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e90:	2109      	movs	r1, #9
    6e92:	2300      	movs	r3, #0
    6e94:	f007 f8e4 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e98:	b330      	cbz	r0, 6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6e9a:	4620      	mov	r0, r4
    6e9c:	f008 fac8 	bl	f430 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ea0:	4605      	mov	r5, r0
    6ea2:	e021      	b.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ea4:	210a      	movs	r1, #10
    6ea6:	2300      	movs	r3, #0
    6ea8:	f007 f8da 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6eac:	b1e0      	cbz	r0, 6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6eae:	f7ff ff1f 	bl	6cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6eb2:	b126      	cbz	r6, 6ebe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6eb4:	6860      	ldr	r0, [r4, #4]
    6eb6:	2105      	movs	r1, #5
    6eb8:	30f6      	adds	r0, #246	; 0xf6
    6eba:	f008 fa52 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ebe:	f7fe ff17 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6ec2:	e011      	b.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ec4:	2a20      	cmp	r2, #32
    6ec6:	d10f      	bne.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ec8:	f7ff ff12 	bl	6cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6ecc:	b14e      	cbz	r6, 6ee2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6ece:	6860      	ldr	r0, [r4, #4]
    6ed0:	2108      	movs	r1, #8
    6ed2:	30f6      	adds	r0, #246	; 0xf6
    6ed4:	f008 fa45 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ed8:	6860      	ldr	r0, [r4, #4]
    6eda:	210b      	movs	r1, #11
    6edc:	30f6      	adds	r0, #246	; 0xf6
    6ede:	f008 fa40 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ee2:	201a      	movs	r0, #26
    6ee4:	f7ff fb9e 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6ee8:	4628      	mov	r0, r5
    6eea:	bd70      	pop	{r4, r5, r6, pc}
    6eec:	200000f0 	.word	0x200000f0
    6ef0:	4a19      	ldr	r2, [pc, #100]	; (6f58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6ef2:	2901      	cmp	r1, #1
    6ef4:	6852      	ldr	r2, [r2, #4]
    6ef6:	d010      	beq.n	6f1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6ef8:	2100      	movs	r1, #0
    6efa:	b1c8      	cbz	r0, 6f30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6efc:	2801      	cmp	r0, #1
    6efe:	d022      	beq.n	6f46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6f00:	2803      	cmp	r0, #3
    6f02:	d109      	bne.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f04:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6f08:	2814      	cmp	r0, #20
    6f0a:	d005      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f0c:	2817      	cmp	r0, #23
    6f0e:	d003      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f10:	2819      	cmp	r0, #25
    6f12:	d001      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f14:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6f18:	4770      	bx	lr
    6f1a:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6f1e:	2801      	cmp	r0, #1
    6f20:	d0fa      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f22:	bf00      	nop
    6f24:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6f28:	7801      	ldrb	r1, [r0, #0]
    6f2a:	1e49      	subs	r1, r1, #1
    6f2c:	7001      	strb	r1, [r0, #0]
    6f2e:	4770      	bx	lr
    6f30:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6f34:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6f38:	1ac0      	subs	r0, r0, r3
    6f3a:	b200      	sxth	r0, r0
    6f3c:	2800      	cmp	r0, #0
    6f3e:	dbf6      	blt.n	6f2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6f40:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6f44:	4770      	bx	lr
    6f46:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6f4a:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6f4e:	1a40      	subs	r0, r0, r1
    6f50:	b200      	sxth	r0, r0
    6f52:	2800      	cmp	r0, #0
    6f54:	dae6      	bge.n	6f24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6f56:	4770      	bx	lr
    6f58:	200000f0 	.word	0x200000f0

00006f5c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6f5c:	b510      	push	{r4, lr}
    6f5e:	6981      	ldr	r1, [r0, #24]
    6f60:	b119      	cbz	r1, 6f6a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6f62:	6882      	ldr	r2, [r0, #8]
    6f64:	688b      	ldr	r3, [r1, #8]
    6f66:	429a      	cmp	r2, r3
    6f68:	d203      	bcs.n	6f72 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6f6a:	21c0      	movs	r1, #192	; 0xc0
    6f6c:	2037      	movs	r0, #55	; 0x37
    6f6e:	f7f9 fd79 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f72:	6942      	ldr	r2, [r0, #20]
    6f74:	614a      	str	r2, [r1, #20]
    6f76:	6903      	ldr	r3, [r0, #16]
    6f78:	610b      	str	r3, [r1, #16]
    6f7a:	b10a      	cbz	r2, 6f80 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6f7c:	6111      	str	r1, [r2, #16]
    6f7e:	e001      	b.n	6f84 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6f80:	4a06      	ldr	r2, [pc, #24]	; (6f9c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6f82:	6011      	str	r1, [r2, #0]
    6f84:	690a      	ldr	r2, [r1, #16]
    6f86:	b132      	cbz	r2, 6f96 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6f88:	6151      	str	r1, [r2, #20]
    6f8a:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6f8e:	4410      	add	r0, r2
    6f90:	688a      	ldr	r2, [r1, #8]
    6f92:	1a80      	subs	r0, r0, r2
    6f94:	e000      	b.n	6f98 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6f96:	2000      	movs	r0, #0
    6f98:	60c8      	str	r0, [r1, #12]
    6f9a:	bd10      	pop	{r4, pc}
    6f9c:	20000258 	.word	0x20000258

00006fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6fa0:	b510      	push	{r4, lr}
    6fa2:	2200      	movs	r2, #0
    6fa4:	6141      	str	r1, [r0, #20]
    6fa6:	b189      	cbz	r1, 6fcc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6fa8:	690b      	ldr	r3, [r1, #16]
    6faa:	6108      	str	r0, [r1, #16]
    6fac:	6103      	str	r3, [r0, #16]
    6fae:	b103      	cbz	r3, 6fb2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6fb0:	6158      	str	r0, [r3, #20]
    6fb2:	6941      	ldr	r1, [r0, #20]
    6fb4:	60c2      	str	r2, [r0, #12]
    6fb6:	2900      	cmp	r1, #0
    6fb8:	d00f      	beq.n	6fda <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6fba:	68cb      	ldr	r3, [r1, #12]
    6fbc:	b163      	cbz	r3, 6fd8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6fbe:	6884      	ldr	r4, [r0, #8]
    6fc0:	42a3      	cmp	r3, r4
    6fc2:	d207      	bcs.n	6fd4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6fc4:	212b      	movs	r1, #43	; 0x2b
    6fc6:	2037      	movs	r0, #55	; 0x37
    6fc8:	f7f9 fd4c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fcc:	4903      	ldr	r1, [pc, #12]	; (6fdc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6fce:	6102      	str	r2, [r0, #16]
    6fd0:	6008      	str	r0, [r1, #0]
    6fd2:	e7ee      	b.n	6fb2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6fd4:	1b1b      	subs	r3, r3, r4
    6fd6:	60c3      	str	r3, [r0, #12]
    6fd8:	60ca      	str	r2, [r1, #12]
    6fda:	bd10      	pop	{r4, pc}
    6fdc:	20000258 	.word	0x20000258

00006fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6fe0:	6941      	ldr	r1, [r0, #20]
    6fe2:	b149      	cbz	r1, 6ff8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6fe4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6fe8:	441a      	add	r2, r3
    6fea:	68cb      	ldr	r3, [r1, #12]
    6fec:	441a      	add	r2, r3
    6fee:	60ca      	str	r2, [r1, #12]
    6ff0:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6ff4:	6111      	str	r1, [r2, #16]
    6ff6:	e002      	b.n	6ffe <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6ff8:	4a06      	ldr	r2, [pc, #24]	; (7014 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6ffa:	6901      	ldr	r1, [r0, #16]
    6ffc:	6011      	str	r1, [r2, #0]
    6ffe:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    7002:	b109      	cbz	r1, 7008 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    7004:	6148      	str	r0, [r1, #20]
    7006:	4770      	bx	lr
    7008:	2800      	cmp	r0, #0
    700a:	d0fc      	beq.n	7006 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    700c:	2100      	movs	r1, #0
    700e:	60c1      	str	r1, [r0, #12]
    7010:	4770      	bx	lr
    7012:	0000      	.short	0x0000
    7014:	20000258 	.word	0x20000258

00007018 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    7018:	b510      	push	{r4, lr}
    701a:	4604      	mov	r4, r0
    701c:	490a      	ldr	r1, [pc, #40]	; (7048 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    701e:	2000      	movs	r0, #0
    7020:	4602      	mov	r2, r0
    7022:	6809      	ldr	r1, [r1, #0]
    7024:	1e43      	subs	r3, r0, #1
    7026:	e008      	b.n	703a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    7028:	68ca      	ldr	r2, [r1, #12]
    702a:	42a2      	cmp	r2, r4
    702c:	d303      	bcc.n	7036 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    702e:	429a      	cmp	r2, r3
    7030:	d201      	bcs.n	7036 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    7032:	4613      	mov	r3, r2
    7034:	4608      	mov	r0, r1
    7036:	460a      	mov	r2, r1
    7038:	6909      	ldr	r1, [r1, #16]
    703a:	2900      	cmp	r1, #0
    703c:	d1f4      	bne.n	7028 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    703e:	2800      	cmp	r0, #0
    7040:	d100      	bne.n	7044 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    7042:	4610      	mov	r0, r2
    7044:	bd10      	pop	{r4, pc}
    7046:	0000      	.short	0x0000
    7048:	20000258 	.word	0x20000258

0000704c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    704c:	4801      	ldr	r0, [pc, #4]	; (7054 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    704e:	6800      	ldr	r0, [r0, #0]
    7050:	4770      	bx	lr
    7052:	0000      	.short	0x0000
    7054:	20000258 	.word	0x20000258

00007058 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    7058:	4804      	ldr	r0, [pc, #16]	; (706c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    705a:	6801      	ldr	r1, [r0, #0]
    705c:	2000      	movs	r0, #0
    705e:	e001      	b.n	7064 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    7060:	4608      	mov	r0, r1
    7062:	6909      	ldr	r1, [r1, #16]
    7064:	2900      	cmp	r1, #0
    7066:	d1fb      	bne.n	7060 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    7068:	4770      	bx	lr
    706a:	0000      	.short	0x0000
    706c:	20000258 	.word	0x20000258

00007070 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    7070:	4801      	ldr	r0, [pc, #4]	; (7078 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    7072:	2100      	movs	r1, #0
    7074:	6001      	str	r1, [r0, #0]
    7076:	4770      	bx	lr
    7078:	20000258 	.word	0x20000258

0000707c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    707c:	4903      	ldr	r1, [pc, #12]	; (708c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    707e:	2000      	movs	r0, #0
    7080:	6809      	ldr	r1, [r1, #0]
    7082:	2900      	cmp	r1, #0
    7084:	d000      	beq.n	7088 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    7086:	200c      	movs	r0, #12
    7088:	4770      	bx	lr
    708a:	0000      	.short	0x0000
    708c:	20000258 	.word	0x20000258

00007090 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7090:	b570      	push	{r4, r5, r6, lr}
    7092:	6844      	ldr	r4, [r0, #4]
    7094:	220d      	movs	r2, #13
    7096:	f504 759c 	add.w	r5, r4, #312	; 0x138
    709a:	2100      	movs	r1, #0
    709c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    70a0:	f009 ffcb 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70a4:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    70a8:	2100      	movs	r1, #0
    70aa:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    70ae:	5501      	strb	r1, [r0, r4]
    70b0:	f8a5 1017 	strh.w	r1, [r5, #23]
    70b4:	7669      	strb	r1, [r5, #25]
    70b6:	4608      	mov	r0, r1
    70b8:	f05f 017f 	movs.w	r1, #127	; 0x7f
    70bc:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    70c0:	1c40      	adds	r0, r0, #1
    70c2:	b2c0      	uxtb	r0, r0
    70c4:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    70c8:	2802      	cmp	r0, #2
    70ca:	d3f7      	bcc.n	70bc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    70cc:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    70d0:	4620      	mov	r0, r4
    70d2:	f008 fc31 	bl	f938 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    70d6:	2000      	movs	r0, #0
    70d8:	21ff      	movs	r1, #255	; 0xff
    70da:	1822      	adds	r2, r4, r0
    70dc:	1c40      	adds	r0, r0, #1
    70de:	b2c0      	uxtb	r0, r0
    70e0:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    70e4:	2802      	cmp	r0, #2
    70e6:	d3f8      	bcc.n	70da <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    70e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000070ec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    70ec:	b500      	push	{lr}
    70ee:	7941      	ldrb	r1, [r0, #5]
    70f0:	b095      	sub	sp, #84	; 0x54
    70f2:	b141      	cbz	r1, 7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70f4:	2901      	cmp	r1, #1
    70f6:	d006      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70f8:	2902      	cmp	r1, #2
    70fa:	d004      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70fc:	2903      	cmp	r1, #3
    70fe:	d002      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    7100:	2012      	movs	r0, #18
    7102:	b015      	add	sp, #84	; 0x54
    7104:	bd00      	pop	{pc}
    7106:	7901      	ldrb	r1, [r0, #4]
    7108:	f88d 1000 	strb.w	r1, [sp]
    710c:	7b01      	ldrb	r1, [r0, #12]
    710e:	f88d 1001 	strb.w	r1, [sp, #1]
    7112:	7942      	ldrb	r2, [r0, #5]
    7114:	2100      	movs	r1, #0
    7116:	2301      	movs	r3, #1
    7118:	b3f2      	cbz	r2, 7198 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    711a:	2a02      	cmp	r2, #2
    711c:	d03d      	beq.n	719a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    711e:	f88d 3002 	strb.w	r3, [sp, #2]
    7122:	bf00      	nop
    7124:	f8d0 2006 	ldr.w	r2, [r0, #6]
    7128:	f8cd 2003 	str.w	r2, [sp, #3]
    712c:	8942      	ldrh	r2, [r0, #10]
    712e:	f8ad 2007 	strh.w	r2, [sp, #7]
    7132:	f88d 3009 	strb.w	r3, [sp, #9]
    7136:	f830 2b01 	ldrh.w	r2, [r0], #1
    713a:	f240 2371 	movw	r3, #625	; 0x271
    713e:	435a      	muls	r2, r3
    7140:	9203      	str	r2, [sp, #12]
    7142:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    7146:	435a      	muls	r2, r3
    7148:	9206      	str	r2, [sp, #24]
    714a:	8982      	ldrh	r2, [r0, #12]
    714c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    7150:	89c2      	ldrh	r2, [r0, #14]
    7152:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    7156:	8a02      	ldrh	r2, [r0, #16]
    7158:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    715c:	8a42      	ldrh	r2, [r0, #18]
    715e:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    7162:	8a82      	ldrh	r2, [r0, #20]
    7164:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    7168:	8ac0      	ldrh	r0, [r0, #22]
    716a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    716e:	2007      	movs	r0, #7
    7170:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    7174:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    7178:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    717c:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    7180:	9806      	ldr	r0, [sp, #24]
    7182:	f000 fa0d 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    7186:	b158      	cbz	r0, 71a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7188:	9803      	ldr	r0, [sp, #12]
    718a:	f000 f9fd 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    718e:	b138      	cbz	r0, 71a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7190:	4668      	mov	r0, sp
    7192:	f008 feb0 	bl	fef6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    7196:	e7b4      	b.n	7102 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    7198:	e7ff      	b.n	719a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    719a:	f88d 1002 	strb.w	r1, [sp, #2]
    719e:	e7c1      	b.n	7124 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    71a0:	2030      	movs	r0, #48	; 0x30
    71a2:	e7ae      	b.n	7102 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

000071a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    71a4:	4903      	ldr	r1, [pc, #12]	; (71b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    71a6:	884a      	ldrh	r2, [r1, #2]
    71a8:	8002      	strh	r2, [r0, #0]
    71aa:	7809      	ldrb	r1, [r1, #0]
    71ac:	7081      	strb	r1, [r0, #2]
    71ae:	2000      	movs	r0, #0
    71b0:	4770      	bx	lr
    71b2:	0000      	.short	0x0000
    71b4:	200010cc 	.word	0x200010cc

000071b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    71b8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    71ba:	460c      	mov	r4, r1
    71bc:	4605      	mov	r5, r0
    71be:	8800      	ldrh	r0, [r0, #0]
    71c0:	4669      	mov	r1, sp
    71c2:	f006 ff24 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71c6:	2200      	movs	r2, #0
    71c8:	b128      	cbz	r0, 71d6 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    71ca:	f8c4 2002 	str.w	r2, [r4, #2]
    71ce:	71a2      	strb	r2, [r4, #6]
    71d0:	8022      	strh	r2, [r4, #0]
    71d2:	2002      	movs	r0, #2
    71d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    71d6:	9901      	ldr	r1, [sp, #4]
    71d8:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    71dc:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    71e0:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    71e4:	f8c4 0002 	str.w	r0, [r4, #2]
    71e8:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    71ec:	71a0      	strb	r0, [r4, #6]
    71ee:	8828      	ldrh	r0, [r5, #0]
    71f0:	8020      	strh	r0, [r4, #0]
    71f2:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    71f6:	f88d 0008 	strb.w	r0, [sp, #8]
    71fa:	9802      	ldr	r0, [sp, #8]
    71fc:	9002      	str	r0, [sp, #8]
    71fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7202:	2800      	cmp	r0, #0
    7204:	d1ea      	bne.n	71dc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    7206:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00007208 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    7208:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    720a:	460d      	mov	r5, r1
    720c:	4606      	mov	r6, r0
    720e:	8800      	ldrh	r0, [r0, #0]
    7210:	4669      	mov	r1, sp
    7212:	f006 fefc 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7216:	2800      	cmp	r0, #0
    7218:	d11a      	bne.n	7250 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    721a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    721e:	2700      	movs	r7, #0
    7220:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7224:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7228:	f009 f85d 	bl	102e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    722c:	70a8      	strb	r0, [r5, #2]
    722e:	7860      	ldrb	r0, [r4, #1]
    7230:	f009 f859 	bl	102e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7234:	70e8      	strb	r0, [r5, #3]
    7236:	78a0      	ldrb	r0, [r4, #2]
    7238:	f88d 0008 	strb.w	r0, [sp, #8]
    723c:	9802      	ldr	r0, [sp, #8]
    723e:	9002      	str	r0, [sp, #8]
    7240:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7244:	3c6a      	subs	r4, #106	; 0x6a
    7246:	2800      	cmp	r0, #0
    7248:	d1ea      	bne.n	7220 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    724a:	8830      	ldrh	r0, [r6, #0]
    724c:	8028      	strh	r0, [r5, #0]
    724e:	2000      	movs	r0, #0
    7250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007254 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7254:	4903      	ldr	r1, [pc, #12]	; (7264 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7256:	888a      	ldrh	r2, [r1, #4]
    7258:	8002      	strh	r2, [r0, #0]
    725a:	88c9      	ldrh	r1, [r1, #6]
    725c:	8041      	strh	r1, [r0, #2]
    725e:	2000      	movs	r0, #0
    7260:	4770      	bx	lr
    7262:	0000      	.short	0x0000
    7264:	2000026a 	.word	0x2000026a

00007268 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7268:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    726a:	2400      	movs	r4, #0
    726c:	a902      	add	r1, sp, #8
    726e:	f88d 4004 	strb.w	r4, [sp, #4]
    7272:	f88d 4008 	strb.w	r4, [sp, #8]
    7276:	9100      	str	r1, [sp, #0]
    7278:	7882      	ldrb	r2, [r0, #2]
    727a:	7841      	ldrb	r1, [r0, #1]
    727c:	7800      	ldrb	r0, [r0, #0]
    727e:	ab01      	add	r3, sp, #4
    7280:	f009 fa37 	bl	106f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
    7284:	2800      	cmp	r0, #0
    7286:	d112      	bne.n	72ae <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7288:	f89d 0004 	ldrb.w	r0, [sp, #4]
    728c:	f009 f842 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    7290:	b170      	cbz	r0, 72b0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7292:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7296:	f009 f83d 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    729a:	b148      	cbz	r0, 72b0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    729c:	4805      	ldr	r0, [pc, #20]	; (72b4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    729e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    72a2:	7381      	strb	r1, [r0, #14]
    72a4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    72a8:	73c1      	strb	r1, [r0, #15]
    72aa:	8204      	strh	r4, [r0, #16]
    72ac:	2000      	movs	r0, #0
    72ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    72b0:	2011      	movs	r0, #17
    72b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    72b4:	200010cc 	.word	0x200010cc

000072b8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    72b8:	b51c      	push	{r2, r3, r4, lr}
    72ba:	4604      	mov	r4, r0
    72bc:	f006 fe91 	bl	dfe2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    72c0:	b148      	cbz	r0, 72d6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    72c2:	4620      	mov	r0, r4
    72c4:	f7fb fae2 	bl	288c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    72c8:	4909      	ldr	r1, [pc, #36]	; (72f0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    72ca:	24ff      	movs	r4, #255	; 0xff
    72cc:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    72d0:	e9cd 0100 	strd	r0, r1, [sp]
    72d4:	e004      	b.n	72e0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    72d6:	2012      	movs	r0, #18
    72d8:	bd1c      	pop	{r2, r3, r4, pc}
    72da:	9800      	ldr	r0, [sp, #0]
    72dc:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    72e0:	4668      	mov	r0, sp
    72e2:	f7f9 fddd 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72e6:	2800      	cmp	r0, #0
    72e8:	d0f7      	beq.n	72da <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    72ea:	2000      	movs	r0, #0
    72ec:	bd1c      	pop	{r2, r3, r4, pc}
    72ee:	0000      	.short	0x0000
    72f0:	000078d4 	.word	0x000078d4

000072f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    72f4:	7801      	ldrb	r1, [r0, #0]
    72f6:	b171      	cbz	r1, 7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72f8:	7841      	ldrb	r1, [r0, #1]
    72fa:	b161      	cbz	r1, 7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72fc:	8841      	ldrh	r1, [r0, #2]
    72fe:	291b      	cmp	r1, #27
    7300:	d309      	bcc.n	7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7302:	8881      	ldrh	r1, [r0, #4]
    7304:	291b      	cmp	r1, #27
    7306:	d306      	bcc.n	7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7308:	4904      	ldr	r1, [pc, #16]	; (731c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    730a:	6802      	ldr	r2, [r0, #0]
    730c:	600a      	str	r2, [r1, #0]
    730e:	8880      	ldrh	r0, [r0, #4]
    7310:	8088      	strh	r0, [r1, #4]
    7312:	2000      	movs	r0, #0
    7314:	4770      	bx	lr
    7316:	2012      	movs	r0, #18
    7318:	4770      	bx	lr
    731a:	0000      	.short	0x0000
    731c:	200010cc 	.word	0x200010cc

00007320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7320:	6800      	ldr	r0, [r0, #0]
    7322:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7326:	4288      	cmp	r0, r1
    7328:	d303      	bcc.n	7332 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    732a:	4903      	ldr	r1, [pc, #12]	; (7338 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    732c:	6088      	str	r0, [r1, #8]
    732e:	2000      	movs	r0, #0
    7330:	4770      	bx	lr
    7332:	2012      	movs	r0, #18
    7334:	4770      	bx	lr
    7336:	0000      	.short	0x0000
    7338:	200010cc 	.word	0x200010cc

0000733c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    733c:	b510      	push	{r4, lr}
    733e:	b086      	sub	sp, #24
    7340:	4604      	mov	r4, r0
    7342:	f009 f8c2 	bl	104ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    7346:	2800      	cmp	r0, #0
    7348:	d103      	bne.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    734a:	f009 f9bf 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
    734e:	b110      	cbz	r0, 7356 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7350:	200c      	movs	r0, #12
    7352:	b006      	add	sp, #24
    7354:	bd10      	pop	{r4, pc}
    7356:	2102      	movs	r1, #2
    7358:	f104 0010 	add.w	r0, r4, #16
    735c:	f000 f92c 	bl	75b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    7360:	78a0      	ldrb	r0, [r4, #2]
    7362:	f88d 0008 	strb.w	r0, [sp, #8]
    7366:	78a0      	ldrb	r0, [r4, #2]
    7368:	f88d 0000 	strb.w	r0, [sp]
    736c:	7860      	ldrb	r0, [r4, #1]
    736e:	f88d 0003 	strb.w	r0, [sp, #3]
    7372:	7820      	ldrb	r0, [r4, #0]
    7374:	f88d 0002 	strb.w	r0, [sp, #2]
    7378:	7e20      	ldrb	r0, [r4, #24]
    737a:	f88d 0004 	strb.w	r0, [sp, #4]
    737e:	78a0      	ldrb	r0, [r4, #2]
    7380:	07c0      	lsls	r0, r0, #31
    7382:	d00b      	beq.n	739c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    7384:	78e0      	ldrb	r0, [r4, #3]
    7386:	2801      	cmp	r0, #1
    7388:	d011      	beq.n	73ae <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    738a:	b190      	cbz	r0, 73b2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    738c:	f05f 0000 	movs.w	r0, #0
    7390:	f88d 0001 	strb.w	r0, [sp, #1]
    7394:	68a0      	ldr	r0, [r4, #8]
    7396:	9003      	str	r0, [sp, #12]
    7398:	6920      	ldr	r0, [r4, #16]
    739a:	9004      	str	r0, [sp, #16]
    739c:	a802      	add	r0, sp, #8
    739e:	f7fd fbb7 	bl	4b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    73a2:	2800      	cmp	r0, #0
    73a4:	d1d5      	bne.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    73a6:	4668      	mov	r0, sp
    73a8:	f7fc f998 	bl	36dc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    73ac:	e7d1      	b.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    73ae:	2002      	movs	r0, #2
    73b0:	e7ee      	b.n	7390 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    73b2:	2001      	movs	r0, #1
    73b4:	e7ec      	b.n	7390 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000073b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    73b8:	4801      	ldr	r0, [pc, #4]	; (73c0 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    73ba:	f990 0000 	ldrsb.w	r0, [r0]
    73be:	4770      	bx	lr
    73c0:	2000025c 	.word	0x2000025c

000073c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    73c4:	4a03      	ldr	r2, [pc, #12]	; (73d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    73c6:	e9d2 1200 	ldrd	r1, r2, [r2]
    73ca:	6001      	str	r1, [r0, #0]
    73cc:	6042      	str	r2, [r0, #4]
    73ce:	2000      	movs	r0, #0
    73d0:	4770      	bx	lr
    73d2:	0000      	.short	0x0000
    73d4:	000078d4 	.word	0x000078d4

000073d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    73d8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    73da:	8800      	ldrh	r0, [r0, #0]
    73dc:	4669      	mov	r1, sp
    73de:	f006 fe16 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    73e2:	b968      	cbnz	r0, 7400 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73e4:	2401      	movs	r4, #1
    73e6:	9801      	ldr	r0, [sp, #4]
    73e8:	f009 f953 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    73ec:	b140      	cbz	r0, 7400 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73ee:	9801      	ldr	r0, [sp, #4]
    73f0:	4601      	mov	r1, r0
    73f2:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    73f6:	3088      	adds	r0, #136	; 0x88
    73f8:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    73fc:	b95a      	cbnz	r2, 7416 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    73fe:	e001      	b.n	7404 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7400:	2002      	movs	r0, #2
    7402:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7404:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    7408:	f88d 2008 	strb.w	r2, [sp, #8]
    740c:	9a02      	ldr	r2, [sp, #8]
    740e:	9202      	str	r2, [sp, #8]
    7410:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7414:	b10a      	cbz	r2, 741a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    7416:	203a      	movs	r0, #58	; 0x3a
    7418:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    741a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    741e:	0792      	lsls	r2, r2, #30
    7420:	d006      	beq.n	7430 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7422:	2203      	movs	r2, #3
    7424:	4903      	ldr	r1, [pc, #12]	; (7434 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    7426:	3060      	adds	r0, #96	; 0x60
    7428:	f007 f94e 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    742c:	2000      	movs	r0, #0
    742e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7430:	700c      	strb	r4, [r1, #0]
    7432:	e7fb      	b.n	742c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7434:	0000ebd1 	.word	0x0000ebd1

00007438 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    7438:	b510      	push	{r4, lr}
    743a:	2005      	movs	r0, #5
    743c:	f000 fabe 	bl	79bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7440:	f7fe f8d4 	bl	55ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7444:	4902      	ldr	r1, [pc, #8]	; (7450 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    7446:	4801      	ldr	r0, [pc, #4]	; (744c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    7448:	6048      	str	r0, [r1, #4]
    744a:	bd10      	pop	{r4, pc}
    744c:	00007455 	.word	0x00007455
    7450:	2000025c 	.word	0x2000025c
    7454:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7458:	4613      	mov	r3, r2
    745a:	4a33      	ldr	r2, [pc, #204]	; (7528 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    745c:	460f      	mov	r7, r1
    745e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    7462:	8814      	ldrh	r4, [r2, #0]
    7464:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7468:	428c      	cmp	r4, r1
    746a:	d200      	bcs.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    746c:	4621      	mov	r1, r4
    746e:	4688      	mov	r8, r1
    7470:	8891      	ldrh	r1, [r2, #4]
    7472:	42b1      	cmp	r1, r6
    7474:	d200      	bcs.n	7478 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    7476:	460e      	mov	r6, r1
    7478:	8851      	ldrh	r1, [r2, #2]
    747a:	f640 0448 	movw	r4, #2120	; 0x848
    747e:	42a1      	cmp	r1, r4
    7480:	d300      	bcc.n	7484 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    7482:	4621      	mov	r1, r4
    7484:	88d5      	ldrh	r5, [r2, #6]
    7486:	42a5      	cmp	r5, r4
    7488:	d300      	bcc.n	748c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    748a:	4625      	mov	r5, r4
    748c:	42a1      	cmp	r1, r4
    748e:	d200      	bcs.n	7492 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    7490:	460c      	mov	r4, r1
    7492:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7496:	2e1b      	cmp	r6, #27
    7498:	d001      	beq.n	749e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    749a:	4295      	cmp	r5, r2
    749c:	d104      	bne.n	74a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    749e:	f1b8 0f1b 	cmp.w	r8, #27
    74a2:	d03e      	beq.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    74a4:	4294      	cmp	r4, r2
    74a6:	d03c      	beq.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    74a8:	466a      	mov	r2, sp
    74aa:	4619      	mov	r1, r3
    74ac:	f009 f898 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    74b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    74b4:	4641      	mov	r1, r8
    74b6:	4540      	cmp	r0, r8
    74b8:	d900      	bls.n	74bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    74ba:	4608      	mov	r0, r1
    74bc:	80f8      	strh	r0, [r7, #6]
    74be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    74c2:	42a1      	cmp	r1, r4
    74c4:	d800      	bhi.n	74c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    74c6:	460c      	mov	r4, r1
    74c8:	813c      	strh	r4, [r7, #8]
    74ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    74ce:	42b1      	cmp	r1, r6
    74d0:	d800      	bhi.n	74d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    74d2:	460e      	mov	r6, r1
    74d4:	807e      	strh	r6, [r7, #2]
    74d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    74da:	42a9      	cmp	r1, r5
    74dc:	d800      	bhi.n	74e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    74de:	460d      	mov	r5, r1
    74e0:	80bd      	strh	r5, [r7, #4]
    74e2:	21ff      	movs	r1, #255	; 0xff
    74e4:	7039      	strb	r1, [r7, #0]
    74e6:	381b      	subs	r0, #27
    74e8:	28e0      	cmp	r0, #224	; 0xe0
    74ea:	d902      	bls.n	74f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    74ec:	f640 516e 	movw	r1, #3438	; 0xd6e
    74f0:	e014      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    74f2:	3e1b      	subs	r6, #27
    74f4:	2ee0      	cmp	r6, #224	; 0xe0
    74f6:	d902      	bls.n	74fe <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    74f8:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    74fc:	e00e      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    74fe:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7502:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7506:	4284      	cmp	r4, r0
    7508:	d902      	bls.n	7510 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    750a:	f640 5172 	movw	r1, #3442	; 0xd72
    750e:	e005      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7510:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7514:	4285      	cmp	r5, r0
    7516:	d904      	bls.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    7518:	f640 5174 	movw	r1, #3444	; 0xd74
    751c:	2039      	movs	r0, #57	; 0x39
    751e:	f7f9 faa1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7522:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    7526:	0000      	.short	0x0000
    7528:	2000026a 	.word	0x2000026a
    752c:	b510      	push	{r4, lr}
    752e:	480e      	ldr	r0, [pc, #56]	; (7568 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7530:	2100      	movs	r1, #0
    7532:	4b0e      	ldr	r3, [pc, #56]	; (756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7534:	74c1      	strb	r1, [r0, #19]
    7536:	8281      	strh	r1, [r0, #20]
    7538:	221b      	movs	r2, #27
    753a:	801a      	strh	r2, [r3, #0]
    753c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7540:	805c      	strh	r4, [r3, #2]
    7542:	809a      	strh	r2, [r3, #4]
    7544:	80dc      	strh	r4, [r3, #6]
    7546:	7381      	strb	r1, [r0, #14]
    7548:	73c1      	strb	r1, [r0, #15]
    754a:	2303      	movs	r3, #3
    754c:	7003      	strb	r3, [r0, #0]
    754e:	2302      	movs	r3, #2
    7550:	7043      	strb	r3, [r0, #1]
    7552:	8042      	strh	r2, [r0, #2]
    7554:	8082      	strh	r2, [r0, #4]
    7556:	f640 62a6 	movw	r2, #3750	; 0xea6
    755a:	6082      	str	r2, [r0, #8]
    755c:	7481      	strb	r1, [r0, #18]
    755e:	7301      	strb	r1, [r0, #12]
    7560:	4802      	ldr	r0, [pc, #8]	; (756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7562:	1f80      	subs	r0, r0, #6
    7564:	7001      	strb	r1, [r0, #0]
    7566:	bd10      	pop	{r4, pc}
    7568:	200010cc 	.word	0x200010cc
    756c:	2000026a 	.word	0x2000026a
    7570:	4904      	ldr	r1, [pc, #16]	; (7584 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    7572:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    7576:	4288      	cmp	r0, r1
    7578:	d301      	bcc.n	757e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    757a:	2000      	movs	r0, #0
    757c:	4770      	bx	lr
    757e:	2001      	movs	r0, #1
    7580:	4770      	bx	lr
    7582:	0000      	.short	0x0000
    7584:	0270f3cc 	.word	0x0270f3cc
    7588:	4904      	ldr	r1, [pc, #16]	; (759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    758a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    758e:	4288      	cmp	r0, r1
    7590:	d301      	bcc.n	7596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    7592:	2000      	movs	r0, #0
    7594:	4770      	bx	lr
    7596:	2001      	movs	r0, #1
    7598:	4770      	bx	lr
    759a:	0000      	.short	0x0000
    759c:	009c363d 	.word	0x009c363d
    75a0:	4904      	ldr	r1, [pc, #16]	; (75b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    75a2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    75a6:	4288      	cmp	r0, r1
    75a8:	d301      	bcc.n	75ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    75aa:	2000      	movs	r0, #0
    75ac:	4770      	bx	lr
    75ae:	2001      	movs	r0, #1
    75b0:	4770      	bx	lr
    75b2:	0000      	.short	0x0000
    75b4:	009c363d 	.word	0x009c363d
    75b8:	b530      	push	{r4, r5, lr}
    75ba:	2200      	movs	r2, #0
    75bc:	4d07      	ldr	r5, [pc, #28]	; (75dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    75be:	e009      	b.n	75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    75c0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    75c4:	462b      	mov	r3, r5
    75c6:	429c      	cmp	r4, r3
    75c8:	d800      	bhi.n	75cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    75ca:	4623      	mov	r3, r4
    75cc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    75d0:	1c52      	adds	r2, r2, #1
    75d2:	b2d2      	uxtb	r2, r2
    75d4:	428a      	cmp	r2, r1
    75d6:	d3f3      	bcc.n	75c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    75d8:	bd30      	pop	{r4, r5, pc}
    75da:	0000      	.short	0x0000
    75dc:	00f42400 	.word	0x00f42400
    75e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75e4:	4604      	mov	r4, r0
    75e6:	a05c      	add	r0, pc, #368	; (adr r0, 7758 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    75e8:	4688      	mov	r8, r1
    75ea:	e9d0 7600 	ldrd	r7, r6, [r0]
    75ee:	b087      	sub	sp, #28
    75f0:	4699      	mov	r9, r3
    75f2:	4615      	mov	r5, r2
    75f4:	2100      	movs	r1, #0
    75f6:	4620      	mov	r0, r4
    75f8:	f7fb f88c 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    75fc:	f8a4 8000 	strh.w	r8, [r4]
    7600:	4857      	ldr	r0, [pc, #348]	; (7760 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7602:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    7606:	f000 f9e5 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    760a:	0940      	lsrs	r0, r0, #5
    760c:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7610:	07c1      	lsls	r1, r0, #31
    7612:	f8df 8150 	ldr.w	r8, [pc, #336]	; 7764 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    7616:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    761a:	d006      	beq.n	762a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    761c:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7620:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7624:	84c2      	strh	r2, [r0, #38]	; 0x26
    7626:	8501      	strh	r1, [r0, #40]	; 0x28
    7628:	e002      	b.n	7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    762a:	211b      	movs	r1, #27
    762c:	84c1      	strh	r1, [r0, #38]	; 0x26
    762e:	8501      	strh	r1, [r0, #40]	; 0x28
    7630:	f000 f9d0 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7634:	0788      	lsls	r0, r1, #30
    7636:	d506      	bpl.n	7646 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    7638:	2000      	movs	r0, #0
    763a:	f88d 0000 	strb.w	r0, [sp]
    763e:	4668      	mov	r0, sp
    7640:	9401      	str	r4, [sp, #4]
    7642:	f7ff fd25 	bl	7090 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    7646:	f898 1001 	ldrb.w	r1, [r8, #1]
    764a:	9100      	str	r1, [sp, #0]
    764c:	f898 3000 	ldrb.w	r3, [r8]
    7650:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7654:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    7658:	8820      	ldrh	r0, [r4, #0]
    765a:	f7f9 fd0f 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    765e:	b120      	cbz	r0, 766a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    7660:	f640 7106 	movw	r1, #3846	; 0xf06
    7664:	2039      	movs	r0, #57	; 0x39
    7666:	f7f9 f9fd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    766a:	f007 f99a 	bl	e9a2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    766e:	6160      	str	r0, [r4, #20]
    7670:	f1b9 0f00 	cmp.w	r9, #0
    7674:	d004      	beq.n	7680 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    7676:	f7fb fc85 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    767a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    767e:	61e0      	str	r0, [r4, #28]
    7680:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7684:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7688:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    768a:	f006 fccc 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    768e:	6120      	str	r0, [r4, #16]
    7690:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7694:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7698:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    769a:	8320      	strh	r0, [r4, #24]
    769c:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    76a0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    76a4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    76a6:	8360      	strh	r0, [r4, #26]
    76a8:	7a68      	ldrb	r0, [r5, #9]
    76aa:	f008 fe12 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    76ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
    76b2:	4645      	mov	r5, r8
    76b4:	4620      	mov	r0, r4
    76b6:	62e1      	str	r1, [r4, #44]	; 0x2c
    76b8:	f007 fd50 	bl	f15c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    76bc:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    76c0:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    76c4:	20ff      	movs	r0, #255	; 0xff
    76c6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    76ca:	4825      	ldr	r0, [pc, #148]	; (7760 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    76cc:	3808      	subs	r0, #8
    76ce:	6843      	ldr	r3, [r0, #4]
    76d0:	b123      	cbz	r3, 76dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    76d2:	2201      	movs	r2, #1
    76d4:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    76d8:	4620      	mov	r0, r4
    76da:	4798      	blx	r3
    76dc:	8821      	ldrh	r1, [r4, #0]
    76de:	f8ad 1004 	strh.w	r1, [sp, #4]
    76e2:	7ba9      	ldrb	r1, [r5, #14]
    76e4:	f88d 1006 	strb.w	r1, [sp, #6]
    76e8:	7be9      	ldrb	r1, [r5, #15]
    76ea:	f88d 1007 	strb.w	r1, [sp, #7]
    76ee:	8a29      	ldrh	r1, [r5, #16]
    76f0:	f8ad 1008 	strh.w	r1, [sp, #8]
    76f4:	a904      	add	r1, sp, #16
    76f6:	9100      	str	r1, [sp, #0]
    76f8:	2000      	movs	r0, #0
    76fa:	ab03      	add	r3, sp, #12
    76fc:	aa01      	add	r2, sp, #4
    76fe:	4621      	mov	r1, r4
    7700:	f008 ffa4 	bl	1064c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7704:	0005      	movs	r5, r0
    7706:	d10f      	bne.n	7728 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    7708:	f89d 000c 	ldrb.w	r0, [sp, #12]
    770c:	f88d 0014 	strb.w	r0, [sp, #20]
    7710:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7714:	f88d 0015 	strb.w	r0, [sp, #21]
    7718:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    771c:	f8ad 0016 	strh.w	r0, [sp, #22]
    7720:	a905      	add	r1, sp, #20
    7722:	4620      	mov	r0, r4
    7724:	f006 fd4d 	bl	e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7728:	f7fb fc2c 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    772c:	210c      	movs	r1, #12
    772e:	fbb0 f2f1 	udiv	r2, r0, r1
    7732:	fb01 0012 	mls	r0, r1, r2, r0
    7736:	1d40      	adds	r0, r0, #5
    7738:	b2c0      	uxtb	r0, r0
    773a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    773e:	2809      	cmp	r0, #9
    7740:	d202      	bcs.n	7748 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7742:	3008      	adds	r0, #8
    7744:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7748:	2101      	movs	r1, #1
    774a:	4620      	mov	r0, r4
    774c:	f7fa ffe2 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7750:	b007      	add	sp, #28
    7752:	4628      	mov	r0, r5
    7754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7758:	ffffffff 	.word	0xffffffff
    775c:	0000001f 	.word	0x0000001f
    7760:	20000264 	.word	0x20000264
    7764:	200010cc 	.word	0x200010cc
    7768:	4a09      	ldr	r2, [pc, #36]	; (7790 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    776a:	4290      	cmp	r0, r2
    776c:	d80b      	bhi.n	7786 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    776e:	2901      	cmp	r1, #1
    7770:	d002      	beq.n	7778 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    7772:	2904      	cmp	r1, #4
    7774:	d003      	beq.n	777e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    7776:	e008      	b.n	778a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    7778:	f240 7153 	movw	r1, #1875	; 0x753
    777c:	e001      	b.n	7782 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    777e:	f640 11c4 	movw	r1, #2500	; 0x9c4
    7782:	4288      	cmp	r0, r1
    7784:	d201      	bcs.n	778a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    7786:	2000      	movs	r0, #0
    7788:	4770      	bx	lr
    778a:	2001      	movs	r0, #1
    778c:	4770      	bx	lr
    778e:	0000      	.short	0x0000
    7790:	0270fd8f 	.word	0x0270fd8f
    7794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7798:	b088      	sub	sp, #32
    779a:	4604      	mov	r4, r0
    779c:	8800      	ldrh	r0, [r0, #0]
    779e:	a906      	add	r1, sp, #24
    77a0:	f006 fc35 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    77a4:	2800      	cmp	r0, #0
    77a6:	d147      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    77a8:	9807      	ldr	r0, [sp, #28]
    77aa:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    77ae:	f88d 1008 	strb.w	r1, [sp, #8]
    77b2:	9902      	ldr	r1, [sp, #8]
    77b4:	9102      	str	r1, [sp, #8]
    77b6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    77ba:	3088      	adds	r0, #136	; 0x88
    77bc:	b101      	cbz	r1, 77c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    77be:	2101      	movs	r1, #1
    77c0:	f88d 100c 	strb.w	r1, [sp, #12]
    77c4:	7f81      	ldrb	r1, [r0, #30]
    77c6:	f04f 0801 	mov.w	r8, #1
    77ca:	291e      	cmp	r1, #30
    77cc:	d102      	bne.n	77d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    77ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77d2:	b149      	cbz	r1, 77e8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    77d4:	f05f 0100 	movs.w	r1, #0
    77d8:	f88d 1004 	strb.w	r1, [sp, #4]
    77dc:	2105      	movs	r1, #5
    77de:	306e      	adds	r0, #110	; 0x6e
    77e0:	f008 f91a 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    77e4:	b110      	cbz	r0, 77ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    77e6:	e004      	b.n	77f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    77e8:	2101      	movs	r1, #1
    77ea:	e7f5      	b.n	77d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    77ec:	f89d 0004 	ldrb.w	r0, [sp, #4]
    77f0:	b308      	cbz	r0, 7836 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    77f2:	8921      	ldrh	r1, [r4, #8]
    77f4:	88e0      	ldrh	r0, [r4, #6]
    77f6:	f008 fda2 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    77fa:	2800      	cmp	r0, #0
    77fc:	d11c      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    77fe:	88a1      	ldrh	r1, [r4, #4]
    7800:	8860      	ldrh	r0, [r4, #2]
    7802:	f008 fd9c 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    7806:	2800      	cmp	r0, #0
    7808:	d116      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    780a:	8921      	ldrh	r1, [r4, #8]
    780c:	88e0      	ldrh	r0, [r4, #6]
    780e:	f008 fd8c 	bl	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7812:	2800      	cmp	r0, #0
    7814:	d110      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7816:	88a1      	ldrh	r1, [r4, #4]
    7818:	8860      	ldrh	r0, [r4, #2]
    781a:	f008 fd86 	bl	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    781e:	0006      	movs	r6, r0
    7820:	d10a      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7822:	9807      	ldr	r0, [sp, #28]
    7824:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    7828:	27ff      	movs	r7, #255	; 0xff
    782a:	706f      	strb	r7, [r5, #1]
    782c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7830:	b129      	cbz	r1, 783e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7832:	263a      	movs	r6, #58	; 0x3a
    7834:	e02e      	b.n	7894 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    7836:	201a      	movs	r0, #26
    7838:	b008      	add	sp, #32
    783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    783e:	4641      	mov	r1, r8
    7840:	aa03      	add	r2, sp, #12
    7842:	f008 fecd 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    7846:	8861      	ldrh	r1, [r4, #2]
    7848:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    784c:	4281      	cmp	r1, r0
    784e:	d200      	bcs.n	7852 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7850:	4608      	mov	r0, r1
    7852:	80e8      	strh	r0, [r5, #6]
    7854:	88a1      	ldrh	r1, [r4, #4]
    7856:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    785a:	4281      	cmp	r1, r0
    785c:	d200      	bcs.n	7860 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    785e:	4608      	mov	r0, r1
    7860:	8128      	strh	r0, [r5, #8]
    7862:	88e2      	ldrh	r2, [r4, #6]
    7864:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7868:	428a      	cmp	r2, r1
    786a:	d200      	bcs.n	786e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    786c:	4611      	mov	r1, r2
    786e:	8069      	strh	r1, [r5, #2]
    7870:	8922      	ldrh	r2, [r4, #8]
    7872:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7876:	428a      	cmp	r2, r1
    7878:	d200      	bcs.n	787c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    787a:	4611      	mov	r1, r2
    787c:	f640 0248 	movw	r2, #2120	; 0x848
    7880:	80a9      	strh	r1, [r5, #4]
    7882:	4291      	cmp	r1, r2
    7884:	d300      	bcc.n	7888 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    7886:	4611      	mov	r1, r2
    7888:	80a9      	strh	r1, [r5, #4]
    788a:	4290      	cmp	r0, r2
    788c:	d200      	bcs.n	7890 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    788e:	4602      	mov	r2, r0
    7890:	812a      	strh	r2, [r5, #8]
    7892:	702f      	strb	r7, [r5, #0]
    7894:	2000      	movs	r0, #0
    7896:	7068      	strb	r0, [r5, #1]
    7898:	4630      	mov	r0, r6
    789a:	e7cd      	b.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    789c:	b510      	push	{r4, lr}
    789e:	4604      	mov	r4, r0
    78a0:	88c1      	ldrh	r1, [r0, #6]
    78a2:	8880      	ldrh	r0, [r0, #4]
    78a4:	f008 fd4b 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    78a8:	2800      	cmp	r0, #0
    78aa:	d10f      	bne.n	78cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    78ac:	8861      	ldrh	r1, [r4, #2]
    78ae:	8820      	ldrh	r0, [r4, #0]
    78b0:	f008 fd45 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    78b4:	2800      	cmp	r0, #0
    78b6:	d109      	bne.n	78cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    78b8:	4805      	ldr	r0, [pc, #20]	; (78d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    78ba:	88a1      	ldrh	r1, [r4, #4]
    78bc:	8081      	strh	r1, [r0, #4]
    78be:	8821      	ldrh	r1, [r4, #0]
    78c0:	8001      	strh	r1, [r0, #0]
    78c2:	88e1      	ldrh	r1, [r4, #6]
    78c4:	80c1      	strh	r1, [r0, #6]
    78c6:	8861      	ldrh	r1, [r4, #2]
    78c8:	8041      	strh	r1, [r0, #2]
    78ca:	2000      	movs	r0, #0
    78cc:	bd10      	pop	{r4, pc}
    78ce:	0000      	.short	0x0000
    78d0:	2000026a 	.word	0x2000026a
    78d4:	0c124b0c 	.word	0x0c124b0c
    78d8:	124b0059 	.word	0x124b0059
	...

000078e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78e4:	b570      	push	{r4, r5, r6, lr}
    78e6:	460d      	mov	r5, r1
    78e8:	f7fb f9da 	bl	2ca0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78ec:	4c05      	ldr	r4, [pc, #20]	; (7904 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    78ee:	6065      	str	r5, [r4, #4]
    78f0:	68a0      	ldr	r0, [r4, #8]
    78f2:	f008 ff2d 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    78f6:	f008 fc4c 	bl	10192 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78fa:	f7fb fb37 	bl	2f6c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78fe:	2001      	movs	r0, #1
    7900:	7020      	strb	r0, [r4, #0]
    7902:	bd70      	pop	{r4, r5, r6, pc}
    7904:	20000274 	.word	0x20000274

00007908 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7908:	4801      	ldr	r0, [pc, #4]	; (7910 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    790a:	7800      	ldrb	r0, [r0, #0]
    790c:	4770      	bx	lr
    790e:	0000      	.short	0x0000
    7910:	20000274 	.word	0x20000274

00007914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7914:	b510      	push	{r4, lr}
    7916:	4c06      	ldr	r4, [pc, #24]	; (7930 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7918:	68e0      	ldr	r0, [r4, #12]
    791a:	f008 ff19 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    791e:	6920      	ldr	r0, [r4, #16]
    7920:	f008 ff16 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    7924:	f008 fcbd 	bl	102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7928:	2000      	movs	r0, #0
    792a:	7020      	strb	r0, [r4, #0]
    792c:	bd10      	pop	{r4, pc}
    792e:	0000      	.short	0x0000
    7930:	20000274 	.word	0x20000274

00007934 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7934:	b510      	push	{r4, lr}
    7936:	4908      	ldr	r1, [pc, #32]	; (7958 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    7938:	4808      	ldr	r0, [pc, #32]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    793a:	f008 fefc 	bl	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    793e:	4807      	ldr	r0, [pc, #28]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7940:	4907      	ldr	r1, [pc, #28]	; (7960 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7942:	1d00      	adds	r0, r0, #4
    7944:	f008 fef7 	bl	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7948:	4804      	ldr	r0, [pc, #16]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    794e:	4905      	ldr	r1, [pc, #20]	; (7964 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7950:	3008      	adds	r0, #8
    7952:	f008 bef0 	b.w	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7956:	0000      	.short	0x0000
    7958:	20000290 	.word	0x20000290
    795c:	2000027c 	.word	0x2000027c
    7960:	20000298 	.word	0x20000298
    7964:	20000288 	.word	0x20000288
    7968:	b510      	push	{r4, lr}
    796a:	f7fb fe33 	bl	35d4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    796e:	f000 f813 	bl	7998 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    7972:	f006 fa2d 	bl	ddd0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7976:	4907      	ldr	r1, [pc, #28]	; (7994 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    7978:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    797c:	f7f9 fe94 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    7980:	2000      	movs	r0, #0
    7982:	f006 f983 	bl	dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7986:	f7fd fe77 	bl	5678 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    798a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    798e:	f7fb b98d 	b.w	2cac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    7992:	0000      	.short	0x0000
    7994:	2000191a 	.word	0x2000191a
    7998:	b510      	push	{r4, lr}
    799a:	f7ff fb69 	bl	7070 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    799e:	f7fd f88f 	bl	4ac0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    79a2:	f7fd fcfb 	bl	539c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    79a6:	f7ff fd07 	bl	73b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    79aa:	4601      	mov	r1, r0
    79ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79b0:	4801      	ldr	r0, [pc, #4]	; (79b8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    79b2:	f7fb bd6b 	b.w	348c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    79b6:	0000      	.short	0x0000
    79b8:	20001818 	.word	0x20001818

000079bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79bc:	4a04      	ldr	r2, [pc, #16]	; (79d0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79be:	08c1      	lsrs	r1, r0, #3
    79c0:	f000 0307 	and.w	r3, r0, #7
    79c4:	2001      	movs	r0, #1
    79c6:	4098      	lsls	r0, r3
    79c8:	5c53      	ldrb	r3, [r2, r1]
    79ca:	4303      	orrs	r3, r0
    79cc:	5453      	strb	r3, [r2, r1]
    79ce:	4770      	bx	lr
    79d0:	20000020 	.word	0x20000020

000079d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79d4:	4901      	ldr	r1, [pc, #4]	; (79dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79d6:	e9d1 0100 	ldrd	r0, r1, [r1]
    79da:	4770      	bx	lr
    79dc:	20000020 	.word	0x20000020

000079e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79e0:	4806      	ldr	r0, [pc, #24]	; (79fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79e2:	8801      	ldrh	r1, [r0, #0]
    79e4:	7900      	ldrb	r0, [r0, #4]
    79e6:	0602      	lsls	r2, r0, #24
    79e8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79ec:	f000 0001 	and.w	r0, r0, #1
    79f0:	1800      	adds	r0, r0, r0
    79f2:	b2c0      	uxtb	r0, r0
    79f4:	f040 0001 	orr.w	r0, r0, #1
    79f8:	4770      	bx	lr
    79fa:	0000      	.short	0x0000
    79fc:	20000020 	.word	0x20000020

00007a00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7a00:	b510      	push	{r4, lr}
    7a02:	f004 fe33 	bl	c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7a06:	2200      	movs	r2, #0
    7a08:	4b08      	ldr	r3, [pc, #32]	; (7a2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7a0a:	4611      	mov	r1, r2
    7a0c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7a10:	4284      	cmp	r4, r0
    7a12:	d303      	bcc.n	7a1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7a14:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a18:	7882      	ldrb	r2, [r0, #2]
    7a1a:	e003      	b.n	7a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a1c:	1c49      	adds	r1, r1, #1
    7a1e:	b2c9      	uxtb	r1, r1
    7a20:	290c      	cmp	r1, #12
    7a22:	d3f3      	bcc.n	7a0c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a24:	4802      	ldr	r0, [pc, #8]	; (7a30 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a26:	7002      	strb	r2, [r0, #0]
    7a28:	bd10      	pop	{r4, pc}
    7a2a:	0000      	.short	0x0000
    7a2c:	000107cc 	.word	0x000107cc
    7a30:	2000035d 	.word	0x2000035d

00007a34 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7a34:	4802      	ldr	r0, [pc, #8]	; (7a40 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    7a36:	7800      	ldrb	r0, [r0, #0]
    7a38:	f000 0007 	and.w	r0, r0, #7
    7a3c:	4770      	bx	lr
    7a3e:	0000      	.short	0x0000
    7a40:	2000035d 	.word	0x2000035d

00007a44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7a44:	b570      	push	{r4, r5, r6, lr}
    7a46:	4605      	mov	r5, r0
    7a48:	4616      	mov	r6, r2
    7a4a:	460c      	mov	r4, r1
    7a4c:	2002      	movs	r0, #2
    7a4e:	f000 f9b7 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a52:	4906      	ldr	r1, [pc, #24]	; (7a6c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7a54:	2001      	movs	r0, #1
    7a56:	1ef6      	subs	r6, r6, #3
    7a58:	7008      	strb	r0, [r1, #0]
    7a5a:	4805      	ldr	r0, [pc, #20]	; (7a70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a5c:	6006      	str	r6, [r0, #0]
    7a5e:	4804      	ldr	r0, [pc, #16]	; (7a70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a60:	3808      	subs	r0, #8
    7a62:	6005      	str	r5, [r0, #0]
    7a64:	1f00      	subs	r0, r0, #4
    7a66:	6004      	str	r4, [r0, #0]
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	0000      	.short	0x0000
    7a6c:	2000035e 	.word	0x2000035e
    7a70:	4000f510 	.word	0x4000f510

00007a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7a74:	b510      	push	{r4, lr}
    7a76:	4c0c      	ldr	r4, [pc, #48]	; (7aa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7a78:	7820      	ldrb	r0, [r4, #0]
    7a7a:	b180      	cbz	r0, 7a9e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7a7c:	490b      	ldr	r1, [pc, #44]	; (7aac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7a7e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a82:	6008      	str	r0, [r1, #0]
    7a84:	f000 f86a 	bl	7b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7a88:	2100      	movs	r1, #0
    7a8a:	b120      	cbz	r0, 7a96 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7a8c:	2001      	movs	r0, #1
    7a8e:	7060      	strb	r0, [r4, #1]
    7a90:	4807      	ldr	r0, [pc, #28]	; (7ab0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7a92:	6800      	ldr	r0, [r0, #0]
    7a94:	e001      	b.n	7a9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7a96:	7061      	strb	r1, [r4, #1]
    7a98:	2010      	movs	r0, #16
    7a9a:	70a0      	strb	r0, [r4, #2]
    7a9c:	7021      	strb	r1, [r4, #0]
    7a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aa2:	2000      	movs	r0, #0
    7aa4:	f000 b98c 	b.w	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7aa8:	2000035e 	.word	0x2000035e
    7aac:	4001f508 	.word	0x4001f508
    7ab0:	4000f400 	.word	0x4000f400

00007ab4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7ab4:	b510      	push	{r4, lr}
    7ab6:	2002      	movs	r0, #2
    7ab8:	f000 f982 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7abc:	4904      	ldr	r1, [pc, #16]	; (7ad0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7abe:	2001      	movs	r0, #1
    7ac0:	7008      	strb	r0, [r1, #0]
    7ac2:	f000 f859 	bl	7b78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7ac6:	4903      	ldr	r1, [pc, #12]	; (7ad4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7ac8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7acc:	6008      	str	r0, [r1, #0]
    7ace:	bd10      	pop	{r4, pc}
    7ad0:	2000035e 	.word	0x2000035e
    7ad4:	4001f504 	.word	0x4001f504

00007ad8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7ad8:	4803      	ldr	r0, [pc, #12]	; (7ae8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7ada:	2100      	movs	r1, #0
    7adc:	7001      	strb	r1, [r0, #0]
    7ade:	7041      	strb	r1, [r0, #1]
    7ae0:	2110      	movs	r1, #16
    7ae2:	7081      	strb	r1, [r0, #2]
    7ae4:	4770      	bx	lr
    7ae6:	0000      	.short	0x0000
    7ae8:	2000035e 	.word	0x2000035e

00007aec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7aec:	4807      	ldr	r0, [pc, #28]	; (7b0c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7aee:	b510      	push	{r4, lr}
    7af0:	7801      	ldrb	r1, [r0, #0]
    7af2:	b141      	cbz	r1, 7b06 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7af4:	f000 f832 	bl	7b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7af8:	b118      	cbz	r0, 7b02 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7afa:	4805      	ldr	r0, [pc, #20]	; (7b10 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7afc:	6800      	ldr	r0, [r0, #0]
    7afe:	b2c0      	uxtb	r0, r0
    7b00:	bd10      	pop	{r4, pc}
    7b02:	2010      	movs	r0, #16
    7b04:	bd10      	pop	{r4, pc}
    7b06:	7880      	ldrb	r0, [r0, #2]
    7b08:	bd10      	pop	{r4, pc}
    7b0a:	0000      	.short	0x0000
    7b0c:	2000035e 	.word	0x2000035e
    7b10:	4000f400 	.word	0x4000f400

00007b14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7b14:	4808      	ldr	r0, [pc, #32]	; (7b38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7b16:	b510      	push	{r4, lr}
    7b18:	7801      	ldrb	r1, [r0, #0]
    7b1a:	b159      	cbz	r1, 7b34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7b1c:	4807      	ldr	r0, [pc, #28]	; (7b3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7b1e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b22:	b128      	cbz	r0, 7b30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7b24:	f000 f80c 	bl	7b40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b28:	2800      	cmp	r0, #0
    7b2a:	d000      	beq.n	7b2e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7b2c:	2001      	movs	r0, #1
    7b2e:	bd10      	pop	{r4, pc}
    7b30:	2002      	movs	r0, #2
    7b32:	bd10      	pop	{r4, pc}
    7b34:	7840      	ldrb	r0, [r0, #1]
    7b36:	bd10      	pop	{r4, pc}
    7b38:	2000035e 	.word	0x2000035e
    7b3c:	4000f000 	.word	0x4000f000
    7b40:	4805      	ldr	r0, [pc, #20]	; (7b58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7b42:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7b46:	b111      	cbz	r1, 7b4e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7b48:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7b4c:	b108      	cbz	r0, 7b52 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7b4e:	2000      	movs	r0, #0
    7b50:	4770      	bx	lr
    7b52:	2001      	movs	r0, #1
    7b54:	4770      	bx	lr
    7b56:	0000      	.short	0x0000
    7b58:	4000f000 	.word	0x4000f000
    7b5c:	4805      	ldr	r0, [pc, #20]	; (7b74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7b5e:	b510      	push	{r4, lr}
    7b60:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b64:	b120      	cbz	r0, 7b70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b66:	f7ff ffeb 	bl	7b40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b6a:	b108      	cbz	r0, 7b70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b6c:	2001      	movs	r0, #1
    7b6e:	bd10      	pop	{r4, pc}
    7b70:	2000      	movs	r0, #0
    7b72:	bd10      	pop	{r4, pc}
    7b74:	4000f000 	.word	0x4000f000
    7b78:	4804      	ldr	r0, [pc, #16]	; (7b8c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7b7a:	2100      	movs	r1, #0
    7b7c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7b80:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7b84:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7b88:	4770      	bx	lr
    7b8a:	0000      	.short	0x0000
    7b8c:	4000f000 	.word	0x4000f000

00007b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b94:	4604      	mov	r4, r0
    7b96:	461e      	mov	r6, r3
    7b98:	4690      	mov	r8, r2
    7b9a:	460f      	mov	r7, r1
    7b9c:	2001      	movs	r0, #1
    7b9e:	f000 f90f 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7ba2:	4d1e      	ldr	r5, [pc, #120]	; (7c1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7ba4:	481e      	ldr	r0, [pc, #120]	; (7c20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7ba6:	f004 0103 	and.w	r1, r4, #3
    7baa:	712e      	strb	r6, [r5, #4]
    7bac:	6800      	ldr	r0, [r0, #0]
    7bae:	0432      	lsls	r2, r6, #16
    7bb0:	f361 0007 	bfi	r0, r1, #0, #8
    7bb4:	f366 200f 	bfi	r0, r6, #8, #8
    7bb8:	0c00      	lsrs	r0, r0, #16
    7bba:	4e1a      	ldr	r6, [pc, #104]	; (7c24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7bbc:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7bc0:	4308      	orrs	r0, r1
    7bc2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7bc6:	4818      	ldr	r0, [pc, #96]	; (7c28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7bc8:	6007      	str	r7, [r0, #0]
    7bca:	f009 f91f 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7bce:	b938      	cbnz	r0, 7be0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7bd0:	4815      	ldr	r0, [pc, #84]	; (7c28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7bd2:	3010      	adds	r0, #16
    7bd4:	6801      	ldr	r1, [r0, #0]
    7bd6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7bda:	ea41 0108 	orr.w	r1, r1, r8
    7bde:	6001      	str	r1, [r0, #0]
    7be0:	f000 f8e4 	bl	7dac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7be4:	b10c      	cbz	r4, 7bea <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7be6:	2c04      	cmp	r4, #4
    7be8:	d107      	bne.n	7bfa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7bea:	4811      	ldr	r0, [pc, #68]	; (7c30 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7bec:	490d      	ldr	r1, [pc, #52]	; (7c24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7bee:	4a0f      	ldr	r2, [pc, #60]	; (7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7bf0:	1d09      	adds	r1, r1, #4
    7bf2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7bf6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7bfa:	2001      	movs	r0, #1
    7bfc:	7068      	strb	r0, [r5, #1]
    7bfe:	70ec      	strb	r4, [r5, #3]
    7c00:	b11c      	cbz	r4, 7c0a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c02:	2c01      	cmp	r4, #1
    7c04:	d001      	beq.n	7c0a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c06:	2c02      	cmp	r4, #2
    7c08:	d106      	bne.n	7c18 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7c0a:	7028      	strb	r0, [r5, #0]
    7c0c:	2100      	movs	r1, #0
    7c0e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7c12:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7c16:	6030      	str	r0, [r6, #0]
    7c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c1c:	20000361 	.word	0x20000361
    7c20:	00007dbc 	.word	0x00007dbc
    7c24:	4000f000 	.word	0x4000f000
    7c28:	4000f508 	.word	0x4000f508
    7c2c:	4000f100 	.word	0x4000f100
    7c30:	4001f088 	.word	0x4001f088

00007c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7c34:	b570      	push	{r4, r5, r6, lr}
    7c36:	4a1c      	ldr	r2, [pc, #112]	; (7ca8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7c38:	7853      	ldrb	r3, [r2, #1]
    7c3a:	b1a3      	cbz	r3, 7c66 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7c3c:	4b1b      	ldr	r3, [pc, #108]	; (7cac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7c3e:	6019      	str	r1, [r3, #0]
    7c40:	1d19      	adds	r1, r3, #4
    7c42:	6008      	str	r0, [r1, #0]
    7c44:	2501      	movs	r5, #1
    7c46:	7095      	strb	r5, [r2, #2]
    7c48:	4610      	mov	r0, r2
    7c4a:	78d6      	ldrb	r6, [r2, #3]
    7c4c:	4b18      	ldr	r3, [pc, #96]	; (7cb0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c4e:	7800      	ldrb	r0, [r0, #0]
    7c50:	4c18      	ldr	r4, [pc, #96]	; (7cb4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7c52:	2100      	movs	r1, #0
    7c54:	b156      	cbz	r6, 7c6c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7c56:	2e04      	cmp	r6, #4
    7c58:	d01b      	beq.n	7c92 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7c5a:	b308      	cbz	r0, 7ca0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7c5c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c60:	0668      	lsls	r0, r5, #25
    7c62:	6018      	str	r0, [r3, #0]
    7c64:	bd70      	pop	{r4, r5, r6, pc}
    7c66:	f240 11bd 	movw	r1, #445	; 0x1bd
    7c6a:	e01a      	b.n	7ca2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c6c:	b178      	cbz	r0, 7c8e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7c6e:	4620      	mov	r0, r4
    7c70:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c74:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7c78:	601e      	str	r6, [r3, #0]
    7c7a:	1271      	asrs	r1, r6, #9
    7c7c:	f008 fe1e 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c80:	2800      	cmp	r0, #0
    7c82:	d0ef      	beq.n	7c64 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7c84:	6065      	str	r5, [r4, #4]
    7c86:	480a      	ldr	r0, [pc, #40]	; (7cb0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c88:	1d00      	adds	r0, r0, #4
    7c8a:	6006      	str	r6, [r0, #0]
    7c8c:	bd70      	pop	{r4, r5, r6, pc}
    7c8e:	21b3      	movs	r1, #179	; 0xb3
    7c90:	e007      	b.n	7ca2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c92:	7015      	strb	r5, [r2, #0]
    7c94:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c98:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7c9c:	6025      	str	r5, [r4, #0]
    7c9e:	bd70      	pop	{r4, r5, r6, pc}
    7ca0:	21c6      	movs	r1, #198	; 0xc6
    7ca2:	203c      	movs	r0, #60	; 0x3c
    7ca4:	f7f8 fede 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ca8:	20000361 	.word	0x20000361
    7cac:	4000f50c 	.word	0x4000f50c
    7cb0:	4001f504 	.word	0x4001f504
    7cb4:	4000f000 	.word	0x4000f000

00007cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7cb8:	b570      	push	{r4, r5, r6, lr}
    7cba:	4d05      	ldr	r5, [pc, #20]	; (7cd0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7cbc:	2400      	movs	r4, #0
    7cbe:	7828      	ldrb	r0, [r5, #0]
    7cc0:	b110      	cbz	r0, 7cc8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7cc2:	f000 f873 	bl	7dac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7cc6:	702c      	strb	r4, [r5, #0]
    7cc8:	706c      	strb	r4, [r5, #1]
    7cca:	70ac      	strb	r4, [r5, #2]
    7ccc:	bd70      	pop	{r4, r5, r6, pc}
    7cce:	0000      	.short	0x0000
    7cd0:	20000361 	.word	0x20000361

00007cd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7cd4:	4802      	ldr	r0, [pc, #8]	; (7ce0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7cd6:	2100      	movs	r1, #0
    7cd8:	7001      	strb	r1, [r0, #0]
    7cda:	7041      	strb	r1, [r0, #1]
    7cdc:	7081      	strb	r1, [r0, #2]
    7cde:	4770      	bx	lr
    7ce0:	20000361 	.word	0x20000361

00007ce4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7ce4:	480b      	ldr	r0, [pc, #44]	; (7d14 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7ce6:	b510      	push	{r4, lr}
    7ce8:	7800      	ldrb	r0, [r0, #0]
    7cea:	b158      	cbz	r0, 7d04 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7cec:	f44f 7182 	mov.w	r1, #260	; 0x104
    7cf0:	4809      	ldr	r0, [pc, #36]	; (7d18 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7cf2:	f008 fde3 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cf6:	b140      	cbz	r0, 7d0a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7cf8:	4808      	ldr	r0, [pc, #32]	; (7d1c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7cfa:	6800      	ldr	r0, [r0, #0]
    7cfc:	2800      	cmp	r0, #0
    7cfe:	d000      	beq.n	7d02 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7d00:	2001      	movs	r0, #1
    7d02:	bd10      	pop	{r4, pc}
    7d04:	f240 2123 	movw	r1, #547	; 0x223
    7d08:	e001      	b.n	7d0e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7d0a:	f44f 7109 	mov.w	r1, #548	; 0x224
    7d0e:	203c      	movs	r0, #60	; 0x3c
    7d10:	f7f8 fea8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d14:	20000361 	.word	0x20000361
    7d18:	4000f000 	.word	0x4000f000
    7d1c:	4000f400 	.word	0x4000f400

00007d20 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7d20:	4801      	ldr	r0, [pc, #4]	; (7d28 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7d22:	2101      	movs	r1, #1
    7d24:	6081      	str	r1, [r0, #8]
    7d26:	4770      	bx	lr
    7d28:	4000f000 	.word	0x4000f000

00007d2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d30:	481b      	ldr	r0, [pc, #108]	; (7da0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7d32:	7800      	ldrb	r0, [r0, #0]
    7d34:	b1d8      	cbz	r0, 7d6e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7d36:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7da4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7d3a:	f44f 7682 	mov.w	r6, #260	; 0x104
    7d3e:	4631      	mov	r1, r6
    7d40:	4640      	mov	r0, r8
    7d42:	f008 fdbb 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d46:	2800      	cmp	r0, #0
    7d48:	d128      	bne.n	7d9c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7d4a:	2002      	movs	r0, #2
    7d4c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7d50:	4c15      	ldr	r4, [pc, #84]	; (7da8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7d52:	6820      	ldr	r0, [r4, #0]
    7d54:	43c0      	mvns	r0, r0
    7d56:	f340 1500 	sbfx	r5, r0, #4, #1
    7d5a:	6820      	ldr	r0, [r4, #0]
    7d5c:	f040 0010 	orr.w	r0, r0, #16
    7d60:	6020      	str	r0, [r4, #0]
    7d62:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7d66:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7d6a:	1c6d      	adds	r5, r5, #1
    7d6c:	e008      	b.n	7d80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7d6e:	f240 212f 	movw	r1, #559	; 0x22f
    7d72:	203c      	movs	r0, #60	; 0x3c
    7d74:	f7f8 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d78:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7d7c:	f009 f886 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7d80:	4631      	mov	r1, r6
    7d82:	4640      	mov	r0, r8
    7d84:	f008 fd9a 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d88:	2800      	cmp	r0, #0
    7d8a:	d0f5      	beq.n	7d78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7d8c:	b91d      	cbnz	r5, 7d96 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7d8e:	6820      	ldr	r0, [r4, #0]
    7d90:	f020 0010 	bic.w	r0, r0, #16
    7d94:	6020      	str	r0, [r4, #0]
    7d96:	2002      	movs	r0, #2
    7d98:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7da0:	20000361 	.word	0x20000361
    7da4:	4000f000 	.word	0x4000f000
    7da8:	e000ed10 	.word	0xe000ed10
    7dac:	4902      	ldr	r1, [pc, #8]	; (7db8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7dae:	4801      	ldr	r0, [pc, #4]	; (7db4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7db0:	6008      	str	r0, [r1, #0]
    7db2:	4770      	bx	lr
    7db4:	02020000 	.word	0x02020000
    7db8:	4001f508 	.word	0x4001f508
    7dbc:	00010000 	.word	0x00010000

00007dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7dc0:	b510      	push	{r4, lr}
    7dc2:	4604      	mov	r4, r0
    7dc4:	f000 f820 	bl	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7dc8:	2c00      	cmp	r4, #0
    7dca:	d00e      	beq.n	7dea <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7dcc:	4a0b      	ldr	r2, [pc, #44]	; (7dfc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7dce:	480b      	ldr	r0, [pc, #44]	; (7dfc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7dd0:	490b      	ldr	r1, [pc, #44]	; (7e00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7dd2:	3214      	adds	r2, #20
    7dd4:	2c01      	cmp	r4, #1
    7dd6:	d005      	beq.n	7de4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7dd8:	2c02      	cmp	r4, #2
    7dda:	d007      	beq.n	7dec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7ddc:	2182      	movs	r1, #130	; 0x82
    7dde:	203d      	movs	r0, #61	; 0x3d
    7de0:	f7f8 fe40 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de4:	2302      	movs	r3, #2
    7de6:	6003      	str	r3, [r0, #0]
    7de8:	6011      	str	r1, [r2, #0]
    7dea:	bd10      	pop	{r4, pc}
    7dec:	2303      	movs	r3, #3
    7dee:	6003      	str	r3, [r0, #0]
    7df0:	6011      	str	r1, [r2, #0]
    7df2:	4904      	ldr	r1, [pc, #16]	; (7e04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7df4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7df8:	6008      	str	r0, [r1, #0]
    7dfa:	bd10      	pop	{r4, pc}
    7dfc:	4000f500 	.word	0x4000f500
    7e00:	20001a1c 	.word	0x20001a1c
    7e04:	4001f504 	.word	0x4001f504
    7e08:	4805      	ldr	r0, [pc, #20]	; (7e20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7e0a:	b510      	push	{r4, lr}
    7e0c:	2100      	movs	r1, #0
    7e0e:	6001      	str	r1, [r0, #0]
    7e10:	6001      	str	r1, [r0, #0]
    7e12:	f7ff ff51 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7e16:	4903      	ldr	r1, [pc, #12]	; (7e24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7e18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e1c:	6008      	str	r0, [r1, #0]
    7e1e:	bd10      	pop	{r4, pc}
    7e20:	4000f500 	.word	0x4000f500
    7e24:	4001f508 	.word	0x4001f508

00007e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7e28:	4805      	ldr	r0, [pc, #20]	; (7e40 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7e2a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7e2e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7e32:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7e36:	2100      	movs	r1, #0
    7e38:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7e3c:	4770      	bx	lr
    7e3e:	0000      	.short	0x0000
    7e40:	40001000 	.word	0x40001000

00007e44 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7e44:	4904      	ldr	r1, [pc, #16]	; (7e58 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7e46:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7e4a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7e4e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7e52:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7e56:	4770      	bx	lr
    7e58:	40001000 	.word	0x40001000

00007e5c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7e5c:	4902      	ldr	r1, [pc, #8]	; (7e68 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7e5e:	5c08      	ldrb	r0, [r1, r0]
    7e60:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7e64:	4770      	bx	lr
    7e66:	0000      	.short	0x0000
    7e68:	00008b2e 	.word	0x00008b2e

00007e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e6e:	4c24      	ldr	r4, [pc, #144]	; (7f00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7e70:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7e74:	f010 0f10 	tst.w	r0, #16
    7e78:	d001      	beq.n	7e7e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7e7a:	2701      	movs	r7, #1
    7e7c:	e000      	b.n	7e80 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7e7e:	2700      	movs	r7, #0
    7e80:	2010      	movs	r0, #16
    7e82:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7e86:	2002      	movs	r0, #2
    7e88:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7e8c:	481d      	ldr	r0, [pc, #116]	; (7f04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7e8e:	2500      	movs	r5, #0
    7e90:	491d      	ldr	r1, [pc, #116]	; (7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7e92:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7e96:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7e9a:	6008      	str	r0, [r1, #0]
    7e9c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ea0:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ea4:	f010 0fff 	tst.w	r0, #255	; 0xff
    7ea8:	d019      	beq.n	7ede <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7eaa:	20ff      	movs	r0, #255	; 0xff
    7eac:	f88d 0000 	strb.w	r0, [sp]
    7eb0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7eb4:	2001      	movs	r0, #1
    7eb6:	6120      	str	r0, [r4, #16]
    7eb8:	e005      	b.n	7ec6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7eba:	bf00      	nop
    7ebc:	f89d 0000 	ldrb.w	r0, [sp]
    7ec0:	1e40      	subs	r0, r0, #1
    7ec2:	f88d 0000 	strb.w	r0, [sp]
    7ec6:	f89d 0000 	ldrb.w	r0, [sp]
    7eca:	b128      	cbz	r0, 7ed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7ecc:	4631      	mov	r1, r6
    7ece:	4620      	mov	r0, r4
    7ed0:	f008 fd23 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d0f1      	beq.n	7ebc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7ed8:	f89d 0000 	ldrb.w	r0, [sp]
    7edc:	b158      	cbz	r0, 7ef6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7ede:	f000 fc15 	bl	870c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7ee2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7ee6:	f000 fda3 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7eea:	2f00      	cmp	r7, #0
    7eec:	d002      	beq.n	7ef4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7eee:	2010      	movs	r0, #16
    7ef0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ef6:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7efa:	203e      	movs	r0, #62	; 0x3e
    7efc:	f7f8 fdb2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f00:	40001000 	.word	0x40001000
    7f04:	20001128 	.word	0x20001128
    7f08:	4001f508 	.word	0x4001f508

00007f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f10:	4d18      	ldr	r5, [pc, #96]	; (7f74 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7f12:	4607      	mov	r7, r0
    7f14:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7f18:	07c2      	lsls	r2, r0, #31
    7f1a:	d00f      	beq.n	7f3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7f1c:	4c16      	ldr	r4, [pc, #88]	; (7f78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7f1e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7f22:	f042 0201 	orr.w	r2, r2, #1
    7f26:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7f2a:	f040 0002 	orr.w	r0, r0, #2
    7f2e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7f32:	2601      	movs	r6, #1
    7f34:	b13f      	cbz	r7, 7f46 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7f36:	2f01      	cmp	r7, #1
    7f38:	d00b      	beq.n	7f52 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7f3a:	e010      	b.n	7f5e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f3c:	f240 7185 	movw	r1, #1925	; 0x785
    7f40:	203e      	movs	r0, #62	; 0x3e
    7f42:	f7f8 fd8f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f46:	4608      	mov	r0, r1
    7f48:	f000 fdcc 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7f4c:	726e      	strb	r6, [r5, #9]
    7f4e:	6026      	str	r6, [r4, #0]
    7f50:	e005      	b.n	7f5e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f52:	4608      	mov	r0, r1
    7f54:	f000 fdac 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7f58:	2002      	movs	r0, #2
    7f5a:	7268      	strb	r0, [r5, #9]
    7f5c:	6066      	str	r6, [r4, #4]
    7f5e:	4807      	ldr	r0, [pc, #28]	; (7f7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f60:	64c6      	str	r6, [r0, #76]	; 0x4c
    7f62:	4806      	ldr	r0, [pc, #24]	; (7f7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f64:	300c      	adds	r0, #12
    7f66:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7f6a:	4638      	mov	r0, r7
    7f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f70:	f000 bd30 	b.w	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7f74:	20001128 	.word	0x20001128
    7f78:	40001000 	.word	0x40001000
    7f7c:	40008000 	.word	0x40008000

00007f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f84:	4c2c      	ldr	r4, [pc, #176]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7f86:	0006      	movs	r6, r0
    7f88:	4d2c      	ldr	r5, [pc, #176]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7f8a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7f8e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    7f92:	f040 0002 	orr.w	r0, r0, #2
    7f96:	4689      	mov	r9, r1
    7f98:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7f9c:	f04f 0700 	mov.w	r7, #0
    7fa0:	d002      	beq.n	7fa8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7fa2:	2e01      	cmp	r6, #1
    7fa4:	d020      	beq.n	7fe8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7fa6:	e036      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fa8:	4608      	mov	r0, r1
    7faa:	f000 fd9b 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7fae:	2001      	movs	r0, #1
    7fb0:	7260      	strb	r0, [r4, #9]
    7fb2:	79e0      	ldrb	r0, [r4, #7]
    7fb4:	2801      	cmp	r0, #1
    7fb6:	d105      	bne.n	7fc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7fb8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7fbc:	f040 0008 	orr.w	r0, r0, #8
    7fc0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7fc6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7fca:	62a0      	str	r0, [r4, #40]	; 0x28
    7fcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7fd0:	f8c8 0000 	str.w	r0, [r8]
    7fd4:	491b      	ldr	r1, [pc, #108]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fd6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7fde:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7fe2:	fbb0 f7f1 	udiv	r7, r0, r1
    7fe6:	e016      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fe8:	4608      	mov	r0, r1
    7fea:	f000 fd61 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7fee:	2002      	movs	r0, #2
    7ff0:	7260      	strb	r0, [r4, #9]
    7ff2:	79e0      	ldrb	r0, [r4, #7]
    7ff4:	2801      	cmp	r0, #1
    7ff6:	d105      	bne.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7ff8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7ffc:	f040 0004 	orr.w	r0, r0, #4
    8000:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8006:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    800a:	62a0      	str	r0, [r4, #40]	; 0x28
    800c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    8010:	f8c8 0000 	str.w	r0, [r8]
    8014:	2729      	movs	r7, #41	; 0x29
    8016:	f000 fbe5 	bl	87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    801a:	f008 fdf8 	bl	10c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    801e:	b120      	cbz	r0, 802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    8020:	f7ff ff24 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8024:	2000      	movs	r0, #0
    8026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    802a:	2100      	movs	r1, #0
    802c:	4630      	mov	r0, r6
    802e:	f000 fcd1 	bl	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8032:	4638      	mov	r0, r7
    8034:	e7f7      	b.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    8036:	0000      	.short	0x0000
    8038:	20001128 	.word	0x20001128
    803c:	40001000 	.word	0x40001000
    8040:	4001f504 	.word	0x4001f504
    8044:	00008b28 	.word	0x00008b28

00008048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8048:	b510      	push	{r4, lr}
    804a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    804c:	4901      	ldr	r1, [pc, #4]	; (8054 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    804e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    8052:	bd10      	pop	{r4, pc}
    8054:	20001118 	.word	0x20001118

00008058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	4c0f      	ldr	r4, [pc, #60]	; (8098 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    805c:	4603      	mov	r3, r0
    805e:	2002      	movs	r0, #2
    8060:	7320      	strb	r0, [r4, #12]
    8062:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8066:	2096      	movs	r0, #150	; 0x96
    8068:	f894 1020 	ldrb.w	r1, [r4, #32]
    806c:	7d22      	ldrb	r2, [r4, #20]
    806e:	2d01      	cmp	r5, #1
    8070:	d00e      	beq.n	8090 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8072:	f000 fd95 	bl	8ba0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8076:	6120      	str	r0, [r4, #16]
    8078:	4808      	ldr	r0, [pc, #32]	; (809c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    807a:	2100      	movs	r1, #0
    807c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8080:	6921      	ldr	r1, [r4, #16]
    8082:	69e0      	ldr	r0, [r4, #28]
    8084:	4408      	add	r0, r1
    8086:	4905      	ldr	r1, [pc, #20]	; (809c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8088:	1d09      	adds	r1, r1, #4
    808a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    808e:	bd70      	pop	{r4, r5, r6, pc}
    8090:	f000 fda4 	bl	8bdc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8094:	e7ef      	b.n	8076 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    8096:	0000      	.short	0x0000
    8098:	20001128 	.word	0x20001128
    809c:	40008000 	.word	0x40008000

000080a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    80a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a4:	2238      	movs	r2, #56	; 0x38
    80a6:	2100      	movs	r1, #0
    80a8:	4813      	ldr	r0, [pc, #76]	; (80f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    80aa:	f008 ffc6 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ae:	f000 fcbf 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    80b2:	f008 fe80 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    80b6:	4d11      	ldr	r5, [pc, #68]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80b8:	4e10      	ldr	r6, [pc, #64]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80ba:	2400      	movs	r4, #0
    80bc:	4f0f      	ldr	r7, [pc, #60]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80be:	3508      	adds	r5, #8
    80c0:	3610      	adds	r6, #16
    80c2:	b928      	cbnz	r0, 80d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    80c4:	f008 fe8e 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    80c8:	b910      	cbnz	r0, 80d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    80ca:	f008 fe95 	bl	10df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    80ce:	b108      	cbz	r0, 80d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    80d0:	2224      	movs	r2, #36	; 0x24
    80d2:	e006      	b.n	80e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80d4:	f008 fed0 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    80d8:	b910      	cbnz	r0, 80e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    80da:	f008 fec3 	bl	10e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    80de:	b140      	cbz	r0, 80f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    80e0:	2240      	movs	r2, #64	; 0x40
    80e2:	21ff      	movs	r1, #255	; 0xff
    80e4:	4638      	mov	r0, r7
    80e6:	f008 ffa8 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ea:	602c      	str	r4, [r5, #0]
    80ec:	6034      	str	r4, [r6, #0]
    80ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80f2:	2238      	movs	r2, #56	; 0x38
    80f4:	e7f5      	b.n	80e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80f6:	0000      	.short	0x0000
    80f8:	20001128 	.word	0x20001128
    80fc:	40000e00 	.word	0x40000e00

00008100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8100:	4801      	ldr	r0, [pc, #4]	; (8108 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8102:	69c0      	ldr	r0, [r0, #28]
    8104:	4770      	bx	lr
    8106:	0000      	.short	0x0000
    8108:	20001128 	.word	0x20001128

0000810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    810c:	b510      	push	{r4, lr}
    810e:	f000 fc43 	bl	8998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8112:	f7ff feab 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8116:	f004 fd27 	bl	cb68 <mpsl_fem_disable>
    811a:	b130      	cbz	r0, 812a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    811c:	1c40      	adds	r0, r0, #1
    811e:	d004      	beq.n	812a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8120:	f240 516d 	movw	r1, #1389	; 0x56d
    8124:	203e      	movs	r0, #62	; 0x3e
    8126:	f7f8 fc9d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    812a:	480f      	ldr	r0, [pc, #60]	; (8168 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    812c:	4a0f      	ldr	r2, [pc, #60]	; (816c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    812e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8130:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8134:	6011      	str	r1, [r2, #0]
    8136:	2400      	movs	r4, #0
    8138:	6284      	str	r4, [r0, #40]	; 0x28
    813a:	7304      	strb	r4, [r0, #12]
    813c:	61c4      	str	r4, [r0, #28]
    813e:	6184      	str	r4, [r0, #24]
    8140:	f000 fc2a 	bl	8998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8144:	480a      	ldr	r0, [pc, #40]	; (8170 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8146:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    814a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    814e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    8152:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8156:	2001      	movs	r0, #1
    8158:	f008 fbce 	bl	108f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    815c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8160:	2001      	movs	r0, #1
    8162:	f008 bbbc 	b.w	108de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8166:	0000      	.short	0x0000
    8168:	20001128 	.word	0x20001128
    816c:	4001f508 	.word	0x4001f508
    8170:	40008000 	.word	0x40008000

00008174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    8174:	b570      	push	{r4, r5, r6, lr}
    8176:	2001      	movs	r0, #1
    8178:	f008 fbbe 	bl	108f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    817c:	4c37      	ldr	r4, [pc, #220]	; (825c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    817e:	2000      	movs	r0, #0
    8180:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8184:	2001      	movs	r0, #1
    8186:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    818a:	f008 fe4b 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    818e:	4d34      	ldr	r5, [pc, #208]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8190:	b118      	cbz	r0, 819a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    8192:	6828      	ldr	r0, [r5, #0]
    8194:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8198:	6028      	str	r0, [r5, #0]
    819a:	f008 fe37 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    819e:	b128      	cbz	r0, 81ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    81a0:	6828      	ldr	r0, [r5, #0]
    81a2:	4930      	ldr	r1, [pc, #192]	; (8264 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    81a4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    81a8:	4308      	orrs	r0, r1
    81aa:	6028      	str	r0, [r5, #0]
    81ac:	f008 fe4a 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    81b0:	b138      	cbz	r0, 81c2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    81b2:	482b      	ldr	r0, [pc, #172]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81b4:	1d00      	adds	r0, r0, #4
    81b6:	6801      	ldr	r1, [r0, #0]
    81b8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    81bc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    81c0:	6001      	str	r1, [r0, #0]
    81c2:	4927      	ldr	r1, [pc, #156]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81c4:	4828      	ldr	r0, [pc, #160]	; (8268 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    81c6:	313c      	adds	r1, #60	; 0x3c
    81c8:	6008      	str	r0, [r1, #0]
    81ca:	f004 fd07 	bl	cbdc <mpsl_fem_device_config_254_apply_get>
    81ce:	b140      	cbz	r0, 81e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    81d4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    81d8:	1c41      	adds	r1, r0, #1
    81da:	d002      	beq.n	81e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81dc:	4920      	ldr	r1, [pc, #128]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81de:	3110      	adds	r1, #16
    81e0:	6008      	str	r0, [r1, #0]
    81e2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    81e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    81e8:	1c41      	adds	r1, r0, #1
    81ea:	d004      	beq.n	81f6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    81ec:	491f      	ldr	r1, [pc, #124]	; (826c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    81ee:	680a      	ldr	r2, [r1, #0]
    81f0:	f360 4217 	bfi	r2, r0, #16, #8
    81f4:	600a      	str	r2, [r1, #0]
    81f6:	f240 1103 	movw	r1, #259	; 0x103
    81fa:	f240 605b 	movw	r0, #1627	; 0x65b
    81fe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8202:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8206:	2001      	movs	r0, #1
    8208:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    820c:	f000 f842 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8210:	f240 2001 	movw	r0, #513	; 0x201
    8214:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8218:	2002      	movs	r0, #2
    821a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    821e:	4914      	ldr	r1, [pc, #80]	; (8270 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8220:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8224:	6008      	str	r0, [r1, #0]
    8226:	4913      	ldr	r1, [pc, #76]	; (8274 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8228:	2000      	movs	r0, #0
    822a:	4d13      	ldr	r5, [pc, #76]	; (8278 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    822c:	8608      	strh	r0, [r1, #48]	; 0x30
    822e:	3110      	adds	r1, #16
    8230:	61c8      	str	r0, [r1, #28]
    8232:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8236:	7028      	strb	r0, [r5, #0]
    8238:	2001      	movs	r0, #1
    823a:	f008 fb50 	bl	108de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    823e:	2010      	movs	r0, #16
    8240:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8244:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8248:	2002      	movs	r0, #2
    824a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    824e:	6868      	ldr	r0, [r5, #4]
    8250:	2800      	cmp	r0, #0
    8252:	d002      	beq.n	825a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    8254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8258:	4700      	bx	r0
    825a:	bd70      	pop	{r4, r5, r6, pc}
    825c:	40001000 	.word	0x40001000
    8260:	4000173c 	.word	0x4000173c
    8264:	80000096 	.word	0x80000096
    8268:	8900002c 	.word	0x8900002c
    826c:	4000158c 	.word	0x4000158c
    8270:	4001f504 	.word	0x4001f504
    8274:	20001118 	.word	0x20001118
    8278:	200002a0 	.word	0x200002a0

0000827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    827c:	4901      	ldr	r1, [pc, #4]	; (8284 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    827e:	7548      	strb	r0, [r1, #21]
    8280:	4770      	bx	lr
    8282:	0000      	.short	0x0000
    8284:	20001128 	.word	0x20001128

00008288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8288:	4901      	ldr	r1, [pc, #4]	; (8290 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    828a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    828e:	4770      	bx	lr
    8290:	00008b7c 	.word	0x00008b7c

00008294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8294:	4908      	ldr	r1, [pc, #32]	; (82b8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    8296:	b510      	push	{r4, lr}
    8298:	7508      	strb	r0, [r1, #20]
    829a:	4908      	ldr	r1, [pc, #32]	; (82bc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    829c:	2801      	cmp	r0, #1
    829e:	d006      	beq.n	82ae <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    82a0:	2802      	cmp	r0, #2
    82a2:	d006      	beq.n	82b2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    82a4:	f640 5186 	movw	r1, #3462	; 0xd86
    82a8:	203e      	movs	r0, #62	; 0x3e
    82aa:	f7f8 fbdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82ae:	2003      	movs	r0, #3
    82b0:	e000      	b.n	82b4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    82b2:	2004      	movs	r0, #4
    82b4:	6008      	str	r0, [r1, #0]
    82b6:	bd10      	pop	{r4, pc}
    82b8:	20001128 	.word	0x20001128
    82bc:	40001510 	.word	0x40001510

000082c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    82c0:	4905      	ldr	r1, [pc, #20]	; (82d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    82c2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    82c6:	4805      	ldr	r0, [pc, #20]	; (82dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    82c8:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    82cc:	f041 0101 	orr.w	r1, r1, #1
    82d0:	7001      	strb	r1, [r0, #0]
    82d2:	f000 ba4d 	b.w	8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    82d6:	0000      	.short	0x0000
    82d8:	40001000 	.word	0x40001000
    82dc:	20001128 	.word	0x20001128

000082e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    82e0:	4901      	ldr	r1, [pc, #4]	; (82e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    82e2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82e6:	4770      	bx	lr
    82e8:	00008b88 	.word	0x00008b88

000082ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    82ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82f0:	4e30      	ldr	r6, [pc, #192]	; (83b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    82f2:	4c31      	ldr	r4, [pc, #196]	; (83b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    82f4:	4688      	mov	r8, r1
    82f6:	0007      	movs	r7, r0
    82f8:	4615      	mov	r5, r2
    82fa:	f04f 0901 	mov.w	r9, #1
    82fe:	d006      	beq.n	830e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8300:	2f01      	cmp	r7, #1
    8302:	d012      	beq.n	832a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8304:	f640 012d 	movw	r1, #2093	; 0x82d
    8308:	203e      	movs	r0, #62	; 0x3e
    830a:	f7f8 fbab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    830e:	4610      	mov	r0, r2
    8310:	f000 fbe8 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8314:	4829      	ldr	r0, [pc, #164]	; (83bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8316:	f884 9009 	strb.w	r9, [r4, #9]
    831a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    831e:	4640      	mov	r0, r8
    8320:	f000 fb8e 	bl	8a40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8324:	4605      	mov	r5, r0
    8326:	4630      	mov	r0, r6
    8328:	e00c      	b.n	8344 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    832a:	4610      	mov	r0, r2
    832c:	f000 fbc0 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8330:	2002      	movs	r0, #2
    8332:	7260      	strb	r0, [r4, #9]
    8334:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8338:	4640      	mov	r0, r8
    833a:	f000 fb81 	bl	8a40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    833e:	4605      	mov	r5, r0
    8340:	481c      	ldr	r0, [pc, #112]	; (83b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8342:	1d00      	adds	r0, r0, #4
    8344:	f000 fb3a 	bl	89bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8348:	f8df 8074 	ldr.w	r8, [pc, #116]	; 83c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    834c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8350:	f8df a074 	ldr.w	sl, [pc, #116]	; 83c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8354:	481b      	ldr	r0, [pc, #108]	; (83c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8356:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    835a:	2010      	movs	r0, #16
    835c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8362:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8366:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    836a:	62a0      	str	r0, [r4, #40]	; 0x28
    836c:	4817      	ldr	r0, [pc, #92]	; (83cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    836e:	6006      	str	r6, [r0, #0]
    8370:	f000 fa38 	bl	87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    8374:	4641      	mov	r1, r8
    8376:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    837a:	4811      	ldr	r0, [pc, #68]	; (83c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    837c:	300c      	adds	r0, #12
    837e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8382:	42a8      	cmp	r0, r5
    8384:	d310      	bcc.n	83a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    8386:	2000      	movs	r0, #0
    8388:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    838c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8390:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8392:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    8396:	62a0      	str	r0, [r4, #40]	; 0x28
    8398:	480c      	ldr	r0, [pc, #48]	; (83cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    839a:	1d00      	adds	r0, r0, #4
    839c:	6006      	str	r6, [r0, #0]
    839e:	f7ff fd65 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    83a2:	2000      	movs	r0, #0
    83a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83a8:	4629      	mov	r1, r5
    83aa:	4638      	mov	r0, r7
    83ac:	f000 fb12 	bl	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    83b0:	2001      	movs	r0, #1
    83b2:	e7f7      	b.n	83a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    83b4:	40001000 	.word	0x40001000
    83b8:	20001128 	.word	0x20001128
    83bc:	00008b28 	.word	0x00008b28
    83c0:	40008000 	.word	0x40008000
    83c4:	40008140 	.word	0x40008140
    83c8:	4001f098 	.word	0x4001f098
    83cc:	4001f504 	.word	0x4001f504

000083d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    83d0:	4b0d      	ldr	r3, [pc, #52]	; (8408 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    83d2:	b510      	push	{r4, lr}
    83d4:	71d8      	strb	r0, [r3, #7]
    83d6:	729a      	strb	r2, [r3, #10]
    83d8:	b151      	cbz	r1, 83f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    83da:	2002      	movs	r0, #2
    83dc:	7218      	strb	r0, [r3, #8]
    83de:	2801      	cmp	r0, #1
    83e0:	d008      	beq.n	83f4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    83e2:	2802      	cmp	r0, #2
    83e4:	d00f      	beq.n	8406 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83e6:	f640 2163 	movw	r1, #2659	; 0xa63
    83ea:	203e      	movs	r0, #62	; 0x3e
    83ec:	f7f8 fb3a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83f0:	2001      	movs	r0, #1
    83f2:	e7f3      	b.n	83dc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    83f4:	7a58      	ldrb	r0, [r3, #9]
    83f6:	2802      	cmp	r0, #2
    83f8:	d105      	bne.n	8406 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83fa:	f000 f97d 	bl	86f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    83fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8402:	f000 bab1 	b.w	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8406:	bd10      	pop	{r4, pc}
    8408:	20001128 	.word	0x20001128

0000840c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    840c:	4902      	ldr	r1, [pc, #8]	; (8418 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    840e:	2000      	movs	r0, #0
    8410:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8414:	4770      	bx	lr
    8416:	0000      	.short	0x0000
    8418:	40008000 	.word	0x40008000

0000841c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    841c:	4904      	ldr	r1, [pc, #16]	; (8430 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    841e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8422:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8426:	4249      	negs	r1, r1
    8428:	7001      	strb	r1, [r0, #0]
    842a:	2001      	movs	r0, #1
    842c:	4770      	bx	lr
    842e:	0000      	.short	0x0000
    8430:	40001000 	.word	0x40001000

00008434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8434:	4903      	ldr	r1, [pc, #12]	; (8444 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8436:	0e02      	lsrs	r2, r0, #24
    8438:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    843c:	0200      	lsls	r0, r0, #8
    843e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8442:	4770      	bx	lr
    8444:	40001000 	.word	0x40001000

00008448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8448:	4901      	ldr	r1, [pc, #4]	; (8450 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    844a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    844e:	4770      	bx	lr
    8450:	40001000 	.word	0x40001000

00008454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8454:	b510      	push	{r4, lr}
    8456:	2200      	movs	r2, #0
    8458:	2901      	cmp	r1, #1
    845a:	d006      	beq.n	846a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    845c:	2902      	cmp	r1, #2
    845e:	d002      	beq.n	8466 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8460:	f240 21d9 	movw	r1, #729	; 0x2d9
    8464:	e014      	b.n	8490 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    846a:	490b      	ldr	r1, [pc, #44]	; (8498 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    846c:	430a      	orrs	r2, r1
    846e:	490b      	ldr	r1, [pc, #44]	; (849c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8470:	600a      	str	r2, [r1, #0]
    8472:	490b      	ldr	r1, [pc, #44]	; (84a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8474:	4308      	orrs	r0, r1
    8476:	4909      	ldr	r1, [pc, #36]	; (849c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8478:	1d09      	adds	r1, r1, #4
    847a:	6008      	str	r0, [r1, #0]
    847c:	4809      	ldr	r0, [pc, #36]	; (84a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    847e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8482:	b2c0      	uxtb	r0, r0
    8484:	2803      	cmp	r0, #3
    8486:	d001      	beq.n	848c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8488:	280b      	cmp	r0, #11
    848a:	d104      	bne.n	8496 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    848c:	f240 21f1 	movw	r1, #753	; 0x2f1
    8490:	203e      	movs	r0, #62	; 0x3e
    8492:	f7f8 fae7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8496:	bd10      	pop	{r4, pc}
    8498:	00100108 	.word	0x00100108
    849c:	40001514 	.word	0x40001514
    84a0:	02030000 	.word	0x02030000
    84a4:	40001000 	.word	0x40001000

000084a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    84a8:	4901      	ldr	r1, [pc, #4]	; (84b0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    84aa:	7588      	strb	r0, [r1, #22]
    84ac:	4770      	bx	lr
    84ae:	0000      	.short	0x0000
    84b0:	20001128 	.word	0x20001128

000084b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    84b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84b8:	4853      	ldr	r0, [pc, #332]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84ba:	f04f 0a01 	mov.w	sl, #1
    84be:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    84c2:	4851      	ldr	r0, [pc, #324]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84c4:	300c      	adds	r0, #12
    84c6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    84ca:	f008 fb9e 	bl	10c0a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    84ce:	4c4f      	ldr	r4, [pc, #316]	; (860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    84d0:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    84d4:	f000 f91a 	bl	870c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    84d8:	494d      	ldr	r1, [pc, #308]	; (8610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    84da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84dc:	6008      	str	r0, [r1, #0]
    84de:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8614 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    84e2:	2000      	movs	r0, #0
    84e4:	62a0      	str	r0, [r4, #40]	; 0x28
    84e6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    84ea:	f240 131d 	movw	r3, #285	; 0x11d
    84ee:	439a      	bics	r2, r3
    84f0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    84f4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    84f8:	f000 f988 	bl	880c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    84fc:	4605      	mov	r5, r0
    84fe:	4842      	ldr	r0, [pc, #264]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8500:	3008      	adds	r0, #8
    8502:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8506:	4e40      	ldr	r6, [pc, #256]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8508:	61e0      	str	r0, [r4, #28]
    850a:	1d36      	adds	r6, r6, #4
    850c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8510:	61a0      	str	r0, [r4, #24]
    8512:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    8516:	7d21      	ldrb	r1, [r4, #20]
    8518:	f884 1020 	strb.w	r1, [r4, #32]
    851c:	7a61      	ldrb	r1, [r4, #9]
    851e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8522:	46a1      	mov	r9, r4
    8524:	2400      	movs	r4, #0
    8526:	4639      	mov	r1, r7
    8528:	4628      	mov	r0, r5
    852a:	f000 f9e3 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    852e:	b910      	cbnz	r0, 8536 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8530:	f8c8 a010 	str.w	sl, [r8, #16]
    8534:	2401      	movs	r4, #1
    8536:	4f35      	ldr	r7, [pc, #212]	; (860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8538:	07e8      	lsls	r0, r5, #31
    853a:	f1a7 0710 	sub.w	r7, r7, #16
    853e:	d002      	beq.n	8546 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8540:	6838      	ldr	r0, [r7, #0]
    8542:	4780      	blx	r0
    8544:	e034      	b.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8546:	07a8      	lsls	r0, r5, #30
    8548:	d529      	bpl.n	859e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    854a:	0768      	lsls	r0, r5, #29
    854c:	d421      	bmi.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    854e:	f008 fc79 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8552:	b9f0      	cbnz	r0, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8554:	f008 fc66 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8558:	b9d8      	cbnz	r0, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855a:	482f      	ldr	r0, [pc, #188]	; (8618 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    855c:	6800      	ldr	r0, [r0, #0]
    855e:	f3c0 5242 	ubfx	r2, r0, #21, #3
    8562:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8566:	f000 0c0f 	and.w	ip, r0, #15
    856a:	f3c0 1303 	ubfx	r3, r0, #4, #4
    856e:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8572:	b171      	cbz	r1, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8574:	f1bc 0f00 	cmp.w	ip, #0
    8578:	d003      	beq.n	8582 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    857a:	b113      	cbz	r3, 8582 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    857c:	f1b8 0f00 	cmp.w	r8, #0
    8580:	d107      	bne.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8582:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8586:	2801      	cmp	r0, #1
    8588:	d103      	bne.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    858a:	2a03      	cmp	r2, #3
    858c:	d201      	bcs.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    858e:	f045 0504 	orr.w	r5, r5, #4
    8592:	f345 0080 	sbfx	r0, r5, #2, #1
    8596:	4621      	mov	r1, r4
    8598:	1c40      	adds	r0, r0, #1
    859a:	687a      	ldr	r2, [r7, #4]
    859c:	e007      	b.n	85ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    859e:	f015 0f28 	tst.w	r5, #40	; 0x28
    85a2:	d005      	beq.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    85a4:	f345 1140 	sbfx	r1, r5, #5, #1
    85a8:	68ba      	ldr	r2, [r7, #8]
    85aa:	4620      	mov	r0, r4
    85ac:	1c49      	adds	r1, r1, #1
    85ae:	4790      	blx	r2
    85b0:	06e8      	lsls	r0, r5, #27
    85b2:	d501      	bpl.n	85b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    85b4:	68f8      	ldr	r0, [r7, #12]
    85b6:	4780      	blx	r0
    85b8:	f899 1009 	ldrb.w	r1, [r9, #9]
    85bc:	4648      	mov	r0, r9
    85be:	2902      	cmp	r1, #2
    85c0:	d120      	bne.n	8604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    85c2:	7b01      	ldrb	r1, [r0, #12]
    85c4:	2900      	cmp	r1, #0
    85c6:	d01d      	beq.n	8604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    85c8:	2902      	cmp	r1, #2
    85ca:	d004      	beq.n	85d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    85cc:	2901      	cmp	r1, #1
    85ce:	d009      	beq.n	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    85d0:	f640 4166 	movw	r1, #3174	; 0xc66
    85d4:	e00d      	b.n	85f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    85d6:	69c1      	ldr	r1, [r0, #28]
    85d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    85dc:	4408      	add	r0, r1
    85de:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    85e2:	e00b      	b.n	85fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    85e4:	6901      	ldr	r1, [r0, #16]
    85e6:	f8d9 001c 	ldr.w	r0, [r9, #28]
    85ea:	4281      	cmp	r1, r0
    85ec:	d804      	bhi.n	85f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    85ee:	f640 4167 	movw	r1, #3175	; 0xc67
    85f2:	203e      	movs	r0, #62	; 0x3e
    85f4:	f7f8 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85f8:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    85fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8600:	f000 b9bc 	b.w	897c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8608:	40008000 	.word	0x40008000
    860c:	20001128 	.word	0x20001128
    8610:	4001f508 	.word	0x4001f508
    8614:	40001000 	.word	0x40001000
    8618:	40001450 	.word	0x40001450

0000861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    861c:	b570      	push	{r4, r5, r6, lr}
    861e:	4b16      	ldr	r3, [pc, #88]	; (8678 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8620:	888c      	ldrh	r4, [r1, #4]
    8622:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    8626:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    862a:	780c      	ldrb	r4, [r1, #0]
    862c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8630:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8634:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8638:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    863c:	2401      	movs	r4, #1
    863e:	4084      	lsls	r4, r0
    8640:	b2c9      	uxtb	r1, r1
    8642:	b2e5      	uxtb	r5, r4
    8644:	4329      	orrs	r1, r5
    8646:	b132      	cbz	r2, 8656 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8648:	2a01      	cmp	r2, #1
    864a:	d00a      	beq.n	8662 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    864c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8650:	203e      	movs	r0, #62	; 0x3e
    8652:	f7f8 fa07 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8656:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    865a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    865e:	43a0      	bics	r0, r4
    8660:	e004      	b.n	866c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    8662:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8666:	f3c0 2007 	ubfx	r0, r0, #8, #8
    866a:	4328      	orrs	r0, r5
    866c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8670:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    8674:	bd70      	pop	{r4, r5, r6, pc}
    8676:	0000      	.short	0x0000
    8678:	40001000 	.word	0x40001000

0000867c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    867c:	4901      	ldr	r1, [pc, #4]	; (8684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    867e:	2001      	movs	r0, #1
    8680:	7008      	strb	r0, [r1, #0]
    8682:	4770      	bx	lr
    8684:	200002a0 	.word	0x200002a0
    8688:	480b      	ldr	r0, [pc, #44]	; (86b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    868a:	7d81      	ldrb	r1, [r0, #22]
    868c:	480b      	ldr	r0, [pc, #44]	; (86bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    868e:	5c40      	ldrb	r0, [r0, r1]
    8690:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8694:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8698:	d204      	bcs.n	86a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    869a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    869e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    86a2:	e001      	b.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    86a4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    86a8:	4a05      	ldr	r2, [pc, #20]	; (86c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    86aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    86ae:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    86b2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    86b6:	4770      	bx	lr
    86b8:	20001128 	.word	0x20001128
    86bc:	00008b2e 	.word	0x00008b2e
    86c0:	40001000 	.word	0x40001000
    86c4:	b508      	push	{r3, lr}
    86c6:	490b      	ldr	r1, [pc, #44]	; (86f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    86c8:	466b      	mov	r3, sp
    86ca:	f991 2015 	ldrsb.w	r2, [r1, #21]
    86ce:	7d89      	ldrb	r1, [r1, #22]
    86d0:	f000 fad0 	bl	8c74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    86d4:	f99d 0000 	ldrsb.w	r0, [sp]
    86d8:	f000 faa0 	bl	8c1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    86dc:	f10d 0001 	add.w	r0, sp, #1
    86e0:	f004 fa66 	bl	cbb0 <mpsl_fem_pa_gain_set>
    86e4:	2800      	cmp	r0, #0
    86e6:	d004      	beq.n	86f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    86e8:	f240 6115 	movw	r1, #1557	; 0x615
    86ec:	203e      	movs	r0, #62	; 0x3e
    86ee:	f7f8 f9b9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86f2:	bd08      	pop	{r3, pc}
    86f4:	20001128 	.word	0x20001128
    86f8:	4803      	ldr	r0, [pc, #12]	; (8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    86fa:	7a01      	ldrb	r1, [r0, #8]
    86fc:	2901      	cmp	r1, #1
    86fe:	d102      	bne.n	8706 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8700:	7a80      	ldrb	r0, [r0, #10]
    8702:	f7ff bfdf 	b.w	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8706:	4770      	bx	lr
    8708:	20001128 	.word	0x20001128
    870c:	480d      	ldr	r0, [pc, #52]	; (8744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    870e:	b510      	push	{r4, lr}
    8710:	7a40      	ldrb	r0, [r0, #9]
    8712:	2801      	cmp	r0, #1
    8714:	d00c      	beq.n	8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8716:	2802      	cmp	r0, #2
    8718:	d113      	bne.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    871a:	f004 fa2b 	bl	cb74 <mpsl_fem_lna_configuration_clear>
    871e:	2800      	cmp	r0, #0
    8720:	d00f      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8722:	1c40      	adds	r0, r0, #1
    8724:	d00d      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8726:	f640 01c1 	movw	r1, #2241	; 0x8c1
    872a:	203e      	movs	r0, #62	; 0x3e
    872c:	f7f8 f99a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8730:	f004 fa32 	bl	cb98 <mpsl_fem_pa_configuration_clear>
    8734:	2800      	cmp	r0, #0
    8736:	d004      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8738:	1c40      	adds	r0, r0, #1
    873a:	d002      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    873c:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8740:	e7f3      	b.n	872a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8742:	bd10      	pop	{r4, pc}
    8744:	20001128 	.word	0x20001128
    8748:	4808      	ldr	r0, [pc, #32]	; (876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    874a:	2100      	movs	r1, #0
    874c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8750:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8754:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8758:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    875c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8760:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8764:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8768:	4770      	bx	lr
    876a:	0000      	.short	0x0000
    876c:	40001000 	.word	0x40001000
    8770:	4818      	ldr	r0, [pc, #96]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    8772:	b510      	push	{r4, lr}
    8774:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    8778:	07c1      	lsls	r1, r0, #31
    877a:	d029      	beq.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    877c:	0781      	lsls	r1, r0, #30
    877e:	d514      	bpl.n	87aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    8780:	4815      	ldr	r0, [pc, #84]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8782:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8786:	f041 0101 	orr.w	r1, r1, #1
    878a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    878e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8792:	b2c0      	uxtb	r0, r0
    8794:	280b      	cmp	r0, #11
    8796:	d005      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8798:	280a      	cmp	r0, #10
    879a:	d003      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    879c:	2803      	cmp	r0, #3
    879e:	d001      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    87a0:	2802      	cmp	r0, #2
    87a2:	d115      	bne.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87a4:	f240 613e 	movw	r1, #1598	; 0x63e
    87a8:	e00f      	b.n	87ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    87aa:	0740      	lsls	r0, r0, #29
    87ac:	d510      	bpl.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87ae:	480a      	ldr	r0, [pc, #40]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    87b0:	490a      	ldr	r1, [pc, #40]	; (87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    87b2:	3008      	adds	r0, #8
    87b4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    87b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    87bc:	4808      	ldr	r0, [pc, #32]	; (87e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    87be:	f008 f8b1 	bl	10924 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87c2:	2800      	cmp	r0, #0
    87c4:	d004      	beq.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87c6:	f240 6146 	movw	r1, #1606	; 0x646
    87ca:	203e      	movs	r0, #62	; 0x3e
    87cc:	f7f8 f94a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87d0:	bd10      	pop	{r4, pc}
    87d2:	0000      	.short	0x0000
    87d4:	20001128 	.word	0x20001128
    87d8:	40001000 	.word	0x40001000
    87dc:	4001f098 	.word	0x4001f098
    87e0:	40008000 	.word	0x40008000
    87e4:	4808      	ldr	r0, [pc, #32]	; (8808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    87e6:	4601      	mov	r1, r0
    87e8:	79c2      	ldrb	r2, [r0, #7]
    87ea:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    87ee:	b112      	cbz	r2, 87f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    87f0:	2a01      	cmp	r2, #1
    87f2:	d003      	beq.n	87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    87f4:	e006      	b.n	8804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    87f6:	f041 0102 	orr.w	r1, r1, #2
    87fa:	e001      	b.n	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    87fc:	f041 0104 	orr.w	r1, r1, #4
    8800:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8804:	f7ff bfb4 	b.w	8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8808:	20001128 	.word	0x20001128
    880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8810:	4d34      	ldr	r5, [pc, #208]	; (88e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8812:	2400      	movs	r4, #0
    8814:	7b28      	ldrb	r0, [r5, #12]
    8816:	b138      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8818:	f44f 71a2 	mov.w	r1, #324	; 0x144
    881c:	4832      	ldr	r0, [pc, #200]	; (88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    881e:	f008 f881 	bl	10924 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8822:	b108      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8824:	2601      	movs	r6, #1
    8826:	e000      	b.n	882a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    8828:	2600      	movs	r6, #0
    882a:	7a68      	ldrb	r0, [r5, #9]
    882c:	4f2f      	ldr	r7, [pc, #188]	; (88ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    882e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8832:	2801      	cmp	r0, #1
    8834:	d002      	beq.n	883c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8836:	2802      	cmp	r0, #2
    8838:	d006      	beq.n	8848 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    883a:	e016      	b.n	886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    883c:	4638      	mov	r0, r7
    883e:	f008 f86c 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8842:	b190      	cbz	r0, 886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8844:	2408      	movs	r4, #8
    8846:	e010      	b.n	886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8848:	4638      	mov	r0, r7
    884a:	f008 f866 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    884e:	b100      	cbz	r0, 8852 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8850:	2402      	movs	r4, #2
    8852:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    8856:	43c0      	mvns	r0, r0
    8858:	f340 0000 	sbfx	r0, r0, #0, #1
    885c:	1c40      	adds	r0, r0, #1
    885e:	d101      	bne.n	8864 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    8860:	f044 0404 	orr.w	r4, r4, #4
    8864:	b10e      	cbz	r6, 886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8866:	f044 0401 	orr.w	r4, r4, #1
    886a:	f014 0f0b 	tst.w	r4, #11
    886e:	d107      	bne.n	8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    8870:	f44f 7188 	mov.w	r1, #272	; 0x110
    8874:	4638      	mov	r0, r7
    8876:	f008 f850 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    887a:	b108      	cbz	r0, 8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    887c:	f044 0410 	orr.w	r4, r4, #16
    8880:	481b      	ldr	r0, [pc, #108]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    8882:	7800      	ldrb	r0, [r0, #0]
    8884:	b1f8      	cbz	r0, 88c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    8886:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    888a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    888e:	d007      	beq.n	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8890:	f44f 718a 	mov.w	r1, #276	; 0x114
    8894:	4638      	mov	r0, r7
    8896:	f008 f840 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    889a:	b108      	cbz	r0, 88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    889c:	2001      	movs	r0, #1
    889e:	e000      	b.n	88a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    88a0:	2000      	movs	r0, #0
    88a2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    88a6:	b13e      	cbz	r6, 88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    88a8:	f44f 718c 	mov.w	r1, #280	; 0x118
    88ac:	4638      	mov	r0, r7
    88ae:	f008 f834 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    88b2:	b108      	cbz	r0, 88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    88b4:	2001      	movs	r0, #1
    88b6:	e000      	b.n	88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    88b8:	2000      	movs	r0, #0
    88ba:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    88be:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    88c2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    88c6:	f7ff ff3f 	bl	8748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    88ca:	06e0      	lsls	r0, r4, #27
    88cc:	d506      	bpl.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88ce:	0720      	lsls	r0, r4, #28
    88d0:	d404      	bmi.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88d2:	7a68      	ldrb	r0, [r5, #9]
    88d4:	2801      	cmp	r0, #1
    88d6:	d101      	bne.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88d8:	f044 0420 	orr.w	r4, r4, #32
    88dc:	4620      	mov	r0, r4
    88de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88e2:	0000      	.short	0x0000
    88e4:	20001128 	.word	0x20001128
    88e8:	40008000 	.word	0x40008000
    88ec:	40001000 	.word	0x40001000
    88f0:	200002a0 	.word	0x200002a0
    88f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88f8:	4c1a      	ldr	r4, [pc, #104]	; (8964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    88fa:	460d      	mov	r5, r1
    88fc:	7a21      	ldrb	r1, [r4, #8]
    88fe:	b129      	cbz	r1, 890c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8900:	f010 0f11 	tst.w	r0, #17
    8904:	d007      	beq.n	8916 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    8906:	f7ff fab1 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    890a:	e024      	b.n	8956 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    890c:	f000 f890 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8910:	2000      	movs	r0, #0
    8912:	7320      	strb	r0, [r4, #12]
    8914:	e01f      	b.n	8956 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8916:	2901      	cmp	r1, #1
    8918:	d001      	beq.n	891e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    891a:	2601      	movs	r6, #1
    891c:	e000      	b.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    891e:	2600      	movs	r6, #0
    8920:	79e0      	ldrb	r0, [r4, #7]
    8922:	2801      	cmp	r0, #1
    8924:	d00e      	beq.n	8944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    8926:	2700      	movs	r7, #0
    8928:	f000 f882 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    892c:	2196      	movs	r1, #150	; 0x96
    892e:	4630      	mov	r0, r6
    8930:	f000 f894 	bl	8a5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8934:	4601      	mov	r1, r0
    8936:	b14f      	cbz	r7, 894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8938:	353b      	adds	r5, #59	; 0x3b
    893a:	428d      	cmp	r5, r1
    893c:	d904      	bls.n	8948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    893e:	2000      	movs	r0, #0
    8940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8944:	2701      	movs	r7, #1
    8946:	e7ef      	b.n	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8948:	2001      	movs	r0, #1
    894a:	71e0      	strb	r0, [r4, #7]
    894c:	7aa2      	ldrb	r2, [r4, #10]
    894e:	4630      	mov	r0, r6
    8950:	f7ff fccc 	bl	82ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8954:	b108      	cbz	r0, 895a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    8956:	2001      	movs	r0, #1
    8958:	e7f2      	b.n	8940 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    895a:	f640 21c4 	movw	r1, #2756	; 0xac4
    895e:	203e      	movs	r0, #62	; 0x3e
    8960:	f7f8 f880 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8964:	20001128 	.word	0x20001128
    8968:	4803      	ldr	r0, [pc, #12]	; (8978 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    896a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    896e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8972:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8976:	4770      	bx	lr
    8978:	40001000 	.word	0x40001000
    897c:	4804      	ldr	r0, [pc, #16]	; (8990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    897e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8980:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8984:	6281      	str	r1, [r0, #40]	; 0x28
    8986:	4903      	ldr	r1, [pc, #12]	; (8994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    8988:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    898c:	6008      	str	r0, [r1, #0]
    898e:	4770      	bx	lr
    8990:	20001128 	.word	0x20001128
    8994:	4001f504 	.word	0x4001f504
    8998:	4a07      	ldr	r2, [pc, #28]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    899a:	2000      	movs	r0, #0
    899c:	3208      	adds	r2, #8
    899e:	4906      	ldr	r1, [pc, #24]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89a4:	1d0a      	adds	r2, r1, #4
    89a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    89ae:	4902      	ldr	r1, [pc, #8]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89b0:	310c      	adds	r1, #12
    89b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    89b6:	4770      	bx	lr
    89b8:	40008000 	.word	0x40008000
    89bc:	4903      	ldr	r1, [pc, #12]	; (89cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    89be:	79c9      	ldrb	r1, [r1, #7]
    89c0:	2900      	cmp	r1, #0
    89c2:	d102      	bne.n	89ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    89c4:	4902      	ldr	r1, [pc, #8]	; (89d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    89c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    89ca:	4770      	bx	lr
    89cc:	20001128 	.word	0x20001128
    89d0:	4001f098 	.word	0x4001f098
    89d4:	b510      	push	{r4, lr}
    89d6:	4a14      	ldr	r2, [pc, #80]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89d8:	b120      	cbz	r0, 89e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    89da:	2801      	cmp	r0, #1
    89dc:	d011      	beq.n	8a02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    89de:	f240 7169 	movw	r1, #1897	; 0x769
    89e2:	e01c      	b.n	8a1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    89e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89ec:	490f      	ldr	r1, [pc, #60]	; (8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89ee:	480e      	ldr	r0, [pc, #56]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89f0:	f004 f8d8 	bl	cba4 <mpsl_fem_pa_configuration_set>
    89f4:	2800      	cmp	r0, #0
    89f6:	d015      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89f8:	1c40      	adds	r0, r0, #1
    89fa:	d013      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89fc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8a00:	e00d      	b.n	8a1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8a02:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a06:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a0a:	4908      	ldr	r1, [pc, #32]	; (8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8a0c:	4806      	ldr	r0, [pc, #24]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8a0e:	f004 f8b7 	bl	cb80 <mpsl_fem_lna_configuration_set>
    8a12:	2800      	cmp	r0, #0
    8a14:	d006      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a16:	1c40      	adds	r0, r0, #1
    8a18:	d004      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a1a:	f240 7165 	movw	r1, #1893	; 0x765
    8a1e:	203e      	movs	r0, #62	; 0x3e
    8a20:	f7f8 f820 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a24:	bd10      	pop	{r4, pc}
    8a26:	0000      	.short	0x0000
    8a28:	200002a8 	.word	0x200002a8
    8a2c:	00008b58 	.word	0x00008b58
    8a30:	4802      	ldr	r0, [pc, #8]	; (8a3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8a32:	2100      	movs	r1, #0
    8a34:	71c1      	strb	r1, [r0, #7]
    8a36:	7201      	strb	r1, [r0, #8]
    8a38:	7241      	strb	r1, [r0, #9]
    8a3a:	4770      	bx	lr
    8a3c:	20001128 	.word	0x20001128
    8a40:	4a05      	ldr	r2, [pc, #20]	; (8a58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8a42:	79d2      	ldrb	r2, [r2, #7]
    8a44:	2a01      	cmp	r2, #1
    8a46:	d006      	beq.n	8a56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a4c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8a50:	fbb1 f1f2 	udiv	r1, r1, r2
    8a54:	1a40      	subs	r0, r0, r1
    8a56:	4770      	bx	lr
    8a58:	20001128 	.word	0x20001128
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	4c13      	ldr	r4, [pc, #76]	; (8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    8a60:	4603      	mov	r3, r0
    8a62:	460d      	mov	r5, r1
    8a64:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8a68:	2000      	movs	r0, #0
    8a6a:	b15a      	cbz	r2, 8a84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8a6c:	4621      	mov	r1, r4
    8a6e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a72:	b163      	cbz	r3, 8a8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    8a74:	2b01      	cmp	r3, #1
    8a76:	d111      	bne.n	8a9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    8a78:	2a01      	cmp	r2, #1
    8a7a:	4628      	mov	r0, r5
    8a7c:	d012      	beq.n	8aa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8a7e:	f007 ff56 	bl	1092e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a82:	e009      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a84:	f640 016e 	movw	r1, #2158	; 0x86e
    8a88:	203e      	movs	r0, #62	; 0x3e
    8a8a:	f7f7 ffeb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a8e:	2a01      	cmp	r2, #1
    8a90:	4628      	mov	r0, r5
    8a92:	d004      	beq.n	8a9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8a94:	f007 ff59 	bl	1094a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a98:	69e1      	ldr	r1, [r4, #28]
    8a9a:	4408      	add	r0, r1
    8a9c:	bd70      	pop	{r4, r5, r6, pc}
    8a9e:	f000 f8d1 	bl	8c44 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8aa2:	e7f9      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8aa4:	f000 f8c0 	bl	8c28 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8aa8:	e7f6      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8aaa:	0000      	.short	0x0000
    8aac:	20001128 	.word	0x20001128
    8ab0:	b510      	push	{r4, lr}
    8ab2:	f7ff fbef 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8ab6:	f7ff fde7 	bl	8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8aba:	f7ff fe1d 	bl	86f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8abe:	f7ff ff53 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8ac2:	f008 f9bf 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8ac6:	2800      	cmp	r0, #0
    8ac8:	d108      	bne.n	8adc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8aca:	f008 f9ab 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8ace:	2800      	cmp	r0, #0
    8ad0:	d104      	bne.n	8adc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8ad2:	4803      	ldr	r0, [pc, #12]	; (8ae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8ad4:	6801      	ldr	r1, [r0, #0]
    8ad6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8ada:	6001      	str	r1, [r0, #0]
    8adc:	bd10      	pop	{r4, pc}
    8ade:	0000      	.short	0x0000
    8ae0:	40001568 	.word	0x40001568
    8ae4:	b510      	push	{r4, lr}
    8ae6:	4604      	mov	r4, r0
    8ae8:	f7ff fbd4 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8aec:	f7ff fdcc 	bl	8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8af0:	4620      	mov	r0, r4
    8af2:	f7ff fde7 	bl	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8af6:	f008 f9a5 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8afa:	2800      	cmp	r0, #0
    8afc:	d00d      	beq.n	8b1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8afe:	4a09      	ldr	r2, [pc, #36]	; (8b24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8b00:	6811      	ldr	r1, [r2, #0]
    8b02:	0650      	lsls	r0, r2, #25
    8b04:	2c02      	cmp	r4, #2
    8b06:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8b0a:	d007      	beq.n	8b1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8b0c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8b10:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b14:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b18:	6010      	str	r0, [r2, #0]
    8b1a:	bd10      	pop	{r4, pc}
    8b1c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8b20:	e7f6      	b.n	8b10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8b22:	0000      	.short	0x0000
    8b24:	40001588 	.word	0x40001588
    8b28:	a62c0000 	.word	0xa62c0000
    8b2c:	0604a1e0 	.word	0x0604a1e0
    8b30:	0e0c0a08 	.word	0x0e0c0a08
    8b34:	16141210 	.word	0x16141210
    8b38:	201e1c18 	.word	0x201e1c18
    8b3c:	28262422 	.word	0x28262422
    8b40:	302e2c2a 	.word	0x302e2c2a
    8b44:	38363432 	.word	0x38363432
    8b48:	403e3c3a 	.word	0x403e3c3a
    8b4c:	48464442 	.word	0x48464442
    8b50:	024e4c4a 	.word	0x024e4c4a
    8b54:	0000501a 	.word	0x0000501a
    8b58:	00000001 	.word	0x00000001
    8b5c:	40001110 	.word	0x40001110
	...
    8b74:	00001e14 	.word	0x00001e14
    8b78:	00001130 	.word	0x00001130
    8b7c:	00000000 	.word	0x00000000
    8b80:	00000028 	.word	0x00000028
    8b84:	00000018 	.word	0x00000018
    8b88:	00000000 	.word	0x00000000
    8b8c:	00001e14 	.word	0x00001e14
    8b90:	00001130 	.word	0x00001130
    8b94:	00000000 	.word	0x00000000
    8b98:	00001770 	.word	0x00001770
    8b9c:	00000fa0 	.word	0x00000fa0

00008ba0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8ba0:	b570      	push	{r4, r5, r6, lr}
    8ba2:	4605      	mov	r5, r0
    8ba4:	4614      	mov	r4, r2
    8ba6:	4608      	mov	r0, r1
    8ba8:	f7ff fb9a 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8bac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8bb0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8bb4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8bb8:	4807      	ldr	r0, [pc, #28]	; (8bd8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8bba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8bbe:	4408      	add	r0, r1
    8bc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bc4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8bc8:	fbb0 f5f1 	udiv	r5, r0, r1
    8bcc:	4620      	mov	r0, r4
    8bce:	f7ff fb5b 	bl	8288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bd2:	4428      	add	r0, r5
    8bd4:	1d40      	adds	r0, r0, #5
    8bd6:	bd70      	pop	{r4, r5, r6, pc}
    8bd8:	00008c68 	.word	0x00008c68

00008bdc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8bdc:	b570      	push	{r4, r5, r6, lr}
    8bde:	4d0e      	ldr	r5, [pc, #56]	; (8c18 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8be0:	461c      	mov	r4, r3
    8be2:	3d08      	subs	r5, #8
    8be4:	4b0c      	ldr	r3, [pc, #48]	; (8c18 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8be6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8bea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bf2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8bf6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8bfa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8bfe:	4418      	add	r0, r3
    8c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c04:	fbb0 f5f1 	udiv	r5, r0, r1
    8c08:	4610      	mov	r0, r2
    8c0a:	f7ff fb3d 	bl	8288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c0e:	4428      	add	r0, r5
    8c10:	4420      	add	r0, r4
    8c12:	1d40      	adds	r0, r0, #5
    8c14:	bd70      	pop	{r4, r5, r6, pc}
    8c16:	0000      	.short	0x0000
    8c18:	00008c68 	.word	0x00008c68

00008c1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c1c:	4901      	ldr	r1, [pc, #4]	; (8c24 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c1e:	b2c0      	uxtb	r0, r0
    8c20:	6008      	str	r0, [r1, #0]
    8c22:	4770      	bx	lr
    8c24:	4000150c 	.word	0x4000150c

00008c28 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8c28:	4a05      	ldr	r2, [pc, #20]	; (8c40 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8c2a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c32:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c36:	fbb1 f1f2 	udiv	r1, r1, r2
    8c3a:	4408      	add	r0, r1
    8c3c:	1e80      	subs	r0, r0, #2
    8c3e:	4770      	bx	lr
    8c40:	00008c60 	.word	0x00008c60

00008c44 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c44:	4a05      	ldr	r2, [pc, #20]	; (8c5c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c46:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c4e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8c52:	fbb1 f1f2 	udiv	r1, r1, r2
    8c56:	4408      	add	r0, r1
    8c58:	4770      	bx	lr
    8c5a:	0000      	.short	0x0000
    8c5c:	00008c60 	.word	0x00008c60
    8c60:	05dc0000 	.word	0x05dc0000
    8c64:	000003e8 	.word	0x000003e8
    8c68:	00000000 	.word	0x00000000
    8c6c:	00001e14 	.word	0x00001e14
    8c70:	00001130 	.word	0x00001130

00008c74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c78:	461e      	mov	r6, r3
    8c7a:	4617      	mov	r7, r2
    8c7c:	460c      	mov	r4, r1
    8c7e:	4605      	mov	r5, r0
    8c80:	f000 f856 	bl	8d30 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c84:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c88:	4680      	mov	r8, r0
    8c8a:	f899 0000 	ldrb.w	r0, [r9]
    8c8e:	42a8      	cmp	r0, r5
    8c90:	d110      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c92:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c96:	4648      	mov	r0, r9
    8c98:	42a1      	cmp	r1, r4
    8c9a:	d10b      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c9c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ca0:	42b9      	cmp	r1, r7
    8ca2:	d107      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ca4:	78c2      	ldrb	r2, [r0, #3]
    8ca6:	4542      	cmp	r2, r8
    8ca8:	d104      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8caa:	8881      	ldrh	r1, [r0, #4]
    8cac:	8031      	strh	r1, [r6, #0]
    8cae:	7980      	ldrb	r0, [r0, #6]
    8cb0:	70b0      	strb	r0, [r6, #2]
    8cb2:	e037      	b.n	8d24 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8cb4:	463a      	mov	r2, r7
    8cb6:	4621      	mov	r1, r4
    8cb8:	2d01      	cmp	r5, #1
    8cba:	d009      	beq.n	8cd0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8cbc:	2d02      	cmp	r5, #2
    8cbe:	d009      	beq.n	8cd4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8cc0:	2d04      	cmp	r5, #4
    8cc2:	d009      	beq.n	8cd8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8cc4:	2d08      	cmp	r5, #8
    8cc6:	d009      	beq.n	8cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8cc8:	f240 4162 	movw	r1, #1122	; 0x462
    8ccc:	2006      	movs	r0, #6
    8cce:	e00c      	b.n	8cea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8cd0:	2000      	movs	r0, #0
    8cd2:	e004      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cd4:	2001      	movs	r0, #1
    8cd6:	e002      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cd8:	2003      	movs	r0, #3
    8cda:	e000      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cdc:	2002      	movs	r0, #2
    8cde:	466b      	mov	r3, sp
    8ce0:	f000 f89e 	bl	8e20 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8ce4:	b118      	cbz	r0, 8cee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8ce6:	213d      	movs	r1, #61	; 0x3d
    8ce8:	2075      	movs	r0, #117	; 0x75
    8cea:	f7f7 febb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cee:	4620      	mov	r0, r4
    8cf0:	f7ff f8b4 	bl	7e5c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8cf4:	4602      	mov	r2, r0
    8cf6:	2300      	movs	r3, #0
    8cf8:	4631      	mov	r1, r6
    8cfa:	f99d 0000 	ldrsb.w	r0, [sp]
    8cfe:	f003 ff63 	bl	cbc8 <mpsl_fem_tx_power_split>
    8d02:	4601      	mov	r1, r0
    8d04:	f889 1007 	strb.w	r1, [r9, #7]
    8d08:	8831      	ldrh	r1, [r6, #0]
    8d0a:	f8a9 1004 	strh.w	r1, [r9, #4]
    8d0e:	78b1      	ldrb	r1, [r6, #2]
    8d10:	f889 1006 	strb.w	r1, [r9, #6]
    8d14:	f889 5000 	strb.w	r5, [r9]
    8d18:	f889 4001 	strb.w	r4, [r9, #1]
    8d1c:	f889 7002 	strb.w	r7, [r9, #2]
    8d20:	f889 8003 	strb.w	r8, [r9, #3]
    8d24:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d2c:	20000366 	.word	0x20000366

00008d30 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d30:	4801      	ldr	r0, [pc, #4]	; (8d38 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d32:	7800      	ldrb	r0, [r0, #0]
    8d34:	4770      	bx	lr
    8d36:	0000      	.short	0x0000
    8d38:	200002c0 	.word	0x200002c0

00008d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d3c:	b570      	push	{r4, r5, r6, lr}
    8d3e:	4c17      	ldr	r4, [pc, #92]	; (8d9c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d40:	7860      	ldrb	r0, [r4, #1]
    8d42:	2800      	cmp	r0, #0
    8d44:	d123      	bne.n	8d8e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d46:	2001      	movs	r0, #1
    8d48:	7060      	strb	r0, [r4, #1]
    8d4a:	f008 f855 	bl	10df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d4e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8d52:	b928      	cbnz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d54:	f008 f886 	bl	10e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8d58:	b910      	cbnz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d5a:	f008 f88d 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8d5e:	b120      	cbz	r0, 8d6a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8d60:	480f      	ldr	r0, [pc, #60]	; (8da0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d62:	6060      	str	r0, [r4, #4]
    8d64:	70a5      	strb	r5, [r4, #2]
    8d66:	2008      	movs	r0, #8
    8d68:	e010      	b.n	8d8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8d6a:	f008 f81a 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d6e:	b940      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d70:	f008 f821 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d74:	b928      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d76:	f008 f835 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d7a:	b910      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d7c:	f008 f846 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d80:	b130      	cbz	r0, 8d90 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d82:	4807      	ldr	r0, [pc, #28]	; (8da0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d84:	3031      	adds	r0, #49	; 0x31
    8d86:	6060      	str	r0, [r4, #4]
    8d88:	70a5      	strb	r5, [r4, #2]
    8d8a:	2004      	movs	r0, #4
    8d8c:	70e0      	strb	r0, [r4, #3]
    8d8e:	bd70      	pop	{r4, r5, r6, pc}
    8d90:	f240 113f 	movw	r1, #319	; 0x13f
    8d94:	2074      	movs	r0, #116	; 0x74
    8d96:	f003 fd57 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d9a:	0000      	.short	0x0000
    8d9c:	200002c0 	.word	0x200002c0
    8da0:	000111c5 	.word	0x000111c5

00008da4 <mpsl_tx_power_radio_supported_power_adjust>:
    8da4:	4a06      	ldr	r2, [pc, #24]	; (8dc0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8da6:	b500      	push	{lr}
    8da8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8dac:	4290      	cmp	r0, r2
    8dae:	db01      	blt.n	8db4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8db0:	4610      	mov	r0, r2
    8db2:	bd00      	pop	{pc}
    8db4:	f000 f808 	bl	8dc8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8db8:	4902      	ldr	r1, [pc, #8]	; (8dc4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8dba:	5608      	ldrsb	r0, [r1, r0]
    8dbc:	bd00      	pop	{pc}
    8dbe:	0000      	.short	0x0000
    8dc0:	200002c0 	.word	0x200002c0
    8dc4:	000111b7 	.word	0x000111b7

00008dc8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8dc8:	4602      	mov	r2, r0
    8dca:	4813      	ldr	r0, [pc, #76]	; (8e18 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8dcc:	b510      	push	{r4, lr}
    8dce:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8dd2:	429a      	cmp	r2, r3
    8dd4:	db01      	blt.n	8dda <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8dd6:	200d      	movs	r0, #13
    8dd8:	bd10      	pop	{r4, pc}
    8dda:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8dde:	429a      	cmp	r2, r3
    8de0:	dc01      	bgt.n	8de6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8de2:	2000      	movs	r0, #0
    8de4:	bd10      	pop	{r4, pc}
    8de6:	b101      	cbz	r1, 8dea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8de8:	2101      	movs	r1, #1
    8dea:	1ad4      	subs	r4, r2, r3
    8dec:	6843      	ldr	r3, [r0, #4]
    8dee:	5d18      	ldrb	r0, [r3, r4]
    8df0:	4c0a      	ldr	r4, [pc, #40]	; (8e1c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8df2:	5624      	ldrsb	r4, [r4, r0]
    8df4:	4294      	cmp	r4, r2
    8df6:	d0f5      	beq.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8df8:	4c08      	ldr	r4, [pc, #32]	; (8e1c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dfa:	4408      	add	r0, r1
    8dfc:	343f      	adds	r4, #63	; 0x3f
    8dfe:	b2c0      	uxtb	r0, r0
    8e00:	b2d2      	uxtb	r2, r2
    8e02:	42a3      	cmp	r3, r4
    8e04:	d1ee      	bne.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e06:	2900      	cmp	r1, #0
    8e08:	d0ec      	beq.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e0a:	2a01      	cmp	r2, #1
    8e0c:	d001      	beq.n	8e12 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8e0e:	2a02      	cmp	r2, #2
    8e10:	d1e8      	bne.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e12:	1c40      	adds	r0, r0, #1
    8e14:	b2c0      	uxtb	r0, r0
    8e16:	bd10      	pop	{r4, pc}
    8e18:	200002c0 	.word	0x200002c0
    8e1c:	000111b7 	.word	0x000111b7

00008e20 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e24:	461c      	mov	r4, r3
    8e26:	4690      	mov	r8, r2
    8e28:	460d      	mov	r5, r1
    8e2a:	4606      	mov	r6, r0
    8e2c:	f06f 0715 	mvn.w	r7, #21
    8e30:	2804      	cmp	r0, #4
    8e32:	d804      	bhi.n	8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e34:	b11c      	cbz	r4, 8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e36:	f007 fd93 	bl	10960 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e3a:	42a8      	cmp	r0, r5
    8e3c:	d802      	bhi.n	8e44 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e3e:	4638      	mov	r0, r7
    8e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e44:	4805      	ldr	r0, [pc, #20]	; (8e5c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e46:	4642      	mov	r2, r8
    8e48:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e4c:	b118      	cbz	r0, 8e56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e4e:	5740      	ldrsb	r0, [r0, r5]
    8e50:	4282      	cmp	r2, r0
    8e52:	dd00      	ble.n	8e56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e54:	4602      	mov	r2, r0
    8e56:	7022      	strb	r2, [r4, #0]
    8e58:	2000      	movs	r0, #0
    8e5a:	e7f1      	b.n	8e40 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8e5c:	20001160 	.word	0x20001160
    8e60:	b570      	push	{r4, r5, r6, lr}
    8e62:	460d      	mov	r5, r1
    8e64:	0004      	movs	r4, r0
    8e66:	d00c      	beq.n	8e82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    8e68:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8e6c:	2100      	movs	r1, #0
    8e6e:	2002      	movs	r0, #2
    8e70:	2d09      	cmp	r5, #9
    8e72:	d26e      	bcs.n	8f52 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    8e74:	e8df f005 	tbb	[pc, r5]
    8e78:	36361108 	.word	0x36361108
    8e7c:	a6897166 	.word	0xa6897166
    8e80:	0094      	.short	0x0094
    8e82:	f44f 71cb 	mov.w	r1, #406	; 0x196
    8e86:	e0f7      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e88:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e8c:	2804      	cmp	r0, #4
    8e8e:	d07b      	beq.n	8f88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    8e90:	2803      	cmp	r0, #3
    8e92:	d0fc      	beq.n	8e8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    8e94:	f240 11a1 	movw	r1, #417	; 0x1a1
    8e98:	e0ee      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e9e:	2804      	cmp	r0, #4
    8ea0:	d004      	beq.n	8eac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8ea2:	2803      	cmp	r0, #3
    8ea4:	d002      	beq.n	8eac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8ea6:	f240 11a5 	movw	r1, #421	; 0x1a5
    8eaa:	e0e5      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8eac:	2005      	movs	r0, #5
    8eae:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8eb2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8eb6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    8eba:	bbb8      	cbnz	r0, 8f2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    8ebc:	2100      	movs	r1, #0
    8ebe:	4620      	mov	r0, r4
    8ec0:	f007 fdaf 	bl	10a22 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    8ec4:	7820      	ldrb	r0, [r4, #0]
    8ec6:	2801      	cmp	r0, #1
    8ec8:	d007      	beq.n	8eda <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    8eca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8ece:	bf00      	nop
    8ed0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    8ed4:	2100      	movs	r1, #0
    8ed6:	6a22      	ldr	r2, [r4, #32]
    8ed8:	e048      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8eda:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    8ede:	f001 fb13 	bl	a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8ee2:	e7f5      	b.n	8ed0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    8ee4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    8ee8:	2904      	cmp	r1, #4
    8eea:	d004      	beq.n	8ef6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8eec:	2903      	cmp	r1, #3
    8eee:	d002      	beq.n	8ef6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8ef0:	f240 11c3 	movw	r1, #451	; 0x1c3
    8ef4:	e0c0      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8ef6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8efa:	b122      	cbz	r2, 8f06 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    8efc:	4621      	mov	r1, r4
    8efe:	4630      	mov	r0, r6
    8f00:	f007 fdcf 	bl	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8f04:	e0b0      	b.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8f06:	2904      	cmp	r1, #4
    8f08:	d000      	beq.n	8f0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    8f0a:	2001      	movs	r0, #1
    8f0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8f10:	6a22      	ldr	r2, [r4, #32]
    8f12:	2d02      	cmp	r5, #2
    8f14:	d00b      	beq.n	8f2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    8f16:	2106      	movs	r1, #6
    8f18:	4630      	mov	r0, r6
    8f1a:	4790      	blx	r2
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d06d      	beq.n	8ffc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f20:	7800      	ldrb	r0, [r0, #0]
    8f22:	2800      	cmp	r0, #0
    8f24:	d06a      	beq.n	8ffc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f26:	f240 11dd 	movw	r1, #477	; 0x1dd
    8f2a:	e0a5      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f2c:	e034      	b.n	8f98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f2e:	2105      	movs	r1, #5
    8f30:	4630      	mov	r0, r6
    8f32:	4790      	blx	r2
    8f34:	2800      	cmp	r0, #0
    8f36:	d070      	beq.n	901a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f38:	7800      	ldrb	r0, [r0, #0]
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d06d      	beq.n	901a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f3e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8f42:	e099      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f48:	2805      	cmp	r0, #5
    8f4a:	d003      	beq.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    8f4c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    8f50:	e092      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f52:	e080      	b.n	9056 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    8f54:	2102      	movs	r1, #2
    8f56:	6a22      	ldr	r2, [r4, #32]
    8f58:	e008      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8f5a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f5e:	2805      	cmp	r0, #5
    8f60:	d002      	beq.n	8f68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    8f62:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8f66:	e087      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f68:	6a22      	ldr	r2, [r4, #32]
    8f6a:	2101      	movs	r1, #1
    8f6c:	4630      	mov	r0, r6
    8f6e:	4790      	blx	r2
    8f70:	4601      	mov	r1, r0
    8f72:	4620      	mov	r0, r4
    8f74:	f007 fd00 	bl	10978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8f78:	2802      	cmp	r0, #2
    8f7a:	d075      	beq.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8f7c:	b3e8      	cbz	r0, 8ffa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    8f7e:	2801      	cmp	r0, #1
    8f80:	d06c      	beq.n	905c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    8f82:	f240 212a 	movw	r1, #554	; 0x22a
    8f86:	e077      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f88:	e070      	b.n	906c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    8f8a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f8e:	2805      	cmp	r0, #5
    8f90:	d002      	beq.n	8f98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f92:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8f96:	e06f      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f9c:	f000 b89e 	b.w	90dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    8fa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8fa4:	2805      	cmp	r0, #5
    8fa6:	d002      	beq.n	8fae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    8fa8:	f240 11f5 	movw	r1, #501	; 0x1f5
    8fac:	e064      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fae:	6a22      	ldr	r2, [r4, #32]
    8fb0:	210a      	movs	r1, #10
    8fb2:	4630      	mov	r0, r6
    8fb4:	4790      	blx	r2
    8fb6:	4601      	mov	r1, r0
    8fb8:	4620      	mov	r0, r4
    8fba:	f007 fcdd 	bl	10978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8fbe:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    8fc2:	e059      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fc4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    8fc8:	2a05      	cmp	r2, #5
    8fca:	d007      	beq.n	8fdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fcc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8fd0:	b10b      	cbz	r3, 8fd6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    8fd2:	2a03      	cmp	r2, #3
    8fd4:	d002      	beq.n	8fdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fd6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    8fda:	e04d      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fdc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8fe0:	b12a      	cbz	r2, 8fee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    8fe2:	4621      	mov	r1, r4
    8fe4:	4630      	mov	r0, r6
    8fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fea:	f007 bd5a 	b.w	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8fee:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8ff2:	b19a      	cbz	r2, 901c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    8ff4:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8ff8:	e001      	b.n	8ffe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    8ffa:	e032      	b.n	9062 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    8ffc:	e034      	b.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8ffe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9002:	6a22      	ldr	r2, [r4, #32]
    9004:	2108      	movs	r1, #8
    9006:	4630      	mov	r0, r6
    9008:	4790      	blx	r2
    900a:	2800      	cmp	r0, #0
    900c:	d037      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    900e:	7800      	ldrb	r0, [r0, #0]
    9010:	2800      	cmp	r0, #0
    9012:	d034      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9014:	f44f 7102 	mov.w	r1, #520	; 0x208
    9018:	e02e      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    901a:	e030      	b.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    901c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    9020:	b15a      	cbz	r2, 903a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    9022:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    9026:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    902a:	4621      	mov	r1, r4
    902c:	f007 fcf7 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    9030:	2800      	cmp	r0, #0
    9032:	d124      	bne.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9034:	f240 210d 	movw	r1, #525	; 0x20d
    9038:	e01e      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    903a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    903e:	6a22      	ldr	r2, [r4, #32]
    9040:	2107      	movs	r1, #7
    9042:	4630      	mov	r0, r6
    9044:	4790      	blx	r2
    9046:	2800      	cmp	r0, #0
    9048:	d019      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    904a:	7800      	ldrb	r0, [r0, #0]
    904c:	2800      	cmp	r0, #0
    904e:	d016      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9050:	f44f 7105 	mov.w	r1, #532	; 0x214
    9054:	e010      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9056:	f240 2119 	movw	r1, #537	; 0x219
    905a:	e00d      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    905c:	2104      	movs	r1, #4
    905e:	6a22      	ldr	r2, [r4, #32]
    9060:	e784      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9062:	2103      	movs	r1, #3
    9064:	6a22      	ldr	r2, [r4, #32]
    9066:	e781      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9068:	2d00      	cmp	r5, #0
    906a:	d108      	bne.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    906c:	f007 fdcf 	bl	10c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    9070:	2800      	cmp	r0, #0
    9072:	d004      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9074:	f240 2133 	movw	r1, #563	; 0x233
    9078:	206a      	movs	r0, #106	; 0x6a
    907a:	f003 fbe5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    907e:	bd70      	pop	{r4, r5, r6, pc}
    9080:	2800      	cmp	r0, #0
    9082:	d019      	beq.n	90b8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    9084:	7803      	ldrb	r3, [r0, #0]
    9086:	4913      	ldr	r1, [pc, #76]	; (90d4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    9088:	4a13      	ldr	r2, [pc, #76]	; (90d8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    908a:	b113      	cbz	r3, 9092 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    908c:	2b01      	cmp	r3, #1
    908e:	d00e      	beq.n	90ae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    9090:	e011      	b.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9092:	7903      	ldrb	r3, [r0, #4]
    9094:	2b01      	cmp	r3, #1
    9096:	d000      	beq.n	909a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    9098:	b96b      	cbnz	r3, 90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    909a:	7943      	ldrb	r3, [r0, #5]
    909c:	b10b      	cbz	r3, 90a2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    909e:	2b01      	cmp	r3, #1
    90a0:	d109      	bne.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90a2:	6883      	ldr	r3, [r0, #8]
    90a4:	3b64      	subs	r3, #100	; 0x64
    90a6:	428b      	cmp	r3, r1
    90a8:	d205      	bcs.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90aa:	68c0      	ldr	r0, [r0, #12]
    90ac:	e00e      	b.n	90cc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    90ae:	7903      	ldrb	r3, [r0, #4]
    90b0:	2b01      	cmp	r3, #1
    90b2:	d002      	beq.n	90ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    90b4:	b10b      	cbz	r3, 90ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    90b6:	2000      	movs	r0, #0
    90b8:	4770      	bx	lr
    90ba:	7943      	ldrb	r3, [r0, #5]
    90bc:	b10b      	cbz	r3, 90c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    90be:	2b01      	cmp	r3, #1
    90c0:	d1f9      	bne.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90c2:	68c3      	ldr	r3, [r0, #12]
    90c4:	3b64      	subs	r3, #100	; 0x64
    90c6:	428b      	cmp	r3, r1
    90c8:	d2f5      	bcs.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90ca:	6880      	ldr	r0, [r0, #8]
    90cc:	4290      	cmp	r0, r2
    90ce:	d8f2      	bhi.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90d0:	2001      	movs	r0, #1
    90d2:	4770      	bx	lr
    90d4:	0001863d 	.word	0x0001863d
    90d8:	0f423fff 	.word	0x0f423fff
    90dc:	b510      	push	{r4, lr}
    90de:	4c05      	ldr	r4, [pc, #20]	; (90f4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    90e0:	6820      	ldr	r0, [r4, #0]
    90e2:	b110      	cbz	r0, 90ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    90e4:	4780      	blx	r0
    90e6:	2000      	movs	r0, #0
    90e8:	6020      	str	r0, [r4, #0]
    90ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90ee:	f002 b8c1 	b.w	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    90f2:	0000      	.short	0x0000
    90f4:	200002c8 	.word	0x200002c8

000090f8 <mpsl_timeslot_session_open>:
    90f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90fc:	460e      	mov	r6, r1
    90fe:	0005      	movs	r5, r0
    9100:	d004      	beq.n	910c <mpsl_timeslot_session_open+0x14>
    9102:	f000 f847 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9106:	4607      	mov	r7, r0
    9108:	2400      	movs	r4, #0
    910a:	e00b      	b.n	9124 <mpsl_timeslot_session_open+0x2c>
    910c:	f06f 0015 	mvn.w	r0, #21
    9110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9114:	4620      	mov	r0, r4
    9116:	f000 f843 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    911a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    911e:	b130      	cbz	r0, 912e <mpsl_timeslot_session_open+0x36>
    9120:	1c64      	adds	r4, r4, #1
    9122:	b2e4      	uxtb	r4, r4
    9124:	42bc      	cmp	r4, r7
    9126:	d3f5      	bcc.n	9114 <mpsl_timeslot_session_open+0x1c>
    9128:	f06f 000b 	mvn.w	r0, #11
    912c:	e7f0      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    912e:	4627      	mov	r7, r4
    9130:	2cff      	cmp	r4, #255	; 0xff
    9132:	d0f9      	beq.n	9128 <mpsl_timeslot_session_open+0x30>
    9134:	4620      	mov	r0, r4
    9136:	f000 f833 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    913a:	4604      	mov	r4, r0
    913c:	f007 fccc 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    9140:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    9144:	4621      	mov	r1, r4
    9146:	4808      	ldr	r0, [pc, #32]	; (9168 <mpsl_timeslot_session_open+0x70>)
    9148:	f002 f86c 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    914c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9150:	2820      	cmp	r0, #32
    9152:	d006      	beq.n	9162 <mpsl_timeslot_session_open+0x6a>
    9154:	2001      	movs	r0, #1
    9156:	6225      	str	r5, [r4, #32]
    9158:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    915c:	7037      	strb	r7, [r6, #0]
    915e:	2000      	movs	r0, #0
    9160:	e7d6      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    9162:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9166:	e7d3      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    9168:	00008e61 	.word	0x00008e61

0000916c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    916c:	b510      	push	{r4, lr}
    916e:	0782      	lsls	r2, r0, #30
    9170:	d002      	beq.n	9178 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    9172:	f06f 000d 	mvn.w	r0, #13
    9176:	bd10      	pop	{r4, pc}
    9178:	4a05      	ldr	r2, [pc, #20]	; (9190 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    917a:	7011      	strb	r1, [r2, #0]
    917c:	6050      	str	r0, [r2, #4]
    917e:	b128      	cbz	r0, 918c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    9180:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9184:	010a      	lsls	r2, r1, #4
    9186:	2100      	movs	r1, #0
    9188:	f007 ff57 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    918c:	2000      	movs	r0, #0
    918e:	bd10      	pop	{r4, pc}
    9190:	200002cc 	.word	0x200002cc

00009194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    9194:	4801      	ldr	r0, [pc, #4]	; (919c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    9196:	7800      	ldrb	r0, [r0, #0]
    9198:	4770      	bx	lr
    919a:	0000      	.short	0x0000
    919c:	200002cc 	.word	0x200002cc

000091a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    91a0:	4905      	ldr	r1, [pc, #20]	; (91b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    91a2:	780a      	ldrb	r2, [r1, #0]
    91a4:	4290      	cmp	r0, r2
    91a6:	d301      	bcc.n	91ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    91a8:	2000      	movs	r0, #0
    91aa:	4770      	bx	lr
    91ac:	6849      	ldr	r1, [r1, #4]
    91ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    91b2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    91b6:	4770      	bx	lr
    91b8:	200002cc 	.word	0x200002cc

000091bc <MPSL_IRQ_RADIO_Handler>:
    91bc:	490e      	ldr	r1, [pc, #56]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3c>)
    91be:	b510      	push	{r4, lr}
    91c0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    91c4:	2820      	cmp	r0, #32
    91c6:	d012      	beq.n	91ee <MPSL_IRQ_RADIO_Handler+0x32>
    91c8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    91cc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    91d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    91d4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    91d8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    91dc:	6840      	ldr	r0, [r0, #4]
    91de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    91e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    91e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91ea:	2104      	movs	r1, #4
    91ec:	4710      	bx	r2
    91ee:	f640 01bc 	movw	r1, #2236	; 0x8bc
    91f2:	2070      	movs	r0, #112	; 0x70
    91f4:	f003 fb28 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91f8:	20001574 	.word	0x20001574
    91fc:	b570      	push	{r4, r5, r6, lr}
    91fe:	4605      	mov	r5, r0
    9200:	2a20      	cmp	r2, #32
    9202:	d028      	beq.n	9256 <MPSL_IRQ_RADIO_Handler+0x9a>
    9204:	4819      	ldr	r0, [pc, #100]	; (926c <MPSL_IRQ_RADIO_Handler+0xb0>)
    9206:	4c1a      	ldr	r4, [pc, #104]	; (9270 <MPSL_IRQ_RADIO_Handler+0xb4>)
    9208:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    920c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9210:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    9214:	4423      	add	r3, r4
    9216:	2920      	cmp	r1, #32
    9218:	d022      	beq.n	9260 <MPSL_IRQ_RADIO_Handler+0xa4>
    921a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    921e:	7840      	ldrb	r0, [r0, #1]
    9220:	784c      	ldrb	r4, [r1, #1]
    9222:	7048      	strb	r0, [r1, #1]
    9224:	4620      	mov	r0, r4
    9226:	4601      	mov	r1, r0
    9228:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    922c:	4291      	cmp	r1, r2
    922e:	7005      	strb	r5, [r0, #0]
    9230:	7840      	ldrb	r0, [r0, #1]
    9232:	d1f8      	bne.n	9226 <MPSL_IRQ_RADIO_Handler+0x6a>
    9234:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    9238:	2a20      	cmp	r2, #32
    923a:	bf1a      	itte	ne
    923c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    9240:	7054      	strbne	r4, [r2, #1]
    9242:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    9246:	2220      	movs	r2, #32
    9248:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    924c:	f88c 2001 	strb.w	r2, [ip, #1]
    9250:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    9254:	bd70      	pop	{r4, r5, r6, pc}
    9256:	f44f 7126 	mov.w	r1, #664	; 0x298
    925a:	2070      	movs	r0, #112	; 0x70
    925c:	f003 faf4 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9260:	f893 4020 	ldrb.w	r4, [r3, #32]
    9264:	7840      	ldrb	r0, [r0, #1]
    9266:	f883 0020 	strb.w	r0, [r3, #32]
    926a:	e7db      	b.n	9224 <MPSL_IRQ_RADIO_Handler+0x68>
    926c:	200014f4 	.word	0x200014f4
    9270:	20001574 	.word	0x20001574
    9274:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9278:	b08d      	sub	sp, #52	; 0x34
    927a:	4615      	mov	r5, r2
    927c:	460c      	mov	r4, r1
    927e:	f002 fa11 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9282:	4428      	add	r0, r5
    9284:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9288:	9008      	str	r0, [sp, #32]
    928a:	6821      	ldr	r1, [r4, #0]
    928c:	1a08      	subs	r0, r1, r0
    928e:	0200      	lsls	r0, r0, #8
    9290:	17c1      	asrs	r1, r0, #31
    9292:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9296:	1200      	asrs	r0, r0, #8
    9298:	2800      	cmp	r0, #0
    929a:	f300 80f0 	bgt.w	947e <MPSL_IRQ_RADIO_Handler+0x2c2>
    929e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    92a2:	48cd      	ldr	r0, [pc, #820]	; (95d8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    92a4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    92a8:	4408      	add	r0, r1
    92aa:	9009      	str	r0, [sp, #36]	; 0x24
    92ac:	f890 5020 	ldrb.w	r5, [r0, #32]
    92b0:	2020      	movs	r0, #32
    92b2:	4eca      	ldr	r6, [pc, #808]	; (95dc <MPSL_IRQ_RADIO_Handler+0x420>)
    92b4:	f10d 0a18 	add.w	sl, sp, #24
    92b8:	f10d 091c 	add.w	r9, sp, #28
    92bc:	f88d 0018 	strb.w	r0, [sp, #24]
    92c0:	2d20      	cmp	r5, #32
    92c2:	bf1c      	itt	ne
    92c4:	48c6      	ldrne	r0, [pc, #792]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    92c6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    92ca:	d038      	beq.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    92cc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    92d0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    92d4:	f100 0108 	add.w	r1, r0, #8
    92d8:	68c0      	ldr	r0, [r0, #12]
    92da:	6827      	ldr	r7, [r4, #0]
    92dc:	1a38      	subs	r0, r7, r0
    92de:	0200      	lsls	r0, r0, #8
    92e0:	17c2      	asrs	r2, r0, #31
    92e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92e6:	1200      	asrs	r0, r0, #8
    92e8:	d429      	bmi.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    92ea:	89e0      	ldrh	r0, [r4, #14]
    92ec:	b300      	cbz	r0, 9330 <MPSL_IRQ_RADIO_Handler+0x174>
    92ee:	89c8      	ldrh	r0, [r1, #14]
    92f0:	b9f0      	cbnz	r0, 9330 <MPSL_IRQ_RADIO_Handler+0x174>
    92f2:	6808      	ldr	r0, [r1, #0]
    92f4:	9003      	str	r0, [sp, #12]
    92f6:	f003 f907 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92fa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92fe:	bf08      	it	eq
    9300:	200d      	moveq	r0, #13
    9302:	d00b      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x160>
    9304:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9308:	3856      	subs	r0, #86	; 0x56
    930a:	bf08      	it	eq
    930c:	201c      	moveq	r0, #28
    930e:	d005      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x160>
    9310:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9314:	389f      	subs	r0, #159	; 0x9f
    9316:	bf14      	ite	ne
    9318:	2000      	movne	r0, #0
    931a:	2032      	moveq	r0, #50	; 0x32
    931c:	1c41      	adds	r1, r0, #1
    931e:	9803      	ldr	r0, [sp, #12]
    9320:	1a38      	subs	r0, r7, r0
    9322:	0200      	lsls	r0, r0, #8
    9324:	17c2      	asrs	r2, r0, #31
    9326:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    932a:	1200      	asrs	r0, r0, #8
    932c:	4288      	cmp	r0, r1
    932e:	db06      	blt.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    9330:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9334:	f88a 5000 	strb.w	r5, [sl]
    9338:	7845      	ldrb	r5, [r0, #1]
    933a:	2d20      	cmp	r5, #32
    933c:	d1c6      	bne.n	92cc <MPSL_IRQ_RADIO_Handler+0x110>
    933e:	f89a 0000 	ldrb.w	r0, [sl]
    9342:	f889 0000 	strb.w	r0, [r9]
    9346:	2d20      	cmp	r5, #32
    9348:	bf1c      	itt	ne
    934a:	48a5      	ldrne	r0, [pc, #660]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    934c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    9350:	f000 813e 	beq.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9354:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9358:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    935c:	6861      	ldr	r1, [r4, #4]
    935e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    9362:	f107 0008 	add.w	r0, r7, #8
    9366:	eba8 0101 	sub.w	r1, r8, r1
    936a:	0209      	lsls	r1, r1, #8
    936c:	17ca      	asrs	r2, r1, #31
    936e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9372:	1209      	asrs	r1, r1, #8
    9374:	d427      	bmi.n	93c6 <MPSL_IRQ_RADIO_Handler+0x20a>
    9376:	89c0      	ldrh	r0, [r0, #14]
    9378:	2800      	cmp	r0, #0
    937a:	f000 8129 	beq.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    937e:	89e0      	ldrh	r0, [r4, #14]
    9380:	2800      	cmp	r0, #0
    9382:	f040 8125 	bne.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9386:	f8d4 a000 	ldr.w	sl, [r4]
    938a:	f003 f8bd 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    938e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9392:	bf08      	it	eq
    9394:	200d      	moveq	r0, #13
    9396:	d00b      	beq.n	93b0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    9398:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    939c:	3856      	subs	r0, #86	; 0x56
    939e:	bf08      	it	eq
    93a0:	201c      	moveq	r0, #28
    93a2:	d005      	beq.n	93b0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    93a4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    93a8:	389f      	subs	r0, #159	; 0x9f
    93aa:	bf14      	ite	ne
    93ac:	2000      	movne	r0, #0
    93ae:	2032      	moveq	r0, #50	; 0x32
    93b0:	1c41      	adds	r1, r0, #1
    93b2:	eba8 000a 	sub.w	r0, r8, sl
    93b6:	0200      	lsls	r0, r0, #8
    93b8:	17c2      	asrs	r2, r0, #31
    93ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    93be:	1200      	asrs	r0, r0, #8
    93c0:	4288      	cmp	r0, r1
    93c2:	f280 8105 	bge.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    93c6:	f889 5000 	strb.w	r5, [r9]
    93ca:	7e38      	ldrb	r0, [r7, #24]
    93cc:	7c21      	ldrb	r1, [r4, #16]
    93ce:	4288      	cmp	r0, r1
    93d0:	d906      	bls.n	93e0 <MPSL_IRQ_RADIO_Handler+0x224>
    93d2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    93d6:	7845      	ldrb	r5, [r0, #1]
    93d8:	2d20      	cmp	r5, #32
    93da:	d1bb      	bne.n	9354 <MPSL_IRQ_RADIO_Handler+0x198>
    93dc:	f000 b8f8 	b.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    93e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    93e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    93e8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    93ec:	8ac1      	ldrh	r1, [r0, #22]
    93ee:	68c5      	ldr	r5, [r0, #12]
    93f0:	bbe1      	cbnz	r1, 946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    93f2:	89e1      	ldrh	r1, [r4, #14]
    93f4:	b3d1      	cbz	r1, 946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    93f6:	6887      	ldr	r7, [r0, #8]
    93f8:	f003 f886 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93fc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9400:	bf08      	it	eq
    9402:	200d      	moveq	r0, #13
    9404:	d00b      	beq.n	941e <MPSL_IRQ_RADIO_Handler+0x262>
    9406:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    940a:	3856      	subs	r0, #86	; 0x56
    940c:	bf08      	it	eq
    940e:	201c      	moveq	r0, #28
    9410:	d005      	beq.n	941e <MPSL_IRQ_RADIO_Handler+0x262>
    9412:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9416:	389f      	subs	r0, #159	; 0x9f
    9418:	bf14      	ite	ne
    941a:	2000      	movne	r0, #0
    941c:	2032      	moveq	r0, #50	; 0x32
    941e:	1c41      	adds	r1, r0, #1
    9420:	1be8      	subs	r0, r5, r7
    9422:	0200      	lsls	r0, r0, #8
    9424:	17c2      	asrs	r2, r0, #31
    9426:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    942a:	1200      	asrs	r0, r0, #8
    942c:	4288      	cmp	r0, r1
    942e:	da1d      	bge.n	946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    9430:	f003 f86a 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9434:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9438:	bf08      	it	eq
    943a:	200d      	moveq	r0, #13
    943c:	d00b      	beq.n	9456 <MPSL_IRQ_RADIO_Handler+0x29a>
    943e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9442:	3856      	subs	r0, #86	; 0x56
    9444:	bf08      	it	eq
    9446:	201c      	moveq	r0, #28
    9448:	d005      	beq.n	9456 <MPSL_IRQ_RADIO_Handler+0x29a>
    944a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    944e:	389f      	subs	r0, #159	; 0x9f
    9450:	bf14      	ite	ne
    9452:	2000      	movne	r0, #0
    9454:	2032      	moveq	r0, #50	; 0x32
    9456:	f89d 101c 	ldrb.w	r1, [sp, #28]
    945a:	1c40      	adds	r0, r0, #1
    945c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9460:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9464:	6889      	ldr	r1, [r1, #8]
    9466:	4408      	add	r0, r1
    9468:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    946c:	9808      	ldr	r0, [sp, #32]
    946e:	1a28      	subs	r0, r5, r0
    9470:	0200      	lsls	r0, r0, #8
    9472:	17c1      	asrs	r1, r0, #31
    9474:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9478:	1200      	asrs	r0, r0, #8
    947a:	2800      	cmp	r0, #0
    947c:	dd03      	ble.n	9486 <MPSL_IRQ_RADIO_Handler+0x2ca>
    947e:	b011      	add	sp, #68	; 0x44
    9480:	2000      	movs	r0, #0
    9482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9486:	6820      	ldr	r0, [r4, #0]
    9488:	42a8      	cmp	r0, r5
    948a:	d902      	bls.n	9492 <MPSL_IRQ_RADIO_Handler+0x2d6>
    948c:	68a1      	ldr	r1, [r4, #8]
    948e:	1c49      	adds	r1, r1, #1
    9490:	60a1      	str	r1, [r4, #8]
    9492:	6861      	ldr	r1, [r4, #4]
    9494:	f10d 0a18 	add.w	sl, sp, #24
    9498:	1a08      	subs	r0, r1, r0
    949a:	4428      	add	r0, r5
    949c:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    94a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    94a4:	e9c4 1000 	strd	r1, r0, [r4]
    94a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    94aa:	900b      	str	r0, [sp, #44]	; 0x2c
    94ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    94ae:	f10d 081c 	add.w	r8, sp, #28
    94b2:	f890 5020 	ldrb.w	r5, [r0, #32]
    94b6:	2020      	movs	r0, #32
    94b8:	f88d 0018 	strb.w	r0, [sp, #24]
    94bc:	2d20      	cmp	r5, #32
    94be:	d03c      	beq.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    94c0:	4947      	ldr	r1, [pc, #284]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    94c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    94c4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    94c8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    94cc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    94d0:	f100 0108 	add.w	r1, r0, #8
    94d4:	68c0      	ldr	r0, [r0, #12]
    94d6:	6827      	ldr	r7, [r4, #0]
    94d8:	1a38      	subs	r0, r7, r0
    94da:	0200      	lsls	r0, r0, #8
    94dc:	17c2      	asrs	r2, r0, #31
    94de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    94e2:	1200      	asrs	r0, r0, #8
    94e4:	d429      	bmi.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    94e6:	89e0      	ldrh	r0, [r4, #14]
    94e8:	b300      	cbz	r0, 952c <MPSL_IRQ_RADIO_Handler+0x370>
    94ea:	89c8      	ldrh	r0, [r1, #14]
    94ec:	b9f0      	cbnz	r0, 952c <MPSL_IRQ_RADIO_Handler+0x370>
    94ee:	f8d1 9000 	ldr.w	r9, [r1]
    94f2:	f003 f809 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94f6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94fa:	bf08      	it	eq
    94fc:	200d      	moveq	r0, #13
    94fe:	d00b      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x35c>
    9500:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9504:	3856      	subs	r0, #86	; 0x56
    9506:	bf08      	it	eq
    9508:	201c      	moveq	r0, #28
    950a:	d005      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x35c>
    950c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9510:	389f      	subs	r0, #159	; 0x9f
    9512:	bf14      	ite	ne
    9514:	2000      	movne	r0, #0
    9516:	2032      	moveq	r0, #50	; 0x32
    9518:	1c41      	adds	r1, r0, #1
    951a:	eba7 0009 	sub.w	r0, r7, r9
    951e:	0200      	lsls	r0, r0, #8
    9520:	17c2      	asrs	r2, r0, #31
    9522:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9526:	1200      	asrs	r0, r0, #8
    9528:	4288      	cmp	r0, r1
    952a:	db06      	blt.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    952c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9530:	f88a 5000 	strb.w	r5, [sl]
    9534:	7845      	ldrb	r5, [r0, #1]
    9536:	2d20      	cmp	r5, #32
    9538:	d1c6      	bne.n	94c8 <MPSL_IRQ_RADIO_Handler+0x30c>
    953a:	f89a 0000 	ldrb.w	r0, [sl]
    953e:	f888 0000 	strb.w	r0, [r8]
    9542:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9544:	2d20      	cmp	r5, #32
    9546:	bf1c      	itt	ne
    9548:	4925      	ldrne	r1, [pc, #148]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    954a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    954e:	d03f      	beq.n	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9550:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9554:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9558:	6860      	ldr	r0, [r4, #4]
    955a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    955e:	f107 0108 	add.w	r1, r7, #8
    9562:	eba9 0000 	sub.w	r0, r9, r0
    9566:	0200      	lsls	r0, r0, #8
    9568:	17c2      	asrs	r2, r0, #31
    956a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    956e:	1200      	asrs	r0, r0, #8
    9570:	d422      	bmi.n	95b8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9572:	89c8      	ldrh	r0, [r1, #14]
    9574:	b360      	cbz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9576:	89e0      	ldrh	r0, [r4, #14]
    9578:	bb50      	cbnz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    957a:	f8d4 a000 	ldr.w	sl, [r4]
    957e:	f002 ffc3 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9582:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9586:	bf08      	it	eq
    9588:	200d      	moveq	r0, #13
    958a:	d00b      	beq.n	95a4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    958c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9590:	3856      	subs	r0, #86	; 0x56
    9592:	bf08      	it	eq
    9594:	201c      	moveq	r0, #28
    9596:	d005      	beq.n	95a4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9598:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    959c:	389f      	subs	r0, #159	; 0x9f
    959e:	bf14      	ite	ne
    95a0:	2000      	movne	r0, #0
    95a2:	2032      	moveq	r0, #50	; 0x32
    95a4:	1c41      	adds	r1, r0, #1
    95a6:	eba9 000a 	sub.w	r0, r9, sl
    95aa:	0200      	lsls	r0, r0, #8
    95ac:	17c2      	asrs	r2, r0, #31
    95ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    95b2:	1200      	asrs	r0, r0, #8
    95b4:	4288      	cmp	r0, r1
    95b6:	da0b      	bge.n	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    95b8:	f888 5000 	strb.w	r5, [r8]
    95bc:	7e38      	ldrb	r0, [r7, #24]
    95be:	7c21      	ldrb	r1, [r4, #16]
    95c0:	4288      	cmp	r0, r1
    95c2:	f67f af0d 	bls.w	93e0 <MPSL_IRQ_RADIO_Handler+0x224>
    95c6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    95ca:	7845      	ldrb	r5, [r0, #1]
    95cc:	2d20      	cmp	r5, #32
    95ce:	d1bf      	bne.n	9550 <MPSL_IRQ_RADIO_Handler+0x394>
    95d0:	b011      	add	sp, #68	; 0x44
    95d2:	2001      	movs	r0, #1
    95d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95d8:	20001574 	.word	0x20001574
    95dc:	20001174 	.word	0x20001174
    95e0:	200014f4 	.word	0x200014f4
    95e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e8:	460f      	mov	r7, r1
    95ea:	4606      	mov	r6, r0
    95ec:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    95f0:	494b      	ldr	r1, [pc, #300]	; (9720 <MPSL_IRQ_RADIO_Handler+0x564>)
    95f2:	4699      	mov	r9, r3
    95f4:	4408      	add	r0, r1
    95f6:	4692      	mov	sl, r2
    95f8:	f890 4020 	ldrb.w	r4, [r0, #32]
    95fc:	2020      	movs	r0, #32
    95fe:	7010      	strb	r0, [r2, #0]
    9600:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9604:	2c20      	cmp	r4, #32
    9606:	bf1c      	itt	ne
    9608:	4846      	ldrne	r0, [pc, #280]	; (9724 <MPSL_IRQ_RADIO_Handler+0x568>)
    960a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    960e:	d038      	beq.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9610:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9614:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9618:	f100 0108 	add.w	r1, r0, #8
    961c:	68c0      	ldr	r0, [r0, #12]
    961e:	6835      	ldr	r5, [r6, #0]
    9620:	1a28      	subs	r0, r5, r0
    9622:	0200      	lsls	r0, r0, #8
    9624:	17c2      	asrs	r2, r0, #31
    9626:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    962a:	1200      	asrs	r0, r0, #8
    962c:	d429      	bmi.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    962e:	89f0      	ldrh	r0, [r6, #14]
    9630:	b300      	cbz	r0, 9674 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9632:	89c8      	ldrh	r0, [r1, #14]
    9634:	b9f0      	cbnz	r0, 9674 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9636:	6808      	ldr	r0, [r1, #0]
    9638:	9000      	str	r0, [sp, #0]
    963a:	f002 ff65 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    963e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9642:	bf08      	it	eq
    9644:	200d      	moveq	r0, #13
    9646:	d00b      	beq.n	9660 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9648:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    964c:	3856      	subs	r0, #86	; 0x56
    964e:	bf08      	it	eq
    9650:	201c      	moveq	r0, #28
    9652:	d005      	beq.n	9660 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9654:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9658:	389f      	subs	r0, #159	; 0x9f
    965a:	bf14      	ite	ne
    965c:	2000      	movne	r0, #0
    965e:	2032      	moveq	r0, #50	; 0x32
    9660:	1c41      	adds	r1, r0, #1
    9662:	9800      	ldr	r0, [sp, #0]
    9664:	1a28      	subs	r0, r5, r0
    9666:	0200      	lsls	r0, r0, #8
    9668:	17c2      	asrs	r2, r0, #31
    966a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    966e:	1200      	asrs	r0, r0, #8
    9670:	4288      	cmp	r0, r1
    9672:	db06      	blt.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9674:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9678:	f88a 4000 	strb.w	r4, [sl]
    967c:	7844      	ldrb	r4, [r0, #1]
    967e:	2c20      	cmp	r4, #32
    9680:	d1c6      	bne.n	9610 <MPSL_IRQ_RADIO_Handler+0x454>
    9682:	f89a 0000 	ldrb.w	r0, [sl]
    9686:	f889 0000 	strb.w	r0, [r9]
    968a:	2c20      	cmp	r4, #32
    968c:	bf1c      	itt	ne
    968e:	4825      	ldrne	r0, [pc, #148]	; (9724 <MPSL_IRQ_RADIO_Handler+0x568>)
    9690:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    9694:	d040      	beq.n	9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    9696:	bf00      	nop
    9698:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    969c:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    96a0:	6870      	ldr	r0, [r6, #4]
    96a2:	68bd      	ldr	r5, [r7, #8]
    96a4:	f107 0108 	add.w	r1, r7, #8
    96a8:	1a28      	subs	r0, r5, r0
    96aa:	0200      	lsls	r0, r0, #8
    96ac:	17c2      	asrs	r2, r0, #31
    96ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    96b2:	1200      	asrs	r0, r0, #8
    96b4:	d422      	bmi.n	96fc <MPSL_IRQ_RADIO_Handler+0x540>
    96b6:	89c8      	ldrh	r0, [r1, #14]
    96b8:	b370      	cbz	r0, 9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96ba:	89f0      	ldrh	r0, [r6, #14]
    96bc:	bb60      	cbnz	r0, 9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96be:	f8d6 b000 	ldr.w	fp, [r6]
    96c2:	f002 ff21 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    96c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    96ca:	bf08      	it	eq
    96cc:	200d      	moveq	r0, #13
    96ce:	d00b      	beq.n	96e8 <MPSL_IRQ_RADIO_Handler+0x52c>
    96d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    96d4:	3856      	subs	r0, #86	; 0x56
    96d6:	bf08      	it	eq
    96d8:	201c      	moveq	r0, #28
    96da:	d005      	beq.n	96e8 <MPSL_IRQ_RADIO_Handler+0x52c>
    96dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    96e0:	389f      	subs	r0, #159	; 0x9f
    96e2:	bf14      	ite	ne
    96e4:	2000      	movne	r0, #0
    96e6:	2032      	moveq	r0, #50	; 0x32
    96e8:	1c41      	adds	r1, r0, #1
    96ea:	eba5 000b 	sub.w	r0, r5, fp
    96ee:	0200      	lsls	r0, r0, #8
    96f0:	17c2      	asrs	r2, r0, #31
    96f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    96f6:	1200      	asrs	r0, r0, #8
    96f8:	4288      	cmp	r0, r1
    96fa:	da0d      	bge.n	9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96fc:	f889 4000 	strb.w	r4, [r9]
    9700:	7e38      	ldrb	r0, [r7, #24]
    9702:	7c31      	ldrb	r1, [r6, #16]
    9704:	4288      	cmp	r0, r1
    9706:	d802      	bhi.n	970e <MPSL_IRQ_RADIO_Handler+0x552>
    9708:	2000      	movs	r0, #0
    970a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    970e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9712:	7844      	ldrb	r4, [r0, #1]
    9714:	2c20      	cmp	r4, #32
    9716:	d1bf      	bne.n	9698 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9718:	2001      	movs	r0, #1
    971a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    971e:	0000      	.short	0x0000
    9720:	20001574 	.word	0x20001574
    9724:	200014f4 	.word	0x200014f4
    9728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    972c:	b098      	sub	sp, #96	; 0x60
    972e:	4615      	mov	r5, r2
    9730:	f002 fa7a 	bl	bc28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9734:	4604      	mov	r4, r0
    9736:	f002 fd0f 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    973a:	4606      	mov	r6, r0
    973c:	9819      	ldr	r0, [sp, #100]	; 0x64
    973e:	2801      	cmp	r0, #1
    9740:	bf18      	it	ne
    9742:	2802      	cmpne	r0, #2
    9744:	d005      	beq.n	9752 <MPSL_IRQ_RADIO_Handler+0x596>
    9746:	f640 1192 	movw	r1, #2450	; 0x992
    974a:	f04f 0070 	mov.w	r0, #112	; 0x70
    974e:	f003 f87b 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9752:	49fa      	ldr	r1, [pc, #1000]	; (9b3c <MPSL_IRQ_RADIO_Handler+0x980>)
    9754:	2001      	movs	r0, #1
    9756:	6008      	str	r0, [r1, #0]
    9758:	49f9      	ldr	r1, [pc, #996]	; (9b40 <MPSL_IRQ_RADIO_Handler+0x984>)
    975a:	6889      	ldr	r1, [r1, #8]
    975c:	6008      	str	r0, [r1, #0]
    975e:	2000      	movs	r0, #0
    9760:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9764:	900a      	str	r0, [sp, #40]	; 0x28
    9766:	1e40      	subs	r0, r0, #1
    9768:	900b      	str	r0, [sp, #44]	; 0x2c
    976a:	49f6      	ldr	r1, [pc, #984]	; (9b44 <MPSL_IRQ_RADIO_Handler+0x988>)
    976c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9770:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9774:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9778:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    977c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9780:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9784:	6989      	ldr	r1, [r1, #24]
    9786:	9110      	str	r1, [sp, #64]	; 0x40
    9788:	f007 fa4a 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    978c:	4602      	mov	r2, r0
    978e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    9792:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    9796:	4bec      	ldr	r3, [pc, #944]	; (9b48 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9798:	4440      	add	r0, r8
    979a:	1c41      	adds	r1, r0, #1
    979c:	1850      	adds	r0, r2, r1
    979e:	429a      	cmp	r2, r3
    97a0:	d854      	bhi.n	984c <MPSL_IRQ_RADIO_Handler+0x690>
    97a2:	4dea      	ldr	r5, [pc, #936]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    97a4:	42a9      	cmp	r1, r5
    97a6:	dc58      	bgt.n	985a <MPSL_IRQ_RADIO_Handler+0x69e>
    97a8:	426a      	negs	r2, r5
    97aa:	4291      	cmp	r1, r2
    97ac:	db5d      	blt.n	986a <MPSL_IRQ_RADIO_Handler+0x6ae>
    97ae:	1c59      	adds	r1, r3, #1
    97b0:	4281      	cmp	r1, r0
    97b2:	bfdc      	itt	le
    97b4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    97b8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    97bc:	dd05      	ble.n	97ca <MPSL_IRQ_RADIO_Handler+0x60e>
    97be:	2800      	cmp	r0, #0
    97c0:	bfbc      	itt	lt
    97c2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    97c6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    97ca:	9014      	str	r0, [sp, #80]	; 0x50
    97cc:	48e0      	ldr	r0, [pc, #896]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    97ce:	f1b8 0f00 	cmp.w	r8, #0
    97d2:	8b80      	ldrh	r0, [r0, #28]
    97d4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    97d8:	bf14      	ite	ne
    97da:	f04f 0a01 	movne.w	sl, #1
    97de:	f04f 0a00 	moveq.w	sl, #0
    97e2:	f002 ffb9 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    97e6:	9016      	str	r0, [sp, #88]	; 0x58
    97e8:	f1ba 0f00 	cmp.w	sl, #0
    97ec:	d008      	beq.n	9800 <MPSL_IRQ_RADIO_Handler+0x644>
    97ee:	48d8      	ldr	r0, [pc, #864]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    97f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    97f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    97f6:	bf02      	ittt	eq
    97f8:	9816      	ldreq	r0, [sp, #88]	; 0x58
    97fa:	2800      	cmpeq	r0, #0
    97fc:	2701      	moveq	r7, #1
    97fe:	d001      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x648>
    9800:	f04f 0700 	mov.w	r7, #0
    9804:	f002 fe80 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9808:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    980c:	bf08      	it	eq
    980e:	200d      	moveq	r0, #13
    9810:	d00b      	beq.n	982a <MPSL_IRQ_RADIO_Handler+0x66e>
    9812:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9816:	3856      	subs	r0, #86	; 0x56
    9818:	bf08      	it	eq
    981a:	201c      	moveq	r0, #28
    981c:	d005      	beq.n	982a <MPSL_IRQ_RADIO_Handler+0x66e>
    981e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9822:	389f      	subs	r0, #159	; 0x9f
    9824:	bf14      	ite	ne
    9826:	2000      	movne	r0, #0
    9828:	2032      	moveq	r0, #50	; 0x32
    982a:	f04f 0900 	mov.w	r9, #0
    982e:	46cb      	mov	fp, r9
    9830:	9013      	str	r0, [sp, #76]	; 0x4c
    9832:	4546      	cmp	r6, r8
    9834:	d936      	bls.n	98a4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9836:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9838:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9b48 <MPSL_IRQ_RADIO_Handler+0x98c>
    983c:	ea6f 0c06 	mvn.w	ip, r6
    9840:	4669      	mov	r1, sp
    9842:	aa17      	add	r2, sp, #92	; 0x5c
    9844:	eb03 000c 	add.w	r0, r3, ip
    9848:	454b      	cmp	r3, r9
    984a:	d904      	bls.n	9856 <MPSL_IRQ_RADIO_Handler+0x69a>
    984c:	f240 519e 	movw	r1, #1438	; 0x59e
    9850:	2070      	movs	r0, #112	; 0x70
    9852:	f002 fff9 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9856:	45ac      	cmp	ip, r5
    9858:	dd04      	ble.n	9864 <MPSL_IRQ_RADIO_Handler+0x6a8>
    985a:	f240 519f 	movw	r1, #1439	; 0x59f
    985e:	2070      	movs	r0, #112	; 0x70
    9860:	f002 fff2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9864:	4bbb      	ldr	r3, [pc, #748]	; (9b54 <MPSL_IRQ_RADIO_Handler+0x998>)
    9866:	459c      	cmp	ip, r3
    9868:	da04      	bge.n	9874 <MPSL_IRQ_RADIO_Handler+0x6b8>
    986a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    986e:	2070      	movs	r0, #112	; 0x70
    9870:	f002 ffea 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9874:	4bb8      	ldr	r3, [pc, #736]	; (9b58 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9876:	4283      	cmp	r3, r0
    9878:	bfdc      	itt	le
    987a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    987e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9882:	dd05      	ble.n	9890 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9884:	2800      	cmp	r0, #0
    9886:	bfbc      	itt	lt
    9888:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    988c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9890:	f001 ff24 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9894:	9800      	ldr	r0, [sp, #0]
    9896:	990c      	ldr	r1, [sp, #48]	; 0x30
    9898:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    989c:	9000      	str	r0, [sp, #0]
    989e:	1a08      	subs	r0, r1, r0
    98a0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    98a4:	2f00      	cmp	r7, #0
    98a6:	bf18      	it	ne
    98a8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    98ac:	d105      	bne.n	98ba <MPSL_IRQ_RADIO_Handler+0x6fe>
    98ae:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    98b2:	2800      	cmp	r0, #0
    98b4:	bf18      	it	ne
    98b6:	f04f 0b02 	movne.w	fp, #2
    98ba:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    98be:	d008      	beq.n	98d2 <MPSL_IRQ_RADIO_Handler+0x716>
    98c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    98c2:	1b00      	subs	r0, r0, r4
    98c4:	0200      	lsls	r0, r0, #8
    98c6:	17c1      	asrs	r1, r0, #31
    98c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    98cc:	1200      	asrs	r0, r0, #8
    98ce:	2801      	cmp	r0, #1
    98d0:	da02      	bge.n	98d8 <MPSL_IRQ_RADIO_Handler+0x71c>
    98d2:	2003      	movs	r0, #3
    98d4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    98d6:	e00d      	b.n	98f4 <MPSL_IRQ_RADIO_Handler+0x738>
    98d8:	b157      	cbz	r7, 98f0 <MPSL_IRQ_RADIO_Handler+0x734>
    98da:	489d      	ldr	r0, [pc, #628]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    98dc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    98e0:	b130      	cbz	r0, 98f0 <MPSL_IRQ_RADIO_Handler+0x734>
    98e2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    98e6:	f110 0b00 	adds.w	fp, r0, #0
    98ea:	bf18      	it	ne
    98ec:	f04f 0b02 	movne.w	fp, #2
    98f0:	4625      	mov	r5, r4
    98f2:	2000      	movs	r0, #0
    98f4:	4483      	add	fp, r0
    98f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    98f8:	eba0 0009 	sub.w	r0, r0, r9
    98fc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9900:	1e48      	subs	r0, r1, #1
    9902:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9906:	1b42      	subs	r2, r0, r5
    9908:	0212      	lsls	r2, r2, #8
    990a:	17d3      	asrs	r3, r2, #31
    990c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9910:	1212      	asrs	r2, r2, #8
    9912:	455a      	cmp	r2, fp
    9914:	db04      	blt.n	9920 <MPSL_IRQ_RADIO_Handler+0x764>
    9916:	f1b9 0f00 	cmp.w	r9, #0
    991a:	bf18      	it	ne
    991c:	910c      	strne	r1, [sp, #48]	; 0x30
    991e:	e02d      	b.n	997c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9920:	f1b9 0f00 	cmp.w	r9, #0
    9924:	d005      	beq.n	9932 <MPSL_IRQ_RADIO_Handler+0x776>
    9926:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    992a:	b920      	cbnz	r0, 9936 <MPSL_IRQ_RADIO_Handler+0x77a>
    992c:	f002 fc0a 	bl	c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9930:	b108      	cbz	r0, 9936 <MPSL_IRQ_RADIO_Handler+0x77a>
    9932:	b9af      	cbnz	r7, 9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9934:	e00c      	b.n	9950 <MPSL_IRQ_RADIO_Handler+0x794>
    9936:	b92f      	cbnz	r7, 9944 <MPSL_IRQ_RADIO_Handler+0x788>
    9938:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    993c:	2800      	cmp	r0, #0
    993e:	bf18      	it	ne
    9940:	f1ab 0b02 	subne.w	fp, fp, #2
    9944:	f04f 0900 	mov.w	r9, #0
    9948:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    994c:	464e      	mov	r6, r9
    994e:	e007      	b.n	9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9950:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9954:	b120      	cbz	r0, 9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9956:	2000      	movs	r0, #0
    9958:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    995c:	f1ab 0b02 	sub.w	fp, fp, #2
    9960:	980c      	ldr	r0, [sp, #48]	; 0x30
    9962:	eba0 0109 	sub.w	r1, r0, r9
    9966:	1e48      	subs	r0, r1, #1
    9968:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    996c:	1b42      	subs	r2, r0, r5
    996e:	0212      	lsls	r2, r2, #8
    9970:	17d3      	asrs	r3, r2, #31
    9972:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9976:	1212      	asrs	r2, r2, #8
    9978:	455a      	cmp	r2, fp
    997a:	db7d      	blt.n	9a78 <MPSL_IRQ_RADIO_Handler+0x8bc>
    997c:	4a74      	ldr	r2, [pc, #464]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    997e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9980:	1a89      	subs	r1, r1, r2
    9982:	0209      	lsls	r1, r1, #8
    9984:	17cb      	asrs	r3, r1, #31
    9986:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    998a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    998c:	1209      	asrs	r1, r1, #8
    998e:	b93b      	cbnz	r3, 99a0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    9990:	f1b2 3fff 	cmp.w	r2, #4294967295
    9994:	bf1c      	itt	ne
    9996:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9998:	4291      	cmpne	r1, r2
    999a:	bfb8      	it	lt
    999c:	2100      	movlt	r1, #0
    999e:	db00      	blt.n	99a2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    99a0:	2101      	movs	r1, #1
    99a2:	ea3a 0101 	bics.w	r1, sl, r1
    99a6:	d167      	bne.n	9a78 <MPSL_IRQ_RADIO_Handler+0x8bc>
    99a8:	9919      	ldr	r1, [sp, #100]	; 0x64
    99aa:	4605      	mov	r5, r0
    99ac:	f04f 0900 	mov.w	r9, #0
    99b0:	9105      	str	r1, [sp, #20]
    99b2:	f001 fffd 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    99b6:	1a28      	subs	r0, r5, r0
    99b8:	0200      	lsls	r0, r0, #8
    99ba:	17c1      	asrs	r1, r0, #31
    99bc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    99c0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    99c4:	f002 fda0 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99c8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99cc:	bf08      	it	eq
    99ce:	200d      	moveq	r0, #13
    99d0:	d00b      	beq.n	99ea <MPSL_IRQ_RADIO_Handler+0x82e>
    99d2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    99d6:	3856      	subs	r0, #86	; 0x56
    99d8:	bf08      	it	eq
    99da:	201c      	moveq	r0, #28
    99dc:	d005      	beq.n	99ea <MPSL_IRQ_RADIO_Handler+0x82e>
    99de:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    99e2:	389f      	subs	r0, #159	; 0x9f
    99e4:	bf14      	ite	ne
    99e6:	2000      	movne	r0, #0
    99e8:	2032      	moveq	r0, #50	; 0x32
    99ea:	300b      	adds	r0, #11
    99ec:	4558      	cmp	r0, fp
    99ee:	dd1f      	ble.n	9a30 <MPSL_IRQ_RADIO_Handler+0x874>
    99f0:	9805      	ldr	r0, [sp, #20]
    99f2:	2801      	cmp	r0, #1
    99f4:	d001      	beq.n	99fa <MPSL_IRQ_RADIO_Handler+0x83e>
    99f6:	b147      	cbz	r7, 9a0a <MPSL_IRQ_RADIO_Handler+0x84e>
    99f8:	e012      	b.n	9a20 <MPSL_IRQ_RADIO_Handler+0x864>
    99fa:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    99fe:	d11c      	bne.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a00:	f640 1113 	movw	r1, #2323	; 0x913
    9a04:	2070      	movs	r0, #112	; 0x70
    9a06:	f002 ff1f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a0a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9a0e:	d007      	beq.n	9a20 <MPSL_IRQ_RADIO_Handler+0x864>
    9a10:	1b60      	subs	r0, r4, r5
    9a12:	0200      	lsls	r0, r0, #8
    9a14:	17c1      	asrs	r1, r0, #31
    9a16:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9a1a:	1200      	asrs	r0, r0, #8
    9a1c:	2804      	cmp	r0, #4
    9a1e:	dd04      	ble.n	9a2a <MPSL_IRQ_RADIO_Handler+0x86e>
    9a20:	462c      	mov	r4, r5
    9a22:	4620      	mov	r0, r4
    9a24:	f001 ffea 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9a28:	e007      	b.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a2a:	2800      	cmp	r0, #0
    9a2c:	dc63      	bgt.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a2e:	e004      	b.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a30:	462c      	mov	r4, r5
    9a32:	4620      	mov	r0, r4
    9a34:	f001 ffe2 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9a38:	46d1      	mov	r9, sl
    9a3a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9a3e:	d055      	beq.n	9aec <MPSL_IRQ_RADIO_Handler+0x930>
    9a40:	980c      	ldr	r0, [sp, #48]	; 0x30
    9a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9a44:	1b00      	subs	r0, r0, r4
    9a46:	1b12      	subs	r2, r2, r4
    9a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9a50:	2801      	cmp	r0, #1
    9a52:	d350      	bcc.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9a58:	bf98      	it	ls
    9a5a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9a5e:	d84a      	bhi.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a60:	4620      	mov	r0, r4
    9a62:	f007 f8dd 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9a66:	9914      	ldr	r1, [sp, #80]	; 0x50
    9a68:	4a38      	ldr	r2, [pc, #224]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    9a6a:	1a0d      	subs	r5, r1, r0
    9a6c:	f04f 0b00 	mov.w	fp, #0
    9a70:	1aaa      	subs	r2, r5, r2
    9a72:	f17b 0200 	sbcs.w	r2, fp, #0
    9a76:	e000      	b.n	9a7a <MPSL_IRQ_RADIO_Handler+0x8be>
    9a78:	e03d      	b.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a7a:	d316      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a7c:	4a33      	ldr	r2, [pc, #204]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    9a7e:	1a43      	subs	r3, r0, r1
    9a80:	1a9a      	subs	r2, r3, r2
    9a82:	f17b 0200 	sbcs.w	r2, fp, #0
    9a86:	d310      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a88:	4a2f      	ldr	r2, [pc, #188]	; (9b48 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9a8a:	42aa      	cmp	r2, r5
    9a8c:	bf3e      	ittt	cc
    9a8e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9a92:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9a96:	1845      	addcc	r5, r0, r1
    9a98:	d307      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a9a:	429a      	cmp	r2, r3
    9a9c:	d22f      	bcs.n	9afe <MPSL_IRQ_RADIO_Handler+0x942>
    9a9e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9aa2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9aa6:	4408      	add	r0, r1
    9aa8:	4245      	negs	r5, r0
    9aaa:	4f29      	ldr	r7, [pc, #164]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    9aac:	7fb8      	ldrb	r0, [r7, #30]
    9aae:	b358      	cbz	r0, 9b08 <MPSL_IRQ_RADIO_Handler+0x94c>
    9ab0:	9819      	ldr	r0, [sp, #100]	; 0x64
    9ab2:	2801      	cmp	r0, #1
    9ab4:	d005      	beq.n	9ac2 <MPSL_IRQ_RADIO_Handler+0x906>
    9ab6:	2002      	movs	r0, #2
    9ab8:	f002 f9f0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9abc:	2001      	movs	r0, #1
    9abe:	f002 f9ed 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ac2:	45b0      	cmp	r8, r6
    9ac4:	d22c      	bcs.n	9b20 <MPSL_IRQ_RADIO_Handler+0x964>
    9ac6:	eba5 0106 	sub.w	r1, r5, r6
    9aca:	f04f 0002 	mov.w	r0, #2
    9ace:	f002 f92f 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ad2:	b390      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9ad4:	f1b8 0f00 	cmp.w	r8, #0
    9ad8:	bf1c      	itt	ne
    9ada:	eba5 0108 	subne.w	r1, r5, r8
    9ade:	2001      	movne	r0, #1
    9ae0:	d044      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9ae2:	bf00      	nop
    9ae4:	f002 f924 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ae8:	b338      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9aea:	e03f      	b.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9aec:	f640 2131 	movw	r1, #2609	; 0xa31
    9af0:	2070      	movs	r0, #112	; 0x70
    9af2:	f002 fea9 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9af6:	b01b      	add	sp, #108	; 0x6c
    9af8:	2000      	movs	r0, #0
    9afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9afe:	f640 3105 	movw	r1, #2821	; 0xb05
    9b02:	2070      	movs	r0, #112	; 0x70
    9b04:	f002 fea0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b08:	45b0      	cmp	r8, r6
    9b0a:	bf34      	ite	cc
    9b0c:	4630      	movcc	r0, r6
    9b0e:	4640      	movcs	r0, r8
    9b10:	301e      	adds	r0, #30
    9b12:	42a8      	cmp	r0, r5
    9b14:	dbcc      	blt.n	9ab0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9b16:	f640 2145 	movw	r1, #2629	; 0xa45
    9b1a:	2070      	movs	r0, #112	; 0x70
    9b1c:	f002 fe94 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b20:	d91c      	bls.n	9b5c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9b22:	eba5 0108 	sub.w	r1, r5, r8
    9b26:	2001      	movs	r0, #1
    9b28:	f002 f902 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b2c:	b128      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9b2e:	2e00      	cmp	r6, #0
    9b30:	bf1c      	itt	ne
    9b32:	1ba9      	subne	r1, r5, r6
    9b34:	2002      	movne	r0, #2
    9b36:	d019      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9b38:	e7d4      	b.n	9ae4 <MPSL_IRQ_RADIO_Handler+0x928>
    9b3a:	e042      	b.n	9bc2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9b3c:	40000508 	.word	0x40000508
    9b40:	200002d4 	.word	0x200002d4
    9b44:	20001174 	.word	0x20001174
    9b48:	1e847fff 	.word	0x1e847fff
    9b4c:	0f424000 	.word	0x0f424000
    9b50:	20001574 	.word	0x20001574
    9b54:	f0bdc000 	.word	0xf0bdc000
    9b58:	1e848000 	.word	0x1e848000
    9b5c:	ea56 0008 	orrs.w	r0, r6, r8
    9b60:	d004      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9b62:	f640 1176 	movw	r1, #2422	; 0x976
    9b66:	2070      	movs	r0, #112	; 0x70
    9b68:	f002 fe6e 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b6c:	4629      	mov	r1, r5
    9b6e:	2000      	movs	r0, #0
    9b70:	f002 f8de 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b74:	b328      	cbz	r0, 9bc2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9b76:	2601      	movs	r6, #1
    9b78:	f1ba 0f00 	cmp.w	sl, #0
    9b7c:	bf04      	itt	eq
    9b7e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9b82:	2800      	cmpeq	r0, #0
    9b84:	d002      	beq.n	9b8c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9b86:	f1b9 0f00 	cmp.w	r9, #0
    9b8a:	d024      	beq.n	9bd6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    9b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9b8e:	f1b0 3fff 	cmp.w	r0, #4294967295
    9b92:	d004      	beq.n	9b9e <MPSL_IRQ_RADIO_Handler+0x9e2>
    9b94:	f002 fcbe 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9b98:	f04f 30ff 	mov.w	r0, #4294967295
    9b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
    9b9e:	f1b9 0f00 	cmp.w	r9, #0
    9ba2:	d01c      	beq.n	9bde <MPSL_IRQ_RADIO_Handler+0xa22>
    9ba4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9ba6:	1a20      	subs	r0, r4, r0
    9ba8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9bac:	2005      	movs	r0, #5
    9bae:	f002 f8bf 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9bb2:	b360      	cbz	r0, 9c0e <MPSL_IRQ_RADIO_Handler+0xa52>
    9bb4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9bb8:	2800      	cmp	r0, #0
    9bba:	bf08      	it	eq
    9bbc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    9bc0:	e015      	b.n	9bee <MPSL_IRQ_RADIO_Handler+0xa32>
    9bc2:	2002      	movs	r0, #2
    9bc4:	f002 f96a 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bc8:	2001      	movs	r0, #1
    9bca:	f002 f967 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bce:	b01b      	add	sp, #108	; 0x6c
    9bd0:	2000      	movs	r0, #0
    9bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9bd8:	f1b0 3fff 	cmp.w	r0, #4294967295
    9bdc:	d012      	beq.n	9c04 <MPSL_IRQ_RADIO_Handler+0xa48>
    9bde:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9be2:	b120      	cbz	r0, 9bee <MPSL_IRQ_RADIO_Handler+0xa32>
    9be4:	2005      	movs	r0, #5
    9be6:	f002 f959 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bea:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    9bee:	eba5 0008 	sub.w	r0, r5, r8
    9bf2:	f1a0 0119 	sub.w	r1, r0, #25
    9bf6:	2900      	cmp	r1, #0
    9bf8:	dc0e      	bgt.n	9c18 <MPSL_IRQ_RADIO_Handler+0xa5c>
    9bfa:	f640 216e 	movw	r1, #2670	; 0xa6e
    9bfe:	2070      	movs	r0, #112	; 0x70
    9c00:	f002 fe22 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c04:	f002 fca2 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9c08:	f001 fed2 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c0c:	e7c6      	b.n	9b9c <MPSL_IRQ_RADIO_Handler+0x9e0>
    9c0e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9c12:	2070      	movs	r0, #112	; 0x70
    9c14:	f002 fe18 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c18:	2003      	movs	r0, #3
    9c1a:	f002 f889 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9c1e:	b1c0      	cbz	r0, 9c52 <MPSL_IRQ_RADIO_Handler+0xa96>
    9c20:	480e      	ldr	r0, [pc, #56]	; (9c5c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9c22:	6880      	ldr	r0, [r0, #8]
    9c24:	f8c0 b000 	str.w	fp, [r0]
    9c28:	480d      	ldr	r0, [pc, #52]	; (9c60 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    9c2a:	f8c0 b000 	str.w	fp, [r0]
    9c2e:	ac0a      	add	r4, sp, #40	; 0x28
    9c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9c34:	6038      	str	r0, [r7, #0]
    9c36:	6079      	str	r1, [r7, #4]
    9c38:	60ba      	str	r2, [r7, #8]
    9c3a:	60fb      	str	r3, [r7, #12]
    9c3c:	ac0e      	add	r4, sp, #56	; 0x38
    9c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9c42:	6138      	str	r0, [r7, #16]
    9c44:	6179      	str	r1, [r7, #20]
    9c46:	61ba      	str	r2, [r7, #24]
    9c48:	61fb      	str	r3, [r7, #28]
    9c4a:	b01b      	add	sp, #108	; 0x6c
    9c4c:	2001      	movs	r0, #1
    9c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c52:	f640 2176 	movw	r1, #2678	; 0xa76
    9c56:	2070      	movs	r0, #112	; 0x70
    9c58:	f002 fdf6 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c5c:	200002d4 	.word	0x200002d4
    9c60:	40000508 	.word	0x40000508
    9c64:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c68:	4614      	mov	r4, r2
    9c6a:	460d      	mov	r5, r1
    9c6c:	f04f 0a00 	mov.w	sl, #0
    9c70:	890a      	ldrh	r2, [r1, #8]
    9c72:	4651      	mov	r1, sl
    9c74:	f362 411f 	bfi	r1, r2, #16, #16
    9c78:	7aaa      	ldrb	r2, [r5, #10]
    9c7a:	46d1      	mov	r9, sl
    9c7c:	f362 0907 	bfi	r9, r2, #0, #8
    9c80:	7aea      	ldrb	r2, [r5, #11]
    9c82:	4606      	mov	r6, r0
    9c84:	f362 290f 	bfi	r9, r2, #8, #8
    9c88:	782a      	ldrb	r2, [r5, #0]
    9c8a:	b083      	sub	sp, #12
    9c8c:	6840      	ldr	r0, [r0, #4]
    9c8e:	f8c4 a000 	str.w	sl, [r4]
    9c92:	f362 4917 	bfi	r9, r2, #16, #8
    9c96:	f8c4 a004 	str.w	sl, [r4, #4]
    9c9a:	f8c4 9010 	str.w	r9, [r4, #16]
    9c9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9ca2:	4f9d      	ldr	r7, [pc, #628]	; (9f18 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    9ca4:	6870      	ldr	r0, [r6, #4]
    9ca6:	fba0 8907 	umull	r8, r9, r0, r7
    9caa:	6830      	ldr	r0, [r6, #0]
    9cac:	f006 ffb8 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9cb0:	eb10 0108 	adds.w	r1, r0, r8
    9cb4:	eb4a 0209 	adc.w	r2, sl, r9
    9cb8:	7828      	ldrb	r0, [r5, #0]
    9cba:	ea4f 0967 	mov.w	r9, r7, asr #1
    9cbe:	f1c9 0b00 	rsb	fp, r9, #0
    9cc2:	b170      	cbz	r0, 9ce2 <MPSL_IRQ_RADIO_Handler+0xb26>
    9cc4:	89e0      	ldrh	r0, [r4, #14]
    9cc6:	f894 8011 	ldrb.w	r8, [r4, #17]
    9cca:	43c0      	mvns	r0, r0
    9ccc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9cd0:	f104 020c 	add.w	r2, r4, #12
    9cd4:	4548      	cmp	r0, r9
    9cd6:	dd7c      	ble.n	9dd2 <MPSL_IRQ_RADIO_Handler+0xc16>
    9cd8:	f240 519f 	movw	r1, #1439	; 0x59f
    9cdc:	2070      	movs	r0, #112	; 0x70
    9cde:	f002 fdb3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ce2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9f1c <MPSL_IRQ_RADIO_Handler+0xd60>
    9ce6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9cea:	eb11 0a0c 	adds.w	sl, r1, ip
    9cee:	f142 0c00 	adc.w	ip, r2, #0
    9cf2:	ebb0 0a0a 	subs.w	sl, r0, sl
    9cf6:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9cfa:	d272      	bcs.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9cfc:	1a41      	subs	r1, r0, r1
    9cfe:	eb73 0102 	sbcs.w	r1, r3, r2
    9d02:	d36e      	bcc.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9d04:	ebb0 0608 	subs.w	r6, r0, r8
    9d08:	42b7      	cmp	r7, r6
    9d0a:	d82b      	bhi.n	9d64 <MPSL_IRQ_RADIO_Handler+0xba8>
    9d0c:	89e0      	ldrh	r0, [r4, #14]
    9d0e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9d12:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9d16:	43c1      	mvns	r1, r0
    9d18:	4a81      	ldr	r2, [pc, #516]	; (9f20 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9d1a:	eb08 0001 	add.w	r0, r8, r1
    9d1e:	4542      	cmp	r2, r8
    9d20:	d32b      	bcc.n	9d7a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9d22:	4549      	cmp	r1, r9
    9d24:	dcd8      	bgt.n	9cd8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9d26:	4559      	cmp	r1, fp
    9d28:	db66      	blt.n	9df8 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9d2a:	4287      	cmp	r7, r0
    9d2c:	bfdc      	itt	le
    9d2e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9d32:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9d36:	dd05      	ble.n	9d44 <MPSL_IRQ_RADIO_Handler+0xb88>
    9d38:	2800      	cmp	r0, #0
    9d3a:	bfbc      	itt	lt
    9d3c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9d40:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9d44:	466a      	mov	r2, sp
    9d46:	a901      	add	r1, sp, #4
    9d48:	f001 fcc8 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9d4c:	89e0      	ldrh	r0, [r4, #14]
    9d4e:	f89d 1000 	ldrb.w	r1, [sp]
    9d52:	1a30      	subs	r0, r6, r0
    9d54:	1a40      	subs	r0, r0, r1
    9d56:	1e40      	subs	r0, r0, #1
    9d58:	42b8      	cmp	r0, r7
    9d5a:	d302      	bcc.n	9d62 <MPSL_IRQ_RADIO_Handler+0xba6>
    9d5c:	68a0      	ldr	r0, [r4, #8]
    9d5e:	1c40      	adds	r0, r0, #1
    9d60:	60a0      	str	r0, [r4, #8]
    9d62:	4646      	mov	r6, r8
    9d64:	89e0      	ldrh	r0, [r4, #14]
    9d66:	4b6e      	ldr	r3, [pc, #440]	; (9f20 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9d68:	43c1      	mvns	r1, r0
    9d6a:	686d      	ldr	r5, [r5, #4]
    9d6c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9d70:	1870      	adds	r0, r6, r1
    9d72:	f104 020c 	add.w	r2, r4, #12
    9d76:	429e      	cmp	r6, r3
    9d78:	d904      	bls.n	9d84 <MPSL_IRQ_RADIO_Handler+0xbc8>
    9d7a:	f240 519e 	movw	r1, #1438	; 0x59e
    9d7e:	2070      	movs	r0, #112	; 0x70
    9d80:	f002 fd62 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d84:	4549      	cmp	r1, r9
    9d86:	dca7      	bgt.n	9cd8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9d88:	4559      	cmp	r1, fp
    9d8a:	db35      	blt.n	9df8 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9d8c:	4287      	cmp	r7, r0
    9d8e:	bfdc      	itt	le
    9d90:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9d94:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9d98:	dd05      	ble.n	9da6 <MPSL_IRQ_RADIO_Handler+0xbea>
    9d9a:	2800      	cmp	r0, #0
    9d9c:	bfbc      	itt	lt
    9d9e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9da2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9da6:	4621      	mov	r1, r4
    9da8:	f001 fc98 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9dac:	6820      	ldr	r0, [r4, #0]
    9dae:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9db2:	1970      	adds	r0, r6, r5
    9db4:	1c40      	adds	r0, r0, #1
    9db6:	6021      	str	r1, [r4, #0]
    9db8:	f1b8 0f00 	cmp.w	r8, #0
    9dbc:	bf08      	it	eq
    9dbe:	307a      	addeq	r0, #122	; 0x7a
    9dc0:	d004      	beq.n	9dcc <MPSL_IRQ_RADIO_Handler+0xc10>
    9dc2:	f1b8 0f01 	cmp.w	r8, #1
    9dc6:	bf08      	it	eq
    9dc8:	3048      	addeq	r0, #72	; 0x48
    9dca:	d13a      	bne.n	9e42 <MPSL_IRQ_RADIO_Handler+0xc86>
    9dcc:	f001 fc6a 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9dd0:	e001      	b.n	9dd6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9dd2:	e00e      	b.n	9df2 <MPSL_IRQ_RADIO_Handler+0xc36>
    9dd4:	e005      	b.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9dd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9dda:	6060      	str	r0, [r4, #4]
    9ddc:	b007      	add	sp, #28
    9dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9de2:	6830      	ldr	r0, [r6, #0]
    9de4:	1e40      	subs	r0, r0, #1
    9de6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9dea:	6020      	str	r0, [r4, #0]
    9dec:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9df0:	e7f3      	b.n	9dda <MPSL_IRQ_RADIO_Handler+0xc1e>
    9df2:	4601      	mov	r1, r0
    9df4:	4558      	cmp	r0, fp
    9df6:	da04      	bge.n	9e02 <MPSL_IRQ_RADIO_Handler+0xc46>
    9df8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9dfc:	2070      	movs	r0, #112	; 0x70
    9dfe:	f002 fd23 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e02:	4287      	cmp	r7, r0
    9e04:	bfdc      	itt	le
    9e06:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9e0a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9e0e:	dd05      	ble.n	9e1c <MPSL_IRQ_RADIO_Handler+0xc60>
    9e10:	2800      	cmp	r0, #0
    9e12:	bfbc      	itt	lt
    9e14:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9e18:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9e1c:	4621      	mov	r1, r4
    9e1e:	f001 fc5d 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e22:	6820      	ldr	r0, [r4, #0]
    9e24:	f1b8 0f00 	cmp.w	r8, #0
    9e28:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9e2c:	f10a 0001 	add.w	r0, sl, #1
    9e30:	6021      	str	r1, [r4, #0]
    9e32:	bf08      	it	eq
    9e34:	307a      	addeq	r0, #122	; 0x7a
    9e36:	d009      	beq.n	9e4c <MPSL_IRQ_RADIO_Handler+0xc90>
    9e38:	f1b8 0f01 	cmp.w	r8, #1
    9e3c:	bf08      	it	eq
    9e3e:	3048      	addeq	r0, #72	; 0x48
    9e40:	d004      	beq.n	9e4c <MPSL_IRQ_RADIO_Handler+0xc90>
    9e42:	f240 6139 	movw	r1, #1593	; 0x639
    9e46:	2070      	movs	r0, #112	; 0x70
    9e48:	f002 fcfe 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e4c:	f001 fc2a 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9e50:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9e54:	6061      	str	r1, [r4, #4]
    9e56:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9e5a:	aa01      	add	r2, sp, #4
    9e5c:	4669      	mov	r1, sp
    9e5e:	4648      	mov	r0, r9
    9e60:	6837      	ldr	r7, [r6, #0]
    9e62:	f001 fc3b 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e66:	f002 f977 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9e6a:	f001 fc1b 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9e6e:	4680      	mov	r8, r0
    9e70:	482c      	ldr	r0, [pc, #176]	; (9f24 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9e72:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9e76:	2920      	cmp	r1, #32
    9e78:	d02a      	beq.n	9ed0 <MPSL_IRQ_RADIO_Handler+0xd14>
    9e7a:	68c0      	ldr	r0, [r0, #12]
    9e7c:	1d40      	adds	r0, r0, #5
    9e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e82:	bf00      	nop
    9e84:	e9d4 2100 	ldrd	r2, r1, [r4]
    9e88:	1a89      	subs	r1, r1, r2
    9e8a:	4401      	add	r1, r0
    9e8c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e90:	e9c4 0100 	strd	r0, r1, [r4]
    9e94:	6831      	ldr	r1, [r6, #0]
    9e96:	4281      	cmp	r1, r0
    9e98:	d902      	bls.n	9ea0 <MPSL_IRQ_RADIO_Handler+0xce4>
    9e9a:	68a0      	ldr	r0, [r4, #8]
    9e9c:	1c40      	adds	r0, r0, #1
    9e9e:	60a0      	str	r0, [r4, #8]
    9ea0:	6832      	ldr	r2, [r6, #0]
    9ea2:	6928      	ldr	r0, [r5, #16]
    9ea4:	4621      	mov	r1, r4
    9ea6:	9b06      	ldr	r3, [sp, #24]
    9ea8:	f7ff f9e4 	bl	9274 <MPSL_IRQ_RADIO_Handler+0xb8>
    9eac:	2800      	cmp	r0, #0
    9eae:	bf1c      	itt	ne
    9eb0:	b007      	addne	sp, #28
    9eb2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eb6:	e9d4 1000 	ldrd	r1, r0, [r4]
    9eba:	1a40      	subs	r0, r0, r1
    9ebc:	6831      	ldr	r1, [r6, #0]
    9ebe:	6021      	str	r1, [r4, #0]
    9ec0:	6831      	ldr	r1, [r6, #0]
    9ec2:	4408      	add	r0, r1
    9ec4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9ec8:	6060      	str	r0, [r4, #4]
    9eca:	b007      	add	sp, #28
    9ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ed0:	3709      	adds	r7, #9
    9ed2:	f1b9 0f00 	cmp.w	r9, #0
    9ed6:	d016      	beq.n	9f06 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9ed8:	f002 fc3e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9edc:	b998      	cbnz	r0, 9f06 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9ede:	f002 fb13 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ee2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9ee6:	bf08      	it	eq
    9ee8:	200d      	moveq	r0, #13
    9eea:	d00b      	beq.n	9f04 <MPSL_IRQ_RADIO_Handler+0xd48>
    9eec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9ef0:	3856      	subs	r0, #86	; 0x56
    9ef2:	bf08      	it	eq
    9ef4:	201c      	moveq	r0, #28
    9ef6:	d005      	beq.n	9f04 <MPSL_IRQ_RADIO_Handler+0xd48>
    9ef8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9efc:	389f      	subs	r0, #159	; 0x9f
    9efe:	bf14      	ite	ne
    9f00:	2000      	movne	r0, #0
    9f02:	2032      	moveq	r0, #50	; 0x32
    9f04:	4407      	add	r7, r0
    9f06:	9800      	ldr	r0, [sp, #0]
    9f08:	4580      	cmp	r8, r0
    9f0a:	bf84      	itt	hi
    9f0c:	eba8 0000 	subhi.w	r0, r8, r0
    9f10:	4407      	addhi	r7, r0
    9f12:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9f16:	e7b5      	b.n	9e84 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9f18:	1e848000 	.word	0x1e848000
    9f1c:	0f424000 	.word	0x0f424000
    9f20:	1e847fff 	.word	0x1e847fff
    9f24:	20001574 	.word	0x20001574
    9f28:	b570      	push	{r4, r5, r6, lr}
    9f2a:	4d1e      	ldr	r5, [pc, #120]	; (9fa4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9f2c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9f30:	2820      	cmp	r0, #32
    9f32:	bf18      	it	ne
    9f34:	bd70      	popne	{r4, r5, r6, pc}
    9f36:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9f3a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9f3e:	4428      	add	r0, r5
    9f40:	f890 4020 	ldrb.w	r4, [r0, #32]
    9f44:	2c20      	cmp	r4, #32
    9f46:	d027      	beq.n	9f98 <MPSL_IRQ_RADIO_Handler+0xddc>
    9f48:	4b17      	ldr	r3, [pc, #92]	; (9fa8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9f4a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9f4e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9f52:	7849      	ldrb	r1, [r1, #1]
    9f54:	f880 1020 	strb.w	r1, [r0, #32]
    9f58:	20ff      	movs	r0, #255	; 0xff
    9f5a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9f5e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9f62:	4621      	mov	r1, r4
    9f64:	2002      	movs	r0, #2
    9f66:	f000 f891 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    9f6a:	2000      	movs	r0, #0
    9f6c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9f70:	77a8      	strb	r0, [r5, #30]
    9f72:	490e      	ldr	r1, [pc, #56]	; (9fac <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9f74:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9f78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9f7c:	7e00      	ldrb	r0, [r0, #24]
    9f7e:	2800      	cmp	r0, #0
    9f80:	bf08      	it	eq
    9f82:	f002 fdcb 	bleq	cb1c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9f86:	2000      	movs	r0, #0
    9f88:	4909      	ldr	r1, [pc, #36]	; (9fb0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9f8a:	6849      	ldr	r1, [r1, #4]
    9f8c:	2900      	cmp	r1, #0
    9f8e:	bf08      	it	eq
    9f90:	bd70      	popeq	{r4, r5, r6, pc}
    9f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f96:	4708      	bx	r1
    9f98:	f240 3132 	movw	r1, #818	; 0x332
    9f9c:	2070      	movs	r0, #112	; 0x70
    9f9e:	f002 fc53 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fa2:	0000      	.short	0x0000
    9fa4:	20001574 	.word	0x20001574
    9fa8:	200014f4 	.word	0x200014f4
    9fac:	20001174 	.word	0x20001174
    9fb0:	200002d4 	.word	0x200002d4
    9fb4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9fb8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a07c <MPSL_IRQ_RADIO_Handler+0xec0>
    9fbc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9fc0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9fc4:	4440      	add	r0, r8
    9fc6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9fca:	2c20      	cmp	r4, #32
    9fcc:	bf08      	it	eq
    9fce:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9fd2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; a080 <MPSL_IRQ_RADIO_Handler+0xec4>
    9fd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; a084 <MPSL_IRQ_RADIO_Handler+0xec8>
    9fda:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9fde:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9fe2:	2607      	movs	r6, #7
    9fe4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9fe8:	2801      	cmp	r0, #1
    9fea:	d00e      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9fec:	2804      	cmp	r0, #4
    9fee:	bf08      	it	eq
    9ff0:	2602      	moveq	r6, #2
    9ff2:	d00a      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9ff4:	2805      	cmp	r0, #5
    9ff6:	bf0c      	ite	eq
    9ff8:	2603      	moveq	r6, #3
    9ffa:	2806      	cmpne	r0, #6
    9ffc:	d005      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9ffe:	f640 01dd 	movw	r1, #2269	; 0x8dd
    a002:	f04f 0070 	mov.w	r0, #112	; 0x70
    a006:	f002 fc1f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a00a:	f1bb 0f00 	cmp.w	fp, #0
    a00e:	bf18      	it	ne
    a010:	f3af 8000 	nopne.w
    a014:	f3ef 8010 	mrs	r0, PRIMASK
    a018:	b672      	cpsid	i
    a01a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    a01e:	784a      	ldrb	r2, [r1, #1]
    a020:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    a024:	4441      	add	r1, r8
    a026:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    a02a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    a02e:	42a2      	cmp	r2, r4
    a030:	bf04      	itt	eq
    a032:	2220      	moveq	r2, #32
    a034:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    a038:	b1c0      	cbz	r0, a06c <MPSL_IRQ_RADIO_Handler+0xeb0>
    a03a:	462a      	mov	r2, r5
    a03c:	4621      	mov	r1, r4
    a03e:	2001      	movs	r0, #1
    a040:	f000 f824 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a044:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a048:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    a04c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    a050:	6840      	ldr	r0, [r0, #4]
    a052:	4631      	mov	r1, r6
    a054:	4790      	blx	r2
    a056:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    a05a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    a05e:	4440      	add	r0, r8
    a060:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    a064:	2c20      	cmp	r4, #32
    a066:	d1ba      	bne.n	9fde <MPSL_IRQ_RADIO_Handler+0xe22>
    a068:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a06c:	4806      	ldr	r0, [pc, #24]	; (a088 <MPSL_IRQ_RADIO_Handler+0xecc>)
    a06e:	2800      	cmp	r0, #0
    a070:	bf18      	it	ne
    a072:	f3af 8000 	nopne.w
    a076:	b662      	cpsie	i
    a078:	e7df      	b.n	a03a <MPSL_IRQ_RADIO_Handler+0xe7e>
    a07a:	0000      	.short	0x0000
    a07c:	20001574 	.word	0x20001574
    a080:	00000000 	.word	0x00000000
    a084:	200014f4 	.word	0x200014f4
    a088:	00000000 	.word	0x00000000
    a08c:	f8df c058 	ldr.w	ip, [pc, #88]	; a0e8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    a090:	b510      	push	{r4, lr}
    a092:	2300      	movs	r3, #0
    a094:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    a098:	2807      	cmp	r0, #7
    a09a:	d21f      	bcs.n	a0dc <MPSL_IRQ_RADIO_Handler+0xf20>
    a09c:	e8df f000 	tbb	[pc, r0]
    a0a0:	05050505 	.word	0x05050505
    a0a4:	00040404 	.word	0x00040404
    a0a8:	2301      	movs	r3, #1
    a0aa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	bf08      	it	eq
    a0b2:	bd10      	popeq	{r4, pc}
    a0b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a0b8:	480c      	ldr	r0, [pc, #48]	; (a0ec <MPSL_IRQ_RADIO_Handler+0xf30>)
    a0ba:	4402      	add	r2, r0
    a0bc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    a0c0:	2820      	cmp	r0, #32
    a0c2:	bf0e      	itee	eq
    a0c4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    a0c8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    a0cc:	7041      	strbne	r1, [r0, #1]
    a0ce:	2020      	movs	r0, #32
    a0d0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    a0d4:	7058      	strb	r0, [r3, #1]
    a0d6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    a0da:	bd10      	pop	{r4, pc}
    a0dc:	f240 216e 	movw	r1, #622	; 0x26e
    a0e0:	2070      	movs	r0, #112	; 0x70
    a0e2:	f002 fbb1 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0e6:	0000      	.short	0x0000
    a0e8:	200014f4 	.word	0x200014f4
    a0ec:	20001574 	.word	0x20001574
    a0f0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a0f4:	460f      	mov	r7, r1
    a0f6:	4680      	mov	r8, r0
    a0f8:	f8df a160 	ldr.w	sl, [pc, #352]	; a25c <MPSL_IRQ_RADIO_Handler+0x10a0>
    a0fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    a100:	4450      	add	r0, sl
    a102:	f1b8 0f01 	cmp.w	r8, #1
    a106:	f890 4020 	ldrb.w	r4, [r0, #32]
    a10a:	4625      	mov	r5, r4
    a10c:	bf18      	it	ne
    a10e:	f1b8 0f02 	cmpne.w	r8, #2
    a112:	d005      	beq.n	a120 <MPSL_IRQ_RADIO_Handler+0xf64>
    a114:	f640 21ac 	movw	r1, #2732	; 0xaac
    a118:	f04f 0070 	mov.w	r0, #112	; 0x70
    a11c:	f002 fb94 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a120:	f04f 0b00 	mov.w	fp, #0
    a124:	2d20      	cmp	r5, #32
    a126:	d042      	beq.n	a1ae <MPSL_IRQ_RADIO_Handler+0xff2>
    a128:	f89a 001e 	ldrb.w	r0, [sl, #30]
    a12c:	2600      	movs	r6, #0
    a12e:	2800      	cmp	r0, #0
    a130:	bf08      	it	eq
    a132:	2602      	moveq	r6, #2
    a134:	f001 fc3c 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a138:	f8df c124 	ldr.w	ip, [pc, #292]	; a260 <MPSL_IRQ_RADIO_Handler+0x10a4>
    a13c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a140:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    a144:	688a      	ldr	r2, [r1, #8]
    a146:	68c9      	ldr	r1, [r1, #12]
    a148:	1a12      	subs	r2, r2, r0
    a14a:	1a09      	subs	r1, r1, r0
    a14c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a150:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a154:	4296      	cmp	r6, r2
    a156:	bf99      	ittee	ls
    a158:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    a15c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a160:	4a40      	ldrhi	r2, [pc, #256]	; (a264 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    a162:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    a166:	d920      	bls.n	a1aa <MPSL_IRQ_RADIO_Handler+0xfee>
    a168:	4622      	mov	r2, r4
    a16a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    a16e:	784c      	ldrb	r4, [r1, #1]
    a170:	2c20      	cmp	r4, #32
    a172:	d012      	beq.n	a19a <MPSL_IRQ_RADIO_Handler+0xfde>
    a174:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a178:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    a17c:	688b      	ldr	r3, [r1, #8]
    a17e:	68c9      	ldr	r1, [r1, #12]
    a180:	1a1b      	subs	r3, r3, r0
    a182:	1a09      	subs	r1, r1, r0
    a184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a188:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a18c:	429e      	cmp	r6, r3
    a18e:	bf9c      	itt	ls
    a190:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    a194:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a198:	d8e6      	bhi.n	a168 <MPSL_IRQ_RADIO_Handler+0xfac>
    a19a:	2a20      	cmp	r2, #32
    a19c:	d005      	beq.n	a1aa <MPSL_IRQ_RADIO_Handler+0xfee>
    a19e:	463b      	mov	r3, r7
    a1a0:	2120      	movs	r1, #32
    a1a2:	2004      	movs	r0, #4
    a1a4:	f7ff f82a 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a1a8:	4604      	mov	r4, r0
    a1aa:	42ac      	cmp	r4, r5
    a1ac:	d116      	bne.n	a1dc <MPSL_IRQ_RADIO_Handler+0x1020>
    a1ae:	482e      	ldr	r0, [pc, #184]	; (a268 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    a1b0:	2800      	cmp	r0, #0
    a1b2:	bf18      	it	ne
    a1b4:	f3af 8000 	nopne.w
    a1b8:	f001 fbfa 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1bc:	4603      	mov	r3, r0
    a1be:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    a1c2:	2820      	cmp	r0, #32
    a1c4:	d00d      	beq.n	a1e2 <MPSL_IRQ_RADIO_Handler+0x1026>
    a1c6:	f8da 0008 	ldr.w	r0, [sl, #8]
    a1ca:	1c99      	adds	r1, r3, #2
    a1cc:	1a08      	subs	r0, r1, r0
    a1ce:	0200      	lsls	r0, r0, #8
    a1d0:	17c1      	asrs	r1, r0, #31
    a1d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a1d6:	1200      	asrs	r0, r0, #8
    a1d8:	2800      	cmp	r0, #0
    a1da:	dd02      	ble.n	a1e2 <MPSL_IRQ_RADIO_Handler+0x1026>
    a1dc:	2000      	movs	r0, #0
    a1de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a1e2:	2d20      	cmp	r5, #32
    a1e4:	d014      	beq.n	a210 <MPSL_IRQ_RADIO_Handler+0x1054>
    a1e6:	462a      	mov	r2, r5
    a1e8:	4641      	mov	r1, r8
    a1ea:	4618      	mov	r0, r3
    a1ec:	f7ff fa9c 	bl	9728 <MPSL_IRQ_RADIO_Handler+0x56c>
    a1f0:	2800      	cmp	r0, #0
    a1f2:	bf1e      	ittt	ne
    a1f4:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    a1f8:	2002      	movne	r0, #2
    a1fa:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a1fe:	463b      	mov	r3, r7
    a200:	462a      	mov	r2, r5
    a202:	2120      	movs	r1, #32
    a204:	2004      	movs	r0, #4
    a206:	f7fe fff9 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a20a:	2000      	movs	r0, #0
    a20c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a210:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    a214:	f1b0 3fff 	cmp.w	r0, #4294967295
    a218:	d005      	beq.n	a226 <MPSL_IRQ_RADIO_Handler+0x106a>
    a21a:	f002 f97b 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    a21e:	f04f 30ff 	mov.w	r0, #4294967295
    a222:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    a226:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    a22a:	b120      	cbz	r0, a236 <MPSL_IRQ_RADIO_Handler+0x107a>
    a22c:	2005      	movs	r0, #5
    a22e:	f001 fe35 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a232:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    a236:	2004      	movs	r0, #4
    a238:	f001 fe30 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a23c:	f001 fe9e 	bl	bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a240:	2020      	movs	r0, #32
    a242:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    a246:	4809      	ldr	r0, [pc, #36]	; (a26c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    a248:	6880      	ldr	r0, [r0, #8]
    a24a:	f8c0 b000 	str.w	fp, [r0]
    a24e:	4808      	ldr	r0, [pc, #32]	; (a270 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    a250:	f8c0 b000 	str.w	fp, [r0]
    a254:	2001      	movs	r0, #1
    a256:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a25a:	0000      	.short	0x0000
    a25c:	20001574 	.word	0x20001574
    a260:	20001174 	.word	0x20001174
    a264:	200014f4 	.word	0x200014f4
    a268:	00000000 	.word	0x00000000
    a26c:	200002d4 	.word	0x200002d4
    a270:	40000508 	.word	0x40000508

0000a274 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    a274:	4906      	ldr	r1, [pc, #24]	; (a290 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    a276:	b510      	push	{r4, lr}
    a278:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    a27c:	2a20      	cmp	r2, #32
    a27e:	bf1c      	itt	ne
    a280:	7788      	strbne	r0, [r1, #30]
    a282:	bd10      	popne	{r4, pc}
    a284:	f240 319a 	movw	r1, #922	; 0x39a
    a288:	2070      	movs	r0, #112	; 0x70
    a28a:	f002 fadd 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28e:	0000      	.short	0x0000
    a290:	20001574 	.word	0x20001574

0000a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a298:	4e69      	ldr	r6, [pc, #420]	; (a440 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a29a:	4607      	mov	r7, r0
    a29c:	b08d      	sub	sp, #52	; 0x34
    a29e:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a2a2:	4688      	mov	r8, r1
    a2a4:	2820      	cmp	r0, #32
    a2a6:	d055      	beq.n	a354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    a2a8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a2ac:	f106 0408 	add.w	r4, r6, #8
    a2b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a2b4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    a2b8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    a2bc:	2020      	movs	r0, #32
    a2be:	f88d 0020 	strb.w	r0, [sp, #32]
    a2c2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a2c6:	aa0a      	add	r2, sp, #40	; 0x28
    a2c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a2cc:	4430      	add	r0, r6
    a2ce:	a909      	add	r1, sp, #36	; 0x24
    a2d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    a2d4:	68f0      	ldr	r0, [r6, #12]
    a2d6:	9002      	str	r0, [sp, #8]
    a2d8:	6830      	ldr	r0, [r6, #0]
    a2da:	4438      	add	r0, r7
    a2dc:	f001 f9fe 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a2e0:	f8da 000c 	ldr.w	r0, [sl, #12]
    a2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    a2e6:	2f65      	cmp	r7, #101	; 0x65
    a2e8:	4408      	add	r0, r1
    a2ea:	d338      	bcc.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a2ec:	4a55      	ldr	r2, [pc, #340]	; (a444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    a2ee:	2100      	movs	r1, #0
    a2f0:	1bd2      	subs	r2, r2, r7
    a2f2:	eb71 0201 	sbcs.w	r2, r1, r1
    a2f6:	d332      	bcc.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a2f8:	6822      	ldr	r2, [r4, #0]
    a2fa:	1a82      	subs	r2, r0, r2
    a2fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a300:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a304:	d82b      	bhi.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a30a:	6060      	str	r0, [r4, #4]
    a30c:	4630      	mov	r0, r6
    a30e:	f884 8010 	strb.w	r8, [r4, #16]
    a312:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    a316:	f10d 0a20 	add.w	sl, sp, #32
    a31a:	2d20      	cmp	r5, #32
    a31c:	bf1c      	itt	ne
    a31e:	494a      	ldrne	r1, [pc, #296]	; (a448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a320:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    a324:	d050      	beq.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a326:	bf00      	nop
    a328:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    a32c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    a330:	6861      	ldr	r1, [r4, #4]
    a332:	f8d8 6008 	ldr.w	r6, [r8, #8]
    a336:	f108 0008 	add.w	r0, r8, #8
    a33a:	1a71      	subs	r1, r6, r1
    a33c:	0209      	lsls	r1, r1, #8
    a33e:	17ca      	asrs	r2, r1, #31
    a340:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a344:	1209      	asrs	r1, r1, #8
    a346:	d42d      	bmi.n	a3a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a348:	89c0      	ldrh	r0, [r0, #14]
    a34a:	2800      	cmp	r0, #0
    a34c:	d03c      	beq.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a34e:	89e0      	ldrh	r0, [r4, #14]
    a350:	b148      	cbz	r0, a366 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    a352:	e039      	b.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a354:	f640 3173 	movw	r1, #2931	; 0xb73
    a358:	2070      	movs	r0, #112	; 0x70
    a35a:	f002 fa75 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a35e:	b00d      	add	sp, #52	; 0x34
    a360:	2001      	movs	r0, #1
    a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a366:	6820      	ldr	r0, [r4, #0]
    a368:	900c      	str	r0, [sp, #48]	; 0x30
    a36a:	f002 f8cd 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a36e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a372:	bf08      	it	eq
    a374:	200d      	moveq	r0, #13
    a376:	d00b      	beq.n	a390 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a378:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a37c:	3856      	subs	r0, #86	; 0x56
    a37e:	bf08      	it	eq
    a380:	201c      	moveq	r0, #28
    a382:	d005      	beq.n	a390 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a384:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a388:	389f      	subs	r0, #159	; 0x9f
    a38a:	bf14      	ite	ne
    a38c:	2000      	movne	r0, #0
    a38e:	2032      	moveq	r0, #50	; 0x32
    a390:	1c41      	adds	r1, r0, #1
    a392:	980c      	ldr	r0, [sp, #48]	; 0x30
    a394:	1a30      	subs	r0, r6, r0
    a396:	0200      	lsls	r0, r0, #8
    a398:	17c2      	asrs	r2, r0, #31
    a39a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a39e:	1200      	asrs	r0, r0, #8
    a3a0:	4288      	cmp	r0, r1
    a3a2:	da11      	bge.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a3a4:	f88a 5000 	strb.w	r5, [sl]
    a3a8:	f898 1018 	ldrb.w	r1, [r8, #24]
    a3ac:	7c20      	ldrb	r0, [r4, #16]
    a3ae:	4281      	cmp	r1, r0
    a3b0:	d805      	bhi.n	a3be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a3b2:	9802      	ldr	r0, [sp, #8]
    a3b4:	6060      	str	r0, [r4, #4]
    a3b6:	b00d      	add	sp, #52	; 0x34
    a3b8:	2002      	movs	r0, #2
    a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3be:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a3c2:	7845      	ldrb	r5, [r0, #1]
    a3c4:	2d20      	cmp	r5, #32
    a3c6:	d1af      	bne.n	a328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a3c8:	2005      	movs	r0, #5
    a3ca:	f001 fd67 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a3ce:	4c1c      	ldr	r4, [pc, #112]	; (a440 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a3d0:	f04f 30ff 	mov.w	r0, #4294967295
    a3d4:	6060      	str	r0, [r4, #4]
    a3d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a3da:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a3de:	2120      	movs	r1, #32
    a3e0:	2a20      	cmp	r2, #32
    a3e2:	d003      	beq.n	a3ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a3e4:	2005      	movs	r0, #5
    a3e6:	f7fe ff09 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a3ea:	e004      	b.n	a3f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a3ec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a3f0:	4420      	add	r0, r4
    a3f2:	f890 0020 	ldrb.w	r0, [r0, #32]
    a3f6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a3fa:	4913      	ldr	r1, [pc, #76]	; (a448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a3fc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a400:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a404:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a408:	7048      	strb	r0, [r1, #1]
    a40a:	6820      	ldr	r0, [r4, #0]
    a40c:	4438      	add	r0, r7
    a40e:	6020      	str	r0, [r4, #0]
    a410:	20ff      	movs	r0, #255	; 0xff
    a412:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a416:	7e60      	ldrb	r0, [r4, #25]
    a418:	2801      	cmp	r0, #1
    a41a:	d105      	bne.n	a428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a41c:	68e0      	ldr	r0, [r4, #12]
    a41e:	1e40      	subs	r0, r0, #1
    a420:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a424:	f001 fb9e 	bl	bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a428:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a42c:	2820      	cmp	r0, #32
    a42e:	d003      	beq.n	a438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a430:	4806      	ldr	r0, [pc, #24]	; (a44c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a432:	7840      	ldrb	r0, [r0, #1]
    a434:	f002 fadc 	bl	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a438:	b00d      	add	sp, #52	; 0x34
    a43a:	2000      	movs	r0, #0
    a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a440:	20001574 	.word	0x20001574
    a444:	0f424000 	.word	0x0f424000
    a448:	200014f4 	.word	0x200014f4
    a44c:	200002d4 	.word	0x200002d4

0000a450 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a450:	b570      	push	{r4, r5, r6, lr}
    a452:	4a24      	ldr	r2, [pc, #144]	; (a4e4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    a454:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a458:	2920      	cmp	r1, #32
    a45a:	d03a      	beq.n	a4d2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    a45c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a460:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    a464:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a468:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    a46c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    a470:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    a474:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a478:	4411      	add	r1, r2
    a47a:	f891 1020 	ldrb.w	r1, [r1, #32]
    a47e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a482:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a486:	2920      	cmp	r1, #32
    a488:	d028      	beq.n	a4dc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    a48a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    a48e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    a492:	7e2d      	ldrb	r5, [r5, #24]
    a494:	4285      	cmp	r5, r0
    a496:	bf84      	itt	hi
    a498:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    a49c:	7849      	ldrbhi	r1, [r1, #1]
    a49e:	d8f2      	bhi.n	a486 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    a4a0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a4a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a4a8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    a4ac:	6889      	ldr	r1, [r1, #8]
    a4ae:	6814      	ldr	r4, [r2, #0]
    a4b0:	1a08      	subs	r0, r1, r0
    a4b2:	0200      	lsls	r0, r0, #8
    a4b4:	17c1      	asrs	r1, r0, #31
    a4b6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a4ba:	1200      	asrs	r0, r0, #8
    a4bc:	d407      	bmi.n	a4ce <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    a4be:	f006 fbaf 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a4c2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    a4c6:	4288      	cmp	r0, r1
    a4c8:	bf24      	itt	cs
    a4ca:	1b00      	subcs	r0, r0, r4
    a4cc:	bd70      	popcs	{r4, r5, r6, pc}
    a4ce:	2000      	movs	r0, #0
    a4d0:	bd70      	pop	{r4, r5, r6, pc}
    a4d2:	f640 3145 	movw	r1, #2885	; 0xb45
    a4d6:	2070      	movs	r0, #112	; 0x70
    a4d8:	f002 f9b6 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4dc:	f04f 30ff 	mov.w	r0, #4294967295
    a4e0:	bd70      	pop	{r4, r5, r6, pc}
    a4e2:	0000      	.short	0x0000
    a4e4:	20001574 	.word	0x20001574

0000a4e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a4e8:	4806      	ldr	r0, [pc, #24]	; (a504 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a4ea:	b510      	push	{r4, lr}
    a4ec:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a4f0:	2920      	cmp	r1, #32
    a4f2:	bf1c      	itt	ne
    a4f4:	7e00      	ldrbne	r0, [r0, #24]
    a4f6:	bd10      	popne	{r4, pc}
    a4f8:	f640 316d 	movw	r1, #2925	; 0xb6d
    a4fc:	2070      	movs	r0, #112	; 0x70
    a4fe:	f002 f9a3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a502:	0000      	.short	0x0000
    a504:	20001574 	.word	0x20001574

0000a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a508:	b570      	push	{r4, r5, r6, lr}
    a50a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a50e:	4809      	ldr	r0, [pc, #36]	; (a534 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a510:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a514:	4908      	ldr	r1, [pc, #32]	; (a538 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a516:	6920      	ldr	r0, [r4, #16]
    a518:	fba0 5601 	umull	r5, r6, r0, r1
    a51c:	68a0      	ldr	r0, [r4, #8]
    a51e:	f006 fb7f 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a522:	8ae1      	ldrh	r1, [r4, #22]
    a524:	7d22      	ldrb	r2, [r4, #20]
    a526:	1c40      	adds	r0, r0, #1
    a528:	4411      	add	r1, r2
    a52a:	4408      	add	r0, r1
    a52c:	1940      	adds	r0, r0, r5
    a52e:	f146 0100 	adc.w	r1, r6, #0
    a532:	bd70      	pop	{r4, r5, r6, pc}
    a534:	20001174 	.word	0x20001174
    a538:	1e848000 	.word	0x1e848000

0000a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a53e:	4d6f      	ldr	r5, [pc, #444]	; (a6fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a540:	2601      	movs	r6, #1
    a542:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a546:	4a6e      	ldr	r2, [pc, #440]	; (a700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a548:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a54a:	2808      	cmp	r0, #8
    a54c:	d272      	bcs.n	a634 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a54e:	e8df f000 	tbb	[pc, r0]
    a552:	7704      	.short	0x7704
    a554:	44cfb19f 	.word	0x44cfb19f
    a558:	bbb6      	.short	0xbbb6
    a55a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a55e:	d104      	bne.n	a56a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a560:	f001 fff4 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a564:	f001 fa24 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a568:	62e0      	str	r0, [r4, #44]	; 0x2c
    a56a:	8ae0      	ldrh	r0, [r4, #22]
    a56c:	b110      	cbz	r0, a574 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a56e:	f002 f8f3 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a572:	b180      	cbz	r0, a596 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a574:	f7ff fcd8 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a578:	20ff      	movs	r0, #255	; 0xff
    a57a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a57e:	6861      	ldr	r1, [r4, #4]
    a580:	f1b1 3fff 	cmp.w	r1, #4294967295
    a584:	d003      	beq.n	a58e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a586:	2005      	movs	r0, #5
    a588:	f001 fbd2 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a58c:	b140      	cbz	r0, a5a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a58e:	7e60      	ldrb	r0, [r4, #25]
    a590:	2801      	cmp	r0, #1
    a592:	d110      	bne.n	a5b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a594:	e009      	b.n	a5aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a596:	f640 0169 	movw	r1, #2153	; 0x869
    a59a:	2070      	movs	r0, #112	; 0x70
    a59c:	f002 f954 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5a0:	f640 016e 	movw	r1, #2158	; 0x86e
    a5a4:	2070      	movs	r0, #112	; 0x70
    a5a6:	f002 f94f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5aa:	68e0      	ldr	r0, [r4, #12]
    a5ac:	1e40      	subs	r0, r0, #1
    a5ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a5b2:	f001 fad7 	bl	bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a5b6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a5ba:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a5be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a5c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a5c6:	6840      	ldr	r0, [r0, #4]
    a5c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a5cc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a5d0:	b001      	add	sp, #4
    a5d2:	2101      	movs	r1, #1
    a5d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a5d8:	4710      	bx	r2
    a5da:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a5de:	b158      	cbz	r0, a5f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a5e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a5e4:	d104      	bne.n	a5f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a5e6:	f001 ffb1 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a5ea:	f001 f9e1 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a5ee:	62e0      	str	r0, [r4, #44]	; 0x2c
    a5f0:	2000      	movs	r0, #0
    a5f2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5f8:	f7ff fc96 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a5fc:	f04f 30ff 	mov.w	r0, #4294967295
    a600:	6060      	str	r0, [r4, #4]
    a602:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a606:	f88d 0000 	strb.w	r0, [sp]
    a60a:	f89d 0000 	ldrb.w	r0, [sp]
    a60e:	b190      	cbz	r0, a636 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a610:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a614:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a618:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a61c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a620:	6840      	ldr	r0, [r0, #4]
    a622:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a626:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a62a:	b001      	add	sp, #4
    a62c:	2106      	movs	r1, #6
    a62e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a632:	4710      	bx	r2
    a634:	e05c      	b.n	a6f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a636:	f640 0185 	movw	r1, #2181	; 0x885
    a63a:	2070      	movs	r0, #112	; 0x70
    a63c:	f002 f904 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a640:	f7ff fc72 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a644:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a648:	f002 f886 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a64c:	b120      	cbz	r0, a658 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a64e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a650:	f1b0 3fff 	cmp.w	r0, #4294967295
    a654:	d005      	beq.n	a662 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a656:	e009      	b.n	a66c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a658:	f640 0193 	movw	r1, #2195	; 0x893
    a65c:	2070      	movs	r0, #112	; 0x70
    a65e:	f002 f8f3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a662:	f001 ff73 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a666:	f001 f9a3 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a66a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a66c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a670:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a674:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a678:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a67c:	6840      	ldr	r0, [r0, #4]
    a67e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a682:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a686:	b001      	add	sp, #4
    a688:	2100      	movs	r1, #0
    a68a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a68e:	4710      	bx	r2
    a690:	f001 fd44 	bl	c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a694:	8ae0      	ldrh	r0, [r4, #22]
    a696:	b110      	cbz	r0, a69e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a698:	f002 f85e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a69c:	b128      	cbz	r0, a6aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a69e:	f001 fd51 	bl	c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a6a2:	2800      	cmp	r0, #0
    a6a4:	bf18      	it	ne
    a6a6:	7766      	strbne	r6, [r4, #29]
    a6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6aa:	f640 019d 	movw	r1, #2205	; 0x89d
    a6ae:	2070      	movs	r0, #112	; 0x70
    a6b0:	f002 f8ca 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6b4:	4813      	ldr	r0, [pc, #76]	; (a704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a6b6:	6006      	str	r6, [r0, #0]
    a6b8:	6890      	ldr	r0, [r2, #8]
    a6ba:	6006      	str	r6, [r0, #0]
    a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6be:	7810      	ldrb	r0, [r2, #0]
    a6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a6c4:	f002 b994 	b.w	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a6c8:	f7ff fc2e 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a6cc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6d0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a6d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a6d8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a6dc:	6840      	ldr	r0, [r0, #4]
    a6de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a6e2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a6e6:	b001      	add	sp, #4
    a6e8:	2105      	movs	r1, #5
    a6ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a6ee:	4710      	bx	r2
    a6f0:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a6f4:	2070      	movs	r0, #112	; 0x70
    a6f6:	f002 f8a7 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6fa:	0000      	.short	0x0000
    a6fc:	20001174 	.word	0x20001174
    a700:	200002d4 	.word	0x200002d4
    a704:	40000508 	.word	0x40000508

0000a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a708:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a70c:	4682      	mov	sl, r0
    a70e:	48ef      	ldr	r0, [pc, #956]	; (aacc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a710:	b095      	sub	sp, #84	; 0x54
    a712:	6800      	ldr	r0, [r0, #0]
    a714:	4dee      	ldr	r5, [pc, #952]	; (aad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a716:	05c0      	lsls	r0, r0, #23
    a718:	0dc0      	lsrs	r0, r0, #23
    a71a:	d00e      	beq.n	a73a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a71c:	3810      	subs	r0, #16
    a71e:	b240      	sxtb	r0, r0
    a720:	2800      	cmp	r0, #0
    a722:	bfb8      	it	lt
    a724:	f000 000f 	andlt.w	r0, r0, #15
    a728:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a72c:	bfac      	ite	ge
    a72e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a732:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a736:	0940      	lsrs	r0, r0, #5
    a738:	d00d      	beq.n	a756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a73a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a73c:	f04f 0b00 	mov.w	fp, #0
    a740:	7800      	ldrb	r0, [r0, #0]
    a742:	2800      	cmp	r0, #0
    a744:	bf18      	it	ne
    a746:	2801      	cmpne	r0, #1
    a748:	d018      	beq.n	a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a74a:	f240 713b 	movw	r1, #1851	; 0x73b
    a74e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a752:	f002 f879 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a756:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a75a:	f04f 0b01 	mov.w	fp, #1
    a75e:	2820      	cmp	r0, #32
    a760:	d007      	beq.n	a772 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a762:	9816      	ldr	r0, [sp, #88]	; 0x58
    a764:	7800      	ldrb	r0, [r0, #0]
    a766:	b148      	cbz	r0, a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a768:	f240 7137 	movw	r1, #1847	; 0x737
    a76c:	2070      	movs	r0, #112	; 0x70
    a76e:	f002 f86b 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a772:	f240 7134 	movw	r1, #1844	; 0x734
    a776:	2070      	movs	r0, #112	; 0x70
    a778:	f002 f866 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a77c:	4cd5      	ldr	r4, [pc, #852]	; (aad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a77e:	b124      	cbz	r4, a78a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a780:	2100      	movs	r1, #0
    a782:	f240 703e 	movw	r0, #1854	; 0x73e
    a786:	f3af 8000 	nop.w
    a78a:	2000      	movs	r0, #0
    a78c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a790:	49d1      	ldr	r1, [pc, #836]	; (aad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a792:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a796:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a79a:	f04f 0901 	mov.w	r9, #1
    a79e:	9000      	str	r0, [sp, #0]
    a7a0:	b124      	cbz	r4, a7ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a7a2:	2100      	movs	r1, #0
    a7a4:	f240 7049 	movw	r0, #1865	; 0x749
    a7a8:	f3af 8000 	nop.w
    a7ac:	f1b9 0f00 	cmp.w	r9, #0
    a7b0:	d00a      	beq.n	a7c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a7b2:	bf00      	nop
    a7b4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a7b8:	f04f 0800 	mov.w	r8, #0
    a7bc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a7c0:	f1bb 0f00 	cmp.w	fp, #0
    a7c4:	d007      	beq.n	a7d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a7c6:	e038      	b.n	a83a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a7c8:	48c4      	ldr	r0, [pc, #784]	; (aadc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a7ca:	2800      	cmp	r0, #0
    a7cc:	bf18      	it	ne
    a7ce:	f3af 8000 	nopne.w
    a7d2:	b662      	cpsie	i
    a7d4:	e7ee      	b.n	a7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a7d6:	4637      	mov	r7, r6
    a7d8:	2001      	movs	r0, #1
    a7da:	ea20 0607 	bic.w	r6, r0, r7
    a7de:	48c0      	ldr	r0, [pc, #768]	; (aae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a7e0:	2240      	movs	r2, #64	; 0x40
    a7e2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a7e6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a7ea:	f006 fbac 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a7ee:	b124      	cbz	r4, a7fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a7f0:	2100      	movs	r1, #0
    a7f2:	f240 505e 	movw	r0, #1374	; 0x55e
    a7f6:	f3af 8000 	nop.w
    a7fa:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a7fe:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a802:	4429      	add	r1, r5
    a804:	4428      	add	r0, r5
    a806:	8c0a      	ldrh	r2, [r1, #32]
    a808:	8402      	strh	r2, [r0, #32]
    a80a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a80e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a812:	b124      	cbz	r4, a81e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a814:	2100      	movs	r1, #0
    a816:	f240 5062 	movw	r0, #1378	; 0x562
    a81a:	f3af 8000 	nop.w
    a81e:	b124      	cbz	r4, a82a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a820:	2100      	movs	r1, #0
    a822:	f240 7053 	movw	r0, #1875	; 0x753
    a826:	f3af 8000 	nop.w
    a82a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a82e:	f88d 0008 	strb.w	r0, [sp, #8]
    a832:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a836:	2800      	cmp	r0, #0
    a838:	d1b2      	bne.n	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a83a:	b124      	cbz	r4, a846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a83c:	2100      	movs	r1, #0
    a83e:	f240 705d 	movw	r0, #1885	; 0x75d
    a842:	f3af 8000 	nop.w
    a846:	a802      	add	r0, sp, #8
    a848:	f001 f8b8 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a84c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a850:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a854:	4633      	mov	r3, r6
    a856:	aa09      	add	r2, sp, #36	; 0x24
    a858:	a80e      	add	r0, sp, #56	; 0x38
    a85a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a85c:	f7ff fa02 	bl	9c64 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a860:	b124      	cbz	r4, a86c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a862:	2100      	movs	r1, #0
    a864:	f240 7064 	movw	r0, #1892	; 0x764
    a868:	f3af 8000 	nop.w
    a86c:	4a9c      	ldr	r2, [pc, #624]	; (aae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a86e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a870:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a874:	a809      	add	r0, sp, #36	; 0x24
    a876:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a87a:	2a01      	cmp	r2, #1
    a87c:	bf18      	it	ne
    a87e:	2a02      	cmpne	r2, #2
    a880:	d138      	bne.n	a8f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a882:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a886:	eba2 0201 	sub.w	r2, r2, r1
    a88a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a88e:	eba3 0101 	sub.w	r1, r3, r1
    a892:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a896:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a89a:	2a02      	cmp	r2, #2
    a89c:	d364      	bcc.n	a968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a89e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a8a2:	bf98      	it	ls
    a8a4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a8a8:	d85e      	bhi.n	a968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a8aa:	f04f 0801 	mov.w	r8, #1
    a8ae:	ab14      	add	r3, sp, #80	; 0x50
    a8b0:	aa13      	add	r2, sp, #76	; 0x4c
    a8b2:	4631      	mov	r1, r6
    a8b4:	f7fe fe96 	bl	95e4 <MPSL_IRQ_RADIO_Handler+0x428>
    a8b8:	2800      	cmp	r0, #0
    a8ba:	d05d      	beq.n	a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a8bc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a8c0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a8c4:	4633      	mov	r3, r6
    a8c6:	428a      	cmp	r2, r1
    a8c8:	d05a      	beq.n	a980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a8ca:	2005      	movs	r0, #5
    a8cc:	f7fe fc96 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a8d0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a8d4:	7048      	strb	r0, [r1, #1]
    a8d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a8da:	2820      	cmp	r0, #32
    a8dc:	bf1c      	itt	ne
    a8de:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a8e2:	f880 a001 	strbne.w	sl, [r0, #1]
    a8e6:	d057      	beq.n	a998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a8e8:	4632      	mov	r2, r6
    a8ea:	4651      	mov	r1, sl
    a8ec:	f05f 0003 	movs.w	r0, #3
    a8f0:	f7ff fbcc 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a8f4:	b124      	cbz	r4, a900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a8f6:	2100      	movs	r1, #0
    a8f8:	f240 7069 	movw	r0, #1897	; 0x769
    a8fc:	f3af 8000 	nop.w
    a900:	4878      	ldr	r0, [pc, #480]	; (aae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a902:	2800      	cmp	r0, #0
    a904:	bf18      	it	ne
    a906:	f3af 8000 	nopne.w
    a90a:	f3ef 8910 	mrs	r9, PRIMASK
    a90e:	b672      	cpsid	i
    a910:	b124      	cbz	r4, a91c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a912:	2100      	movs	r1, #0
    a914:	f240 706f 	movw	r0, #1903	; 0x76f
    a918:	f3af 8000 	nop.w
    a91c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a920:	f88d 0008 	strb.w	r0, [sp, #8]
    a924:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a928:	2800      	cmp	r0, #0
    a92a:	f47f af39 	bne.w	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a92e:	b124      	cbz	r4, a93a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a930:	2100      	movs	r1, #0
    a932:	f240 7077 	movw	r0, #1911	; 0x777
    a936:	f3af 8000 	nop.w
    a93a:	af09      	add	r7, sp, #36	; 0x24
    a93c:	9800      	ldr	r0, [sp, #0]
    a93e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a942:	f100 0708 	add.w	r7, r0, #8
    a946:	f1b8 0f00 	cmp.w	r8, #0
    a94a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a94e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a950:	6181      	str	r1, [r0, #24]
    a952:	d051      	beq.n	a9f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a954:	b124      	cbz	r4, a960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a956:	2100      	movs	r1, #0
    a958:	f240 7084 	movw	r0, #1924	; 0x784
    a95c:	f3af 8000 	nop.w
    a960:	f1bb 0f00 	cmp.w	fp, #0
    a964:	d139      	bne.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a966:	e01f      	b.n	a9a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a968:	4632      	mov	r2, r6
    a96a:	4651      	mov	r1, sl
    a96c:	2004      	movs	r0, #4
    a96e:	f7ff fb8d 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a972:	f04f 0801 	mov.w	r8, #1
    a976:	e7bd      	b.n	a8f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a978:	4632      	mov	r2, r6
    a97a:	4651      	mov	r1, sl
    a97c:	2004      	movs	r0, #4
    a97e:	e7b7      	b.n	a8f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a980:	2920      	cmp	r1, #32
    a982:	bf19      	ittee	ne
    a984:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a988:	7840      	ldrbne	r0, [r0, #1]
    a98a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a98e:	4428      	addeq	r0, r5
    a990:	bf08      	it	eq
    a992:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a996:	e79b      	b.n	a8d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a998:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a99c:	4429      	add	r1, r5
    a99e:	f881 a020 	strb.w	sl, [r1, #32]
    a9a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a9a6:	e79f      	b.n	a8e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a9a8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a9aa:	f010 0fff 	tst.w	r0, #255	; 0xff
    a9ae:	d014      	beq.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9b0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a9b4:	2820      	cmp	r0, #32
    a9b6:	d110      	bne.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9b8:	b124      	cbz	r4, a9c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f240 7089 	movw	r0, #1929	; 0x789
    a9c0:	f3af 8000 	nop.w
    a9c4:	4631      	mov	r1, r6
    a9c6:	2002      	movs	r0, #2
    a9c8:	f7ff fb92 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    a9cc:	9010      	str	r0, [sp, #64]	; 0x40
    a9ce:	b920      	cbnz	r0, a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9d0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a9d2:	7800      	ldrb	r0, [r0, #0]
    a9d4:	b1e8      	cbz	r0, aa12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a9d6:	2801      	cmp	r0, #1
    a9d8:	d02a      	beq.n	aa30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a9da:	b124      	cbz	r4, a9e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a9dc:	2100      	movs	r1, #0
    a9de:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a9e2:	f3af 8000 	nop.w
    a9e6:	20ff      	movs	r0, #255	; 0xff
    a9e8:	f1bb 0f00 	cmp.w	fp, #0
    a9ec:	bf18      	it	ne
    a9ee:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a9f2:	d026      	beq.n	aa42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a9f4:	f04f 0801 	mov.w	r8, #1
    a9f8:	b124      	cbz	r4, aa04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a9fa:	2100      	movs	r1, #0
    a9fc:	f240 70b7 	movw	r0, #1975	; 0x7b7
    aa00:	f3af 8000 	nop.w
    aa04:	9810      	ldr	r0, [sp, #64]	; 0x40
    aa06:	4e38      	ldr	r6, [pc, #224]	; (aae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    aa08:	2802      	cmp	r0, #2
    aa0a:	d023      	beq.n	aa54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    aa0c:	2801      	cmp	r0, #1
    aa0e:	d029      	beq.n	aa64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    aa10:	e02d      	b.n	aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa12:	b124      	cbz	r4, aa1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    aa14:	2100      	movs	r1, #0
    aa16:	f240 7091 	movw	r0, #1937	; 0x791
    aa1a:	f3af 8000 	nop.w
    aa1e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    aa22:	4651      	mov	r1, sl
    aa24:	2004      	movs	r0, #4
    aa26:	f7ff fb31 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    aa2a:	f04f 0801 	mov.w	r8, #1
    aa2e:	e7e3      	b.n	a9f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    aa30:	2c00      	cmp	r4, #0
    aa32:	f43f aeb5 	beq.w	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    aa36:	2100      	movs	r1, #0
    aa38:	f240 709c 	movw	r0, #1948	; 0x79c
    aa3c:	f3af 8000 	nop.w
    aa40:	e6ae      	b.n	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    aa42:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    aa46:	2101      	movs	r1, #1
    aa48:	4391      	bics	r1, r2
    aa4a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    aa4e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa52:	e7cf      	b.n	a9f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    aa54:	68a8      	ldr	r0, [r5, #8]
    aa56:	990e      	ldr	r1, [sp, #56]	; 0x38
    aa58:	1a40      	subs	r0, r0, r1
    aa5a:	f006 f8e1 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa5e:	6871      	ldr	r1, [r6, #4]
    aa60:	b921      	cbnz	r1, aa6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    aa62:	e004      	b.n	aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa64:	6871      	ldr	r1, [r6, #4]
    aa66:	f04f 30ff 	mov.w	r0, #4294967295
    aa6a:	b101      	cbz	r1, aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa6c:	4788      	blx	r1
    aa6e:	f1b9 0f00 	cmp.w	r9, #0
    aa72:	d024      	beq.n	aabe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    aa74:	b124      	cbz	r4, aa80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    aa76:	2100      	movs	r1, #0
    aa78:	f240 70c7 	movw	r0, #1991	; 0x7c7
    aa7c:	f3af 8000 	nop.w
    aa80:	f1b8 0f00 	cmp.w	r8, #0
    aa84:	d011      	beq.n	aaaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    aa86:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    aa8e:	4428      	add	r0, r5
    aa90:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    aa94:	2820      	cmp	r0, #32
    aa96:	d008      	beq.n	aaaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    aa98:	b124      	cbz	r4, aaa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    aa9a:	2100      	movs	r1, #0
    aa9c:	f240 70ce 	movw	r0, #1998	; 0x7ce
    aaa0:	f3af 8000 	nop.w
    aaa4:	7870      	ldrb	r0, [r6, #1]
    aaa6:	f001 ffa3 	bl	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aaaa:	b124      	cbz	r4, aab6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    aaac:	2100      	movs	r1, #0
    aaae:	f240 70d3 	movw	r0, #2003	; 0x7d3
    aab2:	f3af 8000 	nop.w
    aab6:	b017      	add	sp, #92	; 0x5c
    aab8:	4640      	mov	r0, r8
    aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aabe:	4807      	ldr	r0, [pc, #28]	; (aadc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    aac0:	2800      	cmp	r0, #0
    aac2:	bf18      	it	ne
    aac4:	f3af 8000 	nopne.w
    aac8:	b662      	cpsie	i
    aaca:	e7d3      	b.n	aa74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    aacc:	e000ed04 	.word	0xe000ed04
    aad0:	20001574 	.word	0x20001574
    aad4:	00000000 	.word	0x00000000
    aad8:	20001174 	.word	0x20001174
    aadc:	00000000 	.word	0x00000000
    aae0:	200014f4 	.word	0x200014f4
    aae4:	00000000 	.word	0x00000000
    aae8:	200002d4 	.word	0x200002d4

0000aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaf0:	4606      	mov	r6, r0
    aaf2:	7800      	ldrb	r0, [r0, #0]
    aaf4:	b08d      	sub	sp, #52	; 0x34
    aaf6:	b118      	cbz	r0, ab00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    aaf8:	b00d      	add	sp, #52	; 0x34
    aafa:	2000      	movs	r0, #0
    aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab00:	488c      	ldr	r0, [pc, #560]	; (ad34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    ab02:	6800      	ldr	r0, [r0, #0]
    ab04:	05c0      	lsls	r0, r0, #23
    ab06:	0dc0      	lsrs	r0, r0, #23
    ab08:	d00e      	beq.n	ab28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    ab0a:	3810      	subs	r0, #16
    ab0c:	b240      	sxtb	r0, r0
    ab0e:	2800      	cmp	r0, #0
    ab10:	bfb8      	it	lt
    ab12:	f000 000f 	andlt.w	r0, r0, #15
    ab16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ab1a:	bfac      	ite	ge
    ab1c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    ab20:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    ab24:	0940      	lsrs	r0, r0, #5
    ab26:	d0e7      	beq.n	aaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    ab28:	4d83      	ldr	r5, [pc, #524]	; (ad38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    ab2a:	4c84      	ldr	r4, [pc, #528]	; (ad3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    ab2c:	f04f 0b01 	mov.w	fp, #1
    ab30:	2700      	movs	r7, #0
    ab32:	b125      	cbz	r5, ab3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    ab34:	2100      	movs	r1, #0
    ab36:	f240 50e5 	movw	r0, #1509	; 0x5e5
    ab3a:	f3af 8000 	nop.w
    ab3e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    ab42:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    ab46:	f04f 0900 	mov.w	r9, #0
    ab4a:	b125      	cbz	r5, ab56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    ab4c:	2100      	movs	r1, #0
    ab4e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    ab52:	f3af 8000 	nop.w
    ab56:	487a      	ldr	r0, [pc, #488]	; (ad40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    ab58:	ea2b 080a 	bic.w	r8, fp, sl
    ab5c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    ab60:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    ab64:	2240      	movs	r2, #64	; 0x40
    ab66:	f006 f9ee 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab6a:	b125      	cbz	r5, ab76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    ab6c:	2100      	movs	r1, #0
    ab6e:	f240 505e 	movw	r0, #1374	; 0x55e
    ab72:	f3af 8000 	nop.w
    ab76:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    ab7a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    ab7e:	4421      	add	r1, r4
    ab80:	4420      	add	r0, r4
    ab82:	8c0a      	ldrh	r2, [r1, #32]
    ab84:	8402      	strh	r2, [r0, #32]
    ab86:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    ab8a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    ab8e:	b125      	cbz	r5, ab9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    ab90:	2100      	movs	r1, #0
    ab92:	f240 5062 	movw	r0, #1378	; 0x562
    ab96:	f3af 8000 	nop.w
    ab9a:	b125      	cbz	r5, aba6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    ab9c:	2100      	movs	r1, #0
    ab9e:	f240 50ef 	movw	r0, #1519	; 0x5ef
    aba2:	f3af 8000 	nop.w
    aba6:	a808      	add	r0, sp, #32
    aba8:	f000 ff08 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    abac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    abb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    abb4:	4643      	mov	r3, r8
    abb6:	466a      	mov	r2, sp
    abb8:	4631      	mov	r1, r6
    abba:	a80a      	add	r0, sp, #40	; 0x28
    abbc:	f7ff f852 	bl	9c64 <MPSL_IRQ_RADIO_Handler+0xaa8>
    abc0:	b125      	cbz	r5, abcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    abc2:	2100      	movs	r1, #0
    abc4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    abc8:	f3af 8000 	nop.w
    abcc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    abd0:	2820      	cmp	r0, #32
    abd2:	d01a      	beq.n	ac0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    abd4:	68e0      	ldr	r0, [r4, #12]
    abd6:	9900      	ldr	r1, [sp, #0]
    abd8:	1a09      	subs	r1, r1, r0
    abda:	0209      	lsls	r1, r1, #8
    abdc:	17ca      	asrs	r2, r1, #31
    abde:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    abe2:	1209      	asrs	r1, r1, #8
    abe4:	d511      	bpl.n	ac0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    abe6:	9900      	ldr	r1, [sp, #0]
    abe8:	4281      	cmp	r1, r0
    abea:	d902      	bls.n	abf2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    abec:	9902      	ldr	r1, [sp, #8]
    abee:	1c49      	adds	r1, r1, #1
    abf0:	9102      	str	r1, [sp, #8]
    abf2:	e9dd 2100 	ldrd	r2, r1, [sp]
    abf6:	1a89      	subs	r1, r1, r2
    abf8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    abfc:	4408      	add	r0, r1
    abfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac02:	e9cd 2000 	strd	r2, r0, [sp]
    ac06:	f04f 0901 	mov.w	r9, #1
    ac0a:	b125      	cbz	r5, ac16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    ac0c:	2100      	movs	r1, #0
    ac0e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    ac12:	f3af 8000 	nop.w
    ac16:	9900      	ldr	r1, [sp, #0]
    ac18:	980a      	ldr	r0, [sp, #40]	; 0x28
    ac1a:	9a01      	ldr	r2, [sp, #4]
    ac1c:	1a09      	subs	r1, r1, r0
    ac1e:	1a10      	subs	r0, r2, r0
    ac20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ac24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ac2c:	bf98      	it	ls
    ac2e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    ac32:	d809      	bhi.n	ac48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    ac34:	4643      	mov	r3, r8
    ac36:	4669      	mov	r1, sp
    ac38:	4842      	ldr	r0, [pc, #264]	; (ad44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    ac3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ac3c:	f7fe fb1a 	bl	9274 <MPSL_IRQ_RADIO_Handler+0xb8>
    ac40:	ea59 0000 	orrs.w	r0, r9, r0
    ac44:	d129      	bne.n	ac9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    ac46:	e042      	b.n	acce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    ac48:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ac4a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    ac4e:	9002      	str	r0, [sp, #8]
    ac50:	aa09      	add	r2, sp, #36	; 0x24
    ac52:	a907      	add	r1, sp, #28
    ac54:	4650      	mov	r0, sl
    ac56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ac5a:	f000 fd3f 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ac5e:	f001 fa7b 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ac62:	f000 fd1f 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ac66:	4681      	mov	r9, r0
    ac68:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ac6c:	2820      	cmp	r0, #32
    ac6e:	d03b      	beq.n	ace8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    ac70:	68e0      	ldr	r0, [r4, #12]
    ac72:	1d40      	adds	r0, r0, #5
    ac74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac78:	9900      	ldr	r1, [sp, #0]
    ac7a:	4281      	cmp	r1, r0
    ac7c:	d902      	bls.n	ac84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    ac7e:	9902      	ldr	r1, [sp, #8]
    ac80:	1c49      	adds	r1, r1, #1
    ac82:	9102      	str	r1, [sp, #8]
    ac84:	e9dd 2100 	ldrd	r2, r1, [sp]
    ac88:	1a89      	subs	r1, r1, r2
    ac8a:	9000      	str	r0, [sp, #0]
    ac8c:	4408      	add	r0, r1
    ac8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac92:	9001      	str	r0, [sp, #4]
    ac94:	201f      	movs	r0, #31
    ac96:	f88d 000c 	strb.w	r0, [sp, #12]
    ac9a:	9800      	ldr	r0, [sp, #0]
    ac9c:	f005 ffc0 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aca0:	1c41      	adds	r1, r0, #1
    aca2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    aca6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    acaa:	4410      	add	r0, r2
    acac:	4408      	add	r0, r1
    acae:	e9c6 0704 	strd	r0, r7, [r6, #16]
    acb2:	b125      	cbz	r5, acbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    acb4:	2100      	movs	r1, #0
    acb6:	f240 601a 	movw	r0, #1562	; 0x61a
    acba:	f3af 8000 	nop.w
    acbe:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    acc2:	4a21      	ldr	r2, [pc, #132]	; (ad48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    acc4:	9b02      	ldr	r3, [sp, #8]
    acc6:	fbe3 1002 	umlal	r1, r0, r3, r2
    acca:	e9c6 1004 	strd	r1, r0, [r6, #16]
    acce:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    acd2:	f88d 0014 	strb.w	r0, [sp, #20]
    acd6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    acda:	2800      	cmp	r0, #0
    acdc:	f47f af29 	bne.w	ab32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    ace0:	b00d      	add	sp, #52	; 0x34
    ace2:	2001      	movs	r0, #1
    ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ace8:	f108 0809 	add.w	r8, r8, #9
    acec:	f1ba 0f00 	cmp.w	sl, #0
    acf0:	d016      	beq.n	ad20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    acf2:	f001 fd31 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    acf6:	b998      	cbnz	r0, ad20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    acf8:	f001 fc06 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    acfc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ad00:	bf08      	it	eq
    ad02:	200d      	moveq	r0, #13
    ad04:	d00b      	beq.n	ad1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    ad06:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    ad0a:	3856      	subs	r0, #86	; 0x56
    ad0c:	bf08      	it	eq
    ad0e:	201c      	moveq	r0, #28
    ad10:	d005      	beq.n	ad1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    ad12:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    ad16:	389f      	subs	r0, #159	; 0x9f
    ad18:	bf14      	ite	ne
    ad1a:	4638      	movne	r0, r7
    ad1c:	2032      	moveq	r0, #50	; 0x32
    ad1e:	4480      	add	r8, r0
    ad20:	9807      	ldr	r0, [sp, #28]
    ad22:	4581      	cmp	r9, r0
    ad24:	bf84      	itt	hi
    ad26:	eba9 0000 	subhi.w	r0, r9, r0
    ad2a:	4480      	addhi	r8, r0
    ad2c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    ad30:	e7a2      	b.n	ac78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    ad32:	0000      	.short	0x0000
    ad34:	e000ed04 	.word	0xe000ed04
    ad38:	00000000 	.word	0x00000000
    ad3c:	20001574 	.word	0x20001574
    ad40:	200014f4 	.word	0x200014f4
    ad44:	0f424000 	.word	0x0f424000
    ad48:	1e848000 	.word	0x1e848000

0000ad4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ad4c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad50:	4d92      	ldr	r5, [pc, #584]	; (af9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    ad52:	b08c      	sub	sp, #48	; 0x30
    ad54:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ad58:	2000      	movs	r0, #0
    ad5a:	9008      	str	r0, [sp, #32]
    ad5c:	9006      	str	r0, [sp, #24]
    ad5e:	2001      	movs	r0, #1
    ad60:	4c8f      	ldr	r4, [pc, #572]	; (afa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    ad62:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ad66:	f04f 0800 	mov.w	r8, #0
    ad6a:	4607      	mov	r7, r0
    ad6c:	9007      	str	r0, [sp, #28]
    ad6e:	b124      	cbz	r4, ad7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ad70:	2100      	movs	r1, #0
    ad72:	f240 70e4 	movw	r0, #2020	; 0x7e4
    ad76:	f3af 8000 	nop.w
    ad7a:	9807      	ldr	r0, [sp, #28]
    ad7c:	2800      	cmp	r0, #0
    ad7e:	d03c      	beq.n	adfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ad80:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    ad84:	b124      	cbz	r4, ad90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ad86:	2100      	movs	r1, #0
    ad88:	f240 70e9 	movw	r0, #2025	; 0x7e9
    ad8c:	f3af 8000 	nop.w
    ad90:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    ad94:	2240      	movs	r2, #64	; 0x40
    ad96:	ea27 060a 	bic.w	r6, r7, sl
    ad9a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ad9e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ada2:	4683      	mov	fp, r0
    ada4:	f006 f8cf 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ada8:	b124      	cbz	r4, adb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    adaa:	2100      	movs	r1, #0
    adac:	f240 505e 	movw	r0, #1374	; 0x55e
    adb0:	f3af 8000 	nop.w
    adb4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    adb8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    adbc:	4428      	add	r0, r5
    adbe:	4429      	add	r1, r5
    adc0:	9000      	str	r0, [sp, #0]
    adc2:	8c0a      	ldrh	r2, [r1, #32]
    adc4:	8402      	strh	r2, [r0, #32]
    adc6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    adca:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    adce:	b124      	cbz	r4, adda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    add0:	2100      	movs	r1, #0
    add2:	f240 5062 	movw	r0, #1378	; 0x562
    add6:	f3af 8000 	nop.w
    adda:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    adde:	f88d 0008 	strb.w	r0, [sp, #8]
    ade2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ade6:	b178      	cbz	r0, ae08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ade8:	2c00      	cmp	r4, #0
    adea:	bf1c      	itt	ne
    adec:	2100      	movne	r1, #0
    adee:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    adf2:	d0bc      	beq.n	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    adf4:	f3af 8000 	nop.w
    adf8:	e7b9      	b.n	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    adfa:	486a      	ldr	r0, [pc, #424]	; (afa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    adfc:	2800      	cmp	r0, #0
    adfe:	bf18      	it	ne
    ae00:	f3af 8000 	nopne.w
    ae04:	b662      	cpsie	i
    ae06:	e7bb      	b.n	ad80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ae08:	b124      	cbz	r4, ae14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    ae0a:	2100      	movs	r1, #0
    ae0c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    ae10:	f3af 8000 	nop.w
    ae14:	980c      	ldr	r0, [sp, #48]	; 0x30
    ae16:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ae1a:	2803      	cmp	r0, #3
    ae1c:	d17e      	bne.n	af1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ae1e:	9a00      	ldr	r2, [sp, #0]
    ae20:	990c      	ldr	r1, [sp, #48]	; 0x30
    ae22:	f892 0020 	ldrb.w	r0, [r2, #32]
    ae26:	4288      	cmp	r0, r1
    ae28:	bf14      	ite	ne
    ae2a:	f04f 0a00 	movne.w	sl, #0
    ae2e:	f04f 0a01 	moveq.w	sl, #1
    ae32:	f102 0c20 	add.w	ip, r2, #32
    ae36:	4683      	mov	fp, r0
    ae38:	2220      	movs	r2, #32
    ae3a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ae3e:	e003      	b.n	ae48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ae40:	4602      	mov	r2, r0
    ae42:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ae46:	7840      	ldrb	r0, [r0, #1]
    ae48:	4288      	cmp	r0, r1
    ae4a:	d002      	beq.n	ae52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ae4c:	2820      	cmp	r0, #32
    ae4e:	d00a      	beq.n	ae66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ae50:	e7f6      	b.n	ae40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ae52:	2820      	cmp	r0, #32
    ae54:	d007      	beq.n	ae66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ae56:	4583      	cmp	fp, r0
    ae58:	d107      	bne.n	ae6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ae5a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ae5e:	7840      	ldrb	r0, [r0, #1]
    ae60:	f88c 0000 	strb.w	r0, [ip]
    ae64:	e007      	b.n	ae76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ae66:	4640      	mov	r0, r8
    ae68:	e00c      	b.n	ae84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ae6a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ae6e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ae72:	7840      	ldrb	r0, [r0, #1]
    ae74:	7048      	strb	r0, [r1, #1]
    ae76:	b124      	cbz	r4, ae82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ae78:	2100      	movs	r1, #0
    ae7a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    ae7e:	f3af 8000 	nop.w
    ae82:	4638      	mov	r0, r7
    ae84:	46c3      	mov	fp, r8
    ae86:	ea10 0f0a 	tst.w	r0, sl
    ae8a:	bf18      	it	ne
    ae8c:	46bb      	movne	fp, r7
    ae8e:	2800      	cmp	r0, #0
    ae90:	d04e      	beq.n	af30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ae92:	b124      	cbz	r4, ae9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ae94:	2100      	movs	r1, #0
    ae96:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    ae9a:	f3af 8000 	nop.w
    ae9e:	4632      	mov	r2, r6
    aea0:	2001      	movs	r0, #1
    aea2:	990c      	ldr	r1, [sp, #48]	; 0x30
    aea4:	f7ff f8f2 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    aea8:	b124      	cbz	r4, aeb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aeaa:	2100      	movs	r1, #0
    aeac:	f640 0001 	movw	r0, #2049	; 0x801
    aeb0:	f3af 8000 	nop.w
    aeb4:	483c      	ldr	r0, [pc, #240]	; (afa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aeb6:	2800      	cmp	r0, #0
    aeb8:	bf18      	it	ne
    aeba:	f3af 8000 	nopne.w
    aebe:	f3ef 8010 	mrs	r0, PRIMASK
    aec2:	b672      	cpsid	i
    aec4:	9007      	str	r0, [sp, #28]
    aec6:	b124      	cbz	r4, aed2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aec8:	2100      	movs	r1, #0
    aeca:	f640 0006 	movw	r0, #2054	; 0x806
    aece:	f3af 8000 	nop.w
    aed2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aed6:	f88d 0008 	strb.w	r0, [sp, #8]
    aeda:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aede:	b138      	cbz	r0, aef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aee0:	2c00      	cmp	r4, #0
    aee2:	bf1c      	itt	ne
    aee4:	2100      	movne	r1, #0
    aee6:	f640 000a 	movwne	r0, #2058	; 0x80a
    aeea:	f43f af40 	beq.w	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aeee:	e781      	b.n	adf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aef0:	f1bb 0f00 	cmp.w	fp, #0
    aef4:	d009      	beq.n	af0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aef6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aefa:	2820      	cmp	r0, #32
    aefc:	d105      	bne.n	af0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aefe:	4631      	mov	r1, r6
    af00:	2002      	movs	r0, #2
    af02:	f7ff f8f5 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    af06:	9006      	str	r0, [sp, #24]
    af08:	b1f8      	cbz	r0, af4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    af0a:	b124      	cbz	r4, af16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    af0c:	2100      	movs	r1, #0
    af0e:	f640 001e 	movw	r0, #2078	; 0x81e
    af12:	f3af 8000 	nop.w
    af16:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    af1a:	e000      	b.n	af1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    af1c:	e008      	b.n	af30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    af1e:	ea27 0000 	bic.w	r0, r7, r0
    af22:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    af26:	20ff      	movs	r0, #255	; 0xff
    af28:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    af2c:	2001      	movs	r0, #1
    af2e:	9008      	str	r0, [sp, #32]
    af30:	b124      	cbz	r4, af3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    af32:	2100      	movs	r1, #0
    af34:	f640 0027 	movw	r0, #2087	; 0x827
    af38:	f3af 8000 	nop.w
    af3c:	9806      	ldr	r0, [sp, #24]
    af3e:	4e1b      	ldr	r6, [pc, #108]	; (afac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    af40:	2802      	cmp	r0, #2
    af42:	d009      	beq.n	af58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    af44:	2801      	cmp	r0, #1
    af46:	d010      	beq.n	af6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    af48:	e014      	b.n	af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af4a:	b19c      	cbz	r4, af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af4c:	2100      	movs	r1, #0
    af4e:	f640 0019 	movw	r0, #2073	; 0x819
    af52:	f3af 8000 	nop.w
    af56:	e7ec      	b.n	af32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    af58:	f000 fd2a 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    af5c:	68a9      	ldr	r1, [r5, #8]
    af5e:	1a08      	subs	r0, r1, r0
    af60:	f005 fe5e 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af64:	6871      	ldr	r1, [r6, #4]
    af66:	b921      	cbnz	r1, af72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    af68:	e004      	b.n	af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af6a:	6871      	ldr	r1, [r6, #4]
    af6c:	f04f 30ff 	mov.w	r0, #4294967295
    af70:	b101      	cbz	r1, af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af72:	4788      	blx	r1
    af74:	9807      	ldr	r0, [sp, #28]
    af76:	b148      	cbz	r0, af8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    af78:	b124      	cbz	r4, af84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    af7a:	2100      	movs	r1, #0
    af7c:	f640 003c 	movw	r0, #2108	; 0x83c
    af80:	f3af 8000 	nop.w
    af84:	9808      	ldr	r0, [sp, #32]
    af86:	b00d      	add	sp, #52	; 0x34
    af88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8c:	4805      	ldr	r0, [pc, #20]	; (afa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    af8e:	2800      	cmp	r0, #0
    af90:	bf18      	it	ne
    af92:	f3af 8000 	nopne.w
    af96:	b662      	cpsie	i
    af98:	e7ee      	b.n	af78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    af9a:	0000      	.short	0x0000
    af9c:	20001574 	.word	0x20001574
	...
    afac:	200002d4 	.word	0x200002d4

0000afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    afb0:	b510      	push	{r4, lr}
    afb2:	2820      	cmp	r0, #32
    afb4:	d211      	bcs.n	afda <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    afb6:	490e      	ldr	r1, [pc, #56]	; (aff0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    afb8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    afbc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    afc0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    afc4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    afc8:	b13b      	cbz	r3, afda <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    afca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    afce:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    afd2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    afd6:	2a01      	cmp	r2, #1
    afd8:	d001      	beq.n	afde <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    afda:	2000      	movs	r0, #0
    afdc:	bd10      	pop	{r4, pc}
    afde:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    afe2:	4601      	mov	r1, r0
    afe4:	2000      	movs	r0, #0
    afe6:	f7ff f851 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    afea:	2001      	movs	r0, #1
    afec:	bd10      	pop	{r4, pc}
    afee:	0000      	.short	0x0000
    aff0:	20001574 	.word	0x20001574

0000aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    aff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aff8:	4e86      	ldr	r6, [pc, #536]	; (b214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    affa:	4680      	mov	r8, r0
    affc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    b000:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    b004:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    b008:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b00c:	2800      	cmp	r0, #0
    b00e:	d071      	beq.n	b0f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b010:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    b014:	4d80      	ldr	r5, [pc, #512]	; (b218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    b016:	b125      	cbz	r5, b022 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    b018:	2100      	movs	r1, #0
    b01a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    b01e:	f3af 8000 	nop.w
    b022:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    b026:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b02a:	2801      	cmp	r0, #1
    b02c:	d018      	beq.n	b060 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    b02e:	b2c0      	uxtb	r0, r0
    b030:	2804      	cmp	r0, #4
    b032:	bf1c      	itt	ne
    b034:	2805      	cmpne	r0, #5
    b036:	2806      	cmpne	r0, #6
    b038:	d061      	beq.n	b0fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    b03a:	b12d      	cbz	r5, b048 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    b03c:	f04f 0100 	mov.w	r1, #0
    b040:	f640 30c5 	movw	r0, #3013	; 0xbc5
    b044:	f3af 8000 	nop.w
    b048:	f005 ff20 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b04c:	b125      	cbz	r5, b058 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    b04e:	2100      	movs	r1, #0
    b050:	f640 30c9 	movw	r0, #3017	; 0xbc9
    b054:	f3af 8000 	nop.w
    b058:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b05c:	2801      	cmp	r0, #1
    b05e:	d1e6      	bne.n	b02e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    b060:	2401      	movs	r4, #1
    b062:	b125      	cbz	r5, b06e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    b064:	2100      	movs	r1, #0
    b066:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    b06a:	f3af 8000 	nop.w
    b06e:	2c00      	cmp	r4, #0
    b070:	d04b      	beq.n	b10a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    b072:	2000      	movs	r0, #0
    b074:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    b078:	b125      	cbz	r5, b084 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    b07a:	2100      	movs	r1, #0
    b07c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    b080:	f3af 8000 	nop.w
    b084:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    b088:	2001      	movs	r0, #1
    b08a:	ea20 090b 	bic.w	r9, r0, fp
    b08e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    b092:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    b096:	2240      	movs	r2, #64	; 0x40
    b098:	f005 ff55 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b09c:	b125      	cbz	r5, b0a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    b09e:	2100      	movs	r1, #0
    b0a0:	f240 505e 	movw	r0, #1374	; 0x55e
    b0a4:	f3af 8000 	nop.w
    b0a8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    b0ac:	eb00 0a06 	add.w	sl, r0, r6
    b0b0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    b0b4:	4430      	add	r0, r6
    b0b6:	8c01      	ldrh	r1, [r0, #32]
    b0b8:	f8aa 1020 	strh.w	r1, [sl, #32]
    b0bc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b0c0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    b0c4:	b125      	cbz	r5, b0d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    b0c6:	2100      	movs	r1, #0
    b0c8:	f240 5062 	movw	r0, #1378	; 0x562
    b0cc:	f3af 8000 	nop.w
    b0d0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    b0d4:	f88d 0000 	strb.w	r0, [sp]
    b0d8:	f89d 0000 	ldrb.w	r0, [sp]
    b0dc:	b1e0      	cbz	r0, b118 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    b0de:	2d00      	cmp	r5, #0
    b0e0:	bf1c      	itt	ne
    b0e2:	2100      	movne	r1, #0
    b0e4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    b0e8:	d0bb      	beq.n	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b0ea:	bf00      	nop
    b0ec:	f3af 8000 	nop.w
    b0f0:	e7b7      	b.n	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b0f2:	e7ff      	b.n	b0f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b0f4:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    b0f8:	2070      	movs	r0, #112	; 0x70
    b0fa:	f001 fba5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0fe:	464a      	mov	r2, r9
    b100:	4641      	mov	r1, r8
    b102:	2001      	movs	r0, #1
    b104:	f7fe ffc2 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b108:	e7a0      	b.n	b04c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    b10a:	4844      	ldr	r0, [pc, #272]	; (b21c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b10c:	2800      	cmp	r0, #0
    b10e:	bf18      	it	ne
    b110:	f3af 8000 	nopne.w
    b114:	b662      	cpsie	i
    b116:	e7ac      	b.n	b072 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    b118:	b125      	cbz	r5, b124 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    b11a:	2100      	movs	r1, #0
    b11c:	f640 30df 	movw	r0, #3039	; 0xbdf
    b120:	f3af 8000 	nop.w
    b124:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    b128:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    b12c:	4640      	mov	r0, r8
    b12e:	461c      	mov	r4, r3
    b130:	f04f 0b20 	mov.w	fp, #32
    b134:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    b138:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    b13c:	e004      	b.n	b148 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    b13e:	46a3      	mov	fp, r4
    b140:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    b144:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b148:	4284      	cmp	r4, r0
    b14a:	d002      	beq.n	b152 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    b14c:	2c20      	cmp	r4, #32
    b14e:	d02b      	beq.n	b1a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b150:	e7f5      	b.n	b13e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    b152:	2c20      	cmp	r4, #32
    b154:	d028      	beq.n	b1a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b156:	42a3      	cmp	r3, r4
    b158:	d104      	bne.n	b164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    b15a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    b15e:	7840      	ldrb	r0, [r0, #1]
    b160:	7008      	strb	r0, [r1, #0]
    b162:	e005      	b.n	b170 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    b164:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    b168:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    b16c:	7840      	ldrb	r0, [r0, #1]
    b16e:	7048      	strb	r0, [r1, #1]
    b170:	f1ba 0f00 	cmp.w	sl, #0
    b174:	d011      	beq.n	b19a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b176:	b125      	cbz	r5, b182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    b178:	2100      	movs	r1, #0
    b17a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    b17e:	f3af 8000 	nop.w
    b182:	f89a 0000 	ldrb.w	r0, [sl]
    b186:	42a0      	cmp	r0, r4
    b188:	d107      	bne.n	b19a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b18a:	b125      	cbz	r5, b196 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    b18c:	2100      	movs	r1, #0
    b18e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    b192:	f3af 8000 	nop.w
    b196:	f88a b000 	strb.w	fp, [sl]
    b19a:	b15d      	cbz	r5, b1b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b19c:	2100      	movs	r1, #0
    b19e:	f240 40c9 	movw	r0, #1225	; 0x4c9
    b1a2:	f3af 8000 	nop.w
    b1a6:	e000      	b.n	b1aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    b1a8:	b125      	cbz	r5, b1b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b1aa:	2100      	movs	r1, #0
    b1ac:	f640 30e3 	movw	r0, #3043	; 0xbe3
    b1b0:	f3af 8000 	nop.w
    b1b4:	481a      	ldr	r0, [pc, #104]	; (b220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    b1b6:	2800      	cmp	r0, #0
    b1b8:	bf18      	it	ne
    b1ba:	f3af 8000 	nopne.w
    b1be:	f3ef 8410 	mrs	r4, PRIMASK
    b1c2:	b672      	cpsid	i
    b1c4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    b1c8:	f88d 0000 	strb.w	r0, [sp]
    b1cc:	f89d 0000 	ldrb.w	r0, [sp]
    b1d0:	b138      	cbz	r0, b1e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	bf1c      	itt	ne
    b1d6:	2100      	movne	r1, #0
    b1d8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    b1dc:	f43f af41 	beq.w	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b1e0:	e784      	b.n	b0ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    b1e2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    b1e6:	20ff      	movs	r0, #255	; 0xff
    b1e8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    b1ec:	b154      	cbz	r4, b204 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    b1ee:	2d00      	cmp	r5, #0
    b1f0:	bf08      	it	eq
    b1f2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f6:	2100      	movs	r1, #0
    b1f8:	f640 30f6 	movw	r0, #3062	; 0xbf6
    b1fc:	f3af 8000 	nop.w
    b200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b204:	4805      	ldr	r0, [pc, #20]	; (b21c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b206:	2800      	cmp	r0, #0
    b208:	bf18      	it	ne
    b20a:	f3af 8000 	nopne.w
    b20e:	b662      	cpsie	i
    b210:	e7ed      	b.n	b1ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b212:	0000      	.short	0x0000
    b214:	20001574 	.word	0x20001574
	...

0000b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	460d      	mov	r5, r1
    b228:	4606      	mov	r6, r0
    b22a:	f001 fa83 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b22e:	480f      	ldr	r0, [pc, #60]	; (b26c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    b230:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    b234:	2400      	movs	r4, #0
    b236:	3880      	subs	r0, #128	; 0x80
    b238:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b23c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b240:	b129      	cbz	r1, b24e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b242:	1c61      	adds	r1, r4, #1
    b244:	b2cc      	uxtb	r4, r1
    b246:	2c20      	cmp	r4, #32
    b248:	d3f8      	bcc.n	b23c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b24a:	2020      	movs	r0, #32
    b24c:	bd70      	pop	{r4, r5, r6, pc}
    b24e:	4808      	ldr	r0, [pc, #32]	; (b270 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    b250:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    b254:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    b258:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b25c:	4621      	mov	r1, r4
    b25e:	6045      	str	r5, [r0, #4]
    b260:	2001      	movs	r0, #1
    b262:	f7fe ff13 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b266:	4620      	mov	r0, r4
    b268:	bd70      	pop	{r4, r5, r6, pc}
    b26a:	0000      	.short	0x0000
    b26c:	20001574 	.word	0x20001574
    b270:	20001174 	.word	0x20001174

0000b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b278:	b083      	sub	sp, #12
    b27a:	f000 fb99 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b27e:	4605      	mov	r5, r0
    b280:	f000 fe7c 	bl	bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b284:	4c84      	ldr	r4, [pc, #528]	; (b498 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    b286:	6860      	ldr	r0, [r4, #4]
    b288:	f1b0 3fff 	cmp.w	r0, #4294967295
    b28c:	bf1c      	itt	ne
    b28e:	f04f 30ff 	movne.w	r0, #4294967295
    b292:	6060      	strne	r0, [r4, #4]
    b294:	7fa0      	ldrb	r0, [r4, #30]
    b296:	f8df 9204 	ldr.w	r9, [pc, #516]	; b49c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    b29a:	b990      	cbnz	r0, b2c2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    b29c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    b2a0:	1a40      	subs	r0, r0, r1
    b2a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2a6:	f44f 710c 	mov.w	r1, #560	; 0x230
    b2aa:	f001 fa2f 	bl	c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b2ae:	68e1      	ldr	r1, [r4, #12]
    b2b0:	4408      	add	r0, r1
    b2b2:	1a28      	subs	r0, r5, r0
    b2b4:	0200      	lsls	r0, r0, #8
    b2b6:	17c1      	asrs	r1, r0, #31
    b2b8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    b2bc:	1200      	asrs	r0, r0, #8
    b2be:	0fc0      	lsrs	r0, r0, #31
    b2c0:	d012      	beq.n	b2e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    b2c2:	7e60      	ldrb	r0, [r4, #25]
    b2c4:	b320      	cbz	r0, b310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b2c6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b2ca:	f88d 0000 	strb.w	r0, [sp]
    b2ce:	f89d 0000 	ldrb.w	r0, [sp]
    b2d2:	b1e8      	cbz	r0, b310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b2d4:	f000 fcae 	bl	bc34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b2d8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    b2dc:	b1f0      	cbz	r0, b31c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    b2de:	f240 31f5 	movw	r1, #1013	; 0x3f5
    b2e2:	2070      	movs	r0, #112	; 0x70
    b2e4:	f001 fab0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2e8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b2ec:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    b2f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b2f4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    b2f8:	6840      	ldr	r0, [r0, #4]
    b2fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    b2fe:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    b302:	2108      	movs	r1, #8
    b304:	4790      	blx	r2
    b306:	f240 31dd 	movw	r1, #989	; 0x3dd
    b30a:	2070      	movs	r0, #112	; 0x70
    b30c:	f001 fa9c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b310:	1ce8      	adds	r0, r5, #3
    b312:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b316:	f000 fb71 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b31a:	e7dd      	b.n	b2d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    b31c:	2001      	movs	r0, #1
    b31e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b322:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b326:	2820      	cmp	r0, #32
    b328:	d021      	beq.n	b36e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    b32a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    b32e:	2020      	movs	r0, #32
    b330:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    b334:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    b338:	2000      	movs	r0, #0
    b33a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b33e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b342:	6020      	str	r0, [r4, #0]
    b344:	f000 ff0e 	bl	c164 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b348:	7720      	strb	r0, [r4, #28]
    b34a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    b34e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    b352:	1907      	adds	r7, r0, r4
    b354:	f897 0020 	ldrb.w	r0, [r7, #32]
    b358:	2820      	cmp	r0, #32
    b35a:	d058      	beq.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b35c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b360:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    b364:	f899 001a 	ldrb.w	r0, [r9, #26]
    b368:	2801      	cmp	r0, #1
    b36a:	d005      	beq.n	b378 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    b36c:	e04f      	b.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b36e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b372:	2070      	movs	r0, #112	; 0x70
    b374:	f001 fa68 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b378:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    b37c:	aa01      	add	r2, sp, #4
    b37e:	4669      	mov	r1, sp
    b380:	4658      	mov	r0, fp
    b382:	f000 f9ab 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b386:	f000 fee7 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    b38a:	f000 f98b 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b38e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b392:	2820      	cmp	r0, #32
    b394:	d004      	beq.n	b3a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    b396:	68e0      	ldr	r0, [r4, #12]
    b398:	1d40      	adds	r0, r0, #5
    b39a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b39e:	e01d      	b.n	b3dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    b3a0:	f105 0a09 	add.w	sl, r5, #9
    b3a4:	f1bb 0f00 	cmp.w	fp, #0
    b3a8:	d016      	beq.n	b3d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b3aa:	f001 f9d5 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b3ae:	b998      	cbnz	r0, b3d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b3b0:	f001 f8aa 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    b3b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    b3b8:	bf08      	it	eq
    b3ba:	200d      	moveq	r0, #13
    b3bc:	d00b      	beq.n	b3d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b3be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    b3c2:	3856      	subs	r0, #86	; 0x56
    b3c4:	bf08      	it	eq
    b3c6:	201c      	moveq	r0, #28
    b3c8:	d005      	beq.n	b3d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b3ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    b3ce:	389f      	subs	r0, #159	; 0x9f
    b3d0:	bf14      	ite	ne
    b3d2:	2000      	movne	r0, #0
    b3d4:	2032      	moveq	r0, #50	; 0x32
    b3d6:	4482      	add	sl, r0
    b3d8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    b3dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
    b3e0:	1a81      	subs	r1, r0, r2
    b3e2:	0209      	lsls	r1, r1, #8
    b3e4:	17cb      	asrs	r3, r1, #31
    b3e6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    b3ea:	1209      	asrs	r1, r1, #8
    b3ec:	2900      	cmp	r1, #0
    b3ee:	dc0e      	bgt.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b3f0:	f109 0308 	add.w	r3, r9, #8
    b3f4:	4282      	cmp	r2, r0
    b3f6:	d202      	bcs.n	b3fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    b3f8:	6899      	ldr	r1, [r3, #8]
    b3fa:	1e49      	subs	r1, r1, #1
    b3fc:	6099      	str	r1, [r3, #8]
    b3fe:	e9d3 2100 	ldrd	r2, r1, [r3]
    b402:	1a89      	subs	r1, r1, r2
    b404:	6018      	str	r0, [r3, #0]
    b406:	4408      	add	r0, r1
    b408:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b40c:	6058      	str	r0, [r3, #4]
    b40e:	4631      	mov	r1, r6
    b410:	2001      	movs	r0, #1
    b412:	f7fe fe6d 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    b416:	ea5f 0900 	movs.w	r9, r0
    b41a:	d0f8      	beq.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b41c:	4820      	ldr	r0, [pc, #128]	; (b4a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b41e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b422:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b426:	2802      	cmp	r0, #2
    b428:	d104      	bne.n	b434 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b42a:	4632      	mov	r2, r6
    b42c:	4641      	mov	r1, r8
    b42e:	2006      	movs	r0, #6
    b430:	f7fe fe2c 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b434:	20ff      	movs	r0, #255	; 0xff
    b436:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b43a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b43e:	4e19      	ldr	r6, [pc, #100]	; (b4a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b440:	2820      	cmp	r0, #32
    b442:	bf1c      	itt	ne
    b444:	7870      	ldrbne	r0, [r6, #1]
    b446:	f001 fad3 	blne	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b44a:	7f20      	ldrb	r0, [r4, #28]
    b44c:	b120      	cbz	r0, b458 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b44e:	f000 fe65 	bl	c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b452:	2000      	movs	r0, #0
    b454:	7720      	strb	r0, [r4, #28]
    b456:	7760      	strb	r0, [r4, #29]
    b458:	f1b9 0f02 	cmp.w	r9, #2
    b45c:	d011      	beq.n	b482 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b45e:	f1b9 0f01 	cmp.w	r9, #1
    b462:	bf1c      	itt	ne
    b464:	b003      	addne	sp, #12
    b466:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b46a:	f04f 30ff 	mov.w	r0, #4294967295
    b46e:	6871      	ldr	r1, [r6, #4]
    b470:	2900      	cmp	r1, #0
    b472:	bf04      	itt	eq
    b474:	b003      	addeq	sp, #12
    b476:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b47a:	b003      	add	sp, #12
    b47c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b480:	4708      	bx	r1
    b482:	68a0      	ldr	r0, [r4, #8]
    b484:	1b40      	subs	r0, r0, r5
    b486:	f005 fbcb 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b48a:	6871      	ldr	r1, [r6, #4]
    b48c:	2900      	cmp	r1, #0
    b48e:	d1f4      	bne.n	b47a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b490:	b003      	add	sp, #12
    b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b496:	0000      	.short	0x0000
    b498:	20001574 	.word	0x20001574
    b49c:	20001174 	.word	0x20001174
    b4a0:	200014f4 	.word	0x200014f4
    b4a4:	200002d4 	.word	0x200002d4

0000b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b4a8:	b570      	push	{r4, r5, r6, lr}
    b4aa:	4c42      	ldr	r4, [pc, #264]	; (b5b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b4ac:	4605      	mov	r5, r0
    b4ae:	b082      	sub	sp, #8
    b4b0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b4b4:	2820      	cmp	r0, #32
    b4b6:	d008      	beq.n	b4ca <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b4b8:	6860      	ldr	r0, [r4, #4]
    b4ba:	f1b0 3fff 	cmp.w	r0, #4294967295
    b4be:	d009      	beq.n	b4d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b4c0:	f640 21e4 	movw	r1, #2788	; 0xae4
    b4c4:	2070      	movs	r0, #112	; 0x70
    b4c6:	f001 f9bf 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4ca:	f640 21e3 	movw	r1, #2787	; 0xae3
    b4ce:	2070      	movs	r0, #112	; 0x70
    b4d0:	f001 f9ba 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4d4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b4d8:	4937      	ldr	r1, [pc, #220]	; (b5b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b4da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b4de:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b4e2:	68b0      	ldr	r0, [r6, #8]
    b4e4:	f005 fb9c 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b4e8:	4602      	mov	r2, r0
    b4ea:	8af0      	ldrh	r0, [r6, #22]
    b4ec:	7d31      	ldrb	r1, [r6, #20]
    b4ee:	4b33      	ldr	r3, [pc, #204]	; (b5bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b4f0:	4408      	add	r0, r1
    b4f2:	1c40      	adds	r0, r0, #1
    b4f4:	1811      	adds	r1, r2, r0
    b4f6:	429a      	cmp	r2, r3
    b4f8:	d817      	bhi.n	b52a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b4fa:	4a31      	ldr	r2, [pc, #196]	; (b5c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b4fc:	4290      	cmp	r0, r2
    b4fe:	dc1b      	bgt.n	b538 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b500:	f1c2 0c00 	rsb	ip, r2, #0
    b504:	4560      	cmp	r0, ip
    b506:	db1e      	blt.n	b546 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b508:	0056      	lsls	r6, r2, #1
    b50a:	428e      	cmp	r6, r1
    b50c:	bfdc      	itt	le
    b50e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b512:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b516:	dd05      	ble.n	b524 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b518:	2900      	cmp	r1, #0
    b51a:	bfbc      	itt	lt
    b51c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b520:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b524:	1948      	adds	r0, r1, r5
    b526:	4299      	cmp	r1, r3
    b528:	d904      	bls.n	b534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b52a:	f240 519e 	movw	r1, #1438	; 0x59e
    b52e:	2070      	movs	r0, #112	; 0x70
    b530:	f001 f98a 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b534:	4295      	cmp	r5, r2
    b536:	dd04      	ble.n	b542 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b538:	f240 519f 	movw	r1, #1439	; 0x59f
    b53c:	2070      	movs	r0, #112	; 0x70
    b53e:	f001 f983 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b542:	4565      	cmp	r5, ip
    b544:	da04      	bge.n	b550 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b546:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b54a:	2070      	movs	r0, #112	; 0x70
    b54c:	f001 f97c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b550:	4286      	cmp	r6, r0
    b552:	bfdc      	itt	le
    b554:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b558:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b55c:	dd05      	ble.n	b56a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b55e:	2800      	cmp	r0, #0
    b560:	bfbc      	itt	lt
    b562:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b566:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b56a:	aa01      	add	r2, sp, #4
    b56c:	4669      	mov	r1, sp
    b56e:	f000 f8b5 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b572:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b576:	280f      	cmp	r0, #15
    b578:	bf8c      	ite	hi
    b57a:	2001      	movhi	r0, #1
    b57c:	2000      	movls	r0, #0
    b57e:	9900      	ldr	r1, [sp, #0]
    b580:	4408      	add	r0, r1
    b582:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b586:	6061      	str	r1, [r4, #4]
    b588:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b58c:	f88d 0000 	strb.w	r0, [sp]
    b590:	f89d 0000 	ldrb.w	r0, [sp]
    b594:	2800      	cmp	r0, #0
    b596:	bf04      	itt	eq
    b598:	b002      	addeq	sp, #8
    b59a:	bd70      	popeq	{r4, r5, r6, pc}
    b59c:	2005      	movs	r0, #5
    b59e:	f000 fbc7 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b5a2:	2800      	cmp	r0, #0
    b5a4:	bf1c      	itt	ne
    b5a6:	b002      	addne	sp, #8
    b5a8:	bd70      	popne	{r4, r5, r6, pc}
    b5aa:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b5ae:	2070      	movs	r0, #112	; 0x70
    b5b0:	f001 f94a 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5b4:	20001574 	.word	0x20001574
    b5b8:	20001174 	.word	0x20001174
    b5bc:	1e847fff 	.word	0x1e847fff
    b5c0:	0f424000 	.word	0x0f424000

0000b5c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b5c4:	b570      	push	{r4, r5, r6, lr}
    b5c6:	4c1c      	ldr	r4, [pc, #112]	; (b638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b5c8:	2120      	movs	r1, #32
    b5ca:	f884 1020 	strb.w	r1, [r4, #32]
    b5ce:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b5d2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b5d6:	2000      	movs	r0, #0
    b5d8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b5dc:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b5e0:	1e42      	subs	r2, r0, #1
    b5e2:	e9c4 0200 	strd	r0, r2, [r4]
    b5e6:	77a0      	strb	r0, [r4, #30]
    b5e8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b5ec:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b5f0:	7720      	strb	r0, [r4, #28]
    b5f2:	7760      	strb	r0, [r4, #29]
    b5f4:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b5f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    b5fa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b5fe:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b602:	2210      	movs	r2, #16
    b604:	7088      	strb	r0, [r1, #2]
    b606:	f801 0f04 	strb.w	r0, [r1, #4]!
    b60a:	1e52      	subs	r2, r2, #1
    b60c:	d1fa      	bne.n	b604 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b60e:	f000 fdb3 	bl	c178 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b612:	4d0a      	ldr	r5, [pc, #40]	; (b63c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b614:	2601      	movs	r6, #1
    b616:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b61a:	20ff      	movs	r0, #255	; 0xff
    b61c:	7028      	strb	r0, [r5, #0]
    b61e:	4808      	ldr	r0, [pc, #32]	; (b640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b620:	f001 f9c8 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b624:	7068      	strb	r0, [r5, #1]
    b626:	f001 fa33 	bl	ca90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b62a:	60a8      	str	r0, [r5, #8]
    b62c:	f000 fd2e 	bl	c08c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b630:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b634:	bd70      	pop	{r4, r5, r6, pc}
    b636:	0000      	.short	0x0000
    b638:	20001574 	.word	0x20001574
    b63c:	200002d4 	.word	0x200002d4
    b640:	00009fb5 	.word	0x00009fb5

0000b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b644:	b570      	push	{r4, r5, r6, lr}
    b646:	4605      	mov	r5, r0
    b648:	2001      	movs	r0, #1
    b64a:	fa00 f405 	lsl.w	r4, r0, r5
    b64e:	460e      	mov	r6, r1
    b650:	2a00      	cmp	r2, #0
    b652:	bf08      	it	eq
    b654:	4808      	ldreq	r0, [pc, #32]	; (b678 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b656:	d00c      	beq.n	b672 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b658:	2000      	movs	r0, #0
    b65a:	f000 fcfd 	bl	c058 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b65e:	00e9      	lsls	r1, r5, #3
    b660:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b664:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b668:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b66c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b670:	4802      	ldr	r0, [pc, #8]	; (b67c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b672:	6004      	str	r4, [r0, #0]
    b674:	bd70      	pop	{r4, r5, r6, pc}
    b676:	0000      	.short	0x0000
    b678:	4001f508 	.word	0x4001f508
    b67c:	4001f504 	.word	0x4001f504

0000b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b680:	b500      	push	{lr}
    b682:	b083      	sub	sp, #12
    b684:	4668      	mov	r0, sp
    b686:	f000 f999 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b68a:	9800      	ldr	r0, [sp, #0]
    b68c:	f005 fac8 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b690:	9a01      	ldr	r2, [sp, #4]
    b692:	4b03      	ldr	r3, [pc, #12]	; (b6a0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b694:	2100      	movs	r1, #0
    b696:	fbe2 0103 	umlal	r0, r1, r2, r3
    b69a:	b003      	add	sp, #12
    b69c:	bd00      	pop	{pc}
    b69e:	0000      	.short	0x0000
    b6a0:	1e848000 	.word	0x1e848000

0000b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b6a4:	0b41      	lsrs	r1, r0, #13
    b6a6:	f248 6237 	movw	r2, #34359	; 0x8637
    b6aa:	4351      	muls	r1, r2
    b6ac:	0c0a      	lsrs	r2, r1, #16
    b6ae:	4b09      	ldr	r3, [pc, #36]	; (b6d4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b6b0:	0251      	lsls	r1, r2, #9
    b6b2:	fb02 0203 	mla	r2, r2, r3, r0
    b6b6:	4808      	ldr	r0, [pc, #32]	; (b6d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b6b8:	4350      	muls	r0, r2
    b6ba:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b6be:	306e      	adds	r0, #110	; 0x6e
    b6c0:	0d40      	lsrs	r0, r0, #21
    b6c2:	425b      	negs	r3, r3
    b6c4:	fb10 f303 	smulbb	r3, r0, r3
    b6c8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b6cc:	bf88      	it	hi
    b6ce:	1c49      	addhi	r1, r1, #1
    b6d0:	4408      	add	r0, r1
    b6d2:	4770      	bx	lr
    b6d4:	ffffc2f7 	.word	0xffffc2f7
    b6d8:	00010c6f 	.word	0x00010c6f

0000b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b6dc:	0b43      	lsrs	r3, r0, #13
    b6de:	f248 6c37 	movw	ip, #34359	; 0x8637
    b6e2:	fb03 f30c 	mul.w	r3, r3, ip
    b6e6:	b430      	push	{r4, r5}
    b6e8:	0c1b      	lsrs	r3, r3, #16
    b6ea:	f8df c044 	ldr.w	ip, [pc, #68]	; b730 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b6ee:	025c      	lsls	r4, r3, #9
    b6f0:	fb03 030c 	mla	r3, r3, ip, r0
    b6f4:	480f      	ldr	r0, [pc, #60]	; (b734 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b6f6:	4358      	muls	r0, r3
    b6f8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b6fc:	eb04 000c 	add.w	r0, r4, ip
    b700:	f643 5409 	movw	r4, #15625	; 0x3d09
    b704:	fb1c f404 	smulbb	r4, ip, r4
    b708:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b70c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b710:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b714:	442c      	add	r4, r5
    b716:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b71a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b71e:	bf84      	itt	hi
    b720:	f04f 0c00 	movhi.w	ip, #0
    b724:	1c40      	addhi	r0, r0, #1
    b726:	6008      	str	r0, [r1, #0]
    b728:	f882 c000 	strb.w	ip, [r2]
    b72c:	bc30      	pop	{r4, r5}
    b72e:	4770      	bx	lr
    b730:	ffffc2f7 	.word	0xffffc2f7
    b734:	00010c6f 	.word	0x00010c6f

0000b738 <MPSL_IRQ_RTC0_Handler>:
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73c:	4d3b      	ldr	r5, [pc, #236]	; (b82c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b73e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b742:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b830 <MPSL_IRQ_RTC0_Handler+0xf8>
    b746:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b74a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b74e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b752:	f04f 0400 	mov.w	r4, #0
    b756:	d019      	beq.n	b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b758:	4836      	ldr	r0, [pc, #216]	; (b834 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b75a:	6800      	ldr	r0, [r0, #0]
    b75c:	b1b0      	cbz	r0, b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b75e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b762:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b766:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b76a:	f8d8 1000 	ldr.w	r1, [r8]
    b76e:	1a40      	subs	r0, r0, r1
    b770:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b774:	2802      	cmp	r0, #2
    b776:	d302      	bcc.n	b77e <MPSL_IRQ_RTC0_Handler+0x46>
    b778:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b77c:	d906      	bls.n	b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b77e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b782:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b786:	2004      	movs	r0, #4
    b788:	f7fe fed8 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b78c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b790:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b794:	d01a      	beq.n	b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b796:	4828      	ldr	r0, [pc, #160]	; (b838 <MPSL_IRQ_RTC0_Handler+0x100>)
    b798:	6800      	ldr	r0, [r0, #0]
    b79a:	b1b8      	cbz	r0, b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b79c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b7a0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b7a4:	4825      	ldr	r0, [pc, #148]	; (b83c <MPSL_IRQ_RTC0_Handler+0x104>)
    b7a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7aa:	f8d8 1000 	ldr.w	r1, [r8]
    b7ae:	1a40      	subs	r0, r0, r1
    b7b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7b4:	2802      	cmp	r0, #2
    b7b6:	d302      	bcc.n	b7be <MPSL_IRQ_RTC0_Handler+0x86>
    b7b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7bc:	d906      	bls.n	b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b7be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b7c2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b7c6:	2005      	movs	r0, #5
    b7c8:	f7fe feb8 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b7cc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b7d0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b7d4:	d01a      	beq.n	b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7d6:	481a      	ldr	r0, [pc, #104]	; (b840 <MPSL_IRQ_RTC0_Handler+0x108>)
    b7d8:	6800      	ldr	r0, [r0, #0]
    b7da:	b1b8      	cbz	r0, b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b7e0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b7e4:	4817      	ldr	r0, [pc, #92]	; (b844 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b7e6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7ea:	f8d8 1000 	ldr.w	r1, [r8]
    b7ee:	1a40      	subs	r0, r0, r1
    b7f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7f4:	2802      	cmp	r0, #2
    b7f6:	d302      	bcc.n	b7fe <MPSL_IRQ_RTC0_Handler+0xc6>
    b7f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7fc:	d906      	bls.n	b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b802:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b806:	2006      	movs	r0, #6
    b808:	f7fe fe98 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b80c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b810:	2800      	cmp	r0, #0
    b812:	bf08      	it	eq
    b814:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b818:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b81c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b820:	4809      	ldr	r0, [pc, #36]	; (b848 <MPSL_IRQ_RTC0_Handler+0x110>)
    b822:	68c1      	ldr	r1, [r0, #12]
    b824:	1c49      	adds	r1, r1, #1
    b826:	60c1      	str	r1, [r0, #12]
    b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b82c:	4000b000 	.word	0x4000b000
    b830:	4000b504 	.word	0x4000b504
    b834:	4000b140 	.word	0x4000b140
    b838:	4000b144 	.word	0x4000b144
    b83c:	4000b004 	.word	0x4000b004
    b840:	4000b148 	.word	0x4000b148
    b844:	4000b008 	.word	0x4000b008
    b848:	200002e0 	.word	0x200002e0

0000b84c <MPSL_IRQ_TIMER0_Handler>:
    b84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b850:	4d38      	ldr	r5, [pc, #224]	; (b934 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b852:	7828      	ldrb	r0, [r5, #0]
    b854:	2804      	cmp	r0, #4
    b856:	d068      	beq.n	b92a <MPSL_IRQ_TIMER0_Handler+0xde>
    b858:	1ca8      	adds	r0, r5, #2
    b85a:	2201      	movs	r2, #1
    b85c:	7801      	ldrb	r1, [r0, #0]
    b85e:	b159      	cbz	r1, b878 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b860:	2901      	cmp	r1, #1
    b862:	bf08      	it	eq
    b864:	706a      	strbeq	r2, [r5, #1]
    b866:	d002      	beq.n	b86e <MPSL_IRQ_TIMER0_Handler+0x22>
    b868:	7869      	ldrb	r1, [r5, #1]
    b86a:	2900      	cmp	r1, #0
    b86c:	d058      	beq.n	b920 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b86e:	2102      	movs	r1, #2
    b870:	7001      	strb	r1, [r0, #0]
    b872:	7840      	ldrb	r0, [r0, #1]
    b874:	f000 fb12 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b878:	4c2f      	ldr	r4, [pc, #188]	; (b938 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b87a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b87e:	f04f 0800 	mov.w	r8, #0
    b882:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b886:	f44f 7780 	mov.w	r7, #256	; 0x100
    b88a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b88e:	d00a      	beq.n	b8a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b890:	482a      	ldr	r0, [pc, #168]	; (b93c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b892:	6800      	ldr	r0, [r0, #0]
    b894:	b138      	cbz	r0, b8a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b896:	2003      	movs	r0, #3
    b898:	f000 fb00 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b89c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8a0:	2003      	movs	r0, #3
    b8a2:	f7fe fe4b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8aa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b8ae:	d00a      	beq.n	b8c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b8b0:	4823      	ldr	r0, [pc, #140]	; (b940 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b8b2:	6800      	ldr	r0, [r0, #0]
    b8b4:	b138      	cbz	r0, b8c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b8b6:	2002      	movs	r0, #2
    b8b8:	f000 faf0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b8bc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8c0:	2002      	movs	r0, #2
    b8c2:	f7fe fe3b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8ca:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b8ce:	d00a      	beq.n	b8e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b8d0:	481c      	ldr	r0, [pc, #112]	; (b944 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b8d2:	6800      	ldr	r0, [r0, #0]
    b8d4:	b138      	cbz	r0, b8e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b8d6:	2001      	movs	r0, #1
    b8d8:	f000 fae0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b8dc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8e0:	2001      	movs	r0, #1
    b8e2:	f7fe fe2b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8ea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b8ee:	bf08      	it	eq
    b8f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8f4:	4814      	ldr	r0, [pc, #80]	; (b948 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b8f6:	6800      	ldr	r0, [r0, #0]
    b8f8:	2800      	cmp	r0, #0
    b8fa:	bf08      	it	eq
    b8fc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b900:	2000      	movs	r0, #0
    b902:	f000 facb 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b906:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b90a:	2004      	movs	r0, #4
    b90c:	7028      	strb	r0, [r5, #0]
    b90e:	f8c5 8004 	str.w	r8, [r5, #4]
    b912:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b91a:	2000      	movs	r0, #0
    b91c:	f7fe be0e 	b.w	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b920:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b924:	206c      	movs	r0, #108	; 0x6c
    b926:	f000 ff8f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b92e:	2007      	movs	r0, #7
    b930:	f7fe be04 	b.w	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b934:	200002e0 	.word	0x200002e0
    b938:	40008000 	.word	0x40008000
    b93c:	4000814c 	.word	0x4000814c
    b940:	40008148 	.word	0x40008148
    b944:	40008144 	.word	0x40008144
    b948:	40008140 	.word	0x40008140
    b94c:	2201      	movs	r2, #1
    b94e:	0211      	lsls	r1, r2, #8
    b950:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b954:	2000      	movs	r0, #0
    b956:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b95a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b95e:	f3bf 8f4f 	dsb	sy
    b962:	f3bf 8f6f 	isb	sy
    b966:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b96a:	490e      	ldr	r1, [pc, #56]	; (b9a4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b96c:	f841 2f04 	str.w	r2, [r1, #4]!
    b970:	1e43      	subs	r3, r0, #1
    b972:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b976:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b97a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b97e:	4b0a      	ldr	r3, [pc, #40]	; (b9a8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b980:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b984:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b988:	1d1b      	adds	r3, r3, #4
    b98a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b98e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b992:	1d1b      	adds	r3, r3, #4
    b994:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b998:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b99c:	60ca      	str	r2, [r1, #12]
    b99e:	4903      	ldr	r1, [pc, #12]	; (b9ac <MPSL_IRQ_TIMER0_Handler+0x160>)
    b9a0:	7048      	strb	r0, [r1, #1]
    b9a2:	4770      	bx	lr
    b9a4:	40008000 	.word	0x40008000
    b9a8:	40008004 	.word	0x40008004
    b9ac:	200002e0 	.word	0x200002e0

0000b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b9b0:	4801      	ldr	r0, [pc, #4]	; (b9b8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b9b2:	6800      	ldr	r0, [r0, #0]
    b9b4:	4770      	bx	lr
    b9b6:	0000      	.short	0x0000
    b9b8:	4000b504 	.word	0x4000b504

0000b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b9bc:	b430      	push	{r4, r5}
    b9be:	f3ef 8c10 	mrs	ip, PRIMASK
    b9c2:	b672      	cpsid	i
    b9c4:	2500      	movs	r5, #0
    b9c6:	4b0b      	ldr	r3, [pc, #44]	; (b9f4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b9c8:	4a0b      	ldr	r2, [pc, #44]	; (b9f8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b9ca:	bf00      	nop
    b9cc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b9d0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b9d4:	b12c      	cbz	r4, b9e2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b9d6:	68d1      	ldr	r1, [r2, #12]
    b9d8:	1c49      	adds	r1, r1, #1
    b9da:	60d1      	str	r1, [r2, #12]
    b9dc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b9e0:	e7f4      	b.n	b9cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b9e2:	68d2      	ldr	r2, [r2, #12]
    b9e4:	f1bc 0f00 	cmp.w	ip, #0
    b9e8:	d100      	bne.n	b9ec <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b9ea:	b662      	cpsie	i
    b9ec:	e9c0 1200 	strd	r1, r2, [r0]
    b9f0:	bc30      	pop	{r4, r5}
    b9f2:	4770      	bx	lr
    b9f4:	4000b000 	.word	0x4000b000
    b9f8:	200002e0 	.word	0x200002e0

0000b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba00:	f8df 8134 	ldr.w	r8, [pc, #308]	; bb38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    ba04:	4605      	mov	r5, r0
    ba06:	f1a8 0602 	sub.w	r6, r8, #2
    ba0a:	f898 3000 	ldrb.w	r3, [r8]
    ba0e:	68b0      	ldr	r0, [r6, #8]
    ba10:	2b01      	cmp	r3, #1
    ba12:	bf04      	itt	eq
    ba14:	42a8      	cmpeq	r0, r5
    ba16:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba1a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    ba1e:	4a47      	ldr	r2, [pc, #284]	; (bb3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    ba20:	6011      	str	r1, [r2, #0]
    ba22:	4948      	ldr	r1, [pc, #288]	; (bb44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    ba24:	4a46      	ldr	r2, [pc, #280]	; (bb40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    ba26:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    ba2a:	f101 0c04 	add.w	ip, r1, #4
    ba2e:	f04f 0400 	mov.w	r4, #0
    ba32:	2b00      	cmp	r3, #0
    ba34:	d055      	beq.n	bae2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    ba36:	4a44      	ldr	r2, [pc, #272]	; (bb48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    ba38:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    ba3c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    ba40:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    ba44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    ba48:	2701      	movs	r7, #1
    ba4a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    ba4e:	2a00      	cmp	r2, #0
    ba50:	bf01      	itttt	eq
    ba52:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    ba56:	2a00      	cmpeq	r2, #0
    ba58:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    ba5c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    ba60:	f04f 0a10 	mov.w	sl, #16
    ba64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ba68:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    ba6c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    ba70:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    ba74:	4a35      	ldr	r2, [pc, #212]	; (bb4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    ba76:	f8d2 c000 	ldr.w	ip, [r2]
    ba7a:	eba5 0c0c 	sub.w	ip, r5, ip
    ba7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ba82:	f1bc 0f02 	cmp.w	ip, #2
    ba86:	d337      	bcc.n	baf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ba88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ba8c:	d834      	bhi.n	baf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ba8e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    ba92:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    ba96:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    ba9a:	b12b      	cbz	r3, baa8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    ba9c:	6811      	ldr	r1, [r2, #0]
    ba9e:	1a41      	subs	r1, r0, r1
    baa0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    baa4:	2902      	cmp	r1, #2
    baa6:	d3f9      	bcc.n	ba9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    baa8:	6077      	str	r7, [r6, #4]
    baaa:	7034      	strb	r4, [r6, #0]
    baac:	f7ff ff4e 	bl	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    bab0:	4827      	ldr	r0, [pc, #156]	; (bb50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    bab2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    bab6:	f364 0101 	bfi	r1, r4, #0, #2
    baba:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    babe:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    bac2:	2102      	movs	r1, #2
    bac4:	f361 0201 	bfi	r2, r1, #0, #2
    bac8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    bacc:	fa9a f1aa 	rbit	r1, sl
    bad0:	fab1 f181 	clz	r1, r1
    bad4:	2909      	cmp	r1, #9
    bad6:	d917      	bls.n	bb08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    bad8:	f240 3155 	movw	r1, #853	; 0x355
    badc:	a01d      	add	r0, pc, #116	; (adr r0, bb54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    bade:	f000 fe87 	bl	c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    bae2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    bae6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    baea:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    baee:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    baf2:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    baf6:	e7a5      	b.n	ba44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    baf8:	2000      	movs	r0, #0
    bafa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bafe:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bb02:	206c      	movs	r0, #108	; 0x6c
    bb04:	f000 fea0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb08:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    bb0c:	60c7      	str	r7, [r0, #12]
    bb0e:	6871      	ldr	r1, [r6, #4]
    bb10:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bb14:	f44f 7080 	mov.w	r0, #256	; 0x100
    bb18:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    bb1c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    bb20:	490f      	ldr	r1, [pc, #60]	; (bb60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    bb22:	05c0      	lsls	r0, r0, #23
    bb24:	6008      	str	r0, [r1, #0]
    bb26:	2004      	movs	r0, #4
    bb28:	60b5      	str	r5, [r6, #8]
    bb2a:	f888 0001 	strb.w	r0, [r8, #1]
    bb2e:	f888 7000 	strb.w	r7, [r8]
    bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb36:	0000      	.short	0x0000
    bb38:	200002e2 	.word	0x200002e2
    bb3c:	4001f508 	.word	0x4001f508
    bb40:	fffbfffd 	.word	0xfffbfffd
    bb44:	4000b000 	.word	0x4000b000
    bb48:	fffafffd 	.word	0xfffafffd
    bb4c:	4000b504 	.word	0x4000b504
    bb50:	40008000 	.word	0x40008000
    bb54:	5f66726e 	.word	0x5f66726e
    bb58:	656d6974 	.word	0x656d6974
    bb5c:	00682e72 	.word	0x00682e72
    bb60:	4001f504 	.word	0x4001f504

0000bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    bb64:	b570      	push	{r4, r5, r6, lr}
    bb66:	4c2a      	ldr	r4, [pc, #168]	; (bc10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    bb68:	68a1      	ldr	r1, [r4, #8]
    bb6a:	4281      	cmp	r1, r0
    bb6c:	bf14      	ite	ne
    bb6e:	2201      	movne	r2, #1
    bb70:	2200      	moveq	r2, #0
    bb72:	f8df c0a0 	ldr.w	ip, [pc, #160]	; bc14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    bb76:	f89c 5000 	ldrb.w	r5, [ip]
    bb7a:	2d02      	cmp	r5, #2
    bb7c:	d002      	beq.n	bb84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    bb7e:	2a00      	cmp	r2, #0
    bb80:	d034      	beq.n	bbec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    bb82:	e002      	b.n	bb8a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    bb84:	2a00      	cmp	r2, #0
    bb86:	bf08      	it	eq
    bb88:	bd70      	popeq	{r4, r5, r6, pc}
    bb8a:	7862      	ldrb	r2, [r4, #1]
    bb8c:	b39a      	cbz	r2, bbf6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    bb8e:	4b22      	ldr	r3, [pc, #136]	; (bc18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    bb90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bb94:	601a      	str	r2, [r3, #0]
    bb96:	4b21      	ldr	r3, [pc, #132]	; (bc1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    bb98:	1392      	asrs	r2, r2, #14
    bb9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    bb9e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    bba2:	2200      	movs	r2, #0
    bba4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    bba8:	4a1d      	ldr	r2, [pc, #116]	; (bc20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    bbaa:	6816      	ldr	r6, [r2, #0]
    bbac:	1b86      	subs	r6, r0, r6
    bbae:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    bbb2:	2e02      	cmp	r6, #2
    bbb4:	d324      	bcc.n	bc00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    bbb6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    bbba:	d821      	bhi.n	bc00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    bbbc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bbc0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    bbc4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    bbc8:	b12d      	cbz	r5, bbd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    bbca:	6813      	ldr	r3, [r2, #0]
    bbcc:	1acb      	subs	r3, r1, r3
    bbce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bbd2:	2b02      	cmp	r3, #2
    bbd4:	d3f9      	bcc.n	bbca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    bbd6:	4b13      	ldr	r3, [pc, #76]	; (bc24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    bbd8:	2102      	movs	r1, #2
    bbda:	074a      	lsls	r2, r1, #29
    bbdc:	601a      	str	r2, [r3, #0]
    bbde:	60a0      	str	r0, [r4, #8]
    bbe0:	2004      	movs	r0, #4
    bbe2:	f88c 0001 	strb.w	r0, [ip, #1]
    bbe6:	f88c 1000 	strb.w	r1, [ip]
    bbea:	bd70      	pop	{r4, r5, r6, pc}
    bbec:	f240 21aa 	movw	r1, #682	; 0x2aa
    bbf0:	206c      	movs	r0, #108	; 0x6c
    bbf2:	f000 fe29 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbf6:	f240 21ae 	movw	r1, #686	; 0x2ae
    bbfa:	206c      	movs	r0, #108	; 0x6c
    bbfc:	f000 fe24 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc00:	2000      	movs	r0, #0
    bc02:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bc06:	f240 21ba 	movw	r1, #698	; 0x2ba
    bc0a:	206c      	movs	r0, #108	; 0x6c
    bc0c:	f000 fe1c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc10:	200002e0 	.word	0x200002e0
    bc14:	200002e2 	.word	0x200002e2
    bc18:	4001f508 	.word	0x4001f508
    bc1c:	4000b000 	.word	0x4000b000
    bc20:	4000b504 	.word	0x4000b504
    bc24:	4001f504 	.word	0x4001f504

0000bc28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    bc28:	4801      	ldr	r0, [pc, #4]	; (bc30 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    bc2a:	6880      	ldr	r0, [r0, #8]
    bc2c:	4770      	bx	lr
    bc2e:	0000      	.short	0x0000
    bc30:	200002e0 	.word	0x200002e0

0000bc34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc38:	4836      	ldr	r0, [pc, #216]	; (bd14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    bc3a:	4a35      	ldr	r2, [pc, #212]	; (bd10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    bc3c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bc40:	f8df c0d4 	ldr.w	ip, [pc, #212]	; bd18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    bc44:	1d03      	adds	r3, r0, #4
    bc46:	2100      	movs	r1, #0
    bc48:	f89c 4000 	ldrb.w	r4, [ip]
    bc4c:	b184      	cbz	r4, bc70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    bc4e:	4a33      	ldr	r2, [pc, #204]	; (bd1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    bc50:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc54:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc58:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc5c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bc60:	2301      	movs	r3, #1
    bc62:	2a00      	cmp	r2, #0
    bc64:	bf04      	itt	eq
    bc66:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bc6a:	2800      	cmpeq	r0, #0
    bc6c:	d111      	bne.n	bc92 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    bc6e:	e00a      	b.n	bc86 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    bc70:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc74:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc78:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc7c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc80:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc84:	e7ea      	b.n	bc5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    bc86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bc8e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bc92:	2c02      	cmp	r4, #2
    bc94:	d004      	beq.n	bca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    bc96:	f240 21c6 	movw	r1, #710	; 0x2c6
    bc9a:	206c      	movs	r0, #108	; 0x6c
    bc9c:	f000 fdd4 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bca0:	4e1f      	ldr	r6, [pc, #124]	; (bd20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    bca2:	6830      	ldr	r0, [r6, #0]
    bca4:	4c1f      	ldr	r4, [pc, #124]	; (bd24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    bca6:	1cc0      	adds	r0, r0, #3
    bca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bcac:	68a2      	ldr	r2, [r4, #8]
    bcae:	4d1e      	ldr	r5, [pc, #120]	; (bd28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    bcb0:	4290      	cmp	r0, r2
    bcb2:	d00b      	beq.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcb4:	6837      	ldr	r7, [r6, #0]
    bcb6:	1bd7      	subs	r7, r2, r7
    bcb8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    bcbc:	2f04      	cmp	r7, #4
    bcbe:	d305      	bcc.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcc0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    bcc4:	d802      	bhi.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcc6:	f7ff fe99 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bcca:	e01b      	b.n	bd04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    bccc:	6830      	ldr	r0, [r6, #0]
    bcce:	1a10      	subs	r0, r2, r0
    bcd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bcd4:	2802      	cmp	r0, #2
    bcd6:	d313      	bcc.n	bd00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    bcd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bcdc:	d810      	bhi.n	bd00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    bcde:	4a13      	ldr	r2, [pc, #76]	; (bd2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    bce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bce4:	6010      	str	r0, [r2, #0]
    bce6:	6063      	str	r3, [r4, #4]
    bce8:	7021      	strb	r1, [r4, #0]
    bcea:	606b      	str	r3, [r5, #4]
    bcec:	60eb      	str	r3, [r5, #12]
    bcee:	0040      	lsls	r0, r0, #1
    bcf0:	1f11      	subs	r1, r2, #4
    bcf2:	6008      	str	r0, [r1, #0]
    bcf4:	2004      	movs	r0, #4
    bcf6:	f88c 0001 	strb.w	r0, [ip, #1]
    bcfa:	f88c 3000 	strb.w	r3, [ip]
    bcfe:	e001      	b.n	bd04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    bd00:	6063      	str	r3, [r4, #4]
    bd02:	7021      	strb	r1, [r4, #0]
    bd04:	6860      	ldr	r0, [r4, #4]
    bd06:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd0e:	0000      	.short	0x0000
    bd10:	fffbfffd 	.word	0xfffbfffd
    bd14:	4000b000 	.word	0x4000b000
    bd18:	200002e2 	.word	0x200002e2
    bd1c:	fffafffd 	.word	0xfffafffd
    bd20:	4000b504 	.word	0x4000b504
    bd24:	200002e0 	.word	0x200002e0
    bd28:	40008000 	.word	0x40008000
    bd2c:	4001f508 	.word	0x4001f508

0000bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd34:	4a54      	ldr	r2, [pc, #336]	; (be88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    bd36:	2500      	movs	r5, #0
    bd38:	2401      	movs	r4, #1
    bd3a:	f892 c000 	ldrb.w	ip, [r2]
    bd3e:	7853      	ldrb	r3, [r2, #1]
    bd40:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bd44:	2807      	cmp	r0, #7
    bd46:	d27d      	bcs.n	be44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bd48:	e8df f000 	tbb	[pc, r0]
    bd4c:	04040404 	.word	0x04040404
    bd50:	00585858 	.word	0x00585858
    bd54:	4a4d      	ldr	r2, [pc, #308]	; (be8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    bd56:	6897      	ldr	r7, [r2, #8]
    bd58:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    bd5c:	bf04      	itt	eq
    bd5e:	7852      	ldrbeq	r2, [r2, #1]
    bd60:	2a00      	cmpeq	r2, #0
    bd62:	d003      	beq.n	bd6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    bd64:	f1bc 0f02 	cmp.w	ip, #2
    bd68:	d005      	beq.n	bd76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    bd6a:	e026      	b.n	bdba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    bd6c:	f240 3156 	movw	r1, #854	; 0x356
    bd70:	206c      	movs	r0, #108	; 0x6c
    bd72:	f000 fd69 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd76:	1f1a      	subs	r2, r3, #4
    bd78:	b2d2      	uxtb	r2, r2
    bd7a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    bd7e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    bd82:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    bd86:	2200      	movs	r2, #0
    bd88:	f1bc 0f01 	cmp.w	ip, #1
    bd8c:	d003      	beq.n	bd96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    bd8e:	f1bc 0f02 	cmp.w	ip, #2
    bd92:	d008      	beq.n	bda6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    bd94:	e00e      	b.n	bdb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bd96:	2b04      	cmp	r3, #4
    bd98:	bf24      	itt	cs
    bd9a:	6837      	ldrcs	r7, [r6, #0]
    bd9c:	2f00      	cmpcs	r7, #0
    bd9e:	bf08      	it	eq
    bda0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    bda4:	e006      	b.n	bdb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bda6:	2b04      	cmp	r3, #4
    bda8:	bf24      	itt	cs
    bdaa:	6837      	ldrcs	r7, [r6, #0]
    bdac:	2f00      	cmpcs	r7, #0
    bdae:	bf08      	it	eq
    bdb0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    bdb4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    bdb8:	d1e5      	bne.n	bd86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    bdba:	f8df c0d4 	ldr.w	ip, [pc, #212]	; be90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    bdbe:	f100 0210 	add.w	r2, r0, #16
    bdc2:	fa04 f202 	lsl.w	r2, r4, r2
    bdc6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    bdca:	f04f 0340 	mov.w	r3, #64	; 0x40
    bdce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	4463      	add	r3, ip
    bdd6:	601c      	str	r4, [r3, #0]
    bdd8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    bddc:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    bde0:	eba1 0303 	sub.w	r3, r1, r3
    bde4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bde8:	2b03      	cmp	r3, #3
    bdea:	bf26      	itte	cs
    bdec:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    bdf0:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    bdf4:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    bdf8:	d237      	bcs.n	be6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    bdfa:	e03c      	b.n	be76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    bdfc:	f1bc 0f00 	cmp.w	ip, #0
    be00:	d006      	beq.n	be10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    be02:	4283      	cmp	r3, r0
    be04:	d104      	bne.n	be10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    be06:	f240 3176 	movw	r1, #886	; 0x376
    be0a:	206c      	movs	r0, #108	; 0x6c
    be0c:	f000 fd1c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be10:	1f02      	subs	r2, r0, #4
    be12:	b2d3      	uxtb	r3, r2
    be14:	2b03      	cmp	r3, #3
    be16:	d304      	bcc.n	be22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    be18:	f240 11d1 	movw	r1, #465	; 0x1d1
    be1c:	206c      	movs	r0, #108	; 0x6c
    be1e:	f000 fd13 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be22:	f8df c070 	ldr.w	ip, [pc, #112]	; be94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    be26:	f103 0210 	add.w	r2, r3, #16
    be2a:	fa04 f202 	lsl.w	r2, r4, r2
    be2e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    be32:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    be36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    be3a:	f84c 5003 	str.w	r5, [ip, r3]
    be3e:	4b16      	ldr	r3, [pc, #88]	; (be98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	e000      	b.n	be46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    be44:	e01a      	b.n	be7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    be46:	1f00      	subs	r0, r0, #4
    be48:	1acb      	subs	r3, r1, r3
    be4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    be4e:	b2c0      	uxtb	r0, r0
    be50:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    be54:	2b02      	cmp	r3, #2
    be56:	d30b      	bcc.n	be70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    be58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    be5c:	d808      	bhi.n	be70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    be5e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    be62:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    be66:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    be6a:	2001      	movs	r0, #1
    be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be70:	2100      	movs	r1, #0
    be72:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    be76:	2000      	movs	r0, #0
    be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be7c:	f240 317a 	movw	r1, #890	; 0x37a
    be80:	206c      	movs	r0, #108	; 0x6c
    be82:	f000 fce1 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be86:	0000      	.short	0x0000
    be88:	200002e2 	.word	0x200002e2
    be8c:	200002e0 	.word	0x200002e0
    be90:	40008000 	.word	0x40008000
    be94:	4000b000 	.word	0x4000b000
    be98:	4000b504 	.word	0x4000b504

0000be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    be9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bea0:	2601      	movs	r6, #1
    bea2:	2700      	movs	r7, #0
    bea4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    bea8:	2807      	cmp	r0, #7
    beaa:	d251      	bcs.n	bf50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    beac:	e8df f000 	tbb	[pc, r0]
    beb0:	04040404 	.word	0x04040404
    beb4:	00191919 	.word	0x00191919
    beb8:	f100 0110 	add.w	r1, r0, #16
    bebc:	fa06 f201 	lsl.w	r2, r6, r1
    bec0:	4926      	ldr	r1, [pc, #152]	; (bf5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bec2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bec6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    beca:	2200      	movs	r2, #0
    becc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bed0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bed4:	508f      	str	r7, [r1, r2]
    bed6:	4922      	ldr	r1, [pc, #136]	; (bf60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bed8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bedc:	9000      	str	r0, [sp, #0]
    bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bee2:	4d20      	ldr	r5, [pc, #128]	; (bf64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bee4:	1f01      	subs	r1, r0, #4
    bee6:	b2cc      	uxtb	r4, r1
    bee8:	7829      	ldrb	r1, [r5, #0]
    beea:	b179      	cbz	r1, bf0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    beec:	786a      	ldrb	r2, [r5, #1]
    beee:	4282      	cmp	r2, r0
    bef0:	d10c      	bne.n	bf0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bef2:	4a1d      	ldr	r2, [pc, #116]	; (bf68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bef4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bef8:	6010      	str	r0, [r2, #0]
    befa:	2901      	cmp	r1, #1
    befc:	bf08      	it	eq
    befe:	f7ff fd25 	bleq	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    bf02:	702f      	strb	r7, [r5, #0]
    bf04:	4919      	ldr	r1, [pc, #100]	; (bf6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bf06:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bf0a:	6088      	str	r0, [r1, #8]
    bf0c:	4918      	ldr	r1, [pc, #96]	; (bf70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bf0e:	f104 0010 	add.w	r0, r4, #16
    bf12:	fa06 f000 	lsl.w	r0, r6, r0
    bf16:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bf1a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bf1e:	00a0      	lsls	r0, r4, #2
    bf20:	4408      	add	r0, r1
    bf22:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bf26:	4a13      	ldr	r2, [pc, #76]	; (bf74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bf28:	6812      	ldr	r2, [r2, #0]
    bf2a:	1a80      	subs	r0, r0, r2
    bf2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf30:	2802      	cmp	r0, #2
    bf32:	d307      	bcc.n	bf44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bf34:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bf38:	2000      	movs	r0, #0
    bf3a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bf3e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bf42:	500f      	str	r7, [r1, r0]
    bf44:	480c      	ldr	r0, [pc, #48]	; (bf78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bf46:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bf4a:	9000      	str	r0, [sp, #0]
    bf4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bf50:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bf54:	206c      	movs	r0, #108	; 0x6c
    bf56:	f000 fc77 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf5a:	0000      	.short	0x0000
    bf5c:	40008000 	.word	0x40008000
    bf60:	40008140 	.word	0x40008140
    bf64:	200002e2 	.word	0x200002e2
    bf68:	4001f508 	.word	0x4001f508
    bf6c:	200002e0 	.word	0x200002e0
    bf70:	4000b000 	.word	0x4000b000
    bf74:	4000b504 	.word	0x4000b504
    bf78:	4000b140 	.word	0x4000b140

0000bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bf7c:	4825      	ldr	r0, [pc, #148]	; (c014 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bf7e:	4a24      	ldr	r2, [pc, #144]	; (c010 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bf80:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bf84:	4924      	ldr	r1, [pc, #144]	; (c018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bf86:	1d03      	adds	r3, r0, #4
    bf88:	f891 c000 	ldrb.w	ip, [r1]
    bf8c:	2100      	movs	r1, #0
    bf8e:	f1bc 0f00 	cmp.w	ip, #0
    bf92:	d010      	beq.n	bfb6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bf94:	4a21      	ldr	r2, [pc, #132]	; (c01c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bf96:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bf9a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bf9e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bfa2:	bf00      	nop
    bfa4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bfa8:	2a00      	cmp	r2, #0
    bfaa:	bf04      	itt	eq
    bfac:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bfb0:	2800      	cmpeq	r0, #0
    bfb2:	d111      	bne.n	bfd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bfb4:	e00a      	b.n	bfcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bfb6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bfba:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bfbe:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bfc2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bfc6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bfca:	e7eb      	b.n	bfa4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bfcc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bfd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bfd4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bfd8:	4811      	ldr	r0, [pc, #68]	; (c020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bfda:	f04f 32ff 	mov.w	r2, #4294967295
    bfde:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bfe2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bfe6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bfea:	f100 0204 	add.w	r2, r0, #4
    bfee:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bff2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bff6:	f102 0204 	add.w	r2, r2, #4
    bffa:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bffe:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    c002:	f102 0204 	add.w	r2, r2, #4
    c006:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    c00a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    c00e:	4770      	bx	lr
    c010:	fffbfffd 	.word	0xfffbfffd
    c014:	4000b000 	.word	0x4000b000
    c018:	200002e2 	.word	0x200002e2
    c01c:	fffafffd 	.word	0xfffafffd
    c020:	40008000 	.word	0x40008000

0000c024 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    c024:	b510      	push	{r4, lr}
    c026:	2807      	cmp	r0, #7
    c028:	d20d      	bcs.n	c046 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    c02a:	e8df f000 	tbb	[pc, r0]
    c02e:	0404      	.short	0x0404
    c030:	06060404 	.word	0x06060404
    c034:	0006      	.short	0x0006
    c036:	4906      	ldr	r1, [pc, #24]	; (c050 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    c038:	e002      	b.n	c040 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    c03a:	1f00      	subs	r0, r0, #4
    c03c:	4905      	ldr	r1, [pc, #20]	; (c054 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    c03e:	b2c0      	uxtb	r0, r0
    c040:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c044:	bd10      	pop	{r4, pc}
    c046:	f240 319e 	movw	r1, #926	; 0x39e
    c04a:	206c      	movs	r0, #108	; 0x6c
    c04c:	f000 fbfc 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c050:	40008140 	.word	0x40008140
    c054:	4000b140 	.word	0x4000b140

0000c058 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    c058:	b510      	push	{r4, lr}
    c05a:	2807      	cmp	r0, #7
    c05c:	d20d      	bcs.n	c07a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    c05e:	e8df f000 	tbb	[pc, r0]
    c062:	0404      	.short	0x0404
    c064:	06060404 	.word	0x06060404
    c068:	0006      	.short	0x0006
    c06a:	4906      	ldr	r1, [pc, #24]	; (c084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    c06c:	e002      	b.n	c074 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    c06e:	1f00      	subs	r0, r0, #4
    c070:	4905      	ldr	r1, [pc, #20]	; (c088 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    c072:	b2c0      	uxtb	r0, r0
    c074:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c078:	bd10      	pop	{r4, pc}
    c07a:	f240 319e 	movw	r1, #926	; 0x39e
    c07e:	206c      	movs	r0, #108	; 0x6c
    c080:	f000 fbe2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c084:	40008140 	.word	0x40008140
    c088:	4000b140 	.word	0x4000b140

0000c08c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    c08c:	b570      	push	{r4, r5, r6, lr}
    c08e:	481f      	ldr	r0, [pc, #124]	; (c10c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    c090:	2400      	movs	r4, #0
    c092:	2104      	movs	r1, #4
    c094:	7004      	strb	r4, [r0, #0]
    c096:	1e80      	subs	r0, r0, #2
    c098:	7001      	strb	r1, [r0, #0]
    c09a:	0589      	lsls	r1, r1, #22
    c09c:	60c4      	str	r4, [r0, #12]
    c09e:	6081      	str	r1, [r0, #8]
    c0a0:	f7ff fc54 	bl	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    c0a4:	2501      	movs	r5, #1
    c0a6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c0aa:	02eb      	lsls	r3, r5, #11
    c0ac:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    c0b0:	f3bf 8f4f 	dsb	sy
    c0b4:	f3bf 8f6f 	isb	sy
    c0b8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    c0bc:	4814      	ldr	r0, [pc, #80]	; (c110 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    c0be:	6045      	str	r5, [r0, #4]
    c0c0:	6085      	str	r5, [r0, #8]
    c0c2:	4914      	ldr	r1, [pc, #80]	; (c114 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    c0c4:	680a      	ldr	r2, [r1, #0]
    c0c6:	2a00      	cmp	r2, #0
    c0c8:	d1fc      	bne.n	c0c4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    c0ca:	1e51      	subs	r1, r2, #1
    c0cc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c0d0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    c0d4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    c0d8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c0dc:	490e      	ldr	r1, [pc, #56]	; (c118 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    c0de:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    c0e2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c0e6:	1d09      	adds	r1, r1, #4
    c0e8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    c0ec:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c0f0:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    c0f4:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    c0f8:	6005      	str	r5, [r0, #0]
    c0fa:	f44f 7182 	mov.w	r1, #260	; 0x104
    c0fe:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    c102:	2102      	movs	r1, #2
    c104:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    c108:	bd70      	pop	{r4, r5, r6, pc}
    c10a:	0000      	.short	0x0000
    c10c:	200002e2 	.word	0x200002e2
    c110:	4000b000 	.word	0x4000b000
    c114:	4000b504 	.word	0x4000b504
    c118:	4000b004 	.word	0x4000b004

0000c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    c11c:	4808      	ldr	r0, [pc, #32]	; (c140 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    c11e:	f990 0000 	ldrsb.w	r0, [r0]
    c122:	2800      	cmp	r0, #0
    c124:	bfb8      	it	lt
    c126:	4770      	bxlt	lr
    c128:	f000 011f 	and.w	r1, r0, #31
    c12c:	2201      	movs	r2, #1
    c12e:	fa02 f101 	lsl.w	r1, r2, r1
    c132:	0940      	lsrs	r0, r0, #5
    c134:	0080      	lsls	r0, r0, #2
    c136:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c13a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c13e:	4770      	bx	lr
    c140:	2000036e 	.word	0x2000036e

0000c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    c144:	4803      	ldr	r0, [pc, #12]	; (c154 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    c146:	7800      	ldrb	r0, [r0, #0]
    c148:	2803      	cmp	r0, #3
    c14a:	bf0c      	ite	eq
    c14c:	2001      	moveq	r0, #1
    c14e:	2000      	movne	r0, #0
    c150:	4770      	bx	lr
    c152:	0000      	.short	0x0000
    c154:	20000340 	.word	0x20000340

0000c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    c158:	4801      	ldr	r0, [pc, #4]	; (c160 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    c15a:	8840      	ldrh	r0, [r0, #2]
    c15c:	4770      	bx	lr
    c15e:	0000      	.short	0x0000
    c160:	20000340 	.word	0x20000340

0000c164 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    c164:	4803      	ldr	r0, [pc, #12]	; (c174 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    c166:	7800      	ldrb	r0, [r0, #0]
    c168:	2802      	cmp	r0, #2
    c16a:	bf16      	itet	ne
    c16c:	2803      	cmpne	r0, #3
    c16e:	2001      	moveq	r0, #1
    c170:	2000      	movne	r0, #0
    c172:	4770      	bx	lr
    c174:	20000340 	.word	0x20000340

0000c178 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    c178:	4802      	ldr	r0, [pc, #8]	; (c184 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    c17a:	2100      	movs	r1, #0
    c17c:	7001      	strb	r1, [r0, #0]
    c17e:	8041      	strh	r1, [r0, #2]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	20000340 	.word	0x20000340

0000c188 <MPSL_IRQ_CLOCK_Handler>:
    c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c18c:	4c16      	ldr	r4, [pc, #88]	; (c1e8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    c18e:	7a60      	ldrb	r0, [r4, #9]
    c190:	2800      	cmp	r0, #0
    c192:	d027      	beq.n	c1e4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    c194:	f44f 7180 	mov.w	r1, #256	; 0x100
    c198:	058d      	lsls	r5, r1, #22
    c19a:	4628      	mov	r0, r5
    c19c:	f004 fd6b 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c1a0:	4680      	mov	r8, r0
    c1a2:	f44f 7182 	mov.w	r1, #260	; 0x104
    c1a6:	4628      	mov	r0, r5
    c1a8:	f004 fd65 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c1ac:	2600      	movs	r6, #0
    c1ae:	4607      	mov	r7, r0
    c1b0:	f1b8 0f00 	cmp.w	r8, #0
    c1b4:	d009      	beq.n	c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1b6:	2001      	movs	r0, #1
    c1b8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c1bc:	7920      	ldrb	r0, [r4, #4]
    c1be:	b120      	cbz	r0, c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1c0:	7126      	strb	r6, [r4, #4]
    c1c2:	69e0      	ldr	r0, [r4, #28]
    c1c4:	b108      	cbz	r0, c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1c6:	4780      	blx	r0
    c1c8:	61e6      	str	r6, [r4, #28]
    c1ca:	b137      	cbz	r7, c1da <MPSL_IRQ_CLOCK_Handler+0x52>
    c1cc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    c1d0:	2002      	movs	r0, #2
    c1d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c1d6:	f000 fa57 	bl	c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c1da:	4640      	mov	r0, r8
    c1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1e0:	f000 b858 	b.w	c294 <MPSL_IRQ_CLOCK_Handler+0x10c>
    c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1e8:	200002f0 	.word	0x200002f0
    c1ec:	b510      	push	{r4, lr}
    c1ee:	f004 fdec 	bl	10dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c1f2:	b930      	cbnz	r0, c202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c1f4:	f004 fe0a 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c1f8:	b918      	cbnz	r0, c202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c1fa:	f004 fe3d 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c1fe:	2800      	cmp	r0, #0
    c200:	d002      	beq.n	c208 <MPSL_IRQ_CLOCK_Handler+0x80>
    c202:	4902      	ldr	r1, [pc, #8]	; (c20c <MPSL_IRQ_CLOCK_Handler+0x84>)
    c204:	2002      	movs	r0, #2
    c206:	6008      	str	r0, [r1, #0]
    c208:	bd10      	pop	{r4, pc}
    c20a:	0000      	.short	0x0000
    c20c:	40000c34 	.word	0x40000c34
    c210:	b570      	push	{r4, r5, r6, lr}
    c212:	f000 f99b 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c216:	f000 fa9f 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c21a:	4c09      	ldr	r4, [pc, #36]	; (c240 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    c21c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c220:	b130      	cbz	r0, c230 <MPSL_IRQ_CLOCK_Handler+0xa8>
    c222:	f7ff ffe3 	bl	c1ec <MPSL_IRQ_CLOCK_Handler+0x64>
    c226:	2001      	movs	r0, #1
    c228:	6128      	str	r0, [r5, #16]
    c22a:	2004      	movs	r0, #4
    c22c:	72a0      	strb	r0, [r4, #10]
    c22e:	e004      	b.n	c23a <MPSL_IRQ_CLOCK_Handler+0xb2>
    c230:	2003      	movs	r0, #3
    c232:	72a0      	strb	r0, [r4, #10]
    c234:	2001      	movs	r0, #1
    c236:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c23a:	2000      	movs	r0, #0
    c23c:	71e0      	strb	r0, [r4, #7]
    c23e:	bd70      	pop	{r4, r5, r6, pc}
    c240:	200002f0 	.word	0x200002f0
    c244:	b570      	push	{r4, r5, r6, lr}
    c246:	4c12      	ldr	r4, [pc, #72]	; (c290 <MPSL_IRQ_CLOCK_Handler+0x108>)
    c248:	79a0      	ldrb	r0, [r4, #6]
    c24a:	b1e0      	cbz	r0, c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c24c:	79e1      	ldrb	r1, [r4, #7]
    c24e:	1e40      	subs	r0, r0, #1
    c250:	4281      	cmp	r1, r0
    c252:	da18      	bge.n	c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c254:	f000 fa80 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c258:	4605      	mov	r5, r0
    c25a:	f000 fb69 	bl	c930 <mpsl_temperature_get>
    c25e:	79a1      	ldrb	r1, [r4, #6]
    c260:	2901      	cmp	r1, #1
    c262:	d902      	bls.n	c26a <MPSL_IRQ_CLOCK_Handler+0xe2>
    c264:	79e1      	ldrb	r1, [r4, #7]
    c266:	1c49      	adds	r1, r1, #1
    c268:	71e1      	strb	r1, [r4, #7]
    c26a:	b10d      	cbz	r5, c270 <MPSL_IRQ_CLOCK_Handler+0xe8>
    c26c:	6961      	ldr	r1, [r4, #20]
    c26e:	e000      	b.n	c272 <MPSL_IRQ_CLOCK_Handler+0xea>
    c270:	6921      	ldr	r1, [r4, #16]
    c272:	1a41      	subs	r1, r0, r1
    c274:	2902      	cmp	r1, #2
    c276:	da02      	bge.n	c27e <MPSL_IRQ_CLOCK_Handler+0xf6>
    c278:	f111 0f02 	cmn.w	r1, #2
    c27c:	dc07      	bgt.n	c28e <MPSL_IRQ_CLOCK_Handler+0x106>
    c27e:	b10d      	cbz	r5, c284 <MPSL_IRQ_CLOCK_Handler+0xfc>
    c280:	6160      	str	r0, [r4, #20]
    c282:	e000      	b.n	c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c284:	6120      	str	r0, [r4, #16]
    c286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c28a:	f7ff bfc1 	b.w	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c28e:	bd70      	pop	{r4, r5, r6, pc}
    c290:	200002f0 	.word	0x200002f0
    c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c298:	4606      	mov	r6, r0
    c29a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c29e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c2a2:	4628      	mov	r0, r5
    c2a4:	f004 fce7 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2a8:	4680      	mov	r8, r0
    c2aa:	f44f 7188 	mov.w	r1, #272	; 0x110
    c2ae:	4628      	mov	r0, r5
    c2b0:	f004 fce1 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2b4:	4c27      	ldr	r4, [pc, #156]	; (c354 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c2b6:	4682      	mov	sl, r0
    c2b8:	7827      	ldrb	r7, [r4, #0]
    c2ba:	f104 0008 	add.w	r0, r4, #8
    c2be:	f004 fd4e 	bl	10d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c2c2:	b110      	cbz	r0, c2ca <MPSL_IRQ_CLOCK_Handler+0x142>
    c2c4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c2c8:	e016      	b.n	c2f8 <MPSL_IRQ_CLOCK_Handler+0x170>
    c2ca:	f04f 0901 	mov.w	r9, #1
    c2ce:	b146      	cbz	r6, c2e2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c2d0:	7aa0      	ldrb	r0, [r4, #10]
    c2d2:	2803      	cmp	r0, #3
    c2d4:	d105      	bne.n	c2e2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c2d6:	2004      	movs	r0, #4
    c2d8:	72a0      	strb	r0, [r4, #10]
    c2da:	f7ff ff87 	bl	c1ec <MPSL_IRQ_CLOCK_Handler+0x64>
    c2de:	f8c5 9010 	str.w	r9, [r5, #16]
    c2e2:	2600      	movs	r6, #0
    c2e4:	f1b8 0f00 	cmp.w	r8, #0
    c2e8:	d018      	beq.n	c31c <MPSL_IRQ_CLOCK_Handler+0x194>
    c2ea:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c2ee:	7aa0      	ldrb	r0, [r4, #10]
    c2f0:	2804      	cmp	r0, #4
    c2f2:	d004      	beq.n	c2fe <MPSL_IRQ_CLOCK_Handler+0x176>
    c2f4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c2f8:	206d      	movs	r0, #109	; 0x6d
    c2fa:	f000 faa5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2fe:	f004 fd64 	bl	10dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c302:	b928      	cbnz	r0, c310 <MPSL_IRQ_CLOCK_Handler+0x188>
    c304:	f004 fd82 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c308:	b910      	cbnz	r0, c310 <MPSL_IRQ_CLOCK_Handler+0x188>
    c30a:	f004 fdb5 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c30e:	b108      	cbz	r0, c314 <MPSL_IRQ_CLOCK_Handler+0x18c>
    c310:	4811      	ldr	r0, [pc, #68]	; (c358 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c312:	6006      	str	r6, [r0, #0]
    c314:	2002      	movs	r0, #2
    c316:	72a0      	strb	r0, [r4, #10]
    c318:	f000 f8fc 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c31c:	f1ba 0f00 	cmp.w	sl, #0
    c320:	d008      	beq.n	c334 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c322:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c326:	7aa0      	ldrb	r0, [r4, #10]
    c328:	2802      	cmp	r0, #2
    c32a:	d101      	bne.n	c330 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c32c:	f7ff ff8a 	bl	c244 <MPSL_IRQ_CLOCK_Handler+0xbc>
    c330:	f8c5 9014 	str.w	r9, [r5, #20]
    c334:	b13f      	cbz	r7, c346 <MPSL_IRQ_CLOCK_Handler+0x1be>
    c336:	7026      	strb	r6, [r4, #0]
    c338:	7aa0      	ldrb	r0, [r4, #10]
    c33a:	2802      	cmp	r0, #2
    c33c:	d101      	bne.n	c342 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c33e:	f7ff ff67 	bl	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c342:	f000 f8e7 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c346:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c34a:	4802      	ldr	r0, [pc, #8]	; (c354 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c34c:	3008      	adds	r0, #8
    c34e:	f004 bd1d 	b.w	10d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c352:	0000      	.short	0x0000
    c354:	200002f0 	.word	0x200002f0
    c358:	40000c34 	.word	0x40000c34
    c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c360:	4c49      	ldr	r4, [pc, #292]	; (c488 <MPSL_IRQ_CLOCK_Handler+0x300>)
    c362:	2700      	movs	r7, #0
    c364:	4606      	mov	r6, r0
    c366:	61a7      	str	r7, [r4, #24]
    c368:	7842      	ldrb	r2, [r0, #1]
    c36a:	7881      	ldrb	r1, [r0, #2]
    c36c:	7800      	ldrb	r0, [r0, #0]
    c36e:	72e0      	strb	r0, [r4, #11]
    c370:	7162      	strb	r2, [r4, #5]
    c372:	71a1      	strb	r1, [r4, #6]
    c374:	71e7      	strb	r7, [r4, #7]
    c376:	f04f 0801 	mov.w	r8, #1
    c37a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c37e:	2805      	cmp	r0, #5
    c380:	d225      	bcs.n	c3ce <MPSL_IRQ_CLOCK_Handler+0x246>
    c382:	e8df f000 	tbb	[pc, r0]
    c386:	0310      	.short	0x0310
    c388:	00222006 	.word	0x00222006
    c38c:	f8c4 8018 	str.w	r8, [r4, #24]
    c390:	e009      	b.n	c3a6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    c392:	f000 f8db 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c396:	2101      	movs	r1, #1
    c398:	4628      	mov	r0, r5
    c39a:	f004 fc71 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c39e:	2800      	cmp	r0, #0
    c3a0:	d0f9      	beq.n	c396 <MPSL_IRQ_CLOCK_Handler+0x20e>
    c3a2:	2002      	movs	r0, #2
    c3a4:	61a0      	str	r0, [r4, #24]
    c3a6:	f004 fc97 	bl	10cd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c3aa:	b1c0      	cbz	r0, c3de <MPSL_IRQ_CLOCK_Handler+0x256>
    c3ac:	f000 f9ee 	bl	c78c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c3b0:	7e21      	ldrb	r1, [r4, #24]
    c3b2:	f001 0103 	and.w	r1, r1, #3
    c3b6:	4288      	cmp	r0, r1
    c3b8:	d111      	bne.n	c3de <MPSL_IRQ_CLOCK_Handler+0x256>
    c3ba:	79b0      	ldrb	r0, [r6, #6]
    c3bc:	b160      	cbz	r0, c3d8 <MPSL_IRQ_CLOCK_Handler+0x250>
    c3be:	2002      	movs	r0, #2
    c3c0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c3c4:	e044      	b.n	c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c3c6:	4831      	ldr	r0, [pc, #196]	; (c48c <MPSL_IRQ_CLOCK_Handler+0x304>)
    c3c8:	e7ec      	b.n	c3a4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c3ca:	4831      	ldr	r0, [pc, #196]	; (c490 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c3cc:	e7ea      	b.n	c3a4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c3ce:	f240 313d 	movw	r1, #829	; 0x33d
    c3d2:	206d      	movs	r0, #109	; 0x6d
    c3d4:	f000 fa38 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c3d8:	f000 f9ac 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c3dc:	e038      	b.n	c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c3de:	f8c5 800c 	str.w	r8, [r5, #12]
    c3e2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c3e6:	69a0      	ldr	r0, [r4, #24]
    c3e8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c3ec:	f004 fcd9 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c3f0:	b940      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3f2:	f004 fce0 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3f6:	b928      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3f8:	f004 fcf4 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c3fc:	b910      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3fe:	f004 fd05 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c402:	b138      	cbz	r0, c414 <MPSL_IRQ_CLOCK_Handler+0x28c>
    c404:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c408:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c40c:	4921      	ldr	r1, [pc, #132]	; (c494 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c40e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c412:	6008      	str	r0, [r1, #0]
    c414:	f004 fcc5 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c418:	b940      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c41a:	f004 fccc 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c41e:	b928      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c420:	f004 fce0 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c424:	b910      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c426:	f004 fcf1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c42a:	b118      	cbz	r0, c434 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c42c:	4919      	ldr	r1, [pc, #100]	; (c494 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c42e:	3110      	adds	r1, #16
    c430:	f8c1 8000 	str.w	r8, [r1]
    c434:	f8c5 8008 	str.w	r8, [r5, #8]
    c438:	2002      	movs	r0, #2
    c43a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c43e:	79b0      	ldrb	r0, [r6, #6]
    c440:	b930      	cbnz	r0, c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c442:	f000 f829 	bl	c498 <MPSL_IRQ_CLOCK_Handler+0x310>
    c446:	2002      	movs	r0, #2
    c448:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c44c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c450:	79a0      	ldrb	r0, [r4, #6]
    c452:	b170      	cbz	r0, c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c454:	7830      	ldrb	r0, [r6, #0]
    c456:	b960      	cbnz	r0, c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c458:	f000 f97e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c45c:	4606      	mov	r6, r0
    c45e:	f000 fa67 	bl	c930 <mpsl_temperature_get>
    c462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c466:	b116      	cbz	r6, c46e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c468:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c46c:	e001      	b.n	c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c46e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c472:	2101      	movs	r1, #1
    c474:	4628      	mov	r0, r5
    c476:	f004 fc03 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c47a:	b108      	cbz	r0, c480 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c47c:	f000 f966 	bl	c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c480:	72a7      	strb	r7, [r4, #10]
    c482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c486:	0000      	.short	0x0000
    c488:	200002f0 	.word	0x200002f0
    c48c:	00020001 	.word	0x00020001
    c490:	00030001 	.word	0x00030001
    c494:	4000053c 	.word	0x4000053c
    c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c49c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c4a0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c4a4:	f010 0f02 	tst.w	r0, #2
    c4a8:	d011      	beq.n	c4ce <MPSL_IRQ_CLOCK_Handler+0x346>
    c4aa:	4c16      	ldr	r4, [pc, #88]	; (c504 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c4ac:	6820      	ldr	r0, [r4, #0]
    c4ae:	43c0      	mvns	r0, r0
    c4b0:	f340 1600 	sbfx	r6, r0, #4, #1
    c4b4:	6820      	ldr	r0, [r4, #0]
    c4b6:	f040 0010 	orr.w	r0, r0, #16
    c4ba:	6020      	str	r0, [r4, #0]
    c4bc:	f44f 7782 	mov.w	r7, #260	; 0x104
    c4c0:	4639      	mov	r1, r7
    c4c2:	4628      	mov	r0, r5
    c4c4:	1c76      	adds	r6, r6, #1
    c4c6:	f004 fbd6 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c4ca:	b128      	cbz	r0, c4d8 <MPSL_IRQ_CLOCK_Handler+0x350>
    c4cc:	e00a      	b.n	c4e4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c4ce:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c4d2:	206d      	movs	r0, #109	; 0x6d
    c4d4:	f000 f9b8 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4d8:	f004 fcda 	bl	10e90 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c4dc:	e002      	b.n	c4e4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c4de:	bf00      	nop
    c4e0:	f004 fcd4 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c4e4:	4639      	mov	r1, r7
    c4e6:	4628      	mov	r0, r5
    c4e8:	f004 fbc5 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c4ec:	2800      	cmp	r0, #0
    c4ee:	d0f7      	beq.n	c4e0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c4f0:	f000 f920 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c4f4:	2e00      	cmp	r6, #0
    c4f6:	d103      	bne.n	c500 <MPSL_IRQ_CLOCK_Handler+0x378>
    c4f8:	6820      	ldr	r0, [r4, #0]
    c4fa:	f020 0010 	bic.w	r0, r0, #16
    c4fe:	6020      	str	r0, [r4, #0]
    c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c504:	e000ed10 	.word	0xe000ed10

0000c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c508:	4801      	ldr	r0, [pc, #4]	; (c510 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c50a:	89c0      	ldrh	r0, [r0, #14]
    c50c:	4770      	bx	lr
    c50e:	0000      	.short	0x0000
    c510:	200002f0 	.word	0x200002f0

0000c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c514:	b510      	push	{r4, lr}
    c516:	f3ef 8410 	mrs	r4, PRIMASK
    c51a:	b672      	cpsid	i
    c51c:	480a      	ldr	r0, [pc, #40]	; (c548 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c51e:	7841      	ldrb	r1, [r0, #1]
    c520:	b129      	cbz	r1, c52e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c522:	7841      	ldrb	r1, [r0, #1]
    c524:	1e49      	subs	r1, r1, #1
    c526:	7041      	strb	r1, [r0, #1]
    c528:	7841      	ldrb	r1, [r0, #1]
    c52a:	b129      	cbz	r1, c538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c52c:	e008      	b.n	c540 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c52e:	f240 1119 	movw	r1, #281	; 0x119
    c532:	206d      	movs	r0, #109	; 0x6d
    c534:	f000 f988 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c538:	7880      	ldrb	r0, [r0, #2]
    c53a:	b908      	cbnz	r0, c540 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c53c:	f000 f91a 	bl	c774 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c540:	2c00      	cmp	r4, #0
    c542:	d100      	bne.n	c546 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c544:	b662      	cpsie	i
    c546:	bd10      	pop	{r4, pc}
    c548:	200002f0 	.word	0x200002f0

0000c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c54c:	b510      	push	{r4, lr}
    c54e:	f3ef 8410 	mrs	r4, PRIMASK
    c552:	b672      	cpsid	i
    c554:	4806      	ldr	r0, [pc, #24]	; (c570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c556:	7841      	ldrb	r1, [r0, #1]
    c558:	1c49      	adds	r1, r1, #1
    c55a:	7041      	strb	r1, [r0, #1]
    c55c:	7840      	ldrb	r0, [r0, #1]
    c55e:	2801      	cmp	r0, #1
    c560:	d101      	bne.n	c566 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c562:	f004 fba4 	bl	10cae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c566:	2c00      	cmp	r4, #0
    c568:	d100      	bne.n	c56c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c56a:	b662      	cpsie	i
    c56c:	bd10      	pop	{r4, pc}
    c56e:	0000      	.short	0x0000
    c570:	200002f0 	.word	0x200002f0

0000c574 <mpsl_clock_hfclk_release>:
    c574:	4805      	ldr	r0, [pc, #20]	; (c58c <mpsl_clock_hfclk_release+0x18>)
    c576:	b510      	push	{r4, lr}
    c578:	78c1      	ldrb	r1, [r0, #3]
    c57a:	b121      	cbz	r1, c586 <mpsl_clock_hfclk_release+0x12>
    c57c:	2100      	movs	r1, #0
    c57e:	7101      	strb	r1, [r0, #4]
    c580:	70c1      	strb	r1, [r0, #3]
    c582:	f7ff ffc7 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c586:	2000      	movs	r0, #0
    c588:	bd10      	pop	{r4, pc}
    c58a:	0000      	.short	0x0000
    c58c:	200002f0 	.word	0x200002f0

0000c590 <mpsl_clock_hfclk_request>:
    c590:	b570      	push	{r4, r5, r6, lr}
    c592:	4c0c      	ldr	r4, [pc, #48]	; (c5c4 <mpsl_clock_hfclk_request+0x34>)
    c594:	78e1      	ldrb	r1, [r4, #3]
    c596:	b961      	cbnz	r1, c5b2 <mpsl_clock_hfclk_request+0x22>
    c598:	2501      	movs	r5, #1
    c59a:	70e5      	strb	r5, [r4, #3]
    c59c:	61e0      	str	r0, [r4, #28]
    c59e:	f7ff ffd5 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c5a2:	f000 f8d9 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c5a6:	b130      	cbz	r0, c5b6 <mpsl_clock_hfclk_request+0x26>
    c5a8:	69e0      	ldr	r0, [r4, #28]
    c5aa:	b110      	cbz	r0, c5b2 <mpsl_clock_hfclk_request+0x22>
    c5ac:	4780      	blx	r0
    c5ae:	2000      	movs	r0, #0
    c5b0:	61e0      	str	r0, [r4, #28]
    c5b2:	2000      	movs	r0, #0
    c5b4:	bd70      	pop	{r4, r5, r6, pc}
    c5b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5ba:	7125      	strb	r5, [r4, #4]
    c5bc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c5c0:	e7f7      	b.n	c5b2 <mpsl_clock_hfclk_request+0x22>
    c5c2:	0000      	.short	0x0000
    c5c4:	200002f0 	.word	0x200002f0

0000c5c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5cc:	0005      	movs	r5, r0
    c5ce:	f06f 0015 	mvn.w	r0, #21
    c5d2:	d03f      	beq.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5d4:	7829      	ldrb	r1, [r5, #0]
    c5d6:	2904      	cmp	r1, #4
    c5d8:	d83c      	bhi.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5da:	2900      	cmp	r1, #0
    c5dc:	7869      	ldrb	r1, [r5, #1]
    c5de:	d03b      	beq.n	c658 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c5e0:	2900      	cmp	r1, #0
    c5e2:	d137      	bne.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5e4:	78a9      	ldrb	r1, [r5, #2]
    c5e6:	2900      	cmp	r1, #0
    c5e8:	d134      	bne.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5ea:	2000      	movs	r0, #0
    c5ec:	f004 fb32 	bl	10c54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c5f0:	2000      	movs	r0, #0
    c5f2:	f004 fb22 	bl	10c3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c5f6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c5fa:	f04f 31ff 	mov.w	r1, #4294967295
    c5fe:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c602:	2600      	movs	r6, #0
    c604:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c608:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c60c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c610:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c614:	4c14      	ldr	r4, [pc, #80]	; (c668 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c616:	7066      	strb	r6, [r4, #1]
    c618:	88a8      	ldrh	r0, [r5, #4]
    c61a:	81a0      	strh	r0, [r4, #12]
    c61c:	f004 fb3e 	bl	10c9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c620:	2701      	movs	r7, #1
    c622:	b108      	cbz	r0, c628 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c624:	70e7      	strb	r7, [r4, #3]
    c626:	7067      	strb	r7, [r4, #1]
    c628:	2101      	movs	r1, #1
    c62a:	4640      	mov	r0, r8
    c62c:	f004 fb28 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c630:	b108      	cbz	r0, c636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c632:	f000 f88b 	bl	c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c636:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c63a:	81e0      	strh	r0, [r4, #14]
    c63c:	4628      	mov	r0, r5
    c63e:	f7ff fe8d 	bl	c35c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c642:	7267      	strb	r7, [r4, #9]
    c644:	2000      	movs	r0, #0
    c646:	f004 faf8 	bl	10c3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c64a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c64e:	4630      	mov	r0, r6
    c650:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c658:	2900      	cmp	r1, #0
    c65a:	d0fb      	beq.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c65c:	2920      	cmp	r1, #32
    c65e:	d8f9      	bhi.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c660:	78a9      	ldrb	r1, [r5, #2]
    c662:	2921      	cmp	r1, #33	; 0x21
    c664:	d9c1      	bls.n	c5ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c666:	e7f5      	b.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c668:	200002f0 	.word	0x200002f0

0000c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c66c:	4801      	ldr	r0, [pc, #4]	; (c674 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c66e:	8980      	ldrh	r0, [r0, #12]
    c670:	4770      	bx	lr
    c672:	0000      	.short	0x0000
    c674:	200002f0 	.word	0x200002f0

0000c678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c678:	4802      	ldr	r0, [pc, #8]	; (c684 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c67a:	7a80      	ldrb	r0, [r0, #10]
    c67c:	2800      	cmp	r0, #0
    c67e:	d000      	beq.n	c682 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c680:	2001      	movs	r0, #1
    c682:	4770      	bx	lr
    c684:	200002f0 	.word	0x200002f0

0000c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c68a:	4d1f      	ldr	r5, [pc, #124]	; (c708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c68c:	7ae8      	ldrb	r0, [r5, #11]
    c68e:	2800      	cmp	r0, #0
    c690:	d10f      	bne.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c692:	7e28      	ldrb	r0, [r5, #24]
    c694:	f000 0003 	and.w	r0, r0, #3
    c698:	f004 fb0e 	bl	10cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c69c:	2800      	cmp	r0, #0
    c69e:	d008      	beq.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c6a0:	f3ef 8110 	mrs	r1, PRIMASK
    c6a4:	b672      	cpsid	i
    c6a6:	f7ff ffe7 	bl	c678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c6aa:	b118      	cbz	r0, c6b4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c6ac:	2900      	cmp	r1, #0
    c6ae:	d100      	bne.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c6b0:	b662      	cpsie	i
    c6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6b4:	2601      	movs	r6, #1
    c6b6:	72ae      	strb	r6, [r5, #10]
    c6b8:	b901      	cbnz	r1, c6bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c6ba:	b662      	cpsie	i
    c6bc:	2018      	movs	r0, #24
    c6be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c6c2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c6c6:	61a6      	str	r6, [r4, #24]
    c6c8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c6cc:	f8ad 0000 	strh.w	r0, [sp]
    c6d0:	f8bd 0000 	ldrh.w	r0, [sp]
    c6d4:	1e41      	subs	r1, r0, #1
    c6d6:	f8ad 1000 	strh.w	r1, [sp]
    c6da:	d2f9      	bcs.n	c6d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c6dc:	2700      	movs	r7, #0
    c6de:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c6e2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c6e6:	4808      	ldr	r0, [pc, #32]	; (c708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c6e8:	3008      	adds	r0, #8
    c6ea:	f004 fb4b 	bl	10d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c6ee:	702f      	strb	r7, [r5, #0]
    c6f0:	f7ff fd8e 	bl	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c6f4:	6166      	str	r6, [r4, #20]
    c6f6:	7968      	ldrb	r0, [r5, #5]
    c6f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c6fc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c700:	2018      	movs	r0, #24
    c702:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c708:	200002f0 	.word	0x200002f0

0000c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c70c:	4602      	mov	r2, r0
    c70e:	b510      	push	{r4, lr}
    c710:	2000      	movs	r0, #0
    c712:	2900      	cmp	r1, #0
    c714:	d00a      	beq.n	c72c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c716:	2a00      	cmp	r2, #0
    c718:	d008      	beq.n	c72c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c71a:	fba2 0101 	umull	r0, r1, r2, r1
    c71e:	1e40      	subs	r0, r0, #1
    c720:	4a03      	ldr	r2, [pc, #12]	; (c730 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c722:	f141 31ff 	adc.w	r1, r1, #4294967295
    c726:	f004 fbb5 	bl	10e94 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c72a:	1c40      	adds	r0, r0, #1
    c72c:	bd10      	pop	{r4, pc}
    c72e:	0000      	.short	0x0000
    c730:	000f4240 	.word	0x000f4240

0000c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c734:	b510      	push	{r4, lr}
    c736:	4c04      	ldr	r4, [pc, #16]	; (c748 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c738:	7e20      	ldrb	r0, [r4, #24]
    c73a:	f000 0003 	and.w	r0, r0, #3
    c73e:	f004 fabb 	bl	10cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c742:	2800      	cmp	r0, #0
    c744:	d0f8      	beq.n	c738 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c746:	bd10      	pop	{r4, pc}
    c748:	200002f0 	.word	0x200002f0

0000c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c74c:	4901      	ldr	r1, [pc, #4]	; (c754 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c74e:	2001      	movs	r0, #1
    c750:	7008      	strb	r0, [r1, #0]
    c752:	4770      	bx	lr
    c754:	2000036f 	.word	0x2000036f

0000c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c75c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c760:	b918      	cbnz	r0, c76a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c762:	4803      	ldr	r0, [pc, #12]	; (c770 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c764:	7800      	ldrb	r0, [r0, #0]
    c766:	2800      	cmp	r0, #0
    c768:	d000      	beq.n	c76c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c76a:	2001      	movs	r0, #1
    c76c:	4770      	bx	lr
    c76e:	0000      	.short	0x0000
    c770:	2000036f 	.word	0x2000036f

0000c774 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c774:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c778:	2101      	movs	r1, #1
    c77a:	6041      	str	r1, [r0, #4]
    c77c:	2100      	movs	r1, #0
    c77e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c782:	4801      	ldr	r0, [pc, #4]	; (c788 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c784:	7001      	strb	r1, [r0, #0]
    c786:	4770      	bx	lr
    c788:	2000036f 	.word	0x2000036f

0000c78c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c78c:	4802      	ldr	r0, [pc, #8]	; (c798 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c78e:	6800      	ldr	r0, [r0, #0]
    c790:	f000 0003 	and.w	r0, r0, #3
    c794:	4770      	bx	lr
    c796:	0000      	.short	0x0000
    c798:	4000041c 	.word	0x4000041c
    c79c:	b510      	push	{r4, lr}
    c79e:	b131      	cbz	r1, c7ae <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c7a0:	2901      	cmp	r1, #1
    c7a2:	d007      	beq.n	c7b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c7a4:	f240 3102 	movw	r1, #770	; 0x302
    c7a8:	a005      	add	r0, pc, #20	; (adr r0, c7c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c7aa:	f000 f821 	bl	c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c7ae:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c7b2:	e001      	b.n	c7b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c7b4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c7b8:	f000 0001 	and.w	r0, r0, #1
    c7bc:	bd10      	pop	{r4, pc}
    c7be:	0000      	.short	0x0000
    c7c0:	5f66726e 	.word	0x5f66726e
    c7c4:	636f6c63 	.word	0x636f6c63
    c7c8:	00682e6b 	.word	0x00682e6b
    c7cc:	f3bf 8f4f 	dsb	sy
    c7d0:	4805      	ldr	r0, [pc, #20]	; (c7e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c7d2:	6801      	ldr	r1, [r0, #0]
    c7d4:	4a05      	ldr	r2, [pc, #20]	; (c7ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c7d6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c7da:	4311      	orrs	r1, r2
    c7dc:	6001      	str	r1, [r0, #0]
    c7de:	f3bf 8f4f 	dsb	sy
    c7e2:	bf00      	nop
    c7e4:	e7fd      	b.n	c7e2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c7e6:	0000      	.short	0x0000
    c7e8:	e000ed0c 	.word	0xe000ed0c
    c7ec:	05fa0004 	.word	0x05fa0004

0000c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c7f0:	b672      	cpsid	i
    c7f2:	4a03      	ldr	r2, [pc, #12]	; (c800 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c7f4:	6852      	ldr	r2, [r2, #4]
    c7f6:	b102      	cbz	r2, c7fa <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c7f8:	4790      	blx	r2
    c7fa:	f7ff ffe7 	bl	c7cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c7fe:	0000      	.short	0x0000
    c800:	20000310 	.word	0x20000310
    c804:	4806      	ldr	r0, [pc, #24]	; (c820 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c806:	b510      	push	{r4, lr}
    c808:	2100      	movs	r1, #0
    c80a:	6001      	str	r1, [r0, #0]
    c80c:	2101      	movs	r1, #1
    c80e:	6001      	str	r1, [r0, #0]
    c810:	4608      	mov	r0, r1
    c812:	f004 fa78 	bl	10d06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c81a:	2001      	movs	r0, #1
    c81c:	f004 ba66 	b.w	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c820:	40001ffc 	.word	0x40001ffc
    c824:	4807      	ldr	r0, [pc, #28]	; (c844 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c826:	b510      	push	{r4, lr}
    c828:	2101      	movs	r1, #1
    c82a:	6041      	str	r1, [r0, #4]
    c82c:	1e89      	subs	r1, r1, #2
    c82e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c832:	200c      	movs	r0, #12
    c834:	f004 fa67 	bl	10d06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c83c:	200c      	movs	r0, #12
    c83e:	f004 ba55 	b.w	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c842:	0000      	.short	0x0000
    c844:	4000c000 	.word	0x4000c000

0000c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c848:	b50e      	push	{r1, r2, r3, lr}
    c84a:	b672      	cpsid	i
    c84c:	4a0f      	ldr	r2, [pc, #60]	; (c88c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c84e:	6855      	ldr	r5, [r2, #4]
    c850:	b1d5      	cbz	r5, c888 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c852:	2200      	movs	r2, #0
    c854:	4603      	mov	r3, r0
    c856:	466e      	mov	r6, sp
    c858:	240a      	movs	r4, #10
    c85a:	e003      	b.n	c864 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c85c:	fbb0 f0f4 	udiv	r0, r0, r4
    c860:	1c52      	adds	r2, r2, #1
    c862:	b2d2      	uxtb	r2, r2
    c864:	2800      	cmp	r0, #0
    c866:	d1f9      	bne.n	c85c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c868:	54b0      	strb	r0, [r6, r2]
    c86a:	e009      	b.n	c880 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c86c:	fbb3 f0f4 	udiv	r0, r3, r4
    c870:	fb04 3010 	mls	r0, r4, r0, r3
    c874:	fbb3 f3f4 	udiv	r3, r3, r4
    c878:	1e52      	subs	r2, r2, #1
    c87a:	b2d2      	uxtb	r2, r2
    c87c:	3030      	adds	r0, #48	; 0x30
    c87e:	54b0      	strb	r0, [r6, r2]
    c880:	2a00      	cmp	r2, #0
    c882:	d1f3      	bne.n	c86c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c884:	4630      	mov	r0, r6
    c886:	47a8      	blx	r5
    c888:	f7ff ffa0 	bl	c7cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c88c:	20000310 	.word	0x20000310

0000c890 <mpsl_init>:
    c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c894:	4c18      	ldr	r4, [pc, #96]	; (c8f8 <mpsl_init+0x68>)
    c896:	4606      	mov	r6, r0
    c898:	4617      	mov	r7, r2
    c89a:	7860      	ldrb	r0, [r4, #1]
    c89c:	460d      	mov	r5, r1
    c89e:	b118      	cbz	r0, c8a8 <mpsl_init+0x18>
    c8a0:	f04f 30ff 	mov.w	r0, #4294967295
    c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8a8:	f7fc fa48 	bl	8d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c8ac:	b906      	cbnz	r6, c8b0 <mpsl_init+0x20>
    c8ae:	4e13      	ldr	r6, [pc, #76]	; (c8fc <mpsl_init+0x6c>)
    c8b0:	6067      	str	r7, [r4, #4]
    c8b2:	7025      	strb	r5, [r4, #0]
    c8b4:	f7ff ffa6 	bl	c804 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c8b8:	f7ff ffb4 	bl	c824 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c8bc:	4630      	mov	r0, r6
    c8be:	f7ff fe83 	bl	c5c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c8c2:	0006      	movs	r6, r0
    c8c4:	d1ee      	bne.n	c8a4 <mpsl_init+0x14>
    c8c6:	f7fe fe7d 	bl	b5c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c8ca:	f7ff fedd 	bl	c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c8ce:	f004 f90a 	bl	10ae6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c8d2:	4628      	mov	r0, r5
    c8d4:	f004 fa0a 	bl	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c8d8:	2001      	movs	r0, #1
    c8da:	2d00      	cmp	r5, #0
    c8dc:	db09      	blt.n	c8f2 <mpsl_init+0x62>
    c8de:	f005 011f 	and.w	r1, r5, #31
    c8e2:	fa00 f101 	lsl.w	r1, r0, r1
    c8e6:	096a      	lsrs	r2, r5, #5
    c8e8:	0092      	lsls	r2, r2, #2
    c8ea:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c8ee:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c8f2:	7060      	strb	r0, [r4, #1]
    c8f4:	4630      	mov	r0, r6
    c8f6:	e7d5      	b.n	c8a4 <mpsl_init+0x14>
    c8f8:	20000310 	.word	0x20000310
    c8fc:	00010d28 	.word	0x00010d28

0000c900 <mpsl_is_initialized>:
    c900:	4801      	ldr	r0, [pc, #4]	; (c908 <mpsl_is_initialized+0x8>)
    c902:	7840      	ldrb	r0, [r0, #1]
    c904:	4770      	bx	lr
    c906:	0000      	.short	0x0000
    c908:	20000310 	.word	0x20000310

0000c90c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c90c:	4807      	ldr	r0, [pc, #28]	; (c92c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c90e:	f990 0000 	ldrsb.w	r0, [r0]
    c912:	2800      	cmp	r0, #0
    c914:	db09      	blt.n	c92a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c916:	f000 021f 	and.w	r2, r0, #31
    c91a:	2101      	movs	r1, #1
    c91c:	4091      	lsls	r1, r2
    c91e:	0940      	lsrs	r0, r0, #5
    c920:	0080      	lsls	r0, r0, #2
    c922:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c926:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c92a:	4770      	bx	lr
    c92c:	20000310 	.word	0x20000310

0000c930 <mpsl_temperature_get>:
    c930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c934:	2601      	movs	r6, #1
    c936:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c93a:	0331      	lsls	r1, r6, #12
    c93c:	f04f 0800 	mov.w	r8, #0
    c940:	4640      	mov	r0, r8
    c942:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c946:	f3bf 8f4f 	dsb	sy
    c94a:	f3bf 8f6f 	isb	sy
    c94e:	4c16      	ldr	r4, [pc, #88]	; (c9a8 <mpsl_temperature_get+0x78>)
    c950:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c954:	200c      	movs	r0, #12
    c956:	f004 f9f5 	bl	10d44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c95a:	4d14      	ldr	r5, [pc, #80]	; (c9ac <mpsl_temperature_get+0x7c>)
    c95c:	6828      	ldr	r0, [r5, #0]
    c95e:	43c0      	mvns	r0, r0
    c960:	f340 1700 	sbfx	r7, r0, #4, #1
    c964:	6828      	ldr	r0, [r5, #0]
    c966:	f040 0010 	orr.w	r0, r0, #16
    c96a:	6028      	str	r0, [r5, #0]
    c96c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c970:	6026      	str	r6, [r4, #0]
    c972:	1c7f      	adds	r7, r7, #1
    c974:	e002      	b.n	c97c <mpsl_temperature_get+0x4c>
    c976:	bf00      	nop
    c978:	f004 fa88 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c97c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c980:	2800      	cmp	r0, #0
    c982:	d0f9      	beq.n	c978 <mpsl_temperature_get+0x48>
    c984:	b91f      	cbnz	r7, c98e <mpsl_temperature_get+0x5e>
    c986:	6828      	ldr	r0, [r5, #0]
    c988:	f020 0010 	bic.w	r0, r0, #16
    c98c:	6028      	str	r0, [r5, #0]
    c98e:	4808      	ldr	r0, [pc, #32]	; (c9b0 <mpsl_temperature_get+0x80>)
    c990:	6805      	ldr	r5, [r0, #0]
    c992:	6066      	str	r6, [r4, #4]
    c994:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c998:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c99c:	200c      	movs	r0, #12
    c99e:	f004 f9d1 	bl	10d44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c9a2:	4628      	mov	r0, r5
    c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9a8:	4000c000 	.word	0x4000c000
    c9ac:	e000ed10 	.word	0xe000ed10
    c9b0:	4000c508 	.word	0x4000c508

0000c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c9b4:	b510      	push	{r4, lr}
    c9b6:	4602      	mov	r2, r0
    c9b8:	2005      	movs	r0, #5
    c9ba:	490c      	ldr	r1, [pc, #48]	; (c9ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c9bc:	e004      	b.n	c9c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c9be:	bf00      	nop
    c9c0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c9c4:	791b      	ldrb	r3, [r3, #4]
    c9c6:	b133      	cbz	r3, c9d6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c9c8:	1e40      	subs	r0, r0, #1
    c9ca:	b2c0      	uxtb	r0, r0
    c9cc:	d2f8      	bcs.n	c9c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c9ce:	2148      	movs	r1, #72	; 0x48
    c9d0:	2069      	movs	r0, #105	; 0x69
    c9d2:	f7ff ff39 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c9d6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c9da:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c9de:	2200      	movs	r2, #0
    c9e0:	714a      	strb	r2, [r1, #5]
    c9e2:	718a      	strb	r2, [r1, #6]
    c9e4:	2201      	movs	r2, #1
    c9e6:	710a      	strb	r2, [r1, #4]
    c9e8:	bd10      	pop	{r4, pc}
    c9ea:	0000      	.short	0x0000
    c9ec:	200015ac 	.word	0x200015ac

0000c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c9f0:	b510      	push	{r4, lr}
    c9f2:	2805      	cmp	r0, #5
    c9f4:	d301      	bcc.n	c9fa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c9f6:	2158      	movs	r1, #88	; 0x58
    c9f8:	e006      	b.n	ca08 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c9fa:	490a      	ldr	r1, [pc, #40]	; (ca24 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c9fc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    ca00:	7901      	ldrb	r1, [r0, #4]
    ca02:	2901      	cmp	r1, #1
    ca04:	d003      	beq.n	ca0e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    ca06:	2159      	movs	r1, #89	; 0x59
    ca08:	2069      	movs	r0, #105	; 0x69
    ca0a:	f7ff ff1d 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca0e:	7941      	ldrb	r1, [r0, #5]
    ca10:	7982      	ldrb	r2, [r0, #6]
    ca12:	1c49      	adds	r1, r1, #1
    ca14:	b2c9      	uxtb	r1, r1
    ca16:	428a      	cmp	r2, r1
    ca18:	d000      	beq.n	ca1c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    ca1a:	7141      	strb	r1, [r0, #5]
    ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca20:	f7ff bf74 	b.w	c90c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    ca24:	200015ac 	.word	0x200015ac

0000ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    ca28:	b510      	push	{r4, lr}
    ca2a:	2805      	cmp	r0, #5
    ca2c:	d303      	bcc.n	ca36 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    ca2e:	214f      	movs	r1, #79	; 0x4f
    ca30:	2069      	movs	r0, #105	; 0x69
    ca32:	f7ff ff09 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca36:	4a03      	ldr	r2, [pc, #12]	; (ca44 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    ca38:	2100      	movs	r1, #0
    ca3a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    ca3e:	7101      	strb	r1, [r0, #4]
    ca40:	bd10      	pop	{r4, pc}
    ca42:	0000      	.short	0x0000
    ca44:	200015ac 	.word	0x200015ac

0000ca48 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    ca48:	b570      	push	{r4, r5, r6, lr}
    ca4a:	2505      	movs	r5, #5
    ca4c:	4e0e      	ldr	r6, [pc, #56]	; (ca88 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    ca4e:	4c0f      	ldr	r4, [pc, #60]	; (ca8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    ca50:	e016      	b.n	ca80 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    ca52:	7821      	ldrb	r1, [r4, #0]
    ca54:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    ca58:	7902      	ldrb	r2, [r0, #4]
    ca5a:	2a01      	cmp	r2, #1
    ca5c:	d108      	bne.n	ca70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    ca5e:	7942      	ldrb	r2, [r0, #5]
    ca60:	7983      	ldrb	r3, [r0, #6]
    ca62:	429a      	cmp	r2, r3
    ca64:	d004      	beq.n	ca70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    ca66:	7942      	ldrb	r2, [r0, #5]
    ca68:	7182      	strb	r2, [r0, #6]
    ca6a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    ca6e:	4780      	blx	r0
    ca70:	7820      	ldrb	r0, [r4, #0]
    ca72:	1c40      	adds	r0, r0, #1
    ca74:	b2c0      	uxtb	r0, r0
    ca76:	7020      	strb	r0, [r4, #0]
    ca78:	2805      	cmp	r0, #5
    ca7a:	d301      	bcc.n	ca80 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    ca7c:	2000      	movs	r0, #0
    ca7e:	7020      	strb	r0, [r4, #0]
    ca80:	1e6d      	subs	r5, r5, #1
    ca82:	b2ed      	uxtb	r5, r5
    ca84:	d2e5      	bcs.n	ca52 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    ca86:	bd70      	pop	{r4, r5, r6, pc}
    ca88:	200015ac 	.word	0x200015ac
    ca8c:	20000370 	.word	0x20000370

0000ca90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    ca90:	b500      	push	{lr}
    ca92:	f004 f986 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ca96:	b940      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    ca98:	f004 f98d 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ca9c:	b928      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    ca9e:	f004 f9a1 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    caa2:	b910      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    caa4:	f004 f9b2 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    caa8:	b108      	cbz	r0, caae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    caaa:	4802      	ldr	r0, [pc, #8]	; (cab4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    caac:	bd00      	pop	{pc}
    caae:	4802      	ldr	r0, [pc, #8]	; (cab8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    cab0:	bd00      	pop	{pc}
    cab2:	0000      	.short	0x0000
    cab4:	4000050c 	.word	0x4000050c
    cab8:	4001e700 	.word	0x4001e700
    cabc:	b510      	push	{r4, lr}
    cabe:	f004 f9a5 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cac2:	b330      	cbz	r0, cb12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    cac4:	f3ef 8010 	mrs	r0, PRIMASK
    cac8:	b1c8      	cbz	r0, cafe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    caca:	2100      	movs	r1, #0
    cacc:	b672      	cpsid	i
    cace:	4812      	ldr	r0, [pc, #72]	; (cb18 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    cad0:	6802      	ldr	r2, [r0, #0]
    cad2:	6803      	ldr	r3, [r0, #0]
    cad4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    cad8:	f043 0310 	orr.w	r3, r3, #16
    cadc:	6003      	str	r3, [r0, #0]
    cade:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cae2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    cae6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    caea:	431c      	orrs	r4, r3
    caec:	d000      	beq.n	caf0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    caee:	bf40      	sev
    caf0:	bf20      	wfe
    caf2:	bf00      	nop
    caf4:	bf00      	nop
    caf6:	bf00      	nop
    caf8:	bf00      	nop
    cafa:	b112      	cbz	r2, cb02 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    cafc:	e005      	b.n	cb0a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    cafe:	2101      	movs	r1, #1
    cb00:	e7e4      	b.n	cacc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    cb02:	6802      	ldr	r2, [r0, #0]
    cb04:	f022 0210 	bic.w	r2, r2, #16
    cb08:	6002      	str	r2, [r0, #0]
    cb0a:	2900      	cmp	r1, #0
    cb0c:	d000      	beq.n	cb10 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    cb0e:	b662      	cpsie	i
    cb10:	bd10      	pop	{r4, pc}
    cb12:	bf20      	wfe
    cb14:	bd10      	pop	{r4, pc}
    cb16:	0000      	.short	0x0000
    cb18:	e000ed10 	.word	0xe000ed10

0000cb1c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    cb1c:	4901      	ldr	r1, [pc, #4]	; (cb24 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    cb1e:	2001      	movs	r0, #1
    cb20:	7088      	strb	r0, [r1, #2]
    cb22:	4770      	bx	lr
    cb24:	20000318 	.word	0x20000318

0000cb28 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    cb28:	00011113 0001114b 00011135 00011123     ....K...5...#...
    cb38:	0001112f 0001111d 00011111 0001110f     /...............
    cb48:	00011147 0001113b 00011129 00011117     G...;...).......
    cb58:	00011109 00011101 00011105 000110fb     ................

0000cb68 <mpsl_fem_disable>:
    cb68:	4801      	ldr	r0, [pc, #4]	; (cb70 <mpsl_fem_disable+0x8>)
    cb6a:	6800      	ldr	r0, [r0, #0]
    cb6c:	6800      	ldr	r0, [r0, #0]
    cb6e:	4700      	bx	r0
    cb70:	2000032c 	.word	0x2000032c

0000cb74 <mpsl_fem_lna_configuration_clear>:
    cb74:	4801      	ldr	r0, [pc, #4]	; (cb7c <mpsl_fem_lna_configuration_clear+0x8>)
    cb76:	6800      	ldr	r0, [r0, #0]
    cb78:	6940      	ldr	r0, [r0, #20]
    cb7a:	4700      	bx	r0
    cb7c:	2000032c 	.word	0x2000032c

0000cb80 <mpsl_fem_lna_configuration_set>:
    cb80:	4a01      	ldr	r2, [pc, #4]	; (cb88 <mpsl_fem_lna_configuration_set+0x8>)
    cb82:	6812      	ldr	r2, [r2, #0]
    cb84:	68d2      	ldr	r2, [r2, #12]
    cb86:	4710      	bx	r2
    cb88:	2000032c 	.word	0x2000032c

0000cb8c <mpsl_fem_lna_is_configured>:
    cb8c:	4901      	ldr	r1, [pc, #4]	; (cb94 <mpsl_fem_lna_is_configured+0x8>)
    cb8e:	6809      	ldr	r1, [r1, #0]
    cb90:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    cb92:	4708      	bx	r1
    cb94:	2000032c 	.word	0x2000032c

0000cb98 <mpsl_fem_pa_configuration_clear>:
    cb98:	4801      	ldr	r0, [pc, #4]	; (cba0 <mpsl_fem_pa_configuration_clear+0x8>)
    cb9a:	6800      	ldr	r0, [r0, #0]
    cb9c:	6900      	ldr	r0, [r0, #16]
    cb9e:	4700      	bx	r0
    cba0:	2000032c 	.word	0x2000032c

0000cba4 <mpsl_fem_pa_configuration_set>:
    cba4:	4a01      	ldr	r2, [pc, #4]	; (cbac <mpsl_fem_pa_configuration_set+0x8>)
    cba6:	6812      	ldr	r2, [r2, #0]
    cba8:	6892      	ldr	r2, [r2, #8]
    cbaa:	4710      	bx	r2
    cbac:	2000032c 	.word	0x2000032c

0000cbb0 <mpsl_fem_pa_gain_set>:
    cbb0:	4901      	ldr	r1, [pc, #4]	; (cbb8 <mpsl_fem_pa_gain_set+0x8>)
    cbb2:	6809      	ldr	r1, [r1, #0]
    cbb4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    cbb6:	4708      	bx	r1
    cbb8:	2000032c 	.word	0x2000032c

0000cbbc <mpsl_fem_pa_is_configured>:
    cbbc:	4901      	ldr	r1, [pc, #4]	; (cbc4 <mpsl_fem_pa_is_configured+0x8>)
    cbbe:	6809      	ldr	r1, [r1, #0]
    cbc0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    cbc2:	4708      	bx	r1
    cbc4:	2000032c 	.word	0x2000032c

0000cbc8 <mpsl_fem_tx_power_split>:
    cbc8:	b430      	push	{r4, r5}
    cbca:	4c03      	ldr	r4, [pc, #12]	; (cbd8 <mpsl_fem_tx_power_split+0x10>)
    cbcc:	6824      	ldr	r4, [r4, #0]
    cbce:	6864      	ldr	r4, [r4, #4]
    cbd0:	46a4      	mov	ip, r4
    cbd2:	bc30      	pop	{r4, r5}
    cbd4:	4760      	bx	ip
    cbd6:	0000      	.short	0x0000
    cbd8:	2000032c 	.word	0x2000032c

0000cbdc <mpsl_fem_device_config_254_apply_get>:
    cbdc:	4801      	ldr	r0, [pc, #4]	; (cbe4 <mpsl_fem_device_config_254_apply_get+0x8>)
    cbde:	7800      	ldrb	r0, [r0, #0]
    cbe0:	4770      	bx	lr
    cbe2:	0000      	.short	0x0000
    cbe4:	20000371 	.word	0x20000371

0000cbe8 <__udivmoddi4>:
    cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbec:	4686      	mov	lr, r0
    cbee:	468c      	mov	ip, r1
    cbf0:	4608      	mov	r0, r1
    cbf2:	9e08      	ldr	r6, [sp, #32]
    cbf4:	4615      	mov	r5, r2
    cbf6:	4674      	mov	r4, lr
    cbf8:	4619      	mov	r1, r3
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	f040 80c2 	bne.w	cd84 <__udivmoddi4+0x19c>
    cc00:	4285      	cmp	r5, r0
    cc02:	fab2 f282 	clz	r2, r2
    cc06:	d945      	bls.n	cc94 <__udivmoddi4+0xac>
    cc08:	b14a      	cbz	r2, cc1e <__udivmoddi4+0x36>
    cc0a:	f1c2 0320 	rsb	r3, r2, #32
    cc0e:	fa00 fc02 	lsl.w	ip, r0, r2
    cc12:	fa2e f303 	lsr.w	r3, lr, r3
    cc16:	4095      	lsls	r5, r2
    cc18:	ea43 0c0c 	orr.w	ip, r3, ip
    cc1c:	4094      	lsls	r4, r2
    cc1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc22:	b2a8      	uxth	r0, r5
    cc24:	fbbc f8fe 	udiv	r8, ip, lr
    cc28:	0c23      	lsrs	r3, r4, #16
    cc2a:	fb0e cc18 	mls	ip, lr, r8, ip
    cc2e:	fb08 f900 	mul.w	r9, r8, r0
    cc32:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cc36:	4599      	cmp	r9, r3
    cc38:	d928      	bls.n	cc8c <__udivmoddi4+0xa4>
    cc3a:	18eb      	adds	r3, r5, r3
    cc3c:	f108 37ff 	add.w	r7, r8, #4294967295
    cc40:	d204      	bcs.n	cc4c <__udivmoddi4+0x64>
    cc42:	4599      	cmp	r9, r3
    cc44:	d902      	bls.n	cc4c <__udivmoddi4+0x64>
    cc46:	f1a8 0702 	sub.w	r7, r8, #2
    cc4a:	442b      	add	r3, r5
    cc4c:	eba3 0309 	sub.w	r3, r3, r9
    cc50:	b2a4      	uxth	r4, r4
    cc52:	fbb3 fcfe 	udiv	ip, r3, lr
    cc56:	fb0e 331c 	mls	r3, lr, ip, r3
    cc5a:	fb0c f000 	mul.w	r0, ip, r0
    cc5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc62:	42a0      	cmp	r0, r4
    cc64:	d914      	bls.n	cc90 <__udivmoddi4+0xa8>
    cc66:	192c      	adds	r4, r5, r4
    cc68:	f10c 33ff 	add.w	r3, ip, #4294967295
    cc6c:	d204      	bcs.n	cc78 <__udivmoddi4+0x90>
    cc6e:	42a0      	cmp	r0, r4
    cc70:	d902      	bls.n	cc78 <__udivmoddi4+0x90>
    cc72:	f1ac 0302 	sub.w	r3, ip, #2
    cc76:	442c      	add	r4, r5
    cc78:	1a24      	subs	r4, r4, r0
    cc7a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    cc7e:	b11e      	cbz	r6, cc88 <__udivmoddi4+0xa0>
    cc80:	40d4      	lsrs	r4, r2
    cc82:	2300      	movs	r3, #0
    cc84:	6034      	str	r4, [r6, #0]
    cc86:	6073      	str	r3, [r6, #4]
    cc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc8c:	4647      	mov	r7, r8
    cc8e:	e7dd      	b.n	cc4c <__udivmoddi4+0x64>
    cc90:	4663      	mov	r3, ip
    cc92:	e7f1      	b.n	cc78 <__udivmoddi4+0x90>
    cc94:	bb92      	cbnz	r2, ccfc <__udivmoddi4+0x114>
    cc96:	1b43      	subs	r3, r0, r5
    cc98:	2101      	movs	r1, #1
    cc9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc9e:	b2af      	uxth	r7, r5
    cca0:	fbb3 fcfe 	udiv	ip, r3, lr
    cca4:	0c20      	lsrs	r0, r4, #16
    cca6:	fb0e 331c 	mls	r3, lr, ip, r3
    ccaa:	fb0c f807 	mul.w	r8, ip, r7
    ccae:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    ccb2:	4598      	cmp	r8, r3
    ccb4:	d962      	bls.n	cd7c <__udivmoddi4+0x194>
    ccb6:	18eb      	adds	r3, r5, r3
    ccb8:	f10c 30ff 	add.w	r0, ip, #4294967295
    ccbc:	d204      	bcs.n	ccc8 <__udivmoddi4+0xe0>
    ccbe:	4598      	cmp	r8, r3
    ccc0:	d902      	bls.n	ccc8 <__udivmoddi4+0xe0>
    ccc2:	f1ac 0002 	sub.w	r0, ip, #2
    ccc6:	442b      	add	r3, r5
    ccc8:	eba3 0308 	sub.w	r3, r3, r8
    cccc:	b2a4      	uxth	r4, r4
    ccce:	fbb3 fcfe 	udiv	ip, r3, lr
    ccd2:	fb0e 331c 	mls	r3, lr, ip, r3
    ccd6:	fb0c f707 	mul.w	r7, ip, r7
    ccda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ccde:	42a7      	cmp	r7, r4
    cce0:	d94e      	bls.n	cd80 <__udivmoddi4+0x198>
    cce2:	192c      	adds	r4, r5, r4
    cce4:	f10c 33ff 	add.w	r3, ip, #4294967295
    cce8:	d204      	bcs.n	ccf4 <__udivmoddi4+0x10c>
    ccea:	42a7      	cmp	r7, r4
    ccec:	d902      	bls.n	ccf4 <__udivmoddi4+0x10c>
    ccee:	f1ac 0302 	sub.w	r3, ip, #2
    ccf2:	442c      	add	r4, r5
    ccf4:	1be4      	subs	r4, r4, r7
    ccf6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ccfa:	e7c0      	b.n	cc7e <__udivmoddi4+0x96>
    ccfc:	f1c2 0320 	rsb	r3, r2, #32
    cd00:	fa20 f103 	lsr.w	r1, r0, r3
    cd04:	4095      	lsls	r5, r2
    cd06:	4090      	lsls	r0, r2
    cd08:	fa2e f303 	lsr.w	r3, lr, r3
    cd0c:	4303      	orrs	r3, r0
    cd0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cd12:	b2af      	uxth	r7, r5
    cd14:	fbb1 fcfe 	udiv	ip, r1, lr
    cd18:	fb0e 101c 	mls	r0, lr, ip, r1
    cd1c:	0c19      	lsrs	r1, r3, #16
    cd1e:	fb0c f807 	mul.w	r8, ip, r7
    cd22:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cd26:	4588      	cmp	r8, r1
    cd28:	fa04 f402 	lsl.w	r4, r4, r2
    cd2c:	d922      	bls.n	cd74 <__udivmoddi4+0x18c>
    cd2e:	1869      	adds	r1, r5, r1
    cd30:	f10c 30ff 	add.w	r0, ip, #4294967295
    cd34:	d204      	bcs.n	cd40 <__udivmoddi4+0x158>
    cd36:	4588      	cmp	r8, r1
    cd38:	d902      	bls.n	cd40 <__udivmoddi4+0x158>
    cd3a:	f1ac 0002 	sub.w	r0, ip, #2
    cd3e:	4429      	add	r1, r5
    cd40:	eba1 0108 	sub.w	r1, r1, r8
    cd44:	b29b      	uxth	r3, r3
    cd46:	fbb1 fcfe 	udiv	ip, r1, lr
    cd4a:	fb0e 111c 	mls	r1, lr, ip, r1
    cd4e:	fb0c f707 	mul.w	r7, ip, r7
    cd52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cd56:	429f      	cmp	r7, r3
    cd58:	d90e      	bls.n	cd78 <__udivmoddi4+0x190>
    cd5a:	18eb      	adds	r3, r5, r3
    cd5c:	f10c 31ff 	add.w	r1, ip, #4294967295
    cd60:	d204      	bcs.n	cd6c <__udivmoddi4+0x184>
    cd62:	429f      	cmp	r7, r3
    cd64:	d902      	bls.n	cd6c <__udivmoddi4+0x184>
    cd66:	f1ac 0102 	sub.w	r1, ip, #2
    cd6a:	442b      	add	r3, r5
    cd6c:	1bdb      	subs	r3, r3, r7
    cd6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cd72:	e792      	b.n	cc9a <__udivmoddi4+0xb2>
    cd74:	4660      	mov	r0, ip
    cd76:	e7e3      	b.n	cd40 <__udivmoddi4+0x158>
    cd78:	4661      	mov	r1, ip
    cd7a:	e7f7      	b.n	cd6c <__udivmoddi4+0x184>
    cd7c:	4660      	mov	r0, ip
    cd7e:	e7a3      	b.n	ccc8 <__udivmoddi4+0xe0>
    cd80:	4663      	mov	r3, ip
    cd82:	e7b7      	b.n	ccf4 <__udivmoddi4+0x10c>
    cd84:	4283      	cmp	r3, r0
    cd86:	d906      	bls.n	cd96 <__udivmoddi4+0x1ae>
    cd88:	b916      	cbnz	r6, cd90 <__udivmoddi4+0x1a8>
    cd8a:	2100      	movs	r1, #0
    cd8c:	4608      	mov	r0, r1
    cd8e:	e77b      	b.n	cc88 <__udivmoddi4+0xa0>
    cd90:	e9c6 e000 	strd	lr, r0, [r6]
    cd94:	e7f9      	b.n	cd8a <__udivmoddi4+0x1a2>
    cd96:	fab3 f783 	clz	r7, r3
    cd9a:	b98f      	cbnz	r7, cdc0 <__udivmoddi4+0x1d8>
    cd9c:	4283      	cmp	r3, r0
    cd9e:	d301      	bcc.n	cda4 <__udivmoddi4+0x1bc>
    cda0:	4572      	cmp	r2, lr
    cda2:	d808      	bhi.n	cdb6 <__udivmoddi4+0x1ce>
    cda4:	ebbe 0402 	subs.w	r4, lr, r2
    cda8:	eb60 0303 	sbc.w	r3, r0, r3
    cdac:	2001      	movs	r0, #1
    cdae:	469c      	mov	ip, r3
    cdb0:	b91e      	cbnz	r6, cdba <__udivmoddi4+0x1d2>
    cdb2:	2100      	movs	r1, #0
    cdb4:	e768      	b.n	cc88 <__udivmoddi4+0xa0>
    cdb6:	4638      	mov	r0, r7
    cdb8:	e7fa      	b.n	cdb0 <__udivmoddi4+0x1c8>
    cdba:	e9c6 4c00 	strd	r4, ip, [r6]
    cdbe:	e7f8      	b.n	cdb2 <__udivmoddi4+0x1ca>
    cdc0:	f1c7 0c20 	rsb	ip, r7, #32
    cdc4:	40bb      	lsls	r3, r7
    cdc6:	fa22 f40c 	lsr.w	r4, r2, ip
    cdca:	431c      	orrs	r4, r3
    cdcc:	fa2e f10c 	lsr.w	r1, lr, ip
    cdd0:	fa20 f30c 	lsr.w	r3, r0, ip
    cdd4:	40b8      	lsls	r0, r7
    cdd6:	4301      	orrs	r1, r0
    cdd8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cddc:	fa0e f507 	lsl.w	r5, lr, r7
    cde0:	fbb3 f8f9 	udiv	r8, r3, r9
    cde4:	fa1f fe84 	uxth.w	lr, r4
    cde8:	fb09 3018 	mls	r0, r9, r8, r3
    cdec:	0c0b      	lsrs	r3, r1, #16
    cdee:	fb08 fa0e 	mul.w	sl, r8, lr
    cdf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cdf6:	459a      	cmp	sl, r3
    cdf8:	fa02 f207 	lsl.w	r2, r2, r7
    cdfc:	d940      	bls.n	ce80 <__udivmoddi4+0x298>
    cdfe:	18e3      	adds	r3, r4, r3
    ce00:	f108 30ff 	add.w	r0, r8, #4294967295
    ce04:	d204      	bcs.n	ce10 <__udivmoddi4+0x228>
    ce06:	459a      	cmp	sl, r3
    ce08:	d902      	bls.n	ce10 <__udivmoddi4+0x228>
    ce0a:	f1a8 0002 	sub.w	r0, r8, #2
    ce0e:	4423      	add	r3, r4
    ce10:	eba3 030a 	sub.w	r3, r3, sl
    ce14:	b289      	uxth	r1, r1
    ce16:	fbb3 f8f9 	udiv	r8, r3, r9
    ce1a:	fb09 3318 	mls	r3, r9, r8, r3
    ce1e:	fb08 fe0e 	mul.w	lr, r8, lr
    ce22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ce26:	458e      	cmp	lr, r1
    ce28:	d92c      	bls.n	ce84 <__udivmoddi4+0x29c>
    ce2a:	1861      	adds	r1, r4, r1
    ce2c:	f108 33ff 	add.w	r3, r8, #4294967295
    ce30:	d204      	bcs.n	ce3c <__udivmoddi4+0x254>
    ce32:	458e      	cmp	lr, r1
    ce34:	d902      	bls.n	ce3c <__udivmoddi4+0x254>
    ce36:	f1a8 0302 	sub.w	r3, r8, #2
    ce3a:	4421      	add	r1, r4
    ce3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce40:	fba0 9802 	umull	r9, r8, r0, r2
    ce44:	eba1 010e 	sub.w	r1, r1, lr
    ce48:	4541      	cmp	r1, r8
    ce4a:	46ce      	mov	lr, r9
    ce4c:	4643      	mov	r3, r8
    ce4e:	d302      	bcc.n	ce56 <__udivmoddi4+0x26e>
    ce50:	d106      	bne.n	ce60 <__udivmoddi4+0x278>
    ce52:	454d      	cmp	r5, r9
    ce54:	d204      	bcs.n	ce60 <__udivmoddi4+0x278>
    ce56:	ebb9 0e02 	subs.w	lr, r9, r2
    ce5a:	eb68 0304 	sbc.w	r3, r8, r4
    ce5e:	3801      	subs	r0, #1
    ce60:	2e00      	cmp	r6, #0
    ce62:	d0a6      	beq.n	cdb2 <__udivmoddi4+0x1ca>
    ce64:	ebb5 020e 	subs.w	r2, r5, lr
    ce68:	eb61 0103 	sbc.w	r1, r1, r3
    ce6c:	fa01 fc0c 	lsl.w	ip, r1, ip
    ce70:	fa22 f307 	lsr.w	r3, r2, r7
    ce74:	ea4c 0303 	orr.w	r3, ip, r3
    ce78:	40f9      	lsrs	r1, r7
    ce7a:	e9c6 3100 	strd	r3, r1, [r6]
    ce7e:	e798      	b.n	cdb2 <__udivmoddi4+0x1ca>
    ce80:	4640      	mov	r0, r8
    ce82:	e7c5      	b.n	ce10 <__udivmoddi4+0x228>
    ce84:	4643      	mov	r3, r8
    ce86:	e7d9      	b.n	ce3c <__udivmoddi4+0x254>

0000ce88 <sdc_soc_ecb_block_encrypt>:
    ce88:	b530      	push	{r4, r5, lr}
    ce8a:	460d      	mov	r5, r1
    ce8c:	b08d      	sub	sp, #52	; 0x34
    ce8e:	4614      	mov	r4, r2
    ce90:	4601      	mov	r1, r0
    ce92:	2210      	movs	r2, #16
    ce94:	4668      	mov	r0, sp
    ce96:	f004 f856 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce9a:	2210      	movs	r2, #16
    ce9c:	4629      	mov	r1, r5
    ce9e:	a804      	add	r0, sp, #16
    cea0:	f004 f851 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cea4:	4668      	mov	r0, sp
    cea6:	f000 ff7f 	bl	dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ceaa:	b118      	cbz	r0, ceb4 <sdc_soc_ecb_block_encrypt+0x2c>
    ceac:	f06f 0015 	mvn.w	r0, #21
    ceb0:	b00d      	add	sp, #52	; 0x34
    ceb2:	bd30      	pop	{r4, r5, pc}
    ceb4:	2210      	movs	r2, #16
    ceb6:	4620      	mov	r0, r4
    ceb8:	a908      	add	r1, sp, #32
    ceba:	f004 f844 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cebe:	2000      	movs	r0, #0
    cec0:	e7f6      	b.n	ceb0 <sdc_soc_ecb_block_encrypt+0x28>

0000cec2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cec2:	b50e      	push	{r1, r2, r3, lr}
    cec4:	4601      	mov	r1, r0
    cec6:	4668      	mov	r0, sp
    cec8:	f000 f804 	bl	ced4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cecc:	4668      	mov	r0, sp
    cece:	f001 fbd0 	bl	e672 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ced2:	bd0e      	pop	{r1, r2, r3, pc}

0000ced4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ced4:	880a      	ldrh	r2, [r1, #0]
    ced6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ceda:	8082      	strh	r2, [r0, #4]
    cedc:	884a      	ldrh	r2, [r1, #2]
    cede:	80c2      	strh	r2, [r0, #6]
    cee0:	784a      	ldrb	r2, [r1, #1]
    cee2:	0993      	lsrs	r3, r2, #6
    cee4:	2200      	movs	r2, #0
    cee6:	7242      	strb	r2, [r0, #9]
    cee8:	784b      	ldrb	r3, [r1, #1]
    ceea:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ceee:	b11b      	cbz	r3, cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cef0:	2b01      	cmp	r3, #1
    cef2:	d005      	beq.n	cf00 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cef4:	2b02      	cmp	r3, #2
    cef6:	d005      	beq.n	cf04 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cef8:	7202      	strb	r2, [r0, #8]
    cefa:	1d09      	adds	r1, r1, #4
    cefc:	6001      	str	r1, [r0, #0]
    cefe:	4770      	bx	lr
    cf00:	2201      	movs	r2, #1
    cf02:	e7f9      	b.n	cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cf04:	2202      	movs	r2, #2
    cf06:	e7f7      	b.n	cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cf08 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cf08:	b510      	push	{r4, lr}
    cf0a:	460c      	mov	r4, r1
    cf0c:	7909      	ldrb	r1, [r1, #4]
    cf0e:	7001      	strb	r1, [r0, #0]
    cf10:	7841      	ldrb	r1, [r0, #1]
    cf12:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cf16:	7041      	strb	r1, [r0, #1]
    cf18:	88a2      	ldrh	r2, [r4, #4]
    cf1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cf1e:	4311      	orrs	r1, r2
    cf20:	7041      	strb	r1, [r0, #1]
    cf22:	79a2      	ldrb	r2, [r4, #6]
    cf24:	7082      	strb	r2, [r0, #2]
    cf26:	88e2      	ldrh	r2, [r4, #6]
    cf28:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cf2c:	0a12      	lsrs	r2, r2, #8
    cf2e:	70c2      	strb	r2, [r0, #3]
    cf30:	7041      	strb	r1, [r0, #1]
    cf32:	7a22      	ldrb	r2, [r4, #8]
    cf34:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cf38:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cf3c:	7041      	strb	r1, [r0, #1]
    cf3e:	7a62      	ldrb	r2, [r4, #9]
    cf40:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cf44:	7041      	strb	r1, [r0, #1]
    cf46:	6821      	ldr	r1, [r4, #0]
    cf48:	1d02      	adds	r2, r0, #4
    cf4a:	4291      	cmp	r1, r2
    cf4c:	d006      	beq.n	cf5c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cf4e:	88e2      	ldrh	r2, [r4, #6]
    cf50:	2afb      	cmp	r2, #251	; 0xfb
    cf52:	d300      	bcc.n	cf56 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cf54:	22fb      	movs	r2, #251	; 0xfb
    cf56:	1d00      	adds	r0, r0, #4
    cf58:	f003 fff5 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf5c:	79a0      	ldrb	r0, [r4, #6]
    cf5e:	1d00      	adds	r0, r0, #4
    cf60:	b2c0      	uxtb	r0, r0
    cf62:	bd10      	pop	{r4, pc}

0000cf64 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cf64:	b430      	push	{r4, r5}
    cf66:	790a      	ldrb	r2, [r1, #4]
    cf68:	7002      	strb	r2, [r0, #0]
    cf6a:	7842      	ldrb	r2, [r0, #1]
    cf6c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cf70:	7042      	strb	r2, [r0, #1]
    cf72:	888b      	ldrh	r3, [r1, #4]
    cf74:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cf78:	431a      	orrs	r2, r3
    cf7a:	7042      	strb	r2, [r0, #1]
    cf7c:	798b      	ldrb	r3, [r1, #6]
    cf7e:	7083      	strb	r3, [r0, #2]
    cf80:	78c3      	ldrb	r3, [r0, #3]
    cf82:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cf86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cf8a:	70c3      	strb	r3, [r0, #3]
    cf8c:	88cc      	ldrh	r4, [r1, #6]
    cf8e:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cf92:	4323      	orrs	r3, r4
    cf94:	70c3      	strb	r3, [r0, #3]
    cf96:	7042      	strb	r2, [r0, #1]
    cf98:	7a0c      	ldrb	r4, [r1, #8]
    cf9a:	f004 0403 	and.w	r4, r4, #3
    cf9e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cfa2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cfa6:	7042      	strb	r2, [r0, #1]
    cfa8:	7a4c      	ldrb	r4, [r1, #9]
    cfaa:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cfae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cfb2:	7042      	strb	r2, [r0, #1]
    cfb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cfb8:	70c2      	strb	r2, [r0, #3]
    cfba:	680b      	ldr	r3, [r1, #0]
    cfbc:	1d02      	adds	r2, r0, #4
    cfbe:	4293      	cmp	r3, r2
    cfc0:	d005      	beq.n	cfce <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cfc2:	88ca      	ldrh	r2, [r1, #6]
    cfc4:	bc30      	pop	{r4, r5}
    cfc6:	4619      	mov	r1, r3
    cfc8:	1d00      	adds	r0, r0, #4
    cfca:	f003 bfbc 	b.w	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfce:	bc30      	pop	{r4, r5}
    cfd0:	4770      	bx	lr

0000cfd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cfd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfd6:	4604      	mov	r4, r0
    cfd8:	f891 c000 	ldrb.w	ip, [r1]
    cfdc:	460d      	mov	r5, r1
    cfde:	2000      	movs	r0, #0
    cfe0:	270c      	movs	r7, #12
    cfe2:	263e      	movs	r6, #62	; 0x3e
    cfe4:	2312      	movs	r3, #18
    cfe6:	22ff      	movs	r2, #255	; 0xff
    cfe8:	f04f 0b10 	mov.w	fp, #16
    cfec:	f04f 0905 	mov.w	r9, #5
    cff0:	f104 010d 	add.w	r1, r4, #13
    cff4:	f04f 0e14 	mov.w	lr, #20
    cff8:	f04f 0a11 	mov.w	sl, #17
    cffc:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    d000:	d271      	bcs.n	d0e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d002:	e8df f00c 	tbb	[pc, ip]
    d006:	1270      	.short	0x1270
    d008:	f4312c29 	.word	0xf4312c29
    d00c:	a7968c70 	.word	0xa7968c70
    d010:	f5d8d5c1 	.word	0xf5d8d5c1
    d014:	70f0f1f2 	.word	0x70f0f1f2
    d018:	71705370 	.word	0x71705370
    d01c:	ecedeeef 	.word	0xecedeeef
    d020:	e8e9eaeb 	.word	0xe8e9eaeb
    d024:	70e5e6e7 	.word	0x70e5e6e7
    d028:	00e4      	.short	0x00e4
    d02a:	7027      	strb	r7, [r4, #0]
    d02c:	7928      	ldrb	r0, [r5, #4]
    d02e:	70a0      	strb	r0, [r4, #2]
    d030:	7968      	ldrb	r0, [r5, #5]
    d032:	70e0      	strb	r0, [r4, #3]
    d034:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d038:	0a00      	lsrs	r0, r0, #8
    d03a:	7120      	strb	r0, [r4, #4]
    d03c:	79e8      	ldrb	r0, [r5, #7]
    d03e:	7160      	strb	r0, [r4, #5]
    d040:	7a28      	ldrb	r0, [r5, #8]
    d042:	71a0      	strb	r0, [r4, #6]
    d044:	8928      	ldrh	r0, [r5, #8]
    d046:	0a00      	lsrs	r0, r0, #8
    d048:	71e0      	strb	r0, [r4, #7]
    d04a:	7aa8      	ldrb	r0, [r5, #10]
    d04c:	7220      	strb	r0, [r4, #8]
    d04e:	8968      	ldrh	r0, [r5, #10]
    d050:	0a00      	lsrs	r0, r0, #8
    d052:	7260      	strb	r0, [r4, #9]
    d054:	2008      	movs	r0, #8
    d056:	e137      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d058:	f884 b000 	strb.w	fp, [r4]
    d05c:	e001      	b.n	d062 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    d05e:	201a      	movs	r0, #26
    d060:	7020      	strb	r0, [r4, #0]
    d062:	7928      	ldrb	r0, [r5, #4]
    d064:	70a0      	strb	r0, [r4, #2]
    d066:	e136      	b.n	d2d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    d068:	7026      	strb	r6, [r4, #0]
    d06a:	2002      	movs	r0, #2
    d06c:	70a0      	strb	r0, [r4, #2]
    d06e:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    d072:	70e0      	strb	r0, [r4, #3]
    d074:	7aa8      	ldrb	r0, [r5, #10]
    d076:	7120      	strb	r0, [r4, #4]
    d078:	7868      	ldrb	r0, [r5, #1]
    d07a:	7160      	strb	r0, [r4, #5]
    d07c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    d080:	f8c4 0006 	str.w	r0, [r4, #6]
    d084:	88e8      	ldrh	r0, [r5, #6]
    d086:	8160      	strh	r0, [r4, #10]
    d088:	7a28      	ldrb	r0, [r5, #8]
    d08a:	7320      	strb	r0, [r4, #12]
    d08c:	7a2e      	ldrb	r6, [r5, #8]
    d08e:	2e1f      	cmp	r6, #31
    d090:	d300      	bcc.n	d094 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    d092:	261f      	movs	r6, #31
    d094:	4608      	mov	r0, r1
    d096:	4632      	mov	r2, r6
    d098:	f105 010b 	add.w	r1, r5, #11
    d09c:	f003 ff53 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0a0:	360d      	adds	r6, #13
    d0a2:	7a69      	ldrb	r1, [r5, #9]
    d0a4:	55a1      	strb	r1, [r4, r6]
    d0a6:	1e76      	subs	r6, r6, #1
    d0a8:	b2f0      	uxtb	r0, r6
    d0aa:	e10b      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d0ac:	7026      	strb	r6, [r4, #0]
    d0ae:	200b      	movs	r0, #11
    d0b0:	70a0      	strb	r0, [r4, #2]
    d0b2:	7928      	ldrb	r0, [r5, #4]
    d0b4:	70e0      	strb	r0, [r4, #3]
    d0b6:	7968      	ldrb	r0, [r5, #5]
    d0b8:	7120      	strb	r0, [r4, #4]
    d0ba:	79a8      	ldrb	r0, [r5, #6]
    d0bc:	7160      	strb	r0, [r4, #5]
    d0be:	f8d5 0007 	ldr.w	r0, [r5, #7]
    d0c2:	f8c4 0006 	str.w	r0, [r4, #6]
    d0c6:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    d0ca:	8160      	strh	r0, [r4, #10]
    d0cc:	7b68      	ldrb	r0, [r5, #13]
    d0ce:	7320      	strb	r0, [r4, #12]
    d0d0:	f8d5 000e 	ldr.w	r0, [r5, #14]
    d0d4:	f8c4 000d 	str.w	r0, [r4, #13]
    d0d8:	8a68      	ldrh	r0, [r5, #18]
    d0da:	f8a4 0011 	strh.w	r0, [r4, #17]
    d0de:	7d28      	ldrb	r0, [r5, #20]
    d0e0:	74e0      	strb	r0, [r4, #19]
    d0e2:	4618      	mov	r0, r3
    d0e4:	e0f0      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d0e6:	e0f1      	b.n	d2cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d0e8:	2029      	movs	r0, #41	; 0x29
    d0ea:	f7f3 fe31 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d0ee:	b148      	cbz	r0, d104 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    d0f0:	7026      	strb	r6, [r4, #0]
    d0f2:	2029      	movs	r0, #41	; 0x29
    d0f4:	70a0      	strb	r0, [r4, #2]
    d0f6:	2221      	movs	r2, #33	; 0x21
    d0f8:	1d29      	adds	r1, r5, #4
    d0fa:	1ce0      	adds	r0, r4, #3
    d0fc:	f003 ff23 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d100:	2022      	movs	r0, #34	; 0x22
    d102:	e0e1      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d104:	200a      	movs	r0, #10
    d106:	f7f3 fe23 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d10a:	2800      	cmp	r0, #0
    d10c:	4629      	mov	r1, r5
    d10e:	4620      	mov	r0, r4
    d110:	d002      	beq.n	d118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    d112:	f000 f9a0 	bl	d456 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    d116:	e0d5      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d118:	f000 f974 	bl	d404 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    d11c:	e0d2      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d11e:	7026      	strb	r6, [r4, #0]
    d120:	f884 e002 	strb.w	lr, [r4, #2]
    d124:	7928      	ldrb	r0, [r5, #4]
    d126:	70e0      	strb	r0, [r4, #3]
    d128:	88a8      	ldrh	r0, [r5, #4]
    d12a:	0a00      	lsrs	r0, r0, #8
    d12c:	7120      	strb	r0, [r4, #4]
    d12e:	79a8      	ldrb	r0, [r5, #6]
    d130:	e104      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d132:	223e      	movs	r2, #62	; 0x3e
    d134:	7022      	strb	r2, [r4, #0]
    d136:	2204      	movs	r2, #4
    d138:	70a2      	strb	r2, [r4, #2]
    d13a:	6868      	ldr	r0, [r5, #4]
    d13c:	f8c4 0003 	str.w	r0, [r4, #3]
    d140:	68a8      	ldr	r0, [r5, #8]
    d142:	f8c4 0007 	str.w	r0, [r4, #7]
    d146:	89a8      	ldrh	r0, [r5, #12]
    d148:	f8a4 000b 	strh.w	r0, [r4, #11]
    d14c:	7ba8      	ldrb	r0, [r5, #14]
    d14e:	7360      	strb	r0, [r4, #13]
    d150:	200c      	movs	r0, #12
    d152:	e0b9      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d154:	7026      	strb	r6, [r4, #0]
    d156:	2003      	movs	r0, #3
    d158:	70a0      	strb	r0, [r4, #2]
    d15a:	7928      	ldrb	r0, [r5, #4]
    d15c:	70e0      	strb	r0, [r4, #3]
    d15e:	79a8      	ldrb	r0, [r5, #6]
    d160:	7120      	strb	r0, [r4, #4]
    d162:	88e8      	ldrh	r0, [r5, #6]
    d164:	0a00      	lsrs	r0, r0, #8
    d166:	7160      	strb	r0, [r4, #5]
    d168:	7a28      	ldrb	r0, [r5, #8]
    d16a:	71a0      	strb	r0, [r4, #6]
    d16c:	8928      	ldrh	r0, [r5, #8]
    d16e:	0a00      	lsrs	r0, r0, #8
    d170:	71e0      	strb	r0, [r4, #7]
    d172:	7aa8      	ldrb	r0, [r5, #10]
    d174:	7220      	strb	r0, [r4, #8]
    d176:	8968      	ldrh	r0, [r5, #10]
    d178:	0a00      	lsrs	r0, r0, #8
    d17a:	7260      	strb	r0, [r4, #9]
    d17c:	7b28      	ldrb	r0, [r5, #12]
    d17e:	72a0      	strb	r0, [r4, #10]
    d180:	89a8      	ldrh	r0, [r5, #12]
    d182:	0a00      	lsrs	r0, r0, #8
    d184:	72e0      	strb	r0, [r4, #11]
    d186:	e116      	b.n	d3b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    d188:	7026      	strb	r6, [r4, #0]
    d18a:	f884 9002 	strb.w	r9, [r4, #2]
    d18e:	7928      	ldrb	r0, [r5, #4]
    d190:	70e0      	strb	r0, [r4, #3]
    d192:	88a8      	ldrh	r0, [r5, #4]
    d194:	0a00      	lsrs	r0, r0, #8
    d196:	7120      	strb	r0, [r4, #4]
    d198:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d19c:	f8c4 0005 	str.w	r0, [r4, #5]
    d1a0:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d1a4:	f8c4 0009 	str.w	r0, [r4, #9]
    d1a8:	89e8      	ldrh	r0, [r5, #14]
    d1aa:	f8a4 000d 	strh.w	r0, [r4, #13]
    d1ae:	e127      	b.n	d400 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    d1b0:	f884 a000 	strb.w	sl, [r4]
    d1b4:	e049      	b.n	d24a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    d1b6:	f884 9000 	strb.w	r9, [r4]
    d1ba:	7928      	ldrb	r0, [r5, #4]
    d1bc:	70a0      	strb	r0, [r4, #2]
    d1be:	7968      	ldrb	r0, [r5, #5]
    d1c0:	70e0      	strb	r0, [r4, #3]
    d1c2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d1c6:	0a00      	lsrs	r0, r0, #8
    d1c8:	7120      	strb	r0, [r4, #4]
    d1ca:	79e8      	ldrb	r0, [r5, #7]
    d1cc:	e0b6      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d1ce:	e102      	b.n	d3d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    d1d0:	e0d5      	b.n	d37e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d1d2:	e0b6      	b.n	d342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    d1d4:	e0e1      	b.n	d39a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    d1d6:	e0f0      	b.n	d3ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    d1d8:	e0a8      	b.n	d32c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d1da:	e090      	b.n	d2fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    d1dc:	e08c      	b.n	d2f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d1de:	e077      	b.n	d2d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    d1e0:	e07b      	b.n	d2da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d1e2:	e01e      	b.n	d222 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d1e4:	e01a      	b.n	d21c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    d1e6:	e02e      	b.n	d246 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    d1e8:	e028      	b.n	d23c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    d1ea:	e00c      	b.n	d206 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d1ec:	e000      	b.n	d1f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    d1ee:	e033      	b.n	d258 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    d1f0:	2008      	movs	r0, #8
    d1f2:	7020      	strb	r0, [r4, #0]
    d1f4:	7928      	ldrb	r0, [r5, #4]
    d1f6:	70a0      	strb	r0, [r4, #2]
    d1f8:	79a8      	ldrb	r0, [r5, #6]
    d1fa:	70e0      	strb	r0, [r4, #3]
    d1fc:	88e8      	ldrh	r0, [r5, #6]
    d1fe:	0a00      	lsrs	r0, r0, #8
    d200:	7120      	strb	r0, [r4, #4]
    d202:	7a28      	ldrb	r0, [r5, #8]
    d204:	e09a      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d206:	2030      	movs	r0, #48	; 0x30
    d208:	7020      	strb	r0, [r4, #0]
    d20a:	7928      	ldrb	r0, [r5, #4]
    d20c:	70a0      	strb	r0, [r4, #2]
    d20e:	79a8      	ldrb	r0, [r5, #6]
    d210:	70e0      	strb	r0, [r4, #3]
    d212:	88e8      	ldrh	r0, [r5, #6]
    d214:	0a00      	lsrs	r0, r0, #8
    d216:	7120      	strb	r0, [r4, #4]
    d218:	2003      	movs	r0, #3
    d21a:	e055      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d21c:	7026      	strb	r6, [r4, #0]
    d21e:	2007      	movs	r0, #7
    d220:	e091      	b.n	d346 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d222:	7026      	strb	r6, [r4, #0]
    d224:	70a7      	strb	r7, [r4, #2]
    d226:	7928      	ldrb	r0, [r5, #4]
    d228:	70e0      	strb	r0, [r4, #3]
    d22a:	79a8      	ldrb	r0, [r5, #6]
    d22c:	7120      	strb	r0, [r4, #4]
    d22e:	88e8      	ldrh	r0, [r5, #6]
    d230:	0a00      	lsrs	r0, r0, #8
    d232:	7160      	strb	r0, [r4, #5]
    d234:	7a28      	ldrb	r0, [r5, #8]
    d236:	71a0      	strb	r0, [r4, #6]
    d238:	7a68      	ldrb	r0, [r5, #9]
    d23a:	e05a      	b.n	d2f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    d23c:	1d29      	adds	r1, r5, #4
    d23e:	4620      	mov	r0, r4
    d240:	f7f3 fd46 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    d244:	e03e      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d246:	2057      	movs	r0, #87	; 0x57
    d248:	7020      	strb	r0, [r4, #0]
    d24a:	7928      	ldrb	r0, [r5, #4]
    d24c:	70a0      	strb	r0, [r4, #2]
    d24e:	88a8      	ldrh	r0, [r5, #4]
    d250:	0a00      	lsrs	r0, r0, #8
    d252:	70e0      	strb	r0, [r4, #3]
    d254:	2002      	movs	r0, #2
    d256:	e037      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d258:	7026      	strb	r6, [r4, #0]
    d25a:	220d      	movs	r2, #13
    d25c:	70a2      	strb	r2, [r4, #2]
    d25e:	792a      	ldrb	r2, [r5, #4]
    d260:	70e2      	strb	r2, [r4, #3]
    d262:	89ea      	ldrh	r2, [r5, #14]
    d264:	80a2      	strh	r2, [r4, #4]
    d266:	796a      	ldrb	r2, [r5, #5]
    d268:	71a2      	strb	r2, [r4, #6]
    d26a:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d26e:	f8c4 2007 	str.w	r2, [r4, #7]
    d272:	896a      	ldrh	r2, [r5, #10]
    d274:	f8a4 200b 	strh.w	r2, [r4, #11]
    d278:	7c2a      	ldrb	r2, [r5, #16]
    d27a:	4620      	mov	r0, r4
    d27c:	7362      	strb	r2, [r4, #13]
    d27e:	1d29      	adds	r1, r5, #4
    d280:	7c6a      	ldrb	r2, [r5, #17]
    d282:	7382      	strb	r2, [r0, #14]
    d284:	7b8a      	ldrb	r2, [r1, #14]
    d286:	73c2      	strb	r2, [r0, #15]
    d288:	7e8a      	ldrb	r2, [r1, #26]
    d28a:	7402      	strb	r2, [r0, #16]
    d28c:	7a4a      	ldrb	r2, [r1, #9]
    d28e:	7442      	strb	r2, [r0, #17]
    d290:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d294:	f8ad 2000 	strh.w	r2, [sp]
    d298:	8242      	strh	r2, [r0, #18]
    d29a:	7cca      	ldrb	r2, [r1, #19]
    d29c:	7502      	strb	r2, [r0, #20]
    d29e:	694a      	ldr	r2, [r1, #20]
    d2a0:	f8c0 2015 	str.w	r2, [r0, #21]
    d2a4:	8b0a      	ldrh	r2, [r1, #24]
    d2a6:	f8a0 2019 	strh.w	r2, [r0, #25]
    d2aa:	7a0a      	ldrb	r2, [r1, #8]
    d2ac:	76c2      	strb	r2, [r0, #27]
    d2ae:	7a0d      	ldrb	r5, [r1, #8]
    d2b0:	2de5      	cmp	r5, #229	; 0xe5
    d2b2:	d300      	bcc.n	d2b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    d2b4:	25e5      	movs	r5, #229	; 0xe5
    d2b6:	462a      	mov	r2, r5
    d2b8:	301c      	adds	r0, #28
    d2ba:	311c      	adds	r1, #28
    d2bc:	f003 fe43 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2c0:	351a      	adds	r5, #26
    d2c2:	b2e8      	uxtb	r0, r5
    d2c4:	2800      	cmp	r0, #0
    d2c6:	d001      	beq.n	d2cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d2c8:	7060      	strb	r0, [r4, #1]
    d2ca:	1c80      	adds	r0, r0, #2
    d2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2d0:	7026      	strb	r6, [r4, #0]
    d2d2:	f884 a002 	strb.w	sl, [r4, #2]
    d2d6:	2001      	movs	r0, #1
    d2d8:	e7f6      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d2da:	7026      	strb	r6, [r4, #0]
    d2dc:	70a3      	strb	r3, [r4, #2]
    d2de:	7928      	ldrb	r0, [r5, #4]
    d2e0:	70e0      	strb	r0, [r4, #3]
    d2e2:	7968      	ldrb	r0, [r5, #5]
    d2e4:	7120      	strb	r0, [r4, #4]
    d2e6:	79a8      	ldrb	r0, [r5, #6]
    d2e8:	7160      	strb	r0, [r4, #5]
    d2ea:	88e8      	ldrh	r0, [r5, #6]
    d2ec:	0a00      	lsrs	r0, r0, #8
    d2ee:	71a0      	strb	r0, [r4, #6]
    d2f0:	7a28      	ldrb	r0, [r5, #8]
    d2f2:	71e0      	strb	r0, [r4, #7]
    d2f4:	2006      	movs	r0, #6
    d2f6:	e7e7      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d2f8:	7026      	strb	r6, [r4, #0]
    d2fa:	2020      	movs	r0, #32
    d2fc:	e041      	b.n	d382 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    d2fe:	7026      	strb	r6, [r4, #0]
    d300:	2021      	movs	r0, #33	; 0x21
    d302:	70a0      	strb	r0, [r4, #2]
    d304:	7928      	ldrb	r0, [r5, #4]
    d306:	70e0      	strb	r0, [r4, #3]
    d308:	7968      	ldrb	r0, [r5, #5]
    d30a:	7120      	strb	r0, [r4, #4]
    d30c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d310:	0a00      	lsrs	r0, r0, #8
    d312:	7160      	strb	r0, [r4, #5]
    d314:	79e8      	ldrb	r0, [r5, #7]
    d316:	71a0      	strb	r0, [r4, #6]
    d318:	7a28      	ldrb	r0, [r5, #8]
    d31a:	71e0      	strb	r0, [r4, #7]
    d31c:	7a68      	ldrb	r0, [r5, #9]
    d31e:	7220      	strb	r0, [r4, #8]
    d320:	7aa8      	ldrb	r0, [r5, #10]
    d322:	7260      	strb	r0, [r4, #9]
    d324:	7ae8      	ldrb	r0, [r5, #11]
    d326:	72a0      	strb	r0, [r4, #10]
    d328:	2009      	movs	r0, #9
    d32a:	e7cd      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d32c:	7022      	strb	r2, [r4, #0]
    d32e:	20a1      	movs	r0, #161	; 0xa1
    d330:	70a0      	strb	r0, [r4, #2]
    d332:	7928      	ldrb	r0, [r5, #4]
    d334:	70e0      	strb	r0, [r4, #3]
    d336:	7968      	ldrb	r0, [r5, #5]
    d338:	7120      	strb	r0, [r4, #4]
    d33a:	2000      	movs	r0, #0
    d33c:	7160      	strb	r0, [r4, #5]
    d33e:	2004      	movs	r0, #4
    d340:	e7c2      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d342:	7022      	strb	r2, [r4, #0]
    d344:	20a2      	movs	r0, #162	; 0xa2
    d346:	70a0      	strb	r0, [r4, #2]
    d348:	7928      	ldrb	r0, [r5, #4]
    d34a:	70e0      	strb	r0, [r4, #3]
    d34c:	88a8      	ldrh	r0, [r5, #4]
    d34e:	0a00      	lsrs	r0, r0, #8
    d350:	7120      	strb	r0, [r4, #4]
    d352:	79a8      	ldrb	r0, [r5, #6]
    d354:	7160      	strb	r0, [r4, #5]
    d356:	88e8      	ldrh	r0, [r5, #6]
    d358:	0a00      	lsrs	r0, r0, #8
    d35a:	71a0      	strb	r0, [r4, #6]
    d35c:	7a28      	ldrb	r0, [r5, #8]
    d35e:	71e0      	strb	r0, [r4, #7]
    d360:	8928      	ldrh	r0, [r5, #8]
    d362:	0a00      	lsrs	r0, r0, #8
    d364:	7220      	strb	r0, [r4, #8]
    d366:	7aa8      	ldrb	r0, [r5, #10]
    d368:	7260      	strb	r0, [r4, #9]
    d36a:	8968      	ldrh	r0, [r5, #10]
    d36c:	0a00      	lsrs	r0, r0, #8
    d36e:	72a0      	strb	r0, [r4, #10]
    d370:	7b28      	ldrb	r0, [r5, #12]
    d372:	72e0      	strb	r0, [r4, #11]
    d374:	89a8      	ldrh	r0, [r5, #12]
    d376:	0a00      	lsrs	r0, r0, #8
    d378:	7320      	strb	r0, [r4, #12]
    d37a:	200b      	movs	r0, #11
    d37c:	e7a4      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d37e:	7022      	strb	r2, [r4, #0]
    d380:	20a3      	movs	r0, #163	; 0xa3
    d382:	70a0      	strb	r0, [r4, #2]
    d384:	7928      	ldrb	r0, [r5, #4]
    d386:	70e0      	strb	r0, [r4, #3]
    d388:	88a8      	ldrh	r0, [r5, #4]
    d38a:	0a00      	lsrs	r0, r0, #8
    d38c:	7120      	strb	r0, [r4, #4]
    d38e:	79a8      	ldrb	r0, [r5, #6]
    d390:	7160      	strb	r0, [r4, #5]
    d392:	79e8      	ldrb	r0, [r5, #7]
    d394:	71a0      	strb	r0, [r4, #6]
    d396:	2005      	movs	r0, #5
    d398:	e796      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d39a:	7026      	strb	r6, [r4, #0]
    d39c:	2013      	movs	r0, #19
    d39e:	70a0      	strb	r0, [r4, #2]
    d3a0:	7928      	ldrb	r0, [r5, #4]
    d3a2:	70e0      	strb	r0, [r4, #3]
    d3a4:	7968      	ldrb	r0, [r5, #5]
    d3a6:	7120      	strb	r0, [r4, #4]
    d3a8:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d3ac:	f8c4 0005 	str.w	r0, [r4, #5]
    d3b0:	8968      	ldrh	r0, [r5, #10]
    d3b2:	f8a4 0009 	strh.w	r0, [r4, #9]
    d3b6:	200a      	movs	r0, #10
    d3b8:	e786      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d3ba:	7022      	strb	r2, [r4, #0]
    d3bc:	20a4      	movs	r0, #164	; 0xa4
    d3be:	70a0      	strb	r0, [r4, #2]
    d3c0:	7928      	ldrb	r0, [r5, #4]
    d3c2:	70e0      	strb	r0, [r4, #3]
    d3c4:	88a8      	ldrh	r0, [r5, #4]
    d3c6:	0a00      	lsrs	r0, r0, #8
    d3c8:	7120      	strb	r0, [r4, #4]
    d3ca:	79a8      	ldrb	r0, [r5, #6]
    d3cc:	7160      	strb	r0, [r4, #5]
    d3ce:	79e8      	ldrb	r0, [r5, #7]
    d3d0:	71a0      	strb	r0, [r4, #6]
    d3d2:	2007      	movs	r0, #7
    d3d4:	e778      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d3d6:	7022      	strb	r2, [r4, #0]
    d3d8:	2080      	movs	r0, #128	; 0x80
    d3da:	70a0      	strb	r0, [r4, #2]
    d3dc:	88a9      	ldrh	r1, [r5, #4]
    d3de:	f8a4 1003 	strh.w	r1, [r4, #3]
    d3e2:	88e9      	ldrh	r1, [r5, #6]
    d3e4:	f8a4 1005 	strh.w	r1, [r4, #5]
    d3e8:	7a29      	ldrb	r1, [r5, #8]
    d3ea:	71e1      	strb	r1, [r4, #7]
    d3ec:	8969      	ldrh	r1, [r5, #10]
    d3ee:	8121      	strh	r1, [r4, #8]
    d3f0:	89a9      	ldrh	r1, [r5, #12]
    d3f2:	8161      	strh	r1, [r4, #10]
    d3f4:	89e9      	ldrh	r1, [r5, #14]
    d3f6:	81a1      	strh	r1, [r4, #12]
    d3f8:	7c29      	ldrb	r1, [r5, #16]
    d3fa:	f001 0101 	and.w	r1, r1, #1
    d3fe:	73a1      	strb	r1, [r4, #14]
    d400:	200d      	movs	r0, #13
    d402:	e761      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000d404 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d404:	223e      	movs	r2, #62	; 0x3e
    d406:	7002      	strb	r2, [r0, #0]
    d408:	2201      	movs	r2, #1
    d40a:	7082      	strb	r2, [r0, #2]
    d40c:	790a      	ldrb	r2, [r1, #4]
    d40e:	70c2      	strb	r2, [r0, #3]
    d410:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d414:	7102      	strb	r2, [r0, #4]
    d416:	880a      	ldrh	r2, [r1, #0]
    d418:	0a12      	lsrs	r2, r2, #8
    d41a:	7142      	strb	r2, [r0, #5]
    d41c:	788a      	ldrb	r2, [r1, #2]
    d41e:	7182      	strb	r2, [r0, #6]
    d420:	78ca      	ldrb	r2, [r1, #3]
    d422:	71c2      	strb	r2, [r0, #7]
    d424:	684a      	ldr	r2, [r1, #4]
    d426:	6082      	str	r2, [r0, #8]
    d428:	890a      	ldrh	r2, [r1, #8]
    d42a:	8182      	strh	r2, [r0, #12]
    d42c:	7d8a      	ldrb	r2, [r1, #22]
    d42e:	7382      	strb	r2, [r0, #14]
    d430:	8aca      	ldrh	r2, [r1, #22]
    d432:	0a12      	lsrs	r2, r2, #8
    d434:	73c2      	strb	r2, [r0, #15]
    d436:	7e0a      	ldrb	r2, [r1, #24]
    d438:	7402      	strb	r2, [r0, #16]
    d43a:	8b0a      	ldrh	r2, [r1, #24]
    d43c:	0a12      	lsrs	r2, r2, #8
    d43e:	7442      	strb	r2, [r0, #17]
    d440:	7e8a      	ldrb	r2, [r1, #26]
    d442:	7482      	strb	r2, [r0, #18]
    d444:	8b4a      	ldrh	r2, [r1, #26]
    d446:	0a12      	lsrs	r2, r2, #8
    d448:	74c2      	strb	r2, [r0, #19]
    d44a:	7f09      	ldrb	r1, [r1, #28]
    d44c:	7501      	strb	r1, [r0, #20]
    d44e:	2113      	movs	r1, #19
    d450:	7041      	strb	r1, [r0, #1]
    d452:	4608      	mov	r0, r1
    d454:	4770      	bx	lr
    d456:	223e      	movs	r2, #62	; 0x3e
    d458:	7002      	strb	r2, [r0, #0]
    d45a:	220a      	movs	r2, #10
    d45c:	7082      	strb	r2, [r0, #2]
    d45e:	790a      	ldrb	r2, [r1, #4]
    d460:	70c2      	strb	r2, [r0, #3]
    d462:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d466:	7102      	strb	r2, [r0, #4]
    d468:	880a      	ldrh	r2, [r1, #0]
    d46a:	0a12      	lsrs	r2, r2, #8
    d46c:	7142      	strb	r2, [r0, #5]
    d46e:	788a      	ldrb	r2, [r1, #2]
    d470:	7182      	strb	r2, [r0, #6]
    d472:	78ca      	ldrb	r2, [r1, #3]
    d474:	71c2      	strb	r2, [r0, #7]
    d476:	684a      	ldr	r2, [r1, #4]
    d478:	6082      	str	r2, [r0, #8]
    d47a:	890a      	ldrh	r2, [r1, #8]
    d47c:	8182      	strh	r2, [r0, #12]
    d47e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d482:	f8c0 200e 	str.w	r2, [r0, #14]
    d486:	89ca      	ldrh	r2, [r1, #14]
    d488:	8242      	strh	r2, [r0, #18]
    d48a:	690a      	ldr	r2, [r1, #16]
    d48c:	6142      	str	r2, [r0, #20]
    d48e:	8a8a      	ldrh	r2, [r1, #20]
    d490:	8302      	strh	r2, [r0, #24]
    d492:	7d8a      	ldrb	r2, [r1, #22]
    d494:	7682      	strb	r2, [r0, #26]
    d496:	8aca      	ldrh	r2, [r1, #22]
    d498:	0a12      	lsrs	r2, r2, #8
    d49a:	76c2      	strb	r2, [r0, #27]
    d49c:	7e0a      	ldrb	r2, [r1, #24]
    d49e:	7702      	strb	r2, [r0, #28]
    d4a0:	8b0a      	ldrh	r2, [r1, #24]
    d4a2:	0a12      	lsrs	r2, r2, #8
    d4a4:	7742      	strb	r2, [r0, #29]
    d4a6:	7e8a      	ldrb	r2, [r1, #26]
    d4a8:	7782      	strb	r2, [r0, #30]
    d4aa:	8b4a      	ldrh	r2, [r1, #26]
    d4ac:	0a12      	lsrs	r2, r2, #8
    d4ae:	77c2      	strb	r2, [r0, #31]
    d4b0:	7f09      	ldrb	r1, [r1, #28]
    d4b2:	f880 1020 	strb.w	r1, [r0, #32]
    d4b6:	211f      	movs	r1, #31
    d4b8:	7041      	strb	r1, [r0, #1]
    d4ba:	4608      	mov	r0, r1
    d4bc:	4770      	bx	lr
    d4be:	094a      	lsrs	r2, r1, #5
    d4c0:	f001 011f 	and.w	r1, r1, #31
    d4c4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d4c8:	40c8      	lsrs	r0, r1
    d4ca:	f000 0001 	and.w	r0, r0, #1
    d4ce:	4770      	bx	lr

0000d4d0 <sdc_hci_data_put>:
    d4d0:	b510      	push	{r4, lr}
    d4d2:	f06f 0415 	mvn.w	r4, #21
    d4d6:	b120      	cbz	r0, d4e2 <sdc_hci_data_put+0x12>
    d4d8:	f7ff fcf3 	bl	cec2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d4dc:	b108      	cbz	r0, d4e2 <sdc_hci_data_put+0x12>
    d4de:	2000      	movs	r0, #0
    d4e0:	bd10      	pop	{r4, pc}
    d4e2:	4620      	mov	r0, r4
    d4e4:	bd10      	pop	{r4, pc}

0000d4e6 <sdc_hci_get>:
    d4e6:	b510      	push	{r4, lr}
    d4e8:	460c      	mov	r4, r1
    d4ea:	b130      	cbz	r0, d4fa <sdc_hci_get+0x14>
    d4ec:	b12c      	cbz	r4, d4fa <sdc_hci_get+0x14>
    d4ee:	f7f3 fba5 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d4f2:	b128      	cbz	r0, d500 <sdc_hci_get+0x1a>
    d4f4:	7020      	strb	r0, [r4, #0]
    d4f6:	2000      	movs	r0, #0
    d4f8:	bd10      	pop	{r4, pc}
    d4fa:	f06f 0015 	mvn.w	r0, #21
    d4fe:	bd10      	pop	{r4, pc}
    d500:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d504:	bd10      	pop	{r4, pc}

0000d506 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d506:	f002 bde6 	b.w	100d6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d50a <sdc_hci_cmd_cb_read_transmit_power_level>:
    d50a:	f002 be01 	b.w	10110 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d50e <sdc_hci_cmd_cb_set_event_mask>:
    d50e:	b510      	push	{r4, lr}
    d510:	f7f3 fc38 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d514:	2000      	movs	r0, #0
    d516:	bd10      	pop	{r4, pc}

0000d518 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d518:	b510      	push	{r4, lr}
    d51a:	f7f3 fc45 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d51e:	2000      	movs	r0, #0
    d520:	bd10      	pop	{r4, pc}

0000d522 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d522:	f002 be16 	b.w	10152 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d526 <sdc_hci_cmd_vs_conn_event_extend>:
    d526:	b508      	push	{r3, lr}
    d528:	7800      	ldrb	r0, [r0, #0]
    d52a:	f88d 0000 	strb.w	r0, [sp]
    d52e:	4668      	mov	r0, sp
    d530:	f002 fdad 	bl	1008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d534:	bd08      	pop	{r3, pc}

0000d536 <sdc_hci_cmd_vs_conn_update>:
    d536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d538:	2100      	movs	r1, #0
    d53a:	9100      	str	r1, [sp, #0]
    d53c:	9101      	str	r1, [sp, #4]
    d53e:	9102      	str	r1, [sp, #8]
    d540:	9103      	str	r1, [sp, #12]
    d542:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d546:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d54a:	4291      	cmp	r1, r2
    d54c:	d304      	bcc.n	d558 <sdc_hci_cmd_vs_conn_update+0x22>
    d54e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d552:	fbb1 f1f2 	udiv	r1, r1, r2
    d556:	e005      	b.n	d564 <sdc_hci_cmd_vs_conn_update+0x2e>
    d558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d55c:	fbb1 f1f2 	udiv	r1, r1, r2
    d560:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d564:	8802      	ldrh	r2, [r0, #0]
    d566:	b289      	uxth	r1, r1
    d568:	f8ad 2000 	strh.w	r2, [sp]
    d56c:	f8ad 1002 	strh.w	r1, [sp, #2]
    d570:	f8ad 1004 	strh.w	r1, [sp, #4]
    d574:	88c1      	ldrh	r1, [r0, #6]
    d576:	f8ad 1006 	strh.w	r1, [sp, #6]
    d57a:	8900      	ldrh	r0, [r0, #8]
    d57c:	f8ad 0008 	strh.w	r0, [sp, #8]
    d580:	4668      	mov	r0, sp
    d582:	f002 faed 	bl	fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d586:	b004      	add	sp, #16
    d588:	bd10      	pop	{r4, pc}

0000d58a <sdc_hci_cmd_vs_event_length_set>:
    d58a:	f7f9 bec9 	b.w	7320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d58e <sdc_hci_cmd_vs_llpm_mode_set>:
    d58e:	2001      	movs	r0, #1
    d590:	4770      	bx	lr

0000d592 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d592:	7800      	ldrb	r0, [r0, #0]
    d594:	b100      	cbz	r0, d598 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d596:	2001      	movs	r0, #1
    d598:	f002 bca8 	b.w	feec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d59c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d59c:	b510      	push	{r4, lr}
    d59e:	4604      	mov	r4, r0
    d5a0:	f7ff f9c6 	bl	c930 <mpsl_temperature_get>
    d5a4:	17c1      	asrs	r1, r0, #31
    d5a6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d5aa:	1080      	asrs	r0, r0, #2
    d5ac:	287f      	cmp	r0, #127	; 0x7f
    d5ae:	dd01      	ble.n	d5b4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d5b0:	207f      	movs	r0, #127	; 0x7f
    d5b2:	e004      	b.n	d5be <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d5b4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d5b8:	4288      	cmp	r0, r1
    d5ba:	da00      	bge.n	d5be <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d5bc:	4608      	mov	r0, r1
    d5be:	7020      	strb	r0, [r4, #0]
    d5c0:	2000      	movs	r0, #0
    d5c2:	bd10      	pop	{r4, pc}

0000d5c4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d5c4:	b570      	push	{r4, r5, r6, lr}
    d5c6:	4605      	mov	r5, r0
    d5c8:	2210      	movs	r2, #16
    d5ca:	2100      	movs	r1, #0
    d5cc:	f003 fd35 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5d0:	2210      	movs	r2, #16
    d5d2:	2100      	movs	r1, #0
    d5d4:	f105 0010 	add.w	r0, r5, #16
    d5d8:	f003 fd2f 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5dc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d5e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d5e4:	1c40      	adds	r0, r0, #1
    d5e6:	d10b      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d5ec:	1c40      	adds	r0, r0, #1
    d5ee:	d107      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d5f4:	1c40      	adds	r0, r0, #1
    d5f6:	d103      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d5fc:	1c40      	adds	r0, r0, #1
    d5fe:	d00b      	beq.n	d618 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d600:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d604:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d608:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d60c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d610:	612a      	str	r2, [r5, #16]
    d612:	6168      	str	r0, [r5, #20]
    d614:	61a9      	str	r1, [r5, #24]
    d616:	61eb      	str	r3, [r5, #28]
    d618:	2000      	movs	r0, #0
    d61a:	f7f4 f82f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d61e:	b918      	cbnz	r0, d628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d620:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d624:	07c0      	lsls	r0, r0, #31
    d626:	d118      	bne.n	d65a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d628:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d62c:	1c40      	adds	r0, r0, #1
    d62e:	d10b      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d630:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d634:	1c40      	adds	r0, r0, #1
    d636:	d107      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d638:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d63c:	1c40      	adds	r0, r0, #1
    d63e:	d103      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d640:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d644:	1c40      	adds	r0, r0, #1
    d646:	d008      	beq.n	d65a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d648:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d64c:	6861      	ldr	r1, [r4, #4]
    d64e:	68a2      	ldr	r2, [r4, #8]
    d650:	68e3      	ldr	r3, [r4, #12]
    d652:	6028      	str	r0, [r5, #0]
    d654:	6069      	str	r1, [r5, #4]
    d656:	60aa      	str	r2, [r5, #8]
    d658:	60eb      	str	r3, [r5, #12]
    d65a:	2000      	movs	r0, #0
    d65c:	bd70      	pop	{r4, r5, r6, pc}

0000d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d65e:	b538      	push	{r3, r4, r5, lr}
    d660:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d664:	4604      	mov	r4, r0
    d666:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d66a:	1c40      	adds	r0, r0, #1
    d66c:	d105      	bne.n	d67a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d66e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d672:	43c0      	mvns	r0, r0
    d674:	0400      	lsls	r0, r0, #16
    d676:	0c00      	lsrs	r0, r0, #16
    d678:	d03e      	beq.n	d6f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d67a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d67e:	07c0      	lsls	r0, r0, #31
    d680:	d03a      	beq.n	d6f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d682:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d686:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d68a:	f8ad 1000 	strh.w	r1, [sp]
    d68e:	f8c4 0001 	str.w	r0, [r4, #1]
    d692:	f8bd 0000 	ldrh.w	r0, [sp]
    d696:	f8a4 0005 	strh.w	r0, [r4, #5]
    d69a:	79a0      	ldrb	r0, [r4, #6]
    d69c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d6a0:	71a0      	strb	r0, [r4, #6]
    d6a2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d6a6:	1c40      	adds	r0, r0, #1
    d6a8:	d00f      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6aa:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d6ae:	1c40      	adds	r0, r0, #1
    d6b0:	d00b      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6b2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d6b6:	1c40      	adds	r0, r0, #1
    d6b8:	d007      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6ba:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d6be:	1c40      	adds	r0, r0, #1
    d6c0:	d003      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6c2:	2000      	movs	r0, #0
    d6c4:	f7f3 ffda 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d6c8:	b140      	cbz	r0, d6dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d6ca:	2210      	movs	r2, #16
    d6cc:	2100      	movs	r1, #0
    d6ce:	1de0      	adds	r0, r4, #7
    d6d0:	f003 fcb3 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6d4:	2001      	movs	r0, #1
    d6d6:	7020      	strb	r0, [r4, #0]
    d6d8:	2000      	movs	r0, #0
    d6da:	bd38      	pop	{r3, r4, r5, pc}
    d6dc:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d6e0:	6869      	ldr	r1, [r5, #4]
    d6e2:	68a8      	ldr	r0, [r5, #8]
    d6e4:	68eb      	ldr	r3, [r5, #12]
    d6e6:	f8c4 2007 	str.w	r2, [r4, #7]
    d6ea:	f8c4 100b 	str.w	r1, [r4, #11]
    d6ee:	f8c4 000f 	str.w	r0, [r4, #15]
    d6f2:	f8c4 3013 	str.w	r3, [r4, #19]
    d6f6:	e7ed      	b.n	d6d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d6f8:	2000      	movs	r0, #0
    d6fa:	e7ec      	b.n	d6d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d6fc <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d6fc:	f002 bcb6 	b.w	1006c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d700 <sdc_hci_cmd_ip_read_bd_addr>:
    d700:	f002 bcfa 	b.w	100f8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d704 <sdc_hci_cmd_ip_read_local_version_information>:
    d704:	f7f9 be5e 	b.w	73c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d708 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d708:	f002 b9fc 	b.w	fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d70c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d70c:	f002 b9df 	b.w	face <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d710 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d710:	f002 ba1c 	b.w	fb4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d714 <sdc_hci_cmd_le_clear_resolving_list>:
    d714:	f002 ba0d 	b.w	fb32 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d718 <sdc_hci_cmd_le_conn_update>:
    d718:	f002 ba22 	b.w	fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d71c <sdc_hci_cmd_le_create_conn>:
    d71c:	f7f9 bce6 	b.w	70ec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d720 <sdc_hci_cmd_le_create_conn_cancel>:
    d720:	f002 ba61 	b.w	fbe6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d724 <sdc_hci_cmd_le_enable_encryption>:
    d724:	f002 bb9f 	b.w	fe66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d728 <sdc_hci_cmd_le_encrypt>:
    d728:	f002 ba6d 	b.w	fc06 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d72c <sdc_hci_cmd_le_rand>:
    d72c:	f002 ba74 	b.w	fc18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d730 <sdc_hci_cmd_le_read_buffer_size>:
    d730:	f7f9 bd38 	b.w	71a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d734 <sdc_hci_cmd_le_read_channel_map>:
    d734:	f7f9 bd40 	b.w	71b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d738 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d738:	f002 baac 	b.w	fc94 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d73c <sdc_hci_cmd_le_read_max_data_length>:
    d73c:	f002 ba72 	b.w	fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d740 <sdc_hci_cmd_le_read_phy>:
    d740:	f7f9 bd62 	b.w	7208 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d744 <sdc_hci_cmd_le_read_remote_features>:
    d744:	f002 ba77 	b.w	fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d748 <sdc_hci_cmd_le_read_resolving_list_size>:
    d748:	f002 ba90 	b.w	fc6c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d74c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d74c:	f7f9 bd82 	b.w	7254 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d750 <sdc_hci_cmd_le_read_transmit_power>:
    d750:	f002 ba90 	b.w	fc74 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d754 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d754:	f002 babb 	b.w	fcce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d758 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d758:	f002 baa0 	b.w	fc9c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d75c <sdc_hci_cmd_le_set_address_resolution_enable>:
    d75c:	f002 bacc 	b.w	fcf8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d760 <sdc_hci_cmd_le_set_data_length>:
    d760:	f002 bad8 	b.w	fd14 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d764 <sdc_hci_cmd_le_set_default_phy>:
    d764:	f7f9 bd80 	b.w	7268 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d768 <sdc_hci_cmd_le_set_event_mask>:
    d768:	b510      	push	{r4, lr}
    d76a:	f7f3 faf9 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d76e:	2000      	movs	r0, #0
    d770:	bd10      	pop	{r4, pc}

0000d772 <sdc_hci_cmd_le_set_host_channel_classification>:
    d772:	f7f9 bda1 	b.w	72b8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d776 <sdc_hci_cmd_le_set_phy>:
    d776:	f002 baed 	b.w	fd54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d77a <sdc_hci_cmd_le_set_privacy_mode>:
    d77a:	f002 bb04 	b.w	fd86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d77e <sdc_hci_cmd_le_set_random_address>:
    d77e:	f002 bb18 	b.w	fdb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d782 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d782:	f002 bb24 	b.w	fdce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d786 <sdc_hci_cmd_le_set_scan_enable>:
    d786:	f002 bb2b 	b.w	fde0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d78a <sdc_hci_cmd_le_set_scan_params>:
    d78a:	f002 bb3f 	b.w	fe0c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d78e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d78e:	f002 bb9c 	b.w	feca <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d792 <sdc_hci_cmd_lc_disconnect>:
    d792:	f002 b951 	b.w	fa38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d796 <sdc_hci_cmd_lc_read_remote_version_information>:
    d796:	f7f9 be1f 	b.w	73d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d79a:	b570      	push	{r4, r5, r6, lr}
    d79c:	880b      	ldrh	r3, [r1, #0]
    d79e:	7cc4      	ldrb	r4, [r0, #19]
    d7a0:	f100 0518 	add.w	r5, r0, #24
    d7a4:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d7a8:	8802      	ldrh	r2, [r0, #0]
    d7aa:	4435      	add	r5, r6
    d7ac:	1d64      	adds	r4, r4, #5
    d7ae:	882d      	ldrh	r5, [r5, #0]
    d7b0:	4422      	add	r2, r4
    d7b2:	b292      	uxth	r2, r2
    d7b4:	4425      	add	r5, r4
    d7b6:	1e54      	subs	r4, r2, #1
    d7b8:	442c      	add	r4, r5
    d7ba:	fb94 f4f2 	sdiv	r4, r4, r2
    d7be:	fb02 6204 	mla	r2, r2, r4, r6
    d7c2:	8840      	ldrh	r0, [r0, #2]
    d7c4:	b292      	uxth	r2, r2
    d7c6:	4290      	cmp	r0, r2
    d7c8:	d903      	bls.n	d7d2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d7ca:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d7ce:	4310      	orrs	r0, r2
    d7d0:	e002      	b.n	d7d8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d7d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d7d6:	4398      	bics	r0, r3
    d7d8:	8008      	strh	r0, [r1, #0]
    d7da:	bd70      	pop	{r4, r5, r6, pc}
    d7dc:	0442      	lsls	r2, r0, #17
    d7de:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d7e2:	d107      	bne.n	d7f4 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d7e4:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d7e8:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d7ec:	4288      	cmp	r0, r1
    d7ee:	d001      	beq.n	d7f4 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d7f0:	2001      	movs	r0, #1
    d7f2:	4770      	bx	lr
    d7f4:	2000      	movs	r0, #0
    d7f6:	4770      	bx	lr

0000d7f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d7f8:	8881      	ldrh	r1, [r0, #4]
    d7fa:	88c0      	ldrh	r0, [r0, #6]
    d7fc:	4288      	cmp	r0, r1
    d7fe:	d101      	bne.n	d804 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d800:	2001      	movs	r0, #1
    d802:	4770      	bx	lr
    d804:	2000      	movs	r0, #0
    d806:	4770      	bx	lr

0000d808 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d80c:	460f      	mov	r7, r1
    d80e:	4604      	mov	r4, r0
    d810:	f100 0118 	add.w	r1, r0, #24
    d814:	8880      	ldrh	r0, [r0, #4]
    d816:	2600      	movs	r6, #0
    d818:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d81c:	1845      	adds	r5, r0, r1
    d81e:	603e      	str	r6, [r7, #0]
    d820:	89e0      	ldrh	r0, [r4, #14]
    d822:	2800      	cmp	r0, #0
    d824:	d016      	beq.n	d854 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d826:	8961      	ldrh	r1, [r4, #10]
    d828:	4408      	add	r0, r1
    d82a:	b280      	uxth	r0, r0
    d82c:	8160      	strh	r0, [r4, #10]
    d82e:	8829      	ldrh	r1, [r5, #0]
    d830:	4288      	cmp	r0, r1
    d832:	d905      	bls.n	d840 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d834:	f240 1151 	movw	r1, #337	; 0x151
    d838:	f04f 0014 	mov.w	r0, #20
    d83c:	f7f3 f912 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d840:	d106      	bne.n	d850 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d842:	f104 0104 	add.w	r1, r4, #4
    d846:	4620      	mov	r0, r4
    d848:	f7ff ffa7 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d84c:	8166      	strh	r6, [r4, #10]
    d84e:	603d      	str	r5, [r7, #0]
    d850:	81e6      	strh	r6, [r4, #14]
    d852:	2001      	movs	r0, #1
    d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d85c:	4604      	mov	r4, r0
    d85e:	f100 0318 	add.w	r3, r0, #24
    d862:	88c0      	ldrh	r0, [r0, #6]
    d864:	460e      	mov	r6, r1
    d866:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d86a:	8a20      	ldrh	r0, [r4, #16]
    d86c:	19d9      	adds	r1, r3, r7
    d86e:	b108      	cbz	r0, d874 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d870:	42b0      	cmp	r0, r6
    d872:	d202      	bcs.n	d87a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d874:	2000      	movs	r0, #0
    d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d87a:	89a0      	ldrh	r0, [r4, #12]
    d87c:	2500      	movs	r5, #0
    d87e:	b140      	cbz	r0, d892 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d880:	f8b1 c000 	ldrh.w	ip, [r1]
    d884:	4560      	cmp	r0, ip
    d886:	d006      	beq.n	d896 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d888:	f44f 7101 	mov.w	r1, #516	; 0x204
    d88c:	2014      	movs	r0, #20
    d88e:	f7f3 f8e9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d892:	800d      	strh	r5, [r1, #0]
    d894:	e00e      	b.n	d8b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d896:	f894 c013 	ldrb.w	ip, [r4, #19]
    d89a:	4418      	add	r0, r3
    d89c:	f10c 0c05 	add.w	ip, ip, #5
    d8a0:	44bc      	add	ip, r7
    d8a2:	4460      	add	r0, ip
    d8a4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d8a8:	f820 cc03 	strh.w	ip, [r0, #-3]
    d8ac:	f894 c016 	ldrb.w	ip, [r4, #22]
    d8b0:	f800 cc01 	strb.w	ip, [r0, #-1]
    d8b4:	89a0      	ldrh	r0, [r4, #12]
    d8b6:	4430      	add	r0, r6
    d8b8:	81a0      	strh	r0, [r4, #12]
    d8ba:	8808      	ldrh	r0, [r1, #0]
    d8bc:	4430      	add	r0, r6
    d8be:	8008      	strh	r0, [r1, #0]
    d8c0:	b12a      	cbz	r2, d8ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d8c2:	1da1      	adds	r1, r4, #6
    d8c4:	4620      	mov	r0, r4
    d8c6:	f7ff ff68 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8ca:	81a5      	strh	r5, [r4, #12]
    d8cc:	e00a      	b.n	d8e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d8ce:	7ce0      	ldrb	r0, [r4, #19]
    d8d0:	89a1      	ldrh	r1, [r4, #12]
    d8d2:	1d40      	adds	r0, r0, #5
    d8d4:	4438      	add	r0, r7
    d8d6:	4419      	add	r1, r3
    d8d8:	4408      	add	r0, r1
    d8da:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d8de:	82a1      	strh	r1, [r4, #20]
    d8e0:	7880      	ldrb	r0, [r0, #2]
    d8e2:	75a0      	strb	r0, [r4, #22]
    d8e4:	8225      	strh	r5, [r4, #16]
    d8e6:	2001      	movs	r0, #1
    d8e8:	e7c5      	b.n	d876 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d8ea:	1c80      	adds	r0, r0, #2
    d8ec:	4770      	bx	lr

0000d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d8ee:	b510      	push	{r4, lr}
    d8f0:	88c2      	ldrh	r2, [r0, #6]
    d8f2:	8903      	ldrh	r3, [r0, #8]
    d8f4:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d8f8:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d8fc:	1a61      	subs	r1, r4, r1
    d8fe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d906:	429a      	cmp	r2, r3
    d908:	d101      	bne.n	d90e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d90a:	8842      	ldrh	r2, [r0, #2]
    d90c:	4411      	add	r1, r2
    d90e:	7cc2      	ldrb	r2, [r0, #19]
    d910:	8800      	ldrh	r0, [r0, #0]
    d912:	4410      	add	r0, r2
    d914:	1d40      	adds	r0, r0, #5
    d916:	b280      	uxth	r0, r0
    d918:	fb91 f0f0 	sdiv	r0, r1, r0
    d91c:	b280      	uxth	r0, r0
    d91e:	bd10      	pop	{r4, pc}

0000d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d920:	b510      	push	{r4, lr}
    d922:	4604      	mov	r4, r0
    d924:	88c0      	ldrh	r0, [r0, #6]
    d926:	88a1      	ldrh	r1, [r4, #4]
    d928:	4281      	cmp	r1, r0
    d92a:	d003      	beq.n	d934 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d92c:	8960      	ldrh	r0, [r4, #10]
    d92e:	b908      	cbnz	r0, d934 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d930:	89e0      	ldrh	r0, [r4, #14]
    d932:	b108      	cbz	r0, d938 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d934:	2000      	movs	r0, #0
    d936:	bd10      	pop	{r4, pc}
    d938:	1d21      	adds	r1, r4, #4
    d93a:	4620      	mov	r0, r4
    d93c:	f7ff ff2d 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d940:	2000      	movs	r0, #0
    d942:	81e0      	strh	r0, [r4, #14]
    d944:	2001      	movs	r0, #1
    d946:	bd10      	pop	{r4, pc}

0000d948 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d948:	b510      	push	{r4, lr}
    d94a:	4604      	mov	r4, r0
    d94c:	f100 0218 	add.w	r2, r0, #24
    d950:	88c0      	ldrh	r0, [r0, #6]
    d952:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d956:	4402      	add	r2, r0
    d958:	8820      	ldrh	r0, [r4, #0]
    d95a:	2845      	cmp	r0, #69	; 0x45
    d95c:	d200      	bcs.n	d960 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d95e:	2045      	movs	r0, #69	; 0x45
    d960:	4288      	cmp	r0, r1
    d962:	d204      	bcs.n	d96e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d964:	f44f 7182 	mov.w	r1, #260	; 0x104
    d968:	2014      	movs	r0, #20
    d96a:	f7f3 f87b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d96e:	7ca0      	ldrb	r0, [r4, #18]
    d970:	2800      	cmp	r0, #0
    d972:	d003      	beq.n	d97c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d974:	8810      	ldrh	r0, [r2, #0]
    d976:	4288      	cmp	r0, r1
    d978:	d201      	bcs.n	d97e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d97a:	2000      	movs	r0, #0
    d97c:	bd10      	pop	{r4, pc}
    d97e:	8011      	strh	r1, [r2, #0]
    d980:	1da1      	adds	r1, r4, #6
    d982:	4620      	mov	r0, r4
    d984:	f7ff ff09 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d988:	2000      	movs	r0, #0
    d98a:	74a0      	strb	r0, [r4, #18]
    d98c:	2001      	movs	r0, #1
    d98e:	bd10      	pop	{r4, pc}

0000d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d990:	b510      	push	{r4, lr}
    d992:	88c4      	ldrh	r4, [r0, #6]
    d994:	8883      	ldrh	r3, [r0, #4]
    d996:	4601      	mov	r1, r0
    d998:	f100 0218 	add.w	r2, r0, #24
    d99c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d9a0:	4410      	add	r0, r2
    d9a2:	42a3      	cmp	r3, r4
    d9a4:	d002      	beq.n	d9ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d9a6:	8949      	ldrh	r1, [r1, #10]
    d9a8:	2900      	cmp	r1, #0
    d9aa:	d000      	beq.n	d9ae <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d9ac:	2000      	movs	r0, #0
    d9ae:	bd10      	pop	{r4, pc}

0000d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d9b0:	8803      	ldrh	r3, [r0, #0]
    d9b2:	2b45      	cmp	r3, #69	; 0x45
    d9b4:	d200      	bcs.n	d9b8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d9b6:	2345      	movs	r3, #69	; 0x45
    d9b8:	8013      	strh	r3, [r2, #0]
    d9ba:	88c2      	ldrh	r2, [r0, #6]
    d9bc:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d9c0:	f100 0218 	add.w	r2, r0, #24
    d9c4:	441a      	add	r2, r3
    d9c6:	600a      	str	r2, [r1, #0]
    d9c8:	8980      	ldrh	r0, [r0, #12]
    d9ca:	4770      	bx	lr

0000d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d9cc:	7cc0      	ldrb	r0, [r0, #19]
    d9ce:	1d40      	adds	r0, r0, #5
    d9d0:	4408      	add	r0, r1
    d9d2:	1ec0      	subs	r0, r0, #3
    d9d4:	6010      	str	r0, [r2, #0]
    d9d6:	8808      	ldrh	r0, [r1, #0]
    d9d8:	4770      	bx	lr

0000d9da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9de:	460e      	mov	r6, r1
    d9e0:	88c1      	ldrh	r1, [r0, #6]
    d9e2:	8902      	ldrh	r2, [r0, #8]
    d9e4:	4604      	mov	r4, r0
    d9e6:	f100 0818 	add.w	r8, r0, #24
    d9ea:	8800      	ldrh	r0, [r0, #0]
    d9ec:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d9f0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d9f4:	2845      	cmp	r0, #69	; 0x45
    d9f6:	d200      	bcs.n	d9fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d9f8:	2045      	movs	r0, #69	; 0x45
    d9fa:	42b0      	cmp	r0, r6
    d9fc:	d203      	bcs.n	da06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d9fe:	21c6      	movs	r1, #198	; 0xc6
    da00:	2014      	movs	r0, #20
    da02:	f7f3 f82f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da06:	4610      	mov	r0, r2
    da08:	f7ff fee8 	bl	d7dc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    da0c:	b110      	cbz	r0, da14 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    da0e:	2000      	movs	r0, #0
    da10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da14:	42af      	cmp	r7, r5
    da16:	d908      	bls.n	da2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da18:	7ce1      	ldrb	r1, [r4, #19]
    da1a:	1b78      	subs	r0, r7, r5
    da1c:	1a40      	subs	r0, r0, r1
    da1e:	1f40      	subs	r0, r0, #5
    da20:	4286      	cmp	r6, r0
    da22:	dd02      	ble.n	da2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da24:	2000      	movs	r0, #0
    da26:	74a0      	strb	r0, [r4, #18]
    da28:	e7f1      	b.n	da0e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    da2a:	eb08 0005 	add.w	r0, r8, r5
    da2e:	2101      	movs	r1, #1
    da30:	8006      	strh	r6, [r0, #0]
    da32:	74a1      	strb	r1, [r4, #18]
    da34:	e7ec      	b.n	da10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000da36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    da36:	b538      	push	{r3, r4, r5, lr}
    da38:	88c4      	ldrh	r4, [r0, #6]
    da3a:	8881      	ldrh	r1, [r0, #4]
    da3c:	f100 0218 	add.w	r2, r0, #24
    da40:	f3c1 030e 	ubfx	r3, r1, #0, #15
    da44:	441a      	add	r2, r3
    da46:	42a1      	cmp	r1, r4
    da48:	d010      	beq.n	da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da4a:	8943      	ldrh	r3, [r0, #10]
    da4c:	89c5      	ldrh	r5, [r0, #14]
    da4e:	8812      	ldrh	r2, [r2, #0]
    da50:	442b      	add	r3, r5
    da52:	4293      	cmp	r3, r2
    da54:	d308      	bcc.n	da68 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    da56:	f8ad 1000 	strh.w	r1, [sp]
    da5a:	4669      	mov	r1, sp
    da5c:	f7ff fe9d 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da60:	f8bd 0000 	ldrh.w	r0, [sp]
    da64:	42a0      	cmp	r0, r4
    da66:	d001      	beq.n	da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da68:	2001      	movs	r0, #1
    da6a:	bd38      	pop	{r3, r4, r5, pc}
    da6c:	2000      	movs	r0, #0
    da6e:	bd38      	pop	{r3, r4, r5, pc}

0000da70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	88c6      	ldrh	r6, [r0, #6]
    da74:	8885      	ldrh	r5, [r0, #4]
    da76:	4603      	mov	r3, r0
    da78:	f100 0418 	add.w	r4, r0, #24
    da7c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    da80:	4420      	add	r0, r4
    da82:	42b5      	cmp	r5, r6
    da84:	d102      	bne.n	da8c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    da86:	2000      	movs	r0, #0
    da88:	81d8      	strh	r0, [r3, #14]
    da8a:	bd70      	pop	{r4, r5, r6, pc}
    da8c:	8804      	ldrh	r4, [r0, #0]
    da8e:	895d      	ldrh	r5, [r3, #10]
    da90:	7cde      	ldrb	r6, [r3, #19]
    da92:	1b64      	subs	r4, r4, r5
    da94:	4435      	add	r5, r6
    da96:	4428      	add	r0, r5
    da98:	880d      	ldrh	r5, [r1, #0]
    da9a:	b2a4      	uxth	r4, r4
    da9c:	1c80      	adds	r0, r0, #2
    da9e:	42a5      	cmp	r5, r4
    daa0:	d900      	bls.n	daa4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    daa2:	800c      	strh	r4, [r1, #0]
    daa4:	895c      	ldrh	r4, [r3, #10]
    daa6:	b124      	cbz	r4, dab2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    daa8:	2400      	movs	r4, #0
    daaa:	7014      	strb	r4, [r2, #0]
    daac:	8809      	ldrh	r1, [r1, #0]
    daae:	81d9      	strh	r1, [r3, #14]
    dab0:	bd70      	pop	{r4, r5, r6, pc}
    dab2:	2401      	movs	r4, #1
    dab4:	e7f9      	b.n	daaa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daba:	461d      	mov	r5, r3
    dabc:	4616      	mov	r6, r2
    dabe:	9f06      	ldr	r7, [sp, #24]
    dac0:	460b      	mov	r3, r1
    dac2:	4604      	mov	r4, r0
    dac4:	463a      	mov	r2, r7
    dac6:	4629      	mov	r1, r5
    dac8:	4630      	mov	r0, r6
    daca:	f000 f839 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dace:	4283      	cmp	r3, r0
    dad0:	d201      	bcs.n	dad6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    dad2:	219e      	movs	r1, #158	; 0x9e
    dad4:	e012      	b.n	dafc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    dad6:	07a0      	lsls	r0, r4, #30
    dad8:	d001      	beq.n	dade <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    dada:	219f      	movs	r1, #159	; 0x9f
    dadc:	e00e      	b.n	dafc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    dade:	2218      	movs	r2, #24
    dae0:	2100      	movs	r1, #0
    dae2:	4620      	mov	r0, r4
    dae4:	f003 faa9 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dae8:	19a8      	adds	r0, r5, r6
    daea:	1d40      	adds	r0, r0, #5
    daec:	4378      	muls	r0, r7
    daee:	b280      	uxth	r0, r0
    daf0:	74e5      	strb	r5, [r4, #19]
    daf2:	8060      	strh	r0, [r4, #2]
    daf4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    daf8:	d903      	bls.n	db02 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    dafa:	21a4      	movs	r1, #164	; 0xa4
    dafc:	2014      	movs	r0, #20
    dafe:	f7f2 ffb1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db02:	8026      	strh	r6, [r4, #0]
    db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    db08:	b570      	push	{r4, r5, r6, lr}
    db0a:	460b      	mov	r3, r1
    db0c:	4604      	mov	r4, r0
    db0e:	f100 0118 	add.w	r1, r0, #24
    db12:	8902      	ldrh	r2, [r0, #8]
    db14:	8880      	ldrh	r0, [r0, #4]
    db16:	f3c2 050e 	ubfx	r5, r2, #0, #15
    db1a:	440d      	add	r5, r1
    db1c:	4282      	cmp	r2, r0
    db1e:	d101      	bne.n	db24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    db20:	2000      	movs	r0, #0
    db22:	bd70      	pop	{r4, r5, r6, pc}
    db24:	b123      	cbz	r3, db30 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    db26:	7ce2      	ldrb	r2, [r4, #19]
    db28:	1ca9      	adds	r1, r5, #2
    db2a:	4618      	mov	r0, r3
    db2c:	f003 fa0b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db30:	882d      	ldrh	r5, [r5, #0]
    db32:	f104 0108 	add.w	r1, r4, #8
    db36:	4620      	mov	r0, r4
    db38:	f7ff fe2f 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db3c:	4628      	mov	r0, r5
    db3e:	bd70      	pop	{r4, r5, r6, pc}

0000db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    db40:	4401      	add	r1, r0
    db42:	1d49      	adds	r1, r1, #5
    db44:	4351      	muls	r1, r2
    db46:	b28a      	uxth	r2, r1
    db48:	2100      	movs	r1, #0
    db4a:	2845      	cmp	r0, #69	; 0x45
    db4c:	d202      	bcs.n	db54 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    db4e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    db52:	b281      	uxth	r1, r0
    db54:	3218      	adds	r2, #24
    db56:	1850      	adds	r0, r2, r1
    db58:	b280      	uxth	r0, r0
    db5a:	4770      	bx	lr

0000db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    db5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db60:	4688      	mov	r8, r1
    db62:	88c1      	ldrh	r1, [r0, #6]
    db64:	4604      	mov	r4, r0
    db66:	8900      	ldrh	r0, [r0, #8]
    db68:	f3c1 060e 	ubfx	r6, r1, #0, #15
    db6c:	f104 0518 	add.w	r5, r4, #24
    db70:	f3c0 070e 	ubfx	r7, r0, #0, #15
    db74:	eb05 0906 	add.w	r9, r5, r6
    db78:	f7ff fe30 	bl	d7dc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    db7c:	2200      	movs	r2, #0
    db7e:	b998      	cbnz	r0, dba8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    db80:	8820      	ldrh	r0, [r4, #0]
    db82:	2845      	cmp	r0, #69	; 0x45
    db84:	d200      	bcs.n	db88 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    db86:	2045      	movs	r0, #69	; 0x45
    db88:	42b7      	cmp	r7, r6
    db8a:	d906      	bls.n	db9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db8c:	7ce3      	ldrb	r3, [r4, #19]
    db8e:	1bb9      	subs	r1, r7, r6
    db90:	1ac9      	subs	r1, r1, r3
    db92:	1f49      	subs	r1, r1, #5
    db94:	4281      	cmp	r1, r0
    db96:	da00      	bge.n	db9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db98:	4608      	mov	r0, r1
    db9a:	89a1      	ldrh	r1, [r4, #12]
    db9c:	b111      	cbz	r1, dba4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    db9e:	f8b9 3000 	ldrh.w	r3, [r9]
    dba2:	1ac0      	subs	r0, r0, r3
    dba4:	4540      	cmp	r0, r8
    dba6:	da03      	bge.n	dbb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    dba8:	8222      	strh	r2, [r4, #16]
    dbaa:	2000      	movs	r0, #0
    dbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbb0:	7ce0      	ldrb	r0, [r4, #19]
    dbb2:	4429      	add	r1, r5
    dbb4:	1d40      	adds	r0, r0, #5
    dbb6:	4430      	add	r0, r6
    dbb8:	4408      	add	r0, r1
    dbba:	f8a4 8010 	strh.w	r8, [r4, #16]
    dbbe:	1ec0      	subs	r0, r0, #3
    dbc0:	e7f4      	b.n	dbac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dbc2:	b570      	push	{r4, r5, r6, lr}
    dbc4:	2300      	movs	r3, #0
    dbc6:	f1a1 0208 	sub.w	r2, r1, #8
    dbca:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    dbce:	42a2      	cmp	r2, r4
    dbd0:	d304      	bcc.n	dbdc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dbd2:	f240 11cd 	movw	r1, #461	; 0x1cd
    dbd6:	2015      	movs	r0, #21
    dbd8:	f7f2 ff44 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbdc:	6802      	ldr	r2, [r0, #0]
    dbde:	b90a      	cbnz	r2, dbe4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    dbe0:	e01e      	b.n	dc20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dbe2:	4610      	mov	r0, r2
    dbe4:	6802      	ldr	r2, [r0, #0]
    dbe6:	8893      	ldrh	r3, [r2, #4]
    dbe8:	428b      	cmp	r3, r1
    dbea:	d002      	beq.n	dbf2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    dbec:	6813      	ldr	r3, [r2, #0]
    dbee:	2b00      	cmp	r3, #0
    dbf0:	d1f7      	bne.n	dbe2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    dbf2:	8894      	ldrh	r4, [r2, #4]
    dbf4:	4613      	mov	r3, r2
    dbf6:	428c      	cmp	r4, r1
    dbf8:	d101      	bne.n	dbfe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    dbfa:	6811      	ldr	r1, [r2, #0]
    dbfc:	e00d      	b.n	dc1a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    dbfe:	f101 0508 	add.w	r5, r1, #8
    dc02:	b2ae      	uxth	r6, r5
    dc04:	2500      	movs	r5, #0
    dc06:	42b4      	cmp	r4, r6
    dc08:	d309      	bcc.n	dc1e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    dc0a:	1a64      	subs	r4, r4, r1
    dc0c:	4411      	add	r1, r2
    dc0e:	600d      	str	r5, [r1, #0]
    dc10:	808c      	strh	r4, [r1, #4]
    dc12:	6802      	ldr	r2, [r0, #0]
    dc14:	6812      	ldr	r2, [r2, #0]
    dc16:	6002      	str	r2, [r0, #0]
    dc18:	600a      	str	r2, [r1, #0]
    dc1a:	6001      	str	r1, [r0, #0]
    dc1c:	e000      	b.n	dc20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dc1e:	2300      	movs	r3, #0
    dc20:	4618      	mov	r0, r3
    dc22:	bd70      	pop	{r4, r5, r6, pc}

0000dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dc24:	b510      	push	{r4, lr}
    dc26:	000c      	movs	r4, r1
    dc28:	d004      	beq.n	dc34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    dc2a:	2c08      	cmp	r4, #8
    dc2c:	d207      	bcs.n	dc3e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dc2e:	f240 1195 	movw	r1, #405	; 0x195
    dc32:	e00a      	b.n	dc4a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    dc34:	b108      	cbz	r0, dc3a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    dc36:	2100      	movs	r1, #0
    dc38:	6001      	str	r1, [r0, #0]
    dc3a:	2000      	movs	r0, #0
    dc3c:	bd10      	pop	{r4, pc}
    dc3e:	b158      	cbz	r0, dc58 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    dc40:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    dc44:	d304      	bcc.n	dc50 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    dc46:	f240 11a7 	movw	r1, #423	; 0x1a7
    dc4a:	2015      	movs	r0, #21
    dc4c:	f7f2 ff0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc50:	b2a1      	uxth	r1, r4
    dc52:	6800      	ldr	r0, [r0, #0]
    dc54:	f000 f814 	bl	dc80 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dc58:	1d20      	adds	r0, r4, #4
    dc5a:	bd10      	pop	{r4, pc}

0000dc5c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dc5c:	2100      	movs	r1, #0
    dc5e:	6802      	ldr	r2, [r0, #0]
    dc60:	e003      	b.n	dc6a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dc62:	8893      	ldrh	r3, [r2, #4]
    dc64:	6812      	ldr	r2, [r2, #0]
    dc66:	4419      	add	r1, r3
    dc68:	b289      	uxth	r1, r1
    dc6a:	2a00      	cmp	r2, #0
    dc6c:	d1f9      	bne.n	dc62 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dc6e:	f000 b807 	b.w	dc80 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dc72:	2300      	movs	r3, #0
    dc74:	600b      	str	r3, [r1, #0]
    dc76:	808a      	strh	r2, [r1, #4]
    dc78:	6802      	ldr	r2, [r0, #0]
    dc7a:	600a      	str	r2, [r1, #0]
    dc7c:	6001      	str	r1, [r0, #0]
    dc7e:	4770      	bx	lr
    dc80:	2300      	movs	r3, #0
    dc82:	6043      	str	r3, [r0, #4]
    dc84:	1d02      	adds	r2, r0, #4
    dc86:	8101      	strh	r1, [r0, #8]
    dc88:	6002      	str	r2, [r0, #0]
    dc8a:	4770      	bx	lr

0000dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    dc8c:	b51c      	push	{r2, r3, r4, lr}
    dc8e:	4604      	mov	r4, r0
    dc90:	2000      	movs	r0, #0
    dc92:	9001      	str	r0, [sp, #4]
    dc94:	9000      	str	r0, [sp, #0]
    dc96:	f88d 4006 	strb.w	r4, [sp, #6]
    dc9a:	e00a      	b.n	dcb2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dc9c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dca0:	4621      	mov	r1, r4
    dca2:	f7f3 f943 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    dca6:	b120      	cbz	r0, dcb2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dca8:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    dcac:	2017      	movs	r0, #23
    dcae:	f7f2 fed9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcb2:	4668      	mov	r0, sp
    dcb4:	f7f3 f8f4 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    dcb8:	2800      	cmp	r0, #0
    dcba:	d0ef      	beq.n	dc9c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    dcbc:	bd1c      	pop	{r2, r3, r4, pc}

0000dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dcbe:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    dcc2:	3aff      	subs	r2, #255	; 0xff
    dcc4:	d000      	beq.n	dcc8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    dcc6:	b109      	cbz	r1, dccc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    dcc8:	2000      	movs	r0, #0
    dcca:	4770      	bx	lr
    dccc:	f7f3 b980 	b.w	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
    dcd0:	b510      	push	{r4, lr}
    dcd2:	4604      	mov	r4, r0
    dcd4:	f7f3 f9c8 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    dcd8:	42a0      	cmp	r0, r4
    dcda:	d901      	bls.n	dce0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    dcdc:	2001      	movs	r0, #1
    dcde:	bd10      	pop	{r4, pc}
    dce0:	2000      	movs	r0, #0
    dce2:	bd10      	pop	{r4, pc}

0000dce4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    dce4:	b570      	push	{r4, r5, r6, lr}
    dce6:	460e      	mov	r6, r1
    dce8:	461d      	mov	r5, r3
    dcea:	4611      	mov	r1, r2
    dcec:	f000 f813 	bl	dd16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    dcf0:	4604      	mov	r4, r0
    dcf2:	4629      	mov	r1, r5
    dcf4:	4630      	mov	r0, r6
    dcf6:	f000 f804 	bl	dd02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    dcfa:	4420      	add	r0, r4
    dcfc:	1d00      	adds	r0, r0, #4
    dcfe:	b280      	uxth	r0, r0
    dd00:	bd70      	pop	{r4, r5, r6, pc}
    dd02:	b510      	push	{r4, lr}
    dd04:	460a      	mov	r2, r1
    dd06:	2109      	movs	r1, #9
    dd08:	f7ff ff1a 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd0c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd10:	1cc0      	adds	r0, r0, #3
    dd12:	4008      	ands	r0, r1
    dd14:	bd10      	pop	{r4, pc}
    dd16:	b510      	push	{r4, lr}
    dd18:	460a      	mov	r2, r1
    dd1a:	210a      	movs	r1, #10
    dd1c:	f7ff ff10 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd20:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd24:	1cc0      	adds	r0, r0, #3
    dd26:	4008      	ands	r0, r1
    dd28:	bd10      	pop	{r4, pc}
    dd2a:	2800      	cmp	r0, #0
    dd2c:	db09      	blt.n	dd42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    dd2e:	f000 021f 	and.w	r2, r0, #31
    dd32:	2101      	movs	r1, #1
    dd34:	4091      	lsls	r1, r2
    dd36:	0940      	lsrs	r0, r0, #5
    dd38:	0080      	lsls	r0, r0, #2
    dd3a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd3e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dd42:	4770      	bx	lr
    dd44:	2800      	cmp	r0, #0
    dd46:	db0d      	blt.n	dd64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    dd48:	f000 021f 	and.w	r2, r0, #31
    dd4c:	2101      	movs	r1, #1
    dd4e:	4091      	lsls	r1, r2
    dd50:	0940      	lsrs	r0, r0, #5
    dd52:	0080      	lsls	r0, r0, #2
    dd54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd58:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dd5c:	f3bf 8f4f 	dsb	sy
    dd60:	f3bf 8f6f 	isb	sy
    dd64:	4770      	bx	lr
    dd66:	b510      	push	{r4, lr}
    dd68:	200e      	movs	r0, #14
    dd6a:	f7ff ffeb 	bl	dd44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    dd6e:	200e      	movs	r0, #14
    dd70:	f7ff ffdb 	bl	dd2a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dd74:	200f      	movs	r0, #15
    dd76:	f7ff ffe5 	bl	dd44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    dd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd7e:	200f      	movs	r0, #15
    dd80:	f7ff bfd3 	b.w	dd2a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dd84:	2800      	cmp	r0, #0
    dd86:	db09      	blt.n	dd9c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    dd88:	f000 021f 	and.w	r2, r0, #31
    dd8c:	2101      	movs	r1, #1
    dd8e:	4091      	lsls	r1, r2
    dd90:	0940      	lsrs	r0, r0, #5
    dd92:	0080      	lsls	r0, r0, #2
    dd94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd98:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dd9c:	4770      	bx	lr
    dd9e:	5840      	ldr	r0, [r0, r1]
    dda0:	2800      	cmp	r0, #0
    dda2:	d000      	beq.n	dda6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    dda4:	2001      	movs	r0, #1
    dda6:	4770      	bx	lr

0000dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dda8:	b510      	push	{r4, lr}
    ddaa:	4604      	mov	r4, r0
    ddac:	4620      	mov	r0, r4
    ddae:	f7f3 facd 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    ddb2:	2811      	cmp	r0, #17
    ddb4:	d0fa      	beq.n	ddac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    ddb6:	bd10      	pop	{r4, pc}

0000ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ddb8:	b510      	push	{r4, lr}
    ddba:	f7ff fff5 	bl	dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ddbe:	2800      	cmp	r0, #0
    ddc0:	d003      	beq.n	ddca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    ddc2:	21a0      	movs	r1, #160	; 0xa0
    ddc4:	201d      	movs	r0, #29
    ddc6:	f7f2 fe4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddca:	bd10      	pop	{r4, pc}

0000ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ddcc:	f7f3 bc1c 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ddd0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ddd0:	f7f3 bc0a 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ddd4:	b510      	push	{r4, lr}
    ddd6:	4050      	eors	r0, r2
    ddd8:	780a      	ldrb	r2, [r1, #0]
    ddda:	781c      	ldrb	r4, [r3, #0]
    dddc:	4062      	eors	r2, r4
    ddde:	4410      	add	r0, r2
    dde0:	784a      	ldrb	r2, [r1, #1]
    dde2:	785c      	ldrb	r4, [r3, #1]
    dde4:	4062      	eors	r2, r4
    dde6:	4410      	add	r0, r2
    dde8:	788a      	ldrb	r2, [r1, #2]
    ddea:	789c      	ldrb	r4, [r3, #2]
    ddec:	4062      	eors	r2, r4
    ddee:	4410      	add	r0, r2
    ddf0:	78ca      	ldrb	r2, [r1, #3]
    ddf2:	78dc      	ldrb	r4, [r3, #3]
    ddf4:	4062      	eors	r2, r4
    ddf6:	4410      	add	r0, r2
    ddf8:	790a      	ldrb	r2, [r1, #4]
    ddfa:	791c      	ldrb	r4, [r3, #4]
    ddfc:	7949      	ldrb	r1, [r1, #5]
    ddfe:	4062      	eors	r2, r4
    de00:	4410      	add	r0, r2
    de02:	795a      	ldrb	r2, [r3, #5]
    de04:	4051      	eors	r1, r2
    de06:	42c1      	cmn	r1, r0
    de08:	d101      	bne.n	de0e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    de0a:	2001      	movs	r0, #1
    de0c:	bd10      	pop	{r4, pc}
    de0e:	2000      	movs	r0, #0
    de10:	bd10      	pop	{r4, pc}

0000de12 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    de12:	b510      	push	{r4, lr}
    de14:	2900      	cmp	r1, #0
    de16:	4604      	mov	r4, r0
    de18:	f04f 0106 	mov.w	r1, #6
    de1c:	d002      	beq.n	de24 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    de1e:	f7f2 feb3 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de22:	e001      	b.n	de28 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    de24:	f7f2 febe 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de28:	7960      	ldrb	r0, [r4, #5]
    de2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    de2e:	7160      	strb	r0, [r4, #5]
    de30:	bd10      	pop	{r4, pc}

0000de32 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    de32:	4770      	bx	lr

0000de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    de34:	b530      	push	{r4, r5, lr}
    de36:	460c      	mov	r4, r1
    de38:	4605      	mov	r5, r0
    de3a:	b08d      	sub	sp, #52	; 0x34
    de3c:	f04f 0103 	mov.w	r1, #3
    de40:	f104 0003 	add.w	r0, r4, #3
    de44:	b112      	cbz	r2, de4c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    de46:	f7f2 fe9f 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de4a:	e001      	b.n	de50 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    de4c:	f7f2 feaa 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de50:	7960      	ldrb	r0, [r4, #5]
    de52:	220d      	movs	r2, #13
    de54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    de58:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    de5c:	7160      	strb	r0, [r4, #5]
    de5e:	2100      	movs	r1, #0
    de60:	a804      	add	r0, sp, #16
    de62:	f003 f8ea 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de66:	78e0      	ldrb	r0, [r4, #3]
    de68:	f88d 001f 	strb.w	r0, [sp, #31]
    de6c:	7920      	ldrb	r0, [r4, #4]
    de6e:	f88d 001e 	strb.w	r0, [sp, #30]
    de72:	7960      	ldrb	r0, [r4, #5]
    de74:	f88d 001d 	strb.w	r0, [sp, #29]
    de78:	2210      	movs	r2, #16
    de7a:	4629      	mov	r1, r5
    de7c:	4668      	mov	r0, sp
    de7e:	f003 f862 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de82:	4668      	mov	r0, sp
    de84:	f7ff ff98 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    de88:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    de8c:	7020      	strb	r0, [r4, #0]
    de8e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    de92:	7060      	strb	r0, [r4, #1]
    de94:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    de98:	70a0      	strb	r0, [r4, #2]
    de9a:	b00d      	add	sp, #52	; 0x34
    de9c:	bd30      	pop	{r4, r5, pc}

0000de9e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    de9e:	b530      	push	{r4, r5, lr}
    dea0:	b08d      	sub	sp, #52	; 0x34
    dea2:	460c      	mov	r4, r1
    dea4:	4605      	mov	r5, r0
    dea6:	220d      	movs	r2, #13
    dea8:	2100      	movs	r1, #0
    deaa:	a804      	add	r0, sp, #16
    deac:	f003 f8c5 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    deb0:	78e0      	ldrb	r0, [r4, #3]
    deb2:	f88d 001f 	strb.w	r0, [sp, #31]
    deb6:	7920      	ldrb	r0, [r4, #4]
    deb8:	f88d 001e 	strb.w	r0, [sp, #30]
    debc:	7960      	ldrb	r0, [r4, #5]
    debe:	f88d 001d 	strb.w	r0, [sp, #29]
    dec2:	2210      	movs	r2, #16
    dec4:	4629      	mov	r1, r5
    dec6:	4668      	mov	r0, sp
    dec8:	f003 f83d 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    decc:	4668      	mov	r0, sp
    dece:	f7ff ff73 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ded2:	7820      	ldrb	r0, [r4, #0]
    ded4:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    ded8:	4288      	cmp	r0, r1
    deda:	d10c      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dedc:	7860      	ldrb	r0, [r4, #1]
    dede:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    dee2:	4288      	cmp	r0, r1
    dee4:	d107      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dee6:	78a0      	ldrb	r0, [r4, #2]
    dee8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    deec:	4288      	cmp	r0, r1
    deee:	d102      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    def0:	2001      	movs	r0, #1
    def2:	b00d      	add	sp, #52	; 0x34
    def4:	bd30      	pop	{r4, r5, pc}
    def6:	2000      	movs	r0, #0
    def8:	e7fb      	b.n	def2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000defa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    defa:	f7f3 beeb 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    defe:	b510      	push	{r4, lr}
    df00:	2801      	cmp	r0, #1
    df02:	d008      	beq.n	df16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    df04:	2802      	cmp	r0, #2
    df06:	d004      	beq.n	df12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    df08:	f240 4122 	movw	r1, #1058	; 0x422
    df0c:	2006      	movs	r0, #6
    df0e:	f7f2 fda9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df12:	2001      	movs	r0, #1
    df14:	bd10      	pop	{r4, pc}
    df16:	2000      	movs	r0, #0
    df18:	bd10      	pop	{r4, pc}
    df1a:	2900      	cmp	r1, #0
    df1c:	d004      	beq.n	df28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    df1e:	2801      	cmp	r0, #1
    df20:	d003      	beq.n	df2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    df22:	2901      	cmp	r1, #1
    df24:	d001      	beq.n	df2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    df26:	2002      	movs	r0, #2
    df28:	4770      	bx	lr
    df2a:	2001      	movs	r0, #1
    df2c:	4770      	bx	lr
    df2e:	f7ff bd9f 	b.w	da70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000df32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    df32:	2101      	movs	r1, #1
    df34:	f7f4 baf2 	b.w	251c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000df38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    df38:	b510      	push	{r4, lr}
    df3a:	f002 fcad 	bl	10898 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    df3e:	b118      	cbz	r0, df48 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    df40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df44:	f7f9 bdd2 	b.w	7aec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    df48:	20ff      	movs	r0, #255	; 0xff
    df4a:	bd10      	pop	{r4, pc}

0000df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    df4c:	b510      	push	{r4, lr}
    df4e:	f7f4 fb2d 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df52:	2810      	cmp	r0, #16
    df54:	d003      	beq.n	df5e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    df56:	f7f4 faf9 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    df5a:	2810      	cmp	r0, #16
    df5c:	d100      	bne.n	df60 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    df5e:	2008      	movs	r0, #8
    df60:	bd10      	pop	{r4, pc}

0000df62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    df62:	b510      	push	{r4, lr}
    df64:	f7f4 fb22 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df68:	2810      	cmp	r0, #16
    df6a:	d007      	beq.n	df7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    df6c:	f7f4 faee 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    df70:	2810      	cmp	r0, #16
    df72:	d003      	beq.n	df7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    df74:	f7f4 fb78 	bl	2668 <CONFIG_BT_RX_STACK_SIZE+0xe8>
    df78:	2001      	movs	r0, #1
    df7a:	bd10      	pop	{r4, pc}
    df7c:	2000      	movs	r0, #0
    df7e:	bd10      	pop	{r4, pc}

0000df80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    df80:	b510      	push	{r4, lr}
    df82:	f7f4 fb13 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df86:	2810      	cmp	r0, #16
    df88:	d003      	beq.n	df92 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    df8a:	f7f4 fbb5 	bl	26f8 <CONFIG_BT_RX_STACK_SIZE+0x178>
    df8e:	2001      	movs	r0, #1
    df90:	bd10      	pop	{r4, pc}
    df92:	2000      	movs	r0, #0
    df94:	bd10      	pop	{r4, pc}

0000df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    df96:	b570      	push	{r4, r5, r6, lr}
    df98:	460e      	mov	r6, r1
    df9a:	b08c      	sub	sp, #48	; 0x30
    df9c:	4614      	mov	r4, r2
    df9e:	4601      	mov	r1, r0
    dfa0:	461d      	mov	r5, r3
    dfa2:	2210      	movs	r2, #16
    dfa4:	4668      	mov	r0, sp
    dfa6:	f000 f997 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfaa:	2210      	movs	r2, #16
    dfac:	4631      	mov	r1, r6
    dfae:	a804      	add	r0, sp, #16
    dfb0:	f000 f992 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfb4:	4668      	mov	r0, sp
    dfb6:	f7ff feff 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dfba:	a908      	add	r1, sp, #32
    dfbc:	f04f 0210 	mov.w	r2, #16
    dfc0:	4628      	mov	r0, r5
    dfc2:	b11c      	cbz	r4, dfcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dfc4:	f000 f988 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfc8:	b00c      	add	sp, #48	; 0x30
    dfca:	bd70      	pop	{r4, r5, r6, pc}
    dfcc:	f002 ffbb 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfd0:	e7fa      	b.n	dfc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    dfd2:	0781      	lsls	r1, r0, #30
    dfd4:	d501      	bpl.n	dfda <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    dfd6:	2002      	movs	r0, #2
    dfd8:	4770      	bx	lr
    dfda:	07c0      	lsls	r0, r0, #31
    dfdc:	d0fc      	beq.n	dfd8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    dfde:	2001      	movs	r0, #1
    dfe0:	4770      	bx	lr

0000dfe2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    dfe2:	b570      	push	{r4, r5, r6, lr}
    dfe4:	4606      	mov	r6, r0
    dfe6:	7900      	ldrb	r0, [r0, #4]
    dfe8:	0940      	lsrs	r0, r0, #5
    dfea:	d10e      	bne.n	e00a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dfec:	2500      	movs	r5, #0
    dfee:	462c      	mov	r4, r5
    dff0:	5d30      	ldrb	r0, [r6, r4]
    dff2:	f000 fd40 	bl	ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dff6:	1c64      	adds	r4, r4, #1
    dff8:	4428      	add	r0, r5
    dffa:	b2e4      	uxtb	r4, r4
    dffc:	b2c5      	uxtb	r5, r0
    dffe:	2c05      	cmp	r4, #5
    e000:	d3f6      	bcc.n	dff0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    e002:	2d01      	cmp	r5, #1
    e004:	d901      	bls.n	e00a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e006:	2001      	movs	r0, #1
    e008:	bd70      	pop	{r4, r5, r6, pc}
    e00a:	2000      	movs	r0, #0
    e00c:	bd70      	pop	{r4, r5, r6, pc}

0000e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e00e:	b510      	push	{r4, lr}
    e010:	460c      	mov	r4, r1
    e012:	2100      	movs	r1, #0
    e014:	f7ff fe53 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e018:	6060      	str	r0, [r4, #4]
    e01a:	b110      	cbz	r0, e022 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e01c:	2000      	movs	r0, #0
    e01e:	7020      	strb	r0, [r4, #0]
    e020:	bd10      	pop	{r4, pc}
    e022:	2002      	movs	r0, #2
    e024:	bd10      	pop	{r4, pc}

0000e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e026:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e02a:	4348      	muls	r0, r1
    e02c:	4770      	bx	lr

0000e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e02e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e032:	fbb0 f0f1 	udiv	r0, r0, r1
    e036:	b280      	uxth	r0, r0
    e038:	4770      	bx	lr

0000e03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e03a:	b570      	push	{r4, r5, r6, lr}
    e03c:	4604      	mov	r4, r0
    e03e:	4290      	cmp	r0, r2
    e040:	d20b      	bcs.n	e05a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e042:	1b10      	subs	r0, r2, r4
    e044:	2865      	cmp	r0, #101	; 0x65
    e046:	d200      	bcs.n	e04a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e048:	2065      	movs	r0, #101	; 0x65
    e04a:	1825      	adds	r5, r4, r0
    e04c:	428d      	cmp	r5, r1
    e04e:	d803      	bhi.n	e058 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e050:	2103      	movs	r1, #3
    e052:	f7fc f91f 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e056:	b108      	cbz	r0, e05c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e058:	4620      	mov	r0, r4
    e05a:	bd70      	pop	{r4, r5, r6, pc}
    e05c:	4628      	mov	r0, r5
    e05e:	bd70      	pop	{r4, r5, r6, pc}

0000e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e060:	b510      	push	{r4, lr}
    e062:	f1a2 0310 	sub.w	r3, r2, #16
    e066:	290d      	cmp	r1, #13
    e068:	d258      	bcs.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e06a:	e8df f001 	tbb	[pc, r1]
    e06e:	0907      	.short	0x0907
    e070:	1d1a150e 	.word	0x1d1a150e
    e074:	5937342c 	.word	0x5937342c
    e078:	0053423b 	.word	0x0053423b
    e07c:	b38a      	cbz	r2, e0e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    e07e:	e04d      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e080:	2a06      	cmp	r2, #6
    e082:	d049      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e084:	2a07      	cmp	r2, #7
    e086:	d047      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e088:	e048      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e08a:	2a0b      	cmp	r2, #11
    e08c:	d044      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e08e:	2a0c      	cmp	r2, #12
    e090:	d042      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e092:	2a0a      	cmp	r2, #10
    e094:	d040      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e096:	e041      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e098:	2a0d      	cmp	r2, #13
    e09a:	d03d      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e09c:	2a0e      	cmp	r2, #14
    e09e:	d03b      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a0:	e03c      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0a2:	2b0c      	cmp	r3, #12
    e0a4:	d938      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a6:	e039      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0a8:	2a13      	cmp	r2, #19
    e0aa:	d035      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ac:	2a12      	cmp	r2, #18
    e0ae:	d033      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0b0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0b4:	b120      	cbz	r0, e0c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    e0b6:	2a13      	cmp	r2, #19
    e0b8:	d330      	bcc.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0ba:	2a1b      	cmp	r2, #27
    e0bc:	d92c      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0be:	e02d      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0c0:	2a17      	cmp	r2, #23
    e0c2:	d2fa      	bcs.n	e0ba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    e0c4:	e02a      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0c6:	2b03      	cmp	r3, #3
    e0c8:	d926      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ca:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0ce:	b300      	cbz	r0, e112 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    e0d0:	2a1c      	cmp	r2, #28
    e0d2:	d921      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0d4:	e022      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0d6:	2a04      	cmp	r2, #4
    e0d8:	d01e      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0da:	e01f      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0dc:	2a01      	cmp	r2, #1
    e0de:	d01b      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e0:	e01c      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0e2:	e019      	b.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e4:	2a1d      	cmp	r2, #29
    e0e6:	d017      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e8:	2a1e      	cmp	r2, #30
    e0ea:	d015      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ec:	2a1f      	cmp	r2, #31
    e0ee:	d013      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f0:	e014      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0f2:	2a20      	cmp	r2, #32
    e0f4:	d010      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f6:	2a21      	cmp	r2, #33	; 0x21
    e0f8:	d00e      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0fa:	2a22      	cmp	r2, #34	; 0x22
    e0fc:	d00c      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0fe:	2a23      	cmp	r2, #35	; 0x23
    e100:	d00a      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e102:	2a24      	cmp	r2, #36	; 0x24
    e104:	d008      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e106:	2a25      	cmp	r2, #37	; 0x25
    e108:	d006      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10a:	2a26      	cmp	r2, #38	; 0x26
    e10c:	d004      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10e:	2a2e      	cmp	r2, #46	; 0x2e
    e110:	d002      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e112:	e003      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e114:	2a28      	cmp	r2, #40	; 0x28
    e116:	d101      	bne.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e118:	2001      	movs	r0, #1
    e11a:	bd10      	pop	{r4, pc}
    e11c:	2000      	movs	r0, #0
    e11e:	bd10      	pop	{r4, pc}
    e120:	2a05      	cmp	r2, #5
    e122:	d1fb      	bne.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e124:	e7f8      	b.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e126:	280b      	cmp	r0, #11
    e128:	d019      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e12a:	280c      	cmp	r0, #12
    e12c:	d017      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e12e:	280a      	cmp	r0, #10
    e130:	d015      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e132:	280d      	cmp	r0, #13
    e134:	d013      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e136:	280e      	cmp	r0, #14
    e138:	d011      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13a:	2820      	cmp	r0, #32
    e13c:	d00f      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13e:	2821      	cmp	r0, #33	; 0x21
    e140:	d00d      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e142:	2822      	cmp	r0, #34	; 0x22
    e144:	d00b      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e146:	2823      	cmp	r0, #35	; 0x23
    e148:	d009      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14a:	2824      	cmp	r0, #36	; 0x24
    e14c:	d007      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14e:	2825      	cmp	r0, #37	; 0x25
    e150:	d005      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e152:	2826      	cmp	r0, #38	; 0x26
    e154:	d003      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e156:	282e      	cmp	r0, #46	; 0x2e
    e158:	d001      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e15a:	2000      	movs	r0, #0
    e15c:	4770      	bx	lr
    e15e:	2001      	movs	r0, #1
    e160:	4770      	bx	lr

0000e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e162:	f011 0f0c 	tst.w	r1, #12
    e166:	d018      	beq.n	e19a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e168:	074a      	lsls	r2, r1, #29
    e16a:	f44f 7116 	mov.w	r1, #600	; 0x258
    e16e:	2a00      	cmp	r2, #0
    e170:	da02      	bge.n	e178 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e172:	f04f 0210 	mov.w	r2, #16
    e176:	e001      	b.n	e17c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e178:	f04f 0240 	mov.w	r2, #64	; 0x40
    e17c:	da01      	bge.n	e182 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e17e:	f04f 0196 	mov.w	r1, #150	; 0x96
    e182:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e186:	eba0 0301 	sub.w	r3, r0, r1
    e18a:	4288      	cmp	r0, r1
    e18c:	d903      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e18e:	fb93 f0f2 	sdiv	r0, r3, r2
    e192:	b280      	uxth	r0, r0
    e194:	4770      	bx	lr
    e196:	2000      	movs	r0, #0
    e198:	4770      	bx	lr
    e19a:	2902      	cmp	r1, #2
    e19c:	d008      	beq.n	e1b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e19e:	2870      	cmp	r0, #112	; 0x70
    e1a0:	d9f9      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1a2:	3870      	subs	r0, #112	; 0x70
    e1a4:	17c1      	asrs	r1, r0, #31
    e1a6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e1aa:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e1ae:	4770      	bx	lr
    e1b0:	283c      	cmp	r0, #60	; 0x3c
    e1b2:	d9f0      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1b4:	383c      	subs	r0, #60	; 0x3c
    e1b6:	17c1      	asrs	r1, r0, #31
    e1b8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e1bc:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e1c0:	4770      	bx	lr

0000e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e1c2:	6809      	ldr	r1, [r1, #0]
    e1c4:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    e1c8:	4770      	bx	lr

0000e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    e1ca:	2801      	cmp	r0, #1
    e1cc:	d002      	beq.n	e1d4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1ce:	2802      	cmp	r0, #2
    e1d0:	d000      	beq.n	e1d4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1d2:	2000      	movs	r0, #0
    e1d4:	4770      	bx	lr

0000e1d6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    e1d6:	b530      	push	{r4, r5, lr}
    e1d8:	242a      	movs	r4, #42	; 0x2a
    e1da:	2523      	movs	r5, #35	; 0x23
    e1dc:	2a16      	cmp	r2, #22
    e1de:	d109      	bne.n	e1f4 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e1e0:	280b      	cmp	r0, #11
    e1e2:	d00b      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1e4:	280c      	cmp	r0, #12
    e1e6:	d009      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1e8:	280d      	cmp	r0, #13
    e1ea:	d007      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1ec:	280e      	cmp	r0, #14
    e1ee:	d005      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1f0:	2820      	cmp	r0, #32
    e1f2:	d005      	beq.n	e200 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e1f4:	b171      	cbz	r1, e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e1f6:	2a16      	cmp	r2, #22
    e1f8:	d10c      	bne.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e1fa:	e004      	b.n	e206 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    e1fc:	701c      	strb	r4, [r3, #0]
    e1fe:	e000      	b.n	e202 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    e200:	701d      	strb	r5, [r3, #0]
    e202:	2001      	movs	r0, #1
    e204:	bd30      	pop	{r4, r5, pc}
    e206:	7808      	ldrb	r0, [r1, #0]
    e208:	2801      	cmp	r0, #1
    e20a:	d0f7      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e20c:	2800      	cmp	r0, #0
    e20e:	d0f5      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e210:	2816      	cmp	r0, #22
    e212:	d0f5      	beq.n	e200 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e214:	2000      	movs	r0, #0
    e216:	bd30      	pop	{r4, r5, pc}

0000e218 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e21a:	b2cf      	uxtb	r7, r1
    e21c:	4606      	mov	r6, r0
    e21e:	f3c1 2407 	ubfx	r4, r1, #8, #8
    e222:	4621      	mov	r1, r4
    e224:	4638      	mov	r0, r7
    e226:	f000 f89e 	bl	e366 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e22a:	b2f5      	uxtb	r5, r6
    e22c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e230:	b920      	cbnz	r0, e23c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    e232:	4631      	mov	r1, r6
    e234:	4628      	mov	r0, r5
    e236:	f000 f896 	bl	e366 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e23a:	b140      	cbz	r0, e24e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    e23c:	4027      	ands	r7, r4
    e23e:	4035      	ands	r5, r6
    e240:	403d      	ands	r5, r7
    e242:	4644      	mov	r4, r8
    e244:	f365 0407 	bfi	r4, r5, #0, #8
    e248:	f365 240f 	bfi	r4, r5, #8, #8
    e24c:	e006      	b.n	e25c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    e24e:	4025      	ands	r5, r4
    e250:	4644      	mov	r4, r8
    e252:	f365 0407 	bfi	r4, r5, #0, #8
    e256:	403e      	ands	r6, r7
    e258:	f366 240f 	bfi	r4, r6, #8, #8
    e25c:	b2e0      	uxtb	r0, r4
    e25e:	f7ff feb8 	bl	dfd2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e262:	f88d 0000 	strb.w	r0, [sp]
    e266:	f3c4 2007 	ubfx	r0, r4, #8, #8
    e26a:	f7ff feb2 	bl	dfd2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e26e:	f88d 0001 	strb.w	r0, [sp, #1]
    e272:	f8bd 0000 	ldrh.w	r0, [sp]
    e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e27c:	4607      	mov	r7, r0
    e27e:	460e      	mov	r6, r1
    e280:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e284:	f7fc fc32 	bl	aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e288:	b198      	cbz	r0, e2b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e28a:	b31e      	cbz	r6, e2d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e28c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e290:	1b40      	subs	r0, r0, r5
    e292:	2300      	movs	r3, #0
    e294:	eb61 0104 	sbc.w	r1, r1, r4
    e298:	461a      	mov	r2, r3
    e29a:	1a1b      	subs	r3, r3, r0
    e29c:	418a      	sbcs	r2, r1
    e29e:	da19      	bge.n	e2d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e2a0:	1c42      	adds	r2, r0, #1
    e2a2:	f171 0100 	sbcs.w	r1, r1, #0
    e2a6:	db07      	blt.n	e2b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e2a8:	f240 211b 	movw	r1, #539	; 0x21b
    e2ac:	2029      	movs	r0, #41	; 0x29
    e2ae:	f7f2 fbd9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2b2:	f240 2111 	movw	r1, #529	; 0x211
    e2b6:	e7f9      	b.n	e2ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e2b8:	4430      	add	r0, r6
    e2ba:	1e40      	subs	r0, r0, #1
    e2bc:	fbb0 f1f6 	udiv	r1, r0, r6
    e2c0:	fb01 f006 	mul.w	r0, r1, r6
    e2c4:	1828      	adds	r0, r5, r0
    e2c6:	f144 0400 	adc.w	r4, r4, #0
    e2ca:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e2ce:	4608      	mov	r0, r1
    e2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2d4:	2000      	movs	r0, #0
    e2d6:	e7fb      	b.n	e2d0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e2d8:	b530      	push	{r4, r5, lr}
    e2da:	4613      	mov	r3, r2
    e2dc:	e006      	b.n	e2ec <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e2de:	18cc      	adds	r4, r1, r3
    e2e0:	1ad5      	subs	r5, r2, r3
    e2e2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e2e6:	1e5b      	subs	r3, r3, #1
    e2e8:	5544      	strb	r4, [r0, r5]
    e2ea:	b2db      	uxtb	r3, r3
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d1f6      	bne.n	e2de <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e2f0:	bd30      	pop	{r4, r5, pc}

0000e2f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e2f2:	2300      	movs	r3, #0
    e2f4:	6403      	str	r3, [r0, #64]	; 0x40
    e2f6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e2fa:	f240 2371 	movw	r3, #625	; 0x271
    e2fe:	435a      	muls	r2, r3
    e300:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e304:	1e52      	subs	r2, r2, #1
    e306:	fbb2 f1f1 	udiv	r1, r2, r1
    e30a:	6441      	str	r1, [r0, #68]	; 0x44
    e30c:	4770      	bx	lr

0000e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    e30e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e312:	fbb0 f0f1 	udiv	r0, r0, r1
    e316:	b280      	uxth	r0, r0
    e318:	4770      	bx	lr

0000e31a <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    e31a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e31e:	fbb0 f2f1 	udiv	r2, r0, r1
    e322:	fb01 0112 	mls	r1, r1, r2, r0
    e326:	1a40      	subs	r0, r0, r1
    e328:	4770      	bx	lr

0000e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e32a:	f240 2171 	movw	r1, #625	; 0x271
    e32e:	fb10 f001 	smulbb	r0, r0, r1
    e332:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e336:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e33a:	4770      	bx	lr

0000e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    e33c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e340:	fbb0 f0f1 	udiv	r0, r0, r1
    e344:	b2c0      	uxtb	r0, r0
    e346:	4770      	bx	lr

0000e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e348:	b510      	push	{r4, lr}
    e34a:	2300      	movs	r3, #0
    e34c:	461a      	mov	r2, r3
    e34e:	e003      	b.n	e358 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e350:	5c84      	ldrb	r4, [r0, r2]
    e352:	4323      	orrs	r3, r4
    e354:	1c52      	adds	r2, r2, #1
    e356:	b2d2      	uxtb	r2, r2
    e358:	428a      	cmp	r2, r1
    e35a:	d3f9      	bcc.n	e350 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e35c:	b10b      	cbz	r3, e362 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e35e:	2000      	movs	r0, #0
    e360:	bd10      	pop	{r4, pc}
    e362:	2001      	movs	r0, #1
    e364:	bd10      	pop	{r4, pc}
    e366:	2801      	cmp	r0, #1
    e368:	d002      	beq.n	e370 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e36a:	2802      	cmp	r0, #2
    e36c:	d003      	beq.n	e376 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x2e>
    e36e:	e004      	b.n	e37a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e370:	2901      	cmp	r1, #1
    e372:	d004      	beq.n	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e374:	e001      	b.n	e37a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e376:	2902      	cmp	r1, #2
    e378:	d001      	beq.n	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e37a:	2000      	movs	r0, #0
    e37c:	4770      	bx	lr
    e37e:	2001      	movs	r0, #1
    e380:	4770      	bx	lr
    e382:	4401      	add	r1, r0
    e384:	2914      	cmp	r1, #20
    e386:	dd01      	ble.n	e38c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x44>
    e388:	2014      	movs	r0, #20
    e38a:	4770      	bx	lr
    e38c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e390:	4281      	cmp	r1, r0
    e392:	dbfa      	blt.n	e38a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x42>
    e394:	b248      	sxtb	r0, r1
    e396:	4770      	bx	lr

0000e398 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e398:	b570      	push	{r4, r5, r6, lr}
    e39a:	4605      	mov	r5, r0
    e39c:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e3a0:	b286      	uxth	r6, r0
    e3a2:	4610      	mov	r0, r2
    e3a4:	7aec      	ldrb	r4, [r5, #11]
    e3a6:	4631      	mov	r1, r6
    e3a8:	f000 f863 	bl	e472 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e3ac:	4070      	eors	r0, r6
    e3ae:	2125      	movs	r1, #37	; 0x25
    e3b0:	fbb0 f2f1 	udiv	r2, r0, r1
    e3b4:	fb01 0112 	mls	r1, r1, r2, r0
    e3b8:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e3bc:	f001 0307 	and.w	r3, r1, #7
    e3c0:	7852      	ldrb	r2, [r2, #1]
    e3c2:	2601      	movs	r6, #1
    e3c4:	409e      	lsls	r6, r3
    e3c6:	4232      	tst	r2, r6
    e3c8:	d001      	beq.n	e3ce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e3ca:	4608      	mov	r0, r1
    e3cc:	bd70      	pop	{r4, r5, r6, pc}
    e3ce:	4344      	muls	r4, r0
    e3d0:	0c21      	lsrs	r1, r4, #16
    e3d2:	4628      	mov	r0, r5
    e3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e3d8:	f7f4 baae 	b.w	2938 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000e3dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e3dc:	b510      	push	{r4, lr}
    e3de:	4604      	mov	r4, r0
    e3e0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e3e4:	b108      	cbz	r0, e3ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e3e6:	2825      	cmp	r0, #37	; 0x25
    e3e8:	d901      	bls.n	e3ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e3ea:	2012      	movs	r0, #18
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	b132      	cbz	r2, e3fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e3f0:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e3f4:	b128      	cbz	r0, e402 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e3f6:	2801      	cmp	r0, #1
    e3f8:	d009      	beq.n	e40e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e3fa:	201f      	movs	r0, #31
    e3fc:	bd10      	pop	{r4, pc}
    e3fe:	2000      	movs	r0, #0
    e400:	bd10      	pop	{r4, pc}
    e402:	4620      	mov	r0, r4
    e404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e408:	4611      	mov	r1, r2
    e40a:	f7f4 ba4d 	b.w	28a8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    e40e:	8aa2      	ldrh	r2, [r4, #20]
    e410:	6949      	ldr	r1, [r1, #20]
    e412:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e416:	f7ff ffbf 	bl	e398 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e41a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e41e:	e7ee      	b.n	e3fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e420:	b570      	push	{r4, r5, r6, lr}
    e422:	4604      	mov	r4, r0
    e424:	1c40      	adds	r0, r0, #1
    e426:	4288      	cmp	r0, r1
    e428:	d004      	beq.n	e434 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e42a:	6808      	ldr	r0, [r1, #0]
    e42c:	f8c4 0001 	str.w	r0, [r4, #1]
    e430:	7908      	ldrb	r0, [r1, #4]
    e432:	7160      	strb	r0, [r4, #5]
    e434:	7960      	ldrb	r0, [r4, #5]
    e436:	f000 001f 	and.w	r0, r0, #31
    e43a:	7160      	strb	r0, [r4, #5]
    e43c:	2000      	movs	r0, #0
    e43e:	72e0      	strb	r0, [r4, #11]
    e440:	4605      	mov	r5, r0
    e442:	1966      	adds	r6, r4, r5
    e444:	7870      	ldrb	r0, [r6, #1]
    e446:	f000 fb16 	bl	ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e44a:	71b0      	strb	r0, [r6, #6]
    e44c:	7ae1      	ldrb	r1, [r4, #11]
    e44e:	1c6d      	adds	r5, r5, #1
    e450:	4408      	add	r0, r1
    e452:	b2ed      	uxtb	r5, r5
    e454:	72e0      	strb	r0, [r4, #11]
    e456:	2d05      	cmp	r5, #5
    e458:	d3f3      	bcc.n	e442 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e45a:	bd70      	pop	{r4, r5, r6, pc}
    e45c:	b2c1      	uxtb	r1, r0
    e45e:	fa91 f1a1 	rbit	r1, r1
    e462:	0a00      	lsrs	r0, r0, #8
    e464:	0e09      	lsrs	r1, r1, #24
    e466:	fa90 f0a0 	rbit	r0, r0
    e46a:	0e00      	lsrs	r0, r0, #24
    e46c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e470:	4770      	bx	lr
    e472:	b570      	push	{r4, r5, r6, lr}
    e474:	460d      	mov	r5, r1
    e476:	4048      	eors	r0, r1
    e478:	2400      	movs	r4, #0
    e47a:	f7ff ffef 	bl	e45c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e47e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e482:	1c64      	adds	r4, r4, #1
    e484:	4428      	add	r0, r5
    e486:	b2e4      	uxtb	r4, r4
    e488:	b280      	uxth	r0, r0
    e48a:	2c03      	cmp	r4, #3
    e48c:	d3f5      	bcc.n	e47a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e48e:	bd70      	pop	{r4, r5, r6, pc}

0000e490 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    e490:	7841      	ldrb	r1, [r0, #1]
    e492:	7800      	ldrb	r0, [r0, #0]
    e494:	f010 000f 	ands.w	r0, r0, #15
    e498:	d005      	beq.n	e4a6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e49a:	2801      	cmp	r0, #1
    e49c:	d007      	beq.n	e4ae <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    e49e:	2802      	cmp	r0, #2
    e4a0:	d001      	beq.n	e4a6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e4a2:	2806      	cmp	r0, #6
    e4a4:	d105      	bne.n	e4b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4a6:	1f89      	subs	r1, r1, #6
    e4a8:	291f      	cmp	r1, #31
    e4aa:	d904      	bls.n	e4b6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4ac:	e001      	b.n	e4b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4ae:	290c      	cmp	r1, #12
    e4b0:	d001      	beq.n	e4b6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4b2:	2000      	movs	r0, #0
    e4b4:	4770      	bx	lr
    e4b6:	2001      	movs	r0, #1
    e4b8:	4770      	bx	lr

0000e4ba <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    e4ba:	7800      	ldrb	r0, [r0, #0]
    e4bc:	09c0      	lsrs	r0, r0, #7
    e4be:	4770      	bx	lr

0000e4c0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    e4c0:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e4c4:	600a      	str	r2, [r1, #0]
    e4c6:	8880      	ldrh	r0, [r0, #4]
    e4c8:	8088      	strh	r0, [r1, #4]
    e4ca:	4770      	bx	lr

0000e4cc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    e4cc:	7800      	ldrb	r0, [r0, #0]
    e4ce:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e4d2:	4770      	bx	lr

0000e4d4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    e4d4:	7801      	ldrb	r1, [r0, #0]
    e4d6:	f001 010f 	and.w	r1, r1, #15
    e4da:	2904      	cmp	r1, #4
    e4dc:	d105      	bne.n	e4ea <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e4de:	7840      	ldrb	r0, [r0, #1]
    e4e0:	1f80      	subs	r0, r0, #6
    e4e2:	281f      	cmp	r0, #31
    e4e4:	d801      	bhi.n	e4ea <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e4e6:	2001      	movs	r0, #1
    e4e8:	4770      	bx	lr
    e4ea:	2000      	movs	r0, #0
    e4ec:	4770      	bx	lr

0000e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e4ee:	b510      	push	{r4, lr}
    e4f0:	7802      	ldrb	r2, [r0, #0]
    e4f2:	f001 030f 	and.w	r3, r1, #15
    e4f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e4fa:	431a      	orrs	r2, r3
    e4fc:	7002      	strb	r2, [r0, #0]
    e4fe:	2907      	cmp	r1, #7
    e500:	d20c      	bcs.n	e51c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e502:	e8df f001 	tbb	[pc, r1]
    e506:	0604      	.short	0x0604
    e508:	08040604 	.word	0x08040604
    e50c:	0004      	.short	0x0004
    e50e:	2106      	movs	r1, #6
    e510:	e002      	b.n	e518 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e512:	210c      	movs	r1, #12
    e514:	e000      	b.n	e518 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e516:	2122      	movs	r1, #34	; 0x22
    e518:	7041      	strb	r1, [r0, #1]
    e51a:	bd10      	pop	{r4, pc}
    e51c:	21a8      	movs	r1, #168	; 0xa8
    e51e:	202a      	movs	r0, #42	; 0x2a
    e520:	f7f2 faa0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e524 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e524:	680a      	ldr	r2, [r1, #0]
    e526:	f840 2f09 	str.w	r2, [r0, #9]!
    e52a:	8889      	ldrh	r1, [r1, #4]
    e52c:	8081      	strh	r1, [r0, #4]
    e52e:	4770      	bx	lr

0000e530 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e530:	7802      	ldrb	r2, [r0, #0]
    e532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e536:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e53a:	7002      	strb	r2, [r0, #0]
    e53c:	4770      	bx	lr

0000e53e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e53e:	680a      	ldr	r2, [r1, #0]
    e540:	f840 2f03 	str.w	r2, [r0, #3]!
    e544:	8889      	ldrh	r1, [r1, #4]
    e546:	8081      	strh	r1, [r0, #4]
    e548:	4770      	bx	lr

0000e54a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e54a:	7802      	ldrb	r2, [r0, #0]
    e54c:	2340      	movs	r3, #64	; 0x40
    e54e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e552:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e556:	430a      	orrs	r2, r1
    e558:	7002      	strb	r2, [r0, #0]
    e55a:	4770      	bx	lr

0000e55c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    e55c:	680a      	ldr	r2, [r1, #0]
    e55e:	6042      	str	r2, [r0, #4]
    e560:	7909      	ldrb	r1, [r1, #4]
    e562:	7201      	strb	r1, [r0, #8]
    e564:	4770      	bx	lr

0000e566 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    e566:	72c1      	strb	r1, [r0, #11]
    e568:	0a09      	lsrs	r1, r1, #8
    e56a:	7301      	strb	r1, [r0, #12]
    e56c:	4770      	bx	lr

0000e56e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e56e:	b510      	push	{r4, lr}
    e570:	29fb      	cmp	r1, #251	; 0xfb
    e572:	d904      	bls.n	e57e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e574:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e578:	202a      	movs	r0, #42	; 0x2a
    e57a:	f7f2 fa73 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e57e:	7041      	strb	r1, [r0, #1]
    e580:	bd10      	pop	{r4, pc}

0000e582 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e582:	8809      	ldrh	r1, [r1, #0]
    e584:	8181      	strh	r1, [r0, #12]
    e586:	4770      	bx	lr

0000e588 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e588:	6809      	ldr	r1, [r1, #0]
    e58a:	f8c0 1016 	str.w	r1, [r0, #22]
    e58e:	4770      	bx	lr

0000e590 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e590:	680a      	ldr	r2, [r1, #0]
    e592:	6042      	str	r2, [r0, #4]
    e594:	6849      	ldr	r1, [r1, #4]
    e596:	6081      	str	r1, [r0, #8]
    e598:	4770      	bx	lr

0000e59a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e59a:	680a      	ldr	r2, [r1, #0]
    e59c:	f840 2f0e 	str.w	r2, [r0, #14]!
    e5a0:	6849      	ldr	r1, [r1, #4]
    e5a2:	6041      	str	r1, [r0, #4]
    e5a4:	4770      	bx	lr

0000e5a6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e5a6:	68c0      	ldr	r0, [r0, #12]
    e5a8:	6008      	str	r0, [r1, #0]
    e5aa:	4770      	bx	lr

0000e5ac <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e5ac:	6842      	ldr	r2, [r0, #4]
    e5ae:	600a      	str	r2, [r1, #0]
    e5b0:	6880      	ldr	r0, [r0, #8]
    e5b2:	6048      	str	r0, [r1, #4]
    e5b4:	4770      	bx	lr

0000e5b6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e5b6:	7800      	ldrb	r0, [r0, #0]
    e5b8:	f000 0003 	and.w	r0, r0, #3
    e5bc:	4770      	bx	lr

0000e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e5be:	8880      	ldrh	r0, [r0, #4]
    e5c0:	4770      	bx	lr

0000e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e5c2:	88c0      	ldrh	r0, [r0, #6]
    e5c4:	4770      	bx	lr

0000e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e5c6:	8900      	ldrh	r0, [r0, #8]
    e5c8:	4770      	bx	lr

0000e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e5ca:	8940      	ldrh	r0, [r0, #10]
    e5cc:	4770      	bx	lr

0000e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e5ce:	8901      	ldrh	r1, [r0, #8]
    e5d0:	291b      	cmp	r1, #27
    e5d2:	d30c      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5d4:	8941      	ldrh	r1, [r0, #10]
    e5d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e5da:	4291      	cmp	r1, r2
    e5dc:	d307      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5de:	8881      	ldrh	r1, [r0, #4]
    e5e0:	291b      	cmp	r1, #27
    e5e2:	d304      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5e4:	88c0      	ldrh	r0, [r0, #6]
    e5e6:	4290      	cmp	r0, r2
    e5e8:	d301      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5ea:	2001      	movs	r0, #1
    e5ec:	4770      	bx	lr
    e5ee:	2000      	movs	r0, #0
    e5f0:	4770      	bx	lr

0000e5f2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e5f2:	7901      	ldrb	r1, [r0, #4]
    e5f4:	0749      	lsls	r1, r1, #29
    e5f6:	d004      	beq.n	e602 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e5f8:	7940      	ldrb	r0, [r0, #5]
    e5fa:	0740      	lsls	r0, r0, #29
    e5fc:	d001      	beq.n	e602 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e5fe:	2001      	movs	r0, #1
    e600:	4770      	bx	lr
    e602:	2000      	movs	r0, #0
    e604:	4770      	bx	lr

0000e606 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e606:	7181      	strb	r1, [r0, #6]
    e608:	0a09      	lsrs	r1, r1, #8
    e60a:	71c1      	strb	r1, [r0, #7]
    e60c:	4770      	bx	lr

0000e60e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e60e:	7101      	strb	r1, [r0, #4]
    e610:	4770      	bx	lr

0000e612 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e612:	7141      	strb	r1, [r0, #5]
    e614:	4770      	bx	lr

0000e616 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e616:	7901      	ldrb	r1, [r0, #4]
    e618:	0749      	lsls	r1, r1, #29
    e61a:	d004      	beq.n	e626 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e61c:	7940      	ldrb	r0, [r0, #5]
    e61e:	0740      	lsls	r0, r0, #29
    e620:	d001      	beq.n	e626 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e622:	2001      	movs	r0, #1
    e624:	4770      	bx	lr
    e626:	2000      	movs	r0, #0
    e628:	4770      	bx	lr

0000e62a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e62a:	7900      	ldrb	r0, [r0, #4]
    e62c:	4770      	bx	lr

0000e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e62e:	7101      	strb	r1, [r0, #4]
    e630:	4770      	bx	lr

0000e632 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e632:	7940      	ldrb	r0, [r0, #5]
    e634:	4770      	bx	lr

0000e636 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e636:	7141      	strb	r1, [r0, #5]
    e638:	4770      	bx	lr

0000e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e63a:	7802      	ldrb	r2, [r0, #0]
    e63c:	f001 0103 	and.w	r1, r1, #3
    e640:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e644:	430a      	orrs	r2, r1
    e646:	7002      	strb	r2, [r0, #0]
    e648:	4770      	bx	lr

0000e64a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e64a:	7101      	strb	r1, [r0, #4]
    e64c:	0a09      	lsrs	r1, r1, #8
    e64e:	7141      	strb	r1, [r0, #5]
    e650:	4770      	bx	lr

0000e652 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e652:	7181      	strb	r1, [r0, #6]
    e654:	0a09      	lsrs	r1, r1, #8
    e656:	71c1      	strb	r1, [r0, #7]
    e658:	4770      	bx	lr

0000e65a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e65a:	7201      	strb	r1, [r0, #8]
    e65c:	0a09      	lsrs	r1, r1, #8
    e65e:	7241      	strb	r1, [r0, #9]
    e660:	4770      	bx	lr

0000e662 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e662:	7281      	strb	r1, [r0, #10]
    e664:	0a09      	lsrs	r1, r1, #8
    e666:	72c1      	strb	r1, [r0, #11]
    e668:	4770      	bx	lr

0000e66a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e66a:	7900      	ldrb	r0, [r0, #4]
    e66c:	4770      	bx	lr

0000e66e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e66e:	7900      	ldrb	r0, [r0, #4]
    e670:	4770      	bx	lr

0000e672 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e672:	b510      	push	{r4, lr}
    e674:	7a01      	ldrb	r1, [r0, #8]
    e676:	b119      	cbz	r1, e680 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e678:	2901      	cmp	r1, #1
    e67a:	d006      	beq.n	e68a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e67c:	2000      	movs	r0, #0
    e67e:	bd10      	pop	{r4, pc}
    e680:	88c2      	ldrh	r2, [r0, #6]
    e682:	6803      	ldr	r3, [r0, #0]
    e684:	8880      	ldrh	r0, [r0, #4]
    e686:	2102      	movs	r1, #2
    e688:	e003      	b.n	e692 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e68a:	88c2      	ldrh	r2, [r0, #6]
    e68c:	6803      	ldr	r3, [r0, #0]
    e68e:	8880      	ldrh	r0, [r0, #4]
    e690:	2101      	movs	r1, #1
    e692:	f7f4 f9bb 	bl	2a0c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e696:	b908      	cbnz	r0, e69c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e698:	f7f4 fa02 	bl	2aa0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e69c:	2001      	movs	r0, #1
    e69e:	bd10      	pop	{r4, pc}

0000e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e6a0:	b508      	push	{r3, lr}
    e6a2:	7a03      	ldrb	r3, [r0, #8]
    e6a4:	f88d 3000 	strb.w	r3, [sp]
    e6a8:	9b00      	ldr	r3, [sp, #0]
    e6aa:	9300      	str	r3, [sp, #0]
    e6ac:	f89d 3000 	ldrb.w	r3, [sp]
    e6b0:	b123      	cbz	r3, e6bc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e6b2:	f240 3117 	movw	r1, #791	; 0x317
    e6b6:	2010      	movs	r0, #16
    e6b8:	f7f2 f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e6c0:	f7f4 bb74 	b.w	2dac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e6c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e6c4:	f7f4 bba0 	b.w	2e08 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e6c8:	7a03      	ldrb	r3, [r0, #8]
    e6ca:	b082      	sub	sp, #8
    e6cc:	f88d 3000 	strb.w	r3, [sp]
    e6d0:	9b00      	ldr	r3, [sp, #0]
    e6d2:	9300      	str	r3, [sp, #0]
    e6d4:	f89d 3000 	ldrb.w	r3, [sp]
    e6d8:	2b00      	cmp	r3, #0
    e6da:	d102      	bne.n	e6e2 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e6dc:	b002      	add	sp, #8
    e6de:	f7f4 bb65 	b.w	2dac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e6e2:	b002      	add	sp, #8
    e6e4:	4770      	bx	lr
    e6e6:	2000      	movs	r0, #0
    e6e8:	7048      	strb	r0, [r1, #1]
    e6ea:	2003      	movs	r0, #3
    e6ec:	7008      	strb	r0, [r1, #0]
    e6ee:	2001      	movs	r0, #1
    e6f0:	7108      	strb	r0, [r1, #4]
    e6f2:	4770      	bx	lr

0000e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e6f4:	b510      	push	{r4, lr}
    e6f6:	888c      	ldrh	r4, [r1, #4]
    e6f8:	890a      	ldrh	r2, [r1, #8]
    e6fa:	884b      	ldrh	r3, [r1, #2]
    e6fc:	88c9      	ldrh	r1, [r1, #6]
    e6fe:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e702:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e706:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e70a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e70e:	bd10      	pop	{r4, pc}

0000e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e710:	b570      	push	{r4, r5, r6, lr}
    e712:	4615      	mov	r5, r2
    e714:	460c      	mov	r4, r1
    e716:	f000 f91a 	bl	e94e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e71a:	3096      	adds	r0, #150	; 0x96
    e71c:	4428      	add	r0, r5
    e71e:	42a0      	cmp	r0, r4
    e720:	d801      	bhi.n	e726 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e722:	1a20      	subs	r0, r4, r0
    e724:	bd70      	pop	{r4, r5, r6, pc}
    e726:	2000      	movs	r0, #0
    e728:	bd70      	pop	{r4, r5, r6, pc}

0000e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e72e:	4604      	mov	r4, r0
    e730:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e732:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e734:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e738:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e73c:	4285      	cmp	r5, r0
    e73e:	d300      	bcc.n	e742 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e740:	4605      	mov	r5, r0
    e742:	4620      	mov	r0, r4
    e744:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e748:	f000 f89c 	bl	e884 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e74c:	4601      	mov	r1, r0
    e74e:	86e5      	strh	r5, [r4, #54]	; 0x36
    e750:	8761      	strh	r1, [r4, #58]	; 0x3a
    e752:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e754:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e75a:	4680      	mov	r8, r0
    e75c:	42aa      	cmp	r2, r5
    e75e:	d200      	bcs.n	e762 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e760:	462a      	mov	r2, r5
    e762:	428b      	cmp	r3, r1
    e764:	d200      	bcs.n	e768 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e766:	460b      	mov	r3, r1
    e768:	8202      	strh	r2, [r0, #16]
    e76a:	f8a8 3012 	strh.w	r3, [r8, #18]
    e76e:	42bd      	cmp	r5, r7
    e770:	d101      	bne.n	e776 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e772:	42b1      	cmp	r1, r6
    e774:	d001      	beq.n	e77a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e776:	2001      	movs	r0, #1
    e778:	e000      	b.n	e77c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e77a:	2000      	movs	r0, #0
    e77c:	4681      	mov	r9, r0
    e77e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e782:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e786:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e788:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e78a:	4285      	cmp	r5, r0
    e78c:	d300      	bcc.n	e790 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e78e:	4605      	mov	r5, r0
    e790:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e794:	4620      	mov	r0, r4
    e796:	f000 f87d 	bl	e894 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e79a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e79e:	2902      	cmp	r1, #2
    e7a0:	d108      	bne.n	e7b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e7a2:	42af      	cmp	r7, r5
    e7a4:	d200      	bcs.n	e7a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e7a6:	463d      	mov	r5, r7
    e7a8:	4286      	cmp	r6, r0
    e7aa:	d200      	bcs.n	e7ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e7ac:	4630      	mov	r0, r6
    e7ae:	2100      	movs	r1, #0
    e7b0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e7b4:	f8a8 5008 	strh.w	r5, [r8, #8]
    e7b8:	f8a8 000c 	strh.w	r0, [r8, #12]
    e7bc:	42bd      	cmp	r5, r7
    e7be:	d101      	bne.n	e7c4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e7c0:	42b0      	cmp	r0, r6
    e7c2:	d001      	beq.n	e7c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e7c4:	2001      	movs	r0, #1
    e7c6:	e000      	b.n	e7ca <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e7c8:	2000      	movs	r0, #0
    e7ca:	ea40 0009 	orr.w	r0, r0, r9
    e7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e7d2:	6840      	ldr	r0, [r0, #4]
    e7d4:	4770      	bx	lr

0000e7d6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7da:	4616      	mov	r6, r2
    e7dc:	460f      	mov	r7, r1
    e7de:	4604      	mov	r4, r0
    e7e0:	f000 f8b5 	bl	e94e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e7e4:	4605      	mov	r5, r0
    e7e6:	463a      	mov	r2, r7
    e7e8:	6921      	ldr	r1, [r4, #16]
    e7ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e7ec:	f000 f845 	bl	e87a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e7f0:	19a9      	adds	r1, r5, r6
    e7f2:	4281      	cmp	r1, r0
    e7f4:	d300      	bcc.n	e7f8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e7f6:	4608      	mov	r0, r1
    e7f8:	6320      	str	r0, [r4, #48]	; 0x30
    e7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e7fe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e7fe:	221b      	movs	r2, #27
    e800:	8402      	strh	r2, [r0, #32]
    e802:	8382      	strh	r2, [r0, #28]
    e804:	82c2      	strh	r2, [r0, #22]
    e806:	8282      	strh	r2, [r0, #20]
    e808:	8142      	strh	r2, [r0, #10]
    e80a:	8202      	strh	r2, [r0, #16]
    e80c:	8102      	strh	r2, [r0, #8]
    e80e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e810:	8582      	strh	r2, [r0, #44]	; 0x2c
    e812:	8482      	strh	r2, [r0, #36]	; 0x24
    e814:	2900      	cmp	r1, #0
    e816:	d10a      	bne.n	e82e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e818:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e81c:	8441      	strh	r1, [r0, #34]	; 0x22
    e81e:	83c1      	strh	r1, [r0, #30]
    e820:	8341      	strh	r1, [r0, #26]
    e822:	8301      	strh	r1, [r0, #24]
    e824:	81c1      	strh	r1, [r0, #14]
    e826:	8241      	strh	r1, [r0, #18]
    e828:	8181      	strh	r1, [r0, #12]
    e82a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e82c:	8601      	strh	r1, [r0, #48]	; 0x30
    e82e:	4770      	bx	lr

0000e830 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e830:	6800      	ldr	r0, [r0, #0]
    e832:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e836:	4290      	cmp	r0, r2
    e838:	d903      	bls.n	e842 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e83a:	1a40      	subs	r0, r0, r1
    e83c:	389c      	subs	r0, #156	; 0x9c
    e83e:	0840      	lsrs	r0, r0, #1
    e840:	4770      	bx	lr
    e842:	2000      	movs	r0, #0
    e844:	4770      	bx	lr

0000e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e846:	b510      	push	{r4, lr}
    e848:	9c02      	ldr	r4, [sp, #8]
    e84a:	8281      	strh	r1, [r0, #20]
    e84c:	82c2      	strh	r2, [r0, #22]
    e84e:	8303      	strh	r3, [r0, #24]
    e850:	8344      	strh	r4, [r0, #26]
    e852:	bd10      	pop	{r4, pc}
    e854:	1d00      	adds	r0, r0, #4
    e856:	b510      	push	{r4, lr}
    e858:	b280      	uxth	r0, r0
    e85a:	2901      	cmp	r1, #1
    e85c:	d006      	beq.n	e86c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e85e:	2902      	cmp	r1, #2
    e860:	d007      	beq.n	e872 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e862:	f240 2126 	movw	r1, #550	; 0x226
    e866:	2006      	movs	r0, #6
    e868:	f7f2 f8fc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e86c:	00c0      	lsls	r0, r0, #3
    e86e:	3050      	adds	r0, #80	; 0x50
    e870:	e001      	b.n	e876 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e872:	0080      	lsls	r0, r0, #2
    e874:	302c      	adds	r0, #44	; 0x2c
    e876:	b280      	uxth	r0, r0
    e878:	bd10      	pop	{r4, pc}
    e87a:	4288      	cmp	r0, r1
    e87c:	d300      	bcc.n	e880 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e87e:	4608      	mov	r0, r1
    e880:	1a80      	subs	r0, r0, r2
    e882:	4770      	bx	lr
    e884:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e888:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e88c:	4281      	cmp	r1, r0
    e88e:	d200      	bcs.n	e892 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e890:	4608      	mov	r0, r1
    e892:	4770      	bx	lr
    e894:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e898:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e89c:	4281      	cmp	r1, r0
    e89e:	d200      	bcs.n	e8a2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e8a0:	4608      	mov	r0, r1
    e8a2:	4770      	bx	lr
    e8a4:	b538      	push	{r3, r4, r5, lr}
    e8a6:	2200      	movs	r2, #0
    e8a8:	f1a0 0318 	sub.w	r3, r0, #24
    e8ac:	2416      	movs	r4, #22
    e8ae:	7202      	strb	r2, [r0, #8]
    e8b0:	704a      	strb	r2, [r1, #1]
    e8b2:	700c      	strb	r4, [r1, #0]
    e8b4:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e8b8:	604d      	str	r5, [r1, #4]
    e8ba:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e8be:	608d      	str	r5, [r1, #8]
    e8c0:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e8c4:	60cd      	str	r5, [r1, #12]
    e8c6:	7a05      	ldrb	r5, [r0, #8]
    e8c8:	f88d 5000 	strb.w	r5, [sp]
    e8cc:	9d00      	ldr	r5, [sp, #0]
    e8ce:	9500      	str	r5, [sp, #0]
    e8d0:	f89d 5000 	ldrb.w	r5, [sp]
    e8d4:	2d00      	cmp	r5, #0
    e8d6:	d1ea      	bne.n	e8ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e8d8:	bd38      	pop	{r3, r4, r5, pc}
    e8da:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8dc:	b087      	sub	sp, #28
    e8de:	460d      	mov	r5, r1
    e8e0:	4604      	mov	r4, r0
    e8e2:	f7f4 f87f 	bl	29e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e8e6:	2600      	movs	r6, #0
    e8e8:	b328      	cbz	r0, e936 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e8ea:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e8ee:	7226      	strb	r6, [r4, #8]
    e8f0:	8807      	ldrh	r7, [r0, #0]
    e8f2:	a903      	add	r1, sp, #12
    e8f4:	4638      	mov	r0, r7
    e8f6:	f001 fbab 	bl	10050 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e8fa:	b108      	cbz	r0, e900 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e8fc:	21fd      	movs	r1, #253	; 0xfd
    e8fe:	e017      	b.n	e930 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e900:	f8ad 7000 	strh.w	r7, [sp]
    e904:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e908:	f8ad 0002 	strh.w	r0, [sp, #2]
    e90c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e910:	f8ad 0004 	strh.w	r0, [sp, #4]
    e914:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e918:	f8ad 0006 	strh.w	r0, [sp, #6]
    e91c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e920:	f8ad 0008 	strh.w	r0, [sp, #8]
    e924:	4668      	mov	r0, sp
    e926:	f001 fbba 	bl	1009e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e92a:	b120      	cbz	r0, e936 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e92c:	f44f 7183 	mov.w	r1, #262	; 0x106
    e930:	202c      	movs	r0, #44	; 0x2c
    e932:	f7f2 f897 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e936:	201f      	movs	r0, #31
    e938:	7028      	strb	r0, [r5, #0]
    e93a:	706e      	strb	r6, [r5, #1]
    e93c:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e940:	6068      	str	r0, [r5, #4]
    e942:	6860      	ldr	r0, [r4, #4]
    e944:	60a8      	str	r0, [r5, #8]
    e946:	8920      	ldrh	r0, [r4, #8]
    e948:	81a8      	strh	r0, [r5, #12]
    e94a:	b007      	add	sp, #28
    e94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e94e:	2196      	movs	r1, #150	; 0x96
    e950:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e954:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e958:	f000 b800 	b.w	e95c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e960:	460d      	mov	r5, r1
    e962:	4606      	mov	r6, r0
    e964:	4698      	mov	r8, r3
    e966:	4617      	mov	r7, r2
    e968:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e96a:	4611      	mov	r1, r2
    e96c:	f7ff ff72 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e970:	4604      	mov	r4, r0
    e972:	4639      	mov	r1, r7
    e974:	4630      	mov	r0, r6
    e976:	f7ff ff8d 	bl	e894 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e97a:	42a0      	cmp	r0, r4
    e97c:	d200      	bcs.n	e980 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e97e:	4604      	mov	r4, r0
    e980:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e982:	4641      	mov	r1, r8
    e984:	f7ff ff66 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e988:	4607      	mov	r7, r0
    e98a:	4641      	mov	r1, r8
    e98c:	4630      	mov	r0, r6
    e98e:	f7ff ff79 	bl	e884 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e992:	42b8      	cmp	r0, r7
    e994:	d300      	bcc.n	e998 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e996:	4638      	mov	r0, r7
    e998:	4420      	add	r0, r4
    e99a:	4428      	add	r0, r5
    e99c:	1d80      	adds	r0, r0, #6
    e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e9a2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e9a2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9a6:	2700      	movs	r7, #0
    e9a8:	463d      	mov	r5, r7
    e9aa:	2623      	movs	r6, #35	; 0x23
    e9ac:	46b8      	mov	r8, r7
    e9ae:	f7f4 fae9 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e9b2:	4604      	mov	r4, r0
    e9b4:	f7f4 faae 	bl	2f14 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e9b8:	b190      	cbz	r0, e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e9ba:	f8cd 8000 	str.w	r8, [sp]
    e9be:	f8cd 8004 	str.w	r8, [sp, #4]
    e9c2:	e003      	b.n	e9cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e9c4:	9800      	ldr	r0, [sp, #0]
    e9c6:	6941      	ldr	r1, [r0, #20]
    e9c8:	42a1      	cmp	r1, r4
    e9ca:	d009      	beq.n	e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e9cc:	4668      	mov	r0, sp
    e9ce:	f7f2 fa67 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e9d2:	2800      	cmp	r0, #0
    e9d4:	d0f6      	beq.n	e9c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e9d6:	4625      	mov	r5, r4
    e9d8:	4620      	mov	r0, r4
    e9da:	f7f4 fa65 	bl	2ea8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e9de:	4607      	mov	r7, r0
    e9e0:	1e76      	subs	r6, r6, #1
    e9e2:	d001      	beq.n	e9e8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e9e4:	2f00      	cmp	r7, #0
    e9e6:	d0e2      	beq.n	e9ae <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e9e8:	b115      	cbz	r5, e9f0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e9ea:	4628      	mov	r0, r5
    e9ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e9f0:	f240 1167 	movw	r1, #359	; 0x167
    e9f4:	200f      	movs	r0, #15
    e9f6:	f7f2 f835 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9fa:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e9fe:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea02:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea06:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea0a:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea0e:	ea10 0f40 	tst.w	r0, r0, lsl #1
    ea12:	d001      	beq.n	ea18 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    ea14:	2000      	movs	r0, #0
    ea16:	4770      	bx	lr
    ea18:	2001      	movs	r0, #1
    ea1a:	4770      	bx	lr
    ea1c:	b510      	push	{r4, lr}
    ea1e:	4604      	mov	r4, r0
    ea20:	2108      	movs	r1, #8
    ea22:	4620      	mov	r0, r4
    ea24:	f7f2 f8be 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ea28:	6820      	ldr	r0, [r4, #0]
    ea2a:	2800      	cmp	r0, #0
    ea2c:	d102      	bne.n	ea34 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    ea2e:	6860      	ldr	r0, [r4, #4]
    ea30:	2800      	cmp	r0, #0
    ea32:	d0f5      	beq.n	ea20 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    ea34:	bd10      	pop	{r4, pc}

0000ea36 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    ea36:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    ea3a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    ea3e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ea42:	4408      	add	r0, r1
    ea44:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    ea48:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    ea4c:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    ea50:	4408      	add	r0, r1
    ea52:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    ea56:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    ea5a:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    ea5e:	4408      	add	r0, r1
    ea60:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    ea64:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    ea68:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    ea6c:	4408      	add	r0, r1
    ea6e:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    ea72:	b2c0      	uxtb	r0, r0
    ea74:	4770      	bx	lr

0000ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    ea76:	f000 0155 	and.w	r1, r0, #85	; 0x55
    ea7a:	2255      	movs	r2, #85	; 0x55
    ea7c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ea80:	4408      	add	r0, r1
    ea82:	f000 0133 	and.w	r1, r0, #51	; 0x33
    ea86:	2233      	movs	r2, #51	; 0x33
    ea88:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    ea8c:	4408      	add	r0, r1
    ea8e:	f000 010f 	and.w	r1, r0, #15
    ea92:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    ea96:	4770      	bx	lr

0000ea98 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    ea98:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    ea9c:	f7ff bfcb 	b.w	ea36 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000eaa0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    eaa0:	b510      	push	{r4, lr}
    eaa2:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    eaa6:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    eaaa:	2000      	movs	r0, #0
    eaac:	7048      	strb	r0, [r1, #1]
    eaae:	230c      	movs	r3, #12
    eab0:	700b      	strb	r3, [r1, #0]
    eab2:	7108      	strb	r0, [r1, #4]
    eab4:	f8a1 4005 	strh.w	r4, [r1, #5]
    eab8:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    eabc:	71c8      	strb	r0, [r1, #7]
    eabe:	4620      	mov	r0, r4
    eac0:	f7f2 fb9c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    eac4:	f7fe fe98 	bl	d7f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    eac8:	b140      	cbz	r0, eadc <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    eaca:	4620      	mov	r0, r4
    eacc:	f7ff f97e 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ead0:	4620      	mov	r0, r4
    ead2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ead6:	2100      	movs	r1, #0
    ead8:	f7f2 ba28 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    eadc:	2160      	movs	r1, #96	; 0x60
    eade:	2063      	movs	r0, #99	; 0x63
    eae0:	f7f1 ffc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eae4 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    eae4:	b538      	push	{r3, r4, r5, lr}
    eae6:	2200      	movs	r2, #0
    eae8:	704a      	strb	r2, [r1, #1]
    eaea:	2309      	movs	r3, #9
    eaec:	700b      	strb	r3, [r1, #0]
    eaee:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    eaf2:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    eaf6:	7202      	strb	r2, [r0, #8]
    eaf8:	84da      	strh	r2, [r3, #38]	; 0x26
    eafa:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    eafe:	604d      	str	r5, [r1, #4]
    eb00:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    eb04:	608d      	str	r5, [r1, #8]
    eb06:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    eb0a:	818d      	strh	r5, [r1, #12]
    eb0c:	710a      	strb	r2, [r1, #4]
    eb0e:	7a05      	ldrb	r5, [r0, #8]
    eb10:	f88d 5000 	strb.w	r5, [sp]
    eb14:	9d00      	ldr	r5, [sp, #0]
    eb16:	9500      	str	r5, [sp, #0]
    eb18:	f89d 5000 	ldrb.w	r5, [sp]
    eb1c:	2d00      	cmp	r5, #0
    eb1e:	d1ea      	bne.n	eaf6 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    eb20:	bd38      	pop	{r3, r4, r5, pc}

0000eb22 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    eb22:	2200      	movs	r2, #0
    eb24:	704a      	strb	r2, [r1, #1]
    eb26:	220d      	movs	r2, #13
    eb28:	700a      	strb	r2, [r1, #0]
    eb2a:	f100 020a 	add.w	r2, r0, #10
    eb2e:	7a83      	ldrb	r3, [r0, #10]
    eb30:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    eb34:	710b      	strb	r3, [r1, #4]
    eb36:	8800      	ldrh	r0, [r0, #0]
    eb38:	80c8      	strh	r0, [r1, #6]
    eb3a:	7910      	ldrb	r0, [r2, #4]
    eb3c:	7208      	strb	r0, [r1, #8]
    eb3e:	4770      	bx	lr

0000eb40 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    eb40:	2200      	movs	r2, #0
    eb42:	704a      	strb	r2, [r1, #1]
    eb44:	220e      	movs	r2, #14
    eb46:	700a      	strb	r2, [r1, #0]
    eb48:	7a82      	ldrb	r2, [r0, #10]
    eb4a:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    eb4e:	710a      	strb	r2, [r1, #4]
    eb50:	8800      	ldrh	r0, [r0, #0]
    eb52:	80c8      	strh	r0, [r1, #6]
    eb54:	4770      	bx	lr

0000eb56 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    eb56:	b510      	push	{r4, lr}
    eb58:	6844      	ldr	r4, [r0, #4]
    eb5a:	7803      	ldrb	r3, [r0, #0]
    eb5c:	2100      	movs	r1, #0
    eb5e:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    eb62:	3488      	adds	r4, #136	; 0x88
    eb64:	4620      	mov	r0, r4
    eb66:	f7ff fa7b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb6a:	b110      	cbz	r0, eb72 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    eb6c:	2004      	movs	r0, #4
    eb6e:	7760      	strb	r0, [r4, #29]
    eb70:	bd10      	pop	{r4, pc}
    eb72:	21aa      	movs	r1, #170	; 0xaa
    eb74:	201c      	movs	r0, #28
    eb76:	f7f1 ff75 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb7a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    eb7a:	b510      	push	{r4, lr}
    eb7c:	4604      	mov	r4, r0
    eb7e:	6840      	ldr	r0, [r0, #4]
    eb80:	2300      	movs	r3, #0
    eb82:	4619      	mov	r1, r3
    eb84:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    eb88:	3088      	adds	r0, #136	; 0x88
    eb8a:	f7ff fa69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb8e:	b120      	cbz	r0, eb9a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    eb90:	6861      	ldr	r1, [r4, #4]
    eb92:	2000      	movs	r0, #0
    eb94:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    eb98:	bd10      	pop	{r4, pc}
    eb9a:	21b2      	movs	r1, #178	; 0xb2
    eb9c:	201c      	movs	r0, #28
    eb9e:	f7f1 ff61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba2:	2200      	movs	r2, #0
    eba4:	704a      	strb	r2, [r1, #1]
    eba6:	2208      	movs	r2, #8
    eba8:	700a      	strb	r2, [r1, #0]
    ebaa:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ebae:	604a      	str	r2, [r1, #4]
    ebb0:	6842      	ldr	r2, [r0, #4]
    ebb2:	608a      	str	r2, [r1, #8]
    ebb4:	8902      	ldrh	r2, [r0, #8]
    ebb6:	818a      	strh	r2, [r1, #12]
    ebb8:	7a80      	ldrb	r0, [r0, #10]
    ebba:	7388      	strb	r0, [r1, #14]
    ebbc:	4770      	bx	lr

0000ebbe <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    ebbe:	2200      	movs	r2, #0
    ebc0:	704a      	strb	r2, [r1, #1]
    ebc2:	2210      	movs	r2, #16
    ebc4:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    ebc8:	700a      	strb	r2, [r1, #0]
    ebca:	8800      	ldrh	r0, [r0, #0]
    ebcc:	8088      	strh	r0, [r1, #4]
    ebce:	4770      	bx	lr

0000ebd0 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    ebd0:	b538      	push	{r3, r4, r5, lr}
    ebd2:	2400      	movs	r4, #0
    ebd4:	704c      	strb	r4, [r1, #1]
    ebd6:	2501      	movs	r5, #1
    ebd8:	700d      	strb	r5, [r1, #0]
    ebda:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    ebde:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    ebe2:	710c      	strb	r4, [r1, #4]
    ebe4:	7204      	strb	r4, [r0, #8]
    ebe6:	881d      	ldrh	r5, [r3, #0]
    ebe8:	f8a1 5005 	strh.w	r5, [r1, #5]
    ebec:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    ebf0:	71cd      	strb	r5, [r1, #7]
    ebf2:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    ebf6:	810d      	strh	r5, [r1, #8]
    ebf8:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    ebfc:	814d      	strh	r5, [r1, #10]
    ebfe:	7a05      	ldrb	r5, [r0, #8]
    ec00:	f88d 5000 	strb.w	r5, [sp]
    ec04:	9d00      	ldr	r5, [sp, #0]
    ec06:	9500      	str	r5, [sp, #0]
    ec08:	f89d 5000 	ldrb.w	r5, [sp]
    ec0c:	2d00      	cmp	r5, #0
    ec0e:	d1e9      	bne.n	ebe4 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    ec10:	bd38      	pop	{r3, r4, r5, pc}

0000ec12 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec16:	7803      	ldrb	r3, [r0, #0]
    ec18:	6840      	ldr	r0, [r0, #4]
    ec1a:	2501      	movs	r5, #1
    ec1c:	f100 0488 	add.w	r4, r0, #136	; 0x88
    ec20:	f500 779c 	add.w	r7, r0, #312	; 0x138
    ec24:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    ec28:	f04f 0600 	mov.w	r6, #0
    ec2c:	0780      	lsls	r0, r0, #30
    ec2e:	d410      	bmi.n	ec52 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    ec30:	7f62      	ldrb	r2, [r4, #29]
    ec32:	2100      	movs	r1, #0
    ec34:	4620      	mov	r0, r4
    ec36:	f7ff fa13 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec3a:	b130      	cbz	r0, ec4a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    ec3c:	7765      	strb	r5, [r4, #29]
    ec3e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    ec42:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec4a:	216e      	movs	r1, #110	; 0x6e
    ec4c:	2040      	movs	r0, #64	; 0x40
    ec4e:	f7f1 ff09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec52:	2300      	movs	r3, #0
    ec54:	7fa2      	ldrb	r2, [r4, #30]
    ec56:	4619      	mov	r1, r3
    ec58:	4620      	mov	r0, r4
    ec5a:	f7ff fa01 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec5e:	b108      	cbz	r0, ec64 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    ec60:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    ec64:	74be      	strb	r6, [r7, #18]
    ec66:	e7ee      	b.n	ec46 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    ec68:	2200      	movs	r2, #0
    ec6a:	704a      	strb	r2, [r1, #1]
    ec6c:	221d      	movs	r2, #29
    ec6e:	700a      	strb	r2, [r1, #0]
    ec70:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ec74:	6048      	str	r0, [r1, #4]
    ec76:	4770      	bx	lr
    ec78:	b510      	push	{r4, lr}
    ec7a:	4604      	mov	r4, r0
    ec7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec80:	e9d4 1000 	ldrd	r1, r0, [r4]
    ec84:	4050      	eors	r0, r2
    ec86:	ea70 0101 	orns	r1, r0, r1
    ec8a:	d008      	beq.n	ec9e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ec8c:	f7fc fcf8 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ec90:	e9d4 2300 	ldrd	r2, r3, [r4]
    ec94:	1a80      	subs	r0, r0, r2
    ec96:	4199      	sbcs	r1, r3
    ec98:	d301      	bcc.n	ec9e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ec9a:	2001      	movs	r0, #1
    ec9c:	bd10      	pop	{r4, pc}
    ec9e:	2000      	movs	r0, #0
    eca0:	bd10      	pop	{r4, pc}
    eca2:	2801      	cmp	r0, #1
    eca4:	d102      	bne.n	ecac <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    eca6:	7948      	ldrb	r0, [r1, #5]
    eca8:	0980      	lsrs	r0, r0, #6
    ecaa:	d001      	beq.n	ecb0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    ecac:	2000      	movs	r0, #0
    ecae:	4770      	bx	lr
    ecb0:	2001      	movs	r0, #1
    ecb2:	4770      	bx	lr
    ecb4:	2801      	cmp	r0, #1
    ecb6:	d106      	bne.n	ecc6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    ecb8:	7948      	ldrb	r0, [r1, #5]
    ecba:	2101      	movs	r1, #1
    ecbc:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ecc0:	d101      	bne.n	ecc6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    ecc2:	2001      	movs	r0, #1
    ecc4:	4770      	bx	lr
    ecc6:	2000      	movs	r0, #0
    ecc8:	4770      	bx	lr
    ecca:	b118      	cbz	r0, ecd4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    eccc:	2802      	cmp	r0, #2
    ecce:	d001      	beq.n	ecd4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    ecd0:	2001      	movs	r0, #1
    ecd2:	4770      	bx	lr
    ecd4:	2000      	movs	r0, #0
    ecd6:	4770      	bx	lr
    ecd8:	2802      	cmp	r0, #2
    ecda:	d003      	beq.n	ece4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    ecdc:	2803      	cmp	r0, #3
    ecde:	d001      	beq.n	ece4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    ece0:	2000      	movs	r0, #0
    ece2:	4770      	bx	lr
    ece4:	2001      	movs	r0, #1
    ece6:	4770      	bx	lr

0000ece8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ece8:	f7f5 bbb0 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>

0000ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    ecec:	b510      	push	{r4, lr}
    ecee:	2000      	movs	r0, #0
    ecf0:	f7f5 f9e6 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    ecf4:	f7f4 fd6c 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ecf8:	f7f5 fbb6 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    ecfc:	2000      	movs	r0, #0
    ecfe:	bd10      	pop	{r4, pc}
    ed00:	b510      	push	{r4, lr}
    ed02:	f7f5 f9f7 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed06:	f7f4 fd63 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ed0a:	f7f9 f8af 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed0e:	2005      	movs	r0, #5
    ed10:	bd10      	pop	{r4, pc}
    ed12:	b510      	push	{r4, lr}
    ed14:	f7f5 f9ee 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed18:	f7f9 f8a8 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed1c:	2005      	movs	r0, #5
    ed1e:	bd10      	pop	{r4, pc}
    ed20:	b530      	push	{r4, r5, lr}
    ed22:	b08b      	sub	sp, #44	; 0x2c
    ed24:	4605      	mov	r5, r0
    ed26:	f7f5 f9e5 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed2a:	7828      	ldrb	r0, [r5, #0]
    ed2c:	4669      	mov	r1, sp
    ed2e:	f000 040f 	and.w	r4, r0, #15
    ed32:	4622      	mov	r2, r4
    ed34:	4628      	mov	r0, r5
    ed36:	f7f5 fd43 	bl	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ed3a:	2200      	movs	r2, #0
    ed3c:	4621      	mov	r1, r4
    ed3e:	4668      	mov	r0, sp
    ed40:	f7f4 fdce 	bl	38e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    ed44:	4621      	mov	r1, r4
    ed46:	4668      	mov	r0, sp
    ed48:	f7f5 f954 	bl	3ff4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x55c>
    ed4c:	4604      	mov	r4, r0
    ed4e:	f7f4 fd3f 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ed52:	b00b      	add	sp, #44	; 0x2c
    ed54:	4620      	mov	r0, r4
    ed56:	bd30      	pop	{r4, r5, pc}
    ed58:	f240 31a7 	movw	r1, #935	; 0x3a7
    ed5c:	2032      	movs	r0, #50	; 0x32
    ed5e:	f7f1 fe81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed62:	b510      	push	{r4, lr}
    ed64:	f7f5 f9c6 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed68:	f7f9 f880 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed70:	f7f5 bb82 	b.w	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    ed74:	f7f5 bb6a 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    ed78:	f7fe bef0 	b.w	db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    ed7c:	b570      	push	{r4, r5, r6, lr}
    ed7e:	4614      	mov	r4, r2
    ed80:	461d      	mov	r5, r3
    ed82:	4606      	mov	r6, r0
    ed84:	f7fc fc7c 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed88:	1900      	adds	r0, r0, r4
    ed8a:	4169      	adcs	r1, r5
    ed8c:	e9c6 0100 	strd	r0, r1, [r6]
    ed90:	bd70      	pop	{r4, r5, r6, pc}

0000ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    ed92:	b510      	push	{r4, lr}
    ed94:	f7f2 fa66 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ed98:	f000 f944 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    ed9c:	4604      	mov	r4, r0
    ed9e:	221c      	movs	r2, #28
    eda0:	2100      	movs	r1, #0
    eda2:	3009      	adds	r0, #9
    eda4:	f002 f949 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eda8:	207f      	movs	r0, #127	; 0x7f
    edaa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    edae:	21ff      	movs	r1, #255	; 0xff
    edb0:	75e1      	strb	r1, [r4, #23]
    edb2:	72a1      	strb	r1, [r4, #10]
    edb4:	7721      	strb	r1, [r4, #28]
    edb6:	7ce0      	ldrb	r0, [r4, #19]
    edb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    edbc:	3020      	adds	r0, #32
    edbe:	74e0      	strb	r0, [r4, #19]
    edc0:	bd10      	pop	{r4, pc}

0000edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    edc2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    edc6:	461d      	mov	r5, r3
    edc8:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    edcc:	4616      	mov	r6, r2
    edce:	4688      	mov	r8, r1
    edd0:	4681      	mov	r9, r0
    edd2:	f7f2 fa47 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    edd6:	4604      	mov	r4, r0
    edd8:	f7fe fd89 	bl	d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    eddc:	2801      	cmp	r0, #1
    edde:	d066      	beq.n	eeae <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    ede0:	4620      	mov	r0, r4
    ede2:	f000 f91f 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    ede6:	4604      	mov	r4, r0
    ede8:	221c      	movs	r2, #28
    edea:	2100      	movs	r1, #0
    edec:	3009      	adds	r0, #9
    edee:	f002 f924 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    edf2:	2701      	movs	r7, #1
    edf4:	7267      	strb	r7, [r4, #9]
    edf6:	ea5f 0008 	movs.w	r0, r8
    edfa:	d009      	beq.n	ee10 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    edfc:	2801      	cmp	r0, #1
    edfe:	d00b      	beq.n	ee18 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    ee00:	2802      	cmp	r0, #2
    ee02:	d02d      	beq.n	ee60 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    ee04:	f1b8 0f06 	cmp.w	r8, #6
    ee08:	d02c      	beq.n	ee64 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    ee0a:	f240 310b 	movw	r1, #779	; 0x30b
    ee0e:	e04b      	b.n	eea8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    ee10:	7ce0      	ldrb	r0, [r4, #19]
    ee12:	f040 0001 	orr.w	r0, r0, #1
    ee16:	e026      	b.n	ee66 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    ee18:	7ce0      	ldrb	r0, [r4, #19]
    ee1a:	f040 0005 	orr.w	r0, r0, #5
    ee1e:	f040 0010 	orr.w	r0, r0, #16
    ee22:	74e0      	strb	r0, [r4, #19]
    ee24:	f104 030a 	add.w	r3, r4, #10
    ee28:	1c5a      	adds	r2, r3, #1
    ee2a:	4648      	mov	r0, r9
    ee2c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ee2e:	f000 f8de 	bl	efee <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    ee32:	f884 a012 	strb.w	sl, [r4, #18]
    ee36:	7567      	strb	r7, [r4, #21]
    ee38:	2000      	movs	r0, #0
    ee3a:	75a0      	strb	r0, [r4, #22]
    ee3c:	20ff      	movs	r0, #255	; 0xff
    ee3e:	75e0      	strb	r0, [r4, #23]
    ee40:	7ce1      	ldrb	r1, [r4, #19]
    ee42:	0749      	lsls	r1, r1, #29
    ee44:	d518      	bpl.n	ee78 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    ee46:	f104 001d 	add.w	r0, r4, #29
    ee4a:	1e41      	subs	r1, r0, #1
    ee4c:	2d02      	cmp	r5, #2
    ee4e:	d00d      	beq.n	ee6c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ee50:	2d03      	cmp	r5, #3
    ee52:	d00b      	beq.n	ee6c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ee54:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ee58:	6813      	ldr	r3, [r2, #0]
    ee5a:	6003      	str	r3, [r0, #0]
    ee5c:	8892      	ldrh	r2, [r2, #4]
    ee5e:	e008      	b.n	ee72 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    ee60:	7ce0      	ldrb	r0, [r4, #19]
    ee62:	e7dc      	b.n	ee1e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ee64:	7ce0      	ldrb	r0, [r4, #19]
    ee66:	f040 0002 	orr.w	r0, r0, #2
    ee6a:	e7d8      	b.n	ee1e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ee6c:	6832      	ldr	r2, [r6, #0]
    ee6e:	6002      	str	r2, [r0, #0]
    ee70:	88b2      	ldrh	r2, [r6, #4]
    ee72:	8082      	strh	r2, [r0, #4]
    ee74:	700d      	strb	r5, [r1, #0]
    ee76:	e000      	b.n	ee7a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    ee78:	7720      	strb	r0, [r4, #28]
    ee7a:	207f      	movs	r0, #127	; 0x7f
    ee7c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ee80:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    ee84:	f7f2 f9e8 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ee88:	4605      	mov	r5, r0
    ee8a:	f7f2 f9eb 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ee8e:	2201      	movs	r2, #1
    ee90:	4629      	mov	r1, r5
    ee92:	f000 f8d0 	bl	f036 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ee96:	b128      	cbz	r0, eea4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    ee98:	4620      	mov	r0, r4
    ee9a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ee9e:	2100      	movs	r1, #0
    eea0:	f7f5 bc86 	b.w	47b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7b0>
    eea4:	f240 312b 	movw	r1, #811	; 0x32b
    eea8:	2033      	movs	r0, #51	; 0x33
    eeaa:	f7f1 fddb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000eeb2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    eeb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eeb6:	461e      	mov	r6, r3
    eeb8:	4617      	mov	r7, r2
    eeba:	4689      	mov	r9, r1
    eebc:	4682      	mov	sl, r0
    eebe:	f8dd 8020 	ldr.w	r8, [sp, #32]
    eec2:	f7f2 f9cf 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eec6:	4604      	mov	r4, r0
    eec8:	f7fe fd11 	bl	d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    eecc:	2801      	cmp	r0, #1
    eece:	d039      	beq.n	ef44 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    eed0:	4620      	mov	r0, r4
    eed2:	f000 f8a7 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    eed6:	4604      	mov	r4, r0
    eed8:	221c      	movs	r2, #28
    eeda:	2100      	movs	r1, #0
    eedc:	3009      	adds	r0, #9
    eede:	f002 f8ac 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eee2:	2501      	movs	r5, #1
    eee4:	f104 030a 	add.w	r3, r4, #10
    eee8:	7265      	strb	r5, [r4, #9]
    eeea:	1c5a      	adds	r2, r3, #1
    eeec:	4649      	mov	r1, r9
    eeee:	4650      	mov	r0, sl
    eef0:	f000 f87d 	bl	efee <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    eef4:	f884 8012 	strb.w	r8, [r4, #18]
    eef8:	7ce0      	ldrb	r0, [r4, #19]
    eefa:	21ff      	movs	r1, #255	; 0xff
    eefc:	f367 0000 	bfi	r0, r7, #0, #1
    ef00:	f040 001a 	orr.w	r0, r0, #26
    ef04:	74e0      	strb	r0, [r4, #19]
    ef06:	7565      	strb	r5, [r4, #21]
    ef08:	2000      	movs	r0, #0
    ef0a:	75a0      	strb	r0, [r4, #22]
    ef0c:	75e1      	strb	r1, [r4, #23]
    ef0e:	7721      	strb	r1, [r4, #28]
    ef10:	207f      	movs	r0, #127	; 0x7f
    ef12:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ef16:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    ef1a:	f7f2 f99d 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ef1e:	4605      	mov	r5, r0
    ef20:	f7f2 f9a0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef24:	2201      	movs	r2, #1
    ef26:	4629      	mov	r1, r5
    ef28:	f000 f885 	bl	f036 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ef2c:	b128      	cbz	r0, ef3a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    ef2e:	4620      	mov	r0, r4
    ef30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef34:	2100      	movs	r1, #0
    ef36:	f7f5 bc3b 	b.w	47b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7b0>
    ef3a:	f44f 7156 	mov.w	r1, #856	; 0x358
    ef3e:	2033      	movs	r0, #51	; 0x33
    ef40:	f7f1 fd90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    ef48:	f7ff bf23 	b.w	ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    ef4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef4e:	b08b      	sub	sp, #44	; 0x2c
    ef50:	460f      	mov	r7, r1
    ef52:	f7f2 f987 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef56:	4604      	mov	r4, r0
    ef58:	f7fe fd1a 	bl	d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ef5c:	0005      	movs	r5, r0
    ef5e:	d00c      	beq.n	ef7a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    ef60:	4620      	mov	r0, r4
    ef62:	4629      	mov	r1, r5
    ef64:	aa0a      	add	r2, sp, #40	; 0x28
    ef66:	f7fe fd31 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ef6a:	4606      	mov	r6, r0
    ef6c:	f7f2 f974 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ef70:	42b0      	cmp	r0, r6
    ef72:	d005      	beq.n	ef80 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    ef74:	f240 11ab 	movw	r1, #427	; 0x1ab
    ef78:	e036      	b.n	efe8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ef7a:	f240 11a1 	movw	r1, #417	; 0x1a1
    ef7e:	e033      	b.n	efe8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ef80:	4669      	mov	r1, sp
    ef82:	980a      	ldr	r0, [sp, #40]	; 0x28
    ef84:	f000 f859 	bl	f03a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ef88:	1d3e      	adds	r6, r7, #4
    ef8a:	4628      	mov	r0, r5
    ef8c:	f7fe fcad 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ef90:	4605      	mov	r5, r0
    ef92:	f100 0109 	add.w	r1, r0, #9
    ef96:	221c      	movs	r2, #28
    ef98:	4630      	mov	r0, r6
    ef9a:	f001 ffd4 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef9e:	7ce8      	ldrb	r0, [r5, #19]
    efa0:	f04f 0500 	mov.w	r5, #0
    efa4:	06c1      	lsls	r1, r0, #27
    efa6:	d50d      	bpl.n	efc4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    efa8:	0740      	lsls	r0, r0, #29
    efaa:	d40a      	bmi.n	efc2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    efac:	f89d 2010 	ldrb.w	r2, [sp, #16]
    efb0:	f106 001c 	add.w	r0, r6, #28
    efb4:	9903      	ldr	r1, [sp, #12]
    efb6:	f001 ffc6 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    efba:	f89d 0010 	ldrb.w	r0, [sp, #16]
    efbe:	7230      	strb	r0, [r6, #8]
    efc0:	e000      	b.n	efc4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    efc2:	7235      	strb	r5, [r6, #8]
    efc4:	707d      	strb	r5, [r7, #1]
    efc6:	2005      	movs	r0, #5
    efc8:	7038      	strb	r0, [r7, #0]
    efca:	4638      	mov	r0, r7
    efcc:	f7f5 fb80 	bl	46d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6d0>
    efd0:	4620      	mov	r0, r4
    efd2:	f7fe fca5 	bl	d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    efd6:	b128      	cbz	r0, efe4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    efd8:	4620      	mov	r0, r4
    efda:	2100      	movs	r1, #0
    efdc:	f7fe fd94 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    efe0:	b00b      	add	sp, #44	; 0x2c
    efe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efe4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    efe8:	2033      	movs	r0, #51	; 0x33
    efea:	f7f1 fd3b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efee:	b510      	push	{r4, lr}
    eff0:	461c      	mov	r4, r3
    eff2:	460b      	mov	r3, r1
    eff4:	29ff      	cmp	r1, #255	; 0xff
    eff6:	d00d      	beq.n	f014 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    eff8:	4621      	mov	r1, r4
    effa:	4618      	mov	r0, r3
    effc:	f7f3 f940 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f000:	b120      	cbz	r0, f00c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    f002:	7820      	ldrb	r0, [r4, #0]
    f004:	f040 0002 	orr.w	r0, r0, #2
    f008:	7020      	strb	r0, [r4, #0]
    f00a:	bd10      	pop	{r4, pc}
    f00c:	21dc      	movs	r1, #220	; 0xdc
    f00e:	2033      	movs	r0, #51	; 0x33
    f010:	f7f1 fd28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f014:	7c41      	ldrb	r1, [r0, #17]
    f016:	7021      	strb	r1, [r4, #0]
    f018:	6840      	ldr	r0, [r0, #4]
    f01a:	6801      	ldr	r1, [r0, #0]
    f01c:	6011      	str	r1, [r2, #0]
    f01e:	8880      	ldrh	r0, [r0, #4]
    f020:	8090      	strh	r0, [r2, #4]
    f022:	bd10      	pop	{r4, pc}
    f024:	b51c      	push	{r2, r3, r4, lr}
    f026:	4669      	mov	r1, sp
    f028:	aa01      	add	r2, sp, #4
    f02a:	f7fe fcc1 	bl	d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f02e:	9800      	ldr	r0, [sp, #0]
    f030:	f7fe fc5b 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f034:	bd1c      	pop	{r2, r3, r4, pc}
    f036:	f7fe bc0f 	b.w	d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f03a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f03a:	7802      	ldrb	r2, [r0, #0]
    f03c:	f002 020f 	and.w	r2, r2, #15
    f040:	f7f5 bbbe 	b.w	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    f044:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f046:	255e      	movs	r5, #94	; 0x5e
    f048:	4668      	mov	r0, sp
    f04a:	f7fd fdb7 	bl	cbbc <mpsl_fem_pa_is_configured>
    f04e:	f89d 0000 	ldrb.w	r0, [sp]
    f052:	b108      	cbz	r0, f058 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    f054:	2401      	movs	r4, #1
    f056:	e000      	b.n	f05a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    f058:	2400      	movs	r4, #0
    f05a:	a801      	add	r0, sp, #4
    f05c:	f7fd fd96 	bl	cb8c <mpsl_fem_lna_is_configured>
    f060:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f064:	b100      	cbz	r0, f068 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    f066:	2001      	movs	r0, #1
    f068:	4304      	orrs	r4, r0
    f06a:	d000      	beq.n	f06e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    f06c:	2568      	movs	r5, #104	; 0x68
    f06e:	4628      	mov	r0, r5
    f070:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    f072:	b510      	push	{r4, lr}
    f074:	f7ff ffe6 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f078:	3069      	adds	r0, #105	; 0x69
    f07a:	b280      	uxth	r0, r0
    f07c:	bd10      	pop	{r4, pc}
    f07e:	6980      	ldr	r0, [r0, #24]
    f080:	2800      	cmp	r0, #0
    f082:	d000      	beq.n	f086 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    f084:	2001      	movs	r0, #1
    f086:	4770      	bx	lr
    f088:	b510      	push	{r4, lr}
    f08a:	2802      	cmp	r0, #2
    f08c:	d006      	beq.n	f09c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    f08e:	2108      	movs	r1, #8
    f090:	2801      	cmp	r0, #1
    f092:	d005      	beq.n	f0a0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    f094:	21f5      	movs	r1, #245	; 0xf5
    f096:	2005      	movs	r0, #5
    f098:	f7f1 fce4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f09c:	2104      	movs	r1, #4
    f09e:	e7f7      	b.n	f090 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    f0a0:	202a      	movs	r0, #42	; 0x2a
    f0a2:	2228      	movs	r2, #40	; 0x28
    f0a4:	fb11 2000 	smlabb	r0, r1, r0, r2
    f0a8:	b280      	uxth	r0, r0
    f0aa:	bd10      	pop	{r4, pc}
    f0ac:	9800      	ldr	r0, [sp, #0]
    f0ae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    f0b2:	1810      	adds	r0, r2, r0
    f0b4:	f143 0300 	adc.w	r3, r3, #0
    f0b8:	1840      	adds	r0, r0, r1
    f0ba:	f143 0100 	adc.w	r1, r3, #0
    f0be:	3833      	subs	r0, #51	; 0x33
    f0c0:	f161 0100 	sbc.w	r1, r1, #0
    f0c4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f0c8:	1880      	adds	r0, r0, r2
    f0ca:	f141 0100 	adc.w	r1, r1, #0
    f0ce:	4770      	bx	lr
    f0d0:	b510      	push	{r4, lr}
    f0d2:	f7ff ffb7 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f0d6:	f500 7081 	add.w	r0, r0, #258	; 0x102
    f0da:	b280      	uxth	r0, r0
    f0dc:	bd10      	pop	{r4, pc}
    f0de:	f7fb bb13 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f0e2:	1a10      	subs	r0, r2, r0
    f0e4:	4770      	bx	lr

0000f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    f0e6:	b510      	push	{r4, lr}
    f0e8:	2905      	cmp	r1, #5
    f0ea:	d22d      	bcs.n	f148 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    f0ec:	e8df f001 	tbb	[pc, r1]
    f0f0:	0e030a05 	.word	0x0e030a05
    f0f4:	0028      	.short	0x0028
    f0f6:	2100      	movs	r1, #0
    f0f8:	e000      	b.n	f0fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    f0fa:	2101      	movs	r1, #1
    f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f100:	f7f6 b9da 	b.w	54b8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    f104:	2103      	movs	r1, #3
    f106:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    f10a:	bd10      	pop	{r4, pc}
    f10c:	4604      	mov	r4, r0
    f10e:	6900      	ldr	r0, [r0, #16]
    f110:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    f114:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    f118:	6220      	str	r0, [r4, #32]
    f11a:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    f11e:	84a0      	strh	r0, [r4, #36]	; 0x24
    f120:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    f124:	6120      	str	r0, [r4, #16]
    f126:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    f12a:	8320      	strh	r0, [r4, #24]
    f12c:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    f130:	8360      	strh	r0, [r4, #26]
    f132:	4620      	mov	r0, r4
    f134:	f000 f817 	bl	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f138:	2002      	movs	r0, #2
    f13a:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f13e:	bd10      	pop	{r4, pc}
    f140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f144:	f000 b80f 	b.w	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f148:	f240 21fd 	movw	r1, #765	; 0x2fd
    f14c:	2035      	movs	r0, #53	; 0x35
    f14e:	f7f1 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f152 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    f152:	b510      	push	{r4, lr}
    f154:	f7f6 f980 	bl	5458 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    f158:	2000      	movs	r0, #0
    f15a:	bd10      	pop	{r4, pc}

0000f15c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    f15c:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    f160:	4770      	bx	lr
    f162:	2000      	movs	r0, #0
    f164:	4770      	bx	lr
    f166:	b570      	push	{r4, r5, r6, lr}
    f168:	4604      	mov	r4, r0
    f16a:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f16e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f172:	f7f6 f9bd 	bl	54f0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    f176:	4605      	mov	r5, r0
    f178:	f7ff ff7b 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    f17c:	4601      	mov	r1, r0
    f17e:	462a      	mov	r2, r5
    f180:	4620      	mov	r0, r4
    f182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f186:	f7ff bb26 	b.w	e7d6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f18a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f18e:	469a      	mov	sl, r3
    f190:	4691      	mov	r9, r2
    f192:	460c      	mov	r4, r1
    f194:	4606      	mov	r6, r0
    f196:	2500      	movs	r5, #0
    f198:	f7ff ff54 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f19c:	4680      	mov	r8, r0
    f19e:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f1a2:	280d      	cmp	r0, #13
    f1a4:	d017      	beq.n	f1d6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    f1a6:	280e      	cmp	r0, #14
    f1a8:	d015      	beq.n	f1d6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    f1aa:	2000      	movs	r0, #0
    f1ac:	4683      	mov	fp, r0
    f1ae:	f1ba 0f00 	cmp.w	sl, #0
    f1b2:	d003      	beq.n	f1bc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    f1b4:	2101      	movs	r1, #1
    f1b6:	4620      	mov	r0, r4
    f1b8:	f7f6 fb66 	bl	5888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f1bc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f1c0:	2701      	movs	r7, #1
    f1c2:	b150      	cbz	r0, f1da <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    f1c4:	2801      	cmp	r0, #1
    f1c6:	d01a      	beq.n	f1fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    f1c8:	2802      	cmp	r0, #2
    f1ca:	d012      	beq.n	f1f2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    f1cc:	2803      	cmp	r0, #3
    f1ce:	d016      	beq.n	f1fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    f1d0:	f240 2136 	movw	r1, #566	; 0x236
    f1d4:	e08e      	b.n	f2f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    f1d6:	2001      	movs	r0, #1
    f1d8:	e7e8      	b.n	f1ac <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    f1da:	f1b9 0f00 	cmp.w	r9, #0
    f1de:	d005      	beq.n	f1ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    f1e0:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    f1e4:	4620      	mov	r0, r4
    f1e6:	f7ff ffbe 	bl	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f1ea:	e009      	b.n	f200 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    f1ec:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f1f0:	e080      	b.n	f2f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    f1f2:	2003      	movs	r0, #3
    f1f4:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    f1f8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f1fc:	e000      	b.n	f200 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    f1fe:	6925      	ldr	r5, [r4, #16]
    f200:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    f204:	f04f 0900 	mov.w	r9, #0
    f208:	1949      	adds	r1, r1, r5
    f20a:	eb40 0009 	adc.w	r0, r0, r9
    f20e:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    f212:	e9c6 1004 	strd	r1, r0, [r6, #16]
    f216:	f886 9000 	strb.w	r9, [r6]
    f21a:	f8a6 8008 	strh.w	r8, [r6, #8]
    f21e:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f222:	280d      	cmp	r0, #13
    f224:	d02b      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f226:	280b      	cmp	r0, #11
    f228:	d029      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f22a:	2825      	cmp	r0, #37	; 0x25
    f22c:	d027      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f22e:	2000      	movs	r0, #0
    f230:	4680      	mov	r8, r0
    f232:	4620      	mov	r0, r4
    f234:	f7f6 f9f2 	bl	561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f238:	4601      	mov	r1, r0
    f23a:	f1a8 0001 	sub.w	r0, r8, #1
    f23e:	4201      	tst	r1, r0
    f240:	d102      	bne.n	f248 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f242:	f886 900a 	strb.w	r9, [r6, #10]
    f246:	e005      	b.n	f254 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    f248:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f24c:	2801      	cmp	r0, #1
    f24e:	d018      	beq.n	f282 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    f250:	2002      	movs	r0, #2
    f252:	72b0      	strb	r0, [r6, #10]
    f254:	72f7      	strb	r7, [r6, #11]
    f256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f25a:	f7ff faba 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    f25e:	6070      	str	r0, [r6, #4]
    f260:	ea3a 000b 	bics.w	r0, sl, fp
    f264:	d042      	beq.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f266:	4629      	mov	r1, r5
    f268:	4630      	mov	r0, r6
    f26a:	f7ff f805 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f26e:	b287      	uxth	r7, r0
    f270:	4620      	mov	r0, r4
    f272:	f7f6 f9d3 	bl	561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f276:	f1b8 0f00 	cmp.w	r8, #0
    f27a:	d004      	beq.n	f286 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    f27c:	e018      	b.n	f2b0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    f27e:	2001      	movs	r0, #1
    f280:	e7d6      	b.n	f230 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    f282:	72b7      	strb	r7, [r6, #10]
    f284:	e7e6      	b.n	f254 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    f286:	42b8      	cmp	r0, r7
    f288:	d812      	bhi.n	f2b0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    f28a:	f886 900a 	strb.w	r9, [r6, #10]
    f28e:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    f292:	4607      	mov	r7, r0
    f294:	fb05 f107 	mul.w	r1, r5, r7
    f298:	1859      	adds	r1, r3, r1
    f29a:	eb42 0209 	adc.w	r2, r2, r9
    f29e:	e9c6 1204 	strd	r1, r2, [r6, #16]
    f2a2:	b32d      	cbz	r5, f2f0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    f2a4:	4629      	mov	r1, r5
    f2a6:	4630      	mov	r0, r6
    f2a8:	f7fe ffe6 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f2ac:	4438      	add	r0, r7
    f2ae:	b287      	uxth	r7, r0
    f2b0:	4639      	mov	r1, r7
    f2b2:	4620      	mov	r0, r4
    f2b4:	f7f6 fae8 	bl	5888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f2b8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    f2bc:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    f2c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    f2c2:	2800      	cmp	r0, #0
    f2c4:	d012      	beq.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f2c6:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    f2ca:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    f2ce:	1a80      	subs	r0, r0, r2
    f2d0:	b201      	sxth	r1, r0
    f2d2:	2900      	cmp	r1, #0
    f2d4:	dd0a      	ble.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f2d6:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    f2da:	4401      	add	r1, r0
    f2dc:	1e49      	subs	r1, r1, #1
    f2de:	fb91 f1f0 	sdiv	r1, r1, r0
    f2e2:	b289      	uxth	r1, r1
    f2e4:	fb01 2000 	mla	r0, r1, r0, r2
    f2e8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    f2ec:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f2f0:	f44f 711e 	mov.w	r1, #632	; 0x278
    f2f4:	2035      	movs	r0, #53	; 0x35
    f2f6:	f7f1 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2fa:	b510      	push	{r4, lr}
    f2fc:	4604      	mov	r4, r0
    f2fe:	2000      	movs	r0, #0
    f300:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f304:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f308:	f7fb fe52 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f30c:	b140      	cbz	r0, f320 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    f30e:	2020      	movs	r0, #32
    f310:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    f314:	f504 700a 	add.w	r0, r4, #552	; 0x228
    f318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f31c:	f7f7 be60 	b.w	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f320:	f44f 71c4 	mov.w	r1, #392	; 0x188
    f324:	2035      	movs	r0, #53	; 0x35
    f326:	f7f1 fb9d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f32a:	b510      	push	{r4, lr}
    f32c:	4613      	mov	r3, r2
    f32e:	460a      	mov	r2, r1
    f330:	b086      	sub	sp, #24
    f332:	4604      	mov	r4, r0
    f334:	4601      	mov	r1, r0
    f336:	4668      	mov	r0, sp
    f338:	f7ff ff27 	bl	f18a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    f33c:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f340:	4669      	mov	r1, sp
    f342:	f000 f809 	bl	f358 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    f346:	2800      	cmp	r0, #0
    f348:	d104      	bne.n	f354 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    f34a:	f240 21a6 	movw	r1, #678	; 0x2a6
    f34e:	2035      	movs	r0, #53	; 0x35
    f350:	f7f1 fb88 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f354:	b006      	add	sp, #24
    f356:	bd10      	pop	{r4, pc}
    f358:	f7fb b9d6 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f35c:	a62c0000 	.word	0xa62c0000
    f360:	a1e0      	.short	0xa1e0
    f362:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f366:	f001 0307 	and.w	r3, r1, #7
    f36a:	7802      	ldrb	r2, [r0, #0]
    f36c:	2101      	movs	r1, #1
    f36e:	4099      	lsls	r1, r3
    f370:	438a      	bics	r2, r1
    f372:	7002      	strb	r2, [r0, #0]
    f374:	4770      	bx	lr

0000f376 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f376:	f7f1 becf 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f37a <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f37a:	2000      	movs	r0, #0
    f37c:	4770      	bx	lr

0000f37e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f37e:	b510      	push	{r4, lr}
    f380:	f7f6 ff94 	bl	62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    f384:	b128      	cbz	r0, f392 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f386:	2000      	movs	r0, #0
    f388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f38c:	4601      	mov	r1, r0
    f38e:	f7f6 bf35 	b.w	61fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    f392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f396:	f7f2 bac5 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f39a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f39e:	28fe      	cmp	r0, #254	; 0xfe
    f3a0:	d001      	beq.n	f3a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f3a2:	2001      	movs	r0, #1
    f3a4:	4770      	bx	lr
    f3a6:	2000      	movs	r0, #0
    f3a8:	4770      	bx	lr
    f3aa:	b510      	push	{r4, lr}
    f3ac:	2801      	cmp	r0, #1
    f3ae:	d006      	beq.n	f3be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f3b0:	2802      	cmp	r0, #2
    f3b2:	d004      	beq.n	f3be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f3b4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f3b8:	2006      	movs	r0, #6
    f3ba:	f7f1 fb53 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3be:	bd10      	pop	{r4, pc}
    f3c0:	2801      	cmp	r0, #1
    f3c2:	d002      	beq.n	f3ca <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f3c4:	2802      	cmp	r0, #2
    f3c6:	d105      	bne.n	f3d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f3c8:	e002      	b.n	f3d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f3ca:	2901      	cmp	r1, #1
    f3cc:	d004      	beq.n	f3d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f3ce:	e001      	b.n	f3d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f3d0:	2902      	cmp	r1, #2
    f3d2:	d001      	beq.n	f3d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f3d4:	2000      	movs	r0, #0
    f3d6:	4770      	bx	lr
    f3d8:	2001      	movs	r0, #1
    f3da:	4770      	bx	lr
    f3dc:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    f3e0:	428a      	cmp	r2, r1
    f3e2:	d301      	bcc.n	f3e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f3e4:	1a51      	subs	r1, r2, r1
    f3e6:	e000      	b.n	f3ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f3e8:	2100      	movs	r1, #0
    f3ea:	8b02      	ldrh	r2, [r0, #24]
    f3ec:	1d52      	adds	r2, r2, #5
    f3ee:	428a      	cmp	r2, r1
    f3f0:	d302      	bcc.n	f3f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f3f2:	2101      	movs	r1, #1
    f3f4:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    f3f8:	4770      	bx	lr
    f3fa:	b510      	push	{r4, lr}
    f3fc:	4604      	mov	r4, r0
    f3fe:	6840      	ldr	r0, [r0, #4]
    f400:	2300      	movs	r3, #0
    f402:	4619      	mov	r1, r3
    f404:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f408:	3088      	adds	r0, #136	; 0x88
    f40a:	f7fe fe29 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f40e:	b168      	cbz	r0, f42c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    f410:	6861      	ldr	r1, [r4, #4]
    f412:	2000      	movs	r0, #0
    f414:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f418:	6861      	ldr	r1, [r4, #4]
    f41a:	2001      	movs	r0, #1
    f41c:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f420:	6861      	ldr	r1, [r4, #4]
    f422:	2002      	movs	r0, #2
    f424:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    f428:	2000      	movs	r0, #0
    f42a:	bd10      	pop	{r4, pc}
    f42c:	2001      	movs	r0, #1
    f42e:	bd10      	pop	{r4, pc}
    f430:	b510      	push	{r4, lr}
    f432:	4604      	mov	r4, r0
    f434:	6840      	ldr	r0, [r0, #4]
    f436:	2300      	movs	r3, #0
    f438:	2109      	movs	r1, #9
    f43a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f43e:	3088      	adds	r0, #136	; 0x88
    f440:	f7fe fe0e 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f444:	2800      	cmp	r0, #0
    f446:	d009      	beq.n	f45c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    f448:	6861      	ldr	r1, [r4, #4]
    f44a:	2000      	movs	r0, #0
    f44c:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    f450:	6861      	ldr	r1, [r4, #4]
    f452:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f456:	6861      	ldr	r1, [r4, #4]
    f458:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f45c:	bd10      	pop	{r4, pc}
    f45e:	6841      	ldr	r1, [r0, #4]
    f460:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f464:	2a10      	cmp	r2, #16
    f466:	d001      	beq.n	f46c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    f468:	2002      	movs	r0, #2
    f46a:	4770      	bx	lr
    f46c:	2200      	movs	r2, #0
    f46e:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    f472:	6840      	ldr	r0, [r0, #4]
    f474:	2113      	movs	r1, #19
    f476:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f47a:	4610      	mov	r0, r2
    f47c:	4770      	bx	lr
    f47e:	b510      	push	{r4, lr}
    f480:	4604      	mov	r4, r0
    f482:	6840      	ldr	r0, [r0, #4]
    f484:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f488:	2917      	cmp	r1, #23
    f48a:	d001      	beq.n	f490 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    f48c:	2002      	movs	r0, #2
    f48e:	bd10      	pop	{r4, pc}
    f490:	f500 7388 	add.w	r3, r0, #272	; 0x110
    f494:	f200 2193 	addw	r1, r0, #659	; 0x293
    f498:	2200      	movs	r2, #0
    f49a:	f200 2083 	addw	r0, r0, #643	; 0x283
    f49e:	f7fe fd7a 	bl	df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f4a2:	6862      	ldr	r2, [r4, #4]
    f4a4:	2000      	movs	r0, #0
    f4a6:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    f4aa:	6861      	ldr	r1, [r4, #4]
    f4ac:	2001      	movs	r0, #1
    f4ae:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    f4b2:	6861      	ldr	r1, [r4, #4]
    f4b4:	2019      	movs	r0, #25
    f4b6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f4ba:	2000      	movs	r0, #0
    f4bc:	bd10      	pop	{r4, pc}
    f4be:	b510      	push	{r4, lr}
    f4c0:	4604      	mov	r4, r0
    f4c2:	6840      	ldr	r0, [r0, #4]
    f4c4:	2300      	movs	r3, #0
    f4c6:	4619      	mov	r1, r3
    f4c8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f4cc:	3088      	adds	r0, #136	; 0x88
    f4ce:	f7fe fdc7 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4d2:	b120      	cbz	r0, f4de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    f4d4:	6861      	ldr	r1, [r4, #4]
    f4d6:	200b      	movs	r0, #11
    f4d8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f4dc:	bd10      	pop	{r4, pc}
    f4de:	f240 7156 	movw	r1, #1878	; 0x756
    f4e2:	2036      	movs	r0, #54	; 0x36
    f4e4:	f7f1 fabe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4e8:	b510      	push	{r4, lr}
    f4ea:	4604      	mov	r4, r0
    f4ec:	6840      	ldr	r0, [r0, #4]
    f4ee:	2300      	movs	r3, #0
    f4f0:	4619      	mov	r1, r3
    f4f2:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f4f6:	3088      	adds	r0, #136	; 0x88
    f4f8:	f7fe fdb2 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4fc:	b120      	cbz	r0, f508 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    f4fe:	6861      	ldr	r1, [r4, #4]
    f500:	200d      	movs	r0, #13
    f502:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f506:	bd10      	pop	{r4, pc}
    f508:	f240 715c 	movw	r1, #1884	; 0x75c
    f50c:	2036      	movs	r0, #54	; 0x36
    f50e:	f7f1 faa9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f512:	b510      	push	{r4, lr}
    f514:	4604      	mov	r4, r0
    f516:	6840      	ldr	r0, [r0, #4]
    f518:	2300      	movs	r3, #0
    f51a:	4619      	mov	r1, r3
    f51c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f520:	3088      	adds	r0, #136	; 0x88
    f522:	f7fe fd9d 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f526:	b918      	cbnz	r0, f530 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    f528:	6860      	ldr	r0, [r4, #4]
    f52a:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    f52e:	b140      	cbz	r0, f542 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    f530:	6861      	ldr	r1, [r4, #4]
    f532:	2001      	movs	r0, #1
    f534:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f538:	6861      	ldr	r1, [r4, #4]
    f53a:	2014      	movs	r0, #20
    f53c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f540:	bd10      	pop	{r4, pc}
    f542:	f240 7171 	movw	r1, #1905	; 0x771
    f546:	2036      	movs	r0, #54	; 0x36
    f548:	f7f1 fa8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54c:	f7ff bb03 	b.w	eb56 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f550:	b510      	push	{r4, lr}
    f552:	4604      	mov	r4, r0
    f554:	6840      	ldr	r0, [r0, #4]
    f556:	2300      	movs	r3, #0
    f558:	4619      	mov	r1, r3
    f55a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f55e:	3088      	adds	r0, #136	; 0x88
    f560:	f7fe fd7e 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f564:	b120      	cbz	r0, f570 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    f566:	6861      	ldr	r1, [r4, #4]
    f568:	201d      	movs	r0, #29
    f56a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f56e:	bd10      	pop	{r4, pc}
    f570:	f240 7192 	movw	r1, #1938	; 0x792
    f574:	2036      	movs	r0, #54	; 0x36
    f576:	f7f1 fa75 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f57a:	b510      	push	{r4, lr}
    f57c:	4604      	mov	r4, r0
    f57e:	6840      	ldr	r0, [r0, #4]
    f580:	2300      	movs	r3, #0
    f582:	4619      	mov	r1, r3
    f584:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f588:	3088      	adds	r0, #136	; 0x88
    f58a:	f7fe fd69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f58e:	b120      	cbz	r0, f59a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f590:	6861      	ldr	r1, [r4, #4]
    f592:	2000      	movs	r0, #0
    f594:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f598:	bd10      	pop	{r4, pc}
    f59a:	f240 7199 	movw	r1, #1945	; 0x799
    f59e:	2036      	movs	r0, #54	; 0x36
    f5a0:	f7f1 fa60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a4:	f7ff bae9 	b.w	eb7a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f5a8:	b510      	push	{r4, lr}
    f5aa:	4604      	mov	r4, r0
    f5ac:	6840      	ldr	r0, [r0, #4]
    f5ae:	2300      	movs	r3, #0
    f5b0:	4619      	mov	r1, r3
    f5b2:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f5b6:	3088      	adds	r0, #136	; 0x88
    f5b8:	f7fe fd52 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5bc:	b120      	cbz	r0, f5c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f5be:	6861      	ldr	r1, [r4, #4]
    f5c0:	2005      	movs	r0, #5
    f5c2:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f5c6:	bd10      	pop	{r4, pc}
    f5c8:	f240 7185 	movw	r1, #1925	; 0x785
    f5cc:	2036      	movs	r0, #54	; 0x36
    f5ce:	f7f1 fa49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5d2:	6840      	ldr	r0, [r0, #4]
    f5d4:	2100      	movs	r1, #0
    f5d6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f5da:	4770      	bx	lr
    f5dc:	b510      	push	{r4, lr}
    f5de:	4604      	mov	r4, r0
    f5e0:	6840      	ldr	r0, [r0, #4]
    f5e2:	2300      	movs	r3, #0
    f5e4:	4619      	mov	r1, r3
    f5e6:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f5ea:	3088      	adds	r0, #136	; 0x88
    f5ec:	f7fe fd38 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5f0:	b140      	cbz	r0, f604 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f5f2:	6861      	ldr	r1, [r4, #4]
    f5f4:	2001      	movs	r0, #1
    f5f6:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f5fa:	6861      	ldr	r1, [r4, #4]
    f5fc:	2010      	movs	r0, #16
    f5fe:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f602:	bd10      	pop	{r4, pc}
    f604:	f240 7162 	movw	r1, #1890	; 0x762
    f608:	2036      	movs	r0, #54	; 0x36
    f60a:	f7f1 fa2b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f60e:	b510      	push	{r4, lr}
    f610:	6841      	ldr	r1, [r0, #4]
    f612:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f616:	2a13      	cmp	r2, #19
    f618:	d004      	beq.n	f624 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f61a:	f240 716a 	movw	r1, #1898	; 0x76a
    f61e:	2036      	movs	r0, #54	; 0x36
    f620:	f7f1 fa20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f624:	2201      	movs	r2, #1
    f626:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f62a:	6840      	ldr	r0, [r0, #4]
    f62c:	2112      	movs	r1, #18
    f62e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f632:	bd10      	pop	{r4, pc}
    f634:	b510      	push	{r4, lr}
    f636:	4604      	mov	r4, r0
    f638:	6840      	ldr	r0, [r0, #4]
    f63a:	2300      	movs	r3, #0
    f63c:	4619      	mov	r1, r3
    f63e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f642:	3088      	adds	r0, #136	; 0x88
    f644:	f7fe fd0c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f648:	b120      	cbz	r0, f654 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f64a:	6861      	ldr	r1, [r4, #4]
    f64c:	2020      	movs	r0, #32
    f64e:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f652:	bd10      	pop	{r4, pc}
    f654:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f658:	2036      	movs	r0, #54	; 0x36
    f65a:	f7f1 fa03 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f65e:	b570      	push	{r4, r5, r6, lr}
    f660:	6841      	ldr	r1, [r0, #4]
    f662:	4604      	mov	r4, r0
    f664:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f668:	b910      	cbnz	r0, f670 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f66a:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f66e:	b178      	cbz	r0, f690 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f670:	2000      	movs	r0, #0
    f672:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f676:	2225      	movs	r2, #37	; 0x25
    f678:	2500      	movs	r5, #0
    f67a:	2b22      	cmp	r3, #34	; 0x22
    f67c:	d00a      	beq.n	f694 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f67e:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f682:	2b24      	cmp	r3, #36	; 0x24
    f684:	d01b      	beq.n	f6be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f686:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f68a:	2036      	movs	r0, #54	; 0x36
    f68c:	f7f1 f9ea 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f690:	2001      	movs	r0, #1
    f692:	e7ee      	b.n	f672 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f694:	b168      	cbz	r0, f6b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f696:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f69a:	6860      	ldr	r0, [r4, #4]
    f69c:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f6a0:	2801      	cmp	r0, #1
    f6a2:	d102      	bne.n	f6aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f6a4:	2000      	movs	r0, #0
    f6a6:	f7f6 ffbd 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f6aa:	6860      	ldr	r0, [r4, #4]
    f6ac:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f6b0:	e001      	b.n	f6b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f6b2:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f6b6:	6860      	ldr	r0, [r4, #4]
    f6b8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f6bc:	bd70      	pop	{r4, r5, r6, pc}
    f6be:	b128      	cbz	r0, f6cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f6c0:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f6c4:	2000      	movs	r0, #0
    f6c6:	f7f6 ffad 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f6ca:	e001      	b.n	f6d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f6cc:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f6d0:	6860      	ldr	r0, [r4, #4]
    f6d2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f6d6:	bd70      	pop	{r4, r5, r6, pc}
    f6d8:	6842      	ldr	r2, [r0, #4]
    f6da:	2100      	movs	r1, #0
    f6dc:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f6e0:	b12b      	cbz	r3, f6ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f6e2:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f6e6:	6840      	ldr	r0, [r0, #4]
    f6e8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f6ec:	4770      	bx	lr
    f6ee:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f6f2:	6840      	ldr	r0, [r0, #4]
    f6f4:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f6f8:	4770      	bx	lr
    f6fa:	b510      	push	{r4, lr}
    f6fc:	6840      	ldr	r0, [r0, #4]
    f6fe:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f702:	2919      	cmp	r1, #25
    f704:	d004      	beq.n	f710 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f706:	f240 717a 	movw	r1, #1914	; 0x77a
    f70a:	2036      	movs	r0, #54	; 0x36
    f70c:	f7f1 f9aa 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f710:	211b      	movs	r1, #27
    f712:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f716:	bd10      	pop	{r4, pc}
    f718:	b510      	push	{r4, lr}
    f71a:	4604      	mov	r4, r0
    f71c:	6840      	ldr	r0, [r0, #4]
    f71e:	2300      	movs	r3, #0
    f720:	2101      	movs	r1, #1
    f722:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f726:	3088      	adds	r0, #136	; 0x88
    f728:	f7fe fc9a 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f72c:	2800      	cmp	r0, #0
    f72e:	d10a      	bne.n	f746 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f730:	6861      	ldr	r1, [r4, #4]
    f732:	2007      	movs	r0, #7
    f734:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f738:	6861      	ldr	r1, [r4, #4]
    f73a:	2000      	movs	r0, #0
    f73c:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f740:	6861      	ldr	r1, [r4, #4]
    f742:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f746:	bd10      	pop	{r4, pc}
    f748:	b570      	push	{r4, r5, r6, lr}
    f74a:	4604      	mov	r4, r0
    f74c:	6840      	ldr	r0, [r0, #4]
    f74e:	2300      	movs	r3, #0
    f750:	4619      	mov	r1, r3
    f752:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f756:	3088      	adds	r0, #136	; 0x88
    f758:	f7fe fc82 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f75c:	2500      	movs	r5, #0
    f75e:	b110      	cbz	r0, f766 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f760:	6860      	ldr	r0, [r4, #4]
    f762:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f766:	6860      	ldr	r0, [r4, #4]
    f768:	2300      	movs	r3, #0
    f76a:	4619      	mov	r1, r3
    f76c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f770:	3088      	adds	r0, #136	; 0x88
    f772:	f7fe fc75 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f776:	2800      	cmp	r0, #0
    f778:	d002      	beq.n	f780 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f77a:	6860      	ldr	r0, [r4, #4]
    f77c:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f780:	bd70      	pop	{r4, r5, r6, pc}
    f782:	f7ff ba46 	b.w	ec12 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f786:	b510      	push	{r4, lr}
    f788:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f78c:	b941      	cbnz	r1, f7a0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f78e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f792:	2300      	movs	r3, #0
    f794:	2106      	movs	r1, #6
    f796:	3088      	adds	r0, #136	; 0x88
    f798:	f7fe fc62 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f79c:	2800      	cmp	r0, #0
    f79e:	d000      	beq.n	f7a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f7a0:	2001      	movs	r0, #1
    f7a2:	bd10      	pop	{r4, pc}

0000f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f7a4:	b510      	push	{r4, lr}
    f7a6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f7aa:	1ac3      	subs	r3, r0, r3
    f7ac:	eb61 0104 	sbc.w	r1, r1, r4
    f7b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f7b4:	17e0      	asrs	r0, r4, #31
    f7b6:	1ae4      	subs	r4, r4, r3
    f7b8:	4188      	sbcs	r0, r1
    f7ba:	da05      	bge.n	f7c8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f7bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f7c0:	1a18      	subs	r0, r3, r0
    f7c2:	f171 0000 	sbcs.w	r0, r1, #0
    f7c6:	db03      	blt.n	f7d0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f7c8:	21b0      	movs	r1, #176	; 0xb0
    f7ca:	2037      	movs	r0, #55	; 0x37
    f7cc:	f7f1 f94a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7d0:	2900      	cmp	r1, #0
    f7d2:	da00      	bge.n	f7d6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f7d4:	425b      	negs	r3, r3
    f7d6:	fbb3 f0f2 	udiv	r0, r3, r2
    f7da:	fb02 3010 	mls	r0, r2, r0, r3
    f7de:	2900      	cmp	r1, #0
    f7e0:	da02      	bge.n	f7e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f7e2:	2800      	cmp	r0, #0
    f7e4:	d000      	beq.n	f7e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f7e6:	1a10      	subs	r0, r2, r0
    f7e8:	bd10      	pop	{r4, pc}
    f7ea:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f7ee:	f001 0107 	and.w	r1, r1, #7
    f7f2:	7800      	ldrb	r0, [r0, #0]
    f7f4:	40c8      	lsrs	r0, r1
    f7f6:	f000 0001 	and.w	r0, r0, #1
    f7fa:	4770      	bx	lr

0000f7fc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f800:	6856      	ldr	r6, [r2, #4]
    f802:	460c      	mov	r4, r1
    f804:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f808:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f80c:	2823      	cmp	r0, #35	; 0x23
    f80e:	d008      	beq.n	f822 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f810:	2824      	cmp	r0, #36	; 0x24
    f812:	d014      	beq.n	f83e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f814:	2825      	cmp	r0, #37	; 0x25
    f816:	d02a      	beq.n	f86e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f818:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f81c:	2078      	movs	r0, #120	; 0x78
    f81e:	f7f1 f921 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f822:	7de8      	ldrb	r0, [r5, #23]
    f824:	f000 f8d6 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f828:	7de9      	ldrb	r1, [r5, #23]
    f82a:	7121      	strb	r1, [r4, #4]
    f82c:	7e29      	ldrb	r1, [r5, #24]
    f82e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f832:	7161      	strb	r1, [r4, #5]
    f834:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f838:	71a0      	strb	r0, [r4, #6]
    f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f83e:	7d28      	ldrb	r0, [r5, #20]
    f840:	f000 f8c8 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f844:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f848:	7f78      	ldrb	r0, [r7, #29]
    f84a:	3678      	adds	r6, #120	; 0x78
    f84c:	2828      	cmp	r0, #40	; 0x28
    f84e:	d00c      	beq.n	f86a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f850:	68b8      	ldr	r0, [r7, #8]
    f852:	f7f3 fc9b 	bl	318c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f856:	7831      	ldrb	r1, [r6, #0]
    f858:	7121      	strb	r1, [r4, #4]
    f85a:	7d69      	ldrb	r1, [r5, #21]
    f85c:	7161      	strb	r1, [r4, #5]
    f85e:	7871      	ldrb	r1, [r6, #1]
    f860:	71a1      	strb	r1, [r4, #6]
    f862:	71e0      	strb	r0, [r4, #7]
    f864:	2000      	movs	r0, #0
    f866:	75a8      	strb	r0, [r5, #22]
    f868:	e7e7      	b.n	f83a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f86a:	20ff      	movs	r0, #255	; 0xff
    f86c:	e7f3      	b.n	f856 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f86e:	7d28      	ldrb	r0, [r5, #20]
    f870:	f000 f8b0 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f874:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f878:	7d29      	ldrb	r1, [r5, #20]
    f87a:	7121      	strb	r1, [r4, #4]
    f87c:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f880:	7161      	strb	r1, [r4, #5]
    f882:	7d69      	ldrb	r1, [r5, #21]
    f884:	71a1      	strb	r1, [r4, #6]
    f886:	7840      	ldrb	r0, [r0, #1]
    f888:	71e0      	strb	r0, [r4, #7]
    f88a:	e7d6      	b.n	f83a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f88c:	b510      	push	{r4, lr}
    f88e:	2801      	cmp	r0, #1
    f890:	d006      	beq.n	f8a0 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f892:	2802      	cmp	r0, #2
    f894:	d006      	beq.n	f8a4 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f896:	f240 2162 	movw	r1, #610	; 0x262
    f89a:	2078      	movs	r0, #120	; 0x78
    f89c:	f7f1 f8e2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8a0:	2000      	movs	r0, #0
    f8a2:	bd10      	pop	{r4, pc}
    f8a4:	2001      	movs	r0, #1
    f8a6:	bd10      	pop	{r4, pc}

0000f8a8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f8a8:	207f      	movs	r0, #127	; 0x7f
    f8aa:	f000 b8ad 	b.w	fa08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f8ae <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f8ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f8b2:	f000 b8a9 	b.w	fa08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f8b6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f8b6:	b510      	push	{r4, lr}
    f8b8:	4604      	mov	r4, r0
    f8ba:	f7f8 f88b 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f8be:	1e64      	subs	r4, r4, #1
    f8c0:	b2e2      	uxtb	r2, r4
    f8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8c6:	f000 b86b 	b.w	f9a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f8ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f8ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8ce:	4607      	mov	r7, r0
    f8d0:	461e      	mov	r6, r3
    f8d2:	4690      	mov	r8, r2
    f8d4:	460c      	mov	r4, r1
    f8d6:	4608      	mov	r0, r1
    f8d8:	f7ff ffed 	bl	f8b6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f8dc:	b1f8      	cbz	r0, f91e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f8de:	687d      	ldr	r5, [r7, #4]
    f8e0:	2121      	movs	r1, #33	; 0x21
    f8e2:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f8e6:	3588      	adds	r5, #136	; 0x88
    f8e8:	f7ff ff7f 	bl	f7ea <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f8ec:	b1c8      	cbz	r0, f922 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f8ee:	1e64      	subs	r4, r4, #1
    f8f0:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f8f4:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f8f8:	b2e2      	uxtb	r2, r4
    f8fa:	f000 f851 	bl	f9a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f8fe:	b180      	cbz	r0, f922 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f900:	6878      	ldr	r0, [r7, #4]
    f902:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f906:	f88d 1000 	strb.w	r1, [sp]
    f90a:	9900      	ldr	r1, [sp, #0]
    f90c:	9100      	str	r1, [sp, #0]
    f90e:	f89d 1000 	ldrb.w	r1, [sp]
    f912:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f916:	b131      	cbz	r1, f926 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f918:	203a      	movs	r0, #58	; 0x3a
    f91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f91e:	2011      	movs	r0, #17
    f920:	e7fb      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f922:	201a      	movs	r0, #26
    f924:	e7f9      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f926:	1c81      	adds	r1, r0, #2
    f928:	700e      	strb	r6, [r1, #0]
    f92a:	2101      	movs	r1, #1
    f92c:	40a1      	lsls	r1, r4
    f92e:	7001      	strb	r1, [r0, #0]
    f930:	f880 8001 	strb.w	r8, [r0, #1]
    f934:	2000      	movs	r0, #0
    f936:	e7f0      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f938 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f93c:	460d      	mov	r5, r1
    f93e:	4606      	mov	r6, r0
    f940:	f7ff ffb2 	bl	f8a8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f944:	4607      	mov	r7, r0
    f946:	f7ff ffb2 	bl	f8ae <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f94a:	2400      	movs	r4, #0
    f94c:	4285      	cmp	r5, r0
    f94e:	d100      	bne.n	f952 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f950:	2401      	movs	r4, #1
    f952:	42bd      	cmp	r5, r7
    f954:	d101      	bne.n	f95a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f956:	f044 0402 	orr.w	r4, r4, #2
    f95a:	f000 f834 	bl	f9c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f95e:	2200      	movs	r2, #0
    f960:	4601      	mov	r1, r0
    f962:	2301      	movs	r3, #1
    f964:	fa03 f002 	lsl.w	r0, r3, r2
    f968:	4208      	tst	r0, r1
    f96a:	d005      	beq.n	f978 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f96c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f970:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f974:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f978:	1c52      	adds	r2, r2, #1
    f97a:	b2d2      	uxtb	r2, r2
    f97c:	2a02      	cmp	r2, #2
    f97e:	d3f1      	bcc.n	f964 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f984 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f984:	b510      	push	{r4, lr}
    f986:	4604      	mov	r4, r0
    f988:	4608      	mov	r0, r1
    f98a:	f7ff ff7f 	bl	f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f98e:	2802      	cmp	r0, #2
    f990:	d205      	bcs.n	f99e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f992:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f996:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f99a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f99e:	bd10      	pop	{r4, pc}
    f9a0:	b510      	push	{r4, lr}
    f9a2:	4614      	mov	r4, r2
    f9a4:	4602      	mov	r2, r0
    f9a6:	2000      	movs	r0, #0
    f9a8:	4603      	mov	r3, r0
    f9aa:	2c02      	cmp	r4, #2
    f9ac:	d205      	bcs.n	f9ba <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f9ae:	4610      	mov	r0, r2
    f9b0:	f000 f821 	bl	f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f9b4:	2101      	movs	r1, #1
    f9b6:	40a1      	lsls	r1, r4
    f9b8:	b2cb      	uxtb	r3, r1
    f9ba:	4203      	tst	r3, r0
    f9bc:	d001      	beq.n	f9c2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f9be:	2001      	movs	r0, #1
    f9c0:	bd10      	pop	{r4, pc}
    f9c2:	2000      	movs	r0, #0
    f9c4:	bd10      	pop	{r4, pc}
    f9c6:	b510      	push	{r4, lr}
    f9c8:	f7f8 f804 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9d0:	f000 b811 	b.w	f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f9d4:	4601      	mov	r1, r0
    f9d6:	b510      	push	{r4, lr}
    f9d8:	2000      	movs	r0, #0
    f9da:	2301      	movs	r3, #1
    f9dc:	fa03 f200 	lsl.w	r2, r3, r0
    f9e0:	420a      	tst	r2, r1
    f9e2:	d107      	bne.n	f9f4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f9e4:	1c40      	adds	r0, r0, #1
    f9e6:	b2c0      	uxtb	r0, r0
    f9e8:	2802      	cmp	r0, #2
    f9ea:	d3f7      	bcc.n	f9dc <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f9ec:	213c      	movs	r1, #60	; 0x3c
    f9ee:	2078      	movs	r0, #120	; 0x78
    f9f0:	f7f1 f838 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9f4:	bd10      	pop	{r4, pc}
    f9f6:	0a00      	lsrs	r0, r0, #8
    f9f8:	2201      	movs	r2, #1
    f9fa:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f9fe:	07c0      	lsls	r0, r0, #31
    fa00:	d000      	beq.n	fa04 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    fa02:	2203      	movs	r2, #3
    fa04:	4610      	mov	r0, r2
    fa06:	4770      	bx	lr
    fa08:	b508      	push	{r3, lr}
    fa0a:	2301      	movs	r3, #1
    fa0c:	f640 1288 	movw	r2, #2440	; 0x988
    fa10:	4669      	mov	r1, sp
    fa12:	f7fd f8d9 	bl	cbc8 <mpsl_fem_tx_power_split>
    fa16:	bd08      	pop	{r3, pc}
    fa18:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fa1c:	f001 0107 	and.w	r1, r1, #7
    fa20:	7800      	ldrb	r0, [r0, #0]
    fa22:	40c8      	lsrs	r0, r1
    fa24:	f000 0001 	and.w	r0, r0, #1
    fa28:	4770      	bx	lr
    fa2a:	b118      	cbz	r0, fa34 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fa2c:	2802      	cmp	r0, #2
    fa2e:	d001      	beq.n	fa34 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fa30:	2001      	movs	r0, #1
    fa32:	4770      	bx	lr
    fa34:	2000      	movs	r0, #0
    fa36:	4770      	bx	lr

0000fa38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fa38:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fa3a:	7881      	ldrb	r1, [r0, #2]
    fa3c:	2500      	movs	r5, #0
    fa3e:	4604      	mov	r4, r0
    fa40:	291a      	cmp	r1, #26
    fa42:	d024      	beq.n	fa8e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fa44:	dc0e      	bgt.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fa46:	2916      	cmp	r1, #22
    fa48:	d22b      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa4a:	e8df f001 	tbb	[pc, r1]
    fa4e:	2a2a      	.short	0x2a2a
    fa50:	202a2a2a 	.word	0x202a2a2a
    fa54:	2a2a2a2a 	.word	0x2a2a2a2a
    fa58:	2a2a2a2a 	.word	0x2a2a2a2a
    fa5c:	2a2a2a2a 	.word	0x2a2a2a2a
    fa60:	2020202a 	.word	0x2020202a
    fa64:	292a      	cmp	r1, #42	; 0x2a
    fa66:	d01c      	beq.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa68:	dc0b      	bgt.n	fa82 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fa6a:	f1a1 011e 	sub.w	r1, r1, #30
    fa6e:	290c      	cmp	r1, #12
    fa70:	d217      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa72:	e8df f001 	tbb	[pc, r1]
    fa76:	1616      	.short	0x1616
    fa78:	16161616 	.word	0x16161616
    fa7c:	16161616 	.word	0x16161616
    fa80:	0c16      	.short	0x0c16
    fa82:	393a      	subs	r1, #58	; 0x3a
    fa84:	2902      	cmp	r1, #2
    fa86:	d20c      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa88:	e8df f001 	tbb	[pc, r1]
    fa8c:	010b      	.short	0x010b
    fa8e:	8820      	ldrh	r0, [r4, #0]
    fa90:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fa94:	d205      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa96:	4669      	mov	r1, sp
    fa98:	f7fe fab9 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa9c:	b118      	cbz	r0, faa6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fa9e:	2002      	movs	r0, #2
    faa0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faa2:	2012      	movs	r0, #18
    faa4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faa6:	9901      	ldr	r1, [sp, #4]
    faa8:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    faac:	f88d 0008 	strb.w	r0, [sp, #8]
    fab0:	9802      	ldr	r0, [sp, #8]
    fab2:	9002      	str	r0, [sp, #8]
    fab4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fab8:	f501 719c 	add.w	r1, r1, #312	; 0x138
    fabc:	b108      	cbz	r0, fac2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    fabe:	200c      	movs	r0, #12
    fac0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fac2:	78a0      	ldrb	r0, [r4, #2]
    fac4:	7048      	strb	r0, [r1, #1]
    fac6:	20ff      	movs	r0, #255	; 0xff
    fac8:	7008      	strb	r0, [r1, #0]
    faca:	4628      	mov	r0, r5
    facc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000face <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    face:	b510      	push	{r4, lr}
    fad0:	4604      	mov	r4, r0
    fad2:	7800      	ldrb	r0, [r0, #0]
    fad4:	b118      	cbz	r0, fade <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fad6:	2801      	cmp	r0, #1
    fad8:	d001      	beq.n	fade <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fada:	2012      	movs	r0, #18
    fadc:	bd10      	pop	{r4, pc}
    fade:	f000 fdee 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fae2:	b120      	cbz	r0, faee <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fae4:	f7f2 fbc6 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fae8:	b108      	cbz	r0, faee <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    faea:	200c      	movs	r0, #12
    faec:	bd10      	pop	{r4, pc}
    faee:	7820      	ldrb	r0, [r4, #0]
    faf0:	f7ff ff9b 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    faf4:	1de2      	adds	r2, r4, #7
    faf6:	f104 0317 	add.w	r3, r4, #23
    fafa:	1c61      	adds	r1, r4, #1
    fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb00:	f7f2 bbea 	b.w	22d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fb04:	b510      	push	{r4, lr}
    fb06:	4604      	mov	r4, r0
    fb08:	f000 fe0a 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fb0c:	b108      	cbz	r0, fb12 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fb0e:	200c      	movs	r0, #12
    fb10:	bd10      	pop	{r4, pc}
    fb12:	7820      	ldrb	r0, [r4, #0]
    fb14:	b118      	cbz	r0, fb1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb16:	2801      	cmp	r0, #1
    fb18:	d001      	beq.n	fb1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb1a:	2012      	movs	r0, #18
    fb1c:	bd10      	pop	{r4, pc}
    fb1e:	f7ff ff84 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fb22:	1c61      	adds	r1, r4, #1
    fb24:	f7f2 fc7c 	bl	2420 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fb28:	b108      	cbz	r0, fb2e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fb2a:	2000      	movs	r0, #0
    fb2c:	bd10      	pop	{r4, pc}
    fb2e:	2007      	movs	r0, #7
    fb30:	bd10      	pop	{r4, pc}

0000fb32 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fb32:	b510      	push	{r4, lr}
    fb34:	f000 fdc3 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fb38:	b120      	cbz	r0, fb44 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb3a:	f7f2 fb9b 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb3e:	b108      	cbz	r0, fb44 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb40:	200c      	movs	r0, #12
    fb42:	bd10      	pop	{r4, pc}
    fb44:	f7f2 fc0e 	bl	2364 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fb48:	2000      	movs	r0, #0
    fb4a:	bd10      	pop	{r4, pc}

0000fb4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fb4c:	b510      	push	{r4, lr}
    fb4e:	f000 fde7 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fb52:	b108      	cbz	r0, fb58 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fb54:	200c      	movs	r0, #12
    fb56:	bd10      	pop	{r4, pc}
    fb58:	f7f2 fc8a 	bl	2470 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fb5c:	2000      	movs	r0, #0
    fb5e:	bd10      	pop	{r4, pc}

0000fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb64:	4605      	mov	r5, r0
    fb66:	f000 fb79 	bl	1025c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fb6a:	2800      	cmp	r0, #0
    fb6c:	d112      	bne.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fb6e:	8828      	ldrh	r0, [r5, #0]
    fb70:	2100      	movs	r1, #0
    fb72:	f7fe f8a4 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb76:	0004      	movs	r4, r0
    fb78:	d00e      	beq.n	fb98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fb7a:	f000 fd8a 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fb7e:	b158      	cbz	r0, fb98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fb80:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    fb84:	f88d 0000 	strb.w	r0, [sp]
    fb88:	9800      	ldr	r0, [sp, #0]
    fb8a:	9000      	str	r0, [sp, #0]
    fb8c:	f89d 0000 	ldrb.w	r0, [sp]
    fb90:	b120      	cbz	r0, fb9c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    fb92:	203a      	movs	r0, #58	; 0x3a
    fb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb98:	2002      	movs	r0, #2
    fb9a:	e7fb      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fb9c:	f04f 0800 	mov.w	r8, #0
    fba0:	88a8      	ldrh	r0, [r5, #4]
    fba2:	f7fe fa40 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fba6:	4607      	mov	r7, r0
    fba8:	4601      	mov	r1, r0
    fbaa:	2005      	movs	r0, #5
    fbac:	f7fe fbbd 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fbb0:	4606      	mov	r6, r0
    fbb2:	4639      	mov	r1, r7
    fbb4:	2008      	movs	r0, #8
    fbb6:	f7fe fbb8 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fbba:	42b0      	cmp	r0, r6
    fbbc:	d301      	bcc.n	fbc2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    fbbe:	42be      	cmp	r6, r7
    fbc0:	d301      	bcc.n	fbc6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    fbc2:	2012      	movs	r0, #18
    fbc4:	e7e6      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fbc6:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    fbca:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    fbce:	88e8      	ldrh	r0, [r5, #6]
    fbd0:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    fbd4:	8928      	ldrh	r0, [r5, #8]
    fbd6:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    fbda:	f504 7419 	add.w	r4, r4, #612	; 0x264
    fbde:	20ff      	movs	r0, #255	; 0xff
    fbe0:	7020      	strb	r0, [r4, #0]
    fbe2:	2000      	movs	r0, #0
    fbe4:	e7d6      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000fbe6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    fbe6:	b508      	push	{r3, lr}
    fbe8:	f7f4 ff40 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fbec:	2805      	cmp	r0, #5
    fbee:	d001      	beq.n	fbf4 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    fbf0:	200c      	movs	r0, #12
    fbf2:	bd08      	pop	{r3, pc}
    fbf4:	4668      	mov	r0, sp
    fbf6:	f7f4 febf 	bl	4978 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d1f9      	bne.n	fbf2 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    fbfe:	f7f3 fc85 	bl	350c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    fc02:	2000      	movs	r0, #0
    fc04:	bd08      	pop	{r3, pc}

0000fc06 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fc06:	b510      	push	{r4, lr}
    fc08:	460b      	mov	r3, r1
    fc0a:	2201      	movs	r2, #1
    fc0c:	f100 0110 	add.w	r1, r0, #16
    fc10:	f7fe f9c1 	bl	df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fc14:	2000      	movs	r0, #0
    fc16:	bd10      	pop	{r4, pc}

0000fc18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fc18:	b510      	push	{r4, lr}
    fc1a:	2108      	movs	r1, #8
    fc1c:	f7f0 ffc2 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fc20:	2000      	movs	r0, #0
    fc22:	bd10      	pop	{r4, pc}

0000fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fc24:	21fb      	movs	r1, #251	; 0xfb
    fc26:	8001      	strh	r1, [r0, #0]
    fc28:	f640 0248 	movw	r2, #2120	; 0x848
    fc2c:	8042      	strh	r2, [r0, #2]
    fc2e:	8081      	strh	r1, [r0, #4]
    fc30:	80c2      	strh	r2, [r0, #6]
    fc32:	2000      	movs	r0, #0
    fc34:	4770      	bx	lr

0000fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc36:	b51c      	push	{r2, r3, r4, lr}
    fc38:	8800      	ldrh	r0, [r0, #0]
    fc3a:	4669      	mov	r1, sp
    fc3c:	f7fe f9e7 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc40:	2800      	cmp	r0, #0
    fc42:	d10c      	bne.n	fc5e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    fc44:	9c01      	ldr	r4, [sp, #4]
    fc46:	f89d 0000 	ldrb.w	r0, [sp]
    fc4a:	f504 749c 	add.w	r4, r4, #312	; 0x138
    fc4e:	b918      	cbnz	r0, fc58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    fc50:	9801      	ldr	r0, [sp, #4]
    fc52:	f000 fd1e 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fc56:	b118      	cbz	r0, fc60 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc58:	7ce0      	ldrb	r0, [r4, #19]
    fc5a:	b118      	cbz	r0, fc64 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fc5c:	203a      	movs	r0, #58	; 0x3a
    fc5e:	bd1c      	pop	{r2, r3, r4, pc}
    fc60:	2002      	movs	r0, #2
    fc62:	bd1c      	pop	{r2, r3, r4, pc}
    fc64:	2001      	movs	r0, #1
    fc66:	74e0      	strb	r0, [r4, #19]
    fc68:	2000      	movs	r0, #0
    fc6a:	bd1c      	pop	{r2, r3, r4, pc}

0000fc6c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fc6c:	2108      	movs	r1, #8
    fc6e:	7001      	strb	r1, [r0, #0]
    fc70:	2000      	movs	r0, #0
    fc72:	4770      	bx	lr

0000fc74 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fc74:	b510      	push	{r4, lr}
    fc76:	4604      	mov	r4, r0
    fc78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fc7c:	f000 fd31 	bl	106e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x440>
    fc80:	f7f2 fdd0 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc84:	7020      	strb	r0, [r4, #0]
    fc86:	f000 fd01 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fc8a:	f7f2 fdcb 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc8e:	7060      	strb	r0, [r4, #1]
    fc90:	2000      	movs	r0, #0
    fc92:	bd10      	pop	{r4, pc}

0000fc94 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fc94:	2108      	movs	r1, #8
    fc96:	7001      	strb	r1, [r0, #0]
    fc98:	2000      	movs	r0, #0
    fc9a:	4770      	bx	lr

0000fc9c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fc9c:	b510      	push	{r4, lr}
    fc9e:	4604      	mov	r4, r0
    fca0:	7800      	ldrb	r0, [r0, #0]
    fca2:	b108      	cbz	r0, fca8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fca4:	2801      	cmp	r0, #1
    fca6:	d110      	bne.n	fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fca8:	f000 fd09 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fcac:	b120      	cbz	r0, fcb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fcae:	f7f2 fae1 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fcb2:	b108      	cbz	r0, fcb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fcb4:	200c      	movs	r0, #12
    fcb6:	bd10      	pop	{r4, pc}
    fcb8:	7820      	ldrb	r0, [r4, #0]
    fcba:	f7ff feb6 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fcbe:	1c61      	adds	r1, r4, #1
    fcc0:	f7fe f94f 	bl	df62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fcc4:	b108      	cbz	r0, fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fcc6:	2000      	movs	r0, #0
    fcc8:	bd10      	pop	{r4, pc}
    fcca:	2012      	movs	r0, #18
    fccc:	bd10      	pop	{r4, pc}

0000fcce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fcce:	b510      	push	{r4, lr}
    fcd0:	4604      	mov	r4, r0
    fcd2:	f000 fd25 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fcd6:	b108      	cbz	r0, fcdc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fcd8:	200c      	movs	r0, #12
    fcda:	bd10      	pop	{r4, pc}
    fcdc:	7820      	ldrb	r0, [r4, #0]
    fcde:	b108      	cbz	r0, fce4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fce0:	2801      	cmp	r0, #1
    fce2:	d107      	bne.n	fcf4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fce4:	f7ff fea1 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fce8:	1c61      	adds	r1, r4, #1
    fcea:	f7fe f949 	bl	df80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fcee:	b108      	cbz	r0, fcf4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcf0:	2000      	movs	r0, #0
    fcf2:	bd10      	pop	{r4, pc}
    fcf4:	2012      	movs	r0, #18
    fcf6:	bd10      	pop	{r4, pc}

0000fcf8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fcf8:	b510      	push	{r4, lr}
    fcfa:	4604      	mov	r4, r0
    fcfc:	f000 fcdf 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fd00:	b108      	cbz	r0, fd06 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fd02:	200c      	movs	r0, #12
    fd04:	bd10      	pop	{r4, pc}
    fd06:	7820      	ldrb	r0, [r4, #0]
    fd08:	b100      	cbz	r0, fd0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    fd0a:	2001      	movs	r0, #1
    fd0c:	f7f2 faac 	bl	2268 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fd10:	2000      	movs	r0, #0
    fd12:	bd10      	pop	{r4, pc}

0000fd14 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fd14:	b50e      	push	{r1, r2, r3, lr}
    fd16:	8882      	ldrh	r2, [r0, #4]
    fd18:	f244 2390 	movw	r3, #17040	; 0x4290
    fd1c:	429a      	cmp	r2, r3
    fd1e:	d901      	bls.n	fd24 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fd20:	2012      	movs	r0, #18
    fd22:	bd0e      	pop	{r1, r2, r3, pc}
    fd24:	f640 0348 	movw	r3, #2120	; 0x848
    fd28:	429a      	cmp	r2, r3
    fd2a:	d300      	bcc.n	fd2e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fd2c:	461a      	mov	r2, r3
    fd2e:	8803      	ldrh	r3, [r0, #0]
    fd30:	f8ad 3000 	strh.w	r3, [sp]
    fd34:	8843      	ldrh	r3, [r0, #2]
    fd36:	f8ad 3002 	strh.w	r3, [sp, #2]
    fd3a:	f8ad 2004 	strh.w	r2, [sp, #4]
    fd3e:	8843      	ldrh	r3, [r0, #2]
    fd40:	f8ad 3006 	strh.w	r3, [sp, #6]
    fd44:	f8ad 2008 	strh.w	r2, [sp, #8]
    fd48:	8800      	ldrh	r0, [r0, #0]
    fd4a:	8008      	strh	r0, [r1, #0]
    fd4c:	4668      	mov	r0, sp
    fd4e:	f7f7 fd21 	bl	7794 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    fd52:	bd0e      	pop	{r1, r2, r3, pc}

0000fd54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fd54:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd56:	4604      	mov	r4, r0
    fd58:	f10d 0007 	add.w	r0, sp, #7
    fd5c:	9000      	str	r0, [sp, #0]
    fd5e:	7922      	ldrb	r2, [r4, #4]
    fd60:	78e1      	ldrb	r1, [r4, #3]
    fd62:	78a0      	ldrb	r0, [r4, #2]
    fd64:	f10d 0306 	add.w	r3, sp, #6
    fd68:	f000 fcc3 	bl	106f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
    fd6c:	2800      	cmp	r0, #0
    fd6e:	d109      	bne.n	fd84 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fd70:	8820      	ldrh	r0, [r4, #0]
    fd72:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd76:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd7a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd7e:	a801      	add	r0, sp, #4
    fd80:	f000 f98f 	bl	100a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fd86:	b510      	push	{r4, lr}
    fd88:	4604      	mov	r4, r0
    fd8a:	f000 fc98 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fd8e:	b120      	cbz	r0, fd9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd90:	f7f2 fa70 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd94:	b108      	cbz	r0, fd9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd96:	200c      	movs	r0, #12
    fd98:	bd10      	pop	{r4, pc}
    fd9a:	7820      	ldrb	r0, [r4, #0]
    fd9c:	f7ff fe45 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fda0:	79e2      	ldrb	r2, [r4, #7]
    fda2:	1c61      	adds	r1, r4, #1
    fda4:	f7f2 fa00 	bl	21a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fda8:	b108      	cbz	r0, fdae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fdaa:	2000      	movs	r0, #0
    fdac:	bd10      	pop	{r4, pc}
    fdae:	2002      	movs	r0, #2
    fdb0:	bd10      	pop	{r4, pc}

0000fdb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fdb2:	b510      	push	{r4, lr}
    fdb4:	4604      	mov	r4, r0
    fdb6:	2001      	movs	r0, #1
    fdb8:	f000 faa0 	bl	102fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fdbc:	b128      	cbz	r0, fdca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fdbe:	4621      	mov	r1, r4
    fdc0:	2001      	movs	r0, #1
    fdc2:	f7f1 fc47 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fdc6:	2000      	movs	r0, #0
    fdc8:	bd10      	pop	{r4, pc}
    fdca:	200c      	movs	r0, #12
    fdcc:	bd10      	pop	{r4, pc}

0000fdce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fdce:	b510      	push	{r4, lr}
    fdd0:	8800      	ldrh	r0, [r0, #0]
    fdd2:	f7f2 fadd 	bl	2390 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fdd6:	b108      	cbz	r0, fddc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fdd8:	2000      	movs	r0, #0
    fdda:	bd10      	pop	{r4, pc}
    fddc:	2030      	movs	r0, #48	; 0x30
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fde0:	b51c      	push	{r2, r3, r4, lr}
    fde2:	7801      	ldrb	r1, [r0, #0]
    fde4:	f88d 1000 	strb.w	r1, [sp]
    fde8:	7840      	ldrb	r0, [r0, #1]
    fdea:	f88d 0001 	strb.w	r0, [sp, #1]
    fdee:	2000      	movs	r0, #0
    fdf0:	f8ad 0002 	strh.w	r0, [sp, #2]
    fdf4:	f8ad 0004 	strh.w	r0, [sp, #4]
    fdf8:	4601      	mov	r1, r0
    fdfa:	4668      	mov	r0, sp
    fdfc:	f000 face 	bl	1039c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    fe00:	2800      	cmp	r0, #0
    fe02:	d102      	bne.n	fe0a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fe04:	4668      	mov	r0, sp
    fe06:	f000 faa8 	bl	1035a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    fe0a:	bd1c      	pop	{r2, r3, r4, pc}

0000fe0c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fe0c:	b500      	push	{lr}
    fe0e:	b087      	sub	sp, #28
    fe10:	7941      	ldrb	r1, [r0, #5]
    fe12:	f88d 1000 	strb.w	r1, [sp]
    fe16:	7981      	ldrb	r1, [r0, #6]
    fe18:	f88d 1001 	strb.w	r1, [sp, #1]
    fe1c:	2101      	movs	r1, #1
    fe1e:	f88d 1002 	strb.w	r1, [sp, #2]
    fe22:	7801      	ldrb	r1, [r0, #0]
    fe24:	f88d 1003 	strb.w	r1, [sp, #3]
    fe28:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fe2c:	f240 2271 	movw	r2, #625	; 0x271
    fe30:	4351      	muls	r1, r2
    fe32:	9102      	str	r1, [sp, #8]
    fe34:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fe38:	4350      	muls	r0, r2
    fe3a:	9004      	str	r0, [sp, #16]
    fe3c:	2007      	movs	r0, #7
    fe3e:	f88d 0018 	strb.w	r0, [sp, #24]
    fe42:	2000      	movs	r0, #0
    fe44:	f88d 0019 	strb.w	r0, [sp, #25]
    fe48:	9804      	ldr	r0, [sp, #16]
    fe4a:	f7f7 fba9 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    fe4e:	b140      	cbz	r0, fe62 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fe50:	9802      	ldr	r0, [sp, #8]
    fe52:	f7f7 fb99 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    fe56:	b120      	cbz	r0, fe62 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fe58:	4668      	mov	r0, sp
    fe5a:	f7f7 fa6f 	bl	733c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fe5e:	b007      	add	sp, #28
    fe60:	bd00      	pop	{pc}
    fe62:	2030      	movs	r0, #48	; 0x30
    fe64:	e7fb      	b.n	fe5e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fe66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fe66:	b570      	push	{r4, r5, r6, lr}
    fe68:	4605      	mov	r5, r0
    fe6a:	8800      	ldrh	r0, [r0, #0]
    fe6c:	2100      	movs	r1, #0
    fe6e:	f7fd ff26 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe72:	0004      	movs	r4, r0
    fe74:	d007      	beq.n	fe86 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe76:	f000 fc0c 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fe7a:	b120      	cbz	r0, fe86 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe7c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    fe80:	b118      	cbz	r0, fe8a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fe82:	203a      	movs	r0, #58	; 0x3a
    fe84:	bd70      	pop	{r4, r5, r6, pc}
    fe86:	2002      	movs	r0, #2
    fe88:	bd70      	pop	{r4, r5, r6, pc}
    fe8a:	2100      	movs	r1, #0
    fe8c:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    fe90:	f7ff fdc2 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fe94:	2801      	cmp	r0, #1
    fe96:	d001      	beq.n	fe9c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fe98:	201a      	movs	r0, #26
    fe9a:	bd70      	pop	{r4, r5, r6, pc}
    fe9c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    fea0:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    fea4:	f8d5 0006 	ldr.w	r0, [r5, #6]
    fea8:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    feac:	8968      	ldrh	r0, [r5, #10]
    feae:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    feb2:	2210      	movs	r2, #16
    feb4:	f105 010c 	add.w	r1, r5, #12
    feb8:	f204 2083 	addw	r0, r4, #643	; 0x283
    febc:	f001 f843 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fec0:	2001      	movs	r0, #1
    fec2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    fec6:	2000      	movs	r0, #0
    fec8:	bd70      	pop	{r4, r5, r6, pc}

0000feca <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    feca:	b51c      	push	{r2, r3, r4, lr}
    fecc:	8801      	ldrh	r1, [r0, #0]
    fece:	f8ad 1000 	strh.w	r1, [sp]
    fed2:	8841      	ldrh	r1, [r0, #2]
    fed4:	f8ad 1002 	strh.w	r1, [sp, #2]
    fed8:	8801      	ldrh	r1, [r0, #0]
    feda:	f8ad 1004 	strh.w	r1, [sp, #4]
    fede:	8840      	ldrh	r0, [r0, #2]
    fee0:	f8ad 0006 	strh.w	r0, [sp, #6]
    fee4:	4668      	mov	r0, sp
    fee6:	f7f7 fcd9 	bl	789c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    feea:	bd1c      	pop	{r2, r3, r4, pc}

0000feec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    feec:	b510      	push	{r4, lr}
    feee:	f7f1 fbd5 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fef2:	2000      	movs	r0, #0
    fef4:	bd10      	pop	{r4, pc}

0000fef6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    fef6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fefa:	4604      	mov	r4, r0
    fefc:	7a40      	ldrb	r0, [r0, #9]
    fefe:	0781      	lsls	r1, r0, #30
    ff00:	d502      	bpl.n	ff08 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    ff02:	f040 0001 	orr.w	r0, r0, #1
    ff06:	7260      	strb	r0, [r4, #9]
    ff08:	4620      	mov	r0, r4
    ff0a:	f000 fa67 	bl	103dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    ff0e:	2800      	cmp	r0, #0
    ff10:	d103      	bne.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff12:	f000 fbdb 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
    ff16:	b118      	cbz	r0, ff20 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    ff18:	200c      	movs	r0, #12
    ff1a:	b004      	add	sp, #16
    ff1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff20:	f7f3 fa82 	bl	3428 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    ff24:	b910      	cbnz	r0, ff2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    ff26:	f7f3 fbfb 	bl	3720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    ff2a:	b108      	cbz	r0, ff30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    ff2c:	203a      	movs	r0, #58	; 0x3a
    ff2e:	e7f4      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff30:	2103      	movs	r1, #3
    ff32:	f104 0018 	add.w	r0, r4, #24
    ff36:	f7f7 fb3f 	bl	75b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    ff3a:	2100      	movs	r1, #0
    ff3c:	4668      	mov	r0, sp
    ff3e:	f7f0 ffcf 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ff42:	0006      	movs	r6, r0
    ff44:	d008      	beq.n	ff58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    ff46:	2301      	movs	r3, #1
    ff48:	4622      	mov	r2, r4
    ff4a:	f8bd 1000 	ldrh.w	r1, [sp]
    ff4e:	f7f7 fb47 	bl	75e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    ff52:	0005      	movs	r5, r0
    ff54:	d002      	beq.n	ff5c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    ff56:	e06c      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff58:	2009      	movs	r0, #9
    ff5a:	e7de      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff5c:	7860      	ldrb	r0, [r4, #1]
    ff5e:	f7f3 fb41 	bl	35e4 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    ff62:	78a1      	ldrb	r1, [r4, #2]
    ff64:	7820      	ldrb	r0, [r4, #0]
    ff66:	1ce2      	adds	r2, r4, #3
    ff68:	f7f3 faac 	bl	34c4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    ff6c:	b148      	cbz	r0, ff82 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    ff6e:	f7f3 fa07 	bl	3380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    ff72:	78a1      	ldrb	r1, [r4, #2]
    ff74:	7820      	ldrb	r0, [r4, #0]
    ff76:	1ce2      	adds	r2, r4, #3
    ff78:	f7f3 fae2 	bl	3540 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    ff7c:	0005      	movs	r5, r0
    ff7e:	d002      	beq.n	ff86 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    ff80:	e057      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff82:	2512      	movs	r5, #18
    ff84:	e055      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff86:	4631      	mov	r1, r6
    ff88:	2003      	movs	r0, #3
    ff8a:	f7f3 fa41 	bl	3410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    ff8e:	4605      	mov	r5, r0
    ff90:	78a0      	ldrb	r0, [r4, #2]
    ff92:	f7ff fd4a 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    ff96:	1ce1      	adds	r1, r4, #3
    ff98:	f7f3 fafc 	bl	3594 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    ff9c:	bb1d      	cbnz	r5, ffe6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    ff9e:	7820      	ldrb	r0, [r4, #0]
    ffa0:	f04f 0800 	mov.w	r8, #0
    ffa4:	2701      	movs	r7, #1
    ffa6:	bb20      	cbnz	r0, fff2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    ffa8:	f894 a002 	ldrb.w	sl, [r4, #2]
    ffac:	f104 0903 	add.w	r9, r4, #3
    ffb0:	f8cd 8004 	str.w	r8, [sp, #4]
    ffb4:	f8cd 8008 	str.w	r8, [sp, #8]
    ffb8:	e016      	b.n	ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffba:	9d01      	ldr	r5, [sp, #4]
    ffbc:	42ae      	cmp	r6, r5
    ffbe:	d013      	beq.n	ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffc0:	4650      	mov	r0, sl
    ffc2:	f7ff fd32 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    ffc6:	78aa      	ldrb	r2, [r5, #2]
    ffc8:	1ceb      	adds	r3, r5, #3
    ffca:	4649      	mov	r1, r9
    ffcc:	f7fd ff02 	bl	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    ffd0:	b150      	cbz	r0, ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffd2:	7a6a      	ldrb	r2, [r5, #9]
    ffd4:	7a70      	ldrb	r0, [r6, #9]
    ffd6:	f105 030a 	add.w	r3, r5, #10
    ffda:	f106 010a 	add.w	r1, r6, #10
    ffde:	f7fd fef9 	bl	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    ffe2:	b108      	cbz	r0, ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffe4:	250b      	movs	r5, #11
    ffe6:	e024      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ffe8:	a801      	add	r0, sp, #4
    ffea:	f7f0 ff59 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ffee:	2800      	cmp	r0, #0
    fff0:	d0e3      	beq.n	ffba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    fff2:	4638      	mov	r0, r7
    fff4:	f7f3 fa28 	bl	3448 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    fff8:	0005      	movs	r5, r0
    fffa:	d11a      	bne.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    fffc:	f88d 8004 	strb.w	r8, [sp, #4]
   10000:	7a60      	ldrb	r0, [r4, #9]
   10002:	07c0      	lsls	r0, r0, #31
   10004:	d005      	beq.n	10012 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
   10006:	68e0      	ldr	r0, [r4, #12]
   10008:	9002      	str	r0, [sp, #8]
   1000a:	69a0      	ldr	r0, [r4, #24]
   1000c:	9003      	str	r0, [sp, #12]
   1000e:	f88d 7004 	strb.w	r7, [sp, #4]
   10012:	a801      	add	r0, sp, #4
   10014:	f7f4 fd7c 	bl	4b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   10018:	4605      	mov	r5, r0
   1001a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   1001e:	f7f3 fb55 	bl	36cc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
   10022:	b935      	cbnz	r5, 10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
   10024:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   10028:	4630      	mov	r0, r6
   1002a:	f7f4 fc63 	bl	48f4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
   1002e:	0005      	movs	r5, r0
   10030:	d00c      	beq.n	1004c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
   10032:	8830      	ldrh	r0, [r6, #0]
   10034:	f7fd feca 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10038:	8830      	ldrh	r0, [r6, #0]
   1003a:	2100      	movs	r1, #0
   1003c:	f7f0 ff76 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10040:	b120      	cbz	r0, 1004c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
   10042:	f241 1139 	movw	r1, #4409	; 0x1139
   10046:	2039      	movs	r0, #57	; 0x39
   10048:	f7f0 fd0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1004c:	4628      	mov	r0, r5
   1004e:	e764      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

00010050 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10050:	b51c      	push	{r2, r3, r4, lr}
   10052:	460c      	mov	r4, r1
   10054:	4669      	mov	r1, sp
   10056:	f7fd ffda 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1005a:	2800      	cmp	r0, #0
   1005c:	d105      	bne.n	1006a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   1005e:	2101      	movs	r1, #1
   10060:	4622      	mov	r2, r4
   10062:	9801      	ldr	r0, [sp, #4]
   10064:	f000 fabc 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
   10068:	2000      	movs	r0, #0
   1006a:	bd1c      	pop	{r2, r3, r4, pc}

0001006c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1006c:	b510      	push	{r4, lr}
   1006e:	4604      	mov	r4, r0
   10070:	f7f7 fc4a 	bl	7908 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10074:	b118      	cbz	r0, 1007e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10076:	2000      	movs	r0, #0
   10078:	f000 f940 	bl	102fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
   1007c:	b128      	cbz	r0, 1008a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   1007e:	4621      	mov	r1, r4
   10080:	2000      	movs	r0, #0
   10082:	f7f1 fae7 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10086:	2000      	movs	r0, #0
   10088:	bd10      	pop	{r4, pc}
   1008a:	200c      	movs	r0, #12
   1008c:	bd10      	pop	{r4, pc}

0001008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1008e:	b510      	push	{r4, lr}
   10090:	7800      	ldrb	r0, [r0, #0]
   10092:	b100      	cbz	r0, 10096 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10094:	2001      	movs	r0, #1
   10096:	f7f5 f9c1 	bl	541c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   1009a:	2000      	movs	r0, #0
   1009c:	bd10      	pop	{r4, pc}

0001009e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1009e:	f7f7 bb79 	b.w	7794 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

000100a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   100a2:	b510      	push	{r4, lr}
   100a4:	4604      	mov	r4, r0
   100a6:	8880      	ldrh	r0, [r0, #4]
   100a8:	b128      	cbz	r0, 100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100aa:	2801      	cmp	r0, #1
   100ac:	d003      	beq.n	100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100ae:	2802      	cmp	r0, #2
   100b0:	d001      	beq.n	100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100b2:	2012      	movs	r0, #18
   100b4:	bd10      	pop	{r4, pc}
   100b6:	78e0      	ldrb	r0, [r4, #3]
   100b8:	f000 f92c 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   100bc:	b148      	cbz	r0, 100d2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   100be:	78a0      	ldrb	r0, [r4, #2]
   100c0:	f000 f928 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   100c4:	b128      	cbz	r0, 100d2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   100c6:	4620      	mov	r0, r4
   100c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100cc:	2101      	movs	r1, #1
   100ce:	f000 b862 	b.w	10196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   100d2:	2011      	movs	r0, #17
   100d4:	bd10      	pop	{r4, pc}

000100d6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   100d6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   100d8:	460c      	mov	r4, r1
   100da:	4605      	mov	r5, r0
   100dc:	8800      	ldrh	r0, [r0, #0]
   100de:	4669      	mov	r1, sp
   100e0:	f7fd ff95 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100e4:	2800      	cmp	r0, #0
   100e6:	d106      	bne.n	100f6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   100e8:	9801      	ldr	r0, [sp, #4]
   100ea:	8829      	ldrh	r1, [r5, #0]
   100ec:	8021      	strh	r1, [r4, #0]
   100ee:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
   100f2:	8060      	strh	r0, [r4, #2]
   100f4:	2000      	movs	r0, #0
   100f6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000100f8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   100f8:	b510      	push	{r4, lr}
   100fa:	4604      	mov	r4, r0
   100fc:	4601      	mov	r1, r0
   100fe:	2000      	movs	r0, #0
   10100:	f7f1 fa90 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10104:	b910      	cbnz	r0, 1010c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10106:	2000      	movs	r0, #0
   10108:	6020      	str	r0, [r4, #0]
   1010a:	80a0      	strh	r0, [r4, #4]
   1010c:	2000      	movs	r0, #0
   1010e:	bd10      	pop	{r4, pc}

00010110 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10110:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10112:	460c      	mov	r4, r1
   10114:	4605      	mov	r5, r0
   10116:	8800      	ldrh	r0, [r0, #0]
   10118:	4669      	mov	r1, sp
   1011a:	f7fd ff78 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1011e:	b108      	cbz	r0, 10124 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10120:	2002      	movs	r0, #2
   10122:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10124:	78a8      	ldrb	r0, [r5, #2]
   10126:	b158      	cbz	r0, 10140 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   10128:	f000 fab0 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
   1012c:	70a0      	strb	r0, [r4, #2]
   1012e:	8828      	ldrh	r0, [r5, #0]
   10130:	8020      	strh	r0, [r4, #0]
   10132:	f994 0002 	ldrsb.w	r0, [r4, #2]
   10136:	f7f2 fb75 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   1013a:	70a0      	strb	r0, [r4, #2]
   1013c:	2000      	movs	r0, #0
   1013e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10140:	9801      	ldr	r0, [sp, #4]
   10142:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   10146:	e7f1      	b.n	1012c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010148 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10148:	b510      	push	{r4, lr}
   1014a:	f7f7 fbe3 	bl	7914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1014e:	2000      	movs	r0, #0
   10150:	bd10      	pop	{r4, pc}

00010152 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10152:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10156:	4604      	mov	r4, r0
   10158:	8840      	ldrh	r0, [r0, #2]
   1015a:	460d      	mov	r5, r1
   1015c:	b1b8      	cbz	r0, 1018e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1015e:	8820      	ldrh	r0, [r4, #0]
   10160:	4669      	mov	r1, sp
   10162:	f7fd ff54 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10166:	2800      	cmp	r0, #0
   10168:	d10f      	bne.n	1018a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1016a:	8820      	ldrh	r0, [r4, #0]
   1016c:	8028      	strh	r0, [r5, #0]
   1016e:	9e01      	ldr	r6, [sp, #4]
   10170:	f106 0510 	add.w	r5, r6, #16
   10174:	3688      	adds	r6, #136	; 0x88
   10176:	682f      	ldr	r7, [r5, #0]
   10178:	8862      	ldrh	r2, [r4, #2]
   1017a:	4639      	mov	r1, r7
   1017c:	4630      	mov	r0, r6
   1017e:	f7fe f8b8 	bl	e2f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10182:	6828      	ldr	r0, [r5, #0]
   10184:	42b8      	cmp	r0, r7
   10186:	d1f6      	bne.n	10176 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10188:	2000      	movs	r0, #0
   1018a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1018e:	2012      	movs	r0, #18
   10190:	e7fb      	b.n	1018a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010192 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10192:	f000 b886 	b.w	102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1019a:	b086      	sub	sp, #24
   1019c:	4689      	mov	r9, r1
   1019e:	4607      	mov	r7, r0
   101a0:	8800      	ldrh	r0, [r0, #0]
   101a2:	a901      	add	r1, sp, #4
   101a4:	f7fd ff33 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101a8:	2800      	cmp	r0, #0
   101aa:	d136      	bne.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   101ac:	9802      	ldr	r0, [sp, #8]
   101ae:	4601      	mov	r1, r0
   101b0:	4688      	mov	r8, r1
   101b2:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
   101b6:	f500 749c 	add.w	r4, r0, #312	; 0x138
   101ba:	f88d 1000 	strb.w	r1, [sp]
   101be:	9900      	ldr	r1, [sp, #0]
   101c0:	9100      	str	r1, [sp, #0]
   101c2:	f89d 1000 	ldrb.w	r1, [sp]
   101c6:	3088      	adds	r0, #136	; 0x88
   101c8:	b109      	cbz	r1, 101ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   101ca:	2601      	movs	r6, #1
   101cc:	e000      	b.n	101d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   101ce:	2600      	movs	r6, #0
   101d0:	7f81      	ldrb	r1, [r0, #30]
   101d2:	2922      	cmp	r1, #34	; 0x22
   101d4:	d100      	bne.n	101d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   101d6:	b13e      	cbz	r6, 101e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   101d8:	2500      	movs	r5, #0
   101da:	306e      	adds	r0, #110	; 0x6e
   101dc:	2108      	movs	r1, #8
   101de:	4682      	mov	sl, r0
   101e0:	f7ff fc1a 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   101e4:	b110      	cbz	r0, 101ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   101e6:	e007      	b.n	101f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101e8:	2501      	movs	r5, #1
   101ea:	e7f6      	b.n	101da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   101ec:	210b      	movs	r1, #11
   101ee:	4650      	mov	r0, sl
   101f0:	f7ff fc12 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   101f4:	b900      	cbnz	r0, 101f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101f6:	b17d      	cbz	r5, 10218 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   101f8:	a804      	add	r0, sp, #16
   101fa:	9000      	str	r0, [sp, #0]
   101fc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10200:	ab03      	add	r3, sp, #12
   10202:	463a      	mov	r2, r7
   10204:	4641      	mov	r1, r8
   10206:	f000 fa21 	bl	1064c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
   1020a:	0005      	movs	r5, r0
   1020c:	d105      	bne.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1020e:	340c      	adds	r4, #12
   10210:	20ff      	movs	r0, #255	; 0xff
   10212:	7060      	strb	r0, [r4, #1]
   10214:	b936      	cbnz	r6, 10224 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10216:	e003      	b.n	10220 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10218:	201a      	movs	r0, #26
   1021a:	b006      	add	sp, #24
   1021c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10220:	7820      	ldrb	r0, [r4, #0]
   10222:	b108      	cbz	r0, 10228 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10224:	253a      	movs	r5, #58	; 0x3a
   10226:	e012      	b.n	1024e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10228:	f884 9000 	strb.w	r9, [r4]
   1022c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10230:	70a0      	strb	r0, [r4, #2]
   10232:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10236:	70e1      	strb	r1, [r4, #3]
   10238:	f88d 0000 	strb.w	r0, [sp]
   1023c:	f88d 1001 	strb.w	r1, [sp, #1]
   10240:	88b8      	ldrh	r0, [r7, #4]
   10242:	f8ad 0002 	strh.w	r0, [sp, #2]
   10246:	4669      	mov	r1, sp
   10248:	4640      	mov	r0, r8
   1024a:	f7fd ffba 	bl	e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1024e:	2000      	movs	r0, #0
   10250:	7060      	strb	r0, [r4, #1]
   10252:	4628      	mov	r0, r5
   10254:	e7e1      	b.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10256:	2008      	movs	r0, #8
   10258:	f7f7 bbb0 	b.w	79bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001025c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   1025c:	b510      	push	{r4, lr}
   1025e:	4604      	mov	r4, r0
   10260:	2000      	movs	r0, #0
   10262:	8822      	ldrh	r2, [r4, #0]
   10264:	b086      	sub	sp, #24
   10266:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   1026a:	39ff      	subs	r1, #255	; 0xff
   1026c:	d008      	beq.n	10280 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   1026e:	a903      	add	r1, sp, #12
   10270:	4610      	mov	r0, r2
   10272:	f7fd fecc 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10276:	b110      	cbz	r0, 1027e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   10278:	2002      	movs	r0, #2
   1027a:	b006      	add	sp, #24
   1027c:	bd10      	pop	{r4, pc}
   1027e:	9804      	ldr	r0, [sp, #16]
   10280:	8921      	ldrh	r1, [r4, #8]
   10282:	89a3      	ldrh	r3, [r4, #12]
   10284:	8962      	ldrh	r2, [r4, #10]
   10286:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1028a:	88e3      	ldrh	r3, [r4, #6]
   1028c:	88a2      	ldrh	r2, [r4, #4]
   1028e:	8861      	ldrh	r1, [r4, #2]
   10290:	f000 f97b 	bl	1058a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   10294:	b108      	cbz	r0, 1029a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   10296:	2000      	movs	r0, #0
   10298:	e7ef      	b.n	1027a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1029a:	2030      	movs	r0, #48	; 0x30
   1029c:	e7ed      	b.n	1027a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0001029e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
   1029e:	f7f5 ba5f 	b.w	5760 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

000102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   102a2:	b510      	push	{r4, lr}
   102a4:	f7fd fdc5 	bl	de32 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   102a8:	f7f1 ffc4 	bl	2234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   102ac:	f7f7 fba8 	bl	7a00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   102b0:	f7fe fa08 	bl	e6c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   102b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102b8:	f7f7 b938 	b.w	752c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
   102bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   102c0:	4288      	cmp	r0, r1
   102c2:	d303      	bcc.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
   102c4:	f640 0148 	movw	r1, #2120	; 0x848
   102c8:	4288      	cmp	r0, r1
   102ca:	d300      	bcc.n	102ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
   102cc:	4608      	mov	r0, r1
   102ce:	b280      	uxth	r0, r0
   102d0:	4770      	bx	lr
   102d2:	07c1      	lsls	r1, r0, #31
   102d4:	d001      	beq.n	102da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   102d6:	2001      	movs	r0, #1
   102d8:	4770      	bx	lr
   102da:	0780      	lsls	r0, r0, #30
   102dc:	d501      	bpl.n	102e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
   102de:	2002      	movs	r0, #2
   102e0:	4770      	bx	lr
   102e2:	2000      	movs	r0, #0
   102e4:	4770      	bx	lr
   102e6:	b510      	push	{r4, lr}
   102e8:	2801      	cmp	r0, #1
   102ea:	d006      	beq.n	102fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   102ec:	2802      	cmp	r0, #2
   102ee:	d004      	beq.n	102fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   102f0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   102f4:	2006      	movs	r0, #6
   102f6:	f7f0 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102fa:	bd10      	pop	{r4, pc}
   102fc:	b510      	push	{r4, lr}
   102fe:	f000 f9e5 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   10302:	b128      	cbz	r0, 10310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   10304:	f7f3 fa3e 	bl	3784 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   10308:	2801      	cmp	r0, #1
   1030a:	d001      	beq.n	10310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   1030c:	2000      	movs	r0, #0
   1030e:	bd10      	pop	{r4, pc}
   10310:	2001      	movs	r0, #1
   10312:	bd10      	pop	{r4, pc}
   10314:	b510      	push	{r4, lr}
   10316:	0004      	movs	r4, r0
   10318:	d005      	beq.n	10326 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   1031a:	f7f7 fb61 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1031e:	4384      	bics	r4, r0
   10320:	d001      	beq.n	10326 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   10322:	2000      	movs	r0, #0
   10324:	bd10      	pop	{r4, pc}
   10326:	2001      	movs	r0, #1
   10328:	bd10      	pop	{r4, pc}
   1032a:	28fb      	cmp	r0, #251	; 0xfb
   1032c:	d803      	bhi.n	10336 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
   1032e:	f640 0048 	movw	r0, #2120	; 0x848
   10332:	4281      	cmp	r1, r0
   10334:	d901      	bls.n	1033a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
   10336:	2011      	movs	r0, #17
   10338:	4770      	bx	lr
   1033a:	2000      	movs	r0, #0
   1033c:	4770      	bx	lr
   1033e:	381b      	subs	r0, #27
   10340:	28e1      	cmp	r0, #225	; 0xe1
   10342:	d206      	bcs.n	10352 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   10344:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10348:	d303      	bcc.n	10352 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   1034a:	f244 2090 	movw	r0, #17040	; 0x4290
   1034e:	4281      	cmp	r1, r0
   10350:	d901      	bls.n	10356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
   10352:	2012      	movs	r0, #18
   10354:	4770      	bx	lr
   10356:	2000      	movs	r0, #0
   10358:	4770      	bx	lr
   1035a:	b510      	push	{r4, lr}
   1035c:	4604      	mov	r4, r0
   1035e:	7800      	ldrb	r0, [r0, #0]
   10360:	2801      	cmp	r0, #1
   10362:	d009      	beq.n	10378 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
   10364:	f7f4 fb82 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10368:	2805      	cmp	r0, #5
   1036a:	d003      	beq.n	10374 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
   1036c:	f7f4 fb46 	bl	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   10370:	2800      	cmp	r0, #0
   10372:	d000      	beq.n	10376 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
   10374:	200c      	movs	r0, #12
   10376:	bd10      	pop	{r4, pc}
   10378:	f7f3 f9d2 	bl	3720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
   1037c:	b108      	cbz	r0, 10382 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
   1037e:	203a      	movs	r0, #58	; 0x3a
   10380:	bd10      	pop	{r4, pc}
   10382:	f7f3 f987 	bl	3694 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10386:	b138      	cbz	r0, 10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
   10388:	f7f2 fffa 	bl	3380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1038c:	88a1      	ldrh	r1, [r4, #4]
   1038e:	8860      	ldrh	r0, [r4, #2]
   10390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10394:	f7f4 baf8 	b.w	4988 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   10398:	2012      	movs	r0, #18
   1039a:	bd10      	pop	{r4, pc}
   1039c:	7802      	ldrb	r2, [r0, #0]
   1039e:	2a01      	cmp	r2, #1
   103a0:	d001      	beq.n	103a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
   103a2:	b1ba      	cbz	r2, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103a4:	e018      	b.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103a6:	7842      	ldrb	r2, [r0, #1]
   103a8:	b13a      	cbz	r2, 103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
   103aa:	2a01      	cmp	r2, #1
   103ac:	d005      	beq.n	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
   103ae:	2a02      	cmp	r2, #2
   103b0:	d112      	bne.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b2:	b189      	cbz	r1, 103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b4:	8881      	ldrh	r1, [r0, #4]
   103b6:	b179      	cbz	r1, 103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b8:	e000      	b.n	103bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
   103ba:	b159      	cbz	r1, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103bc:	8841      	ldrh	r1, [r0, #2]
   103be:	b149      	cbz	r1, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103c0:	8880      	ldrh	r0, [r0, #4]
   103c2:	b138      	cbz	r0, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   103c8:	0049      	lsls	r1, r1, #1
   103ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   103ce:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   103d2:	d201      	bcs.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103d4:	2000      	movs	r0, #0
   103d6:	4770      	bx	lr
   103d8:	2012      	movs	r0, #18
   103da:	4770      	bx	lr
   103dc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   103e0:	7a45      	ldrb	r5, [r0, #9]
   103e2:	4604      	mov	r4, r0
   103e4:	0768      	lsls	r0, r5, #29
   103e6:	d06c      	beq.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103e8:	08e8      	lsrs	r0, r5, #3
   103ea:	d16a      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103ec:	2d02      	cmp	r5, #2
   103ee:	d068      	beq.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103f0:	f7f7 faf6 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   103f4:	ea25 0000 	bic.w	r0, r5, r0
   103f8:	0740      	lsls	r0, r0, #29
   103fa:	d102      	bne.n	10402 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
   103fc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10400:	b110      	cbz	r0, 10408 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
   10402:	2011      	movs	r0, #17
   10404:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   10408:	2d01      	cmp	r5, #1
   1040a:	d15a      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1040c:	27ff      	movs	r7, #255	; 0xff
   1040e:	2101      	movs	r1, #1
   10410:	69a0      	ldr	r0, [r4, #24]
   10412:	f7f7 f9a9 	bl	7768 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
   10416:	b3e8      	cbz	r0, 10494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
   10418:	46a8      	mov	r8, r5
   1041a:	2600      	movs	r6, #0
   1041c:	4635      	mov	r5, r6
   1041e:	42bd      	cmp	r5, r7
   10420:	d02f      	beq.n	10482 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
   10422:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10426:	6988      	ldr	r0, [r1, #24]
   10428:	68c9      	ldr	r1, [r1, #12]
   1042a:	4288      	cmp	r0, r1
   1042c:	d849      	bhi.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1042e:	4406      	add	r6, r0
   10430:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   10434:	4681      	mov	r9, r0
   10436:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   10438:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1043c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1043e:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10442:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10444:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10446:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10448:	2000      	movs	r0, #0
   1044a:	f000 f89e 	bl	1058a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   1044e:	b308      	cbz	r0, 10494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
   10450:	b1bd      	cbz	r5, 10482 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
   10452:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10456:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   1045a:	4281      	cmp	r1, r0
   1045c:	d131      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1045e:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   10462:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10466:	4281      	cmp	r1, r0
   10468:	d12b      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1046a:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1046e:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   10472:	4281      	cmp	r1, r0
   10474:	d125      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10476:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   1047a:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1047e:	4281      	cmp	r1, r0
   10480:	d11f      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10482:	1c6d      	adds	r5, r5, #1
   10484:	b2ed      	uxtb	r5, r5
   10486:	4545      	cmp	r5, r8
   10488:	d3c9      	bcc.n	1041e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
   1048a:	68e0      	ldr	r0, [r4, #12]
   1048c:	42b0      	cmp	r0, r6
   1048e:	d318      	bcc.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10490:	7820      	ldrb	r0, [r4, #0]
   10492:	e000      	b.n	10496 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
   10494:	e003      	b.n	1049e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
   10496:	b120      	cbz	r0, 104a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
   10498:	2801      	cmp	r0, #1
   1049a:	d112      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1049c:	e004      	b.n	104a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
   1049e:	2030      	movs	r0, #48	; 0x30
   104a0:	e7b0      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104a2:	78a0      	ldrb	r0, [r4, #2]
   104a4:	2800      	cmp	r0, #0
   104a6:	d1f7      	bne.n	10498 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
   104a8:	7860      	ldrb	r0, [r4, #1]
   104aa:	b128      	cbz	r0, 104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104ac:	2801      	cmp	r0, #1
   104ae:	d003      	beq.n	104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104b0:	2802      	cmp	r0, #2
   104b2:	d001      	beq.n	104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104b4:	2803      	cmp	r0, #3
   104b6:	d104      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   104b8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   104bc:	b108      	cbz	r0, 104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   104be:	2807      	cmp	r0, #7
   104c0:	d901      	bls.n	104c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
   104c2:	2012      	movs	r0, #18
   104c4:	e79e      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104c6:	2000      	movs	r0, #0
   104c8:	e79c      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104ca:	b570      	push	{r4, r5, r6, lr}
   104cc:	4604      	mov	r4, r0
   104ce:	7800      	ldrb	r0, [r0, #0]
   104d0:	2500      	movs	r5, #0
   104d2:	2801      	cmp	r0, #1
   104d4:	d004      	beq.n	104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104d6:	b118      	cbz	r0, 104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104d8:	2802      	cmp	r0, #2
   104da:	d001      	beq.n	104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104dc:	2803      	cmp	r0, #3
   104de:	d139      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104e0:	7860      	ldrb	r0, [r4, #1]
   104e2:	b128      	cbz	r0, 104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104e4:	2801      	cmp	r0, #1
   104e6:	d003      	beq.n	104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104e8:	2802      	cmp	r0, #2
   104ea:	d001      	beq.n	104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104ec:	2803      	cmp	r0, #3
   104ee:	d131      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104f0:	7e60      	ldrb	r0, [r4, #25]
   104f2:	b948      	cbnz	r0, 10508 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
   104f4:	78a0      	ldrb	r0, [r4, #2]
   104f6:	2801      	cmp	r0, #1
   104f8:	d12c      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104fa:	f7f7 fa71 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104fe:	4601      	mov	r1, r0
   10500:	78a0      	ldrb	r0, [r4, #2]
   10502:	ea30 0101 	bics.w	r1, r0, r1
   10506:	d001      	beq.n	1050c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
   10508:	2011      	movs	r0, #17
   1050a:	bd70      	pop	{r4, r5, r6, pc}
   1050c:	07c0      	lsls	r0, r0, #31
   1050e:	d006      	beq.n	1051e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
   10510:	78e0      	ldrb	r0, [r4, #3]
   10512:	2301      	movs	r3, #1
   10514:	6922      	ldr	r2, [r4, #16]
   10516:	68a1      	ldr	r1, [r4, #8]
   10518:	f000 f820 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   1051c:	4605      	mov	r5, r0
   1051e:	78a0      	ldrb	r0, [r4, #2]
   10520:	0780      	lsls	r0, r0, #30
   10522:	d506      	bpl.n	10532 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
   10524:	78e0      	ldrb	r0, [r4, #3]
   10526:	2302      	movs	r3, #2
   10528:	6922      	ldr	r2, [r4, #16]
   1052a:	68a1      	ldr	r1, [r4, #8]
   1052c:	f000 f816 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   10530:	4305      	orrs	r5, r0
   10532:	78a0      	ldrb	r0, [r4, #2]
   10534:	0740      	lsls	r0, r0, #29
   10536:	d506      	bpl.n	10546 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
   10538:	78e0      	ldrb	r0, [r4, #3]
   1053a:	2304      	movs	r3, #4
   1053c:	6922      	ldr	r2, [r4, #16]
   1053e:	68a1      	ldr	r1, [r4, #8]
   10540:	f000 f80c 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   10544:	4305      	orrs	r5, r0
   10546:	b10d      	cbz	r5, 1054c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
   10548:	4628      	mov	r0, r5
   1054a:	bd70      	pop	{r4, r5, r6, pc}
   1054c:	7e20      	ldrb	r0, [r4, #24]
   1054e:	b108      	cbz	r0, 10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   10550:	2807      	cmp	r0, #7
   10552:	d901      	bls.n	10558 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
   10554:	2012      	movs	r0, #18
   10556:	bd70      	pop	{r4, r5, r6, pc}
   10558:	2000      	movs	r0, #0
   1055a:	bd70      	pop	{r4, r5, r6, pc}
   1055c:	b570      	push	{r4, r5, r6, lr}
   1055e:	4614      	mov	r4, r2
   10560:	460d      	mov	r5, r1
   10562:	b108      	cbz	r0, 10568 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
   10564:	2801      	cmp	r0, #1
   10566:	d10a      	bne.n	1057e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
   10568:	4619      	mov	r1, r3
   1056a:	4610      	mov	r0, r2
   1056c:	f7f7 f8fc 	bl	7768 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
   10570:	b138      	cbz	r0, 10582 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
   10572:	4628      	mov	r0, r5
   10574:	f7f6 fffc 	bl	7570 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
   10578:	b118      	cbz	r0, 10582 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
   1057a:	42ac      	cmp	r4, r5
   1057c:	d903      	bls.n	10586 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
   1057e:	2012      	movs	r0, #18
   10580:	bd70      	pop	{r4, r5, r6, pc}
   10582:	2030      	movs	r0, #48	; 0x30
   10584:	bd70      	pop	{r4, r5, r6, pc}
   10586:	2000      	movs	r0, #0
   10588:	bd70      	pop	{r4, r5, r6, pc}
   1058a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1058e:	461d      	mov	r5, r3
   10590:	4610      	mov	r0, r2
   10592:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10596:	1f8b      	subs	r3, r1, #6
   10598:	f640 427a 	movw	r2, #3194	; 0xc7a
   1059c:	9e08      	ldr	r6, [sp, #32]
   1059e:	4293      	cmp	r3, r2
   105a0:	d81c      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105a2:	1f83      	subs	r3, r0, #6
   105a4:	4293      	cmp	r3, r2
   105a6:	d819      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105a8:	4281      	cmp	r1, r0
   105aa:	d817      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105ac:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   105b0:	d214      	bcs.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105b2:	f1a4 010a 	sub.w	r1, r4, #10
   105b6:	1f12      	subs	r2, r2, #4
   105b8:	4291      	cmp	r1, r2
   105ba:	d80f      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105bc:	f7fd fd33 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   105c0:	1c6d      	adds	r5, r5, #1
   105c2:	4368      	muls	r0, r5
   105c4:	f240 2171 	movw	r1, #625	; 0x271
   105c8:	0040      	lsls	r0, r0, #1
   105ca:	434c      	muls	r4, r1
   105cc:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   105d0:	d204      	bcs.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105d2:	42b7      	cmp	r7, r6
   105d4:	d802      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105d6:	2001      	movs	r0, #1
   105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105dc:	2000      	movs	r0, #0
   105de:	e7fb      	b.n	105d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
   105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e4:	4606      	mov	r6, r0
   105e6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   105ea:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   105ee:	4615      	mov	r5, r2
   105f0:	302c      	adds	r0, #44	; 0x2c
   105f2:	f7f4 ff19 	bl	5428 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   105f6:	4680      	mov	r8, r0
   105f8:	2102      	movs	r1, #2
   105fa:	f7fd fdb2 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   105fe:	4287      	cmp	r7, r0
   10600:	d200      	bcs.n	10604 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
   10602:	4638      	mov	r0, r7
   10604:	4607      	mov	r7, r0
   10606:	2102      	movs	r1, #2
   10608:	4640      	mov	r0, r8
   1060a:	f7fd fdaa 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1060e:	4284      	cmp	r4, r0
   10610:	d200      	bcs.n	10614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
   10612:	4620      	mov	r0, r4
   10614:	8831      	ldrh	r1, [r6, #0]
   10616:	8029      	strh	r1, [r5, #0]
   10618:	2f1b      	cmp	r7, #27
   1061a:	d913      	bls.n	10644 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
   1061c:	2ffb      	cmp	r7, #251	; 0xfb
   1061e:	d300      	bcc.n	10622 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
   10620:	27fb      	movs	r7, #251	; 0xfb
   10622:	806f      	strh	r7, [r5, #2]
   10624:	281b      	cmp	r0, #27
   10626:	d90f      	bls.n	10648 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
   10628:	28fb      	cmp	r0, #251	; 0xfb
   1062a:	d300      	bcc.n	1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   1062c:	20fb      	movs	r0, #251	; 0xfb
   1062e:	80e8      	strh	r0, [r5, #6]
   10630:	4640      	mov	r0, r8
   10632:	f7ff fe43 	bl	102bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10636:	80a8      	strh	r0, [r5, #4]
   10638:	4640      	mov	r0, r8
   1063a:	f7ff fe3f 	bl	102bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   1063e:	8128      	strh	r0, [r5, #8]
   10640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10644:	271b      	movs	r7, #27
   10646:	e7ec      	b.n	10622 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
   10648:	201b      	movs	r0, #27
   1064a:	e7f0      	b.n	1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   1064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10650:	7890      	ldrb	r0, [r2, #2]
   10652:	9e06      	ldr	r6, [sp, #24]
   10654:	461d      	mov	r5, r3
   10656:	4614      	mov	r4, r2
   10658:	b908      	cbnz	r0, 1065e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
   1065a:	f7f7 f9c1 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1065e:	78e4      	ldrb	r4, [r4, #3]
   10660:	4607      	mov	r7, r0
   10662:	b914      	cbnz	r4, 1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
   10664:	f7f7 f9bc 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10668:	4604      	mov	r4, r0
   1066a:	b16f      	cbz	r7, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1066c:	b164      	cbz	r4, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1066e:	4638      	mov	r0, r7
   10670:	f7ff fe2f 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10674:	4620      	mov	r0, r4
   10676:	f7ff fe2c 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1067a:	b12f      	cbz	r7, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1067c:	b124      	cbz	r4, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1067e:	702f      	strb	r7, [r5, #0]
   10680:	7034      	strb	r4, [r6, #0]
   10682:	2000      	movs	r0, #0
   10684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10688:	2009      	movs	r0, #9
   1068a:	e7fb      	b.n	10684 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   1068c:	207f      	movs	r0, #127	; 0x7f
   1068e:	f000 b828 	b.w	106e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x440>
   10692:	b508      	push	{r3, lr}
   10694:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10698:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   1069c:	f88d 0000 	strb.w	r0, [sp]
   106a0:	9800      	ldr	r0, [sp, #0]
   106a2:	9000      	str	r0, [sp, #0]
   106a4:	f89d 0000 	ldrb.w	r0, [sp]
   106a8:	b100      	cbz	r0, 106ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   106aa:	2001      	movs	r0, #1
   106ac:	1e40      	subs	r0, r0, #1
   106ae:	4208      	tst	r0, r1
   106b0:	d003      	beq.n	106ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   106b2:	2904      	cmp	r1, #4
   106b4:	d001      	beq.n	106ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   106b6:	2001      	movs	r0, #1
   106b8:	bd08      	pop	{r3, pc}
   106ba:	2000      	movs	r0, #0
   106bc:	bd08      	pop	{r3, pc}
   106be:	b510      	push	{r4, lr}
   106c0:	f000 f804 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   106c4:	2800      	cmp	r0, #0
   106c6:	d000      	beq.n	106ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x428>
   106c8:	2001      	movs	r0, #1
   106ca:	bd10      	pop	{r4, pc}
   106cc:	b510      	push	{r4, lr}
   106ce:	f7f4 f9cd 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   106d2:	2804      	cmp	r0, #4
   106d4:	d003      	beq.n	106de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x43c>
   106d6:	2805      	cmp	r0, #5
   106d8:	d001      	beq.n	106de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x43c>
   106da:	2000      	movs	r0, #0
   106dc:	bd10      	pop	{r4, pc}
   106de:	2001      	movs	r0, #1
   106e0:	bd10      	pop	{r4, pc}
   106e2:	b508      	push	{r3, lr}
   106e4:	f640 1288 	movw	r2, #2440	; 0x988
   106e8:	2300      	movs	r3, #0
   106ea:	4669      	mov	r1, sp
   106ec:	f7fc fa6c 	bl	cbc8 <mpsl_fem_tx_power_split>
   106f0:	bd08      	pop	{r3, pc}
   106f2:	b530      	push	{r4, r5, lr}
   106f4:	f340 0400 	sbfx	r4, r0, #0, #1
   106f8:	f340 0040 	sbfx	r0, r0, #1, #1
   106fc:	1c40      	adds	r0, r0, #1
   106fe:	9d03      	ldr	r5, [sp, #12]
   10700:	1c64      	adds	r4, r4, #1
   10702:	d000      	beq.n	10706 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10704:	b119      	cbz	r1, 1070e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   10706:	b100      	cbz	r0, 1070a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x468>
   10708:	b10a      	cbz	r2, 1070e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   1070a:	b91c      	cbnz	r4, 10714 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x472>
   1070c:	e001      	b.n	10712 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
   1070e:	2011      	movs	r0, #17
   10710:	bd30      	pop	{r4, r5, pc}
   10712:	2100      	movs	r1, #0
   10714:	7019      	strb	r1, [r3, #0]
   10716:	b900      	cbnz	r0, 1071a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x478>
   10718:	2200      	movs	r2, #0
   1071a:	702a      	strb	r2, [r5, #0]
   1071c:	2000      	movs	r0, #0
   1071e:	bd30      	pop	{r4, r5, pc}
   10720:	b510      	push	{r4, lr}
   10722:	f7ff ffd3 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   10726:	b120      	cbz	r0, 10732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   10728:	f7f3 f834 	bl	3794 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1072c:	b108      	cbz	r0, 10732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   1072e:	2001      	movs	r0, #1
   10730:	bd10      	pop	{r4, pc}
   10732:	2000      	movs	r0, #0
   10734:	bd10      	pop	{r4, pc}
   10736:	6802      	ldr	r2, [r0, #0]
   10738:	b912      	cbnz	r2, 10740 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49e>
   1073a:	6001      	str	r1, [r0, #0]
   1073c:	4770      	bx	lr
   1073e:	4602      	mov	r2, r0
   10740:	6850      	ldr	r0, [r2, #4]
   10742:	b108      	cbz	r0, 10748 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   10744:	428a      	cmp	r2, r1
   10746:	d1fa      	bne.n	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
   10748:	428a      	cmp	r2, r1
   1074a:	d0f7      	beq.n	1073c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49a>
   1074c:	6051      	str	r1, [r2, #4]
   1074e:	4770      	bx	lr
   10750:	b510      	push	{r4, lr}
   10752:	4604      	mov	r4, r0
   10754:	e002      	b.n	1075c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ba>
   10756:	6820      	ldr	r0, [r4, #0]
   10758:	4780      	blx	r0
   1075a:	6864      	ldr	r4, [r4, #4]
   1075c:	2c00      	cmp	r4, #0
   1075e:	d1fa      	bne.n	10756 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b4>
   10760:	bd10      	pop	{r4, pc}
   10762:	b510      	push	{r4, lr}
   10764:	2000      	movs	r0, #0
   10766:	f7fd fa91 	bl	dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1076a:	f7f0 fd33 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1076e:	f7f0 ff3b 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10772:	f7f1 f8c9 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10776:	2800      	cmp	r0, #0
   10778:	d003      	beq.n	10782 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e0>
   1077a:	21df      	movs	r1, #223	; 0xdf
   1077c:	2001      	movs	r0, #1
   1077e:	f7f0 f971 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10782:	bd10      	pop	{r4, pc}
   10784:	b510      	push	{r4, lr}
   10786:	f000 f80a 	bl	1079e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   1078a:	f7fe fdf6 	bl	f37a <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1078e:	2800      	cmp	r0, #0
   10790:	d004      	beq.n	1079c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fa>
   10792:	f240 1161 	movw	r1, #353	; 0x161
   10796:	2001      	movs	r0, #1
   10798:	f7f0 f964 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1079c:	bd10      	pop	{r4, pc}
   1079e:	b510      	push	{r4, lr}
   107a0:	f7f4 f9ac 	bl	4afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   107a4:	b110      	cbz	r0, 107ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50a>
   107a6:	f240 113b 	movw	r1, #315	; 0x13b
   107aa:	e004      	b.n	107b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x514>
   107ac:	f7fe fcd1 	bl	f152 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   107b0:	b120      	cbz	r0, 107bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x51a>
   107b2:	f44f 719e 	mov.w	r1, #316	; 0x13c
   107b6:	2001      	movs	r0, #1
   107b8:	f7f0 f954 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107bc:	f7f6 fdfc 	bl	73b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   107c0:	f7f2 ff32 	bl	3628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   107c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107c8:	f7f6 bc58 	b.w	707c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   107cc:	000b0001 	.word	0x000b0001
   107d0:	000a0002 	.word	0x000a0002
   107d4:	00090005 	.word	0x00090005
   107d8:	0008000a 	.word	0x0008000a
   107dc:	00070014 	.word	0x00070014
   107e0:	0006001e 	.word	0x0006001e
   107e4:	00050032 	.word	0x00050032
   107e8:	0004004b 	.word	0x0004004b
   107ec:	00030064 	.word	0x00030064
   107f0:	00020096 	.word	0x00020096
   107f4:	000100fa 	.word	0x000100fa
   107f8:	000001f4 	.word	0x000001f4

000107fc <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   107fc:	b518      	push	{r3, r4, lr}
   107fe:	2200      	movs	r2, #0
   10800:	704a      	strb	r2, [r1, #1]
   10802:	2317      	movs	r3, #23
   10804:	700b      	strb	r3, [r1, #0]
   10806:	7202      	strb	r2, [r0, #8]
   10808:	f8d0 400a 	ldr.w	r4, [r0, #10]
   1080c:	604c      	str	r4, [r1, #4]
   1080e:	89c3      	ldrh	r3, [r0, #14]
   10810:	810b      	strh	r3, [r1, #8]
   10812:	7a03      	ldrb	r3, [r0, #8]
   10814:	f88d 3000 	strb.w	r3, [sp]
   10818:	9b00      	ldr	r3, [sp, #0]
   1081a:	9300      	str	r3, [sp, #0]
   1081c:	f89d 3000 	ldrb.w	r3, [sp]
   10820:	2b00      	cmp	r3, #0
   10822:	d1f0      	bne.n	10806 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   10824:	bd18      	pop	{r3, r4, pc}

00010826 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   10826:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10828:	460d      	mov	r5, r1
   1082a:	4604      	mov	r4, r0
   1082c:	f7f2 f8e4 	bl	29f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   10830:	2600      	movs	r6, #0
   10832:	b1f8      	cbz	r0, 10874 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10834:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   10838:	7226      	strb	r6, [r4, #8]
   1083a:	8800      	ldrh	r0, [r0, #0]
   1083c:	f8ad 0000 	strh.w	r0, [sp]
   10840:	a902      	add	r1, sp, #8
   10842:	f7fd fbe4 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10846:	b108      	cbz	r0, 1084c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10848:	2124      	movs	r1, #36	; 0x24
   1084a:	e010      	b.n	1086e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   1084c:	9803      	ldr	r0, [sp, #12]
   1084e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   10852:	f88d 1002 	strb.w	r1, [sp, #2]
   10856:	7841      	ldrb	r1, [r0, #1]
   10858:	f88d 1003 	strb.w	r1, [sp, #3]
   1085c:	8840      	ldrh	r0, [r0, #2]
   1085e:	f8ad 0004 	strh.w	r0, [sp, #4]
   10862:	2102      	movs	r1, #2
   10864:	4668      	mov	r0, sp
   10866:	f7ff fc96 	bl	10196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1086a:	b118      	cbz	r0, 10874 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   1086c:	213a      	movs	r1, #58	; 0x3a
   1086e:	207e      	movs	r0, #126	; 0x7e
   10870:	f7f0 f8f8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10874:	2020      	movs	r0, #32
   10876:	7028      	strb	r0, [r5, #0]
   10878:	706e      	strb	r6, [r5, #1]
   1087a:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1087e:	6068      	str	r0, [r5, #4]
   10880:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00010882 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10882:	b510      	push	{r4, lr}
   10884:	f7f7 fc0c 	bl	80a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10888:	f000 f81d 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1088c:	f7f7 f924 	bl	7ad8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10894:	f7f7 ba1e 	b.w	7cd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010898 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10898:	b510      	push	{r4, lr}
   1089a:	24c8      	movs	r4, #200	; 0xc8
   1089c:	1e64      	subs	r4, r4, #1
   1089e:	b2e4      	uxtb	r4, r4
   108a0:	f7f7 f938 	bl	7b14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   108a4:	2802      	cmp	r0, #2
   108a6:	d003      	beq.n	108b0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   108a8:	2801      	cmp	r0, #1
   108aa:	d000      	beq.n	108ae <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   108ac:	2000      	movs	r0, #0
   108ae:	bd10      	pop	{r4, pc}
   108b0:	2c00      	cmp	r4, #0
   108b2:	d1f3      	bne.n	1089c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   108b4:	21ca      	movs	r1, #202	; 0xca
   108b6:	203b      	movs	r0, #59	; 0x3b
   108b8:	f7f0 f8d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108bc:	5840      	ldr	r0, [r0, r1]
   108be:	2800      	cmp	r0, #0
   108c0:	d000      	beq.n	108c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   108c2:	2001      	movs	r0, #1
   108c4:	4770      	bx	lr

000108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   108c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   108ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   108ce:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   108d2:	f3bf 8f4f 	dsb	sy
   108d6:	f3bf 8f6f 	isb	sy
   108da:	f7f7 ba95 	b.w	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   108de:	2800      	cmp	r0, #0
   108e0:	db09      	blt.n	108f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   108e2:	f000 021f 	and.w	r2, r0, #31
   108e6:	2101      	movs	r1, #1
   108e8:	4091      	lsls	r1, r2
   108ea:	0940      	lsrs	r0, r0, #5
   108ec:	0080      	lsls	r0, r0, #2
   108ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   108f2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   108f6:	4770      	bx	lr
   108f8:	2800      	cmp	r0, #0
   108fa:	db0d      	blt.n	10918 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   108fc:	f000 021f 	and.w	r2, r0, #31
   10900:	2101      	movs	r1, #1
   10902:	4091      	lsls	r1, r2
   10904:	0940      	lsrs	r0, r0, #5
   10906:	0080      	lsls	r0, r0, #2
   10908:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1090c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10910:	f3bf 8f4f 	dsb	sy
   10914:	f3bf 8f6f 	isb	sy
   10918:	4770      	bx	lr
   1091a:	5840      	ldr	r0, [r0, r1]
   1091c:	2800      	cmp	r0, #0
   1091e:	d000      	beq.n	10922 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10920:	2001      	movs	r0, #1
   10922:	4770      	bx	lr
   10924:	5840      	ldr	r0, [r0, r1]
   10926:	2800      	cmp	r0, #0
   10928:	d000      	beq.n	1092c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1092a:	2001      	movs	r0, #1
   1092c:	4770      	bx	lr

0001092e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1092e:	b510      	push	{r4, lr}
   10930:	4604      	mov	r4, r0
   10932:	4608      	mov	r0, r1
   10934:	f7f7 fcd4 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1093c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10940:	fbb0 f0f1 	udiv	r0, r0, r1
   10944:	1a20      	subs	r0, r4, r0
   10946:	1e80      	subs	r0, r0, #2
   10948:	bd10      	pop	{r4, pc}

0001094a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1094a:	b510      	push	{r4, lr}
   1094c:	4604      	mov	r4, r0
   1094e:	4608      	mov	r0, r1
   10950:	f7f7 fcc6 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10954:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10958:	fbb0 f0f1 	udiv	r0, r0, r1
   1095c:	1a20      	subs	r0, r4, r0
   1095e:	bd10      	pop	{r4, pc}
   10960:	2804      	cmp	r0, #4
   10962:	d202      	bcs.n	1096a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10964:	f04f 0028 	mov.w	r0, #40	; 0x28
   10968:	4770      	bx	lr
   1096a:	d102      	bne.n	10972 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   1096c:	f04f 0010 	mov.w	r0, #16
   10970:	4770      	bx	lr
   10972:	f04f 0000 	mov.w	r0, #0
   10976:	4770      	bx	lr
   10978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1097c:	000d      	movs	r5, r1
   1097e:	4604      	mov	r4, r0
   10980:	f04f 0602 	mov.w	r6, #2
   10984:	f04f 0701 	mov.w	r7, #1
   10988:	d008      	beq.n	1099c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   1098a:	7828      	ldrb	r0, [r5, #0]
   1098c:	b1d0      	cbz	r0, 109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   1098e:	2801      	cmp	r0, #1
   10990:	d007      	beq.n	109a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   10992:	2802      	cmp	r0, #2
   10994:	d014      	beq.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10996:	2803      	cmp	r0, #3
   10998:	d13e      	bne.n	10a18 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   1099a:	e016      	b.n	109ca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   1099c:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   109a0:	e00e      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109a2:	6868      	ldr	r0, [r5, #4]
   109a4:	28c8      	cmp	r0, #200	; 0xc8
   109a6:	d303      	bcc.n	109b0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   109a8:	2103      	movs	r1, #3
   109aa:	f7f9 fc73 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   109ae:	b108      	cbz	r0, 109b4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   109b0:	2600      	movs	r6, #0
   109b2:	e007      	b.n	109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   109b4:	4620      	mov	r0, r4
   109b6:	6869      	ldr	r1, [r5, #4]
   109b8:	f000 f833 	bl	10a22 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   109bc:	2601      	movs	r6, #1
   109be:	e001      	b.n	109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   109c0:	f7f8 fb8c 	bl	90dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   109c4:	4630      	mov	r0, r6
   109c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   109ce:	2800      	cmp	r0, #0
   109d0:	d1f6      	bne.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109d2:	6868      	ldr	r0, [r5, #4]
   109d4:	f7f8 fb54 	bl	9080 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   109d8:	b1f0      	cbz	r0, 10a18 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   109da:	6869      	ldr	r1, [r5, #4]
   109dc:	7808      	ldrb	r0, [r1, #0]
   109de:	b130      	cbz	r0, 109ee <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   109e0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   109e4:	2805      	cmp	r0, #5
   109e6:	d008      	beq.n	109fa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   109e8:	f44f 71be 	mov.w	r1, #380	; 0x17c
   109ec:	e011      	b.n	10a12 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   109ee:	4620      	mov	r0, r4
   109f0:	f000 f81f 	bl	10a32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   109f4:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   109f8:	e7e2      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109fa:	4620      	mov	r0, r4
   109fc:	f000 f832 	bl	10a64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10a00:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10a04:	4621      	mov	r1, r4
   10a06:	f000 f80a 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10a0a:	2800      	cmp	r0, #0
   10a0c:	d1d8      	bne.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a0e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   10a12:	206a      	movs	r0, #106	; 0x6a
   10a14:	f7fb ff18 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10a18:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   10a1c:	e7d0      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a1e:	f7f9 be73 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10a22:	4602      	mov	r2, r0
   10a24:	7803      	ldrb	r3, [r0, #0]
   10a26:	6840      	ldr	r0, [r0, #4]
   10a28:	4408      	add	r0, r1
   10a2a:	6050      	str	r0, [r2, #4]
   10a2c:	3859      	subs	r0, #89	; 0x59
   10a2e:	f7fa bd3b 	b.w	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10a32:	2201      	movs	r2, #1
   10a34:	7002      	strb	r2, [r0, #0]
   10a36:	2200      	movs	r2, #0
   10a38:	72c2      	strb	r2, [r0, #11]
   10a3a:	790a      	ldrb	r2, [r1, #4]
   10a3c:	b172      	cbz	r2, 10a5c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
   10a3e:	2200      	movs	r2, #0
   10a40:	8102      	strh	r2, [r0, #8]
   10a42:	794a      	ldrb	r2, [r1, #5]
   10a44:	b162      	cbz	r2, 10a60 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
   10a46:	2203      	movs	r2, #3
   10a48:	7282      	strb	r2, [r0, #10]
   10a4a:	688a      	ldr	r2, [r1, #8]
   10a4c:	326a      	adds	r2, #106	; 0x6a
   10a4e:	6042      	str	r2, [r0, #4]
   10a50:	68c9      	ldr	r1, [r1, #12]
   10a52:	6101      	str	r1, [r0, #16]
   10a54:	2103      	movs	r1, #3
   10a56:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a5a:	4770      	bx	lr
   10a5c:	222b      	movs	r2, #43	; 0x2b
   10a5e:	e7ef      	b.n	10a40 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   10a60:	2202      	movs	r2, #2
   10a62:	e7f1      	b.n	10a48 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
   10a64:	b510      	push	{r4, lr}
   10a66:	2200      	movs	r2, #0
   10a68:	7002      	strb	r2, [r0, #0]
   10a6a:	72c2      	strb	r2, [r0, #11]
   10a6c:	790a      	ldrb	r2, [r1, #4]
   10a6e:	b1a2      	cbz	r2, 10a9a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
   10a70:	2200      	movs	r2, #0
   10a72:	8102      	strh	r2, [r0, #8]
   10a74:	794a      	ldrb	r2, [r1, #5]
   10a76:	b192      	cbz	r2, 10a9e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
   10a78:	2203      	movs	r2, #3
   10a7a:	7282      	strb	r2, [r0, #10]
   10a7c:	68ca      	ldr	r2, [r1, #12]
   10a7e:	326a      	adds	r2, #106	; 0x6a
   10a80:	6042      	str	r2, [r0, #4]
   10a82:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   10a86:	6889      	ldr	r1, [r1, #8]
   10a88:	17cb      	asrs	r3, r1, #31
   10a8a:	1861      	adds	r1, r4, r1
   10a8c:	415a      	adcs	r2, r3
   10a8e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   10a92:	2104      	movs	r1, #4
   10a94:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a98:	bd10      	pop	{r4, pc}
   10a9a:	222b      	movs	r2, #43	; 0x2b
   10a9c:	e7e9      	b.n	10a72 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
   10a9e:	2202      	movs	r2, #2
   10aa0:	e7eb      	b.n	10a7a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
   10aa2:	b570      	push	{r4, r5, r6, lr}
   10aa4:	4605      	mov	r5, r0
   10aa6:	460c      	mov	r4, r1
   10aa8:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   10aac:	f7fa fa80 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10ab0:	b178      	cbz	r0, 10ad2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
   10ab2:	4620      	mov	r0, r4
   10ab4:	f000 f810 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10ab8:	6a22      	ldr	r2, [r4, #32]
   10aba:	2109      	movs	r1, #9
   10abc:	4628      	mov	r0, r5
   10abe:	4790      	blx	r2
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d008      	beq.n	10ad6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   10ac4:	7800      	ldrb	r0, [r0, #0]
   10ac6:	2800      	cmp	r0, #0
   10ac8:	d005      	beq.n	10ad6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   10aca:	21dc      	movs	r1, #220	; 0xdc
   10acc:	206a      	movs	r0, #106	; 0x6a
   10ace:	f7fb febb 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10ad2:	21d8      	movs	r1, #216	; 0xd8
   10ad4:	e7fa      	b.n	10acc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
   10ad6:	bd70      	pop	{r4, r5, r6, pc}
   10ad8:	2100      	movs	r1, #0
   10ada:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10ade:	f800 1f24 	strb.w	r1, [r0, #36]!
   10ae2:	7041      	strb	r1, [r0, #1]
   10ae4:	4770      	bx	lr

00010ae6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10ae6:	b570      	push	{r4, r5, r6, lr}
   10ae8:	f7f8 fb54 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10aec:	4605      	mov	r5, r0
   10aee:	2400      	movs	r4, #0
   10af0:	e006      	b.n	10b00 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10af2:	4620      	mov	r0, r4
   10af4:	f7f8 fb54 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10af8:	f7ff ffee 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10afc:	1c64      	adds	r4, r4, #1
   10afe:	b2e4      	uxtb	r4, r4
   10b00:	42ac      	cmp	r4, r5
   10b02:	d3f6      	bcc.n	10af2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10b04:	bd70      	pop	{r4, r5, r6, pc}

00010b06 <mpsl_timeslot_request>:
   10b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b0a:	460d      	mov	r5, r1
   10b0c:	f7f8 fb48 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b10:	0004      	movs	r4, r0
   10b12:	d008      	beq.n	10b26 <mpsl_timeslot_request+0x20>
   10b14:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10b18:	f06f 0622 	mvn.w	r6, #34	; 0x22
   10b1c:	2801      	cmp	r0, #1
   10b1e:	d006      	beq.n	10b2e <mpsl_timeslot_request+0x28>
   10b20:	2802      	cmp	r0, #2
   10b22:	d111      	bne.n	10b48 <mpsl_timeslot_request+0x42>
   10b24:	e003      	b.n	10b2e <mpsl_timeslot_request+0x28>
   10b26:	f06f 0001 	mvn.w	r0, #1
   10b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b2e:	f06f 0715 	mvn.w	r7, #21
   10b32:	b15d      	cbz	r5, 10b4c <mpsl_timeslot_request+0x46>
   10b34:	4628      	mov	r0, r5
   10b36:	f7f8 faa3 	bl	9080 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10b3a:	b138      	cbz	r0, 10b4c <mpsl_timeslot_request+0x46>
   10b3c:	7828      	ldrb	r0, [r5, #0]
   10b3e:	b138      	cbz	r0, 10b50 <mpsl_timeslot_request+0x4a>
   10b40:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10b44:	2802      	cmp	r0, #2
   10b46:	d008      	beq.n	10b5a <mpsl_timeslot_request+0x54>
   10b48:	4630      	mov	r0, r6
   10b4a:	e7ee      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b4c:	4638      	mov	r0, r7
   10b4e:	e7ec      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b50:	4629      	mov	r1, r5
   10b52:	4620      	mov	r0, r4
   10b54:	f7ff ff6d 	bl	10a32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10b58:	e003      	b.n	10b62 <mpsl_timeslot_request+0x5c>
   10b5a:	4629      	mov	r1, r5
   10b5c:	4620      	mov	r0, r4
   10b5e:	f7ff ff81 	bl	10a64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10b62:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10b66:	4621      	mov	r1, r4
   10b68:	f7ff ff59 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10b6c:	b108      	cbz	r0, 10b72 <mpsl_timeslot_request+0x6c>
   10b6e:	2000      	movs	r0, #0
   10b70:	e7db      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b72:	f240 21b1 	movw	r1, #689	; 0x2b1
   10b76:	206a      	movs	r0, #106	; 0x6a
   10b78:	f7fb fe66 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00010b7c <mpsl_timeslot_session_close>:
   10b7c:	b510      	push	{r4, lr}
   10b7e:	4604      	mov	r4, r0
   10b80:	f7f8 fb0e 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b84:	0001      	movs	r1, r0
   10b86:	d005      	beq.n	10b94 <mpsl_timeslot_session_close+0x18>
   10b88:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   10b8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
   10b90:	b978      	cbnz	r0, 10bb2 <mpsl_timeslot_session_close+0x36>
   10b92:	e002      	b.n	10b9a <mpsl_timeslot_session_close+0x1e>
   10b94:	f06f 0001 	mvn.w	r0, #1
   10b98:	bd10      	pop	{r4, pc}
   10b9a:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   10b9e:	b140      	cbz	r0, 10bb2 <mpsl_timeslot_session_close+0x36>
   10ba0:	2802      	cmp	r0, #2
   10ba2:	d008      	beq.n	10bb6 <mpsl_timeslot_session_close+0x3a>
   10ba4:	2801      	cmp	r0, #1
   10ba6:	d006      	beq.n	10bb6 <mpsl_timeslot_session_close+0x3a>
   10ba8:	2001      	movs	r0, #1
   10baa:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   10bae:	2000      	movs	r0, #0
   10bb0:	bd10      	pop	{r4, pc}
   10bb2:	4610      	mov	r0, r2
   10bb4:	bd10      	pop	{r4, pc}
   10bb6:	4620      	mov	r0, r4
   10bb8:	f7ff ff73 	bl	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
   10bbc:	e7f7      	b.n	10bae <mpsl_timeslot_session_close+0x32>

00010bbe <mpsl_timeslot_session_count_set>:
   10bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bc2:	460e      	mov	r6, r1
   10bc4:	4607      	mov	r7, r0
   10bc6:	f7f8 fae5 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10bca:	4605      	mov	r5, r0
   10bcc:	2400      	movs	r4, #0
   10bce:	e00b      	b.n	10be8 <mpsl_timeslot_session_count_set+0x2a>
   10bd0:	4620      	mov	r0, r4
   10bd2:	f7f8 fae5 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10bd6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   10bda:	b118      	cbz	r0, 10be4 <mpsl_timeslot_session_count_set+0x26>
   10bdc:	f04f 30ff 	mov.w	r0, #4294967295
   10be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10be4:	1c64      	adds	r4, r4, #1
   10be6:	b2e4      	uxtb	r4, r4
   10be8:	42ac      	cmp	r4, r5
   10bea:	d3f1      	bcc.n	10bd0 <mpsl_timeslot_session_count_set+0x12>
   10bec:	2e08      	cmp	r6, #8
   10bee:	d902      	bls.n	10bf6 <mpsl_timeslot_session_count_set+0x38>
   10bf0:	f06f 0015 	mvn.w	r0, #21
   10bf4:	e7f4      	b.n	10be0 <mpsl_timeslot_session_count_set+0x22>
   10bf6:	b117      	cbz	r7, 10bfe <mpsl_timeslot_session_count_set+0x40>
   10bf8:	4631      	mov	r1, r6
   10bfa:	4638      	mov	r0, r7
   10bfc:	e001      	b.n	10c02 <mpsl_timeslot_session_count_set+0x44>
   10bfe:	2100      	movs	r1, #0
   10c00:	4608      	mov	r0, r1
   10c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c06:	f7f8 bab1 	b.w	916c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00010c0a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10c0a:	f7fa bed1 	b.w	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10c0e:	b510      	push	{r4, lr}
   10c10:	2000      	movs	r0, #0
   10c12:	f7fb fa07 	bl	c024 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10c16:	6800      	ldr	r0, [r0, #0]
   10c18:	2800      	cmp	r0, #0
   10c1a:	bf18      	it	ne
   10c1c:	2001      	movne	r0, #1
   10c1e:	bd10      	pop	{r4, pc}

00010c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10c20:	0a41      	lsrs	r1, r0, #9
   10c22:	f643 5209 	movw	r2, #15625	; 0x3d09
   10c26:	4351      	muls	r1, r2
   10c28:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10c2c:	fb10 f002 	smulbb	r0, r0, r2
   10c30:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10c34:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10c38:	4770      	bx	lr
   10c3a:	2800      	cmp	r0, #0
   10c3c:	db09      	blt.n	10c52 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10c3e:	f000 021f 	and.w	r2, r0, #31
   10c42:	2101      	movs	r1, #1
   10c44:	4091      	lsls	r1, r2
   10c46:	0940      	lsrs	r0, r0, #5
   10c48:	0080      	lsls	r0, r0, #2
   10c4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c52:	4770      	bx	lr
   10c54:	2800      	cmp	r0, #0
   10c56:	db0d      	blt.n	10c74 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10c58:	f000 021f 	and.w	r2, r0, #31
   10c5c:	2101      	movs	r1, #1
   10c5e:	4091      	lsls	r1, r2
   10c60:	0940      	lsrs	r0, r0, #5
   10c62:	0080      	lsls	r0, r0, #2
   10c64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c68:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c6c:	f3bf 8f4f 	dsb	sy
   10c70:	f3bf 8f6f 	isb	sy
   10c74:	4770      	bx	lr
   10c76:	5840      	ldr	r0, [r0, r1]
   10c78:	2800      	cmp	r0, #0
   10c7a:	d000      	beq.n	10c7e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10c7c:	2001      	movs	r0, #1
   10c7e:	4770      	bx	lr
   10c80:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10c84:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10c88:	f002 0201 	and.w	r2, r2, #1
   10c8c:	03c0      	lsls	r0, r0, #15
   10c8e:	d503      	bpl.n	10c98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10c90:	428a      	cmp	r2, r1
   10c92:	d101      	bne.n	10c98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10c94:	2001      	movs	r0, #1
   10c96:	4770      	bx	lr
   10c98:	2000      	movs	r0, #0
   10c9a:	4770      	bx	lr

00010c9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10c9c:	b510      	push	{r4, lr}
   10c9e:	2101      	movs	r1, #1
   10ca0:	0788      	lsls	r0, r1, #30
   10ca2:	f7fb fd7b 	bl	c79c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10ca6:	2800      	cmp	r0, #0
   10ca8:	d000      	beq.n	10cac <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10caa:	2001      	movs	r0, #1
   10cac:	bd10      	pop	{r4, pc}

00010cae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10cae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10cb2:	2101      	movs	r1, #1
   10cb4:	6001      	str	r1, [r0, #0]
   10cb6:	4770      	bx	lr

00010cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10cb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10cbc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10cc0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10cc4:	f002 0203 	and.w	r2, r2, #3
   10cc8:	03c9      	lsls	r1, r1, #15
   10cca:	d503      	bpl.n	10cd4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10ccc:	4282      	cmp	r2, r0
   10cce:	d101      	bne.n	10cd4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10cd0:	2001      	movs	r0, #1
   10cd2:	4770      	bx	lr
   10cd4:	2000      	movs	r0, #0
   10cd6:	4770      	bx	lr

00010cd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10cd8:	b510      	push	{r4, lr}
   10cda:	2100      	movs	r1, #0
   10cdc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10ce0:	f7fb fd5c 	bl	c79c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10ce4:	2800      	cmp	r0, #0
   10ce6:	d000      	beq.n	10cea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10ce8:	2001      	movs	r0, #1
   10cea:	bd10      	pop	{r4, pc}
   10cec:	2800      	cmp	r0, #0
   10cee:	db09      	blt.n	10d04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10cf0:	f000 021f 	and.w	r2, r0, #31
   10cf4:	2101      	movs	r1, #1
   10cf6:	4091      	lsls	r1, r2
   10cf8:	0940      	lsrs	r0, r0, #5
   10cfa:	0080      	lsls	r0, r0, #2
   10cfc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d00:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d04:	4770      	bx	lr
   10d06:	2800      	cmp	r0, #0
   10d08:	db0d      	blt.n	10d26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10d0a:	f000 021f 	and.w	r2, r0, #31
   10d0e:	2101      	movs	r1, #1
   10d10:	4091      	lsls	r1, r2
   10d12:	0940      	lsrs	r0, r0, #5
   10d14:	0080      	lsls	r0, r0, #2
   10d16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d1a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10d1e:	f3bf 8f4f 	dsb	sy
   10d22:	f3bf 8f6f 	isb	sy
   10d26:	4770      	bx	lr
   10d28:	00021000 	.word	0x00021000
   10d2c:	000000fa 	.word	0x000000fa
   10d30:	cc9ef18c 	.word	0xcc9ef18c
   10d34:	a7d74134 	.word	0xa7d74134
   10d38:	1459f70e 	.word	0x1459f70e
   10d3c:	67d72bbb 	.word	0x67d72bbb
   10d40:	ebbebb7f 	.word	0xebbebb7f
   10d44:	2800      	cmp	r0, #0
   10d46:	db09      	blt.n	10d5c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10d48:	f000 021f 	and.w	r2, r0, #31
   10d4c:	2101      	movs	r1, #1
   10d4e:	4091      	lsls	r1, r2
   10d50:	0940      	lsrs	r0, r0, #5
   10d52:	0080      	lsls	r0, r0, #2
   10d54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d58:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d5c:	4770      	bx	lr

00010d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10d5e:	f3ef 8110 	mrs	r1, PRIMASK
   10d62:	b672      	cpsid	i
   10d64:	7802      	ldrb	r2, [r0, #0]
   10d66:	2a01      	cmp	r2, #1
   10d68:	d001      	beq.n	10d6e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10d6a:	2201      	movs	r2, #1
   10d6c:	e000      	b.n	10d70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10d6e:	2200      	movs	r2, #0
   10d70:	2301      	movs	r3, #1
   10d72:	7003      	strb	r3, [r0, #0]
   10d74:	b901      	cbnz	r1, 10d78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10d76:	b662      	cpsie	i
   10d78:	b10a      	cbz	r2, 10d7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10d7a:	2000      	movs	r0, #0
   10d7c:	4770      	bx	lr
   10d7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10d82:	4770      	bx	lr

00010d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10d84:	2100      	movs	r1, #0
   10d86:	7001      	strb	r1, [r0, #0]
   10d88:	4608      	mov	r0, r1
   10d8a:	4770      	bx	lr

00010d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10d8c:	f3ef 8110 	mrs	r1, PRIMASK
   10d90:	b672      	cpsid	i
   10d92:	2200      	movs	r2, #0
   10d94:	7002      	strb	r2, [r0, #0]
   10d96:	b901      	cbnz	r1, 10d9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10d98:	b662      	cpsie	i
   10d9a:	2000      	movs	r0, #0
   10d9c:	4770      	bx	lr

00010d9e <mpsl_low_priority_process>:
   10d9e:	f7fb be53 	b.w	ca48 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10da2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10da6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10daa:	280f      	cmp	r0, #15
   10dac:	d001      	beq.n	10db2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10dae:	2000      	movs	r0, #0
   10db0:	4770      	bx	lr
   10db2:	2001      	movs	r0, #1
   10db4:	4770      	bx	lr

00010db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10db6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dbe:	280a      	cmp	r0, #10
   10dc0:	d001      	beq.n	10dc6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10dc2:	2000      	movs	r0, #0
   10dc4:	4770      	bx	lr
   10dc6:	2001      	movs	r0, #1
   10dc8:	4770      	bx	lr

00010dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10dca:	b500      	push	{lr}
   10dcc:	f7ff fff3 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10dd0:	b120      	cbz	r0, 10ddc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10dd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dd6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10dda:	b108      	cbz	r0, 10de0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10ddc:	2000      	movs	r0, #0
   10dde:	bd00      	pop	{pc}
   10de0:	2001      	movs	r0, #1
   10de2:	bd00      	pop	{pc}

00010de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10de4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10de8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dec:	280e      	cmp	r0, #14
   10dee:	d001      	beq.n	10df4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10df0:	2000      	movs	r0, #0
   10df2:	4770      	bx	lr
   10df4:	2001      	movs	r0, #1
   10df6:	4770      	bx	lr

00010df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dfc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e00:	2810      	cmp	r0, #16
   10e02:	d001      	beq.n	10e08 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10e04:	2000      	movs	r0, #0
   10e06:	4770      	bx	lr
   10e08:	2001      	movs	r0, #1
   10e0a:	4770      	bx	lr

00010e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10e0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e10:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e14:	2806      	cmp	r0, #6
   10e16:	d003      	beq.n	10e20 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e18:	1c40      	adds	r0, r0, #1
   10e1a:	d001      	beq.n	10e20 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e1c:	2000      	movs	r0, #0
   10e1e:	4770      	bx	lr
   10e20:	2001      	movs	r0, #1
   10e22:	4770      	bx	lr

00010e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10e24:	b500      	push	{lr}
   10e26:	f7ff fff1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e2a:	b148      	cbz	r0, 10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e30:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e34:	2806      	cmp	r0, #6
   10e36:	d303      	bcc.n	10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e38:	1c40      	adds	r0, r0, #1
   10e3a:	d001      	beq.n	10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e3c:	2001      	movs	r0, #1
   10e3e:	bd00      	pop	{pc}
   10e40:	2000      	movs	r0, #0
   10e42:	bd00      	pop	{pc}

00010e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10e44:	b500      	push	{lr}
   10e46:	f7ff ffe1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e4a:	b138      	cbz	r0, 10e5c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10e4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e50:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e54:	2806      	cmp	r0, #6
   10e56:	d303      	bcc.n	10e60 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e58:	1c40      	adds	r0, r0, #1
   10e5a:	d001      	beq.n	10e60 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e5c:	2000      	movs	r0, #0
   10e5e:	bd00      	pop	{pc}
   10e60:	2001      	movs	r0, #1
   10e62:	bd00      	pop	{pc}

00010e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10e64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e68:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e6c:	280d      	cmp	r0, #13
   10e6e:	d001      	beq.n	10e74 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10e70:	2000      	movs	r0, #0
   10e72:	4770      	bx	lr
   10e74:	2001      	movs	r0, #1
   10e76:	4770      	bx	lr

00010e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10e78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e7c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e80:	2808      	cmp	r0, #8
   10e82:	d001      	beq.n	10e88 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10e84:	2000      	movs	r0, #0
   10e86:	4770      	bx	lr
   10e88:	2001      	movs	r0, #1
   10e8a:	4770      	bx	lr

00010e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10e8c:	f7fb be16 	b.w	cabc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010e90 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10e90:	f7fb be14 	b.w	cabc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010e94 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e98:	428a      	cmp	r2, r1
   10e9a:	d803      	bhi.n	10ea4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10e9c:	2179      	movs	r1, #121	; 0x79
   10e9e:	2096      	movs	r0, #150	; 0x96
   10ea0:	f7fb fcd2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10ea4:	fab2 f382 	clz	r3, r2
   10ea8:	b13b      	cbz	r3, 10eba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10eaa:	4099      	lsls	r1, r3
   10eac:	f1c3 0420 	rsb	r4, r3, #32
   10eb0:	fa20 f404 	lsr.w	r4, r0, r4
   10eb4:	4321      	orrs	r1, r4
   10eb6:	4098      	lsls	r0, r3
   10eb8:	409a      	lsls	r2, r3
   10eba:	0c14      	lsrs	r4, r2, #16
   10ebc:	0c07      	lsrs	r7, r0, #16
   10ebe:	b286      	uxth	r6, r0
   10ec0:	fbb1 f0f4 	udiv	r0, r1, r4
   10ec4:	fbb1 f3f4 	udiv	r3, r1, r4
   10ec8:	fb04 1c10 	mls	ip, r4, r0, r1
   10ecc:	b295      	uxth	r5, r2
   10ece:	fb03 f005 	mul.w	r0, r3, r5
   10ed2:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10ed6:	4560      	cmp	r0, ip
   10ed8:	d907      	bls.n	10eea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10eda:	eba0 000c 	sub.w	r0, r0, ip
   10ede:	4290      	cmp	r0, r2
   10ee0:	d901      	bls.n	10ee6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10ee2:	2002      	movs	r0, #2
   10ee4:	e000      	b.n	10ee8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10ee6:	2001      	movs	r0, #1
   10ee8:	1a1b      	subs	r3, r3, r0
   10eea:	0409      	lsls	r1, r1, #16
   10eec:	0418      	lsls	r0, r3, #16
   10eee:	19c9      	adds	r1, r1, r7
   10ef0:	fba3 3702 	umull	r3, r7, r3, r2
   10ef4:	1acf      	subs	r7, r1, r3
   10ef6:	fbb7 f1f4 	udiv	r1, r7, r4
   10efa:	fbb7 f3f4 	udiv	r3, r7, r4
   10efe:	fb04 7413 	mls	r4, r4, r3, r7
   10f02:	fb01 f305 	mul.w	r3, r1, r5
   10f06:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10f0a:	42a3      	cmp	r3, r4
   10f0c:	d906      	bls.n	10f1c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10f0e:	1b1b      	subs	r3, r3, r4
   10f10:	4293      	cmp	r3, r2
   10f12:	d901      	bls.n	10f18 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10f14:	2202      	movs	r2, #2
   10f16:	e000      	b.n	10f1a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10f18:	2201      	movs	r2, #1
   10f1a:	1a89      	subs	r1, r1, r2
   10f1c:	4308      	orrs	r0, r1
   10f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   10f22:	2a00      	cmp	r2, #0
   10f24:	bf04      	itt	eq
   10f26:	2000      	moveq	r0, #0
   10f28:	4770      	bxeq	lr
   10f2a:	1e52      	subs	r2, r2, #1
   10f2c:	d007      	beq.n	10f3e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10f2e:	7803      	ldrb	r3, [r0, #0]
   10f30:	f891 c000 	ldrb.w	ip, [r1]
   10f34:	4563      	cmp	r3, ip
   10f36:	bf04      	itt	eq
   10f38:	1c40      	addeq	r0, r0, #1
   10f3a:	1c49      	addeq	r1, r1, #1
   10f3c:	d0f5      	beq.n	10f2a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10f3e:	7800      	ldrb	r0, [r0, #0]
   10f40:	7809      	ldrb	r1, [r1, #0]
   10f42:	1a40      	subs	r0, r0, r1
   10f44:	4770      	bx	lr

00010f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10f46:	b4f0      	push	{r4, r5, r6, r7}
   10f48:	ea80 0c01 	eor.w	ip, r0, r1
   10f4c:	4603      	mov	r3, r0
   10f4e:	f01c 0f03 	tst.w	ip, #3
   10f52:	d13c      	bne.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f54:	f013 0f03 	tst.w	r3, #3
   10f58:	d00b      	beq.n	10f72 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10f5a:	2a00      	cmp	r2, #0
   10f5c:	bf04      	itt	eq
   10f5e:	bcf0      	popeq	{r4, r5, r6, r7}
   10f60:	4770      	bxeq	lr
   10f62:	f811 cb01 	ldrb.w	ip, [r1], #1
   10f66:	f803 cb01 	strb.w	ip, [r3], #1
   10f6a:	1e52      	subs	r2, r2, #1
   10f6c:	f013 0f03 	tst.w	r3, #3
   10f70:	d1f3      	bne.n	10f5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10f72:	2a03      	cmp	r2, #3
   10f74:	d94f      	bls.n	11016 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10f76:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f7a:	d24c      	bcs.n	11016 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10f7c:	f1c2 0c00 	rsb	ip, r2, #0
   10f80:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10f84:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10f88:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10f8c:	f1cc 0c00 	rsb	ip, ip, #0
   10f90:	f1bc 0f00 	cmp.w	ip, #0
   10f94:	dd1b      	ble.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f96:	1f0d      	subs	r5, r1, #4
   10f98:	1f1c      	subs	r4, r3, #4
   10f9a:	f01c 0f01 	tst.w	ip, #1
   10f9e:	d003      	beq.n	10fa8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10fa0:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10fa4:	f844 6f04 	str.w	r6, [r4, #4]!
   10fa8:	ea5f 066c 	movs.w	r6, ip, asr #1
   10fac:	d007      	beq.n	10fbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10fae:	686f      	ldr	r7, [r5, #4]
   10fb0:	6067      	str	r7, [r4, #4]
   10fb2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10fb6:	f844 7f08 	str.w	r7, [r4, #8]!
   10fba:	1e76      	subs	r6, r6, #1
   10fbc:	d1f7      	bne.n	10fae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10fbe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10fc2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10fc6:	f1cc 0c00 	rsb	ip, ip, #0
   10fca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10fce:	2a00      	cmp	r2, #0
   10fd0:	bf04      	itt	eq
   10fd2:	bcf0      	popeq	{r4, r5, r6, r7}
   10fd4:	4770      	bxeq	lr
   10fd6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fda:	d226      	bcs.n	1102a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10fdc:	2a00      	cmp	r2, #0
   10fde:	bfdc      	itt	le
   10fe0:	bcf0      	pople	{r4, r5, r6, r7}
   10fe2:	4770      	bxle	lr
   10fe4:	1e49      	subs	r1, r1, #1
   10fe6:	1e5b      	subs	r3, r3, #1
   10fe8:	f012 0f01 	tst.w	r2, #1
   10fec:	d003      	beq.n	10ff6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10fee:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ff2:	f803 cf01 	strb.w	ip, [r3, #1]!
   10ff6:	1052      	asrs	r2, r2, #1
   10ff8:	bf04      	itt	eq
   10ffa:	bcf0      	popeq	{r4, r5, r6, r7}
   10ffc:	4770      	bxeq	lr
   10ffe:	f891 c001 	ldrb.w	ip, [r1, #1]
   11002:	f883 c001 	strb.w	ip, [r3, #1]
   11006:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   1100a:	f803 cf02 	strb.w	ip, [r3, #2]!
   1100e:	1e52      	subs	r2, r2, #1
   11010:	d1f5      	bne.n	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   11012:	bcf0      	pop	{r4, r5, r6, r7}
   11014:	4770      	bx	lr
   11016:	2a04      	cmp	r2, #4
   11018:	d3d9      	bcc.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1101a:	f851 cb04 	ldr.w	ip, [r1], #4
   1101e:	1f12      	subs	r2, r2, #4
   11020:	f843 cb04 	str.w	ip, [r3], #4
   11024:	2a04      	cmp	r2, #4
   11026:	d2f8      	bcs.n	1101a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   11028:	e7d1      	b.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1102a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1102e:	f803 cb01 	strb.w	ip, [r3], #1
   11032:	1e52      	subs	r2, r2, #1
   11034:	d1f9      	bne.n	1102a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   11036:	bcf0      	pop	{r4, r5, r6, r7}
   11038:	4770      	bx	lr

0001103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   1103a:	b470      	push	{r4, r5, r6}
   1103c:	4603      	mov	r3, r0
   1103e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   11042:	f010 0f03 	tst.w	r0, #3
   11046:	d009      	beq.n	1105c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   11048:	2a00      	cmp	r2, #0
   1104a:	bf04      	itt	eq
   1104c:	bc70      	popeq	{r4, r5, r6}
   1104e:	4770      	bxeq	lr
   11050:	f803 cb01 	strb.w	ip, [r3], #1
   11054:	1e52      	subs	r2, r2, #1
   11056:	f013 0f03 	tst.w	r3, #3
   1105a:	d1f5      	bne.n	11048 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   1105c:	b2c9      	uxtb	r1, r1
   1105e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11062:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   11066:	2a03      	cmp	r2, #3
   11068:	d939      	bls.n	110de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   1106a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1106e:	d236      	bcs.n	110de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11070:	4251      	negs	r1, r2
   11072:	17cc      	asrs	r4, r1, #31
   11074:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   11078:	1089      	asrs	r1, r1, #2
   1107a:	424e      	negs	r6, r1
   1107c:	2e00      	cmp	r6, #0
   1107e:	dd11      	ble.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11080:	1f19      	subs	r1, r3, #4
   11082:	f016 0f01 	tst.w	r6, #1
   11086:	bf18      	it	ne
   11088:	f841 5f04 	strne.w	r5, [r1, #4]!
   1108c:	1074      	asrs	r4, r6, #1
   1108e:	d004      	beq.n	1109a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   11090:	604d      	str	r5, [r1, #4]
   11092:	f841 5f08 	str.w	r5, [r1, #8]!
   11096:	1e64      	subs	r4, r4, #1
   11098:	d1fa      	bne.n	11090 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1109a:	4271      	negs	r1, r6
   1109c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   110a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   110a4:	2a00      	cmp	r2, #0
   110a6:	bf04      	itt	eq
   110a8:	bc70      	popeq	{r4, r5, r6}
   110aa:	4770      	bxeq	lr
   110ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   110b0:	d21d      	bcs.n	110ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   110b2:	2a00      	cmp	r2, #0
   110b4:	bfdc      	itt	le
   110b6:	bc70      	pople	{r4, r5, r6}
   110b8:	4770      	bxle	lr
   110ba:	1e59      	subs	r1, r3, #1
   110bc:	f012 0f01 	tst.w	r2, #1
   110c0:	bf18      	it	ne
   110c2:	f801 cf01 	strbne.w	ip, [r1, #1]!
   110c6:	1052      	asrs	r2, r2, #1
   110c8:	bf04      	itt	eq
   110ca:	bc70      	popeq	{r4, r5, r6}
   110cc:	4770      	bxeq	lr
   110ce:	f881 c001 	strb.w	ip, [r1, #1]
   110d2:	f801 cf02 	strb.w	ip, [r1, #2]!
   110d6:	1e52      	subs	r2, r2, #1
   110d8:	d1f9      	bne.n	110ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   110da:	bc70      	pop	{r4, r5, r6}
   110dc:	4770      	bx	lr
   110de:	2a04      	cmp	r2, #4
   110e0:	d3e0      	bcc.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   110e2:	1f12      	subs	r2, r2, #4
   110e4:	f843 5b04 	str.w	r5, [r3], #4
   110e8:	2a04      	cmp	r2, #4
   110ea:	d2fa      	bcs.n	110e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   110ec:	e7da      	b.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   110ee:	f803 cb01 	strb.w	ip, [r3], #1
   110f2:	1e52      	subs	r2, r2, #1
   110f4:	d1fb      	bne.n	110ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   110f6:	bc70      	pop	{r4, r5, r6}
   110f8:	4770      	bx	lr
   110fa:	f04f 30ff 	mov.w	r0, #4294967295
   110fe:	4770      	bx	lr
   11100:	2000      	movs	r0, #0
   11102:	4770      	bx	lr
   11104:	2000      	movs	r0, #0
   11106:	4770      	bx	lr
   11108:	f04f 30ff 	mov.w	r0, #4294967295
   1110c:	4770      	bx	lr
   1110e:	4770      	bx	lr
   11110:	4770      	bx	lr
   11112:	2000      	movs	r0, #0
   11114:	4770      	bx	lr
   11116:	2100      	movs	r1, #0
   11118:	7001      	strb	r1, [r0, #0]
   1111a:	4770      	bx	lr
   1111c:	f04f 30ff 	mov.w	r0, #4294967295
   11120:	4770      	bx	lr
   11122:	f04f 30ff 	mov.w	r0, #4294967295
   11126:	4770      	bx	lr
   11128:	2100      	movs	r1, #0
   1112a:	7001      	strb	r1, [r0, #0]
   1112c:	4770      	bx	lr
   1112e:	f04f 30ff 	mov.w	r0, #4294967295
   11132:	4770      	bx	lr
   11134:	f04f 30ff 	mov.w	r0, #4294967295
   11138:	4770      	bx	lr
   1113a:	7800      	ldrb	r0, [r0, #0]
   1113c:	2800      	cmp	r0, #0
   1113e:	d001      	beq.n	11144 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   11140:	f06f 0015 	mvn.w	r0, #21
   11144:	4770      	bx	lr
   11146:	2000      	movs	r0, #0
   11148:	4770      	bx	lr
   1114a:	2200      	movs	r2, #0
   1114c:	f000 b802 	b.w	11154 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00011150 <mpsl_fem_init>:
   11150:	f7f7 bdf4 	b.w	8d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00011154 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   11154:	b570      	push	{r4, r5, r6, lr}
   11156:	4614      	mov	r4, r2
   11158:	460d      	mov	r5, r1
   1115a:	1b00      	subs	r0, r0, r4
   1115c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   11160:	4288      	cmp	r0, r1
   11162:	da01      	bge.n	11168 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   11164:	4608      	mov	r0, r1
   11166:	e002      	b.n	1116e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11168:	287f      	cmp	r0, #127	; 0x7f
   1116a:	dd00      	ble.n	1116e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1116c:	207f      	movs	r0, #127	; 0x7f
   1116e:	4619      	mov	r1, r3
   11170:	b240      	sxtb	r0, r0
   11172:	f7f7 fe17 	bl	8da4 <mpsl_tx_power_radio_supported_power_adjust>
   11176:	7028      	strb	r0, [r5, #0]
   11178:	706c      	strb	r4, [r5, #1]
   1117a:	2100      	movs	r1, #0
   1117c:	4420      	add	r0, r4
   1117e:	70a9      	strb	r1, [r5, #2]
   11180:	b240      	sxtb	r0, r0
   11182:	bd70      	pop	{r4, r5, r6, pc}
   11184:	1702080c 	.word	0x1702080c
   11188:	0201010d 	.word	0x0201010d
   1118c:	01010909 	.word	0x01010909
   11190:	18090206 	.word	0x18090206
   11194:	01010318 	.word	0x01010318
   11198:	03030909 	.word	0x03030909
   1119c:	01020305 	.word	0x01020305
   111a0:	24020223 	.word	0x24020223
   111a4:	04041009 	.word	0x04041009
   111a8:	0b0b0505 	.word	0x0b0b0505
   111ac:	0b04      	.short	0x0b04
   111ae:	2b          	.byte	0x2b
   111af:	25          	.byte	0x25
   111b0:	2726      	.short	0x2726
   111b2:	0301      	.short	0x0301
   111b4:	0101      	.short	0x0101
   111b6:	01          	.byte	0x01
   111b7:	d8          	.byte	0xd8
   111b8:	f8f4f0ec 	.word	0xf8f4f0ec
   111bc:	030200fc 	.word	0x030200fc
   111c0:	07060504 	.word	0x07060504
   111c4:	00000008 	.word	0x00000008
	...
   111d8:	01010100 	.word	0x01010100
   111dc:	02020201 	.word	0x02020201
   111e0:	03030302 	.word	0x03030302
   111e4:	04040403 	.word	0x04040403
   111e8:	05050504 	.word	0x05050504
   111ec:	07060605 	.word	0x07060605
   111f0:	0b0a0908 	.word	0x0b0a0908
   111f4:	00000d0c 	.word	0x00000d0c
	...
   11208:	01010000 	.word	0x01010000
   1120c:	02020101 	.word	0x02020101
   11210:	03030202 	.word	0x03030202
   11214:	04040303 	.word	0x04040303
   11218:	05050404 	.word	0x05050404
   1121c:	06060505 	.word	0x06060505
   11220:	00090806 	.word	0x00090806
   11224:	00000000 	.word	0x00000000

00011228 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11228:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1122a:	4d3e      	ldr	r5, [pc, #248]	; (11324 <bt_init+0xfc>)
   1122c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   11230:	6899      	ldr	r1, [r3, #8]
   11232:	f011 0101 	ands.w	r1, r1, #1
{
   11236:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11238:	d124      	bne.n	11284 <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1123a:	aa05      	add	r2, sp, #20
   1123c:	f640 4003 	movw	r0, #3075	; 0xc03
   11240:	f005 f848 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   11244:	4604      	mov	r4, r0
   11246:	2800      	cmp	r0, #0
   11248:	d168      	bne.n	1131c <bt_init+0xf4>
		hci_reset_complete(rsp);
   1124a:	9c05      	ldr	r4, [sp, #20]
	uint8_t status = buf->data[0];
   1124c:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	b9ab      	cbnz	r3, 1127e <bt_init+0x56>
		bt_scan_reset();
   11252:	f006 fc65 	bl	17b20 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11256:	f3bf 8f5b 	dmb	ish
   1125a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1125e:	f3bf 8f5b 	dmb	ish
   11262:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11266:	f003 0309 	and.w	r3, r3, #9
   1126a:	f3bf 8f5b 	dmb	ish
   1126e:	e852 1f00 	ldrex	r1, [r2]
   11272:	e842 3000 	strex	r0, r3, [r2]
   11276:	2800      	cmp	r0, #0
   11278:	d1f9      	bne.n	1126e <bt_init+0x46>
   1127a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1127e:	4620      	mov	r0, r4
   11280:	f00d fe10 	bl	1eea4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11284:	aa05      	add	r2, sp, #20
   11286:	2100      	movs	r1, #0
   11288:	f241 0003 	movw	r0, #4099	; 0x1003
   1128c:	f005 f822 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   11290:	4604      	mov	r4, r0
   11292:	2800      	cmp	r0, #0
   11294:	d142      	bne.n	1131c <bt_init+0xf4>
	read_local_features_complete(rsp);
   11296:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11298:	4823      	ldr	r0, [pc, #140]	; (11328 <bt_init+0x100>)
   1129a:	68f1      	ldr	r1, [r6, #12]
   1129c:	2208      	movs	r2, #8
   1129e:	3101      	adds	r1, #1
   112a0:	f01a fc2a 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   112a4:	4630      	mov	r0, r6
   112a6:	f00d fdfd 	bl	1eea4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   112aa:	4621      	mov	r1, r4
   112ac:	aa05      	add	r2, sp, #20
   112ae:	f241 0001 	movw	r0, #4097	; 0x1001
   112b2:	f005 f80f 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   112b6:	4604      	mov	r4, r0
   112b8:	bb80      	cbnz	r0, 1131c <bt_init+0xf4>
	read_local_ver_complete(rsp);
   112ba:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   112bc:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   112be:	785a      	ldrb	r2, [r3, #1]
   112c0:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   112c4:	885a      	ldrh	r2, [r3, #2]
   112c6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   112ca:	791a      	ldrb	r2, [r3, #4]
   112cc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   112d0:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   112d4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   112d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   112dc:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   112e0:	f00d fde0 	bl	1eea4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   112e4:	4621      	mov	r1, r4
   112e6:	aa05      	add	r2, sp, #20
   112e8:	f241 0002 	movw	r0, #4098	; 0x1002
   112ec:	f004 fff2 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   112f0:	4604      	mov	r4, r0
   112f2:	b998      	cbnz	r0, 1131c <bt_init+0xf4>
	read_supported_commands_complete(rsp);
   112f4:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
   112f6:	480d      	ldr	r0, [pc, #52]	; (1132c <bt_init+0x104>)
   112f8:	68f1      	ldr	r1, [r6, #12]
   112fa:	2240      	movs	r2, #64	; 0x40
   112fc:	3101      	adds	r1, #1
   112fe:	f01a fbfb 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   11302:	4630      	mov	r0, r6
   11304:	f00d fdce 	bl	1eea4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11308:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1130c:	065a      	lsls	r2, r3, #25
   1130e:	d411      	bmi.n	11334 <bt_init+0x10c>
		LOG_ERR("Non-LE capable controller detected!");
   11310:	4807      	ldr	r0, [pc, #28]	; (11330 <bt_init+0x108>)
   11312:	2145      	movs	r1, #69	; 0x45
   11314:	f019 fc28 	bl	2ab68 <z_log_minimal_printk>
		return -ENODEV;
   11318:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1131c:	4620      	mov	r0, r4
   1131e:	b006      	add	sp, #24
   11320:	bd70      	pop	{r4, r5, r6, pc}
   11322:	bf00      	nop
   11324:	20000378 	.word	0x20000378
   11328:	200003e8 	.word	0x200003e8
   1132c:	200003f0 	.word	0x200003f0
   11330:	00031aee 	.word	0x00031aee
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11334:	4621      	mov	r1, r4
   11336:	aa05      	add	r2, sp, #20
   11338:	f242 0003 	movw	r0, #8195	; 0x2003
   1133c:	f004 ffca 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   11340:	4604      	mov	r4, r0
   11342:	2800      	cmp	r0, #0
   11344:	d1ea      	bne.n	1131c <bt_init+0xf4>
	read_le_features_complete(rsp);
   11346:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11348:	48b1      	ldr	r0, [pc, #708]	; (11610 <bt_init+0x3e8>)
   1134a:	68f1      	ldr	r1, [r6, #12]
   1134c:	2208      	movs	r2, #8
   1134e:	3101      	adds	r1, #1
   11350:	f01a fbd2 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   11354:	4630      	mov	r0, r6
   11356:	f00d fda5 	bl	1eea4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1135a:	4621      	mov	r1, r4
   1135c:	aa05      	add	r2, sp, #20
   1135e:	f242 0002 	movw	r0, #8194	; 0x2002
   11362:	f004 ffb7 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   11366:	4604      	mov	r4, r0
   11368:	2800      	cmp	r0, #0
   1136a:	d1d7      	bne.n	1131c <bt_init+0xf4>
		le_read_buffer_size_complete(rsp);
   1136c:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1136e:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11370:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11374:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   11378:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1137a:	b121      	cbz	r1, 11386 <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1137c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1137e:	48a5      	ldr	r0, [pc, #660]	; (11614 <bt_init+0x3ec>)
   11380:	4611      	mov	r1, r2
   11382:	f01d fc27 	bl	2ebd4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   11386:	4620      	mov	r0, r4
   11388:	f00d fd8c 	bl	1eea4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1138c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11390:	f016 0620 	ands.w	r6, r6, #32
   11394:	d118      	bne.n	113c8 <bt_init+0x1a0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11396:	2102      	movs	r1, #2
   11398:	f640 406d 	movw	r0, #3181	; 0xc6d
   1139c:	f004 ff50 	bl	16240 <bt_hci_cmd_create>
		if (!buf) {
   113a0:	4604      	mov	r4, r0
   113a2:	2800      	cmp	r0, #0
   113a4:	f000 80e6 	beq.w	11574 <bt_init+0x34c>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   113a8:	2102      	movs	r1, #2
   113aa:	300c      	adds	r0, #12
   113ac:	f00d fe80 	bl	1f0b0 <net_buf_simple_add>
		cp_le->le = 0x01;
   113b0:	2301      	movs	r3, #1
   113b2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   113b4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   113b6:	4621      	mov	r1, r4
   113b8:	4632      	mov	r2, r6
   113ba:	f640 406d 	movw	r0, #3181	; 0xc6d
   113be:	f004 ff89 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   113c2:	4604      	mov	r4, r0
   113c4:	2800      	cmp	r0, #0
   113c6:	d1a9      	bne.n	1131c <bt_init+0xf4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   113c8:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   113cc:	071b      	lsls	r3, r3, #28
   113ce:	d512      	bpl.n	113f6 <bt_init+0x1ce>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   113d0:	aa05      	add	r2, sp, #20
   113d2:	2100      	movs	r1, #0
   113d4:	f242 001c 	movw	r0, #8220	; 0x201c
   113d8:	f004 ff7c 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   113dc:	4604      	mov	r4, r0
   113de:	2800      	cmp	r0, #0
   113e0:	d19c      	bne.n	1131c <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
   113e2:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   113e4:	68c3      	ldr	r3, [r0, #12]
   113e6:	f8d3 2001 	ldr.w	r2, [r3, #1]
   113ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   113ee:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   113f2:	f00d fd57 	bl	1eea4 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   113f6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   113fa:	069e      	lsls	r6, r3, #26
   113fc:	d524      	bpl.n	11448 <bt_init+0x220>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   113fe:	f10d 0112 	add.w	r1, sp, #18
   11402:	a804      	add	r0, sp, #16
   11404:	f004 ffc6 	bl	16394 <hci_le_read_max_data_len>
		if (err) {
   11408:	4604      	mov	r4, r0
   1140a:	2800      	cmp	r0, #0
   1140c:	d186      	bne.n	1131c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1140e:	2104      	movs	r1, #4
   11410:	f242 0024 	movw	r0, #8228	; 0x2024
   11414:	f004 ff14 	bl	16240 <bt_hci_cmd_create>
		if (!buf) {
   11418:	4606      	mov	r6, r0
   1141a:	2800      	cmp	r0, #0
   1141c:	f000 80aa 	beq.w	11574 <bt_init+0x34c>
   11420:	2104      	movs	r1, #4
   11422:	300c      	adds	r0, #12
   11424:	f00d fe44 	bl	1f0b0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11428:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1142c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1142e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11432:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11434:	4622      	mov	r2, r4
   11436:	4631      	mov	r1, r6
   11438:	f242 0024 	movw	r0, #8228	; 0x2024
   1143c:	f004 ff4a 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   11440:	4604      	mov	r4, r0
   11442:	2800      	cmp	r0, #0
   11444:	f47f af6a 	bne.w	1131c <bt_init+0xf4>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11448:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1144c:	065c      	lsls	r4, r3, #25
   1144e:	d52a      	bpl.n	114a6 <bt_init+0x27e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   11450:	2102      	movs	r1, #2
   11452:	f242 002e 	movw	r0, #8238	; 0x202e
   11456:	f004 fef3 	bl	16240 <bt_hci_cmd_create>
		if (!buf) {
   1145a:	4604      	mov	r4, r0
   1145c:	2800      	cmp	r0, #0
   1145e:	f000 8089 	beq.w	11574 <bt_init+0x34c>
   11462:	2102      	movs	r1, #2
   11464:	300c      	adds	r0, #12
   11466:	f00d fe23 	bl	1f0b0 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   1146a:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   1146e:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   11470:	4621      	mov	r1, r4
   11472:	2200      	movs	r2, #0
   11474:	f242 002e 	movw	r0, #8238	; 0x202e
   11478:	f004 ff2c 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   1147c:	4604      	mov	r4, r0
   1147e:	2800      	cmp	r0, #0
   11480:	f47f af4c 	bne.w	1131c <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11484:	4601      	mov	r1, r0
   11486:	aa05      	add	r2, sp, #20
   11488:	f242 002a 	movw	r0, #8234	; 0x202a
   1148c:	f004 ff22 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   11490:	4604      	mov	r4, r0
   11492:	2800      	cmp	r0, #0
   11494:	f47f af42 	bne.w	1131c <bt_init+0xf4>
		le_read_resolving_list_size_complete(rsp);
   11498:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
   1149a:	68c3      	ldr	r3, [r0, #12]
   1149c:	785b      	ldrb	r3, [r3, #1]
   1149e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   114a2:	f00d fcff 	bl	1eea4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   114a6:	2108      	movs	r1, #8
   114a8:	f242 0001 	movw	r0, #8193	; 0x2001
   114ac:	f004 fec8 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   114b0:	4604      	mov	r4, r0
   114b2:	2800      	cmp	r0, #0
   114b4:	d05e      	beq.n	11574 <bt_init+0x34c>
   114b6:	2108      	movs	r1, #8
   114b8:	300c      	adds	r0, #12
   114ba:	f00d fdf9 	bl	1f0b0 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   114be:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   114c2:	f011 0f40 	tst.w	r1, #64	; 0x40
   114c6:	4602      	mov	r2, r0
   114c8:	f240 2302 	movw	r3, #514	; 0x202
   114cc:	bf08      	it	eq
   114ce:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   114d0:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   114d2:	bf4c      	ite	mi
   114d4:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   114d8:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   114dc:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   114de:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   114e2:	bf48      	it	mi
   114e4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   114e8:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   114ec:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   114f0:	bf18      	it	ne
   114f2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   114f6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   114fa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   114fc:	bf48      	it	mi
   114fe:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11502:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11504:	bf08      	it	eq
   11506:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1150a:	2100      	movs	r1, #0
   1150c:	f01a fc28 	bl	2bd60 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11510:	4621      	mov	r1, r4
   11512:	2200      	movs	r2, #0
   11514:	f242 0001 	movw	r0, #8193	; 0x2001
   11518:	f004 fedc 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1151c:	4604      	mov	r4, r0
   1151e:	2800      	cmp	r0, #0
   11520:	f47f aefc 	bne.w	1131c <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11524:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   11528:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1152c:	0698      	lsls	r0, r3, #26
   1152e:	d424      	bmi.n	1157a <bt_init+0x352>
	if (bt_dev.le.acl_mtu) {
   11530:	b9c9      	cbnz	r1, 11566 <bt_init+0x33e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   11532:	aa05      	add	r2, sp, #20
   11534:	f241 0005 	movw	r0, #4101	; 0x1005
   11538:	f004 fecc 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1153c:	4604      	mov	r4, r0
   1153e:	2800      	cmp	r0, #0
   11540:	f47f aeec 	bne.w	1131c <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   11544:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   11548:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
   1154a:	b94b      	cbnz	r3, 11560 <bt_init+0x338>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1154c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1154e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11552:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11556:	889a      	ldrh	r2, [r3, #4]
   11558:	482e      	ldr	r0, [pc, #184]	; (11614 <bt_init+0x3ec>)
   1155a:	4611      	mov	r1, r2
   1155c:	f01d fb3a 	bl	2ebd4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11560:	4620      	mov	r0, r4
   11562:	f00d fc9f 	bl	1eea4 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11566:	2108      	movs	r1, #8
   11568:	f640 4001 	movw	r0, #3073	; 0xc01
   1156c:	f004 fe68 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   11570:	4604      	mov	r4, r0
   11572:	b958      	cbnz	r0, 1158c <bt_init+0x364>
		return -ENOBUFS;
   11574:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11578:	e6d0      	b.n	1131c <bt_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
   1157a:	2900      	cmp	r1, #0
   1157c:	d1f3      	bne.n	11566 <bt_init+0x33e>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1157e:	4826      	ldr	r0, [pc, #152]	; (11618 <bt_init+0x3f0>)
   11580:	2145      	movs	r1, #69	; 0x45
   11582:	f019 faf1 	bl	2ab68 <z_log_minimal_printk>
		return -EIO;
   11586:	f06f 0404 	mvn.w	r4, #4
   1158a:	e6c7      	b.n	1131c <bt_init+0xf4>
   1158c:	2108      	movs	r1, #8
   1158e:	300c      	adds	r0, #12
   11590:	f00d fd8e 	bl	1f0b0 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11594:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11598:	07d9      	lsls	r1, r3, #31
   1159a:	4602      	mov	r2, r0
   1159c:	d42d      	bmi.n	115fa <bt_init+0x3d2>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1159e:	481f      	ldr	r0, [pc, #124]	; (1161c <bt_init+0x3f4>)
   115a0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   115a4:	f01a fbdc 	bl	2bd60 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   115a8:	4621      	mov	r1, r4
   115aa:	2200      	movs	r2, #0
   115ac:	f640 4001 	movw	r0, #3073	; 0xc01
   115b0:	f004 fe90 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   115b4:	4604      	mov	r4, r0
   115b6:	2800      	cmp	r0, #0
   115b8:	f47f aeb0 	bne.w	1131c <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   115bc:	4601      	mov	r1, r0
   115be:	aa05      	add	r2, sp, #20
   115c0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   115c4:	f004 fe86 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   115c8:	b370      	cbz	r0, 11628 <bt_init+0x400>
		LOG_WRN("Vendor HCI extensions not available");
   115ca:	4815      	ldr	r0, [pc, #84]	; (11620 <bt_init+0x3f8>)
   115cc:	2157      	movs	r1, #87	; 0x57
			LOG_WRN("Failed to read supported vendor features");
   115ce:	f019 facb 	bl	2ab68 <z_log_minimal_printk>
	err = bt_id_init();
   115d2:	f006 fa13 	bl	179fc <bt_id_init>
	if (err) {
   115d6:	4604      	mov	r4, r0
   115d8:	2800      	cmp	r0, #0
   115da:	f47f ae9f 	bne.w	1131c <bt_init+0xf4>
		err = bt_conn_init();
   115de:	f007 fde9 	bl	191b4 <bt_conn_init>
		if (err) {
   115e2:	4604      	mov	r4, r0
   115e4:	2800      	cmp	r0, #0
   115e6:	f47f ae99 	bne.w	1131c <bt_init+0xf4>
		if (!bt_dev.id_count) {
   115ea:	79eb      	ldrb	r3, [r5, #7]
   115ec:	2b00      	cmp	r3, #0
   115ee:	d17f      	bne.n	116f0 <bt_init+0x4c8>
			LOG_INF("No ID address. App must call settings_load()");
   115f0:	480c      	ldr	r0, [pc, #48]	; (11624 <bt_init+0x3fc>)
   115f2:	2149      	movs	r1, #73	; 0x49
   115f4:	f019 fab8 	bl	2ab68 <z_log_minimal_printk>
			return 0;
   115f8:	e690      	b.n	1131c <bt_init+0xf4>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   115fa:	a103      	add	r1, pc, #12	; (adr r1, 11608 <bt_init+0x3e0>)
   115fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   11600:	e7d0      	b.n	115a4 <bt_init+0x37c>
   11602:	bf00      	nop
   11604:	f3af 8000 	nop.w
   11608:	02008890 	.word	0x02008890
   1160c:	20008000 	.word	0x20008000
   11610:	20000448 	.word	0x20000448
   11614:	20000478 	.word	0x20000478
   11618:	00031b17 	.word	0x00031b17
   1161c:	02008810 	.word	0x02008810
   11620:	00031b3f 	.word	0x00031b3f
   11624:	00031c31 	.word	0x00031c31
	rp.info = (void *)rsp->data;
   11628:	9e05      	ldr	r6, [sp, #20]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1162a:	4835      	ldr	r0, [pc, #212]	; (11700 <bt_init+0x4d8>)
	rp.info = (void *)rsp->data;
   1162c:	68f4      	ldr	r4, [r6, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1162e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11632:	2b03      	cmp	r3, #3
		return plat_str[platform];
   11634:	bf96      	itet	ls
   11636:	4a33      	ldrls	r2, [pc, #204]	; (11704 <bt_init+0x4dc>)
	return "unknown";
   11638:	4a33      	ldrhi	r2, [pc, #204]	; (11708 <bt_init+0x4e0>)
		return plat_str[platform];
   1163a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1163e:	2149      	movs	r1, #73	; 0x49
   11640:	f019 fa92 	bl	2ab68 <z_log_minimal_printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11644:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   11648:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1164c:	2a02      	cmp	r2, #2
   1164e:	d12a      	bne.n	116a6 <bt_init+0x47e>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11650:	2b03      	cmp	r3, #3
   11652:	d828      	bhi.n	116a6 <bt_init+0x47e>
		return nordic_str[variant];
   11654:	4a2d      	ldr	r2, [pc, #180]	; (1170c <bt_init+0x4e4>)
   11656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1165a:	482d      	ldr	r0, [pc, #180]	; (11710 <bt_init+0x4e8>)
   1165c:	2149      	movs	r1, #73	; 0x49
   1165e:	f019 fa83 	bl	2ab68 <z_log_minimal_printk>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11662:	7963      	ldrb	r3, [r4, #5]
   11664:	f8d4 1009 	ldr.w	r1, [r4, #9]
   11668:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
   1166a:	2b03      	cmp	r3, #3
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1166c:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
   11670:	bf98      	it	ls
   11672:	4a28      	ldrls	r2, [pc, #160]	; (11714 <bt_init+0x4ec>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11674:	9101      	str	r1, [sp, #4]
   11676:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
   11678:	bf94      	ite	ls
   1167a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
   1167e:	4a22      	ldrhi	r2, [pc, #136]	; (11708 <bt_init+0x4e0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11680:	4825      	ldr	r0, [pc, #148]	; (11718 <bt_init+0x4f0>)
   11682:	9100      	str	r1, [sp, #0]
   11684:	2149      	movs	r1, #73	; 0x49
   11686:	f019 fa6f 	bl	2ab68 <z_log_minimal_printk>
	net_buf_unref(rsp);
   1168a:	4630      	mov	r0, r6
   1168c:	f00d fc0a 	bl	1eea4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11690:	aa05      	add	r2, sp, #20
   11692:	2100      	movs	r1, #0
   11694:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11698:	f004 fe1c 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1169c:	4604      	mov	r4, r0
   1169e:	b120      	cbz	r0, 116aa <bt_init+0x482>
		LOG_WRN("Failed to read supported vendor commands");
   116a0:	481e      	ldr	r0, [pc, #120]	; (1171c <bt_init+0x4f4>)
   116a2:	2157      	movs	r1, #87	; 0x57
   116a4:	e793      	b.n	115ce <bt_init+0x3a6>
		return "unknown";
   116a6:	4a18      	ldr	r2, [pc, #96]	; (11708 <bt_init+0x4e0>)
   116a8:	e7d7      	b.n	1165a <bt_init+0x432>
	rp.cmds = (void *)rsp->data;
   116aa:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   116ac:	481c      	ldr	r0, [pc, #112]	; (11720 <bt_init+0x4f8>)
   116ae:	68f1      	ldr	r1, [r6, #12]
   116b0:	2202      	movs	r2, #2
   116b2:	3101      	adds	r1, #1
   116b4:	f01a fa20 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   116b8:	4630      	mov	r0, r6
   116ba:	f00d fbf3 	bl	1eea4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   116be:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   116c2:	075b      	lsls	r3, r3, #29
   116c4:	d585      	bpl.n	115d2 <bt_init+0x3aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   116c6:	aa05      	add	r2, sp, #20
   116c8:	4621      	mov	r1, r4
   116ca:	f64f 4003 	movw	r0, #64515	; 0xfc03
   116ce:	f004 fe01 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   116d2:	b110      	cbz	r0, 116da <bt_init+0x4b2>
			LOG_WRN("Failed to read supported vendor features");
   116d4:	4813      	ldr	r0, [pc, #76]	; (11724 <bt_init+0x4fc>)
   116d6:	2157      	movs	r1, #87	; 0x57
   116d8:	e779      	b.n	115ce <bt_init+0x3a6>
		rp.feat = (void *)rsp->data;
   116da:	9c05      	ldr	r4, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
   116dc:	4812      	ldr	r0, [pc, #72]	; (11728 <bt_init+0x500>)
   116de:	68e1      	ldr	r1, [r4, #12]
   116e0:	2201      	movs	r2, #1
   116e2:	4411      	add	r1, r2
   116e4:	f01a fa08 	bl	2baf8 <memcpy>
		net_buf_unref(rsp);
   116e8:	4620      	mov	r0, r4
   116ea:	f00d fbdb 	bl	1eea4 <net_buf_unref>
   116ee:	e770      	b.n	115d2 <bt_init+0x3aa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   116f0:	2108      	movs	r1, #8
   116f2:	480e      	ldr	r0, [pc, #56]	; (1172c <bt_init+0x504>)
   116f4:	f01a fb19 	bl	2bd2a <atomic_or>
	bt_finalize_init();
   116f8:	f005 fb44 	bl	16d84 <bt_finalize_init>
	return 0;
   116fc:	e60e      	b.n	1131c <bt_init+0xf4>
   116fe:	bf00      	nop
   11700:	00031b68 	.word	0x00031b68
   11704:	0002f6f4 	.word	0x0002f6f4
   11708:	000315ee 	.word	0x000315ee
   1170c:	0002f6e4 	.word	0x0002f6e4
   11710:	00031b86 	.word	0x00031b86
   11714:	0002f6d4 	.word	0x0002f6d4
   11718:	00031ba3 	.word	0x00031ba3
   1171c:	00031bd5 	.word	0x00031bd5
   11720:	20000431 	.word	0x20000431
   11724:	00031c03 	.word	0x00031c03
   11728:	20000430 	.word	0x20000430
   1172c:	20000444 	.word	0x20000444

00011730 <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
   11730:	b538      	push	{r3, r4, r5, lr}
   11732:	460c      	mov	r4, r1
	struct bt_joybus_client *joy;
	uint32_t input_response;
	const uint32_t* rsp_data = data;
	

	joy = CONTAINER_OF(params, struct bt_joybus_client, input_rsp_notify_params);
   11734:	1f0d      	subs	r5, r1, #4
	if (!data || !length) {
   11736:	b102      	cbz	r2, 1173a <notify_process+0xa>
   11738:	b95b      	cbnz	r3, 11752 <notify_process+0x22>
		LOG_INF("Notifications disabled.");
   1173a:	480d      	ldr	r0, [pc, #52]	; (11770 <notify_process+0x40>)
   1173c:	2149      	movs	r1, #73	; 0x49
			joy->input_rsp_notify_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
		}
		return BT_GATT_ITER_STOP;
	}
	if (length != 4) {
		LOG_ERR("Unexpected notification value size.");
   1173e:	f019 fa13 	bl	2ab68 <z_log_minimal_printk>
		if (joy->input_rsp_notify_cb) {
   11742:	6f63      	ldr	r3, [r4, #116]	; 0x74
   11744:	b11b      	cbz	r3, 1174e <notify_process+0x1e>
			joy->input_rsp_notify_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
   11746:	f04f 31ff 	mov.w	r1, #4294967295
   1174a:	4628      	mov	r0, r5
   1174c:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   1174e:	2000      	movs	r0, #0
	if (joy->input_rsp_notify_cb) {
		joy->input_rsp_notify_cb(joy, input_response);
	}

	return BT_GATT_ITER_CONTINUE;
}
   11750:	bd38      	pop	{r3, r4, r5, pc}
	if (length != 4) {
   11752:	2b04      	cmp	r3, #4
   11754:	d002      	beq.n	1175c <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
   11756:	4807      	ldr	r0, [pc, #28]	; (11774 <notify_process+0x44>)
   11758:	2145      	movs	r1, #69	; 0x45
   1175a:	e7f0      	b.n	1173e <notify_process+0xe>
	if (joy->input_rsp_notify_cb) {
   1175c:	6f63      	ldr	r3, [r4, #116]	; 0x74
	input_response = *rsp_data;
   1175e:	6811      	ldr	r1, [r2, #0]
	joy->input_response = input_response;
   11760:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	if (joy->input_rsp_notify_cb) {
   11764:	b90b      	cbnz	r3, 1176a <notify_process+0x3a>
	return BT_GATT_ITER_CONTINUE;
   11766:	2001      	movs	r0, #1
   11768:	e7f2      	b.n	11750 <notify_process+0x20>
		joy->input_rsp_notify_cb(joy, input_response);
   1176a:	4628      	mov	r0, r5
   1176c:	4798      	blx	r3
   1176e:	e7fa      	b.n	11766 <notify_process+0x36>
   11770:	0002ffde 	.word	0x0002ffde
   11774:	0002fffb 	.word	0x0002fffb

00011778 <button_indicate_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t button_indicate_process(struct bt_conn *conn,
				      struct bt_gatt_subscribe_params *params,
				      const void *data, uint16_t length)
{
   11778:	b570      	push	{r4, r5, r6, lr}
   1177a:	460d      	mov	r5, r1
   1177c:	461c      	mov	r4, r3
	struct bt_joybus_client *joy;
	uint8_t button_state;
	const uint8_t* button_state_p = data;
	joy = CONTAINER_OF(params, struct bt_joybus_client, button_indicate_params);
   1177e:	f1a1 068c 	sub.w	r6, r1, #140	; 0x8c

	if (!data || !length) {
   11782:	b102      	cbz	r2, 11786 <button_indicate_process+0xe>
   11784:	b953      	cbnz	r3, 1179c <button_indicate_process+0x24>
		LOG_INF("Notifications disabled.");
   11786:	480d      	ldr	r0, [pc, #52]	; (117bc <button_indicate_process+0x44>)
   11788:	2149      	movs	r1, #73	; 0x49
			joy->button_indicate_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
		}
		return BT_GATT_ITER_STOP;
	}
	if (length != 1) {
		LOG_ERR("Unexpected notification value size.");
   1178a:	f019 f9ed 	bl	2ab68 <z_log_minimal_printk>
		if (joy->button_indicate_cb) {
   1178e:	69eb      	ldr	r3, [r5, #28]
   11790:	b113      	cbz	r3, 11798 <button_indicate_process+0x20>
			joy->button_indicate_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
   11792:	21ff      	movs	r1, #255	; 0xff
   11794:	4630      	mov	r0, r6
   11796:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   11798:	2000      	movs	r0, #0
		return BT_GATT_ITER_STOP;
	}

	return BT_GATT_ITER_CONTINUE;

}
   1179a:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
   1179c:	2b01      	cmp	r3, #1
   1179e:	d002      	beq.n	117a6 <button_indicate_process+0x2e>
		LOG_ERR("Unexpected notification value size.");
   117a0:	4807      	ldr	r0, [pc, #28]	; (117c0 <button_indicate_process+0x48>)
   117a2:	2145      	movs	r1, #69	; 0x45
   117a4:	e7f1      	b.n	1178a <button_indicate_process+0x12>
	if (joy->button_indicate_cb) {
   117a6:	69eb      	ldr	r3, [r5, #28]
	button_state = *button_state_p;
   117a8:	7811      	ldrb	r1, [r2, #0]
	joy->button_state = button_state;
   117aa:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	if (joy->button_indicate_cb) {
   117ae:	2b00      	cmp	r3, #0
   117b0:	d0f2      	beq.n	11798 <button_indicate_process+0x20>
		joy->button_indicate_cb(joy, button_state);
   117b2:	4630      	mov	r0, r6
   117b4:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
   117b6:	4620      	mov	r0, r4
   117b8:	e7ef      	b.n	1179a <button_indicate_process+0x22>
   117ba:	bf00      	nop
   117bc:	0002ffde 	.word	0x0002ffde
   117c0:	0002fffb 	.word	0x0002fffb

000117c4 <periodic_read_process>:
{
   117c4:	b570      	push	{r4, r5, r6, lr}
   117c6:	4614      	mov	r4, r2
	if (!joy->input_rsp_notify_cb) {
   117c8:	6992      	ldr	r2, [r2, #24]
   117ca:	b922      	cbnz	r2, 117d6 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
   117cc:	481b      	ldr	r0, [pc, #108]	; (1183c <periodic_read_process+0x78>)
   117ce:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unexpected read value size.");
   117d0:	f019 f9ca 	bl	2ab68 <z_log_minimal_printk>
   117d4:	e005      	b.n	117e2 <periodic_read_process+0x1e>
	} else  if (err) {
   117d6:	b301      	cbz	r1, 1181a <periodic_read_process+0x56>
		LOG_ERR("Read value error: %d", err);
   117d8:	460a      	mov	r2, r1
   117da:	4819      	ldr	r0, [pc, #100]	; (11840 <periodic_read_process+0x7c>)
   117dc:	2145      	movs	r1, #69	; 0x45
   117de:	f019 f9c3 	bl	2ab68 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   117e2:	f3bf 8f5b 	dmb	ish
   117e6:	6925      	ldr	r5, [r4, #16]
   117e8:	f3bf 8f5b 	dmb	ish
	if (interval) {
   117ec:	b19d      	cbz	r5, 11816 <periodic_read_process+0x52>
				K_MSEC(interval));
   117ee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   117f2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   117f6:	f240 30e7 	movw	r0, #999	; 0x3e7
   117fa:	2100      	movs	r1, #0
   117fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11800:	2300      	movs	r3, #0
   11802:	fbc5 0106 	smlal	r0, r1, r5, r6
   11806:	f7ee fc7b 	bl	100 <__aeabi_uldivmod>
   1180a:	4602      	mov	r2, r0
   1180c:	460b      	mov	r3, r1
		k_work_schedule(&joy->input_rsp_periodic_read.read_work,
   1180e:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   11812:	f013 fea3 	bl	2555c <k_work_schedule>
}
   11816:	2000      	movs	r0, #0
   11818:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!data || length != 1) {
   1181a:	b11b      	cbz	r3, 11824 <periodic_read_process+0x60>
   1181c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   11820:	2901      	cmp	r1, #1
   11822:	d002      	beq.n	1182a <periodic_read_process+0x66>
		LOG_ERR("Unexpected read value size.");
   11824:	4807      	ldr	r0, [pc, #28]	; (11844 <periodic_read_process+0x80>)
   11826:	2145      	movs	r1, #69	; 0x45
   11828:	e7d2      	b.n	117d0 <periodic_read_process+0xc>
		input_response = *rsp_data;
   1182a:	6819      	ldr	r1, [r3, #0]
		if (joy->input_response != input_response) {
   1182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1182e:	4299      	cmp	r1, r3
   11830:	d0d7      	beq.n	117e2 <periodic_read_process+0x1e>
			joy->input_response = input_response;
   11832:	6261      	str	r1, [r4, #36]	; 0x24
			joy->input_rsp_notify_cb(joy, input_response);
   11834:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
   11838:	4790      	blx	r2
   1183a:	e7d2      	b.n	117e2 <periodic_read_process+0x1e>
   1183c:	0003005c 	.word	0x0003005c
   11840:	00030042 	.word	0x00030042
   11844:	00030082 	.word	0x00030082

00011848 <joybus_input_rsp_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void joybus_input_rsp_value_handler(struct k_work *work)
{
   11848:	b508      	push	{r3, lr}
   1184a:	f3bf 8f5b 	dmb	ish
   1184e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   11850:	f3bf 8f5b 	dmb	ish
   11854:	4601      	mov	r1, r0
	struct bt_joybus_client *joy;

	joy = CONTAINER_OF(work, struct bt_joybus_client,
			     input_rsp_periodic_read.read_work);

	if (!atomic_get(&joy->input_rsp_periodic_read.interval)) {
   11856:	b1e3      	cbz	r3, 11892 <joybus_input_rsp_value_handler+0x4a>
		/* disabled */
		return;
	}

	if (!joy->conn) {
   11858:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1185c:	b928      	cbnz	r0, 1186a <joybus_input_rsp_value_handler+0x22>
	 */
	if (err) {
		LOG_ERR("Periodic Imput Response characteristic read error: %d",
			err);
	}
}
   1185e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
   11862:	480c      	ldr	r0, [pc, #48]	; (11894 <joybus_input_rsp_value_handler+0x4c>)
   11864:	2145      	movs	r1, #69	; 0x45
   11866:	f019 b97f 	b.w	2ab68 <z_log_minimal_printk>
	joy->input_rsp_periodic_read.params.func = periodic_read_process;
   1186a:	4b0b      	ldr	r3, [pc, #44]	; (11898 <joybus_input_rsp_value_handler+0x50>)
   1186c:	630b      	str	r3, [r1, #48]	; 0x30
	joy->input_rsp_periodic_read.params.handle_count  = 1;
   1186e:	2301      	movs	r3, #1
   11870:	634b      	str	r3, [r1, #52]	; 0x34
	joy->input_rsp_periodic_read.params.single.handle = joy->input_rsp_val_handle;
   11872:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
   11876:	870b      	strh	r3, [r1, #56]	; 0x38
	joy->input_rsp_periodic_read.params.single.offset = 0;
   11878:	2300      	movs	r3, #0
   1187a:	874b      	strh	r3, [r1, #58]	; 0x3a
	err = bt_gatt_read(joy->conn, &joy->input_rsp_periodic_read.params);
   1187c:	3130      	adds	r1, #48	; 0x30
   1187e:	f00a fdb5 	bl	1c3ec <bt_gatt_read>
	if (err) {
   11882:	4602      	mov	r2, r0
   11884:	b128      	cbz	r0, 11892 <joybus_input_rsp_value_handler+0x4a>
}
   11886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Imput Response characteristic read error: %d",
   1188a:	4804      	ldr	r0, [pc, #16]	; (1189c <joybus_input_rsp_value_handler+0x54>)
   1188c:	2145      	movs	r1, #69	; 0x45
   1188e:	f019 b96b 	b.w	2ab68 <z_log_minimal_printk>
}
   11892:	bd08      	pop	{r3, pc}
   11894:	000300a3 	.word	0x000300a3
   11898:	000117c5 	.word	0x000117c5
   1189c:	000300be 	.word	0x000300be

000118a0 <bt_joybus_client_init>:
	joy->led_state_handle = 0;
}


void bt_joybus_client_init(struct bt_joybus_client *joy)
{
   118a0:	b510      	push	{r4, lr}
	memset(joy, 0, sizeof(*joy));
   118a2:	2100      	movs	r1, #0
{
   118a4:	4604      	mov	r4, r0
	memset(joy, 0, sizeof(*joy));
   118a6:	22c8      	movs	r2, #200	; 0xc8
   118a8:	f01a f931 	bl	2bb0e <memset>
	joy->input_response = 0;
   118ac:	2300      	movs	r3, #0
   118ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	k_work_init_delayable(&joy->input_rsp_periodic_read.read_work,
   118b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   118b6:	4902      	ldr	r1, [pc, #8]	; (118c0 <bt_joybus_client_init+0x20>)
			      joybus_input_rsp_value_handler);
}
   118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&joy->input_rsp_periodic_read.read_work,
   118bc:	f013 bdc8 	b.w	25450 <k_work_init_delayable>
   118c0:	00011849 	.word	0x00011849

000118c4 <bt_joybus_handles_assign>:


int bt_joybus_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_joybus_client *joy)
{
   118c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118c8:	b0a1      	sub	sp, #132	; 0x84
   118ca:	460c      	mov	r4, r1
   118cc:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   118ce:	f019 fd6a 	bl	2b3a6 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   118d2:	f019 fd32 	bl	2b33a <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_JOYBUS)) {
   118d6:	4b9c      	ldr	r3, [pc, #624]	; (11b48 <bt_joybus_handles_assign+0x284>)
   118d8:	f8d0 c000 	ldr.w	ip, [r0]
   118dc:	aa1b      	add	r2, sp, #108	; 0x6c
   118de:	f103 0e10 	add.w	lr, r3, #16
   118e2:	4617      	mov	r7, r2
   118e4:	6818      	ldr	r0, [r3, #0]
   118e6:	6859      	ldr	r1, [r3, #4]
   118e8:	4615      	mov	r5, r2
   118ea:	c503      	stmia	r5!, {r0, r1}
   118ec:	3308      	adds	r3, #8
   118ee:	4573      	cmp	r3, lr
   118f0:	462a      	mov	r2, r5
   118f2:	d1f7      	bne.n	118e4 <bt_joybus_handles_assign+0x20>
   118f4:	781b      	ldrb	r3, [r3, #0]
   118f6:	702b      	strb	r3, [r5, #0]
   118f8:	4639      	mov	r1, r7
   118fa:	4660      	mov	r0, ip
   118fc:	f01a f990 	bl	2bc20 <bt_uuid_cmp>
   11900:	4605      	mov	r5, r0
   11902:	b128      	cbz	r0, 11910 <bt_joybus_handles_assign+0x4c>
		return -ENOTSUP;
   11904:	f06f 0585 	mvn.w	r5, #133	; 0x85
	joy->led_state_handle = gatt_desc->handle;

	/* Finally - save connection object */
	joy->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   11908:	4628      	mov	r0, r5
   1190a:	b021      	add	sp, #132	; 0x84
   1190c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_work_cancel_delayable(&joy->input_rsp_periodic_read.read_work);
   11910:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11914:	f013 fe8c 	bl	25630 <k_work_cancel_delayable>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11918:	4b8c      	ldr	r3, [pc, #560]	; (11b4c <bt_joybus_handles_assign+0x288>)
	joy->conn = NULL;
   1191a:	6025      	str	r5, [r4, #0]
	joy->input_rsp_read_cb = NULL;
   1191c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	joy->input_response = 0;
   11920:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
	joy->button_state_handle = 0;
   11924:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11928:	aa02      	add	r2, sp, #8
	joy->input_rsp_notify = false;
   1192a:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
	joy->button_state = 0;
   1192e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
	joy->led_state_handle = 0;
   11932:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11936:	f103 0910 	add.w	r9, r3, #16
   1193a:	4696      	mov	lr, r2
   1193c:	6818      	ldr	r0, [r3, #0]
   1193e:	6859      	ldr	r1, [r3, #4]
   11940:	4694      	mov	ip, r2
   11942:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11946:	3308      	adds	r3, #8
   11948:	454b      	cmp	r3, r9
   1194a:	4662      	mov	r2, ip
   1194c:	d1f6      	bne.n	1193c <bt_joybus_handles_assign+0x78>
   1194e:	781b      	ldrb	r3, [r3, #0]
   11950:	f88c 3000 	strb.w	r3, [ip]
   11954:	4671      	mov	r1, lr
   11956:	4630      	mov	r0, r6
   11958:	f002 fd40 	bl	143dc <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   1195c:	4680      	mov	r8, r0
   1195e:	b930      	cbnz	r0, 1196e <bt_joybus_handles_assign+0xaa>
		LOG_ERR("No Input Response characteristic found.");
   11960:	487b      	ldr	r0, [pc, #492]	; (11b50 <bt_joybus_handles_assign+0x28c>)
   11962:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No Input Response characteristic value found.");
   11964:	f019 f900 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   11968:	f06f 0515 	mvn.w	r5, #21
   1196c:	e7cc      	b.n	11908 <bt_joybus_handles_assign+0x44>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   1196e:	f019 fd04 	bl	2b37a <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11972:	b950      	cbnz	r0, 1198a <bt_joybus_handles_assign+0xc6>
   11974:	4977      	ldr	r1, [pc, #476]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11976:	4878      	ldr	r0, [pc, #480]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11978:	f240 1241 	movw	r2, #321	; 0x141
   1197c:	f019 f8e6 	bl	2ab4c <assert_print>
   11980:	f240 1141 	movw	r1, #321	; 0x141
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11984:	4873      	ldr	r0, [pc, #460]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11986:	f019 f8da 	bl	2ab3e <assert_post_action>
	joy->input_rsp_properties = chrc_val->properties;
   1198a:	7983      	ldrb	r3, [r0, #6]
   1198c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
					    BT_UUID_JOYBUS_INPUT_RESP);
   11990:	f10d 0c1c 	add.w	ip, sp, #28
   11994:	4b6d      	ldr	r3, [pc, #436]	; (11b4c <bt_joybus_handles_assign+0x288>)
   11996:	4662      	mov	r2, ip
   11998:	6818      	ldr	r0, [r3, #0]
   1199a:	6859      	ldr	r1, [r3, #4]
   1199c:	46e6      	mov	lr, ip
   1199e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   119a2:	3308      	adds	r3, #8
   119a4:	454b      	cmp	r3, r9
   119a6:	46f4      	mov	ip, lr
   119a8:	d1f6      	bne.n	11998 <bt_joybus_handles_assign+0xd4>
   119aa:	781b      	ldrb	r3, [r3, #0]
   119ac:	f88e 3000 	strb.w	r3, [lr]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   119b0:	4641      	mov	r1, r8
   119b2:	4630      	mov	r0, r6
   119b4:	f019 fd46 	bl	2b444 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   119b8:	b910      	cbnz	r0, 119c0 <bt_joybus_handles_assign+0xfc>
		LOG_ERR("No Input Response characteristic value found.");
   119ba:	4868      	ldr	r0, [pc, #416]	; (11b5c <bt_joybus_handles_assign+0x298>)
   119bc:	2145      	movs	r1, #69	; 0x45
   119be:	e7d1      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->input_rsp_val_handle = gatt_desc->handle;
   119c0:	8883      	ldrh	r3, [r0, #4]
   119c2:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   119c6:	2300      	movs	r3, #0
   119c8:	f88d 3000 	strb.w	r3, [sp]
   119cc:	466a      	mov	r2, sp
   119ce:	f642 1302 	movw	r3, #10498	; 0x2902
   119d2:	4641      	mov	r1, r8
   119d4:	4630      	mov	r0, r6
   119d6:	f8ad 3002 	strh.w	r3, [sp, #2]
   119da:	f019 fd33 	bl	2b444 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   119de:	b9e8      	cbnz	r0, 11a1c <bt_joybus_handles_assign+0x158>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
   119e0:	485f      	ldr	r0, [pc, #380]	; (11b60 <bt_joybus_handles_assign+0x29c>)
   119e2:	2149      	movs	r1, #73	; 0x49
   119e4:	f019 f8c0 	bl	2ab68 <z_log_minimal_printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_BUTTON);
   119e8:	4b5e      	ldr	r3, [pc, #376]	; (11b64 <bt_joybus_handles_assign+0x2a0>)
   119ea:	aa0c      	add	r2, sp, #48	; 0x30
   119ec:	f103 0910 	add.w	r9, r3, #16
   119f0:	4696      	mov	lr, r2
   119f2:	6818      	ldr	r0, [r3, #0]
   119f4:	6859      	ldr	r1, [r3, #4]
   119f6:	4694      	mov	ip, r2
   119f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   119fc:	3308      	adds	r3, #8
   119fe:	454b      	cmp	r3, r9
   11a00:	4662      	mov	r2, ip
   11a02:	d1f6      	bne.n	119f2 <bt_joybus_handles_assign+0x12e>
   11a04:	781b      	ldrb	r3, [r3, #0]
   11a06:	f88c 3000 	strb.w	r3, [ip]
   11a0a:	4671      	mov	r1, lr
   11a0c:	4630      	mov	r0, r6
   11a0e:	f002 fce5 	bl	143dc <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11a12:	4680      	mov	r8, r0
   11a14:	b948      	cbnz	r0, 11a2a <bt_joybus_handles_assign+0x166>
		LOG_ERR("No Button characteristic found.");
   11a16:	4854      	ldr	r0, [pc, #336]	; (11b68 <bt_joybus_handles_assign+0x2a4>)
   11a18:	2145      	movs	r1, #69	; 0x45
   11a1a:	e7a3      	b.n	11964 <bt_joybus_handles_assign+0xa0>
		joy->input_rsp_notify = true;
   11a1c:	2301      	movs	r3, #1
   11a1e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
		joy->input_rsp_ccc_handle = gatt_desc->handle;
   11a22:	8883      	ldrh	r3, [r0, #4]
   11a24:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
   11a28:	e7de      	b.n	119e8 <bt_joybus_handles_assign+0x124>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   11a2a:	f019 fca6 	bl	2b37a <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11a2e:	b940      	cbnz	r0, 11a42 <bt_joybus_handles_assign+0x17e>
   11a30:	4948      	ldr	r1, [pc, #288]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11a32:	4849      	ldr	r0, [pc, #292]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11a34:	f240 125d 	movw	r2, #349	; 0x15d
   11a38:	f019 f888 	bl	2ab4c <assert_print>
   11a3c:	f240 115d 	movw	r1, #349	; 0x15d
   11a40:	e7a0      	b.n	11984 <bt_joybus_handles_assign+0xc0>
	joy->button_properties = chrc_val->properties;
   11a42:	7983      	ldrb	r3, [r0, #6]
   11a44:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
					    BT_UUID_JOYBUS_BUTTON);
   11a48:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   11a4c:	4b45      	ldr	r3, [pc, #276]	; (11b64 <bt_joybus_handles_assign+0x2a0>)
   11a4e:	4662      	mov	r2, ip
   11a50:	6818      	ldr	r0, [r3, #0]
   11a52:	6859      	ldr	r1, [r3, #4]
   11a54:	46e6      	mov	lr, ip
   11a56:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   11a5a:	3308      	adds	r3, #8
   11a5c:	454b      	cmp	r3, r9
   11a5e:	46f4      	mov	ip, lr
   11a60:	d1f6      	bne.n	11a50 <bt_joybus_handles_assign+0x18c>
   11a62:	781b      	ldrb	r3, [r3, #0]
   11a64:	f88e 3000 	strb.w	r3, [lr]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   11a68:	4641      	mov	r1, r8
   11a6a:	4630      	mov	r0, r6
   11a6c:	f019 fcea 	bl	2b444 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11a70:	b910      	cbnz	r0, 11a78 <bt_joybus_handles_assign+0x1b4>
		LOG_ERR("No Button characteristic value found.");
   11a72:	483e      	ldr	r0, [pc, #248]	; (11b6c <bt_joybus_handles_assign+0x2a8>)
   11a74:	2145      	movs	r1, #69	; 0x45
   11a76:	e775      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->button_state_handle = gatt_desc->handle;
   11a78:	8883      	ldrh	r3, [r0, #4]
   11a7a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	joy->button_indicate_params.value_handle = gatt_desc->handle;
   11a7e:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   11a82:	2300      	movs	r3, #0
   11a84:	f88d 3004 	strb.w	r3, [sp, #4]
   11a88:	aa01      	add	r2, sp, #4
   11a8a:	f642 1302 	movw	r3, #10498	; 0x2902
   11a8e:	4641      	mov	r1, r8
   11a90:	4630      	mov	r0, r6
   11a92:	f8ad 3006 	strh.w	r3, [sp, #6]
   11a96:	f019 fcd5 	bl	2b444 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11a9a:	b9e8      	cbnz	r0, 11ad8 <bt_joybus_handles_assign+0x214>
		LOG_INF("No Button CCC descriptor found.");
   11a9c:	4834      	ldr	r0, [pc, #208]	; (11b70 <bt_joybus_handles_assign+0x2ac>)
   11a9e:	2149      	movs	r1, #73	; 0x49
   11aa0:	f019 f862 	bl	2ab68 <z_log_minimal_printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_LED);
   11aa4:	4b33      	ldr	r3, [pc, #204]	; (11b74 <bt_joybus_handles_assign+0x2b0>)
   11aa6:	aa16      	add	r2, sp, #88	; 0x58
   11aa8:	f103 0810 	add.w	r8, r3, #16
   11aac:	4696      	mov	lr, r2
   11aae:	6818      	ldr	r0, [r3, #0]
   11ab0:	6859      	ldr	r1, [r3, #4]
   11ab2:	4694      	mov	ip, r2
   11ab4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11ab8:	3308      	adds	r3, #8
   11aba:	4543      	cmp	r3, r8
   11abc:	4662      	mov	r2, ip
   11abe:	d1f6      	bne.n	11aae <bt_joybus_handles_assign+0x1ea>
   11ac0:	781b      	ldrb	r3, [r3, #0]
   11ac2:	f88c 3000 	strb.w	r3, [ip]
   11ac6:	4671      	mov	r1, lr
   11ac8:	4630      	mov	r0, r6
   11aca:	f002 fc87 	bl	143dc <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11ace:	4681      	mov	r9, r0
   11ad0:	b958      	cbnz	r0, 11aea <bt_joybus_handles_assign+0x226>
		LOG_ERR("No LED characteristic found.");
   11ad2:	4829      	ldr	r0, [pc, #164]	; (11b78 <bt_joybus_handles_assign+0x2b4>)
   11ad4:	2145      	movs	r1, #69	; 0x45
   11ad6:	e745      	b.n	11964 <bt_joybus_handles_assign+0xa0>
		joy->button_indicate = true;
   11ad8:	2301      	movs	r3, #1
   11ada:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		joy->button_ccc_handle = gatt_desc->handle;
   11ade:	8883      	ldrh	r3, [r0, #4]
   11ae0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		joy->button_indicate_params.ccc_handle = gatt_desc->handle;
   11ae4:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
   11ae8:	e7dc      	b.n	11aa4 <bt_joybus_handles_assign+0x1e0>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   11aea:	f019 fc46 	bl	2b37a <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11aee:	b940      	cbnz	r0, 11b02 <bt_joybus_handles_assign+0x23e>
   11af0:	4918      	ldr	r1, [pc, #96]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11af2:	4819      	ldr	r0, [pc, #100]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11af4:	f44f 72be 	mov.w	r2, #380	; 0x17c
   11af8:	f019 f828 	bl	2ab4c <assert_print>
   11afc:	f44f 71be 	mov.w	r1, #380	; 0x17c
   11b00:	e740      	b.n	11984 <bt_joybus_handles_assign+0xc0>
	joy->led_properties = chrc_val->properties;
   11b02:	7983      	ldrb	r3, [r0, #6]
   11b04:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
					    BT_UUID_JOYBUS_LED);
   11b08:	4b1a      	ldr	r3, [pc, #104]	; (11b74 <bt_joybus_handles_assign+0x2b0>)
   11b0a:	463a      	mov	r2, r7
   11b0c:	6818      	ldr	r0, [r3, #0]
   11b0e:	6859      	ldr	r1, [r3, #4]
   11b10:	4694      	mov	ip, r2
   11b12:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11b16:	3308      	adds	r3, #8
   11b18:	4543      	cmp	r3, r8
   11b1a:	4662      	mov	r2, ip
   11b1c:	d1f6      	bne.n	11b0c <bt_joybus_handles_assign+0x248>
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	f88c 3000 	strb.w	r3, [ip]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   11b24:	463a      	mov	r2, r7
   11b26:	4649      	mov	r1, r9
   11b28:	4630      	mov	r0, r6
   11b2a:	f019 fc8b 	bl	2b444 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11b2e:	b910      	cbnz	r0, 11b36 <bt_joybus_handles_assign+0x272>
		LOG_ERR("No LED characteristic value found.");
   11b30:	4812      	ldr	r0, [pc, #72]	; (11b7c <bt_joybus_handles_assign+0x2b8>)
   11b32:	2145      	movs	r1, #69	; 0x45
   11b34:	e716      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->led_state_handle = gatt_desc->handle;
   11b36:	8883      	ldrh	r3, [r0, #4]
   11b38:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	joy->conn = bt_gatt_dm_conn_get(dm);
   11b3c:	4630      	mov	r0, r6
   11b3e:	f019 fc30 	bl	2b3a2 <bt_gatt_dm_conn_get>
   11b42:	6020      	str	r0, [r4, #0]
	return 0;
   11b44:	e6e0      	b.n	11908 <bt_joybus_handles_assign+0x44>
   11b46:	bf00      	nop
   11b48:	0002f564 	.word	0x0002f564
   11b4c:	0002f575 	.word	0x0002f575
   11b50:	000300f9 	.word	0x000300f9
   11b54:	00030126 	.word	0x00030126
   11b58:	0003013d 	.word	0x0003013d
   11b5c:	00030155 	.word	0x00030155
   11b60:	00030188 	.word	0x00030188
   11b64:	0002f586 	.word	0x0002f586
   11b68:	000301dd 	.word	0x000301dd
   11b6c:	00030202 	.word	0x00030202
   11b70:	0003022d 	.word	0x0003022d
   11b74:	0002f597 	.word	0x0002f597
   11b78:	00030252 	.word	0x00030252
   11b7c:	00030274 	.word	0x00030274

00011b80 <bt_joybus_subscribe_input_rsp>:

int bt_joybus_subscribe_input_rsp(struct bt_joybus_client *joy,
				   bt_input_rsp_notify_cb func)
{
   11b80:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!joy || !func) {
   11b82:	4604      	mov	r4, r0
   11b84:	b360      	cbz	r0, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
   11b86:	b359      	cbz	r1, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
		return -EINVAL;
	}
	if (!joy->conn) {
   11b88:	6803      	ldr	r3, [r0, #0]
   11b8a:	b34b      	cbz	r3, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
		return -EINVAL;
	}
	if (!(joy->input_rsp_properties & BT_GATT_CHRC_NOTIFY)) {
   11b8c:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
   11b90:	06db      	lsls	r3, r3, #27
   11b92:	d528      	bpl.n	11be6 <bt_joybus_subscribe_input_rsp+0x66>
		return -ENOTSUP;
	}
	if (joy->input_rsp_notify_cb) {
   11b94:	6f86      	ldr	r6, [r0, #120]	; 0x78
   11b96:	bb4e      	cbnz	r6, 11bec <bt_joybus_subscribe_input_rsp+0x6c>
		return -EALREADY;
	}

	joy->input_rsp_notify_cb = func;

	joy->input_rsp_notify_params.notify = notify_process;
   11b98:	4b16      	ldr	r3, [pc, #88]	; (11bf4 <bt_joybus_subscribe_input_rsp+0x74>)
   11b9a:	6043      	str	r3, [r0, #4]
	joy->input_rsp_notify_params.value = BT_GATT_CCC_NOTIFY;
   11b9c:	2301      	movs	r3, #1
   11b9e:	8283      	strh	r3, [r0, #20]
	joy->input_rsp_notify_params.value_handle = joy->input_rsp_val_handle;
   11ba0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   11ba4:	6103      	str	r3, [r0, #16]
	joy->input_rsp_notify_cb = func;
   11ba6:	6781      	str	r1, [r0, #120]	; 0x78
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ba8:	f100 0318 	add.w	r3, r0, #24
   11bac:	f3bf 8f5b 	dmb	ish
   11bb0:	e853 1f00 	ldrex	r1, [r3]
   11bb4:	f041 0101 	orr.w	r1, r1, #1
   11bb8:	e843 1200 	strex	r2, r1, [r3]
   11bbc:	2a00      	cmp	r2, #0
   11bbe:	d1f7      	bne.n	11bb0 <bt_joybus_subscribe_input_rsp+0x30>
   11bc0:	f3bf 8f5b 	dmb	ish
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		joy->input_rsp_notify_params.value_handle,
		joy->input_rsp_notify_params.ccc_handle);
	err = bt_gatt_subscribe(joy->conn, &joy->input_rsp_notify_params);
   11bc4:	1d21      	adds	r1, r4, #4
   11bc6:	6820      	ldr	r0, [r4, #0]
   11bc8:	f00a fda0 	bl	1c70c <bt_gatt_subscribe>
	if (err) {
   11bcc:	4605      	mov	r5, r0
   11bce:	b128      	cbz	r0, 11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		LOG_ERR("Report notification subscribe error: %d.", err);
   11bd0:	4602      	mov	r2, r0
   11bd2:	2145      	movs	r1, #69	; 0x45
   11bd4:	4808      	ldr	r0, [pc, #32]	; (11bf8 <bt_joybus_subscribe_input_rsp+0x78>)
   11bd6:	f018 ffc7 	bl	2ab68 <z_log_minimal_printk>
		joy->input_rsp_notify_cb = NULL;
   11bda:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
   11bdc:	4628      	mov	r0, r5
   11bde:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11be0:	f06f 0515 	mvn.w	r5, #21
   11be4:	e7fa      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		return -ENOTSUP;
   11be6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11bea:	e7f7      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		return -EALREADY;
   11bec:	f06f 0577 	mvn.w	r5, #119	; 0x77
   11bf0:	e7f4      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
   11bf2:	bf00      	nop
   11bf4:	00011731 	.word	0x00011731
   11bf8:	0003029c 	.word	0x0003029c

00011bfc <bt_joy_button_enable_indicate>:
	joy->input_rsp_notify_cb = NULL;
	return err;
}

int bt_joy_button_enable_indicate(struct bt_joybus_client *joy, bt_button_indicate_cb func)
{
   11bfc:	b570      	push	{r4, r5, r6, lr}
	
	int err;

	if (!joy || !func) {
   11bfe:	4604      	mov	r4, r0
   11c00:	b398      	cbz	r0, 11c6a <bt_joy_button_enable_indicate+0x6e>
   11c02:	b391      	cbz	r1, 11c6a <bt_joy_button_enable_indicate+0x6e>
		return -EINVAL;
	}
	if (!joy->conn) {
   11c04:	6803      	ldr	r3, [r0, #0]
   11c06:	b383      	cbz	r3, 11c6a <bt_joy_button_enable_indicate+0x6e>
		return -EINVAL;
	}
	if (!(joy->button_properties & BT_GATT_CHRC_INDICATE)) {
   11c08:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
   11c0c:	069b      	lsls	r3, r3, #26
   11c0e:	d52f      	bpl.n	11c70 <bt_joy_button_enable_indicate+0x74>
		return -ENOTSUP;
	}
	if (joy->button_indicate_cb) {
   11c10:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
   11c14:	bb7e      	cbnz	r6, 11c76 <bt_joy_button_enable_indicate+0x7a>
		return -EALREADY;
	}

	joy->button_indicate_cb = func;
	joy->button_indicate_params.value = BT_GATT_CCC_INDICATE;
   11c16:	2302      	movs	r3, #2
   11c18:	f8a0 309c 	strh.w	r3, [r0, #156]	; 0x9c
	joy->button_indicate_params.value_handle = joy->button_state_handle;
   11c1c:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   11c20:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	joy->button_indicate_params.ccc_handle = joy->button_ccc_handle;
	joy->button_indicate_params.notify = button_indicate_process;
   11c24:	4b15      	ldr	r3, [pc, #84]	; (11c7c <bt_joy_button_enable_indicate+0x80>)
   11c26:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	joy->button_indicate_cb = func;
   11c2a:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
   11c2e:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
   11c32:	f3bf 8f5b 	dmb	ish
   11c36:	e853 1f00 	ldrex	r1, [r3]
   11c3a:	f041 0101 	orr.w	r1, r1, #1
   11c3e:	e843 1200 	strex	r2, r1, [r3]
   11c42:	2a00      	cmp	r2, #0
   11c44:	d1f7      	bne.n	11c36 <bt_joy_button_enable_indicate+0x3a>
   11c46:	f3bf 8f5b 	dmb	ish
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		joy->button_indicate_params.value_handle,
		joy->button_indicate_params.ccc_handle);
	err = bt_gatt_subscribe(joy->conn, &joy->button_indicate_params);
   11c4a:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   11c4e:	6820      	ldr	r0, [r4, #0]
   11c50:	f00a fd5c 	bl	1c70c <bt_gatt_subscribe>
	if (err) {
   11c54:	4605      	mov	r5, r0
   11c56:	b130      	cbz	r0, 11c66 <bt_joy_button_enable_indicate+0x6a>
		LOG_ERR("Report indication subscribe error: %d.", err);
   11c58:	4602      	mov	r2, r0
   11c5a:	2145      	movs	r1, #69	; 0x45
   11c5c:	4808      	ldr	r0, [pc, #32]	; (11c80 <bt_joy_button_enable_indicate+0x84>)
   11c5e:	f018 ff83 	bl	2ab68 <z_log_minimal_printk>
		joy->button_indicate_cb = NULL;
   11c62:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
	}
	LOG_DBG("Report subscribed.");
	return err;


}
   11c66:	4628      	mov	r0, r5
   11c68:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11c6a:	f06f 0515 	mvn.w	r5, #21
   11c6e:	e7fa      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
		return -ENOTSUP;
   11c70:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11c74:	e7f7      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
		return -EALREADY;
   11c76:	f06f 0577 	mvn.w	r5, #119	; 0x77
   11c7a:	e7f4      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
   11c7c:	00011779 	.word	0x00011779
   11c80:	000302ca 	.word	0x000302ca

00011c84 <joybus_led_write>:
void led_write_cb(struct bt_conn *conn, uint8_t err,
				     struct bt_gatt_write_params *params){
	//Do nothing
}

void joybus_led_write(struct bt_joybus_client *joy, uint32_t led_state){
   11c84:	b507      	push	{r0, r1, r2, lr}
	
	int err;

	joy->led_write_params.func = led_write_cb;
   11c86:	4b11      	ldr	r3, [pc, #68]	; (11ccc <joybus_led_write+0x48>)
   11c88:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	joy->led_write_params.handle = joy->led_state_handle;
   11c8c:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
   11c90:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
	joy->led_write_params.data = &led_state;
   11c94:	ab01      	add	r3, sp, #4
   11c96:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	joy->led_write_params.length = 1;
   11c9a:	2301      	movs	r3, #1
   11c9c:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	joy->led_write_params.offset = 0;
   11ca0:	2300      	movs	r3, #0
void joybus_led_write(struct bt_joybus_client *joy, uint32_t led_state){
   11ca2:	9101      	str	r1, [sp, #4]
	joy->led_write_params.offset = 0;
   11ca4:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe

	err = bt_gatt_write(joy->conn, &joy->led_write_params);
   11ca8:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
   11cac:	6800      	ldr	r0, [r0, #0]
   11cae:	f00a fc7d 	bl	1c5ac <bt_gatt_write>
	if(err){
   11cb2:	4602      	mov	r2, r0
   11cb4:	b130      	cbz	r0, 11cc4 <joybus_led_write+0x40>
		LOG_ERR("Failed to write to LED Characteristic (err %d)", err);
   11cb6:	4806      	ldr	r0, [pc, #24]	; (11cd0 <joybus_led_write+0x4c>)
   11cb8:	2145      	movs	r1, #69	; 0x45
	}
	else {
		LOG_INF("Sent LED GATT write: %d", led_state);
   11cba:	f018 ff55 	bl	2ab68 <z_log_minimal_printk>
	}
}
   11cbe:	b003      	add	sp, #12
   11cc0:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("Sent LED GATT write: %d", led_state);
   11cc4:	9a01      	ldr	r2, [sp, #4]
   11cc6:	4803      	ldr	r0, [pc, #12]	; (11cd4 <joybus_led_write+0x50>)
   11cc8:	2149      	movs	r1, #73	; 0x49
   11cca:	e7f6      	b.n	11cba <joybus_led_write+0x36>
   11ccc:	0002a5b9 	.word	0x0002a5b9
   11cd0:	000302f6 	.word	0x000302f6
   11cd4:	0003032a 	.word	0x0003032a

00011cd8 <discovery_error_found_cb>:

static void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
   11cd8:	4801      	ldr	r0, [pc, #4]	; (11ce0 <discovery_error_found_cb+0x8>)
   11cda:	f018 bd2f 	b.w	2a73c <printk>
   11cde:	bf00      	nop
   11ce0:	00030355 	.word	0x00030355

00011ce4 <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
   11ce4:	4801      	ldr	r0, [pc, #4]	; (11cec <discovery_service_not_found_cb+0x8>)
   11ce6:	f018 bd29 	b.w	2a73c <printk>
   11cea:	bf00      	nop
   11cec:	0003037d 	.word	0x0003037d

00011cf0 <scan_connecting_error>:
	printk("Connecting failed\n");
   11cf0:	4801      	ldr	r0, [pc, #4]	; (11cf8 <scan_connecting_error+0x8>)
   11cf2:	f018 bd23 	b.w	2a73c <printk>
   11cf6:	bf00      	nop
   11cf8:	000303b2 	.word	0x000303b2

00011cfc <discovery_completed_cb>:
{
   11cfc:	b510      	push	{r4, lr}
   11cfe:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
   11d00:	481c      	ldr	r0, [pc, #112]	; (11d74 <discovery_completed_cb+0x78>)
   11d02:	f018 fd1b 	bl	2a73c <printk>
	err = bt_joybus_handles_assign(dm, &joy);
   11d06:	491c      	ldr	r1, [pc, #112]	; (11d78 <discovery_completed_cb+0x7c>)
   11d08:	4620      	mov	r0, r4
   11d0a:	f7ff fddb 	bl	118c4 <bt_joybus_handles_assign>
	if (err) {
   11d0e:	4601      	mov	r1, r0
   11d10:	b110      	cbz	r0, 11d18 <discovery_completed_cb+0x1c>
		printk("Could not init JOY client object, error: %d\n", err);
   11d12:	481a      	ldr	r0, [pc, #104]	; (11d7c <discovery_completed_cb+0x80>)
   11d14:	f018 fd12 	bl	2a73c <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_joy_input_rsp_notify_supported(struct bt_joybus_client *joy)
{
	return joy->input_rsp_notify;
   11d18:	4817      	ldr	r0, [pc, #92]	; (11d78 <discovery_completed_cb+0x7c>)
	if (bt_joy_input_rsp_notify_supported(&joy)) {
   11d1a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
   11d1e:	b1eb      	cbz	r3, 11d5c <discovery_completed_cb+0x60>
		err = bt_joybus_subscribe_input_rsp(&joy,
   11d20:	4917      	ldr	r1, [pc, #92]	; (11d80 <discovery_completed_cb+0x84>)
   11d22:	f7ff ff2d 	bl	11b80 <bt_joybus_subscribe_input_rsp>
		if (err) {
   11d26:	4601      	mov	r1, r0
   11d28:	b110      	cbz	r0, 11d30 <discovery_completed_cb+0x34>
			printk("Cannot subscribe to input_response notification "
   11d2a:	4816      	ldr	r0, [pc, #88]	; (11d84 <discovery_completed_cb+0x88>)
   11d2c:	f018 fd06 	bl	2a73c <printk>
	err = bt_joy_button_enable_indicate(&joy, app_button_indicated_cb);
   11d30:	4915      	ldr	r1, [pc, #84]	; (11d88 <discovery_completed_cb+0x8c>)
   11d32:	4811      	ldr	r0, [pc, #68]	; (11d78 <discovery_completed_cb+0x7c>)
   11d34:	f7ff ff62 	bl	11bfc <bt_joy_button_enable_indicate>
	if (err) {
   11d38:	4601      	mov	r1, r0
   11d3a:	b110      	cbz	r0, 11d42 <discovery_completed_cb+0x46>
		printk("Cannot subscribe to button indications (err: %d)\n", err);
   11d3c:	4813      	ldr	r0, [pc, #76]	; (11d8c <discovery_completed_cb+0x90>)
   11d3e:	f018 fcfd 	bl	2a73c <printk>
	bt_connected = true;
   11d42:	4b13      	ldr	r3, [pc, #76]	; (11d90 <discovery_completed_cb+0x94>)
   11d44:	2201      	movs	r2, #1
	err = bt_gatt_dm_data_release(dm);
   11d46:	4620      	mov	r0, r4
	bt_connected = true;
   11d48:	701a      	strb	r2, [r3, #0]
	err = bt_gatt_dm_data_release(dm);
   11d4a:	f019 fb8d 	bl	2b468 <bt_gatt_dm_data_release>
	if (err) {
   11d4e:	4601      	mov	r1, r0
   11d50:	b178      	cbz	r0, 11d72 <discovery_completed_cb+0x76>
}
   11d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not release the discovery data, error "
   11d56:	480f      	ldr	r0, [pc, #60]	; (11d94 <discovery_completed_cb+0x98>)
   11d58:	f018 bcf0 	b.w	2a73c <printk>
		err = input_rsp_start_periodic_read(
   11d5c:	4a0e      	ldr	r2, [pc, #56]	; (11d98 <discovery_completed_cb+0x9c>)
   11d5e:	f242 7110 	movw	r1, #10000	; 0x2710
   11d62:	f018 fc2c 	bl	2a5be <input_rsp_start_periodic_read>
		if (err) {
   11d66:	2800      	cmp	r0, #0
   11d68:	d0e2      	beq.n	11d30 <discovery_completed_cb+0x34>
			printk("Could not start periodic read of JOY value\n");
   11d6a:	480c      	ldr	r0, [pc, #48]	; (11d9c <discovery_completed_cb+0xa0>)
   11d6c:	f018 fce6 	bl	2a73c <printk>
   11d70:	e7de      	b.n	11d30 <discovery_completed_cb+0x34>
}
   11d72:	bd10      	pop	{r4, pc}
   11d74:	000303c5 	.word	0x000303c5
   11d78:	20001b28 	.word	0x20001b28
   11d7c:	000303e8 	.word	0x000303e8
   11d80:	00011e19 	.word	0x00011e19
   11d84:	00030415 	.word	0x00030415
   11d88:	00011fed 	.word	0x00011fed
   11d8c:	0003047c 	.word	0x0003047c
   11d90:	2000433c 	.word	0x2000433c
   11d94:	000304ae 	.word	0x000304ae
   11d98:	00012025 	.word	0x00012025
   11d9c:	00030450 	.word	0x00030450

00011da0 <scan_connecting>:
{
   11da0:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   11da2:	4608      	mov	r0, r1
   11da4:	f006 fc6a 	bl	1867c <bt_conn_ref>
   11da8:	4b01      	ldr	r3, [pc, #4]	; (11db0 <scan_connecting+0x10>)
   11daa:	6018      	str	r0, [r3, #0]
}
   11dac:	bd08      	pop	{r3, pc}
   11dae:	bf00      	nop
   11db0:	20002b94 	.word	0x20002b94

00011db4 <offload_function>:
		if (led_write_state & KEY_READVAL_MASK) {
   11db4:	4b04      	ldr	r3, [pc, #16]	; (11dc8 <offload_function+0x14>)
			joybus_led_write(&joy, 0);
   11db6:	4805      	ldr	r0, [pc, #20]	; (11dcc <offload_function+0x18>)
		if (led_write_state & KEY_READVAL_MASK) {
   11db8:	6819      	ldr	r1, [r3, #0]
   11dba:	f011 0101 	ands.w	r1, r1, #1
			joybus_led_write(&joy, 0x0001);
   11dbe:	bf18      	it	ne
   11dc0:	2101      	movne	r1, #1
			joybus_led_write(&joy, 0);
   11dc2:	f7ff bf5f 	b.w	11c84 <joybus_led_write>
   11dc6:	bf00      	nop
   11dc8:	200006dc 	.word	0x200006dc
   11dcc:	20001b28 	.word	0x20001b28

00011dd0 <button_handler>:
	}
}


static void button_handler(uint32_t button_state, uint32_t has_changed)
{
   11dd0:	b538      	push	{r3, r4, r5, lr}
   11dd2:	4604      	mov	r4, r0
	if(bt_joybus_conn(&joy) != default_conn){
   11dd4:	480a      	ldr	r0, [pc, #40]	; (11e00 <button_handler+0x30>)
{
   11dd6:	460d      	mov	r5, r1
	if(bt_joybus_conn(&joy) != default_conn){
   11dd8:	f018 fbef 	bl	2a5ba <bt_joybus_conn>
   11ddc:	4b09      	ldr	r3, [pc, #36]	; (11e04 <button_handler+0x34>)
   11dde:	681b      	ldr	r3, [r3, #0]
   11de0:	4283      	cmp	r3, r0
   11de2:	d004      	beq.n	11dee <button_handler+0x1e>
	}
	
	led_write_state = button_state & has_changed;

	k_work_submit_to_queue(&offload_work_q, &my_work.work);
}
   11de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Not connected, cannot write to LED.\n");
   11de8:	4807      	ldr	r0, [pc, #28]	; (11e08 <button_handler+0x38>)
   11dea:	f018 bca7 	b.w	2a73c <printk>
	led_write_state = button_state & has_changed;
   11dee:	4b07      	ldr	r3, [pc, #28]	; (11e0c <button_handler+0x3c>)
	k_work_submit_to_queue(&offload_work_q, &my_work.work);
   11df0:	4907      	ldr	r1, [pc, #28]	; (11e10 <button_handler+0x40>)
   11df2:	4808      	ldr	r0, [pc, #32]	; (11e14 <button_handler+0x44>)
	led_write_state = button_state & has_changed;
   11df4:	402c      	ands	r4, r5
   11df6:	601c      	str	r4, [r3, #0]
}
   11df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_submit_to_queue(&offload_work_q, &my_work.work);
   11dfc:	f01c bf4d 	b.w	2ec9a <k_work_submit_to_queue>
   11e00:	20001b28 	.word	0x20001b28
   11e04:	20002b94 	.word	0x20002b94
   11e08:	000304e4 	.word	0x000304e4
   11e0c:	200006dc 	.word	0x200006dc
   11e10:	20002b68 	.word	0x20002b68
   11e14:	20001bf0 	.word	0x20001bf0

00011e18 <notify_input_rsp_cb>:
{
   11e18:	b507      	push	{r0, r1, r2, lr}
	if (input_response == BT_INPUT_RESPONSE_VAL_INVALID) {
   11e1a:	1c4b      	adds	r3, r1, #1
{
   11e1c:	9101      	str	r1, [sp, #4]
	if (input_response == BT_INPUT_RESPONSE_VAL_INVALID) {
   11e1e:	d105      	bne.n	11e2c <notify_input_rsp_cb+0x14>
		printk("Input Response notification aborted\n");
   11e20:	4807      	ldr	r0, [pc, #28]	; (11e40 <notify_input_rsp_cb+0x28>)
   11e22:	f018 fc8b 	bl	2a73c <printk>
}
   11e26:	b003      	add	sp, #12
   11e28:	f85d fb04 	ldr.w	pc, [sp], #4
		printk("Input Response notification: %x \n", input_response);
   11e2c:	4805      	ldr	r0, [pc, #20]	; (11e44 <notify_input_rsp_cb+0x2c>)
   11e2e:	f018 fc85 	bl	2a73c <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   11e32:	2200      	movs	r2, #0
   11e34:	2300      	movs	r3, #0
   11e36:	a901      	add	r1, sp, #4
   11e38:	4803      	ldr	r0, [pc, #12]	; (11e48 <notify_input_rsp_cb+0x30>)
   11e3a:	f012 fc41 	bl	246c0 <z_impl_k_msgq_put>
}
   11e3e:	e7f2      	b.n	11e26 <notify_input_rsp_cb+0xe>
   11e40:	00030509 	.word	0x00030509
   11e44:	0003052e 	.word	0x0003052e
   11e48:	20000b50 	.word	0x20000b50

00011e4c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11e4c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11e4e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11e50:	b08a      	sub	sp, #40	; 0x28
   11e52:	4604      	mov	r4, r0
   11e54:	460e      	mov	r6, r1
   11e56:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11e58:	2b03      	cmp	r3, #3
   11e5a:	d820      	bhi.n	11e9e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11e5c:	e8df f003 	tbb	[pc, r3]
   11e60:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11e64:	4911      	ldr	r1, [pc, #68]	; (11eac <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11e66:	4628      	mov	r0, r5
   11e68:	f019 fde5 	bl	2ba36 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11e6c:	9505      	str	r5, [sp, #20]
   11e6e:	7863      	ldrb	r3, [r4, #1]
   11e70:	9304      	str	r3, [sp, #16]
   11e72:	78a3      	ldrb	r3, [r4, #2]
   11e74:	9303      	str	r3, [sp, #12]
   11e76:	78e3      	ldrb	r3, [r4, #3]
   11e78:	9302      	str	r3, [sp, #8]
   11e7a:	7923      	ldrb	r3, [r4, #4]
   11e7c:	9301      	str	r3, [sp, #4]
   11e7e:	7963      	ldrb	r3, [r4, #5]
   11e80:	9300      	str	r3, [sp, #0]
   11e82:	79a3      	ldrb	r3, [r4, #6]
   11e84:	4a0a      	ldr	r2, [pc, #40]	; (11eb0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11e86:	211e      	movs	r1, #30
   11e88:	4630      	mov	r0, r6
   11e8a:	f018 fc64 	bl	2a756 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11e8e:	b00a      	add	sp, #40	; 0x28
   11e90:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11e92:	4908      	ldr	r1, [pc, #32]	; (11eb4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11e94:	e7e7      	b.n	11e66 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11e96:	4908      	ldr	r1, [pc, #32]	; (11eb8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11e98:	e7e5      	b.n	11e66 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11e9a:	4908      	ldr	r1, [pc, #32]	; (11ebc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11e9c:	e7e3      	b.n	11e66 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11e9e:	4a08      	ldr	r2, [pc, #32]	; (11ec0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11ea0:	210a      	movs	r1, #10
   11ea2:	4628      	mov	r0, r5
   11ea4:	f018 fc57 	bl	2a756 <snprintk>
		break;
   11ea8:	e7e0      	b.n	11e6c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11eaa:	bf00      	nop
   11eac:	00030550 	.word	0x00030550
   11eb0:	00030579 	.word	0x00030579
   11eb4:	00030557 	.word	0x00030557
   11eb8:	0003055e 	.word	0x0003055e
   11ebc:	00030568 	.word	0x00030568
   11ec0:	00030572 	.word	0x00030572

00011ec4 <disconnected>:
{
   11ec4:	b530      	push	{r4, r5, lr}
   11ec6:	b089      	sub	sp, #36	; 0x24
   11ec8:	460d      	mov	r5, r1
   11eca:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11ecc:	f01a f939 	bl	2c142 <bt_conn_get_dst>
   11ed0:	4669      	mov	r1, sp
   11ed2:	f7ff ffbb 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11ed6:	462a      	mov	r2, r5
	if (default_conn != conn) {
   11ed8:	4d0b      	ldr	r5, [pc, #44]	; (11f08 <disconnected+0x44>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11eda:	480c      	ldr	r0, [pc, #48]	; (11f0c <disconnected+0x48>)
   11edc:	4669      	mov	r1, sp
   11ede:	f018 fc2d 	bl	2a73c <printk>
	if (default_conn != conn) {
   11ee2:	6828      	ldr	r0, [r5, #0]
   11ee4:	42a0      	cmp	r0, r4
   11ee6:	d10d      	bne.n	11f04 <disconnected+0x40>
	bt_conn_unref(default_conn);
   11ee8:	f006 fbf4 	bl	186d4 <bt_conn_unref>
	bt_connected = false;
   11eec:	4a08      	ldr	r2, [pc, #32]	; (11f10 <disconnected+0x4c>)
	default_conn = NULL;
   11eee:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11ef0:	2001      	movs	r0, #1
	default_conn = NULL;
   11ef2:	602b      	str	r3, [r5, #0]
	bt_connected = false;
   11ef4:	7013      	strb	r3, [r2, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11ef6:	f002 fcf3 	bl	148e0 <bt_scan_start>
	if (err) {
   11efa:	4601      	mov	r1, r0
   11efc:	b110      	cbz	r0, 11f04 <disconnected+0x40>
		printk("Scanning failed to start (err %d)\n", err);
   11efe:	4805      	ldr	r0, [pc, #20]	; (11f14 <disconnected+0x50>)
   11f00:	f018 fc1c 	bl	2a73c <printk>
}
   11f04:	b009      	add	sp, #36	; 0x24
   11f06:	bd30      	pop	{r4, r5, pc}
   11f08:	20002b94 	.word	0x20002b94
   11f0c:	0003059c 	.word	0x0003059c
   11f10:	2000433c 	.word	0x2000433c
   11f14:	000305ba 	.word	0x000305ba

00011f18 <scan_filter_match>:
{
   11f18:	b510      	push	{r4, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11f1a:	6803      	ldr	r3, [r0, #0]
{
   11f1c:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11f1e:	6818      	ldr	r0, [r3, #0]
   11f20:	4669      	mov	r1, sp
{
   11f22:	4614      	mov	r4, r2
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11f24:	f7ff ff92 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
   11f28:	4b05      	ldr	r3, [pc, #20]	; (11f40 <scan_filter_match+0x28>)
   11f2a:	4a06      	ldr	r2, [pc, #24]	; (11f44 <scan_filter_match+0x2c>)
   11f2c:	4806      	ldr	r0, [pc, #24]	; (11f48 <scan_filter_match+0x30>)
   11f2e:	2c00      	cmp	r4, #0
   11f30:	bf18      	it	ne
   11f32:	461a      	movne	r2, r3
   11f34:	4669      	mov	r1, sp
   11f36:	f018 fc01 	bl	2a73c <printk>
}
   11f3a:	b008      	add	sp, #32
   11f3c:	bd10      	pop	{r4, pc}
   11f3e:	bf00      	nop
   11f40:	000305dd 	.word	0x000305dd
   11f44:	000305e1 	.word	0x000305e1
   11f48:	000305e4 	.word	0x000305e4

00011f4c <connected>:
{
   11f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f4e:	b08f      	sub	sp, #60	; 0x3c
   11f50:	460d      	mov	r5, r1
   11f52:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11f54:	f01a f8f5 	bl	2c142 <bt_conn_get_dst>
   11f58:	a906      	add	r1, sp, #24
   11f5a:	f7ff ff77 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
	if (conn_err) {
   11f5e:	4e1c      	ldr	r6, [pc, #112]	; (11fd0 <connected+0x84>)
   11f60:	b1ad      	cbz	r5, 11f8e <connected+0x42>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   11f62:	481c      	ldr	r0, [pc, #112]	; (11fd4 <connected+0x88>)
   11f64:	462a      	mov	r2, r5
   11f66:	a906      	add	r1, sp, #24
   11f68:	f018 fbe8 	bl	2a73c <printk>
		if (conn == default_conn) {
   11f6c:	6830      	ldr	r0, [r6, #0]
   11f6e:	42a0      	cmp	r0, r4
   11f70:	d10b      	bne.n	11f8a <connected+0x3e>
			bt_conn_unref(default_conn);
   11f72:	f006 fbaf 	bl	186d4 <bt_conn_unref>
			default_conn = NULL;
   11f76:	2300      	movs	r3, #0
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11f78:	2001      	movs	r0, #1
			default_conn = NULL;
   11f7a:	6033      	str	r3, [r6, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11f7c:	f002 fcb0 	bl	148e0 <bt_scan_start>
			if (err) {
   11f80:	4601      	mov	r1, r0
   11f82:	b110      	cbz	r0, 11f8a <connected+0x3e>
				printk("Scanning failed to start (err %d)\n",
   11f84:	4814      	ldr	r0, [pc, #80]	; (11fd8 <connected+0x8c>)
		printk("Could not start the discovery procedure, error "
   11f86:	f018 fbd9 	bl	2a73c <printk>
}
   11f8a:	b00f      	add	sp, #60	; 0x3c
   11f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Connected: %s - starting discovery...\n", addr);
   11f8e:	4813      	ldr	r0, [pc, #76]	; (11fdc <connected+0x90>)
   11f90:	a906      	add	r1, sp, #24
   11f92:	f018 fbd3 	bl	2a73c <printk>
	if (conn != default_conn) {
   11f96:	6833      	ldr	r3, [r6, #0]
   11f98:	429c      	cmp	r4, r3
   11f9a:	d1f6      	bne.n	11f8a <connected+0x3e>
	err = bt_gatt_dm_start(conn, BT_UUID_JOYBUS, &discovery_cb, NULL);
   11f9c:	4b10      	ldr	r3, [pc, #64]	; (11fe0 <connected+0x94>)
   11f9e:	aa01      	add	r2, sp, #4
   11fa0:	f103 0710 	add.w	r7, r3, #16
   11fa4:	4616      	mov	r6, r2
   11fa6:	6818      	ldr	r0, [r3, #0]
   11fa8:	6859      	ldr	r1, [r3, #4]
   11faa:	4615      	mov	r5, r2
   11fac:	c503      	stmia	r5!, {r0, r1}
   11fae:	3308      	adds	r3, #8
   11fb0:	42bb      	cmp	r3, r7
   11fb2:	462a      	mov	r2, r5
   11fb4:	d1f7      	bne.n	11fa6 <connected+0x5a>
   11fb6:	781b      	ldrb	r3, [r3, #0]
   11fb8:	702b      	strb	r3, [r5, #0]
   11fba:	4631      	mov	r1, r6
   11fbc:	4a09      	ldr	r2, [pc, #36]	; (11fe4 <connected+0x98>)
   11fbe:	2300      	movs	r3, #0
   11fc0:	4620      	mov	r0, r4
   11fc2:	f002 fa2f 	bl	14424 <bt_gatt_dm_start>
	if (err) {
   11fc6:	4601      	mov	r1, r0
   11fc8:	2800      	cmp	r0, #0
   11fca:	d0de      	beq.n	11f8a <connected+0x3e>
		printk("Could not start the discovery procedure, error "
   11fcc:	4806      	ldr	r0, [pc, #24]	; (11fe8 <connected+0x9c>)
   11fce:	e7da      	b.n	11f86 <connected+0x3a>
   11fd0:	20002b94 	.word	0x20002b94
   11fd4:	00030612 	.word	0x00030612
   11fd8:	000305ba 	.word	0x000305ba
   11fdc:	00030630 	.word	0x00030630
   11fe0:	0002f4b0 	.word	0x0002f4b0
   11fe4:	200006c8 	.word	0x200006c8
   11fe8:	00030657 	.word	0x00030657

00011fec <app_button_indicated_cb>:
{
   11fec:	b510      	push	{r4, lr}
   11fee:	b088      	sub	sp, #32
   11ff0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_joybus_conn(joy)), addr, sizeof(addr));
   11ff2:	f018 fae2 	bl	2a5ba <bt_joybus_conn>
   11ff6:	f01a f8a4 	bl	2c142 <bt_conn_get_dst>
   11ffa:	4669      	mov	r1, sp
   11ffc:	f7ff ff26 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
		printk("[%s] Button %s \n", addr, (button_state ? "Pressed" : "Released"));
   12000:	4b05      	ldr	r3, [pc, #20]	; (12018 <app_button_indicated_cb+0x2c>)
   12002:	4a06      	ldr	r2, [pc, #24]	; (1201c <app_button_indicated_cb+0x30>)
   12004:	4806      	ldr	r0, [pc, #24]	; (12020 <app_button_indicated_cb+0x34>)
   12006:	2c00      	cmp	r4, #0
   12008:	bf18      	it	ne
   1200a:	461a      	movne	r2, r3
   1200c:	4669      	mov	r1, sp
   1200e:	f018 fb95 	bl	2a73c <printk>
}
   12012:	b008      	add	sp, #32
   12014:	bd10      	pop	{r4, pc}
   12016:	bf00      	nop
   12018:	00030690 	.word	0x00030690
   1201c:	00030698 	.word	0x00030698
   12020:	000306a1 	.word	0x000306a1

00012024 <read_input_response_cb>:
{
   12024:	b530      	push	{r4, r5, lr}
   12026:	b089      	sub	sp, #36	; 0x24
   12028:	460d      	mov	r5, r1
   1202a:	4614      	mov	r4, r2
	bt_addr_le_to_str(bt_conn_get_dst(bt_joybus_conn(joy)),
   1202c:	f018 fac5 	bl	2a5ba <bt_joybus_conn>
   12030:	f01a f887 	bl	2c142 <bt_conn_get_dst>
   12034:	4669      	mov	r1, sp
   12036:	f7ff ff09 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
   1203a:	b134      	cbz	r4, 1204a <read_input_response_cb+0x26>
		printk("[%s] Input Response read ERROR: %d\n", addr, err);
   1203c:	4805      	ldr	r0, [pc, #20]	; (12054 <read_input_response_cb+0x30>)
   1203e:	4622      	mov	r2, r4
   12040:	4669      	mov	r1, sp
	printk("[%s] Input Response read: %x \n", addr, input_response);
   12042:	f018 fb7b 	bl	2a73c <printk>
}
   12046:	b009      	add	sp, #36	; 0x24
   12048:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Input Response read: %x \n", addr, input_response);
   1204a:	4803      	ldr	r0, [pc, #12]	; (12058 <read_input_response_cb+0x34>)
   1204c:	462a      	mov	r2, r5
   1204e:	4669      	mov	r1, sp
   12050:	e7f7      	b.n	12042 <read_input_response_cb+0x1e>
   12052:	bf00      	nop
   12054:	000306b2 	.word	0x000306b2
   12058:	000306d6 	.word	0x000306d6

0001205c <scan_filter_no_match>:
{
   1205c:	b570      	push	{r4, r5, r6, lr}
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   1205e:	6803      	ldr	r3, [r0, #0]
   12060:	79da      	ldrb	r2, [r3, #7]
   12062:	2a01      	cmp	r2, #1
{
   12064:	b08e      	sub	sp, #56	; 0x38
   12066:	4605      	mov	r5, r0
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   12068:	d11f      	bne.n	120aa <scan_filter_no_match+0x4e>
		bt_addr_le_to_str(device_info->recv_info->addr, addr,
   1206a:	6818      	ldr	r0, [r3, #0]
   1206c:	a906      	add	r1, sp, #24
   1206e:	f7ff feed 	bl	11e4c <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Direct advertising received from %s\n", addr);
   12072:	a906      	add	r1, sp, #24
   12074:	480e      	ldr	r0, [pc, #56]	; (120b0 <scan_filter_no_match+0x54>)
   12076:	f018 fb61 	bl	2a73c <printk>
		bt_scan_stop();
   1207a:	f019 fa26 	bl	2b4ca <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
   1207e:	682b      	ldr	r3, [r5, #0]
   12080:	681e      	ldr	r6, [r3, #0]
					BT_CONN_LE_CREATE_CONN,
   12082:	4b0c      	ldr	r3, [pc, #48]	; (120b4 <scan_filter_no_match+0x58>)
   12084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   12086:	ac02      	add	r4, sp, #8
   12088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		err = bt_conn_le_create(device_info->recv_info->addr,
   1208c:	686a      	ldr	r2, [r5, #4]
   1208e:	ab01      	add	r3, sp, #4
   12090:	4621      	mov	r1, r4
   12092:	4630      	mov	r0, r6
   12094:	f006 fe20 	bl	18cd8 <bt_conn_le_create>
		if (!err) {
   12098:	b938      	cbnz	r0, 120aa <scan_filter_no_match+0x4e>
			default_conn = bt_conn_ref(conn);
   1209a:	9801      	ldr	r0, [sp, #4]
   1209c:	f006 faee 	bl	1867c <bt_conn_ref>
   120a0:	4b05      	ldr	r3, [pc, #20]	; (120b8 <scan_filter_no_match+0x5c>)
   120a2:	6018      	str	r0, [r3, #0]
			bt_conn_unref(conn);
   120a4:	9801      	ldr	r0, [sp, #4]
   120a6:	f006 fb15 	bl	186d4 <bt_conn_unref>
}
   120aa:	b00e      	add	sp, #56	; 0x38
   120ac:	bd70      	pop	{r4, r5, r6, pc}
   120ae:	bf00      	nop
   120b0:	000306f5 	.word	0x000306f5
   120b4:	0002f4c4 	.word	0x0002f4c4
   120b8:	20002b94 	.word	0x20002b94

000120bc <main>:


void main(void)
{
   120bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	uint8_t *rsp_tx_p = 0;

	printk("Starting Bluetooth Central JOY example\n");
   120be:	4840      	ldr	r0, [pc, #256]	; (121c0 <main+0x104>)
{
   120c0:	b08d      	sub	sp, #52	; 0x34
	printk("Starting Bluetooth Central JOY example\n");
   120c2:	f018 fb3b 	bl	2a73c <printk>

	bt_joybus_client_init(&joy);
   120c6:	483f      	ldr	r0, [pc, #252]	; (121c4 <main+0x108>)
   120c8:	f7ff fbea 	bl	118a0 <bt_joybus_client_init>

	err = bt_enable(NULL);
   120cc:	2000      	movs	r0, #0
   120ce:	f004 fec1 	bl	16e54 <bt_enable>
	if (err) {
   120d2:	4604      	mov	r4, r0
   120d4:	b130      	cbz	r0, 120e4 <main+0x28>
		printk("Bluetooth init failed (err %d)\n", err);
   120d6:	4601      	mov	r1, r0
   120d8:	483b      	ldr	r0, [pc, #236]	; (121c8 <main+0x10c>)
		while(bt_connected)
		{
			uart_tx(uart, rsp_tx_p, UART_TX_BUFF_SIZE, 100);
		}
	}
}
   120da:	b00d      	add	sp, #52	; 0x34
   120dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Scanning failed to start (err %d)\n", err);
   120e0:	f018 bb2c 	b.w	2a73c <printk>
	printk("Bluetooth initialized\n");
   120e4:	4839      	ldr	r0, [pc, #228]	; (121cc <main+0x110>)
   120e6:	f018 fb29 	bl	2a73c <printk>
		settings_load();
   120ea:	f018 ffbe 	bl	2b06a <settings_load>
		.conn_param = BT_LE_JOYBUS_CONN_PARAMS,
   120ee:	4a38      	ldr	r2, [pc, #224]	; (121d0 <main+0x114>)
	struct bt_scan_init_param scan_init = {
   120f0:	9404      	str	r4, [sp, #16]
   120f2:	2301      	movs	r3, #1
   120f4:	f88d 3014 	strb.w	r3, [sp, #20]
		.conn_param = BT_LE_JOYBUS_CONN_PARAMS,
   120f8:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   120fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
	bt_scan_init(&scan_init);
   12100:	a804      	add	r0, sp, #16
	struct bt_scan_init_param scan_init = {
   12102:	ab02      	add	r3, sp, #8
   12104:	9306      	str	r3, [sp, #24]
	bt_scan_init(&scan_init);
   12106:	f002 fbb9 	bl	1487c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   1210a:	4832      	ldr	r0, [pc, #200]	; (121d4 <main+0x118>)
   1210c:	f002 fa7e 	bl	1460c <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_JOYBUS);
   12110:	4b31      	ldr	r3, [pc, #196]	; (121d8 <main+0x11c>)
   12112:	aa07      	add	r2, sp, #28
   12114:	f103 0610 	add.w	r6, r3, #16
   12118:	4615      	mov	r5, r2
   1211a:	6818      	ldr	r0, [r3, #0]
   1211c:	6859      	ldr	r1, [r3, #4]
   1211e:	4614      	mov	r4, r2
   12120:	c403      	stmia	r4!, {r0, r1}
   12122:	3308      	adds	r3, #8
   12124:	42b3      	cmp	r3, r6
   12126:	4622      	mov	r2, r4
   12128:	d1f7      	bne.n	1211a <main+0x5e>
   1212a:	781b      	ldrb	r3, [r3, #0]
   1212c:	7023      	strb	r3, [r4, #0]
   1212e:	4629      	mov	r1, r5
   12130:	2003      	movs	r0, #3
   12132:	f002 fa7b 	bl	1462c <bt_scan_filter_add>
	if (err) {
   12136:	4601      	mov	r1, r0
   12138:	b148      	cbz	r0, 1214e <main+0x92>
		printk("Scanning filters cannot be set (err %d)\n", err);
   1213a:	4828      	ldr	r0, [pc, #160]	; (121dc <main+0x120>)
		printk("Filters cannot be turned on (err %d)\n", err);
   1213c:	f018 fafe 	bl	2a73c <printk>
	err = dk_buttons_init(button_handler);
   12140:	4827      	ldr	r0, [pc, #156]	; (121e0 <main+0x124>)
   12142:	f00f fb47 	bl	217d4 <dk_buttons_init>
	if (err) {
   12146:	4601      	mov	r1, r0
   12148:	b148      	cbz	r0, 1215e <main+0xa2>
		printk("Failed to initialize buttons (err %d)\n", err);
   1214a:	4826      	ldr	r0, [pc, #152]	; (121e4 <main+0x128>)
   1214c:	e7c5      	b.n	120da <main+0x1e>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   1214e:	2004      	movs	r0, #4
   12150:	f002 face 	bl	146f0 <bt_scan_filter_enable>
	if (err) {
   12154:	4601      	mov	r1, r0
   12156:	2800      	cmp	r0, #0
   12158:	d0f2      	beq.n	12140 <main+0x84>
		printk("Filters cannot be turned on (err %d)\n", err);
   1215a:	4823      	ldr	r0, [pc, #140]	; (121e8 <main+0x12c>)
   1215c:	e7ee      	b.n	1213c <main+0x80>
	k_work_queue_start(&offload_work_q, my_stack_area,
   1215e:	2304      	movs	r3, #4
   12160:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12164:	4921      	ldr	r1, [pc, #132]	; (121ec <main+0x130>)
   12166:	9000      	str	r0, [sp, #0]
   12168:	4821      	ldr	r0, [pc, #132]	; (121f0 <main+0x134>)
   1216a:	f013 f911 	bl	25390 <k_work_queue_start>
	strcpy(my_work.name, "Thread0 emulate_work()");
   1216e:	4921      	ldr	r1, [pc, #132]	; (121f4 <main+0x138>)
   12170:	4821      	ldr	r0, [pc, #132]	; (121f8 <main+0x13c>)
   12172:	f019 fc60 	bl	2ba36 <strcpy>
	k_work_init(&my_work.work, offload_function);
   12176:	4921      	ldr	r1, [pc, #132]	; (121fc <main+0x140>)
   12178:	4821      	ldr	r0, [pc, #132]	; (12200 <main+0x144>)
   1217a:	f013 f853 	bl	25224 <k_work_init>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1217e:	2001      	movs	r0, #1
   12180:	f002 fbae 	bl	148e0 <bt_scan_start>
	if (err) {
   12184:	4601      	mov	r1, r0
   12186:	b108      	cbz	r0, 1218c <main+0xd0>
		printk("Scanning failed to start (err %d)\n", err);
   12188:	481e      	ldr	r0, [pc, #120]	; (12204 <main+0x148>)
   1218a:	e7a6      	b.n	120da <main+0x1e>
	printk("Scanning successfully started\n");
   1218c:	481e      	ldr	r0, [pc, #120]	; (12208 <main+0x14c>)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   1218e:	4d1f      	ldr	r5, [pc, #124]	; (1220c <main+0x150>)
		while(bt_connected)
   12190:	4c1f      	ldr	r4, [pc, #124]	; (12210 <main+0x154>)
			uart_tx(uart, rsp_tx_p, UART_TX_BUFF_SIZE, 100);
   12192:	4e20      	ldr	r6, [pc, #128]	; (12214 <main+0x158>)
	printk("Scanning successfully started\n");
   12194:	f018 fad2 	bl	2a73c <printk>
   12198:	f04f 32ff 	mov.w	r2, #4294967295
   1219c:	f04f 33ff 	mov.w	r3, #4294967295
   121a0:	2100      	movs	r1, #0
   121a2:	4628      	mov	r0, r5
   121a4:	f012 fb16 	bl	247d4 <z_impl_k_msgq_get>
		while(bt_connected)
   121a8:	7823      	ldrb	r3, [r4, #0]
   121aa:	2b00      	cmp	r3, #0
   121ac:	d0f4      	beq.n	12198 <main+0xdc>
			uart_tx(uart, rsp_tx_p, UART_TX_BUFF_SIZE, 100);
   121ae:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
   121b0:	6883      	ldr	r3, [r0, #8]
   121b2:	2204      	movs	r2, #4
   121b4:	685f      	ldr	r7, [r3, #4]
   121b6:	2100      	movs	r1, #0
   121b8:	2364      	movs	r3, #100	; 0x64
   121ba:	47b8      	blx	r7
   121bc:	e7f4      	b.n	121a8 <main+0xec>
   121be:	bf00      	nop
   121c0:	0003071a 	.word	0x0003071a
   121c4:	20001b28 	.word	0x20001b28
   121c8:	00030742 	.word	0x00030742
   121cc:	00030762 	.word	0x00030762
   121d0:	00090008 	.word	0x00090008
   121d4:	200006d4 	.word	0x200006d4
   121d8:	0002f4b0 	.word	0x0002f4b0
   121dc:	00030779 	.word	0x00030779
   121e0:	00011dd1 	.word	0x00011dd1
   121e4:	000307c8 	.word	0x000307c8
   121e8:	000307a2 	.word	0x000307a2
   121ec:	20004940 	.word	0x20004940
   121f0:	20001bf0 	.word	0x20001bf0
   121f4:	000307ef 	.word	0x000307ef
   121f8:	20002b78 	.word	0x20002b78
   121fc:	00011db5 	.word	0x00011db5
   12200:	20002b68 	.word	0x20002b68
   12204:	000305ba 	.word	0x000305ba
   12208:	00030806 	.word	0x00030806
   1220c:	20000b50 	.word	0x20000b50
   12210:	2000433c 	.word	0x2000433c
   12214:	200006e0 	.word	0x200006e0

00012218 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   12218:	4b01      	ldr	r3, [pc, #4]	; (12220 <char_out+0x8>)
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	4718      	bx	r3
   1221e:	bf00      	nop
   12220:	200006e4 	.word	0x200006e4

00012224 <__printk_hook_install>:
	_char_out = fn;
   12224:	4b01      	ldr	r3, [pc, #4]	; (1222c <__printk_hook_install+0x8>)
   12226:	6018      	str	r0, [r3, #0]
}
   12228:	4770      	bx	lr
   1222a:	bf00      	nop
   1222c:	200006e4 	.word	0x200006e4

00012230 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   12230:	b507      	push	{r0, r1, r2, lr}
   12232:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12234:	2100      	movs	r1, #0
   12236:	4602      	mov	r2, r0
   12238:	9100      	str	r1, [sp, #0]
   1223a:	4803      	ldr	r0, [pc, #12]	; (12248 <vprintk+0x18>)
   1223c:	f000 fbbe 	bl	129bc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   12240:	b003      	add	sp, #12
   12242:	f85d fb04 	ldr.w	pc, [sp], #4
   12246:	bf00      	nop
   12248:	00012219 	.word	0x00012219

0001224c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1224c:	b530      	push	{r4, r5, lr}
   1224e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12250:	2500      	movs	r5, #0
   12252:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12256:	4604      	mov	r4, r0
   12258:	9500      	str	r5, [sp, #0]
   1225a:	a903      	add	r1, sp, #12
   1225c:	4805      	ldr	r0, [pc, #20]	; (12274 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1225e:	9505      	str	r5, [sp, #20]
   12260:	f000 fbac 	bl	129bc <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12264:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12268:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1226a:	bfb8      	it	lt
   1226c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1226e:	b007      	add	sp, #28
   12270:	bd30      	pop	{r4, r5, pc}
   12272:	bf00      	nop
   12274:	0002a717 	.word	0x0002a717

00012278 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12278:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   1227a:	b351      	cbz	r1, 122d2 <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1227c:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1227e:	1f0b      	subs	r3, r1, #4
   12280:	1a9b      	subs	r3, r3, r2
   12282:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12284:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12288:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1228a:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   1228c:	07e0      	lsls	r0, r4, #31
   1228e:	d408      	bmi.n	122a2 <sys_heap_free+0x2a>
   12290:	4910      	ldr	r1, [pc, #64]	; (122d4 <sys_heap_free+0x5c>)
   12292:	4811      	ldr	r0, [pc, #68]	; (122d8 <sys_heap_free+0x60>)
   12294:	22af      	movs	r2, #175	; 0xaf
   12296:	f018 fc59 	bl	2ab4c <assert_print>
   1229a:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   1229c:	480d      	ldr	r0, [pc, #52]	; (122d4 <sys_heap_free+0x5c>)
   1229e:	f018 fc4e 	bl	2ab3e <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   122a2:	4610      	mov	r0, r2
   122a4:	f018 fa6e 	bl	2a784 <chunk_size>
   122a8:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   122aa:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   122ae:	1b40      	subs	r0, r0, r5
   122b0:	4281      	cmp	r1, r0
   122b2:	d006      	beq.n	122c2 <sys_heap_free+0x4a>
   122b4:	4907      	ldr	r1, [pc, #28]	; (122d4 <sys_heap_free+0x5c>)
   122b6:	4808      	ldr	r0, [pc, #32]	; (122d8 <sys_heap_free+0x60>)
   122b8:	22b7      	movs	r2, #183	; 0xb7
   122ba:	f018 fc47 	bl	2ab4c <assert_print>
   122be:	21b7      	movs	r1, #183	; 0xb7
   122c0:	e7ec      	b.n	1229c <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   122c2:	f024 0401 	bic.w	r4, r4, #1
   122c6:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   122c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   122cc:	4610      	mov	r0, r2
   122ce:	f018 bb16 	b.w	2a8fe <free_chunk>
}
   122d2:	bd38      	pop	{r3, r4, r5, pc}
   122d4:	00030836 	.word	0x00030836
   122d8:	0003013d 	.word	0x0003013d

000122dc <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   122dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   122e0:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   122e2:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   122e4:	6806      	ldr	r6, [r0, #0]
{
   122e6:	460f      	mov	r7, r1
   122e8:	4614      	mov	r4, r2
	if (align != rew) {
   122ea:	d011      	beq.n	12310 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   122ec:	f1c1 0900 	rsb	r9, r1, #0
   122f0:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   122f4:	464a      	mov	r2, r9
   122f6:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   122f8:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   122fc:	bf28      	it	cs
   122fe:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12300:	4219      	tst	r1, r3
   12302:	d10c      	bne.n	1231e <sys_heap_aligned_alloc+0x42>
   12304:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   12306:	b9c4      	cbnz	r4, 1233a <sys_heap_aligned_alloc+0x5e>
		return NULL;
   12308:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1230a:	4628      	mov	r0, r5
   1230c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   12310:	2904      	cmp	r1, #4
   12312:	d80f      	bhi.n	12334 <sys_heap_aligned_alloc+0x58>
}
   12314:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   12318:	4611      	mov	r1, r2
   1231a:	f018 bb21 	b.w	2a960 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   1231e:	492a      	ldr	r1, [pc, #168]	; (123c8 <sys_heap_aligned_alloc+0xec>)
   12320:	482a      	ldr	r0, [pc, #168]	; (123cc <sys_heap_aligned_alloc+0xf0>)
   12322:	f44f 72a2 	mov.w	r2, #324	; 0x144
   12326:	f018 fc11 	bl	2ab4c <assert_print>
   1232a:	4827      	ldr	r0, [pc, #156]	; (123c8 <sys_heap_aligned_alloc+0xec>)
   1232c:	f44f 71a2 	mov.w	r1, #324	; 0x144
   12330:	f018 fc05 	bl	2ab3e <assert_post_action>
		rew = 0;
   12334:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   12336:	2204      	movs	r2, #4
   12338:	e7e5      	b.n	12306 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1233a:	68b3      	ldr	r3, [r6, #8]
   1233c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12340:	d9e2      	bls.n	12308 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12342:	f104 010b 	add.w	r1, r4, #11
   12346:	4439      	add	r1, r7
   12348:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1234a:	08c9      	lsrs	r1, r1, #3
   1234c:	4630      	mov	r0, r6
   1234e:	f018 fa6f 	bl	2a830 <alloc_chunk>
	if (c0 == 0) {
   12352:	4680      	mov	r8, r0
   12354:	2800      	cmp	r0, #0
   12356:	d0d7      	beq.n	12308 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12358:	f109 0504 	add.w	r5, r9, #4
   1235c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12360:	1e7b      	subs	r3, r7, #1
   12362:	4435      	add	r5, r6
   12364:	441d      	add	r5, r3
   12366:	427f      	negs	r7, r7
   12368:	403d      	ands	r5, r7
   1236a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1236e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12370:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12372:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12374:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12376:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1237a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1237c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12380:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12384:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12388:	d208      	bcs.n	1239c <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   1238a:	4601      	mov	r1, r0
   1238c:	463a      	mov	r2, r7
   1238e:	4630      	mov	r0, r6
   12390:	f018 fa9b 	bl	2a8ca <split_chunks>
		free_list_add(h, c0);
   12394:	4641      	mov	r1, r8
   12396:	4630      	mov	r0, r6
   12398:	f018 f9f9 	bl	2a78e <free_list_add>
	return c + chunk_size(h, c);
   1239c:	4639      	mov	r1, r7
   1239e:	4630      	mov	r0, r6
   123a0:	f018 f9f0 	bl	2a784 <chunk_size>
   123a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   123a6:	4284      	cmp	r4, r0
   123a8:	d207      	bcs.n	123ba <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   123aa:	4630      	mov	r0, r6
   123ac:	4622      	mov	r2, r4
   123ae:	f018 fa8c 	bl	2a8ca <split_chunks>
		free_list_add(h, c_end);
   123b2:	4621      	mov	r1, r4
   123b4:	4630      	mov	r0, r6
   123b6:	f018 f9ea 	bl	2a78e <free_list_add>
	void *cmem = &buf[c];
   123ba:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   123be:	8873      	ldrh	r3, [r6, #2]
   123c0:	f043 0301 	orr.w	r3, r3, #1
   123c4:	8073      	strh	r3, [r6, #2]
   123c6:	e7a0      	b.n	1230a <sys_heap_aligned_alloc+0x2e>
   123c8:	00030836 	.word	0x00030836
   123cc:	0003013d 	.word	0x0003013d

000123d0 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   123d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123d6:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   123d8:	d30a      	bcc.n	123f0 <sys_heap_init+0x20>
   123da:	4933      	ldr	r1, [pc, #204]	; (124a8 <sys_heap_init+0xd8>)
   123dc:	4833      	ldr	r0, [pc, #204]	; (124ac <sys_heap_init+0xdc>)
   123de:	f240 12eb 	movw	r2, #491	; 0x1eb
   123e2:	f018 fbb3 	bl	2ab4c <assert_print>
   123e6:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   123ea:	482f      	ldr	r0, [pc, #188]	; (124a8 <sys_heap_init+0xd8>)
   123ec:	f018 fba7 	bl	2ab3e <assert_post_action>
   123f0:	2a04      	cmp	r2, #4
   123f2:	d808      	bhi.n	12406 <sys_heap_init+0x36>
   123f4:	492c      	ldr	r1, [pc, #176]	; (124a8 <sys_heap_init+0xd8>)
   123f6:	482d      	ldr	r0, [pc, #180]	; (124ac <sys_heap_init+0xdc>)
   123f8:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   123fc:	f018 fba6 	bl	2ab4c <assert_print>
   12400:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12404:	e7f1      	b.n	123ea <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   12406:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12408:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1240a:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1240c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12410:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12414:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12416:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12418:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   1241c:	d808      	bhi.n	12430 <sys_heap_init+0x60>
   1241e:	4922      	ldr	r1, [pc, #136]	; (124a8 <sys_heap_init+0xd8>)
   12420:	4822      	ldr	r0, [pc, #136]	; (124ac <sys_heap_init+0xdc>)
   12422:	f240 12fb 	movw	r2, #507	; 0x1fb
   12426:	f018 fb91 	bl	2ab4c <assert_print>
   1242a:	f240 11fb 	movw	r1, #507	; 0x1fb
   1242e:	e7dc      	b.n	123ea <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12430:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12434:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12438:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   1243c:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1243e:	3107      	adds	r1, #7
   12440:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12442:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   12444:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12446:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   12448:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   1244c:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   1244e:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12450:	d908      	bls.n	12464 <sys_heap_init+0x94>
   12452:	4915      	ldr	r1, [pc, #84]	; (124a8 <sys_heap_init+0xd8>)
   12454:	4815      	ldr	r0, [pc, #84]	; (124ac <sys_heap_init+0xdc>)
   12456:	f44f 7203 	mov.w	r2, #524	; 0x20c
   1245a:	f018 fb77 	bl	2ab4c <assert_print>
   1245e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   12462:	e7c2      	b.n	123ea <sys_heap_init+0x1a>
   12464:	f100 050c 	add.w	r5, r0, #12
   12468:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1246c:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   12470:	42b5      	cmp	r5, r6
   12472:	d1fb      	bne.n	1246c <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12474:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12476:	f045 0501 	orr.w	r5, r5, #1
   1247a:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1247c:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12480:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12482:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   12484:	8004      	strh	r4, [r0, #0]
   12486:	8077      	strh	r7, [r6, #2]
   12488:	1886      	adds	r6, r0, r2
   1248a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1248e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   12492:	8074      	strh	r4, [r6, #2]
   12494:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12496:	885a      	ldrh	r2, [r3, #2]
   12498:	f042 0201 	orr.w	r2, r2, #1
   1249c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1249e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   124a2:	f018 b974 	b.w	2a78e <free_list_add>
   124a6:	bf00      	nop
   124a8:	00030836 	.word	0x00030836
   124ac:	0003013d 	.word	0x0003013d

000124b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   124b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b4:	4604      	mov	r4, r0
   124b6:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   124b8:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   124ba:	0719      	lsls	r1, r3, #28
{
   124bc:	4616      	mov	r6, r2
	if (processing) {
   124be:	d412      	bmi.n	124e6 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   124c0:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   124c2:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   124c6:	d162      	bne.n	1258e <process_event+0xde>
			evt = process_recheck(mgr);
   124c8:	4620      	mov	r0, r4
   124ca:	f018 fa72 	bl	2a9b2 <process_recheck>
		}

		if (evt == EVT_NOP) {
   124ce:	b188      	cbz	r0, 124f4 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   124d0:	3801      	subs	r0, #1
   124d2:	2804      	cmp	r0, #4
   124d4:	f200 8121 	bhi.w	1271a <process_event+0x26a>
   124d8:	e8df f010 	tbh	[pc, r0, lsl #1]
   124dc:	011f0059 	.word	0x011f0059
   124e0:	00c4007e 	.word	0x00c4007e
   124e4:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   124e6:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   124e8:	bf0c      	ite	eq
   124ea:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124ee:	f043 0120 	orrne.w	r1, r3, #32
   124f2:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   124f4:	f104 0014 	add.w	r0, r4, #20
   124f8:	f012 f89c 	bl	24634 <z_spin_unlock_valid>
   124fc:	2800      	cmp	r0, #0
   124fe:	f000 80a9 	beq.w	12654 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   12502:	f386 8811 	msr	BASEPRI, r6
   12506:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1250a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12512:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12514:	2801      	cmp	r0, #1
   12516:	d81e      	bhi.n	12556 <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12518:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   1251a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   1251c:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1251e:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12522:	d114      	bne.n	1254e <process_event+0x9e>
		*clients = mgr->clients;
   12524:	463a      	mov	r2, r7
   12526:	e003      	b.n	12530 <process_event+0x80>
				mgr->refs += 1U;
   12528:	8be0      	ldrh	r0, [r4, #30]
   1252a:	3001      	adds	r0, #1
   1252c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1252e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12530:	2a00      	cmp	r2, #0
   12532:	d1f9      	bne.n	12528 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12534:	f023 0307 	bic.w	r3, r3, #7
   12538:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1253c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1253e:	4620      	mov	r0, r4
   12540:	f018 fa37 	bl	2a9b2 <process_recheck>
   12544:	b390      	cbz	r0, 125ac <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12546:	f042 0220 	orr.w	r2, r2, #32
   1254a:	83a2      	strh	r2, [r4, #28]
   1254c:	e02e      	b.n	125ac <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1254e:	f023 0307 	bic.w	r3, r3, #7
   12552:	b29a      	uxth	r2, r3
}
   12554:	e7f2      	b.n	1253c <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12556:	2a04      	cmp	r2, #4
   12558:	d133      	bne.n	125c2 <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1255a:	f023 0307 	bic.w	r3, r3, #7
   1255e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   12560:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12562:	4620      	mov	r0, r4
   12564:	f018 fa25 	bl	2a9b2 <process_recheck>
   12568:	b110      	cbz	r0, 12570 <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1256a:	f042 0220 	orr.w	r2, r2, #32
   1256e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12570:	8ba3      	ldrh	r3, [r4, #28]
   12572:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12576:	4589      	cmp	r9, r1
   12578:	f040 80d8 	bne.w	1272c <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1257c:	8ba1      	ldrh	r1, [r4, #28]
   1257e:	06ca      	lsls	r2, r1, #27
   12580:	f140 811e 	bpl.w	127c0 <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12584:	f021 0310 	bic.w	r3, r1, #16
   12588:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1258a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   1258e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12592:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12594:	f1b8 0f00 	cmp.w	r8, #0
   12598:	dab9      	bge.n	1250e <process_event+0x5e>
	list->head = NULL;
   1259a:	2200      	movs	r2, #0
		*clients = mgr->clients;
   1259c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1259e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   125a2:	e9c4 2200 	strd	r2, r2, [r4]
   125a6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   125aa:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   125ac:	8ba3      	ldrh	r3, [r4, #28]
   125ae:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   125b2:	4589      	cmp	r9, r1
   125b4:	f040 80bb 	bne.w	1272e <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   125b8:	2f00      	cmp	r7, #0
   125ba:	d0df      	beq.n	1257c <process_event+0xcc>
   125bc:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   125be:	46aa      	mov	sl, r5
   125c0:	e03e      	b.n	12640 <process_event+0x190>
		__ASSERT_NO_MSG(false);
   125c2:	4984      	ldr	r1, [pc, #528]	; (127d4 <process_event+0x324>)
   125c4:	4884      	ldr	r0, [pc, #528]	; (127d8 <process_event+0x328>)
   125c6:	f240 121b 	movw	r2, #283	; 0x11b
   125ca:	f018 fabf 	bl	2ab4c <assert_print>
   125ce:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   125d2:	4880      	ldr	r0, [pc, #512]	; (127d4 <process_event+0x324>)
   125d4:	f018 fab3 	bl	2ab3e <assert_post_action>
   125d8:	b141      	cbz	r1, 125ec <process_event+0x13c>
   125da:	497e      	ldr	r1, [pc, #504]	; (127d4 <process_event+0x324>)
   125dc:	487e      	ldr	r0, [pc, #504]	; (127d8 <process_event+0x328>)
   125de:	f44f 72ab 	mov.w	r2, #342	; 0x156
   125e2:	f018 fab3 	bl	2ab4c <assert_print>
   125e6:	f44f 71ab 	mov.w	r1, #342	; 0x156
   125ea:	e7f2      	b.n	125d2 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   125ec:	6823      	ldr	r3, [r4, #0]
   125ee:	b943      	cbnz	r3, 12602 <process_event+0x152>
   125f0:	4978      	ldr	r1, [pc, #480]	; (127d4 <process_event+0x324>)
   125f2:	4879      	ldr	r0, [pc, #484]	; (127d8 <process_event+0x328>)
   125f4:	f240 1257 	movw	r2, #343	; 0x157
   125f8:	f018 faa8 	bl	2ab4c <assert_print>
   125fc:	f240 1157 	movw	r1, #343	; 0x157
   12600:	e7e7      	b.n	125d2 <process_event+0x122>
			transit = mgr->transitions->start;
   12602:	6923      	ldr	r3, [r4, #16]
   12604:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12606:	b945      	cbnz	r5, 1261a <process_event+0x16a>
   12608:	4972      	ldr	r1, [pc, #456]	; (127d4 <process_event+0x324>)
   1260a:	4873      	ldr	r0, [pc, #460]	; (127d8 <process_event+0x328>)
   1260c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   12610:	f018 fa9c 	bl	2ab4c <assert_print>
   12614:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   12618:	e7db      	b.n	125d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1261a:	8ba3      	ldrh	r3, [r4, #28]
   1261c:	f023 0307 	bic.w	r3, r3, #7
   12620:	f043 0306 	orr.w	r3, r3, #6
   12624:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   12626:	83a3      	strh	r3, [r4, #28]
   12628:	460f      	mov	r7, r1
		res = 0;
   1262a:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1262c:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   12630:	68a2      	ldr	r2, [r4, #8]
   12632:	2a00      	cmp	r2, #0
   12634:	d17d      	bne.n	12732 <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   12636:	2f00      	cmp	r7, #0
   12638:	d17e      	bne.n	12738 <process_event+0x288>
		    || (transit != NULL)) {
   1263a:	2d00      	cmp	r5, #0
   1263c:	d09e      	beq.n	1257c <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1263e:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12640:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   12644:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   12648:	83a3      	strh	r3, [r4, #28]
   1264a:	4658      	mov	r0, fp
   1264c:	f011 fff2 	bl	24634 <z_spin_unlock_valid>
   12650:	2800      	cmp	r0, #0
   12652:	d173      	bne.n	1273c <process_event+0x28c>
   12654:	4961      	ldr	r1, [pc, #388]	; (127dc <process_event+0x32c>)
   12656:	4860      	ldr	r0, [pc, #384]	; (127d8 <process_event+0x328>)
   12658:	22c2      	movs	r2, #194	; 0xc2
   1265a:	f018 fa77 	bl	2ab4c <assert_print>
   1265e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12660:	485e      	ldr	r0, [pc, #376]	; (127dc <process_event+0x32c>)
   12662:	e7b7      	b.n	125d4 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12664:	2902      	cmp	r1, #2
   12666:	d008      	beq.n	1267a <process_event+0x1ca>
   12668:	495a      	ldr	r1, [pc, #360]	; (127d4 <process_event+0x324>)
   1266a:	485b      	ldr	r0, [pc, #364]	; (127d8 <process_event+0x328>)
   1266c:	f240 125d 	movw	r2, #349	; 0x15d
   12670:	f018 fa6c 	bl	2ab4c <assert_print>
   12674:	f240 115d 	movw	r1, #349	; 0x15d
   12678:	e7ab      	b.n	125d2 <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1267a:	8be7      	ldrh	r7, [r4, #30]
   1267c:	b147      	cbz	r7, 12690 <process_event+0x1e0>
   1267e:	4955      	ldr	r1, [pc, #340]	; (127d4 <process_event+0x324>)
   12680:	4855      	ldr	r0, [pc, #340]	; (127d8 <process_event+0x328>)
   12682:	f44f 72af 	mov.w	r2, #350	; 0x15e
   12686:	f018 fa61 	bl	2ab4c <assert_print>
   1268a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1268e:	e7a0      	b.n	125d2 <process_event+0x122>
			transit = mgr->transitions->stop;
   12690:	6923      	ldr	r3, [r4, #16]
   12692:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   12694:	b945      	cbnz	r5, 126a8 <process_event+0x1f8>
   12696:	494f      	ldr	r1, [pc, #316]	; (127d4 <process_event+0x324>)
   12698:	484f      	ldr	r0, [pc, #316]	; (127d8 <process_event+0x328>)
   1269a:	f240 1261 	movw	r2, #353	; 0x161
   1269e:	f018 fa55 	bl	2ab4c <assert_print>
   126a2:	f240 1161 	movw	r1, #353	; 0x161
   126a6:	e794      	b.n	125d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126a8:	8ba3      	ldrh	r3, [r4, #28]
   126aa:	f023 0307 	bic.w	r3, r3, #7
   126ae:	f043 0304 	orr.w	r3, r3, #4
   126b2:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   126b4:	83a3      	strh	r3, [r4, #28]
		res = 0;
   126b6:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   126b8:	f04f 0904 	mov.w	r9, #4
   126bc:	e7b8      	b.n	12630 <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   126be:	2901      	cmp	r1, #1
   126c0:	d008      	beq.n	126d4 <process_event+0x224>
   126c2:	4944      	ldr	r1, [pc, #272]	; (127d4 <process_event+0x324>)
   126c4:	4844      	ldr	r0, [pc, #272]	; (127d8 <process_event+0x328>)
   126c6:	f44f 72b2 	mov.w	r2, #356	; 0x164
   126ca:	f018 fa3f 	bl	2ab4c <assert_print>
   126ce:	f44f 71b2 	mov.w	r1, #356	; 0x164
   126d2:	e77e      	b.n	125d2 <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   126d4:	6823      	ldr	r3, [r4, #0]
   126d6:	b943      	cbnz	r3, 126ea <process_event+0x23a>
   126d8:	493e      	ldr	r1, [pc, #248]	; (127d4 <process_event+0x324>)
   126da:	483f      	ldr	r0, [pc, #252]	; (127d8 <process_event+0x328>)
   126dc:	f240 1265 	movw	r2, #357	; 0x165
   126e0:	f018 fa34 	bl	2ab4c <assert_print>
   126e4:	f240 1165 	movw	r1, #357	; 0x165
   126e8:	e773      	b.n	125d2 <process_event+0x122>
			transit = mgr->transitions->reset;
   126ea:	6923      	ldr	r3, [r4, #16]
   126ec:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   126ee:	b945      	cbnz	r5, 12702 <process_event+0x252>
   126f0:	4938      	ldr	r1, [pc, #224]	; (127d4 <process_event+0x324>)
   126f2:	4839      	ldr	r0, [pc, #228]	; (127d8 <process_event+0x328>)
   126f4:	f44f 72b4 	mov.w	r2, #360	; 0x168
   126f8:	f018 fa28 	bl	2ab4c <assert_print>
   126fc:	f44f 71b4 	mov.w	r1, #360	; 0x168
   12700:	e767      	b.n	125d2 <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12702:	8ba3      	ldrh	r3, [r4, #28]
   12704:	f023 0307 	bic.w	r3, r3, #7
   12708:	f043 0305 	orr.w	r3, r3, #5
   1270c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1270e:	2700      	movs	r7, #0
   12710:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12712:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12714:	f04f 0905 	mov.w	r9, #5
   12718:	e78a      	b.n	12630 <process_event+0x180>
			__ASSERT_NO_MSG(false);
   1271a:	492e      	ldr	r1, [pc, #184]	; (127d4 <process_event+0x324>)
   1271c:	482e      	ldr	r0, [pc, #184]	; (127d8 <process_event+0x328>)
   1271e:	f240 126b 	movw	r2, #363	; 0x16b
   12722:	f018 fa13 	bl	2ab4c <assert_print>
   12726:	f240 116b 	movw	r1, #363	; 0x16b
   1272a:	e752      	b.n	125d2 <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   1272c:	2700      	movs	r7, #0
   1272e:	2500      	movs	r5, #0
   12730:	e77e      	b.n	12630 <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12732:	f04f 0a01 	mov.w	sl, #1
   12736:	e783      	b.n	12640 <process_event+0x190>
   12738:	4692      	mov	sl, r2
   1273a:	e781      	b.n	12640 <process_event+0x190>
   1273c:	f386 8811 	msr	BASEPRI, r6
   12740:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12744:	f1ba 0f00 	cmp.w	sl, #0
   12748:	d117      	bne.n	1277a <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   1274a:	bb4f      	cbnz	r7, 127a0 <process_event+0x2f0>
			if (transit != NULL) {
   1274c:	b115      	cbz	r5, 12754 <process_event+0x2a4>
				transit(mgr, transition_complete);
   1274e:	4924      	ldr	r1, [pc, #144]	; (127e0 <process_event+0x330>)
   12750:	4620      	mov	r0, r4
   12752:	47a8      	blx	r5
	__asm__ volatile(
   12754:	f04f 0340 	mov.w	r3, #64	; 0x40
   12758:	f3ef 8611 	mrs	r6, BASEPRI
   1275c:	f383 8812 	msr	BASEPRI_MAX, r3
   12760:	f3bf 8f6f 	isb	sy
   12764:	4658      	mov	r0, fp
   12766:	f011 ff57 	bl	24618 <z_spin_lock_valid>
   1276a:	bb08      	cbnz	r0, 127b0 <process_event+0x300>
   1276c:	491b      	ldr	r1, [pc, #108]	; (127dc <process_event+0x32c>)
   1276e:	481a      	ldr	r0, [pc, #104]	; (127d8 <process_event+0x328>)
   12770:	2294      	movs	r2, #148	; 0x94
   12772:	f018 f9eb 	bl	2ab4c <assert_print>
   12776:	2194      	movs	r1, #148	; 0x94
   12778:	e772      	b.n	12660 <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1277a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1277c:	2900      	cmp	r1, #0
   1277e:	d0e4      	beq.n	1274a <process_event+0x29a>
	return node->next;
   12780:	680e      	ldr	r6, [r1, #0]
   12782:	2900      	cmp	r1, #0
   12784:	d0e1      	beq.n	1274a <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   12786:	f8d1 a004 	ldr.w	sl, [r1, #4]
   1278a:	4643      	mov	r3, r8
   1278c:	464a      	mov	r2, r9
   1278e:	4620      	mov	r0, r4
   12790:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12792:	b11e      	cbz	r6, 1279c <process_event+0x2ec>
   12794:	6833      	ldr	r3, [r6, #0]
   12796:	4631      	mov	r1, r6
   12798:	461e      	mov	r6, r3
   1279a:	e7f2      	b.n	12782 <process_event+0x2d2>
   1279c:	4633      	mov	r3, r6
   1279e:	e7fa      	b.n	12796 <process_event+0x2e6>
   127a0:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   127a2:	4643      	mov	r3, r8
   127a4:	464a      	mov	r2, r9
   127a6:	4620      	mov	r0, r4
   127a8:	683f      	ldr	r7, [r7, #0]
   127aa:	f018 f92e 	bl	2aa0a <notify_one>
   127ae:	e7cc      	b.n	1274a <process_event+0x29a>
	z_spin_lock_set_owner(l);
   127b0:	4658      	mov	r0, fp
   127b2:	f011 ff4f 	bl	24654 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   127b6:	8ba3      	ldrh	r3, [r4, #28]
   127b8:	f023 0308 	bic.w	r3, r3, #8
   127bc:	83a3      	strh	r3, [r4, #28]
   127be:	e6dd      	b.n	1257c <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   127c0:	068b      	lsls	r3, r1, #26
   127c2:	f57f ae97 	bpl.w	124f4 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   127c6:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   127ca:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   127cc:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   127d0:	e67a      	b.n	124c8 <process_event+0x18>
   127d2:	bf00      	nop
   127d4:	00030857 	.word	0x00030857
   127d8:	0003013d 	.word	0x0003013d
   127dc:	00030879 	.word	0x00030879
   127e0:	000127e5 	.word	0x000127e5

000127e4 <transition_complete>:
{
   127e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127e6:	4604      	mov	r4, r0
   127e8:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   127ea:	f100 0614 	add.w	r6, r0, #20
   127ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   127f2:	f3ef 8711 	mrs	r7, BASEPRI
   127f6:	f383 8812 	msr	BASEPRI_MAX, r3
   127fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127fe:	4630      	mov	r0, r6
   12800:	f011 ff0a 	bl	24618 <z_spin_lock_valid>
   12804:	b940      	cbnz	r0, 12818 <transition_complete+0x34>
   12806:	490a      	ldr	r1, [pc, #40]	; (12830 <transition_complete+0x4c>)
   12808:	480a      	ldr	r0, [pc, #40]	; (12834 <transition_complete+0x50>)
   1280a:	2294      	movs	r2, #148	; 0x94
   1280c:	f018 f99e 	bl	2ab4c <assert_print>
   12810:	4807      	ldr	r0, [pc, #28]	; (12830 <transition_complete+0x4c>)
   12812:	2194      	movs	r1, #148	; 0x94
   12814:	f018 f993 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   12818:	4630      	mov	r0, r6
   1281a:	f011 ff1b 	bl	24654 <z_spin_lock_set_owner>
	mgr->last_res = res;
   1281e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   12820:	463a      	mov	r2, r7
   12822:	4620      	mov	r0, r4
   12824:	2101      	movs	r1, #1
}
   12826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1282a:	f7ff be41 	b.w	124b0 <process_event>
   1282e:	bf00      	nop
   12830:	00030879 	.word	0x00030879
   12834:	0003013d 	.word	0x0003013d

00012838 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   12838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1283c:	4604      	mov	r4, r0
   1283e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   12840:	f018 f8d3 	bl	2a9ea <validate_args>

	if (rv < 0) {
   12844:	1e05      	subs	r5, r0, #0
   12846:	db5c      	blt.n	12902 <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12848:	f104 0914 	add.w	r9, r4, #20
   1284c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12850:	f3ef 8a11 	mrs	sl, BASEPRI
   12854:	f383 8812 	msr	BASEPRI_MAX, r3
   12858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1285c:	4648      	mov	r0, r9
   1285e:	f011 fedb 	bl	24618 <z_spin_lock_valid>
   12862:	4680      	mov	r8, r0
   12864:	b938      	cbnz	r0, 12876 <onoff_request+0x3e>
   12866:	4932      	ldr	r1, [pc, #200]	; (12930 <onoff_request+0xf8>)
   12868:	4832      	ldr	r0, [pc, #200]	; (12934 <onoff_request+0xfc>)
   1286a:	2294      	movs	r2, #148	; 0x94
   1286c:	f018 f96e 	bl	2ab4c <assert_print>
   12870:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12872:	482f      	ldr	r0, [pc, #188]	; (12930 <onoff_request+0xf8>)
   12874:	e03a      	b.n	128ec <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   12876:	4648      	mov	r0, r9
   12878:	f011 feec 	bl	24654 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1287c:	8be3      	ldrh	r3, [r4, #30]
   1287e:	8ba6      	ldrh	r6, [r4, #28]
   12880:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12884:	4293      	cmp	r3, r2
   12886:	f006 0607 	and.w	r6, r6, #7
   1288a:	d03d      	beq.n	12908 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1288c:	2e02      	cmp	r6, #2
   1288e:	d10e      	bne.n	128ae <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   12890:	3301      	adds	r3, #1
   12892:	83e3      	strh	r3, [r4, #30]
	rv = state;
   12894:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12896:	4648      	mov	r0, r9
   12898:	f011 fecc 	bl	24634 <z_spin_unlock_valid>
   1289c:	2800      	cmp	r0, #0
   1289e:	d139      	bne.n	12914 <onoff_request+0xdc>
   128a0:	4923      	ldr	r1, [pc, #140]	; (12930 <onoff_request+0xf8>)
   128a2:	4824      	ldr	r0, [pc, #144]	; (12934 <onoff_request+0xfc>)
   128a4:	22c2      	movs	r2, #194	; 0xc2
   128a6:	f018 f951 	bl	2ab4c <assert_print>
   128aa:	21c2      	movs	r1, #194	; 0xc2
   128ac:	e7e1      	b.n	12872 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   128ae:	2e06      	cmp	r6, #6
   128b0:	d813      	bhi.n	128da <onoff_request+0xa2>
   128b2:	e8df f006 	tbb	[pc, r6]
   128b6:	2c09      	.short	0x2c09
   128b8:	04091212 	.word	0x04091212
   128bc:	09          	.byte	0x09
   128bd:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   128be:	f06f 0585 	mvn.w	r5, #133	; 0x85
   128c2:	f04f 0800 	mov.w	r8, #0
   128c6:	e7e6      	b.n	12896 <onoff_request+0x5e>
	parent->next = child;
   128c8:	2300      	movs	r3, #0
   128ca:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   128cc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   128ce:	b97b      	cbnz	r3, 128f0 <onoff_request+0xb8>
	list->head = node;
   128d0:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   128d4:	b17e      	cbz	r6, 128f6 <onoff_request+0xbe>
	rv = state;
   128d6:	4635      	mov	r5, r6
   128d8:	e7f3      	b.n	128c2 <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   128da:	4917      	ldr	r1, [pc, #92]	; (12938 <onoff_request+0x100>)
   128dc:	4815      	ldr	r0, [pc, #84]	; (12934 <onoff_request+0xfc>)
   128de:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   128e2:	f018 f933 	bl	2ab4c <assert_print>
   128e6:	4814      	ldr	r0, [pc, #80]	; (12938 <onoff_request+0x100>)
   128e8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   128ec:	f018 f927 	bl	2ab3e <assert_post_action>
	parent->next = child;
   128f0:	601f      	str	r7, [r3, #0]
	list->tail = node;
   128f2:	6067      	str	r7, [r4, #4]
}
   128f4:	e7ee      	b.n	128d4 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   128f6:	4652      	mov	r2, sl
   128f8:	2102      	movs	r1, #2
   128fa:	4620      	mov	r0, r4
   128fc:	f7ff fdd8 	bl	124b0 <process_event>
   12900:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   12902:	4628      	mov	r0, r5
   12904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   12908:	f06f 050a 	mvn.w	r5, #10
   1290c:	e7d9      	b.n	128c2 <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   1290e:	f06f 0504 	mvn.w	r5, #4
   12912:	e7d6      	b.n	128c2 <onoff_request+0x8a>
	__asm__ volatile(
   12914:	f38a 8811 	msr	BASEPRI, sl
   12918:	f3bf 8f6f 	isb	sy
		if (notify) {
   1291c:	f1b8 0f00 	cmp.w	r8, #0
   12920:	d0ef      	beq.n	12902 <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   12922:	2300      	movs	r3, #0
   12924:	4632      	mov	r2, r6
   12926:	4639      	mov	r1, r7
   12928:	4620      	mov	r0, r4
   1292a:	f018 f86e 	bl	2aa0a <notify_one>
   1292e:	e7e8      	b.n	12902 <onoff_request+0xca>
   12930:	00030879 	.word	0x00030879
   12934:	0003013d 	.word	0x0003013d
   12938:	00030857 	.word	0x00030857

0001293c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1293c:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1293e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   12940:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   12942:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   12946:	2a02      	cmp	r2, #2
{
   12948:	4603      	mov	r3, r0
	switch (method) {
   1294a:	d00a      	beq.n	12962 <sys_notify_finalize+0x26>
   1294c:	2a03      	cmp	r2, #3
   1294e:	f04f 0100 	mov.w	r1, #0
   12952:	d003      	beq.n	1295c <sys_notify_finalize+0x20>
   12954:	2a01      	cmp	r2, #1
   12956:	d10a      	bne.n	1296e <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12958:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1295a:	e006      	b.n	1296a <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   1295c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1295e:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   12960:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   12962:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12964:	2200      	movs	r2, #0
   12966:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12968:	b950      	cbnz	r0, 12980 <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   1296a:	2000      	movs	r0, #0
   1296c:	e7f8      	b.n	12960 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1296e:	4906      	ldr	r1, [pc, #24]	; (12988 <sys_notify_finalize+0x4c>)
   12970:	4806      	ldr	r0, [pc, #24]	; (1298c <sys_notify_finalize+0x50>)
   12972:	2245      	movs	r2, #69	; 0x45
   12974:	f018 f8ea 	bl	2ab4c <assert_print>
   12978:	4803      	ldr	r0, [pc, #12]	; (12988 <sys_notify_finalize+0x4c>)
   1297a:	2145      	movs	r1, #69	; 0x45
   1297c:	f018 f8df 	bl	2ab3e <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   12980:	f014 fd2a 	bl	273d8 <z_impl_k_poll_signal_raise>
   12984:	e7f1      	b.n	1296a <sys_notify_finalize+0x2e>
   12986:	bf00      	nop
   12988:	000308a6 	.word	0x000308a6
   1298c:	0003013d 	.word	0x0003013d

00012990 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   12990:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12992:	4c09      	ldr	r4, [pc, #36]	; (129b8 <crc8_ccitt+0x28>)
   12994:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   12996:	4291      	cmp	r1, r2
   12998:	d100      	bne.n	1299c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   1299a:	bd10      	pop	{r4, pc}
		val ^= p[i];
   1299c:	f811 3b01 	ldrb.w	r3, [r1], #1
   129a0:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   129a2:	0903      	lsrs	r3, r0, #4
   129a4:	0100      	lsls	r0, r0, #4
   129a6:	5ce3      	ldrb	r3, [r4, r3]
   129a8:	b2c0      	uxtb	r0, r0
   129aa:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   129ac:	0918      	lsrs	r0, r3, #4
   129ae:	011b      	lsls	r3, r3, #4
   129b0:	5c20      	ldrb	r0, [r4, r0]
   129b2:	b2db      	uxtb	r3, r3
   129b4:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   129b6:	e7ee      	b.n	12996 <crc8_ccitt+0x6>
   129b8:	000308c9 	.word	0x000308c9

000129bc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   129bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	4681      	mov	r9, r0
   129c2:	b095      	sub	sp, #84	; 0x54
   129c4:	468b      	mov	fp, r1
   129c6:	4617      	mov	r7, r2
   129c8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   129ca:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   129cc:	7838      	ldrb	r0, [r7, #0]
   129ce:	b908      	cbnz	r0, 129d4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   129d0:	4628      	mov	r0, r5
   129d2:	e358      	b.n	13086 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   129d4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   129d6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   129d8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   129da:	d006      	beq.n	129ea <z_cbvprintf_impl+0x2e>
			OUTC('%');
   129dc:	4659      	mov	r1, fp
   129de:	47c8      	blx	r9
   129e0:	2800      	cmp	r0, #0
   129e2:	f2c0 8350 	blt.w	13086 <z_cbvprintf_impl+0x6ca>
   129e6:	3501      	adds	r5, #1
		if (bps == NULL) {
   129e8:	e1fb      	b.n	12de2 <z_cbvprintf_impl+0x426>
		} state = {
   129ea:	2218      	movs	r2, #24
   129ec:	2100      	movs	r1, #0
   129ee:	a80e      	add	r0, sp, #56	; 0x38
   129f0:	f019 f88d 	bl	2bb0e <memset>
	if (*sp == '%') {
   129f4:	787b      	ldrb	r3, [r7, #1]
   129f6:	2b25      	cmp	r3, #37	; 0x25
   129f8:	d07d      	beq.n	12af6 <z_cbvprintf_impl+0x13a>
   129fa:	2300      	movs	r3, #0
   129fc:	1c78      	adds	r0, r7, #1
   129fe:	4698      	mov	r8, r3
   12a00:	469e      	mov	lr, r3
   12a02:	469c      	mov	ip, r3
   12a04:	461e      	mov	r6, r3
   12a06:	4601      	mov	r1, r0
		switch (*sp) {
   12a08:	f810 2b01 	ldrb.w	r2, [r0], #1
   12a0c:	2a2b      	cmp	r2, #43	; 0x2b
   12a0e:	f000 80a1 	beq.w	12b54 <z_cbvprintf_impl+0x198>
   12a12:	f200 8098 	bhi.w	12b46 <z_cbvprintf_impl+0x18a>
   12a16:	2a20      	cmp	r2, #32
   12a18:	f000 809f 	beq.w	12b5a <z_cbvprintf_impl+0x19e>
   12a1c:	2a23      	cmp	r2, #35	; 0x23
   12a1e:	f000 809f 	beq.w	12b60 <z_cbvprintf_impl+0x1a4>
   12a22:	b12b      	cbz	r3, 12a30 <z_cbvprintf_impl+0x74>
   12a24:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a2c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a30:	f1b8 0f00 	cmp.w	r8, #0
   12a34:	d005      	beq.n	12a42 <z_cbvprintf_impl+0x86>
   12a36:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a3a:	f043 0320 	orr.w	r3, r3, #32
   12a3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a42:	f1be 0f00 	cmp.w	lr, #0
   12a46:	d005      	beq.n	12a54 <z_cbvprintf_impl+0x98>
   12a48:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a4c:	f043 0310 	orr.w	r3, r3, #16
   12a50:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a54:	f1bc 0f00 	cmp.w	ip, #0
   12a58:	d005      	beq.n	12a66 <z_cbvprintf_impl+0xaa>
   12a5a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a5e:	f043 0308 	orr.w	r3, r3, #8
   12a62:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a66:	b12e      	cbz	r6, 12a74 <z_cbvprintf_impl+0xb8>
   12a68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a6c:	f043 0304 	orr.w	r3, r3, #4
   12a70:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12a74:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a78:	f003 0044 	and.w	r0, r3, #68	; 0x44
   12a7c:	2844      	cmp	r0, #68	; 0x44
   12a7e:	d103      	bne.n	12a88 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12a80:	f36f 1386 	bfc	r3, #6, #1
   12a84:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12a88:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12a8c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   12a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12a92:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12a96:	d17f      	bne.n	12b98 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12a98:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12a9c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   12aa0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12aa2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   12aa6:	781a      	ldrb	r2, [r3, #0]
   12aa8:	2a2e      	cmp	r2, #46	; 0x2e
   12aaa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12aae:	bf0c      	ite	eq
   12ab0:	2101      	moveq	r1, #1
   12ab2:	2100      	movne	r1, #0
   12ab4:	f361 0241 	bfi	r2, r1, #1, #1
   12ab8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   12abc:	d178      	bne.n	12bb0 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   12abe:	785a      	ldrb	r2, [r3, #1]
   12ac0:	2a2a      	cmp	r2, #42	; 0x2a
   12ac2:	d06e      	beq.n	12ba2 <z_cbvprintf_impl+0x1e6>
	++sp;
   12ac4:	3301      	adds	r3, #1
	size_t val = 0;
   12ac6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12ac8:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12acc:	4619      	mov	r1, r3
   12ace:	f811 0b01 	ldrb.w	r0, [r1], #1
   12ad2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12ad6:	2e09      	cmp	r6, #9
   12ad8:	f240 8095 	bls.w	12c06 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12adc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12ae0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   12ae2:	f3c1 0040 	ubfx	r0, r1, #1, #1
   12ae6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   12aea:	460a      	mov	r2, r1
   12aec:	f360 0241 	bfi	r2, r0, #1, #1
   12af0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12af4:	e05c      	b.n	12bb0 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   12af6:	1cba      	adds	r2, r7, #2
   12af8:	9203      	str	r2, [sp, #12]
   12afa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   12afe:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12b02:	07da      	lsls	r2, r3, #31
   12b04:	f140 812e 	bpl.w	12d64 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   12b08:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12b0c:	f1b8 0f00 	cmp.w	r8, #0
   12b10:	da07      	bge.n	12b22 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   12b12:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12b16:	f042 0204 	orr.w	r2, r2, #4
   12b1a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   12b1e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12b22:	075e      	lsls	r6, r3, #29
   12b24:	f140 8127 	bpl.w	12d76 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   12b28:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   12b2c:	f1ba 0f00 	cmp.w	sl, #0
   12b30:	f280 8126 	bge.w	12d80 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   12b34:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12b38:	f36f 0341 	bfc	r3, #1, #1
   12b3c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   12b40:	f04f 3aff 	mov.w	sl, #4294967295
   12b44:	e11c      	b.n	12d80 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   12b46:	2a2d      	cmp	r2, #45	; 0x2d
   12b48:	d00d      	beq.n	12b66 <z_cbvprintf_impl+0x1aa>
   12b4a:	2a30      	cmp	r2, #48	; 0x30
   12b4c:	f47f af69 	bne.w	12a22 <z_cbvprintf_impl+0x66>
   12b50:	2301      	movs	r3, #1
	} while (loop);
   12b52:	e758      	b.n	12a06 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   12b54:	f04f 0c01 	mov.w	ip, #1
   12b58:	e755      	b.n	12a06 <z_cbvprintf_impl+0x4a>
   12b5a:	f04f 0e01 	mov.w	lr, #1
   12b5e:	e752      	b.n	12a06 <z_cbvprintf_impl+0x4a>
   12b60:	f04f 0801 	mov.w	r8, #1
   12b64:	e74f      	b.n	12a06 <z_cbvprintf_impl+0x4a>
   12b66:	2601      	movs	r6, #1
   12b68:	e74d      	b.n	12a06 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12b6a:	fb0e 6202 	mla	r2, lr, r2, r6
   12b6e:	3a30      	subs	r2, #48	; 0x30
   12b70:	4603      	mov	r3, r0
   12b72:	4618      	mov	r0, r3
   12b74:	f810 6b01 	ldrb.w	r6, [r0], #1
   12b78:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12b7c:	f1bc 0f09 	cmp.w	ip, #9
   12b80:	d9f3      	bls.n	12b6a <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   12b82:	4299      	cmp	r1, r3
   12b84:	d08f      	beq.n	12aa6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12b86:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   12b8a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   12b8c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12b8e:	f362 0141 	bfi	r1, r2, #1, #1
   12b92:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   12b96:	e786      	b.n	12aa6 <z_cbvprintf_impl+0xea>
   12b98:	460b      	mov	r3, r1
	size_t val = 0;
   12b9a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12b9c:	f04f 0e0a 	mov.w	lr, #10
   12ba0:	e7e7      	b.n	12b72 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   12ba2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12ba6:	f042 0204 	orr.w	r2, r2, #4
   12baa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   12bae:	3302      	adds	r3, #2
	switch (*sp) {
   12bb0:	781a      	ldrb	r2, [r3, #0]
   12bb2:	2a6c      	cmp	r2, #108	; 0x6c
   12bb4:	d047      	beq.n	12c46 <z_cbvprintf_impl+0x28a>
   12bb6:	d82b      	bhi.n	12c10 <z_cbvprintf_impl+0x254>
   12bb8:	2a68      	cmp	r2, #104	; 0x68
   12bba:	d031      	beq.n	12c20 <z_cbvprintf_impl+0x264>
   12bbc:	2a6a      	cmp	r2, #106	; 0x6a
   12bbe:	d04b      	beq.n	12c58 <z_cbvprintf_impl+0x29c>
   12bc0:	2a4c      	cmp	r2, #76	; 0x4c
   12bc2:	d051      	beq.n	12c68 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   12bc4:	461a      	mov	r2, r3
   12bc6:	f812 3b01 	ldrb.w	r3, [r2], #1
   12bca:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   12bcc:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   12bd2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   12bd6:	f200 80be 	bhi.w	12d56 <z_cbvprintf_impl+0x39a>
   12bda:	2b6d      	cmp	r3, #109	; 0x6d
   12bdc:	d851      	bhi.n	12c82 <z_cbvprintf_impl+0x2c6>
   12bde:	2b69      	cmp	r3, #105	; 0x69
   12be0:	f200 80b9 	bhi.w	12d56 <z_cbvprintf_impl+0x39a>
   12be4:	2b57      	cmp	r3, #87	; 0x57
   12be6:	d867      	bhi.n	12cb8 <z_cbvprintf_impl+0x2fc>
   12be8:	2b41      	cmp	r3, #65	; 0x41
   12bea:	d003      	beq.n	12bf4 <z_cbvprintf_impl+0x238>
   12bec:	3b45      	subs	r3, #69	; 0x45
   12bee:	2b02      	cmp	r3, #2
   12bf0:	f200 80b1 	bhi.w	12d56 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12bf4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12bf8:	2204      	movs	r2, #4
   12bfa:	f362 0302 	bfi	r3, r2, #0, #3
   12bfe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12c02:	2301      	movs	r3, #1
			break;
   12c04:	e073      	b.n	12cee <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   12c06:	fb0c 0202 	mla	r2, ip, r2, r0
   12c0a:	3a30      	subs	r2, #48	; 0x30
   12c0c:	460b      	mov	r3, r1
   12c0e:	e75d      	b.n	12acc <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12c10:	2a74      	cmp	r2, #116	; 0x74
   12c12:	d025      	beq.n	12c60 <z_cbvprintf_impl+0x2a4>
   12c14:	2a7a      	cmp	r2, #122	; 0x7a
   12c16:	d1d5      	bne.n	12bc4 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   12c18:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c1c:	2106      	movs	r1, #6
   12c1e:	e00c      	b.n	12c3a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12c20:	785a      	ldrb	r2, [r3, #1]
   12c22:	2a68      	cmp	r2, #104	; 0x68
   12c24:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c28:	d106      	bne.n	12c38 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   12c2a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12c2c:	f361 02c6 	bfi	r2, r1, #3, #4
   12c30:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   12c34:	3302      	adds	r3, #2
   12c36:	e7c5      	b.n	12bc4 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   12c38:	2102      	movs	r1, #2
   12c3a:	f361 02c6 	bfi	r2, r1, #3, #4
   12c3e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   12c42:	3301      	adds	r3, #1
   12c44:	e7be      	b.n	12bc4 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   12c46:	785a      	ldrb	r2, [r3, #1]
   12c48:	2a6c      	cmp	r2, #108	; 0x6c
   12c4a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c4e:	d101      	bne.n	12c54 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12c50:	2104      	movs	r1, #4
   12c52:	e7eb      	b.n	12c2c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   12c54:	2103      	movs	r1, #3
   12c56:	e7f0      	b.n	12c3a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12c58:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c5c:	2105      	movs	r1, #5
   12c5e:	e7ec      	b.n	12c3a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12c60:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c64:	2107      	movs	r1, #7
   12c66:	e7e8      	b.n	12c3a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12c68:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12c6c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12c70:	f022 0202 	bic.w	r2, r2, #2
   12c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12c78:	f042 0202 	orr.w	r2, r2, #2
   12c7c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12c80:	e7df      	b.n	12c42 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   12c82:	3b6e      	subs	r3, #110	; 0x6e
   12c84:	b2d9      	uxtb	r1, r3
   12c86:	2301      	movs	r3, #1
   12c88:	408b      	lsls	r3, r1
   12c8a:	f240 4182 	movw	r1, #1154	; 0x482
   12c8e:	420b      	tst	r3, r1
   12c90:	d137      	bne.n	12d02 <z_cbvprintf_impl+0x346>
   12c92:	f013 0f24 	tst.w	r3, #36	; 0x24
   12c96:	d151      	bne.n	12d3c <z_cbvprintf_impl+0x380>
   12c98:	07d8      	lsls	r0, r3, #31
   12c9a:	d55c      	bpl.n	12d56 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   12c9c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12ca0:	2103      	movs	r1, #3
   12ca2:	f361 0302 	bfi	r3, r1, #0, #3
   12ca6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12caa:	f002 0378 	and.w	r3, r2, #120	; 0x78
   12cae:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   12cb2:	424b      	negs	r3, r1
   12cb4:	414b      	adcs	r3, r1
   12cb6:	e01a      	b.n	12cee <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12cb8:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   12cbc:	b2c9      	uxtb	r1, r1
   12cbe:	2001      	movs	r0, #1
   12cc0:	fa00 f101 	lsl.w	r1, r0, r1
   12cc4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12cc8:	d194      	bne.n	12bf4 <z_cbvprintf_impl+0x238>
   12cca:	f640 0601 	movw	r6, #2049	; 0x801
   12cce:	4231      	tst	r1, r6
   12cd0:	d11d      	bne.n	12d0e <z_cbvprintf_impl+0x352>
   12cd2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12cd6:	d03e      	beq.n	12d56 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12cd8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12cdc:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12ce0:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12ce4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   12ce6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12cea:	d034      	beq.n	12d56 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12cec:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12cee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12cf2:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12cf6:	430b      	orrs	r3, r1
   12cf8:	f363 0241 	bfi	r2, r3, #1, #1
   12cfc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12d00:	e6fd      	b.n	12afe <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12d02:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12d06:	2102      	movs	r1, #2
   12d08:	f361 0302 	bfi	r3, r1, #0, #3
   12d0c:	e7e8      	b.n	12ce0 <z_cbvprintf_impl+0x324>
   12d0e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   12d12:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12d14:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12d18:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12d1c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12d1e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   12d22:	bf02      	ittt	eq
   12d24:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   12d28:	f041 0101 	orreq.w	r1, r1, #1
   12d2c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12d30:	2b63      	cmp	r3, #99	; 0x63
   12d32:	d1db      	bne.n	12cec <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12d34:	1e13      	subs	r3, r2, #0
   12d36:	bf18      	it	ne
   12d38:	2301      	movne	r3, #1
   12d3a:	e7d8      	b.n	12cee <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12d3c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12d40:	2103      	movs	r1, #3
   12d42:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12d46:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12d4a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12d4e:	bf14      	ite	ne
   12d50:	2301      	movne	r3, #1
   12d52:	2300      	moveq	r3, #0
   12d54:	e7cb      	b.n	12cee <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   12d56:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12d5a:	f043 0301 	orr.w	r3, r3, #1
   12d5e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   12d62:	e7c3      	b.n	12cec <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   12d64:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12d68:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12d6a:	bfb4      	ite	lt
   12d6c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12d70:	f04f 38ff 	movge.w	r8, #4294967295
   12d74:	e6d5      	b.n	12b22 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   12d76:	0798      	lsls	r0, r3, #30
   12d78:	f57f aee2 	bpl.w	12b40 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   12d7c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   12d80:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   12d84:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12d86:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   12d8a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   12d8e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12d92:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12d94:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12d98:	d133      	bne.n	12e02 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   12d9a:	1ecb      	subs	r3, r1, #3
   12d9c:	2b04      	cmp	r3, #4
   12d9e:	d804      	bhi.n	12daa <z_cbvprintf_impl+0x3ee>
   12da0:	e8df f003 	tbb	[pc, r3]
   12da4:	21464621 	.word	0x21464621
   12da8:	21          	.byte	0x21
   12da9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12daa:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   12dac:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   12dae:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12db2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12db6:	d11c      	bne.n	12df2 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   12db8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   12dbc:	17da      	asrs	r2, r3, #31
   12dbe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   12dc2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   12dc4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12dc8:	f013 0603 	ands.w	r6, r3, #3
   12dcc:	d050      	beq.n	12e70 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   12dce:	9b03      	ldr	r3, [sp, #12]
   12dd0:	463a      	mov	r2, r7
   12dd2:	4659      	mov	r1, fp
   12dd4:	4648      	mov	r0, r9
   12dd6:	f017 fe9b 	bl	2ab10 <outs>
   12dda:	2800      	cmp	r0, #0
   12ddc:	f2c0 8153 	blt.w	13086 <z_cbvprintf_impl+0x6ca>
   12de0:	4405      	add	r5, r0
			continue;
   12de2:	9f03      	ldr	r7, [sp, #12]
   12de4:	e5f2      	b.n	129cc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12de6:	f854 3b04 	ldr.w	r3, [r4], #4
   12dea:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12dec:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12df0:	e7e8      	b.n	12dc4 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   12df2:	2902      	cmp	r1, #2
   12df4:	d1e5      	bne.n	12dc2 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   12df6:	b21a      	sxth	r2, r3
   12df8:	f343 33c0 	sbfx	r3, r3, #15, #1
   12dfc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12e00:	e7df      	b.n	12dc2 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12e02:	2b02      	cmp	r3, #2
   12e04:	d124      	bne.n	12e50 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   12e06:	1ecb      	subs	r3, r1, #3
   12e08:	2b04      	cmp	r3, #4
   12e0a:	d804      	bhi.n	12e16 <z_cbvprintf_impl+0x45a>
   12e0c:	e8df f003 	tbb	[pc, r3]
   12e10:	18101018 	.word	0x18101018
   12e14:	18          	.byte	0x18
   12e15:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   12e16:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   12e18:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12e1c:	f04f 0200 	mov.w	r2, #0
   12e20:	d014      	beq.n	12e4c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   12e22:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   12e24:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   12e28:	d1cc      	bne.n	12dc4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   12e2a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12e2c:	930e      	str	r3, [sp, #56]	; 0x38
   12e2e:	e7c9      	b.n	12dc4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   12e30:	3407      	adds	r4, #7
   12e32:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   12e36:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12e3a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12e3e:	e7c1      	b.n	12dc4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   12e40:	f854 3b04 	ldr.w	r3, [r4], #4
   12e44:	930e      	str	r3, [sp, #56]	; 0x38
   12e46:	2300      	movs	r3, #0
   12e48:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   12e4a:	e7bb      	b.n	12dc4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12e4c:	b2db      	uxtb	r3, r3
   12e4e:	e7cd      	b.n	12dec <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12e50:	2b04      	cmp	r3, #4
   12e52:	d108      	bne.n	12e66 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   12e54:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12e56:	f024 0407 	bic.w	r4, r4, #7
   12e5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   12e5e:	3408      	adds	r4, #8
   12e60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12e64:	e7ae      	b.n	12dc4 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12e66:	2b03      	cmp	r3, #3
   12e68:	d1ac      	bne.n	12dc4 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   12e6a:	f854 3b04 	ldr.w	r3, [r4], #4
   12e6e:	e7dd      	b.n	12e2c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12e70:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12e74:	2878      	cmp	r0, #120	; 0x78
   12e76:	d8b4      	bhi.n	12de2 <z_cbvprintf_impl+0x426>
   12e78:	2862      	cmp	r0, #98	; 0x62
   12e7a:	d81c      	bhi.n	12eb6 <z_cbvprintf_impl+0x4fa>
   12e7c:	2825      	cmp	r0, #37	; 0x25
   12e7e:	f43f adad 	beq.w	129dc <z_cbvprintf_impl+0x20>
   12e82:	2858      	cmp	r0, #88	; 0x58
   12e84:	d1ad      	bne.n	12de2 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12e86:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12e8a:	9300      	str	r3, [sp, #0]
   12e8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12e90:	ab08      	add	r3, sp, #32
   12e92:	aa10      	add	r2, sp, #64	; 0x40
   12e94:	f017 fdf6 	bl	2aa84 <encode_uint>
			if (precision >= 0) {
   12e98:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   12e9c:	4607      	mov	r7, r0
			if (precision >= 0) {
   12e9e:	f280 809a 	bge.w	12fd6 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   12ea2:	2f00      	cmp	r7, #0
   12ea4:	d09d      	beq.n	12de2 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12ea6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12eaa:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   12eac:	2e00      	cmp	r6, #0
   12eae:	f000 80c1 	beq.w	13034 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   12eb2:	3001      	adds	r0, #1
   12eb4:	e0be      	b.n	13034 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   12eb6:	3863      	subs	r0, #99	; 0x63
   12eb8:	2815      	cmp	r0, #21
   12eba:	d892      	bhi.n	12de2 <z_cbvprintf_impl+0x426>
   12ebc:	a201      	add	r2, pc, #4	; (adr r2, 12ec4 <z_cbvprintf_impl+0x508>)
   12ebe:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12ec2:	bf00      	nop
   12ec4:	00012f99 	.word	0x00012f99
   12ec8:	00012fab 	.word	0x00012fab
   12ecc:	00012de3 	.word	0x00012de3
   12ed0:	00012de3 	.word	0x00012de3
   12ed4:	00012de3 	.word	0x00012de3
   12ed8:	00012de3 	.word	0x00012de3
   12edc:	00012fab 	.word	0x00012fab
   12ee0:	00012de3 	.word	0x00012de3
   12ee4:	00012de3 	.word	0x00012de3
   12ee8:	00012de3 	.word	0x00012de3
   12eec:	00012de3 	.word	0x00012de3
   12ef0:	00013039 	.word	0x00013039
   12ef4:	00012fd1 	.word	0x00012fd1
   12ef8:	00012ff7 	.word	0x00012ff7
   12efc:	00012de3 	.word	0x00012de3
   12f00:	00012de3 	.word	0x00012de3
   12f04:	00012f1d 	.word	0x00012f1d
   12f08:	00012de3 	.word	0x00012de3
   12f0c:	00012fd1 	.word	0x00012fd1
   12f10:	00012de3 	.word	0x00012de3
   12f14:	00012de3 	.word	0x00012de3
   12f18:	00012fd1 	.word	0x00012fd1
			if (precision >= 0) {
   12f1c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12f20:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   12f22:	db35      	blt.n	12f90 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   12f24:	4651      	mov	r1, sl
   12f26:	4638      	mov	r0, r7
   12f28:	f018 fd96 	bl	2ba58 <strnlen>
			bpe = bps + len;
   12f2c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12f30:	2f00      	cmp	r7, #0
   12f32:	f43f af56 	beq.w	12de2 <z_cbvprintf_impl+0x426>
		char sign = 0;
   12f36:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12f38:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12f3c:	f013 0210 	ands.w	r2, r3, #16
   12f40:	9205      	str	r2, [sp, #20]
   12f42:	f000 8093 	beq.w	1306c <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   12f46:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12f48:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12f4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12f4c:	bf48      	it	mi
   12f4e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12f50:	9204      	str	r2, [sp, #16]
   12f52:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   12f54:	bf48      	it	mi
   12f56:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12f58:	f1b8 0f00 	cmp.w	r8, #0
   12f5c:	f340 80a0 	ble.w	130a0 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12f60:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   12f64:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12f68:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12f6c:	0750      	lsls	r0, r2, #29
   12f6e:	9306      	str	r3, [sp, #24]
   12f70:	f100 8096 	bmi.w	130a0 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12f74:	0651      	lsls	r1, r2, #25
   12f76:	f140 8089 	bpl.w	1308c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   12f7a:	b13e      	cbz	r6, 12f8c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   12f7c:	4659      	mov	r1, fp
   12f7e:	4630      	mov	r0, r6
   12f80:	47c8      	blx	r9
   12f82:	2800      	cmp	r0, #0
   12f84:	db7f      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   12f86:	9b06      	ldr	r3, [sp, #24]
   12f88:	3501      	adds	r5, #1
   12f8a:	461e      	mov	r6, r3
					pad = '0';
   12f8c:	2230      	movs	r2, #48	; 0x30
   12f8e:	e07e      	b.n	1308e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12f90:	4638      	mov	r0, r7
   12f92:	f018 fd5a 	bl	2ba4a <strlen>
   12f96:	e7c9      	b.n	12f2c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f9a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   12f9e:	2600      	movs	r6, #0
			bps = buf;
   12fa0:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12fa2:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12fa6:	2001      	movs	r0, #1
   12fa8:	e7c6      	b.n	12f38 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   12faa:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   12fac:	bf5c      	itt	pl
   12fae:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12fb2:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12fb4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12fb8:	bf48      	it	mi
   12fba:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   12fbc:	2b00      	cmp	r3, #0
   12fbe:	f6bf af62 	bge.w	12e86 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12fc2:	4252      	negs	r2, r2
   12fc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12fc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   12fcc:	262d      	movs	r6, #45	; 0x2d
   12fce:	e75a      	b.n	12e86 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12fd0:	2600      	movs	r6, #0
   12fd2:	e758      	b.n	12e86 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12fd4:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12fd6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12fda:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12fde:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12fe0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12fe4:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12fe6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12fea:	f67f af5a 	bls.w	12ea2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12fee:	ebaa 0303 	sub.w	r3, sl, r3
   12ff2:	9311      	str	r3, [sp, #68]	; 0x44
   12ff4:	e755      	b.n	12ea2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12ff6:	980e      	ldr	r0, [sp, #56]	; 0x38
   12ff8:	b390      	cbz	r0, 13060 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12ffa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12ffe:	9300      	str	r3, [sp, #0]
   13000:	aa10      	add	r2, sp, #64	; 0x40
   13002:	ab08      	add	r3, sp, #32
   13004:	2100      	movs	r1, #0
   13006:	f017 fd3d 	bl	2aa84 <encode_uint>
				conv->altform_0c = true;
   1300a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   1300e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13012:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13016:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   1301a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1301e:	4607      	mov	r7, r0
				conv->altform_0c = true;
   13020:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   13024:	dad6      	bge.n	12fd4 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   13026:	2800      	cmp	r0, #0
   13028:	f43f aedb 	beq.w	12de2 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   1302c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   13030:	1a18      	subs	r0, r3, r0
		char sign = 0;
   13032:	2600      	movs	r6, #0
   13034:	469a      	mov	sl, r3
   13036:	e77f      	b.n	12f38 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   13038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   1303a:	2907      	cmp	r1, #7
   1303c:	f63f aed1 	bhi.w	12de2 <z_cbvprintf_impl+0x426>
   13040:	e8df f001 	tbb	[pc, r1]
   13044:	0c06040c 	.word	0x0c06040c
   13048:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1304c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1304e:	e6c8      	b.n	12de2 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   13050:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   13052:	e6c6      	b.n	12de2 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   13054:	17ea      	asrs	r2, r5, #31
   13056:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   1305a:	e6c2      	b.n	12de2 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1305c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1305e:	e6c0      	b.n	12de2 <z_cbvprintf_impl+0x426>
   13060:	4f2e      	ldr	r7, [pc, #184]	; (1311c <z_cbvprintf_impl+0x760>)
		char sign = 0;
   13062:	4606      	mov	r6, r0
			bpe = bps + 5;
   13064:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   13068:	2005      	movs	r0, #5
   1306a:	e765      	b.n	12f38 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   1306c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1306e:	bf48      	it	mi
   13070:	3001      	addmi	r0, #1
   13072:	e769      	b.n	12f48 <z_cbvprintf_impl+0x58c>
   13074:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   13076:	4610      	mov	r0, r2
   13078:	9206      	str	r2, [sp, #24]
   1307a:	4659      	mov	r1, fp
   1307c:	47c8      	blx	r9
   1307e:	2800      	cmp	r0, #0
   13080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13084:	da04      	bge.n	13090 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   13086:	b015      	add	sp, #84	; 0x54
   13088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1308c:	2220      	movs	r2, #32
					pad = '0';
   1308e:	4643      	mov	r3, r8
				while (width-- > 0) {
   13090:	4619      	mov	r1, r3
   13092:	2900      	cmp	r1, #0
   13094:	f103 33ff 	add.w	r3, r3, #4294967295
   13098:	dcec      	bgt.n	13074 <z_cbvprintf_impl+0x6b8>
   1309a:	4445      	add	r5, r8
   1309c:	1a6d      	subs	r5, r5, r1
   1309e:	4698      	mov	r8, r3
		if (sign != 0) {
   130a0:	b12e      	cbz	r6, 130ae <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   130a2:	4659      	mov	r1, fp
   130a4:	4630      	mov	r0, r6
   130a6:	47c8      	blx	r9
   130a8:	2800      	cmp	r0, #0
   130aa:	dbec      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   130ac:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   130ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   130b2:	06da      	lsls	r2, r3, #27
   130b4:	d401      	bmi.n	130ba <z_cbvprintf_impl+0x6fe>
   130b6:	071b      	lsls	r3, r3, #28
   130b8:	d505      	bpl.n	130c6 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   130ba:	4659      	mov	r1, fp
   130bc:	2030      	movs	r0, #48	; 0x30
   130be:	47c8      	blx	r9
   130c0:	2800      	cmp	r0, #0
   130c2:	dbe0      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   130c4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   130c6:	9b05      	ldr	r3, [sp, #20]
   130c8:	b133      	cbz	r3, 130d8 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   130ca:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   130ce:	4659      	mov	r1, fp
   130d0:	47c8      	blx	r9
   130d2:	2800      	cmp	r0, #0
   130d4:	dbd7      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   130d6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   130d8:	9e04      	ldr	r6, [sp, #16]
   130da:	442e      	add	r6, r5
   130dc:	e005      	b.n	130ea <z_cbvprintf_impl+0x72e>
				OUTC('0');
   130de:	4659      	mov	r1, fp
   130e0:	2030      	movs	r0, #48	; 0x30
   130e2:	47c8      	blx	r9
   130e4:	2800      	cmp	r0, #0
   130e6:	dbce      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   130e8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   130ea:	1b73      	subs	r3, r6, r5
   130ec:	2b00      	cmp	r3, #0
   130ee:	dcf6      	bgt.n	130de <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   130f0:	4653      	mov	r3, sl
   130f2:	463a      	mov	r2, r7
   130f4:	4659      	mov	r1, fp
   130f6:	4648      	mov	r0, r9
   130f8:	f017 fd0a 	bl	2ab10 <outs>
   130fc:	2800      	cmp	r0, #0
   130fe:	dbc2      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   13100:	4405      	add	r5, r0
		while (width > 0) {
   13102:	44a8      	add	r8, r5
   13104:	eba8 0305 	sub.w	r3, r8, r5
   13108:	2b00      	cmp	r3, #0
   1310a:	f77f ae6a 	ble.w	12de2 <z_cbvprintf_impl+0x426>
			OUTC(' ');
   1310e:	4659      	mov	r1, fp
   13110:	2020      	movs	r0, #32
   13112:	47c8      	blx	r9
   13114:	2800      	cmp	r0, #0
   13116:	dbb6      	blt.n	13086 <z_cbvprintf_impl+0x6ca>
   13118:	3501      	adds	r5, #1
			--width;
   1311a:	e7f3      	b.n	13104 <z_cbvprintf_impl+0x748>
   1311c:	000308d9 	.word	0x000308d9

00013120 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13120:	b508      	push	{r3, lr}
	__asm__ volatile(
   13122:	f04f 0240 	mov.w	r2, #64	; 0x40
   13126:	f3ef 8311 	mrs	r3, BASEPRI
   1312a:	f382 8812 	msr	BASEPRI_MAX, r2
   1312e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   13132:	f002 fad7 	bl	156e4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13136:	4803      	ldr	r0, [pc, #12]	; (13144 <sys_reboot+0x24>)
   13138:	f017 fb00 	bl	2a73c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1313c:	f001 fd30 	bl	14ba0 <arch_cpu_idle>
   13140:	e7fc      	b.n	1313c <sys_reboot+0x1c>
   13142:	bf00      	nop
   13144:	000308df 	.word	0x000308df

00013148 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13148:	f00f bd2a 	b.w	22ba0 <SystemInit>

0001314c <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   1314c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13150:	f8df 9098 	ldr.w	r9, [pc, #152]	; 131ec <z_log_minimal_hexdump_print+0xa0>
   13154:	4680      	mov	r8, r0
   13156:	460f      	mov	r7, r1
   13158:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   1315a:	4614      	mov	r4, r2
   1315c:	19bd      	adds	r5, r7, r6
   1315e:	1b2d      	subs	r5, r5, r4
   13160:	b90c      	cbnz	r4, 13166 <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   13162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   13166:	f108 33ff 	add.w	r3, r8, #4294967295
   1316a:	2b03      	cmp	r3, #3
   1316c:	bf98      	it	ls
   1316e:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   13172:	481f      	ldr	r0, [pc, #124]	; (131f0 <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13174:	f8df a07c 	ldr.w	sl, [pc, #124]	; 131f4 <z_log_minimal_hexdump_print+0xa8>
   13178:	bf88      	it	hi
   1317a:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   1317c:	f017 fade 	bl	2a73c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13180:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   13184:	455c      	cmp	r4, fp
   13186:	d928      	bls.n	131da <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13188:	f815 100b 	ldrb.w	r1, [r5, fp]
   1318c:	4650      	mov	r0, sl
   1318e:	f017 fad5 	bl	2a73c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13192:	f10b 0b01 	add.w	fp, fp, #1
   13196:	f1bb 0f08 	cmp.w	fp, #8
   1319a:	d1f3      	bne.n	13184 <z_log_minimal_hexdump_print+0x38>
	printk("|");
   1319c:	4816      	ldr	r0, [pc, #88]	; (131f8 <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
   1319e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 131fc <z_log_minimal_hexdump_print+0xb0>
	printk("|");
   131a2:	f017 facb 	bl	2a73c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   131a6:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
   131aa:	4554      	cmp	r4, sl
   131ac:	d919      	bls.n	131e2 <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   131ae:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
   131b2:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   131b6:	2a5f      	cmp	r2, #95	; 0x5f
   131b8:	bf28      	it	cs
   131ba:	212e      	movcs	r1, #46	; 0x2e
   131bc:	4658      	mov	r0, fp
   131be:	f017 fabd 	bl	2a73c <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   131c2:	f10a 0a01 	add.w	sl, sl, #1
   131c6:	f1ba 0f08 	cmp.w	sl, #8
   131ca:	d1ee      	bne.n	131aa <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
   131cc:	480c      	ldr	r0, [pc, #48]	; (13200 <z_log_minimal_hexdump_print+0xb4>)
   131ce:	f017 fab5 	bl	2a73c <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   131d2:	2c07      	cmp	r4, #7
   131d4:	d9c5      	bls.n	13162 <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
   131d6:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   131d8:	e7c0      	b.n	1315c <z_log_minimal_hexdump_print+0x10>
			printk("   ");
   131da:	480a      	ldr	r0, [pc, #40]	; (13204 <z_log_minimal_hexdump_print+0xb8>)
   131dc:	f017 faae 	bl	2a73c <printk>
   131e0:	e7d7      	b.n	13192 <z_log_minimal_hexdump_print+0x46>
			printk(" ");
   131e2:	4809      	ldr	r0, [pc, #36]	; (13208 <z_log_minimal_hexdump_print+0xbc>)
   131e4:	f017 faaa 	bl	2a73c <printk>
   131e8:	e7eb      	b.n	131c2 <z_log_minimal_hexdump_print+0x76>
   131ea:	bf00      	nop
   131ec:	0003091c 	.word	0x0003091c
   131f0:	00030908 	.word	0x00030908
   131f4:	0003090d 	.word	0x0003090d
   131f8:	00030917 	.word	0x00030917
   131fc:	00030919 	.word	0x00030919
   13200:	00033f1b 	.word	0x00033f1b
   13204:	00030913 	.word	0x00030913
   13208:	00030915 	.word	0x00030915

0001320c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   1320c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13210:	460f      	mov	r7, r1
   13212:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13214:	2108      	movs	r1, #8
   13216:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   13218:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1326c <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1321c:	f017 fd3e 	bl	2ac9c <nvs_al_size.isra.0>
	*addr -= ate_size;
   13220:	683c      	ldr	r4, [r7, #0]
   13222:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13224:	4680      	mov	r8, r0
	*addr -= ate_size;
   13226:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   13228:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   1322c:	42ac      	cmp	r4, r5
   1322e:	d803      	bhi.n	13238 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   13230:	2000      	movs	r0, #0
}
   13232:	b003      	add	sp, #12
   13234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13238:	2308      	movs	r3, #8
   1323a:	466a      	mov	r2, sp
   1323c:	4621      	mov	r1, r4
   1323e:	4630      	mov	r0, r6
   13240:	f017 fc9f 	bl	2ab82 <nvs_flash_rd>
		if (rc) {
   13244:	2800      	cmp	r0, #0
   13246:	d1f4      	bne.n	13232 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   13248:	4669      	mov	r1, sp
   1324a:	4630      	mov	r0, r6
   1324c:	f017 fd30 	bl	2acb0 <nvs_ate_valid>
   13250:	b140      	cbz	r0, 13264 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   13252:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13256:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   1325a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   1325c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   13260:	4413      	add	r3, r2
   13262:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13264:	eba4 0408 	sub.w	r4, r4, r8
   13268:	e7e0      	b.n	1322c <nvs_recover_last_ate+0x20>
   1326a:	bf00      	nop
   1326c:	ffff0000 	.word	0xffff0000

00013270 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   13270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13274:	4604      	mov	r4, r0
   13276:	b088      	sub	sp, #32

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13278:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   1327c:	4638      	mov	r0, r7
   1327e:	f01b fc74 	bl	2eb6a <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   13282:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   13284:	6883      	ldr	r3, [r0, #8]
   13286:	68db      	ldr	r3, [r3, #12]
   13288:	4798      	blx	r3
   1328a:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1328c:	b948      	cbnz	r0, 132a2 <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   1328e:	48ac      	ldr	r0, [pc, #688]	; (13540 <nvs_mount+0x2d0>)
   13290:	2145      	movs	r1, #69	; 0x45

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   13292:	f017 fc69 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   13296:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1329a:	4628      	mov	r0, r5
   1329c:	b008      	add	sp, #32
   1329e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   132a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   132a4:	6883      	ldr	r3, [r0, #8]
   132a6:	68db      	ldr	r3, [r3, #12]
   132a8:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   132aa:	6803      	ldr	r3, [r0, #0]
   132ac:	3b01      	subs	r3, #1
   132ae:	2b1f      	cmp	r3, #31
   132b0:	d902      	bls.n	132b8 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   132b2:	48a4      	ldr	r0, [pc, #656]	; (13544 <nvs_mount+0x2d4>)
   132b4:	2145      	movs	r1, #69	; 0x45
   132b6:	e7ec      	b.n	13292 <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   132b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   132ba:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   132bc:	aa05      	add	r2, sp, #20
   132be:	f01a ff5c 	bl	2e17a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   132c2:	b110      	cbz	r0, 132ca <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   132c4:	48a0      	ldr	r0, [pc, #640]	; (13548 <nvs_mount+0x2d8>)
   132c6:	2145      	movs	r1, #69	; 0x45
   132c8:	e7e3      	b.n	13292 <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   132ca:	89a5      	ldrh	r5, [r4, #12]
   132cc:	b12d      	cbz	r5, 132da <nvs_mount+0x6a>
   132ce:	9b06      	ldr	r3, [sp, #24]
   132d0:	fbb5 f2f3 	udiv	r2, r5, r3
   132d4:	fb03 5512 	mls	r5, r3, r2, r5
   132d8:	b115      	cbz	r5, 132e0 <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   132da:	489c      	ldr	r0, [pc, #624]	; (1354c <nvs_mount+0x2dc>)
   132dc:	2145      	movs	r1, #69	; 0x45
   132de:	e7d8      	b.n	13292 <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   132e0:	89e3      	ldrh	r3, [r4, #14]
   132e2:	2b01      	cmp	r3, #1
   132e4:	d802      	bhi.n	132ec <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   132e6:	489a      	ldr	r0, [pc, #616]	; (13550 <nvs_mount+0x2e0>)
   132e8:	2145      	movs	r1, #69	; 0x45
   132ea:	e7d2      	b.n	13292 <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   132ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   132ee:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   132f0:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   132f4:	f04f 33ff 	mov.w	r3, #4294967295
   132f8:	f04f 32ff 	mov.w	r2, #4294967295
   132fc:	4638      	mov	r0, r7
   132fe:	f011 fafb 	bl	248f8 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13302:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   13304:	2108      	movs	r1, #8
   13306:	f017 fcc9 	bl	2ac9c <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   1330a:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1330c:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   1330e:	89e3      	ldrh	r3, [r4, #14]
   13310:	fa1f fa85 	uxth.w	sl, r5
   13314:	4553      	cmp	r3, sl
   13316:	d808      	bhi.n	1332a <nvs_mount+0xba>
	if (closed_sectors == fs->sector_count) {
   13318:	89e3      	ldrh	r3, [r4, #14]
   1331a:	4543      	cmp	r3, r8
   1331c:	d123      	bne.n	13366 <nvs_mount+0xf6>
	return z_impl_k_mutex_unlock(mutex);
   1331e:	4638      	mov	r0, r7
   13320:	f011 fba0 	bl	24a64 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   13324:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   13328:	e7b7      	b.n	1329a <nvs_mount+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
   1332a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   1332c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   1332e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   13330:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13334:	464a      	mov	r2, r9
   13336:	2308      	movs	r3, #8
   13338:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   1333a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1333c:	f017 fc66 	bl	2ac0c <nvs_flash_cmp_const>
		if (rc) {
   13340:	b178      	cbz	r0, 13362 <nvs_mount+0xf2>
			nvs_sector_advance(fs, &addr);
   13342:	4669      	mov	r1, sp
   13344:	4620      	mov	r0, r4
   13346:	f017 fc2a 	bl	2ab9e <nvs_sector_advance>
			closed_sectors++;
   1334a:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1334e:	9900      	ldr	r1, [sp, #0]
   13350:	2308      	movs	r3, #8
   13352:	464a      	mov	r2, r9
   13354:	4620      	mov	r0, r4
			closed_sectors++;
   13356:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1335a:	f017 fc57 	bl	2ac0c <nvs_flash_cmp_const>
			if (!rc) {
   1335e:	2800      	cmp	r0, #0
   13360:	d0da      	beq.n	13318 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   13362:	3501      	adds	r5, #1
   13364:	e7d3      	b.n	1330e <nvs_mount+0x9e>
	if (i == fs->sector_count) {
   13366:	4553      	cmp	r3, sl
   13368:	d10b      	bne.n	13382 <nvs_mount+0x112>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1336a:	9900      	ldr	r1, [sp, #0]
   1336c:	2308      	movs	r3, #8
   1336e:	464a      	mov	r2, r9
   13370:	1b89      	subs	r1, r1, r6
   13372:	4620      	mov	r0, r4
   13374:	f017 fc4a 	bl	2ac0c <nvs_flash_cmp_const>
		if (!rc) {
   13378:	b918      	cbnz	r0, 13382 <nvs_mount+0x112>
			nvs_sector_advance(fs, &addr);
   1337a:	4669      	mov	r1, sp
   1337c:	4620      	mov	r0, r4
   1337e:	f017 fc0e 	bl	2ab9e <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   13382:	4669      	mov	r1, sp
   13384:	4620      	mov	r0, r4
   13386:	f7ff ff41 	bl	1320c <nvs_recover_last_ate>
	if (rc) {
   1338a:	4605      	mov	r5, r0
   1338c:	b118      	cbz	r0, 13396 <nvs_mount+0x126>
   1338e:	4638      	mov	r0, r7
   13390:	f011 fb68 	bl	24a64 <z_impl_k_mutex_unlock>
	if (rc) {
   13394:	e781      	b.n	1329a <nvs_mount+0x2a>
	fs->ate_wra = addr;
   13396:	9b00      	ldr	r3, [sp, #0]
   13398:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1339a:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1339e:	ea4f 4808 	mov.w	r8, r8, lsl #16
   133a2:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   133a6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   133aa:	4299      	cmp	r1, r3
   133ac:	d30f      	bcc.n	133ce <nvs_mount+0x15e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   133ae:	2308      	movs	r3, #8
   133b0:	aa01      	add	r2, sp, #4
   133b2:	4620      	mov	r0, r4
   133b4:	f017 fbe5 	bl	2ab82 <nvs_flash_rd>
		if (rc) {
   133b8:	4605      	mov	r5, r0
   133ba:	2800      	cmp	r0, #0
   133bc:	d1e7      	bne.n	1338e <nvs_mount+0x11e>
   133be:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   133c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   133c4:	4591      	cmp	r9, r2
   133c6:	d13c      	bne.n	13442 <nvs_mount+0x1d2>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   133c8:	3501      	adds	r5, #1
   133ca:	2d08      	cmp	r5, #8
   133cc:	d1f8      	bne.n	133c0 <nvs_mount+0x150>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   133ce:	6863      	ldr	r3, [r4, #4]
   133d0:	0c1b      	lsrs	r3, r3, #16
   133d2:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   133d4:	4669      	mov	r1, sp
   133d6:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   133d8:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   133da:	f017 fbe0 	bl	2ab9e <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   133de:	89a3      	ldrh	r3, [r4, #12]
   133e0:	9900      	ldr	r1, [sp, #0]
   133e2:	464a      	mov	r2, r9
   133e4:	4620      	mov	r0, r4
   133e6:	f017 fc11 	bl	2ac0c <nvs_flash_cmp_const>
	if (rc < 0) {
   133ea:	1e05      	subs	r5, r0, #0
   133ec:	dbcf      	blt.n	1338e <nvs_mount+0x11e>
		addr = fs->ate_wra + ate_size;
   133ee:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   133f0:	d069      	beq.n	134c6 <nvs_mount+0x256>
		addr = fs->ate_wra + ate_size;
   133f2:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   133f6:	f64f 79ff 	movw	r9, #65535	; 0xffff
   133fa:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   133fc:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   13400:	fa1f f288 	uxth.w	r2, r8
   13404:	1b9b      	subs	r3, r3, r6
   13406:	429a      	cmp	r2, r3
   13408:	d337      	bcc.n	1347a <nvs_mount+0x20a>
		LOG_INF("No GC Done marker found: restarting gc");
   1340a:	4852      	ldr	r0, [pc, #328]	; (13554 <nvs_mount+0x2e4>)
   1340c:	2149      	movs	r1, #73	; 0x49
   1340e:	f017 fbab 	bl	2ab68 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   13412:	6861      	ldr	r1, [r4, #4]
   13414:	4620      	mov	r0, r4
   13416:	f017 fc1e 	bl	2ac56 <nvs_flash_erase_sector>
		if (rc) {
   1341a:	4605      	mov	r5, r0
   1341c:	2800      	cmp	r0, #0
   1341e:	d1b6      	bne.n	1338e <nvs_mount+0x11e>
		fs->ate_wra &= ADDR_SECT_MASK;
   13420:	6863      	ldr	r3, [r4, #4]
   13422:	4a4d      	ldr	r2, [pc, #308]	; (13558 <nvs_mount+0x2e8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13424:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   13426:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   13428:	440b      	add	r3, r1
   1342a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1342e:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   13430:	4013      	ands	r3, r2
   13432:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13434:	4620      	mov	r0, r4
   13436:	f017 fd1d 	bl	2ae74 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   1343a:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1343c:	2d00      	cmp	r5, #0
   1343e:	d05e      	beq.n	134fe <nvs_mount+0x28e>
   13440:	e7a5      	b.n	1338e <nvs_mount+0x11e>
		if (nvs_ate_valid(fs, &last_ate)) {
   13442:	a901      	add	r1, sp, #4
   13444:	4620      	mov	r0, r4
   13446:	f017 fc33 	bl	2acb0 <nvs_ate_valid>
   1344a:	6862      	ldr	r2, [r4, #4]
   1344c:	b910      	cbnz	r0, 13454 <nvs_mount+0x1e4>
		fs->ate_wra -= ate_size;
   1344e:	1b92      	subs	r2, r2, r6
   13450:	6062      	str	r2, [r4, #4]
   13452:	e7a8      	b.n	133a6 <nvs_mount+0x136>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13454:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   13458:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   1345c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1345e:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13462:	4429      	add	r1, r5
   13464:	f017 fc1a 	bl	2ac9c <nvs_al_size.isra.0>
   13468:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1346a:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1346c:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1346e:	d1ee      	bne.n	1344e <nvs_mount+0x1de>
   13470:	2d00      	cmp	r5, #0
   13472:	d0ec      	beq.n	1344e <nvs_mount+0x1de>
				rc = -ESPIPE;
   13474:	f06f 051c 	mvn.w	r5, #28
   13478:	e07a      	b.n	13570 <nvs_mount+0x300>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1347a:	2308      	movs	r3, #8
   1347c:	aa03      	add	r2, sp, #12
   1347e:	4641      	mov	r1, r8
   13480:	4620      	mov	r0, r4
   13482:	f017 fb7e 	bl	2ab82 <nvs_flash_rd>
			if (rc) {
   13486:	4605      	mov	r5, r0
   13488:	2800      	cmp	r0, #0
   1348a:	d180      	bne.n	1338e <nvs_mount+0x11e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1348c:	a903      	add	r1, sp, #12
   1348e:	4620      	mov	r0, r4
   13490:	f017 fc0e 	bl	2acb0 <nvs_ate_valid>
   13494:	b138      	cbz	r0, 134a6 <nvs_mount+0x236>
   13496:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1349a:	454b      	cmp	r3, r9
   1349c:	d103      	bne.n	134a6 <nvs_mount+0x236>
			    (gc_done_ate.id == 0xffff) &&
   1349e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   134a2:	2b00      	cmp	r3, #0
   134a4:	d06a      	beq.n	1357c <nvs_mount+0x30c>
			addr += ate_size;
   134a6:	44b0      	add	r8, r6
   134a8:	e7a7      	b.n	133fa <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   134aa:	1a5b      	subs	r3, r3, r1
   134ac:	464a      	mov	r2, r9
   134ae:	4620      	mov	r0, r4
   134b0:	f017 fbac 	bl	2ac0c <nvs_flash_cmp_const>
		if (rc < 0) {
   134b4:	1e05      	subs	r5, r0, #0
   134b6:	f6ff af6a 	blt.w	1338e <nvs_mount+0x11e>
		if (!rc) {
   134ba:	d008      	beq.n	134ce <nvs_mount+0x25e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   134bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   134be:	68a3      	ldr	r3, [r4, #8]
   134c0:	6812      	ldr	r2, [r2, #0]
   134c2:	4413      	add	r3, r2
   134c4:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   134c6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   134ca:	428b      	cmp	r3, r1
   134cc:	d8ed      	bhi.n	134aa <nvs_mount+0x23a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   134ce:	6861      	ldr	r1, [r4, #4]
   134d0:	89a3      	ldrh	r3, [r4, #12]
   134d2:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   134d6:	429a      	cmp	r2, r3
   134d8:	d1b0      	bne.n	1343c <nvs_mount+0x1cc>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   134da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13558 <nvs_mount+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   134de:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   134e0:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   134e4:	429a      	cmp	r2, r3
   134e6:	d0a9      	beq.n	1343c <nvs_mount+0x1cc>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   134e8:	4620      	mov	r0, r4
   134ea:	f017 fbb4 	bl	2ac56 <nvs_flash_erase_sector>
		if (rc) {
   134ee:	4605      	mov	r5, r0
   134f0:	2800      	cmp	r0, #0
   134f2:	f47f af4c 	bne.w	1338e <nvs_mount+0x11e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   134f6:	6863      	ldr	r3, [r4, #4]
   134f8:	ea03 0308 	and.w	r3, r3, r8
   134fc:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   134fe:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13500:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13502:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13506:	429a      	cmp	r2, r3
   13508:	d02e      	beq.n	13568 <nvs_mount+0x2f8>
   1350a:	4638      	mov	r0, r7
   1350c:	f011 faaa 	bl	24a64 <z_impl_k_mutex_unlock>
	fs->ready = true;
   13510:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13512:	89e2      	ldrh	r2, [r4, #14]
   13514:	4811      	ldr	r0, [pc, #68]	; (1355c <nvs_mount+0x2ec>)
	fs->ready = true;
   13516:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13518:	2149      	movs	r1, #73	; 0x49
   1351a:	89a3      	ldrh	r3, [r4, #12]
   1351c:	f017 fb24 	bl	2ab68 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   13520:	6862      	ldr	r2, [r4, #4]
   13522:	480f      	ldr	r0, [pc, #60]	; (13560 <nvs_mount+0x2f0>)
   13524:	b293      	uxth	r3, r2
   13526:	2149      	movs	r1, #73	; 0x49
   13528:	0c12      	lsrs	r2, r2, #16
   1352a:	f017 fb1d 	bl	2ab68 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   1352e:	68a2      	ldr	r2, [r4, #8]
   13530:	480c      	ldr	r0, [pc, #48]	; (13564 <nvs_mount+0x2f4>)
   13532:	b293      	uxth	r3, r2
   13534:	2149      	movs	r1, #73	; 0x49
   13536:	0c12      	lsrs	r2, r2, #16
   13538:	f017 fb16 	bl	2ab68 <z_log_minimal_printk>
	return 0;
   1353c:	2500      	movs	r5, #0
   1353e:	e6ac      	b.n	1329a <nvs_mount+0x2a>
   13540:	00030939 	.word	0x00030939
   13544:	00030960 	.word	0x00030960
   13548:	00030982 	.word	0x00030982
   1354c:	0003099f 	.word	0x0003099f
   13550:	000309b8 	.word	0x000309b8
   13554:	00030a29 	.word	0x00030a29
   13558:	ffff0000 	.word	0xffff0000
   1355c:	000309e0 	.word	0x000309e0
   13560:	000309fc 	.word	0x000309fc
   13564:	00030a13 	.word	0x00030a13
		rc = nvs_add_gc_done_ate(fs);
   13568:	4620      	mov	r0, r4
   1356a:	f017 fc6e 	bl	2ae4a <nvs_add_gc_done_ate>
   1356e:	4605      	mov	r5, r0
   13570:	4638      	mov	r0, r7
   13572:	f011 fa77 	bl	24a64 <z_impl_k_mutex_unlock>
	if (rc) {
   13576:	2d00      	cmp	r5, #0
   13578:	d0ca      	beq.n	13510 <nvs_mount+0x2a0>
   1357a:	e68e      	b.n	1329a <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   1357c:	4808      	ldr	r0, [pc, #32]	; (135a0 <nvs_mount+0x330>)
   1357e:	2149      	movs	r1, #73	; 0x49
   13580:	f017 faf2 	bl	2ab68 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13584:	6863      	ldr	r3, [r4, #4]
   13586:	0c1b      	lsrs	r3, r3, #16
   13588:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   1358a:	4669      	mov	r1, sp
   1358c:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1358e:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   13590:	f017 fb05 	bl	2ab9e <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   13594:	9900      	ldr	r1, [sp, #0]
   13596:	4620      	mov	r0, r4
   13598:	f017 fb5d 	bl	2ac56 <nvs_flash_erase_sector>
   1359c:	e74d      	b.n	1343a <nvs_mount+0x1ca>
   1359e:	bf00      	nop
   135a0:	00030a55 	.word	0x00030a55

000135a4 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   135a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   135aa:	7c03      	ldrb	r3, [r0, #16]
{
   135ac:	b089      	sub	sp, #36	; 0x24
   135ae:	4604      	mov	r4, r0
   135b0:	4689      	mov	r9, r1
   135b2:	4690      	mov	r8, r2
	if (!fs->ready) {
   135b4:	b94b      	cbnz	r3, 135ca <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   135b6:	4863      	ldr	r0, [pc, #396]	; (13744 <nvs_write+0x1a0>)
   135b8:	2145      	movs	r1, #69	; 0x45
   135ba:	f017 fad5 	bl	2ab68 <z_log_minimal_printk>
		return -EACCES;
   135be:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   135c2:	4630      	mov	r0, r6
   135c4:	b009      	add	sp, #36	; 0x24
   135c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   135cc:	2108      	movs	r1, #8
   135ce:	4610      	mov	r0, r2
   135d0:	f017 fb64 	bl	2ac9c <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   135d4:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   135d6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   135d8:	4610      	mov	r0, r2
   135da:	f017 fb5f 	bl	2ac9c <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   135de:	89a3      	ldrh	r3, [r4, #12]
   135e0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   135e4:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   135e6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   135e8:	f200 80a9 	bhi.w	1373e <nvs_write+0x19a>
   135ec:	b11d      	cbz	r5, 135f6 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   135ee:	f1b8 0f00 	cmp.w	r8, #0
   135f2:	f000 80a4 	beq.w	1373e <nvs_write+0x19a>
	wlk_addr = fs->ate_wra;
   135f6:	6863      	ldr	r3, [r4, #4]
   135f8:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   135fa:	aa04      	add	r2, sp, #16
   135fc:	a903      	add	r1, sp, #12
   135fe:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   13600:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13604:	f017 fb8c 	bl	2ad20 <nvs_prev_ate>
		if (rc) {
   13608:	4606      	mov	r6, r0
   1360a:	2800      	cmp	r0, #0
   1360c:	d1d9      	bne.n	135c2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1360e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   13612:	454b      	cmp	r3, r9
   13614:	d005      	beq.n	13622 <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   13616:	6862      	ldr	r2, [r4, #4]
   13618:	9b03      	ldr	r3, [sp, #12]
   1361a:	429a      	cmp	r2, r3
   1361c:	d1ed      	bne.n	135fa <nvs_write+0x56>
		if (len == 0) {
   1361e:	b9e5      	cbnz	r5, 1365a <nvs_write+0xb6>
   13620:	e7cf      	b.n	135c2 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   13622:	a904      	add	r1, sp, #16
   13624:	4620      	mov	r0, r4
   13626:	f017 fb43 	bl	2acb0 <nvs_ate_valid>
   1362a:	2800      	cmp	r0, #0
   1362c:	d0f3      	beq.n	13616 <nvs_write+0x72>
		rd_addr += wlk_ate.offset;
   1362e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   13632:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   13636:	b175      	cbz	r5, 13656 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   13638:	429d      	cmp	r5, r3
   1363a:	d10e      	bne.n	1365a <nvs_write+0xb6>
		rd_addr &= ADDR_SECT_MASK;
   1363c:	ea4f 411b 	mov.w	r1, fp, lsr #16
   13640:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   13642:	4401      	add	r1, r0
   13644:	462b      	mov	r3, r5
   13646:	4642      	mov	r2, r8
   13648:	4620      	mov	r0, r4
   1364a:	f017 fab5 	bl	2abb8 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1364e:	2800      	cmp	r0, #0
   13650:	dc03      	bgt.n	1365a <nvs_write+0xb6>
   13652:	4606      	mov	r6, r0
   13654:	e7b5      	b.n	135c2 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   13656:	2b00      	cmp	r3, #0
   13658:	d0b3      	beq.n	135c2 <nvs_write+0x1e>
	if (data_size) {
   1365a:	2f00      	cmp	r7, #0
   1365c:	d13e      	bne.n	136dc <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1365e:	f104 0314 	add.w	r3, r4, #20
   13662:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13664:	f04f 32ff 	mov.w	r2, #4294967295
   13668:	f04f 33ff 	mov.w	r3, #4294967295
   1366c:	f104 0014 	add.w	r0, r4, #20
   13670:	f011 f942 	bl	248f8 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13674:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 13748 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
   13678:	89e3      	ldrh	r3, [r4, #14]
   1367a:	429e      	cmp	r6, r3
   1367c:	d05c      	beq.n	13738 <nvs_write+0x194>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1367e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   13682:	18f9      	adds	r1, r7, r3
   13684:	428a      	cmp	r2, r1
   13686:	d32c      	bcc.n	136e2 <nvs_write+0x13e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13688:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   1368c:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   1368e:	23ff      	movs	r3, #255	; 0xff
   13690:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   13694:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   13698:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   1369c:	f017 faf5 	bl	2ac8a <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   136a0:	68a1      	ldr	r1, [r4, #8]
   136a2:	462b      	mov	r3, r5
   136a4:	4642      	mov	r2, r8
   136a6:	4620      	mov	r0, r4
   136a8:	f017 fb84 	bl	2adb4 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   136ac:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   136ae:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   136b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136b2:	f017 faf3 	bl	2ac9c <nvs_al_size.isra.0>
   136b6:	68a2      	ldr	r2, [r4, #8]
   136b8:	4402      	add	r2, r0
   136ba:	60a2      	str	r2, [r4, #8]
	if (rc) {
   136bc:	f1ba 0f00 	cmp.w	sl, #0
   136c0:	d107      	bne.n	136d2 <nvs_write+0x12e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   136c2:	a906      	add	r1, sp, #24
   136c4:	4620      	mov	r0, r4
   136c6:	f017 fbaf 	bl	2ae28 <nvs_flash_ate_wrt>
	rc = len;
   136ca:	2800      	cmp	r0, #0
   136cc:	bf14      	ite	ne
   136ce:	4682      	movne	sl, r0
   136d0:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   136d2:	9801      	ldr	r0, [sp, #4]
   136d4:	f011 f9c6 	bl	24a64 <z_impl_k_mutex_unlock>
	return rc;
   136d8:	4656      	mov	r6, sl
   136da:	e772      	b.n	135c2 <nvs_write+0x1e>
		required_space = data_size + ate_size;
   136dc:	4457      	add	r7, sl
   136de:	b2bf      	uxth	r7, r7
   136e0:	e7bd      	b.n	1365e <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   136e2:	2108      	movs	r1, #8
   136e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136e6:	f017 fad9 	bl	2ac9c <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   136ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   136ee:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   136f2:	2300      	movs	r3, #0
   136f4:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   136f8:	1813      	adds	r3, r2, r0
   136fa:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   136fe:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   13700:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   13704:	441a      	add	r2, r3
   13706:	1a10      	subs	r0, r2, r0
   13708:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1370a:	a806      	add	r0, sp, #24
   1370c:	f017 fabd 	bl	2ac8a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   13710:	a906      	add	r1, sp, #24
   13712:	4620      	mov	r0, r4
   13714:	f017 fb88 	bl	2ae28 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   13718:	1d21      	adds	r1, r4, #4
   1371a:	4620      	mov	r0, r4
   1371c:	f017 fa3f 	bl	2ab9e <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13720:	6863      	ldr	r3, [r4, #4]
   13722:	ea03 030b 	and.w	r3, r3, fp
   13726:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   13728:	4620      	mov	r0, r4
   1372a:	f017 fba3 	bl	2ae74 <nvs_gc>
		if (rc) {
   1372e:	4682      	mov	sl, r0
   13730:	2800      	cmp	r0, #0
   13732:	d1ce      	bne.n	136d2 <nvs_write+0x12e>
		gc_count++;
   13734:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   13736:	e79f      	b.n	13678 <nvs_write+0xd4>
			rc = -ENOSPC;
   13738:	f06f 0a1b 	mvn.w	sl, #27
   1373c:	e7c9      	b.n	136d2 <nvs_write+0x12e>
		return -EINVAL;
   1373e:	f06f 0615 	mvn.w	r6, #21
   13742:	e73e      	b.n	135c2 <nvs_write+0x1e>
   13744:	00030920 	.word	0x00030920
   13748:	ffff0000 	.word	0xffff0000

0001374c <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1374c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13750:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   13752:	7c03      	ldrb	r3, [r0, #16]
{
   13754:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   13758:	4604      	mov	r4, r0
   1375a:	460f      	mov	r7, r1
   1375c:	4690      	mov	r8, r2
	if (!fs->ready) {
   1375e:	b943      	cbnz	r3, 13772 <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   13760:	482c      	ldr	r0, [pc, #176]	; (13814 <nvs_read_hist+0xc8>)
   13762:	2145      	movs	r1, #69	; 0x45
   13764:	f017 fa00 	bl	2ab68 <z_log_minimal_printk>
		return -EACCES;
   13768:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   1376c:	b004      	add	sp, #16
   1376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13772:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13774:	2108      	movs	r1, #8
   13776:	f017 fa91 	bl	2ac9c <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   1377a:	89a3      	ldrh	r3, [r4, #12]
   1377c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13780:	429e      	cmp	r6, r3
   13782:	d843      	bhi.n	1380c <nvs_read_hist+0xc0>
	wlk_addr = fs->ate_wra;
   13784:	f8d4 a004 	ldr.w	sl, [r4, #4]
   13788:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   1378c:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1378e:	45a9      	cmp	r9, r5
   13790:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   13792:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   13796:	d209      	bcs.n	137ac <nvs_read_hist+0x60>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13798:	6863      	ldr	r3, [r4, #4]
   1379a:	4553      	cmp	r3, sl
   1379c:	d11e      	bne.n	137dc <nvs_read_hist+0x90>
   1379e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   137a2:	42bb      	cmp	r3, r7
   137a4:	d01a      	beq.n	137dc <nvs_read_hist+0x90>
		return -ENOENT;
   137a6:	f06f 0001 	mvn.w	r0, #1
   137aa:	e7df      	b.n	1376c <nvs_read_hist+0x20>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   137ac:	aa02      	add	r2, sp, #8
   137ae:	a901      	add	r1, sp, #4
   137b0:	4620      	mov	r0, r4
   137b2:	f017 fab5 	bl	2ad20 <nvs_prev_ate>
		if (rc) {
   137b6:	2800      	cmp	r0, #0
   137b8:	d1d8      	bne.n	1376c <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   137ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   137be:	42bb      	cmp	r3, r7
   137c0:	d106      	bne.n	137d0 <nvs_read_hist+0x84>
   137c2:	a902      	add	r1, sp, #8
   137c4:	4620      	mov	r0, r4
   137c6:	f017 fa73 	bl	2acb0 <nvs_ate_valid>
   137ca:	b108      	cbz	r0, 137d0 <nvs_read_hist+0x84>
			cnt_his++;
   137cc:	3501      	adds	r5, #1
   137ce:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   137d0:	6862      	ldr	r2, [r4, #4]
   137d2:	9b01      	ldr	r3, [sp, #4]
   137d4:	429a      	cmp	r2, r3
   137d6:	d1da      	bne.n	1378e <nvs_read_hist+0x42>
		rd_addr = wlk_addr;
   137d8:	4651      	mov	r1, sl
   137da:	e7e0      	b.n	1379e <nvs_read_hist+0x52>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   137dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   137e0:	2b00      	cmp	r3, #0
   137e2:	d0e0      	beq.n	137a6 <nvs_read_hist+0x5a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   137e4:	45a9      	cmp	r9, r5
   137e6:	d8de      	bhi.n	137a6 <nvs_read_hist+0x5a>
	rd_addr += wlk_ate.offset;
   137e8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   137ec:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   137ee:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   137f0:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   137f4:	bf28      	it	cs
   137f6:	4633      	movcs	r3, r6
   137f8:	4401      	add	r1, r0
   137fa:	4642      	mov	r2, r8
   137fc:	4620      	mov	r0, r4
   137fe:	f017 f9c0 	bl	2ab82 <nvs_flash_rd>
	if (rc) {
   13802:	2800      	cmp	r0, #0
   13804:	d1b2      	bne.n	1376c <nvs_read_hist+0x20>
	return wlk_ate.len;
   13806:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   1380a:	e7af      	b.n	1376c <nvs_read_hist+0x20>
		return -EINVAL;
   1380c:	f06f 0015 	mvn.w	r0, #21
   13810:	e7ac      	b.n	1376c <nvs_read_hist+0x20>
   13812:	bf00      	nop
   13814:	00030920 	.word	0x00030920

00013818 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   13818:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   1381a:	4b11      	ldr	r3, [pc, #68]	; (13860 <flash_area_open+0x48>)
   1381c:	681c      	ldr	r4, [r3, #0]
{
   1381e:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   13820:	b1dc      	cbz	r4, 1385a <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   13822:	4b10      	ldr	r3, [pc, #64]	; (13864 <flash_area_open+0x4c>)
   13824:	6819      	ldr	r1, [r3, #0]
   13826:	2300      	movs	r3, #0
   13828:	428b      	cmp	r3, r1
   1382a:	db02      	blt.n	13832 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   1382c:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   13830:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   13832:	4622      	mov	r2, r4
   13834:	f812 6b10 	ldrb.w	r6, [r2], #16
   13838:	4286      	cmp	r6, r0
   1383a:	d002      	beq.n	13842 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   1383c:	3301      	adds	r3, #1
   1383e:	4614      	mov	r4, r2
   13840:	e7f2      	b.n	13828 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13842:	68e0      	ldr	r0, [r4, #12]
   13844:	b910      	cbnz	r0, 1384c <flash_area_open+0x34>
		return -ENODEV;
   13846:	f06f 0012 	mvn.w	r0, #18
   1384a:	e7f1      	b.n	13830 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1384c:	f01b f935 	bl	2eaba <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   13850:	2800      	cmp	r0, #0
   13852:	d0f8      	beq.n	13846 <flash_area_open+0x2e>
	*fap = area;
   13854:	602c      	str	r4, [r5, #0]
	return 0;
   13856:	2000      	movs	r0, #0
   13858:	e7ea      	b.n	13830 <flash_area_open+0x18>
		return -EACCES;
   1385a:	f06f 000c 	mvn.w	r0, #12
   1385e:	e7e7      	b.n	13830 <flash_area_open+0x18>
   13860:	200006e8 	.word	0x200006e8
   13864:	0002f5f8 	.word	0x0002f5f8

00013868 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13868:	b570      	push	{r4, r5, r6, lr}
   1386a:	b088      	sub	sp, #32
   1386c:	4605      	mov	r5, r0
   1386e:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   13870:	b2c0      	uxtb	r0, r0
   13872:	4669      	mov	r1, sp
{
   13874:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13876:	f7ff ffcf 	bl	13818 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   1387a:	2800      	cmp	r0, #0
   1387c:	db1b      	blt.n	138b6 <flash_area_get_sectors+0x4e>
   1387e:	9800      	ldr	r0, [sp, #0]
   13880:	b1c8      	cbz	r0, 138b6 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   13882:	6843      	ldr	r3, [r0, #4]
   13884:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13886:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13888:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   1388a:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   1388c:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   13890:	2300      	movs	r3, #0
	cb_data->status = 0;
   13892:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13896:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   13898:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   1389a:	f017 fbc3 	bl	2b024 <flash_area_close>
	if (flash_dev == NULL) {
   1389e:	b16d      	cbz	r5, 138bc <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   138a0:	4628      	mov	r0, r5
   138a2:	4908      	ldr	r1, [pc, #32]	; (138c4 <flash_area_get_sectors+0x5c>)
   138a4:	aa01      	add	r2, sp, #4
   138a6:	f01a fc6c 	bl	2e182 <flash_page_foreach>
	if (cb_data->status == 0) {
   138aa:	9807      	ldr	r0, [sp, #28]
   138ac:	b908      	cbnz	r0, 138b2 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   138ae:	9b05      	ldr	r3, [sp, #20]
   138b0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   138b2:	b008      	add	sp, #32
   138b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   138b6:	f06f 0015 	mvn.w	r0, #21
   138ba:	e7fa      	b.n	138b2 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   138bc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   138c0:	e7f7      	b.n	138b2 <flash_area_get_sectors+0x4a>
   138c2:	bf00      	nop
   138c4:	0002b027 	.word	0x0002b027

000138c8 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   138c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   138cc:	4b0f      	ldr	r3, [pc, #60]	; (1390c <settings_save_one+0x44>)
   138ce:	681c      	ldr	r4, [r3, #0]
{
   138d0:	4605      	mov	r5, r0
   138d2:	460e      	mov	r6, r1
   138d4:	4617      	mov	r7, r2
	if (!cs) {
   138d6:	b1ac      	cbz	r4, 13904 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   138d8:	f04f 32ff 	mov.w	r2, #4294967295
   138dc:	f04f 33ff 	mov.w	r3, #4294967295
   138e0:	480b      	ldr	r0, [pc, #44]	; (13910 <settings_save_one+0x48>)
   138e2:	f011 f809 	bl	248f8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   138e6:	6863      	ldr	r3, [r4, #4]
   138e8:	4632      	mov	r2, r6
   138ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
   138ee:	4629      	mov	r1, r5
   138f0:	463b      	mov	r3, r7
   138f2:	4620      	mov	r0, r4
   138f4:	47c0      	blx	r8
   138f6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   138f8:	4805      	ldr	r0, [pc, #20]	; (13910 <settings_save_one+0x48>)
   138fa:	f011 f8b3 	bl	24a64 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   138fe:	4620      	mov	r0, r4
   13900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   13904:	f06f 0401 	mvn.w	r4, #1
   13908:	e7f9      	b.n	138fe <settings_save_one+0x36>
   1390a:	bf00      	nop
   1390c:	20002b98 	.word	0x20002b98
   13910:	20000b28 	.word	0x20000b28

00013914 <settings_src_register>:
	parent->next = child;
   13914:	2300      	movs	r3, #0
   13916:	6003      	str	r3, [r0, #0]
	return list->tail;
   13918:	4b04      	ldr	r3, [pc, #16]	; (1392c <settings_src_register+0x18>)
   1391a:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1391c:	b912      	cbnz	r2, 13924 <settings_src_register+0x10>
	list->head = node;
   1391e:	e9c3 0000 	strd	r0, r0, [r3]
}
   13922:	4770      	bx	lr
	parent->next = child;
   13924:	6010      	str	r0, [r2, #0]
	list->tail = node;
   13926:	6058      	str	r0, [r3, #4]
}
   13928:	4770      	bx	lr
   1392a:	bf00      	nop
   1392c:	20002b9c 	.word	0x20002b9c

00013930 <settings_dst_register>:
	settings_save_dst = cs;
   13930:	4b01      	ldr	r3, [pc, #4]	; (13938 <settings_dst_register+0x8>)
   13932:	6018      	str	r0, [r3, #0]
}
   13934:	4770      	bx	lr
   13936:	bf00      	nop
   13938:	20002b98 	.word	0x20002b98

0001393c <settings_load_subtree>:
{
   1393c:	b530      	push	{r4, r5, lr}
   1393e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   13940:	2300      	movs	r3, #0
{
   13942:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   13944:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13948:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1394a:	f04f 33ff 	mov.w	r3, #4294967295
   1394e:	480c      	ldr	r0, [pc, #48]	; (13980 <settings_load_subtree+0x44>)
   13950:	f04f 32ff 	mov.w	r2, #4294967295
   13954:	f010 ffd0 	bl	248f8 <z_impl_k_mutex_lock>
	return list->head;
   13958:	4b0a      	ldr	r3, [pc, #40]	; (13984 <settings_load_subtree+0x48>)
   1395a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1395c:	b94c      	cbnz	r4, 13972 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1395e:	4628      	mov	r0, r5
   13960:	f000 f8dc 	bl	13b1c <settings_commit_subtree>
   13964:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13966:	4806      	ldr	r0, [pc, #24]	; (13980 <settings_load_subtree+0x44>)
   13968:	f011 f87c 	bl	24a64 <z_impl_k_mutex_unlock>
}
   1396c:	4620      	mov	r0, r4
   1396e:	b005      	add	sp, #20
   13970:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   13972:	6863      	ldr	r3, [r4, #4]
   13974:	4620      	mov	r0, r4
   13976:	681b      	ldr	r3, [r3, #0]
   13978:	a901      	add	r1, sp, #4
   1397a:	4798      	blx	r3
	return node->next;
   1397c:	6824      	ldr	r4, [r4, #0]
   1397e:	e7ed      	b.n	1395c <settings_load_subtree+0x20>
   13980:	20000b28 	.word	0x20000b28
   13984:	20002b9c 	.word	0x20002b9c

00013988 <settings_load_subtree_direct>:
{
   13988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   1398a:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1398e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   13990:	f04f 33ff 	mov.w	r3, #4294967295
   13994:	480a      	ldr	r0, [pc, #40]	; (139c0 <settings_load_subtree_direct+0x38>)
   13996:	f04f 32ff 	mov.w	r2, #4294967295
   1399a:	f010 ffad 	bl	248f8 <z_impl_k_mutex_lock>
	return list->head;
   1399e:	4b09      	ldr	r3, [pc, #36]	; (139c4 <settings_load_subtree_direct+0x3c>)
   139a0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   139a2:	b92c      	cbnz	r4, 139b0 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   139a4:	4806      	ldr	r0, [pc, #24]	; (139c0 <settings_load_subtree_direct+0x38>)
   139a6:	f011 f85d 	bl	24a64 <z_impl_k_mutex_unlock>
}
   139aa:	4620      	mov	r0, r4
   139ac:	b004      	add	sp, #16
   139ae:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   139b0:	6863      	ldr	r3, [r4, #4]
   139b2:	4620      	mov	r0, r4
   139b4:	681b      	ldr	r3, [r3, #0]
   139b6:	a901      	add	r1, sp, #4
   139b8:	4798      	blx	r3
	return node->next;
   139ba:	6824      	ldr	r4, [r4, #0]
   139bc:	e7f1      	b.n	139a2 <settings_load_subtree_direct+0x1a>
   139be:	bf00      	nop
   139c0:	20000b28 	.word	0x20000b28
   139c4:	20002b9c 	.word	0x20002b9c

000139c8 <settings_store_init>:
	list->head = NULL;
   139c8:	4b02      	ldr	r3, [pc, #8]	; (139d4 <settings_store_init+0xc>)
   139ca:	2200      	movs	r2, #0
	list->tail = NULL;
   139cc:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   139d0:	4770      	bx	lr
   139d2:	bf00      	nop
   139d4:	20002b9c 	.word	0x20002b9c

000139d8 <settings_init>:
	list->head = NULL;
   139d8:	4b02      	ldr	r3, [pc, #8]	; (139e4 <settings_init+0xc>)
   139da:	2200      	movs	r2, #0
	list->tail = NULL;
   139dc:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   139e0:	f7ff bff2 	b.w	139c8 <settings_store_init>
   139e4:	20002ba4 	.word	0x20002ba4

000139e8 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   139e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   139ec:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   139ee:	460c      	mov	r4, r1
   139f0:	b109      	cbz	r1, 139f6 <settings_parse_and_lookup+0xe>
		*next = NULL;
   139f2:	2300      	movs	r3, #0
   139f4:	600b      	str	r3, [r1, #0]
{
   139f6:	4d24      	ldr	r5, [pc, #144]	; (13a88 <settings_parse_and_lookup+0xa0>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   139f8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 13a8c <settings_parse_and_lookup+0xa4>
{
   139fc:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   139fe:	454d      	cmp	r5, r9
   13a00:	d920      	bls.n	13a44 <settings_parse_and_lookup+0x5c>
   13a02:	4923      	ldr	r1, [pc, #140]	; (13a90 <settings_parse_and_lookup+0xa8>)
   13a04:	4823      	ldr	r0, [pc, #140]	; (13a94 <settings_parse_and_lookup+0xac>)
   13a06:	2294      	movs	r2, #148	; 0x94
   13a08:	f017 f8a0 	bl	2ab4c <assert_print>
   13a0c:	4820      	ldr	r0, [pc, #128]	; (13a90 <settings_parse_and_lookup+0xa8>)
   13a0e:	2194      	movs	r1, #148	; 0x94
   13a10:	f017 f895 	bl	2ab3e <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a14:	f8d5 8000 	ldr.w	r8, [r5]
   13a18:	aa01      	add	r2, sp, #4
   13a1a:	4641      	mov	r1, r8
   13a1c:	4638      	mov	r0, r7
   13a1e:	f017 fb2b 	bl	2b078 <settings_name_steq>
   13a22:	b150      	cbz	r0, 13a3a <settings_parse_and_lookup+0x52>
			continue;
		}
		if (!bestmatch) {
   13a24:	b916      	cbnz	r6, 13a2c <settings_parse_and_lookup+0x44>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
   13a26:	b954      	cbnz	r4, 13a3e <settings_parse_and_lookup+0x56>
{
   13a28:	462e      	mov	r6, r5
   13a2a:	e006      	b.n	13a3a <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13a2c:	6831      	ldr	r1, [r6, #0]
   13a2e:	2200      	movs	r2, #0
   13a30:	4640      	mov	r0, r8
   13a32:	f017 fb21 	bl	2b078 <settings_name_steq>
   13a36:	2800      	cmp	r0, #0
   13a38:	d1f5      	bne.n	13a26 <settings_parse_and_lookup+0x3e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a3a:	3514      	adds	r5, #20
   13a3c:	e7df      	b.n	139fe <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   13a3e:	9b01      	ldr	r3, [sp, #4]
   13a40:	6023      	str	r3, [r4, #0]
   13a42:	e7f1      	b.n	13a28 <settings_parse_and_lookup+0x40>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a44:	d3e6      	bcc.n	13a14 <settings_parse_and_lookup+0x2c>
	return list->head;
   13a46:	4b14      	ldr	r3, [pc, #80]	; (13a98 <settings_parse_and_lookup+0xb0>)
   13a48:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a4a:	b1c5      	cbz	r5, 13a7e <settings_parse_and_lookup+0x96>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a4c:	f855 8c14 	ldr.w	r8, [r5, #-20]
   13a50:	aa01      	add	r2, sp, #4
   13a52:	4641      	mov	r1, r8
   13a54:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a56:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a58:	f017 fb0e 	bl	2b078 <settings_name_steq>
   13a5c:	b150      	cbz	r0, 13a74 <settings_parse_and_lookup+0x8c>
			continue;
		}
		if (!bestmatch) {
   13a5e:	b916      	cbnz	r6, 13a66 <settings_parse_and_lookup+0x7e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   13a60:	b954      	cbnz	r4, 13a78 <settings_parse_and_lookup+0x90>
{
   13a62:	462e      	mov	r6, r5
   13a64:	e006      	b.n	13a74 <settings_parse_and_lookup+0x8c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13a66:	6831      	ldr	r1, [r6, #0]
   13a68:	2200      	movs	r2, #0
   13a6a:	4640      	mov	r0, r8
   13a6c:	f017 fb04 	bl	2b078 <settings_name_steq>
   13a70:	2800      	cmp	r0, #0
   13a72:	d1f5      	bne.n	13a60 <settings_parse_and_lookup+0x78>
	return node->next;
   13a74:	696d      	ldr	r5, [r5, #20]
   13a76:	e7e8      	b.n	13a4a <settings_parse_and_lookup+0x62>
				*next = tmpnext;
   13a78:	9b01      	ldr	r3, [sp, #4]
   13a7a:	6023      	str	r3, [r4, #0]
   13a7c:	e7f1      	b.n	13a62 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13a7e:	4630      	mov	r0, r6
   13a80:	b003      	add	sp, #12
   13a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a86:	bf00      	nop
   13a88:	0002f438 	.word	0x0002f438
   13a8c:	0002f4b0 	.word	0x0002f4b0
   13a90:	00030a76 	.word	0x00030a76
   13a94:	0003013d 	.word	0x0003013d
   13a98:	20002ba4 	.word	0x20002ba4

00013a9c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13a9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
	int rc;
	const char *name_key = name;
   13aa4:	9001      	str	r0, [sp, #4]
{
   13aa6:	4604      	mov	r4, r0
   13aa8:	460d      	mov	r5, r1
   13aaa:	4616      	mov	r6, r2
   13aac:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13aae:	f1b8 0f00 	cmp.w	r8, #0
   13ab2:	d007      	beq.n	13ac4 <settings_call_set_handler+0x28>
   13ab4:	f8d8 1000 	ldr.w	r1, [r8]
   13ab8:	b9c1      	cbnz	r1, 13aec <settings_call_set_handler+0x50>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   13aba:	f8d8 e004 	ldr.w	lr, [r8, #4]
   13abe:	f1be 0f00 	cmp.w	lr, #0
   13ac2:	d11c      	bne.n	13afe <settings_call_set_handler+0x62>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   13ac4:	a901      	add	r1, sp, #4
   13ac6:	4620      	mov	r0, r4
   13ac8:	f7ff ff8e 	bl	139e8 <settings_parse_and_lookup>
		if (!ch) {
   13acc:	b198      	cbz	r0, 13af6 <settings_call_set_handler+0x5a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13ace:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13ad2:	9801      	ldr	r0, [sp, #4]
   13ad4:	463b      	mov	r3, r7
   13ad6:	4632      	mov	r2, r6
   13ad8:	4629      	mov	r1, r5
   13ada:	47c0      	blx	r8

		if (rc != 0) {
   13adc:	4603      	mov	r3, r0
   13ade:	b150      	cbz	r0, 13af6 <settings_call_set_handler+0x5a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13ae0:	480d      	ldr	r0, [pc, #52]	; (13b18 <settings_call_set_handler+0x7c>)
   13ae2:	4622      	mov	r2, r4
   13ae4:	2145      	movs	r1, #69	; 0x45
   13ae6:	f017 f83f 	bl	2ab68 <z_log_minimal_printk>
				name, rc);
			/* Ignoring the error */
			rc = 0;
   13aea:	e004      	b.n	13af6 <settings_call_set_handler+0x5a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13aec:	aa01      	add	r2, sp, #4
   13aee:	f017 fac3 	bl	2b078 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   13af2:	2800      	cmp	r0, #0
   13af4:	d1e1      	bne.n	13aba <settings_call_set_handler+0x1e>
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   13af6:	2000      	movs	r0, #0
   13af8:	b002      	add	sp, #8
   13afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13b02:	9801      	ldr	r0, [sp, #4]
   13b04:	9308      	str	r3, [sp, #32]
   13b06:	4632      	mov	r2, r6
   13b08:	463b      	mov	r3, r7
   13b0a:	4629      	mov	r1, r5
   13b0c:	46f4      	mov	ip, lr
}
   13b0e:	b002      	add	sp, #8
   13b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13b14:	4760      	bx	ip
   13b16:	bf00      	nop
   13b18:	00030aa8 	.word	0x00030aa8

00013b1c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b1e:	4c1d      	ldr	r4, [pc, #116]	; (13b94 <settings_commit_subtree+0x78>)
   13b20:	4f1d      	ldr	r7, [pc, #116]	; (13b98 <settings_commit_subtree+0x7c>)
{
   13b22:	4606      	mov	r6, r0
	rc = 0;
   13b24:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b26:	42bc      	cmp	r4, r7
   13b28:	d91b      	bls.n	13b62 <settings_commit_subtree+0x46>
   13b2a:	491c      	ldr	r1, [pc, #112]	; (13b9c <settings_commit_subtree+0x80>)
   13b2c:	481c      	ldr	r0, [pc, #112]	; (13ba0 <settings_commit_subtree+0x84>)
   13b2e:	22f4      	movs	r2, #244	; 0xf4
   13b30:	f017 f80c 	bl	2ab4c <assert_print>
   13b34:	4819      	ldr	r0, [pc, #100]	; (13b9c <settings_commit_subtree+0x80>)
   13b36:	21f4      	movs	r1, #244	; 0xf4
   13b38:	f017 f801 	bl	2ab3e <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b3c:	b92e      	cbnz	r6, 13b4a <settings_commit_subtree+0x2e>
			continue;
		}
		if (ch->h_commit) {
   13b3e:	68e3      	ldr	r3, [r4, #12]
   13b40:	b95b      	cbnz	r3, 13b5a <settings_commit_subtree+0x3e>
{
   13b42:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b44:	3414      	adds	r4, #20
   13b46:	4605      	mov	r5, r0
   13b48:	e7ed      	b.n	13b26 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b4a:	6820      	ldr	r0, [r4, #0]
   13b4c:	2200      	movs	r2, #0
   13b4e:	4631      	mov	r1, r6
   13b50:	f017 fa92 	bl	2b078 <settings_name_steq>
   13b54:	2800      	cmp	r0, #0
   13b56:	d1f2      	bne.n	13b3e <settings_commit_subtree+0x22>
   13b58:	e7f3      	b.n	13b42 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   13b5a:	4798      	blx	r3
			if (!rc) {
   13b5c:	2d00      	cmp	r5, #0
   13b5e:	d1f0      	bne.n	13b42 <settings_commit_subtree+0x26>
   13b60:	e7f0      	b.n	13b44 <settings_commit_subtree+0x28>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b62:	d3eb      	bcc.n	13b3c <settings_commit_subtree+0x20>
	return list->head;
   13b64:	4b0f      	ldr	r3, [pc, #60]	; (13ba4 <settings_commit_subtree+0x88>)
   13b66:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13b68:	b194      	cbz	r4, 13b90 <settings_commit_subtree+0x74>
   13b6a:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b6c:	b91e      	cbnz	r6, 13b76 <settings_commit_subtree+0x5a>
			continue;
		}
		if (ch->h_commit) {
   13b6e:	68e3      	ldr	r3, [r4, #12]
   13b70:	b94b      	cbnz	r3, 13b86 <settings_commit_subtree+0x6a>
	return node->next;
   13b72:	6964      	ldr	r4, [r4, #20]
   13b74:	e7f8      	b.n	13b68 <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b76:	6820      	ldr	r0, [r4, #0]
   13b78:	2200      	movs	r2, #0
   13b7a:	4631      	mov	r1, r6
   13b7c:	f017 fa7c 	bl	2b078 <settings_name_steq>
   13b80:	2800      	cmp	r0, #0
   13b82:	d1f4      	bne.n	13b6e <settings_commit_subtree+0x52>
   13b84:	e7f5      	b.n	13b72 <settings_commit_subtree+0x56>
			rc2 = ch->h_commit();
   13b86:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   13b88:	2d00      	cmp	r5, #0
   13b8a:	bf08      	it	eq
   13b8c:	4605      	moveq	r5, r0
   13b8e:	e7f0      	b.n	13b72 <settings_commit_subtree+0x56>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13b90:	4628      	mov	r0, r5
   13b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b94:	0002f438 	.word	0x0002f438
   13b98:	0002f4b0 	.word	0x0002f4b0
   13b9c:	00030a76 	.word	0x00030a76
   13ba0:	0003013d 	.word	0x0003013d
   13ba4:	20002ba4 	.word	0x20002ba4

00013ba8 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13ba8:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   13baa:	4d0c      	ldr	r5, [pc, #48]	; (13bdc <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   13bac:	480c      	ldr	r0, [pc, #48]	; (13be0 <settings_subsys_init+0x38>)
   13bae:	f04f 33ff 	mov.w	r3, #4294967295
   13bb2:	f04f 32ff 	mov.w	r2, #4294967295
   13bb6:	f010 fe9f 	bl	248f8 <z_impl_k_mutex_lock>
   13bba:	782b      	ldrb	r3, [r5, #0]
   13bbc:	b93b      	cbnz	r3, 13bce <settings_subsys_init+0x26>
		settings_init();
   13bbe:	f7ff ff0b 	bl	139d8 <settings_init>

		err = settings_backend_init(); /* func rises kernel panic once error */
   13bc2:	f000 f86d 	bl	13ca0 <settings_backend_init>

		if (!err) {
   13bc6:	4604      	mov	r4, r0
   13bc8:	b910      	cbnz	r0, 13bd0 <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   13bca:	2301      	movs	r3, #1
   13bcc:	702b      	strb	r3, [r5, #0]
	int err = 0;
   13bce:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   13bd0:	4803      	ldr	r0, [pc, #12]	; (13be0 <settings_subsys_init+0x38>)
   13bd2:	f010 ff47 	bl	24a64 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   13bd6:	4620      	mov	r0, r4
   13bd8:	bd38      	pop	{r3, r4, r5, pc}
   13bda:	bf00      	nop
   13bdc:	2000433d 	.word	0x2000433d
   13be0:	20000b28 	.word	0x20000b28

00013be4 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13be8:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   13bea:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13c9c <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   13bee:	3401      	adds	r4, #1
{
   13bf0:	b098      	sub	sp, #96	; 0x60
   13bf2:	4680      	mov	r8, r0
   13bf4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13bf6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13bf8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13bfc:	1e65      	subs	r5, r4, #1
   13bfe:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13c00:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13c04:	d047      	beq.n	13c96 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13c06:	234a      	movs	r3, #74	; 0x4a
   13c08:	aa05      	add	r2, sp, #20
   13c0a:	4629      	mov	r1, r5
   13c0c:	4630      	mov	r0, r6
   13c0e:	f017 fa02 	bl	2b016 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13c12:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13c16:	343f      	adds	r4, #63	; 0x3f
   13c18:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13c1a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13c1c:	4621      	mov	r1, r4
   13c1e:	2301      	movs	r3, #1
   13c20:	f10d 020b 	add.w	r2, sp, #11
   13c24:	4630      	mov	r0, r6
   13c26:	f017 f9f6 	bl	2b016 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13c2a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13c2c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13c2e:	dc03      	bgt.n	13c38 <settings_nvs_load+0x54>
   13c30:	2800      	cmp	r0, #0
   13c32:	dc03      	bgt.n	13c3c <settings_nvs_load+0x58>
{
   13c34:	462c      	mov	r4, r5
   13c36:	e7e1      	b.n	13bfc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13c38:	2800      	cmp	r0, #0
   13c3a:	dc16      	bgt.n	13c6a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13c3c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13c40:	42ab      	cmp	r3, r5
   13c42:	d109      	bne.n	13c58 <settings_nvs_load+0x74>
				cf->last_name_id--;
   13c44:	4642      	mov	r2, r8
   13c46:	1e6b      	subs	r3, r5, #1
   13c48:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13c4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13c50:	2302      	movs	r3, #2
   13c52:	4630      	mov	r0, r6
   13c54:	f7ff fca6 	bl	135a4 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13c58:	4629      	mov	r1, r5
   13c5a:	4630      	mov	r0, r6
   13c5c:	f017 f9d7 	bl	2b00e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13c60:	4621      	mov	r1, r4
   13c62:	4630      	mov	r0, r6
   13c64:	f017 f9d3 	bl	2b00e <nvs_delete>
			continue;
   13c68:	e7e4      	b.n	13c34 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13c6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   13c6e:	eb0d 0703 	add.w	r7, sp, r3
   13c72:	2300      	movs	r3, #0
   13c74:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13c78:	4652      	mov	r2, sl
   13c7a:	f8cd 9000 	str.w	r9, [sp]
   13c7e:	ab03      	add	r3, sp, #12
   13c80:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13c82:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13c84:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13c88:	f7ff ff08 	bl	13a9c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13c8c:	2800      	cmp	r0, #0
   13c8e:	d0d1      	beq.n	13c34 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13c90:	b018      	add	sp, #96	; 0x60
   13c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c96:	2000      	movs	r0, #0
	return ret;
   13c98:	e7fa      	b.n	13c90 <settings_nvs_load+0xac>
   13c9a:	bf00      	nop
   13c9c:	0002b0e9 	.word	0x0002b0e9

00013ca0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   13ca2:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13ca4:	4669      	mov	r1, sp
   13ca6:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13ca8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13caa:	f7ff fdb5 	bl	13818 <flash_area_open>
	if (rc) {
   13cae:	4604      	mov	r4, r0
   13cb0:	2800      	cmp	r0, #0
   13cb2:	d134      	bne.n	13d1e <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13cb4:	aa02      	add	r2, sp, #8
   13cb6:	a901      	add	r1, sp, #4
   13cb8:	2004      	movs	r0, #4
   13cba:	f7ff fdd5 	bl	13868 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13cbe:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13cc2:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13cc4:	d02b      	beq.n	13d1e <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13cc6:	b138      	cbz	r0, 13cd8 <settings_backend_init+0x38>
   13cc8:	340c      	adds	r4, #12
   13cca:	d005      	beq.n	13cd8 <settings_backend_init+0x38>
		k_panic();
   13ccc:	4040      	eors	r0, r0
   13cce:	f380 8811 	msr	BASEPRI, r0
   13cd2:	f04f 0004 	mov.w	r0, #4
   13cd6:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13cd8:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13cda:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13cde:	d223      	bcs.n	13d28 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13ce0:	9a00      	ldr	r2, [sp, #0]
   13ce2:	2300      	movs	r3, #0
   13ce4:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13ce6:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13ce8:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13cea:	4284      	cmp	r4, r0
   13cec:	d31a      	bcc.n	13d24 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13cee:	3301      	adds	r3, #1
   13cf0:	2b08      	cmp	r3, #8
   13cf2:	d1f9      	bne.n	13ce8 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13cf4:	4d0e      	ldr	r5, [pc, #56]	; (13d30 <settings_backend_init+0x90>)
   13cf6:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13cf8:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13cfa:	6853      	ldr	r3, [r2, #4]
   13cfc:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13cfe:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   13d00:	68d3      	ldr	r3, [r2, #12]
   13d02:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13d04:	f017 fa8a 	bl	2b21c <settings_nvs_backend_init>
	if (rc) {
   13d08:	4604      	mov	r4, r0
   13d0a:	b940      	cbnz	r0, 13d1e <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13d0c:	4e09      	ldr	r6, [pc, #36]	; (13d34 <settings_backend_init+0x94>)
   13d0e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13d10:	4628      	mov	r0, r5
   13d12:	f7ff fdff 	bl	13914 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13d16:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13d18:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13d1a:	f7ff fe09 	bl	13930 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13d1e:	4620      	mov	r0, r4
   13d20:	b004      	add	sp, #16
   13d22:	bd70      	pop	{r4, r5, r6, pc}
   13d24:	b29b      	uxth	r3, r3
   13d26:	e7e5      	b.n	13cf4 <settings_backend_init+0x54>
		return -EDOM;
   13d28:	f06f 0420 	mvn.w	r4, #32
   13d2c:	e7f7      	b.n	13d1e <settings_backend_init+0x7e>
   13d2e:	bf00      	nop
   13d30:	20002bac 	.word	0x20002bac
   13d34:	200006ec 	.word	0x200006ec

00013d38 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13d3c:	4605      	mov	r5, r0
   13d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13d42:	f3ef 8611 	mrs	r6, BASEPRI
   13d46:	f383 8812 	msr	BASEPRI_MAX, r3
   13d4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13d4e:	481b      	ldr	r0, [pc, #108]	; (13dbc <pm_state_notify+0x84>)
   13d50:	f010 fc62 	bl	24618 <z_spin_lock_valid>
   13d54:	b940      	cbnz	r0, 13d68 <pm_state_notify+0x30>
   13d56:	491a      	ldr	r1, [pc, #104]	; (13dc0 <pm_state_notify+0x88>)
   13d58:	481a      	ldr	r0, [pc, #104]	; (13dc4 <pm_state_notify+0x8c>)
   13d5a:	2294      	movs	r2, #148	; 0x94
   13d5c:	f016 fef6 	bl	2ab4c <assert_print>
   13d60:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d62:	4817      	ldr	r0, [pc, #92]	; (13dc0 <pm_state_notify+0x88>)
   13d64:	f016 feeb 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   13d68:	4814      	ldr	r0, [pc, #80]	; (13dbc <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13d6a:	4f17      	ldr	r7, [pc, #92]	; (13dc8 <pm_state_notify+0x90>)
   13d6c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13dcc <pm_state_notify+0x94>
   13d70:	f010 fc70 	bl	24654 <z_spin_lock_set_owner>
	return list->head;
   13d74:	4b16      	ldr	r3, [pc, #88]	; (13dd0 <pm_state_notify+0x98>)
   13d76:	681c      	ldr	r4, [r3, #0]
   13d78:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13d7c:	b954      	cbnz	r4, 13d94 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d7e:	480f      	ldr	r0, [pc, #60]	; (13dbc <pm_state_notify+0x84>)
   13d80:	f010 fc58 	bl	24634 <z_spin_unlock_valid>
   13d84:	b9a0      	cbnz	r0, 13db0 <pm_state_notify+0x78>
   13d86:	490e      	ldr	r1, [pc, #56]	; (13dc0 <pm_state_notify+0x88>)
   13d88:	480e      	ldr	r0, [pc, #56]	; (13dc4 <pm_state_notify+0x8c>)
   13d8a:	22c2      	movs	r2, #194	; 0xc2
   13d8c:	f016 fede 	bl	2ab4c <assert_print>
   13d90:	21c2      	movs	r1, #194	; 0xc2
   13d92:	e7e6      	b.n	13d62 <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   13d94:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   13d98:	2d00      	cmp	r5, #0
   13d9a:	bf18      	it	ne
   13d9c:	4613      	movne	r3, r2
		if (callback) {
   13d9e:	b12b      	cbz	r3, 13dac <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13da0:	f898 2014 	ldrb.w	r2, [r8, #20]
   13da4:	fb09 f202 	mul.w	r2, r9, r2
   13da8:	5cb8      	ldrb	r0, [r7, r2]
   13daa:	4798      	blx	r3
	return node->next;
   13dac:	6824      	ldr	r4, [r4, #0]
   13dae:	e7e5      	b.n	13d7c <pm_state_notify+0x44>
	__asm__ volatile(
   13db0:	f386 8811 	msr	BASEPRI, r6
   13db4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13dbc:	20002bec 	.word	0x20002bec
   13dc0:	00030879 	.word	0x00030879
   13dc4:	0003013d 	.word	0x0003013d
   13dc8:	20002c00 	.word	0x20002c00
   13dcc:	200037fc 	.word	0x200037fc
   13dd0:	20002c0c 	.word	0x20002c0c

00013dd4 <pm_system_resume>:

void pm_system_resume(void)
{
   13dd4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   13dd6:	4b19      	ldr	r3, [pc, #100]	; (13e3c <pm_system_resume+0x68>)
   13dd8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13dda:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13dde:	f004 031f 	and.w	r3, r4, #31
   13de2:	2201      	movs	r2, #1
   13de4:	409a      	lsls	r2, r3
   13de6:	4b16      	ldr	r3, [pc, #88]	; (13e40 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13de8:	0961      	lsrs	r1, r4, #5
   13dea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13dee:	43d0      	mvns	r0, r2
   13df0:	e853 1f00 	ldrex	r1, [r3]
   13df4:	ea01 0500 	and.w	r5, r1, r0
   13df8:	e843 5600 	strex	r6, r5, [r3]
   13dfc:	2e00      	cmp	r6, #0
   13dfe:	d1f7      	bne.n	13df0 <pm_system_resume+0x1c>
   13e00:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13e04:	420a      	tst	r2, r1
   13e06:	d013      	beq.n	13e30 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   13e08:	4b0e      	ldr	r3, [pc, #56]	; (13e44 <pm_system_resume+0x70>)
   13e0a:	4d0f      	ldr	r5, [pc, #60]	; (13e48 <pm_system_resume+0x74>)
   13e0c:	b18b      	cbz	r3, 13e32 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13e0e:	230c      	movs	r3, #12
   13e10:	4363      	muls	r3, r4
   13e12:	18ea      	adds	r2, r5, r3
   13e14:	5ce8      	ldrb	r0, [r5, r3]
   13e16:	7851      	ldrb	r1, [r2, #1]
   13e18:	f017 fe91 	bl	2bb3e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13e1c:	2000      	movs	r0, #0
   13e1e:	f7ff ff8b 	bl	13d38 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13e22:	230c      	movs	r3, #12
   13e24:	435c      	muls	r4, r3
   13e26:	192a      	adds	r2, r5, r4
   13e28:	2300      	movs	r3, #0
   13e2a:	512b      	str	r3, [r5, r4]
   13e2c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13e30:	bd70      	pop	{r4, r5, r6, pc}
   13e32:	f383 8811 	msr	BASEPRI, r3
   13e36:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13e3a:	e7ef      	b.n	13e1c <pm_system_resume+0x48>
   13e3c:	200037fc 	.word	0x200037fc
   13e40:	20002c14 	.word	0x20002c14
   13e44:	0002bb3f 	.word	0x0002bb3f
   13e48:	20002c00 	.word	0x20002c00

00013e4c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13e50:	4b42      	ldr	r3, [pc, #264]	; (13f5c <pm_system_suspend+0x110>)
{
   13e52:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13e54:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   13e56:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e5a:	f3ef 8811 	mrs	r8, BASEPRI
   13e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   13e62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e66:	483e      	ldr	r0, [pc, #248]	; (13f60 <pm_system_suspend+0x114>)
   13e68:	f010 fbd6 	bl	24618 <z_spin_lock_valid>
   13e6c:	b940      	cbnz	r0, 13e80 <pm_system_suspend+0x34>
   13e6e:	493d      	ldr	r1, [pc, #244]	; (13f64 <pm_system_suspend+0x118>)
   13e70:	483d      	ldr	r0, [pc, #244]	; (13f68 <pm_system_suspend+0x11c>)
   13e72:	2294      	movs	r2, #148	; 0x94
   13e74:	f016 fe6a 	bl	2ab4c <assert_print>
   13e78:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e7a:	483a      	ldr	r0, [pc, #232]	; (13f64 <pm_system_suspend+0x118>)
   13e7c:	f016 fe5f 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   13e80:	4837      	ldr	r0, [pc, #220]	; (13f60 <pm_system_suspend+0x114>)
   13e82:	4e3a      	ldr	r6, [pc, #232]	; (13f6c <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13e84:	240c      	movs	r4, #12
   13e86:	f010 fbe5 	bl	24654 <z_spin_lock_set_owner>
   13e8a:	436c      	muls	r4, r5
   13e8c:	4b38      	ldr	r3, [pc, #224]	; (13f70 <pm_system_suspend+0x124>)
   13e8e:	5d19      	ldrb	r1, [r3, r4]
   13e90:	191a      	adds	r2, r3, r4
   13e92:	b191      	cbz	r1, 13eba <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13e94:	ca07      	ldmia	r2, {r0, r1, r2}
   13e96:	eb06 0c04 	add.w	ip, r6, r4
   13e9a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13e9e:	2200      	movs	r2, #0
   13ea0:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13ea2:	482f      	ldr	r0, [pc, #188]	; (13f60 <pm_system_suspend+0x114>)
   13ea4:	f010 fbc6 	bl	24634 <z_spin_unlock_valid>
   13ea8:	4604      	mov	r4, r0
   13eaa:	b988      	cbnz	r0, 13ed0 <pm_system_suspend+0x84>
   13eac:	492d      	ldr	r1, [pc, #180]	; (13f64 <pm_system_suspend+0x118>)
   13eae:	482e      	ldr	r0, [pc, #184]	; (13f68 <pm_system_suspend+0x11c>)
   13eb0:	22c2      	movs	r2, #194	; 0xc2
   13eb2:	f016 fe4b 	bl	2ab4c <assert_print>
   13eb6:	21c2      	movs	r1, #194	; 0xc2
   13eb8:	e7df      	b.n	13e7a <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13eba:	4639      	mov	r1, r7
   13ebc:	4628      	mov	r0, r5
   13ebe:	f000 f861 	bl	13f84 <pm_policy_next_state>
		if (info != NULL) {
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d0ed      	beq.n	13ea2 <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   13ec6:	c807      	ldmia	r0, {r0, r1, r2}
   13ec8:	4434      	add	r4, r6
   13eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   13ece:	e7e8      	b.n	13ea2 <pm_system_suspend+0x56>
	__asm__ volatile(
   13ed0:	f388 8811 	msr	BASEPRI, r8
   13ed4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13ed8:	230c      	movs	r3, #12
   13eda:	436b      	muls	r3, r5
   13edc:	18f2      	adds	r2, r6, r3
   13ede:	5cf3      	ldrb	r3, [r6, r3]
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d039      	beq.n	13f58 <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13ee4:	1c7b      	adds	r3, r7, #1
   13ee6:	d00f      	beq.n	13f08 <pm_system_suspend+0xbc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13ee8:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13eec:	4821      	ldr	r0, [pc, #132]	; (13f74 <pm_system_suspend+0x128>)
   13eee:	4a22      	ldr	r2, [pc, #136]	; (13f78 <pm_system_suspend+0x12c>)
   13ef0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13ef4:	2100      	movs	r1, #0
   13ef6:	2300      	movs	r3, #0
   13ef8:	fbee 010c 	umlal	r0, r1, lr, ip
   13efc:	f7ec f900 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13f00:	2101      	movs	r1, #1
   13f02:	1a38      	subs	r0, r7, r0
   13f04:	f012 fe3e 	bl	26b84 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13f08:	f011 fe02 	bl	25b10 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13f0c:	2001      	movs	r0, #1
   13f0e:	f7ff ff13 	bl	13d38 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13f12:	f3bf 8f5b 	dmb	ish
   13f16:	4b19      	ldr	r3, [pc, #100]	; (13f7c <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f18:	096a      	lsrs	r2, r5, #5
   13f1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   13f1e:	f005 011f 	and.w	r1, r5, #31
   13f22:	2201      	movs	r2, #1
   13f24:	408a      	lsls	r2, r1
   13f26:	e853 0f00 	ldrex	r0, [r3]
   13f2a:	4310      	orrs	r0, r2
   13f2c:	e843 0100 	strex	r1, r0, [r3]
   13f30:	2900      	cmp	r1, #0
   13f32:	d1f8      	bne.n	13f26 <pm_system_suspend+0xda>
   13f34:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13f38:	4b11      	ldr	r3, [pc, #68]	; (13f80 <pm_system_suspend+0x134>)
   13f3a:	b133      	cbz	r3, 13f4a <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   13f3c:	230c      	movs	r3, #12
   13f3e:	436b      	muls	r3, r5
   13f40:	18f2      	adds	r2, r6, r3
   13f42:	5cf0      	ldrb	r0, [r6, r3]
   13f44:	7851      	ldrb	r1, [r2, #1]
   13f46:	f017 fdee 	bl	2bb26 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   13f4a:	f7ff ff43 	bl	13dd4 <pm_system_resume>
	k_sched_unlock();
   13f4e:	f011 fe2b 	bl	25ba8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   13f52:	4620      	mov	r0, r4
   13f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   13f58:	461c      	mov	r4, r3
   13f5a:	e7fa      	b.n	13f52 <pm_system_suspend+0x106>
   13f5c:	200037fc 	.word	0x200037fc
   13f60:	20002bf0 	.word	0x20002bf0
   13f64:	00030879 	.word	0x00030879
   13f68:	0003013d 	.word	0x0003013d
   13f6c:	20002c00 	.word	0x20002c00
   13f70:	20002bf4 	.word	0x20002bf4
   13f74:	000f423f 	.word	0x000f423f
   13f78:	000f4240 	.word	0x000f4240
   13f7c:	20002c14 	.word	0x20002c14
   13f80:	0002bb27 	.word	0x0002bb27

00013f84 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f88:	b085      	sub	sp, #20
   13f8a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13f8c:	a903      	add	r1, sp, #12
   13f8e:	f000 f843 	bl	14018 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13f92:	4b1e      	ldr	r3, [pc, #120]	; (1400c <pm_policy_next_state+0x88>)
   13f94:	9d03      	ldr	r5, [sp, #12]
   13f96:	f8d3 a000 	ldr.w	sl, [r3]
   13f9a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 14010 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13f9e:	1e43      	subs	r3, r0, #1
   13fa0:	b21b      	sxth	r3, r3
   13fa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13fa6:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13fa8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13fac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13fb0:	f04f 0b00 	mov.w	fp, #0
   13fb4:	b924      	cbnz	r4, 13fc0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13fb6:	46a1      	mov	r9, r4
}
   13fb8:	4648      	mov	r0, r9
   13fba:	b005      	add	sp, #20
   13fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc0:	6868      	ldr	r0, [r5, #4]
   13fc2:	4a14      	ldr	r2, [pc, #80]	; (14014 <pm_policy_next_state+0x90>)
   13fc4:	46c4      	mov	ip, r8
   13fc6:	4659      	mov	r1, fp
   13fc8:	fbe0 c107 	umlal	ip, r1, r0, r7
   13fcc:	2300      	movs	r3, #0
   13fce:	4660      	mov	r0, ip
   13fd0:	f7ec f896 	bl	100 <__aeabi_uldivmod>
   13fd4:	9001      	str	r0, [sp, #4]
   13fd6:	68a8      	ldr	r0, [r5, #8]
   13fd8:	4a0e      	ldr	r2, [pc, #56]	; (14014 <pm_policy_next_state+0x90>)
   13fda:	46c4      	mov	ip, r8
   13fdc:	4659      	mov	r1, fp
   13fde:	fbe0 c107 	umlal	ip, r1, r0, r7
   13fe2:	2300      	movs	r3, #0
   13fe4:	4660      	mov	r0, ip
   13fe6:	f7ec f88b 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13fea:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   13fee:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13ff0:	d001      	beq.n	13ff6 <pm_policy_next_state+0x72>
   13ff2:	4582      	cmp	sl, r0
   13ff4:	d905      	bls.n	14002 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13ff6:	1c73      	adds	r3, r6, #1
   13ff8:	d0de      	beq.n	13fb8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   13ffe:	42b0      	cmp	r0, r6
   14000:	d9da      	bls.n	13fb8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14002:	3c01      	subs	r4, #1
   14004:	b2a4      	uxth	r4, r4
   14006:	3d0c      	subs	r5, #12
   14008:	e7d4      	b.n	13fb4 <pm_policy_next_state+0x30>
   1400a:	bf00      	nop
   1400c:	20000700 	.word	0x20000700
   14010:	000f423f 	.word	0x000f423f
   14014:	000f4240 	.word	0x000f4240

00014018 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14018:	b908      	cbnz	r0, 1401e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   1401a:	4b02      	ldr	r3, [pc, #8]	; (14024 <pm_state_cpu_get_all+0xc>)
   1401c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1401e:	2000      	movs	r0, #0
   14020:	4770      	bx	lr
   14022:	bf00      	nop
   14024:	0002f64c 	.word	0x0002f64c

00014028 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
   14028:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = ROUND_UP(len, DATA_ALIGN);
   1402a:	1cc5      	adds	r5, r0, #3
   1402c:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   14030:	2d74      	cmp	r5, #116	; 0x74
   14032:	d908      	bls.n	14046 <user_data_alloc.constprop.0+0x1e>
   14034:	4917      	ldr	r1, [pc, #92]	; (14094 <user_data_alloc.constprop.0+0x6c>)
   14036:	4818      	ldr	r0, [pc, #96]	; (14098 <user_data_alloc.constprop.0+0x70>)
   14038:	225b      	movs	r2, #91	; 0x5b
   1403a:	f016 fd87 	bl	2ab4c <assert_print>
   1403e:	4815      	ldr	r0, [pc, #84]	; (14094 <user_data_alloc.constprop.0+0x6c>)
   14040:	215b      	movs	r1, #91	; 0x5b
   14042:	f016 fd7c 	bl	2ab3e <assert_post_action>
	return list->head;
   14046:	4c15      	ldr	r4, [pc, #84]	; (1409c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
   14048:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   1404c:	b123      	cbz	r3, 14058 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   1404e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   14052:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   14054:	2b74      	cmp	r3, #116	; 0x74
   14056:	d919      	bls.n	1408c <user_data_alloc.constprop.0+0x64>

		item = k_calloc(1, sizeof(struct data_chunk_item));
   14058:	2178      	movs	r1, #120	; 0x78
   1405a:	2001      	movs	r0, #1
   1405c:	f01a ff60 	bl	2ef20 <k_calloc>

		if (!item) {
   14060:	b178      	cbz	r0, 14082 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
   14062:	2300      	movs	r3, #0
   14064:	6003      	str	r3, [r0, #0]
	return list->tail;
   14066:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
Z_GENLIST_APPEND(slist, snode)
   1406a:	b95a      	cbnz	r2, 14084 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
   1406c:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
   14070:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
   14074:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   14078:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   1407a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   1407c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   1407e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

	return user_data_loc;
}
   14082:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   14084:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14086:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
   1408a:	e7f1      	b.n	14070 <user_data_alloc.constprop.0+0x48>
	return list->tail;
   1408c:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   14090:	e7f0      	b.n	14074 <user_data_alloc.constprop.0+0x4c>
   14092:	bf00      	nop
   14094:	00030ad5 	.word	0x00030ad5
   14098:	0003013d 	.word	0x0003013d
   1409c:	20002c18 	.word	0x20002c18

000140a0 <discovery_complete.constprop.0>:
   140a0:	480a      	ldr	r0, [pc, #40]	; (140cc <discovery_complete.constprop.0+0x2c>)
   140a2:	f3bf 8f5b 	dmb	ish
   140a6:	e850 3f00 	ldrex	r3, [r0]
   140aa:	f043 0302 	orr.w	r3, r3, #2
   140ae:	e840 3200 	strex	r2, r3, [r0]
   140b2:	2a00      	cmp	r2, #0
   140b4:	d1f7      	bne.n	140a6 <discovery_complete.constprop.0+0x6>
   140b6:	f3bf 8f5b 	dmb	ish

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   140ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
   140bc:	681b      	ldr	r3, [r3, #0]
   140be:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
   140c2:	b10b      	cbz	r3, 140c8 <discovery_complete.constprop.0+0x28>
		dm->callback->completed(dm, dm->context);
   140c4:	6841      	ldr	r1, [r0, #4]
   140c6:	4718      	bx	r3
	}
}
   140c8:	4770      	bx	lr
   140ca:	bf00      	nop
   140cc:	20002d50 	.word	0x20002d50

000140d0 <get_uuid_size.isra.0>:
	switch (uuid->type) {
   140d0:	2802      	cmp	r0, #2
static size_t get_uuid_size(const struct bt_uuid *uuid)
   140d2:	b508      	push	{r3, lr}
   140d4:	d802      	bhi.n	140dc <get_uuid_size.isra.0+0xc>
   140d6:	4b04      	ldr	r3, [pc, #16]	; (140e8 <get_uuid_size.isra.0+0x18>)
   140d8:	5c18      	ldrb	r0, [r3, r0]
}
   140da:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported UUID type.");
   140dc:	4803      	ldr	r0, [pc, #12]	; (140ec <get_uuid_size.isra.0+0x1c>)
   140de:	2145      	movs	r1, #69	; 0x45
   140e0:	f016 fd42 	bl	2ab68 <z_log_minimal_printk>
   140e4:	2000      	movs	r0, #0
   140e6:	e7f8      	b.n	140da <get_uuid_size.isra.0+0xa>
   140e8:	00030cda 	.word	0x00030cda
   140ec:	00030b00 	.word	0x00030b00

000140f0 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   140f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   140f4:	4c18      	ldr	r4, [pc, #96]	; (14158 <attr_store.constprop.0+0x68>)
   140f6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   140fa:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   140fc:	4605      	mov	r5, r0
   140fe:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   14100:	d908      	bls.n	14114 <attr_store.constprop.0+0x24>
		LOG_ERR("No space for new attribute.");
   14102:	4816      	ldr	r0, [pc, #88]	; (1415c <attr_store.constprop.0+0x6c>)
   14104:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No space for attribute data.");
   14106:	f016 fd2f 	bl	2ab68 <z_log_minimal_printk>
		return NULL;
   1410a:	f04f 0800 	mov.w	r8, #0
}
   1410e:	4640      	mov	r0, r8
   14110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   14114:	6803      	ldr	r3, [r0, #0]
   14116:	7818      	ldrb	r0, [r3, #0]
   14118:	f7ff ffda 	bl	140d0 <get_uuid_size.isra.0>
   1411c:	4607      	mov	r7, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   1411e:	4430      	add	r0, r6
   14120:	f7ff ff82 	bl	14028 <user_data_alloc.constprop.0>
	if (!attr_data) {
   14124:	b910      	cbnz	r0, 1412c <attr_store.constprop.0+0x3c>
		LOG_ERR("No space for attribute data.");
   14126:	480e      	ldr	r0, [pc, #56]	; (14160 <attr_store.constprop.0+0x70>)
   14128:	2145      	movs	r1, #69	; 0x45
   1412a:	e7ec      	b.n	14106 <attr_store.constprop.0+0x16>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   1412c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   14130:	1c5a      	adds	r2, r3, #1
   14132:	3303      	adds	r3, #3
   14134:	00db      	lsls	r3, r3, #3
   14136:	f103 0804 	add.w	r8, r3, #4
   1413a:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   1413e:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
   14140:	441c      	add	r4, r3
   14142:	8a2a      	ldrh	r2, [r5, #16]
   14144:	8122      	strh	r2, [r4, #8]
	cur_attr->perm = attr->perm;
   14146:	8a6b      	ldrh	r3, [r5, #18]
   14148:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   1414a:	4430      	add	r0, r6
   1414c:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   1414e:	6829      	ldr	r1, [r5, #0]
   14150:	463a      	mov	r2, r7
   14152:	f017 fcd1 	bl	2baf8 <memcpy>
	return cur_attr;
   14156:	e7da      	b.n	1410e <attr_store.constprop.0+0x1e>
   14158:	20002c18 	.word	0x20002c18
   1415c:	00030b1c 	.word	0x00030b1c
   14160:	00030b3d 	.word	0x00030b3d

00014164 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   14164:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   14166:	4605      	mov	r5, r0
   14168:	b930      	cbnz	r0, 14178 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
   1416a:	480b      	ldr	r0, [pc, #44]	; (14198 <uuid_store.constprop.0+0x34>)
   1416c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No space for a UUID.");
   1416e:	f016 fcfb 	bl	2ab68 <z_log_minimal_printk>
		return NULL;
   14172:	2400      	movs	r4, #0
}
   14174:	4620      	mov	r0, r4
   14176:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   14178:	7800      	ldrb	r0, [r0, #0]
   1417a:	f7ff ffa9 	bl	140d0 <get_uuid_size.isra.0>
   1417e:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
   14180:	f7ff ff52 	bl	14028 <user_data_alloc.constprop.0>
   14184:	4604      	mov	r4, r0
	if (!buffer) {
   14186:	b910      	cbnz	r0, 1418e <uuid_store.constprop.0+0x2a>
		LOG_ERR("No space for a UUID.");
   14188:	4804      	ldr	r0, [pc, #16]	; (1419c <uuid_store.constprop.0+0x38>)
   1418a:	2145      	movs	r1, #69	; 0x45
   1418c:	e7ef      	b.n	1416e <uuid_store.constprop.0+0xa>
	memcpy(buffer, uuid, size);
   1418e:	4632      	mov	r2, r6
   14190:	4629      	mov	r1, r5
   14192:	f017 fcb1 	bl	2baf8 <memcpy>
	return (struct bt_uuid *)buffer;
   14196:	e7ed      	b.n	14174 <uuid_store.constprop.0+0x10>
   14198:	00030b5f 	.word	0x00030b5f
   1419c:	00030b78 	.word	0x00030b78

000141a0 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   141a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   141a4:	4c83      	ldr	r4, [pc, #524]	; (143b4 <discovery_callback+0x214>)
   141a6:	6823      	ldr	r3, [r4, #0]
   141a8:	4283      	cmp	r3, r0
{
   141aa:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   141ac:	d00c      	beq.n	141c8 <discovery_callback+0x28>
		LOG_ERR("Unexpected conn object. Aborting.");
   141ae:	2145      	movs	r1, #69	; 0x45
   141b0:	4881      	ldr	r0, [pc, #516]	; (143b8 <discovery_callback+0x218>)
   141b2:	f016 fcd9 	bl	2ab68 <z_log_minimal_printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   141b6:	f06f 010d 	mvn.w	r1, #13
   141ba:	4620      	mov	r0, r4
   141bc:	f017 f893 	bl	2b2e6 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   141c0:	2000      	movs	r0, #0

		break;
	}

	return BT_GATT_ITER_STOP;
}
   141c2:	b002      	add	sp, #8
   141c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141c8:	7c13      	ldrb	r3, [r2, #16]
	switch (params->type) {
   141ca:	2b03      	cmp	r3, #3
   141cc:	f000 80ba 	beq.w	14344 <discovery_callback+0x1a4>
   141d0:	d80a      	bhi.n	141e8 <discovery_callback+0x48>
   141d2:	2b02      	cmp	r3, #2
   141d4:	d124      	bne.n	14220 <discovery_callback+0x80>
		__ASSERT(false, "Unknown param type.");
   141d6:	4979      	ldr	r1, [pc, #484]	; (143bc <discovery_callback+0x21c>)
   141d8:	4879      	ldr	r0, [pc, #484]	; (143c0 <discovery_callback+0x220>)
   141da:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   141de:	f016 fcb5 	bl	2ab4c <assert_print>
   141e2:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   141e6:	e046      	b.n	14276 <discovery_callback+0xd6>
	switch (params->type) {
   141e8:	2b05      	cmp	r3, #5
   141ea:	d1f4      	bne.n	141d6 <discovery_callback+0x36>
	if (!attr) {
   141ec:	2900      	cmp	r1, #0
   141ee:	f040 8084 	bne.w	142fa <discovery_callback+0x15a>
		if (dm->cur_attr_id > 1) {
   141f2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   141f6:	2b01      	cmp	r3, #1
   141f8:	d968      	bls.n	142cc <discovery_callback+0x12c>
				dm->attrs[0].handle + 1;
   141fa:	8c23      	ldrh	r3, [r4, #32]
   141fc:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   141fe:	8223      	strh	r3, [r4, #16]
			int err = bt_gatt_discover(dm->conn,
   14200:	f104 0108 	add.w	r1, r4, #8
			dm->discover_params.type =
   14204:	2303      	movs	r3, #3
   14206:	7623      	strb	r3, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
   14208:	f007 fd2e 	bl	1bc68 <bt_gatt_discover>
			if (err) {
   1420c:	4605      	mov	r5, r0
   1420e:	2800      	cmp	r0, #0
   14210:	d0d6      	beq.n	141c0 <discovery_callback+0x20>
				LOG_ERR("Characteristic discover failed,"
   14212:	4602      	mov	r2, r0
   14214:	2145      	movs	r1, #69	; 0x45
   14216:	486b      	ldr	r0, [pc, #428]	; (143c4 <discovery_callback+0x224>)
   14218:	f016 fca6 	bl	2ab68 <z_log_minimal_printk>
				discovery_complete_error(dm, err);
   1421c:	4629      	mov	r1, r5
   1421e:	e7cc      	b.n	141ba <discovery_callback+0x1a>
	if (!attr) {
   14220:	b919      	cbnz	r1, 1422a <discovery_callback+0x8a>
		discovery_complete_not_found(dm);
   14222:	4620      	mov	r0, r4
   14224:	f017 f875 	bl	2b312 <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
   14228:	e7ca      	b.n	141c0 <discovery_callback+0x20>
	struct bt_gatt_service_val *service_val = attr->user_data;
   1422a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   1422e:	4628      	mov	r0, r5
   14230:	2108      	movs	r1, #8
   14232:	f7ff ff5d 	bl	140f0 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   14236:	2700      	movs	r7, #0
		attr_store(dm, attr, sizeof(*service_val));
   14238:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   1423a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1423e:	6828      	ldr	r0, [r5, #0]
   14240:	f88d 7000 	strb.w	r7, [sp]
   14244:	4669      	mov	r1, sp
   14246:	f8ad 3002 	strh.w	r3, [sp, #2]
   1424a:	f017 fce9 	bl	2bc20 <bt_uuid_cmp>
   1424e:	b1a8      	cbz	r0, 1427c <discovery_callback+0xdc>
   14250:	f642 0301 	movw	r3, #10241	; 0x2801
   14254:	6828      	ldr	r0, [r5, #0]
   14256:	f88d 7004 	strb.w	r7, [sp, #4]
   1425a:	a901      	add	r1, sp, #4
   1425c:	f8ad 3006 	strh.w	r3, [sp, #6]
   14260:	f017 fcde 	bl	2bc20 <bt_uuid_cmp>
   14264:	b150      	cbz	r0, 1427c <discovery_callback+0xdc>
   14266:	4955      	ldr	r1, [pc, #340]	; (143bc <discovery_callback+0x21c>)
   14268:	4855      	ldr	r0, [pc, #340]	; (143c0 <discovery_callback+0x220>)
   1426a:	f240 1227 	movw	r2, #295	; 0x127
   1426e:	f016 fc6d 	bl	2ab4c <assert_print>
   14272:	f240 1127 	movw	r1, #295	; 0x127
	__ASSERT_NO_MSG(cur_service_val != NULL);
   14276:	4851      	ldr	r0, [pc, #324]	; (143bc <discovery_callback+0x21c>)
   14278:	f016 fc61 	bl	2ab3e <assert_post_action>
	if (!cur_attr) {
   1427c:	b93e      	cbnz	r6, 1428e <discovery_callback+0xee>
		LOG_ERR("Not enough memory for service attribute.");
   1427e:	4852      	ldr	r0, [pc, #328]	; (143c8 <discovery_callback+0x228>)
   14280:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Not enough memory for service attribute data.");
   14282:	f016 fc71 	bl	2ab68 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   14286:	484b      	ldr	r0, [pc, #300]	; (143b4 <discovery_callback+0x214>)
   14288:	f06f 010b 	mvn.w	r1, #11
   1428c:	e796      	b.n	141bc <discovery_callback+0x1c>
		bt_gatt_dm_attr_service_val(cur_attr);
   1428e:	4630      	mov	r0, r6
   14290:	f017 f853 	bl	2b33a <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   14294:	4605      	mov	r5, r0
   14296:	b940      	cbnz	r0, 142aa <discovery_callback+0x10a>
   14298:	4948      	ldr	r1, [pc, #288]	; (143bc <discovery_callback+0x21c>)
   1429a:	4849      	ldr	r0, [pc, #292]	; (143c0 <discovery_callback+0x220>)
   1429c:	f240 123b 	movw	r2, #315	; 0x13b
   142a0:	f016 fc54 	bl	2ab4c <assert_print>
   142a4:	f240 113b 	movw	r1, #315	; 0x13b
   142a8:	e7e5      	b.n	14276 <discovery_callback+0xd6>
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
   142aa:	2208      	movs	r2, #8
   142ac:	4641      	mov	r1, r8
   142ae:	f017 fc23 	bl	2baf8 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   142b2:	6828      	ldr	r0, [r5, #0]
   142b4:	f7ff ff56 	bl	14164 <uuid_store.constprop.0>
   142b8:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   142ba:	b910      	cbnz	r0, 142c2 <discovery_callback+0x122>
		LOG_ERR("Not enough memory for service attribute data.");
   142bc:	4843      	ldr	r0, [pc, #268]	; (143cc <discovery_callback+0x22c>)
   142be:	2145      	movs	r1, #69	; 0x45
   142c0:	e7df      	b.n	14282 <discovery_callback+0xe2>
	dm->discover_params.end_handle = cur_service_val->end_handle;
   142c2:	88ab      	ldrh	r3, [r5, #4]
   142c4:	82e3      	strh	r3, [r4, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
   142c6:	88b2      	ldrh	r2, [r6, #4]
   142c8:	429a      	cmp	r2, r3
   142ca:	d102      	bne.n	142d2 <discovery_callback+0x132>
		discovery_complete(dm);
   142cc:	f7ff fee8 	bl	140a0 <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
   142d0:	e776      	b.n	141c0 <discovery_callback+0x20>
	dm->discover_params.uuid         = NULL;
   142d2:	2300      	movs	r3, #0
   142d4:	60a3      	str	r3, [r4, #8]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   142d6:	2305      	movs	r3, #5
   142d8:	7623      	strb	r3, [r4, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   142da:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   142dc:	493c      	ldr	r1, [pc, #240]	; (143d0 <discovery_callback+0x230>)
   142de:	6820      	ldr	r0, [r4, #0]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   142e0:	3301      	adds	r3, #1
   142e2:	8223      	strh	r3, [r4, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   142e4:	f007 fcc0 	bl	1bc68 <bt_gatt_discover>
	if (err) {
   142e8:	4602      	mov	r2, r0
   142ea:	2800      	cmp	r0, #0
   142ec:	f43f af68 	beq.w	141c0 <discovery_callback+0x20>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   142f0:	4838      	ldr	r0, [pc, #224]	; (143d4 <discovery_callback+0x234>)
   142f2:	2145      	movs	r1, #69	; 0x45
   142f4:	f016 fc38 	bl	2ab68 <z_log_minimal_printk>
   142f8:	e7c5      	b.n	14286 <discovery_callback+0xe6>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   142fa:	2600      	movs	r6, #0
   142fc:	f642 0303 	movw	r3, #10243	; 0x2803
   14300:	6828      	ldr	r0, [r5, #0]
   14302:	f88d 6004 	strb.w	r6, [sp, #4]
   14306:	a901      	add	r1, sp, #4
   14308:	f8ad 3006 	strh.w	r3, [sp, #6]
   1430c:	f017 fc88 	bl	2bc20 <bt_uuid_cmp>
   14310:	b950      	cbnz	r0, 14328 <discovery_callback+0x188>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   14312:	2108      	movs	r1, #8
   14314:	4628      	mov	r0, r5
   14316:	f7ff feeb 	bl	140f0 <attr_store.constprop.0>
   1431a:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   1431c:	f017 f82d 	bl	2b37a <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   14320:	6823      	ldr	r3, [r4, #0]
   14322:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
   14324:	2001      	movs	r0, #1
   14326:	e74c      	b.n	141c2 <discovery_callback+0x22>
		cur_attr = attr_store(dm, attr, 0);
   14328:	4631      	mov	r1, r6
   1432a:	4628      	mov	r0, r5
   1432c:	f7ff fee0 	bl	140f0 <attr_store.constprop.0>
	if (!cur_attr) {
   14330:	2800      	cmp	r0, #0
   14332:	d1f7      	bne.n	14324 <discovery_callback+0x184>
		LOG_ERR("Not enough memory for next attribute descriptor"
   14334:	8a2a      	ldrh	r2, [r5, #16]
   14336:	4828      	ldr	r0, [pc, #160]	; (143d8 <discovery_callback+0x238>)
   14338:	2145      	movs	r1, #69	; 0x45
   1433a:	f016 fc15 	bl	2ab68 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   1433e:	f06f 010b 	mvn.w	r1, #11
   14342:	e73a      	b.n	141ba <discovery_callback+0x1a>
	if (!attr) {
   14344:	2900      	cmp	r1, #0
   14346:	d0c1      	beq.n	142cc <discovery_callback+0x12c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   14348:	2300      	movs	r3, #0
   1434a:	f88d 3004 	strb.w	r3, [sp, #4]
   1434e:	6828      	ldr	r0, [r5, #0]
   14350:	f642 0303 	movw	r3, #10243	; 0x2803
   14354:	a901      	add	r1, sp, #4
   14356:	f8ad 3006 	strh.w	r3, [sp, #6]
   1435a:	f017 fc61 	bl	2bc20 <bt_uuid_cmp>
   1435e:	b140      	cbz	r0, 14372 <discovery_callback+0x1d2>
   14360:	4916      	ldr	r1, [pc, #88]	; (143bc <discovery_callback+0x21c>)
   14362:	4817      	ldr	r0, [pc, #92]	; (143c0 <discovery_callback+0x220>)
   14364:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   14368:	f016 fbf0 	bl	2ab4c <assert_print>
   1436c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   14370:	e781      	b.n	14276 <discovery_callback+0xd6>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   14372:	8a29      	ldrh	r1, [r5, #16]
   14374:	4620      	mov	r0, r4
   14376:	f016 ff72 	bl	2b25e <attr_find_by_handle>
	if (!cur_attr) {
   1437a:	b910      	cbnz	r0, 14382 <discovery_callback+0x1e2>
		discovery_complete_error(dm, -ESRCH);
   1437c:	f06f 0102 	mvn.w	r1, #2
   14380:	e71b      	b.n	141ba <discovery_callback+0x1a>
	gatt_chrc = attr->user_data;
   14382:	68ee      	ldr	r6, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   14384:	f016 fff9 	bl	2b37a <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   14388:	4605      	mov	r5, r0
   1438a:	b940      	cbnz	r0, 1439e <discovery_callback+0x1fe>
   1438c:	490b      	ldr	r1, [pc, #44]	; (143bc <discovery_callback+0x21c>)
   1438e:	480c      	ldr	r0, [pc, #48]	; (143c0 <discovery_callback+0x220>)
   14390:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   14394:	f016 fbda 	bl	2ab4c <assert_print>
   14398:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   1439c:	e76b      	b.n	14276 <discovery_callback+0xd6>
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
   1439e:	2208      	movs	r2, #8
   143a0:	4631      	mov	r1, r6
   143a2:	f017 fba9 	bl	2baf8 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   143a6:	6828      	ldr	r0, [r5, #0]
   143a8:	f7ff fedc 	bl	14164 <uuid_store.constprop.0>
   143ac:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   143ae:	2800      	cmp	r0, #0
   143b0:	d1b8      	bne.n	14324 <discovery_callback+0x184>
   143b2:	e7c4      	b.n	1433e <discovery_callback+0x19e>
   143b4:	20002c18 	.word	0x20002c18
   143b8:	00030b92 	.word	0x00030b92
   143bc:	00030ad5 	.word	0x00030ad5
   143c0:	0003013d 	.word	0x0003013d
   143c4:	00030c46 	.word	0x00030c46
   143c8:	00030bb9 	.word	0x00030bb9
   143cc:	00030be7 	.word	0x00030be7
   143d0:	20002c20 	.word	0x20002c20
   143d4:	00030c1a 	.word	0x00030c1a
   143d8:	00030c76 	.word	0x00030c76

000143dc <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   143dc:	b570      	push	{r4, r5, r6, lr}
   143de:	4605      	mov	r5, r0
   143e0:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   143e2:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   143e4:	4621      	mov	r1, r4
   143e6:	4628      	mov	r0, r5
   143e8:	f016 ffdf 	bl	2b3aa <bt_gatt_dm_char_next>
   143ec:	4604      	mov	r4, r0
   143ee:	b198      	cbz	r0, 14418 <bt_gatt_dm_char_by_uuid+0x3c>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   143f0:	f016 ffc3 	bl	2b37a <bt_gatt_dm_attr_chrc_val>

		__ASSERT_NO_MSG(chrc != NULL);
   143f4:	b950      	cbnz	r0, 1440c <bt_gatt_dm_char_by_uuid+0x30>
   143f6:	4909      	ldr	r1, [pc, #36]	; (1441c <bt_gatt_dm_char_by_uuid+0x40>)
   143f8:	4809      	ldr	r0, [pc, #36]	; (14420 <bt_gatt_dm_char_by_uuid+0x44>)
   143fa:	f44f 7207 	mov.w	r2, #540	; 0x21c
   143fe:	f016 fba5 	bl	2ab4c <assert_print>
   14402:	4806      	ldr	r0, [pc, #24]	; (1441c <bt_gatt_dm_char_by_uuid+0x40>)
   14404:	f44f 7107 	mov.w	r1, #540	; 0x21c
   14408:	f016 fb99 	bl	2ab3e <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   1440c:	6801      	ldr	r1, [r0, #0]
   1440e:	4630      	mov	r0, r6
   14410:	f017 fc06 	bl	2bc20 <bt_uuid_cmp>
   14414:	2800      	cmp	r0, #0
   14416:	d1e5      	bne.n	143e4 <bt_gatt_dm_char_by_uuid+0x8>
			return curr;
		}
	}

	return NULL;
}
   14418:	4620      	mov	r0, r4
   1441a:	bd70      	pop	{r4, r5, r6, pc}
   1441c:	00030ad5 	.word	0x00030ad5
   14420:	0003013d 	.word	0x0003013d

00014424 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   14424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14426:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   14428:	460d      	mov	r5, r1
   1442a:	b119      	cbz	r1, 14434 <bt_gatt_dm_start+0x10>
   1442c:	7809      	ldrb	r1, [r1, #0]
   1442e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   14432:	d14b      	bne.n	144cc <bt_gatt_dm_start+0xa8>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   14434:	2a00      	cmp	r2, #0
   14436:	d049      	beq.n	144cc <bt_gatt_dm_start+0xa8>
   14438:	f3bf 8f5b 	dmb	ish
   1443c:	4c26      	ldr	r4, [pc, #152]	; (144d8 <bt_gatt_dm_start+0xb4>)
   1443e:	e854 1f00 	ldrex	r1, [r4]
   14442:	f041 0001 	orr.w	r0, r1, #1
   14446:	e844 0700 	strex	r7, r0, [r4]
   1444a:	2f00      	cmp	r7, #0
   1444c:	d1f7      	bne.n	1443e <bt_gatt_dm_start+0x1a>
   1444e:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   14452:	f011 0101 	ands.w	r1, r1, #1
   14456:	d13c      	bne.n	144d2 <bt_gatt_dm_start+0xae>
		return -EALREADY;
	}

	dm->conn = conn;
   14458:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   1445c:	2d00      	cmp	r5, #0
	dm->context = context;
   1445e:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   14462:	bf14      	ite	ne
   14464:	2301      	movne	r3, #1
   14466:	2300      	moveq	r3, #0
	list->tail = NULL;
   14468:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
   1446c:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	dm->callback = cb;
   14470:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
   14474:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
   14478:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158

	if (svc_uuid) {
   1447c:	d00a      	beq.n	14494 <bt_gatt_dm_start+0x70>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
   1447e:	7828      	ldrb	r0, [r5, #0]
   14480:	f7ff fe26 	bl	140d0 <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   14484:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
   14486:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   14488:	f504 709e 	add.w	r0, r4, #316	; 0x13c
   1448c:	f017 fb34 	bl	2baf8 <memcpy>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   14490:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
   14494:	4b11      	ldr	r3, [pc, #68]	; (144dc <bt_gatt_dm_start+0xb8>)
   14496:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   14498:	2301      	movs	r3, #1
   1449a:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   1449c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   144a0:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   144a2:	490f      	ldr	r1, [pc, #60]	; (144e0 <bt_gatt_dm_start+0xbc>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   144a4:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   144a6:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   144a8:	4630      	mov	r0, r6
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   144aa:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   144ac:	f007 fbdc 	bl	1bc68 <bt_gatt_discover>
	if (err) {
   144b0:	4604      	mov	r4, r0
   144b2:	b148      	cbz	r0, 144c8 <bt_gatt_dm_start+0xa4>
		LOG_ERR("Discover failed, error: %d.", err);
   144b4:	4602      	mov	r2, r0
   144b6:	2145      	movs	r1, #69	; 0x45
   144b8:	480a      	ldr	r0, [pc, #40]	; (144e4 <bt_gatt_dm_start+0xc0>)
   144ba:	f016 fb55 	bl	2ab68 <z_log_minimal_printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   144be:	4806      	ldr	r0, [pc, #24]	; (144d8 <bt_gatt_dm_start+0xb4>)
   144c0:	f06f 0101 	mvn.w	r1, #1
   144c4:	f016 ff00 	bl	2b2c8 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   144c8:	4620      	mov	r0, r4
   144ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   144cc:	f06f 0415 	mvn.w	r4, #21
   144d0:	e7fa      	b.n	144c8 <bt_gatt_dm_start+0xa4>
		return -EALREADY;
   144d2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   144d6:	e7f7      	b.n	144c8 <bt_gatt_dm_start+0xa4>
   144d8:	20002d50 	.word	0x20002d50
   144dc:	000141a1 	.word	0x000141a1
   144e0:	20002c20 	.word	0x20002c20
   144e4:	00030cb9 	.word	0x00030cb9

000144e8 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   144e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144ea:	4c06      	ldr	r4, [pc, #24]	; (14504 <scan_default_param_set+0x1c>)
   144ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
   144ee:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144f0:	ad01      	add	r5, sp, #4
   144f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   144f4:	ad01      	add	r5, sp, #4
   144f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144f8:	6826      	ldr	r6, [r4, #0]
	bt_scan.scan_param = *scan_param;
   144fa:	4c03      	ldr	r4, [pc, #12]	; (14508 <scan_default_param_set+0x20>)
   144fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   144fe:	6026      	str	r6, [r4, #0]
}
   14500:	b006      	add	sp, #24
   14502:	bd70      	pop	{r4, r5, r6, pc}
   14504:	0002f4d4 	.word	0x0002f4d4
   14508:	20002db4 	.word	0x20002db4

0001450c <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   1450c:	4b03      	ldr	r3, [pc, #12]	; (1451c <scan_default_conn_param_set+0x10>)
   1450e:	4904      	ldr	r1, [pc, #16]	; (14520 <scan_default_conn_param_set+0x14>)
   14510:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   14514:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
   14518:	4770      	bx	lr
   1451a:	bf00      	nop
   1451c:	20002d84 	.word	0x20002d84
   14520:	00280018 	.word	0x00280018

00014524 <uuid_check>:
{
   14524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   14528:	4e2b      	ldr	r6, [pc, #172]	; (145d8 <uuid_check+0xb4>)
{
   1452a:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   1452c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
{
   14530:	9203      	str	r2, [sp, #12]
   14532:	4604      	mov	r4, r0
   14534:	4688      	mov	r8, r1
	if (is_uuid_filter_enabled()) {
   14536:	b313      	cbz	r3, 1457e <uuid_check+0x5a>
	uint8_t data_len = data->data_len;
   14538:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   1453a:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   1453e:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   14542:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   14544:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   14546:	463d      	mov	r5, r7
	for (size_t i = 0; i < counter; i++) {
   14548:	4557      	cmp	r7, sl
   1454a:	d305      	bcc.n	14558 <uuid_check+0x34>
	control->filter_status.uuid.count = uuid_match_cnt;
   1454c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   14550:	f1bb 0f00 	cmp.w	fp, #0
   14554:	d111      	bne.n	1457a <uuid_check+0x56>
   14556:	e031      	b.n	145bc <uuid_check+0x98>
		if (find_uuid(data->data, data_len, uuid_type,
   14558:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1455c:	9a03      	ldr	r2, [sp, #12]
   1455e:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   14560:	4b1e      	ldr	r3, [pc, #120]	; (145dc <uuid_check+0xb8>)
   14562:	5c9b      	ldrb	r3, [r3, r2]
   14564:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   14566:	f04f 0900 	mov.w	r9, #0
   1456a:	9b01      	ldr	r3, [sp, #4]
   1456c:	4599      	cmp	r9, r3
   1456e:	d309      	bcc.n	14584 <uuid_check+0x60>
		} else if (all_filters_mode) {
   14570:	f1bb 0f00 	cmp.w	fp, #0
   14574:	d02c      	beq.n	145d0 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   14576:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   1457a:	45aa      	cmp	sl, r5
   1457c:	d020      	beq.n	145c0 <uuid_check+0x9c>
}
   1457e:	b00b      	add	sp, #44	; 0x2c
   14580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   14584:	9b02      	ldr	r3, [sp, #8]
   14586:	9a00      	ldr	r2, [sp, #0]
   14588:	eb03 0109 	add.w	r1, r3, r9
   1458c:	a805      	add	r0, sp, #20
   1458e:	f017 fb75 	bl	2bc7c <bt_uuid_create>
   14592:	2800      	cmp	r0, #0
   14594:	d0ec      	beq.n	14570 <uuid_check+0x4c>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   14596:	68b1      	ldr	r1, [r6, #8]
   14598:	a805      	add	r0, sp, #20
   1459a:	f017 fb41 	bl	2bc20 <bt_uuid_cmp>
   1459e:	b110      	cbz	r0, 145a6 <uuid_check+0x82>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   145a0:	9b00      	ldr	r3, [sp, #0]
   145a2:	4499      	add	r9, r3
   145a4:	e7e1      	b.n	1456a <uuid_check+0x46>
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   145a6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
				uuid_filter->uuid[i].uuid;
   145aa:	68b1      	ldr	r1, [r6, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   145ac:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   145ae:	3501      	adds	r5, #1
   145b0:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   145b2:	f1bb 0f00 	cmp.w	fp, #0
   145b6:	d10b      	bne.n	145d0 <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   145b8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   145bc:	2d00      	cmp	r5, #0
   145be:	d0de      	beq.n	1457e <uuid_check+0x5a>
			control->filter_match_cnt++;
   145c0:	7863      	ldrb	r3, [r4, #1]
   145c2:	3301      	adds	r3, #1
   145c4:	7063      	strb	r3, [r4, #1]
			control->filter_status.uuid.match = true;
   145c6:	2301      	movs	r3, #1
   145c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			control->filter_match = true;
   145cc:	70a3      	strb	r3, [r4, #2]
}
   145ce:	e7d6      	b.n	1457e <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   145d0:	3701      	adds	r7, #1
   145d2:	3618      	adds	r6, #24
   145d4:	e7b8      	b.n	14548 <uuid_check+0x24>
   145d6:	bf00      	nop
   145d8:	20002d84 	.word	0x20002d84
   145dc:	00030ce8 	.word	0x00030ce8

000145e0 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   145e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   145e2:	4b09      	ldr	r3, [pc, #36]	; (14608 <notify_filter_matched.constprop.0+0x28>)
   145e4:	681c      	ldr	r4, [r3, #0]
   145e6:	4605      	mov	r5, r0
   145e8:	460e      	mov	r6, r1
   145ea:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   145ec:	b154      	cbz	r4, 14604 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
   145ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   145f2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   145f4:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
   145f6:	b11b      	cbz	r3, 14600 <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
   145f8:	463a      	mov	r2, r7
   145fa:	4631      	mov	r1, r6
   145fc:	4628      	mov	r0, r5
   145fe:	4798      	blx	r3
	return node->next;
   14600:	6864      	ldr	r4, [r4, #4]
   14602:	e7f3      	b.n	145ec <notify_filter_matched.constprop.0+0xc>
}
   14604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14606:	bf00      	nop
   14608:	20002d7c 	.word	0x20002d7c

0001460c <bt_scan_cb_register>:
	if (!cb) {
   1460c:	b150      	cbz	r0, 14624 <bt_scan_cb_register+0x18>
	parent->next = child;
   1460e:	2300      	movs	r3, #0
   14610:	6043      	str	r3, [r0, #4]
	return list->tail;
   14612:	4b05      	ldr	r3, [pc, #20]	; (14628 <bt_scan_cb_register+0x1c>)
   14614:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   14616:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   14618:	b911      	cbnz	r1, 14620 <bt_scan_cb_register+0x14>
	list->head = node;
   1461a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1461e:	4770      	bx	lr
	parent->next = child;
   14620:	600a      	str	r2, [r1, #0]
	list->tail = node;
   14622:	605a      	str	r2, [r3, #4]
}
   14624:	4770      	bx	lr
   14626:	bf00      	nop
   14628:	20002d7c 	.word	0x20002d7c

0001462c <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   1462c:	b570      	push	{r4, r5, r6, lr}
   1462e:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   14630:	460c      	mov	r4, r1
   14632:	2900      	cmp	r1, #0
   14634:	d045      	beq.n	146c2 <bt_scan_filter_add+0x96>
	return z_impl_k_mutex_lock(mutex, timeout);
   14636:	4824      	ldr	r0, [pc, #144]	; (146c8 <bt_scan_filter_add+0x9c>)
   14638:	f04f 32ff 	mov.w	r2, #4294967295
   1463c:	f04f 33ff 	mov.w	r3, #4294967295
   14640:	f010 f95a 	bl	248f8 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   14644:	2d03      	cmp	r5, #3
   14646:	d00c      	beq.n	14662 <bt_scan_filter_add+0x36>
   14648:	d935      	bls.n	146b6 <bt_scan_filter_add+0x8a>
   1464a:	3d04      	subs	r5, #4
   1464c:	2d01      	cmp	r5, #1
   1464e:	bf8c      	ite	hi
   14650:	f06f 0415 	mvnhi.w	r4, #21
   14654:	f06f 040b 	mvnls.w	r4, #11
	return z_impl_k_mutex_unlock(mutex);
   14658:	481b      	ldr	r0, [pc, #108]	; (146c8 <bt_scan_filter_add+0x9c>)
   1465a:	f010 fa03 	bl	24a64 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   1465e:	4620      	mov	r0, r4
   14660:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   14662:	4a1a      	ldr	r2, [pc, #104]	; (146cc <bt_scan_filter_add+0xa0>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   14664:	f892 3020 	ldrb.w	r3, [r2, #32]
   14668:	bb2b      	cbnz	r3, 146b6 <bt_scan_filter_add+0x8a>
	switch (uuid->type) {
   1466a:	7823      	ldrb	r3, [r4, #0]
   1466c:	2b01      	cmp	r3, #1
   1466e:	d00b      	beq.n	14688 <bt_scan_filter_add+0x5c>
   14670:	2b02      	cmp	r3, #2
   14672:	d010      	beq.n	14696 <bt_scan_filter_add+0x6a>
   14674:	bb13      	cbnz	r3, 146bc <bt_scan_filter_add+0x90>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   14676:	6820      	ldr	r0, [r4, #0]
   14678:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
   1467a:	4b15      	ldr	r3, [pc, #84]	; (146d0 <bt_scan_filter_add+0xa4>)
   1467c:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   1467e:	2301      	movs	r3, #1
   14680:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   14684:	2400      	movs	r4, #0
   14686:	e7e7      	b.n	14658 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   14688:	e894 0003 	ldmia.w	r4, {r0, r1}
   1468c:	f102 030c 	add.w	r3, r2, #12
   14690:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
   14694:	e7f1      	b.n	1467a <bt_scan_filter_add+0x4e>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   14696:	4623      	mov	r3, r4
   14698:	f103 0610 	add.w	r6, r3, #16
   1469c:	f102 040c 	add.w	r4, r2, #12
   146a0:	6818      	ldr	r0, [r3, #0]
   146a2:	6859      	ldr	r1, [r3, #4]
   146a4:	4625      	mov	r5, r4
   146a6:	c503      	stmia	r5!, {r0, r1}
   146a8:	3308      	adds	r3, #8
   146aa:	42b3      	cmp	r3, r6
   146ac:	462c      	mov	r4, r5
   146ae:	d1f7      	bne.n	146a0 <bt_scan_filter_add+0x74>
   146b0:	781b      	ldrb	r3, [r3, #0]
   146b2:	702b      	strb	r3, [r5, #0]
		break;
   146b4:	e7e1      	b.n	1467a <bt_scan_filter_add+0x4e>
   146b6:	f06f 040b 	mvn.w	r4, #11
   146ba:	e7cd      	b.n	14658 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   146bc:	f06f 0415 	mvn.w	r4, #21
   146c0:	e7ca      	b.n	14658 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   146c2:	f06f 0415 	mvn.w	r4, #21
   146c6:	e7ca      	b.n	1465e <bt_scan_filter_add+0x32>
   146c8:	20000b14 	.word	0x20000b14
   146cc:	20002d84 	.word	0x20002d84
   146d0:	20002d90 	.word	0x20002d90

000146d4 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   146d4:	4b05      	ldr	r3, [pc, #20]	; (146ec <bt_scan_filter_disable+0x18>)
   146d6:	2200      	movs	r2, #0
   146d8:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   146da:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   146dc:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   146de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   146e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   146e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   146ea:	4770      	bx	lr
   146ec:	20002d84 	.word	0x20002d84

000146f0 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   146f0:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   146f2:	0683      	lsls	r3, r0, #26
   146f4:	d022      	beq.n	1473c <bt_scan_filter_enable+0x4c>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   146f6:	f7ff ffed 	bl	146d4 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   146fa:	4b12      	ldr	r3, [pc, #72]	; (14744 <bt_scan_filter_enable+0x54>)
   146fc:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   14700:	bf1c      	itt	ne
   14702:	2201      	movne	r2, #1
   14704:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   14706:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   14708:	bf44      	itt	mi
   1470a:	2201      	movmi	r2, #1
   1470c:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   1470e:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   14710:	bf44      	itt	mi
   14712:	2201      	movmi	r2, #1
   14714:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   14716:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   14718:	bf44      	itt	mi
   1471a:	2201      	movmi	r2, #1
   1471c:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   14720:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   14722:	bf44      	itt	mi
   14724:	2201      	movmi	r2, #1
   14726:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   1472a:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   1472c:	bf44      	itt	mi
   1472e:	2201      	movmi	r2, #1
   14730:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   14734:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28

	return 0;
   14738:	2000      	movs	r0, #0
}
   1473a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1473c:	f06f 0015 	mvn.w	r0, #21
   14740:	e7fb      	b.n	1473a <bt_scan_filter_enable+0x4a>
   14742:	bf00      	nop
   14744:	20002d84 	.word	0x20002d84

00014748 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   14748:	b570      	push	{r4, r5, r6, lr}
   1474a:	b086      	sub	sp, #24
   1474c:	460e      	mov	r6, r1
   1474e:	4605      	mov	r5, r0
	bt_scan_stop();
   14750:	f016 febb 	bl	2b4ca <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   14754:	4b15      	ldr	r3, [pc, #84]	; (147ac <scan_connect_with_target.part.0+0x64>)
   14756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14758:	ac02      	add	r4, sp, #8
   1475a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   1475e:	ab01      	add	r3, sp, #4
   14760:	4a13      	ldr	r2, [pc, #76]	; (147b0 <scan_connect_with_target.part.0+0x68>)
   14762:	4621      	mov	r1, r4
   14764:	4630      	mov	r0, r6
   14766:	f004 fab7 	bl	18cd8 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
   1476a:	3508      	adds	r5, #8
   1476c:	4b11      	ldr	r3, [pc, #68]	; (147b4 <scan_connect_with_target.part.0+0x6c>)
	if (err) {
   1476e:	b150      	cbz	r0, 14786 <scan_connect_with_target.part.0+0x3e>
	return list->head;
   14770:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14772:	b1c4      	cbz	r4, 147a6 <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
   14774:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14778:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1477a:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
   1477c:	b10b      	cbz	r3, 14782 <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
   1477e:	4628      	mov	r0, r5
   14780:	4798      	blx	r3
	return node->next;
   14782:	6864      	ldr	r4, [r4, #4]
   14784:	e7f5      	b.n	14772 <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
   14786:	9e01      	ldr	r6, [sp, #4]
	return list->head;
   14788:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1478a:	b14c      	cbz	r4, 147a0 <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
   1478c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14790:	68db      	ldr	r3, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14792:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
   14794:	b113      	cbz	r3, 1479c <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
   14796:	4631      	mov	r1, r6
   14798:	4628      	mov	r0, r5
   1479a:	4798      	blx	r3
	return node->next;
   1479c:	6864      	ldr	r4, [r4, #4]
   1479e:	e7f4      	b.n	1478a <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
   147a0:	9801      	ldr	r0, [sp, #4]
   147a2:	f003 ff97 	bl	186d4 <bt_conn_unref>
}
   147a6:	b006      	add	sp, #24
   147a8:	bd70      	pop	{r4, r5, r6, pc}
   147aa:	bf00      	nop
   147ac:	0002f4e8 	.word	0x0002f4e8
   147b0:	20002dc8 	.word	0x20002dc8
   147b4:	20002d7c 	.word	0x20002d7c

000147b8 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   147b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   147bc:	4d2c      	ldr	r5, [pc, #176]	; (14870 <scan_recv+0xb8>)
{
   147be:	b096      	sub	sp, #88	; 0x58
   147c0:	460c      	mov	r4, r1
   147c2:	4606      	mov	r6, r0
	memset(&scan_control, 0, sizeof(scan_control));
   147c4:	2254      	movs	r2, #84	; 0x54
   147c6:	2100      	movs	r1, #0
   147c8:	a801      	add	r0, sp, #4
   147ca:	f017 f9a0 	bl	2bb0e <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   147ce:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   147d2:	f88d 3007 	strb.w	r3, [sp, #7]
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   147d6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   147da:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   147de:	7a33      	ldrb	r3, [r6, #8]
	state->offset = net_buf_simple_headroom(buf);
   147e0:	4620      	mov	r0, r4
   147e2:	f003 0301 	and.w	r3, r3, #1
   147e6:	f88d 3008 	strb.w	r3, [sp, #8]
   147ea:	f019 fb91 	bl	2df10 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   147ee:	4921      	ldr	r1, [pc, #132]	; (14874 <scan_recv+0xbc>)
	state->len = buf->len;
   147f0:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   147f4:	4607      	mov	r7, r0
   147f6:	aa01      	add	r2, sp, #4
   147f8:	4620      	mov	r0, r4
   147fa:	f002 fbbd 	bl	16f78 <bt_data_parse>
	buf->data = buf->__buf + state->offset;
   147fe:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   14800:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   14804:	fa13 f787 	uxtah	r7, r3, r7
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   14808:	f105 0344 	add.w	r3, r5, #68	; 0x44
	scan_control.device_info.adv_data = ad;
   1480c:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   14810:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14814:	6027      	str	r7, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   14816:	6834      	ldr	r4, [r6, #0]
	scan_control.device_info.recv_info = info;
   14818:	9603      	str	r6, [sp, #12]
	if (control->all_mode &&
   1481a:	f89d 6008 	ldrb.w	r6, [sp, #8]
   1481e:	b1a3      	cbz	r3, 1484a <scan_recv+0x92>
   14820:	f89d 2005 	ldrb.w	r2, [sp, #5]
   14824:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14828:	429a      	cmp	r2, r3
   1482a:	d112      	bne.n	14852 <scan_recv+0x9a>
		notify_filter_matched(&control->device_info,
   1482c:	4632      	mov	r2, r6
   1482e:	a906      	add	r1, sp, #24
   14830:	a803      	add	r0, sp, #12
   14832:	f7ff fed5 	bl	145e0 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   14836:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1483a:	b11b      	cbz	r3, 14844 <scan_recv+0x8c>
   1483c:	4621      	mov	r1, r4
   1483e:	a801      	add	r0, sp, #4
   14840:	f7ff ff82 	bl	14748 <scan_connect_with_target.part.0>
}
   14844:	b016      	add	sp, #88	; 0x58
   14846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   1484a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1484e:	2b00      	cmp	r3, #0
   14850:	d1ec      	bne.n	1482c <scan_recv+0x74>
	return list->head;
   14852:	4b09      	ldr	r3, [pc, #36]	; (14878 <scan_recv+0xc0>)
   14854:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14856:	2c00      	cmp	r4, #0
   14858:	d0f4      	beq.n	14844 <scan_recv+0x8c>
		if (cb->cb_addr->filter_no_match) {
   1485a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1485e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14860:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
   14862:	b113      	cbz	r3, 1486a <scan_recv+0xb2>
			cb->cb_addr->filter_no_match(device_info, connectable);
   14864:	4631      	mov	r1, r6
   14866:	a803      	add	r0, sp, #12
   14868:	4798      	blx	r3
	return node->next;
   1486a:	6864      	ldr	r4, [r4, #4]
   1486c:	e7f3      	b.n	14856 <scan_recv+0x9e>
   1486e:	bf00      	nop
   14870:	20002d84 	.word	0x20002d84
   14874:	0002b499 	.word	0x0002b499
   14878:	20002d7c 	.word	0x20002d7c

0001487c <bt_scan_init>:
{
   1487c:	b570      	push	{r4, r5, r6, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1487e:	4c15      	ldr	r4, [pc, #84]	; (148d4 <bt_scan_init+0x58>)
{
   14880:	4606      	mov	r6, r0
	bt_le_scan_cb_register(&scan_cb);
   14882:	4815      	ldr	r0, [pc, #84]	; (148d8 <bt_scan_init+0x5c>)
   14884:	f003 fb2a 	bl	17edc <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   14888:	222c      	movs	r2, #44	; 0x2c
   1488a:	2100      	movs	r1, #0
   1488c:	4620      	mov	r0, r4
   1488e:	f017 f93e 	bl	2bb0e <memset>
	if (init) {
   14892:	b1be      	cbz	r6, 148c4 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   14894:	7933      	ldrb	r3, [r6, #4]
   14896:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   1489a:	6835      	ldr	r5, [r6, #0]
   1489c:	b15d      	cbz	r5, 148b6 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
   1489e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   148a0:	3430      	adds	r4, #48	; 0x30
   148a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   148a4:	682b      	ldr	r3, [r5, #0]
   148a6:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
   148a8:	68b2      	ldr	r2, [r6, #8]
   148aa:	b13a      	cbz	r2, 148bc <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
   148ac:	4b0b      	ldr	r3, [pc, #44]	; (148dc <bt_scan_init+0x60>)
   148ae:	6810      	ldr	r0, [r2, #0]
   148b0:	6851      	ldr	r1, [r2, #4]
   148b2:	c303      	stmia	r3!, {r0, r1}
}
   148b4:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   148b6:	f7ff fe17 	bl	144e8 <scan_default_param_set>
   148ba:	e7f5      	b.n	148a8 <bt_scan_init+0x2c>
}
   148bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
   148c0:	f7ff be24 	b.w	1450c <scan_default_conn_param_set>
		scan_default_param_set();
   148c4:	f7ff fe10 	bl	144e8 <scan_default_param_set>
		scan_default_conn_param_set();
   148c8:	f7ff fe20 	bl	1450c <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   148cc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   148d0:	e7f0      	b.n	148b4 <bt_scan_init+0x38>
   148d2:	bf00      	nop
   148d4:	20002d84 	.word	0x20002d84
   148d8:	20000704 	.word	0x20000704
   148dc:	20002dc8 	.word	0x20002dc8

000148e0 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   148e0:	4603      	mov	r3, r0
   148e2:	b108      	cbz	r0, 148e8 <bt_scan_start+0x8>
   148e4:	2801      	cmp	r0, #1
   148e6:	d105      	bne.n	148f4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   148e8:	4804      	ldr	r0, [pc, #16]	; (148fc <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   148ea:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   148ec:	f800 3f30 	strb.w	r3, [r0, #48]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   148f0:	f003 ba5e 	b.w	17db0 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   148f4:	f06f 0015 	mvn.w	r0, #21
   148f8:	4770      	bx	lr
   148fa:	bf00      	nop
   148fc:	20002d84 	.word	0x20002d84

00014900 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14900:	4904      	ldr	r1, [pc, #16]	; (14914 <sub_bytes+0x14>)
   14902:	1e43      	subs	r3, r0, #1
   14904:	300f      	adds	r0, #15
   14906:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1490a:	5c8a      	ldrb	r2, [r1, r2]
   1490c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   1490e:	4283      	cmp	r3, r0
   14910:	d1f9      	bne.n	14906 <sub_bytes+0x6>
	}
}
   14912:	4770      	bx	lr
   14914:	00030cf7 	.word	0x00030cf7

00014918 <tc_aes128_set_encrypt_key>:
{
   14918:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1491a:	4e26      	ldr	r6, [pc, #152]	; (149b4 <tc_aes128_set_encrypt_key+0x9c>)
{
   1491c:	4607      	mov	r7, r0
   1491e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14920:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14922:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14924:	ad01      	add	r5, sp, #4
   14926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14928:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1492a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1492c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14930:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14934:	4638      	mov	r0, r7
   14936:	2f00      	cmp	r7, #0
   14938:	d038      	beq.n	149ac <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1493a:	2c00      	cmp	r4, #0
   1493c:	d038      	beq.n	149b0 <tc_aes128_set_encrypt_key+0x98>
   1493e:	1f38      	subs	r0, r7, #4
   14940:	4621      	mov	r1, r4
   14942:	4602      	mov	r2, r0
   14944:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14946:	784b      	ldrb	r3, [r1, #1]
   14948:	780d      	ldrb	r5, [r1, #0]
   1494a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1494c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14950:	78cd      	ldrb	r5, [r1, #3]
   14952:	432b      	orrs	r3, r5
   14954:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14956:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14958:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1495c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1495e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14962:	d1f0      	bne.n	14946 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14964:	4c14      	ldr	r4, [pc, #80]	; (149b8 <tc_aes128_set_encrypt_key+0xa0>)
   14966:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14968:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1496a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1496c:	d116      	bne.n	1499c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1496e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14972:	5ca5      	ldrb	r5, [r4, r2]
   14974:	0e1a      	lsrs	r2, r3, #24
   14976:	5ca2      	ldrb	r2, [r4, r2]
   14978:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1497c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14980:	b2db      	uxtb	r3, r3
   14982:	5d65      	ldrb	r5, [r4, r5]
   14984:	5ce3      	ldrb	r3, [r4, r3]
   14986:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1498a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1498e:	f021 0303 	bic.w	r3, r1, #3
   14992:	3330      	adds	r3, #48	; 0x30
   14994:	446b      	add	r3, sp
   14996:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1499a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1499c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   149a0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   149a2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   149a4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   149a6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   149a8:	d1de      	bne.n	14968 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   149aa:	2001      	movs	r0, #1
}
   149ac:	b00d      	add	sp, #52	; 0x34
   149ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   149b0:	4620      	mov	r0, r4
   149b2:	e7fb      	b.n	149ac <tc_aes128_set_encrypt_key+0x94>
   149b4:	0002f4f8 	.word	0x0002f4f8
   149b8:	00030cf7 	.word	0x00030cf7

000149bc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   149bc:	4801      	ldr	r0, [pc, #4]	; (149c4 <nrf_cc3xx_platform_abort_init+0x8>)
   149be:	f013 b975 	b.w	27cac <nrf_cc3xx_platform_set_abort>
   149c2:	bf00      	nop
   149c4:	0002f64c 	.word	0x0002f64c

000149c8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   149c8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   149ca:	4604      	mov	r4, r0
   149cc:	b918      	cbnz	r0, 149d6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   149ce:	4b0f      	ldr	r3, [pc, #60]	; (14a0c <mutex_free_platform+0x44>)
   149d0:	480f      	ldr	r0, [pc, #60]	; (14a10 <mutex_free_platform+0x48>)
   149d2:	685b      	ldr	r3, [r3, #4]
   149d4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   149d6:	6861      	ldr	r1, [r4, #4]
   149d8:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   149dc:	d00f      	beq.n	149fe <mutex_free_platform+0x36>
   149de:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   149e2:	d00c      	beq.n	149fe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   149e4:	4d0b      	ldr	r5, [pc, #44]	; (14a14 <mutex_free_platform+0x4c>)
   149e6:	42a9      	cmp	r1, r5
   149e8:	d009      	beq.n	149fe <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   149ea:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   149ee:	d007      	beq.n	14a00 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   149f0:	4809      	ldr	r0, [pc, #36]	; (14a18 <mutex_free_platform+0x50>)
   149f2:	4621      	mov	r1, r4
   149f4:	f00f fcbe 	bl	24374 <k_mem_slab_free>
        mutex->mutex = NULL;
   149f8:	2300      	movs	r3, #0
   149fa:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   149fc:	6065      	str	r5, [r4, #4]
}
   149fe:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14a00:	6820      	ldr	r0, [r4, #0]
   14a02:	2214      	movs	r2, #20
   14a04:	f017 f883 	bl	2bb0e <memset>
   14a08:	e7f8      	b.n	149fc <mutex_free_platform+0x34>
   14a0a:	bf00      	nop
   14a0c:	20000968 	.word	0x20000968
   14a10:	00030df7 	.word	0x00030df7
   14a14:	a95c5f2c 	.word	0xa95c5f2c
   14a18:	200032d0 	.word	0x200032d0

00014a1c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14a1c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14a1e:	b320      	cbz	r0, 14a6a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   14a20:	6843      	ldr	r3, [r0, #4]
   14a22:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14a26:	d110      	bne.n	14a4a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14a28:	2201      	movs	r2, #1
   14a2a:	6803      	ldr	r3, [r0, #0]
   14a2c:	f3bf 8f5b 	dmb	ish
   14a30:	e853 1f00 	ldrex	r1, [r3]
   14a34:	2900      	cmp	r1, #0
   14a36:	d103      	bne.n	14a40 <mutex_lock_platform+0x24>
   14a38:	e843 2000 	strex	r0, r2, [r3]
   14a3c:	2800      	cmp	r0, #0
   14a3e:	d1f7      	bne.n	14a30 <mutex_lock_platform+0x14>
   14a40:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a44:	d10d      	bne.n	14a62 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   14a46:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14a48:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14a4a:	4a09      	ldr	r2, [pc, #36]	; (14a70 <mutex_lock_platform+0x54>)
   14a4c:	4293      	cmp	r3, r2
   14a4e:	d00a      	beq.n	14a66 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14a50:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14a52:	f04f 32ff 	mov.w	r2, #4294967295
   14a56:	f04f 33ff 	mov.w	r3, #4294967295
   14a5a:	f00f ff4d 	bl	248f8 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14a5e:	2800      	cmp	r0, #0
   14a60:	d0f1      	beq.n	14a46 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a62:	4804      	ldr	r0, [pc, #16]	; (14a74 <mutex_lock_platform+0x58>)
   14a64:	e7f0      	b.n	14a48 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14a66:	4804      	ldr	r0, [pc, #16]	; (14a78 <mutex_lock_platform+0x5c>)
   14a68:	e7ee      	b.n	14a48 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14a6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14a6e:	e7eb      	b.n	14a48 <mutex_lock_platform+0x2c>
   14a70:	a95c5f2c 	.word	0xa95c5f2c
   14a74:	ffff8fe9 	.word	0xffff8fe9
   14a78:	ffff8fea 	.word	0xffff8fea

00014a7c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14a7c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14a7e:	b1d8      	cbz	r0, 14ab8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14a80:	6843      	ldr	r3, [r0, #4]
   14a82:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14a86:	d110      	bne.n	14aaa <mutex_unlock_platform+0x2e>
   14a88:	2200      	movs	r2, #0
   14a8a:	6803      	ldr	r3, [r0, #0]
   14a8c:	f3bf 8f5b 	dmb	ish
   14a90:	e853 1f00 	ldrex	r1, [r3]
   14a94:	2901      	cmp	r1, #1
   14a96:	d103      	bne.n	14aa0 <mutex_unlock_platform+0x24>
   14a98:	e843 2000 	strex	r0, r2, [r3]
   14a9c:	2800      	cmp	r0, #0
   14a9e:	d1f7      	bne.n	14a90 <mutex_unlock_platform+0x14>
   14aa0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14aa4:	d10b      	bne.n	14abe <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14aa6:	2000      	movs	r0, #0
    }
}
   14aa8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14aaa:	4a07      	ldr	r2, [pc, #28]	; (14ac8 <mutex_unlock_platform+0x4c>)
   14aac:	4293      	cmp	r3, r2
   14aae:	d008      	beq.n	14ac2 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14ab0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14ab2:	f00f ffd7 	bl	24a64 <z_impl_k_mutex_unlock>
   14ab6:	e7f6      	b.n	14aa6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14ab8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14abc:	e7f4      	b.n	14aa8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14abe:	4803      	ldr	r0, [pc, #12]	; (14acc <mutex_unlock_platform+0x50>)
   14ac0:	e7f2      	b.n	14aa8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14ac2:	4803      	ldr	r0, [pc, #12]	; (14ad0 <mutex_unlock_platform+0x54>)
   14ac4:	e7f0      	b.n	14aa8 <mutex_unlock_platform+0x2c>
   14ac6:	bf00      	nop
   14ac8:	a95c5f2c 	.word	0xa95c5f2c
   14acc:	ffff8fe9 	.word	0xffff8fe9
   14ad0:	ffff8fea 	.word	0xffff8fea

00014ad4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14ad4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14ad6:	4604      	mov	r4, r0
   14ad8:	b918      	cbnz	r0, 14ae2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14ada:	4b1d      	ldr	r3, [pc, #116]	; (14b50 <mutex_init_platform+0x7c>)
   14adc:	481d      	ldr	r0, [pc, #116]	; (14b54 <mutex_init_platform+0x80>)
   14ade:	685b      	ldr	r3, [r3, #4]
   14ae0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14ae2:	6863      	ldr	r3, [r4, #4]
   14ae4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14ae8:	d02f      	beq.n	14b4a <mutex_init_platform+0x76>
   14aea:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14aee:	d02c      	beq.n	14b4a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14af0:	4a19      	ldr	r2, [pc, #100]	; (14b58 <mutex_init_platform+0x84>)
   14af2:	4293      	cmp	r3, r2
   14af4:	d119      	bne.n	14b2a <mutex_init_platform+0x56>
   14af6:	6823      	ldr	r3, [r4, #0]
   14af8:	bb03      	cbnz	r3, 14b3c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14afa:	4818      	ldr	r0, [pc, #96]	; (14b5c <mutex_init_platform+0x88>)
   14afc:	f04f 32ff 	mov.w	r2, #4294967295
   14b00:	f04f 33ff 	mov.w	r3, #4294967295
   14b04:	4621      	mov	r1, r4
   14b06:	f00f fbdd 	bl	242c4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14b0a:	b908      	cbnz	r0, 14b10 <mutex_init_platform+0x3c>
   14b0c:	6823      	ldr	r3, [r4, #0]
   14b0e:	b91b      	cbnz	r3, 14b18 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   14b10:	4b0f      	ldr	r3, [pc, #60]	; (14b50 <mutex_init_platform+0x7c>)
   14b12:	4813      	ldr	r0, [pc, #76]	; (14b60 <mutex_init_platform+0x8c>)
   14b14:	685b      	ldr	r3, [r3, #4]
   14b16:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14b18:	6820      	ldr	r0, [r4, #0]
   14b1a:	2214      	movs	r2, #20
   14b1c:	2100      	movs	r1, #0
   14b1e:	f016 fff6 	bl	2bb0e <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14b22:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14b26:	6063      	str	r3, [r4, #4]
   14b28:	e008      	b.n	14b3c <mutex_init_platform+0x68>
    switch(flags){
   14b2a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14b2e:	d80d      	bhi.n	14b4c <mutex_init_platform+0x78>
   14b30:	2b3a      	cmp	r3, #58	; 0x3a
   14b32:	d003      	beq.n	14b3c <mutex_init_platform+0x68>
   14b34:	f640 62ba 	movw	r2, #3770	; 0xeba
   14b38:	4293      	cmp	r3, r2
   14b3a:	d1de      	bne.n	14afa <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14b3c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14b3e:	f01a f814 	bl	2eb6a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14b42:	6863      	ldr	r3, [r4, #4]
   14b44:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14b48:	6063      	str	r3, [r4, #4]
}
   14b4a:	bd10      	pop	{r4, pc}
    switch(flags){
   14b4c:	4a05      	ldr	r2, [pc, #20]	; (14b64 <mutex_init_platform+0x90>)
   14b4e:	e7f3      	b.n	14b38 <mutex_init_platform+0x64>
   14b50:	20000968 	.word	0x20000968
   14b54:	00030df7 	.word	0x00030df7
   14b58:	a95c5f2c 	.word	0xa95c5f2c
   14b5c:	200032d0 	.word	0x200032d0
   14b60:	00030e1d 	.word	0x00030e1d
   14b64:	3a00003a 	.word	0x3a00003a

00014b68 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14b68:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14b6a:	4906      	ldr	r1, [pc, #24]	; (14b84 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14b6c:	4806      	ldr	r0, [pc, #24]	; (14b88 <nrf_cc3xx_platform_mutex_init+0x20>)
   14b6e:	2340      	movs	r3, #64	; 0x40
   14b70:	2214      	movs	r2, #20
   14b72:	f019 ffcf 	bl	2eb14 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14b7a:	4904      	ldr	r1, [pc, #16]	; (14b8c <nrf_cc3xx_platform_mutex_init+0x24>)
   14b7c:	4804      	ldr	r0, [pc, #16]	; (14b90 <nrf_cc3xx_platform_mutex_init+0x28>)
   14b7e:	f013 b95b 	b.w	27e38 <nrf_cc3xx_platform_set_mutexes>
   14b82:	bf00      	nop
   14b84:	20002dd0 	.word	0x20002dd0
   14b88:	200032d0 	.word	0x200032d0
   14b8c:	0002f654 	.word	0x0002f654
   14b90:	0002f668 	.word	0x0002f668

00014b94 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14b94:	4901      	ldr	r1, [pc, #4]	; (14b9c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14b96:	2210      	movs	r2, #16
	str	r2, [r1]
   14b98:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14b9a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14b9c:	e000ed10 	.word	0xe000ed10

00014ba0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14ba0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14ba2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14ba4:	f380 8811 	msr	BASEPRI, r0
	isb
   14ba8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14bac:	f3bf 8f4f 	dsb	sy
   14bb0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14bb2:	b662      	cpsie	i
	isb
   14bb4:	f3bf 8f6f 	isb	sy

	bx	lr
   14bb8:	4770      	bx	lr
   14bba:	bf00      	nop

00014bbc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14bbc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14bbe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14bc0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14bc4:	f3bf 8f4f 	dsb	sy
   14bc8:	bf20      	wfe

	msr	BASEPRI, r0
   14bca:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14bce:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14bd0:	4770      	bx	lr
   14bd2:	bf00      	nop

00014bd4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14bd6:	4605      	mov	r5, r0

	if (esf != NULL) {
   14bd8:	460c      	mov	r4, r1
   14bda:	b1c9      	cbz	r1, 14c10 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14bdc:	688b      	ldr	r3, [r1, #8]
   14bde:	9300      	str	r3, [sp, #0]
   14be0:	e9d1 2300 	ldrd	r2, r3, [r1]
   14be4:	480e      	ldr	r0, [pc, #56]	; (14c20 <z_arm_fatal_error+0x4c>)
   14be6:	2145      	movs	r1, #69	; 0x45
   14be8:	f015 ffbe 	bl	2ab68 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14bec:	6963      	ldr	r3, [r4, #20]
   14bee:	9300      	str	r3, [sp, #0]
   14bf0:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   14bf4:	480b      	ldr	r0, [pc, #44]	; (14c24 <z_arm_fatal_error+0x50>)
   14bf6:	2145      	movs	r1, #69	; 0x45
   14bf8:	f015 ffb6 	bl	2ab68 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14bfc:	69e2      	ldr	r2, [r4, #28]
   14bfe:	480a      	ldr	r0, [pc, #40]	; (14c28 <z_arm_fatal_error+0x54>)
   14c00:	2145      	movs	r1, #69	; 0x45
   14c02:	f015 ffb1 	bl	2ab68 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14c06:	69a2      	ldr	r2, [r4, #24]
   14c08:	4808      	ldr	r0, [pc, #32]	; (14c2c <z_arm_fatal_error+0x58>)
   14c0a:	2145      	movs	r1, #69	; 0x45
   14c0c:	f015 ffac 	bl	2ab68 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14c10:	4621      	mov	r1, r4
   14c12:	4628      	mov	r0, r5
}
   14c14:	b003      	add	sp, #12
   14c16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   14c1a:	f00f b901 	b.w	23e20 <z_fatal_error>
   14c1e:	bf00      	nop
   14c20:	00030e4a 	.word	0x00030e4a
   14c24:	00030e7e 	.word	0x00030e7e
   14c28:	00030eb2 	.word	0x00030eb2
   14c2c:	00030ec6 	.word	0x00030ec6

00014c30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14c30:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14c32:	2800      	cmp	r0, #0
   14c34:	db07      	blt.n	14c46 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14c36:	4a04      	ldr	r2, [pc, #16]	; (14c48 <arch_irq_enable+0x18>)
   14c38:	0941      	lsrs	r1, r0, #5
   14c3a:	2301      	movs	r3, #1
   14c3c:	f000 001f 	and.w	r0, r0, #31
   14c40:	4083      	lsls	r3, r0
   14c42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14c46:	4770      	bx	lr
   14c48:	e000e100 	.word	0xe000e100

00014c4c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14c4c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14c4e:	2800      	cmp	r0, #0
   14c50:	db0c      	blt.n	14c6c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14c52:	0943      	lsrs	r3, r0, #5
   14c54:	4906      	ldr	r1, [pc, #24]	; (14c70 <arch_irq_disable+0x24>)
   14c56:	f000 001f 	and.w	r0, r0, #31
   14c5a:	3320      	adds	r3, #32
   14c5c:	2201      	movs	r2, #1
   14c5e:	4082      	lsls	r2, r0
   14c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14c68:	f3bf 8f6f 	isb	sy
}
   14c6c:	4770      	bx	lr
   14c6e:	bf00      	nop
   14c70:	e000e100 	.word	0xe000e100

00014c74 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14c74:	4b05      	ldr	r3, [pc, #20]	; (14c8c <arch_irq_is_enabled+0x18>)
   14c76:	0942      	lsrs	r2, r0, #5
   14c78:	f000 001f 	and.w	r0, r0, #31
   14c7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14c80:	2301      	movs	r3, #1
   14c82:	fa03 f000 	lsl.w	r0, r3, r0
}
   14c86:	4010      	ands	r0, r2
   14c88:	4770      	bx	lr
   14c8a:	bf00      	nop
   14c8c:	e000e100 	.word	0xe000e100

00014c90 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14c90:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14c92:	07d3      	lsls	r3, r2, #31
   14c94:	d40b      	bmi.n	14cae <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14c96:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14c98:	2907      	cmp	r1, #7
   14c9a:	d909      	bls.n	14cb0 <z_arm_irq_priority_set+0x20>
   14c9c:	490e      	ldr	r1, [pc, #56]	; (14cd8 <z_arm_irq_priority_set+0x48>)
   14c9e:	480f      	ldr	r0, [pc, #60]	; (14cdc <z_arm_irq_priority_set+0x4c>)
   14ca0:	225b      	movs	r2, #91	; 0x5b
   14ca2:	f015 ff53 	bl	2ab4c <assert_print>
   14ca6:	480c      	ldr	r0, [pc, #48]	; (14cd8 <z_arm_irq_priority_set+0x48>)
   14ca8:	215b      	movs	r1, #91	; 0x5b
   14caa:	f015 ff48 	bl	2ab3e <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14cae:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14cb0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14cb2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cb4:	bfac      	ite	ge
   14cb6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cba:	4b09      	ldrlt	r3, [pc, #36]	; (14ce0 <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cbc:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cc0:	bfb8      	it	lt
   14cc2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cc6:	b2c9      	uxtb	r1, r1
   14cc8:	bfaa      	itet	ge
   14cca:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cce:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14cd0:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   14cd4:	bd08      	pop	{r3, pc}
   14cd6:	bf00      	nop
   14cd8:	00030ef9 	.word	0x00030ef9
   14cdc:	0003013d 	.word	0x0003013d
   14ce0:	e000ed14 	.word	0xe000ed14

00014ce4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14ce4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14ce6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14ce8:	4b04      	ldr	r3, [pc, #16]	; (14cfc <_arch_isr_direct_pm+0x18>)
   14cea:	699a      	ldr	r2, [r3, #24]
   14cec:	b11a      	cbz	r2, 14cf6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14cee:	2200      	movs	r2, #0
   14cf0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14cf2:	f019 ff2b 	bl	2eb4c <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14cf6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14cf8:	bd08      	pop	{r3, pc}
   14cfa:	bf00      	nop
   14cfc:	200037fc 	.word	0x200037fc

00014d00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14d00:	bf30      	wfi
    b z_SysNmiOnReset
   14d02:	f7ff bffd 	b.w	14d00 <z_SysNmiOnReset>
   14d06:	bf00      	nop

00014d08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14d08:	4a0b      	ldr	r2, [pc, #44]	; (14d38 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14d0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14d0c:	4b0b      	ldr	r3, [pc, #44]	; (14d3c <z_arm_prep_c+0x34>)
   14d0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14d12:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14d14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14d18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14d1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14d20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14d28:	f00f f912 	bl	23f50 <z_bss_zero>
	z_data_copy();
   14d2c:	f011 fd4c 	bl	267c8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14d30:	f000 fb00 	bl	15334 <z_arm_interrupt_init>
	z_cstart();
   14d34:	f00f f950 	bl	23fd8 <z_cstart>
   14d38:	00000000 	.word	0x00000000
   14d3c:	e000ed00 	.word	0xe000ed00

00014d40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14d40:	4a09      	ldr	r2, [pc, #36]	; (14d68 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14d42:	490a      	ldr	r1, [pc, #40]	; (14d6c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14d44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14d46:	6809      	ldr	r1, [r1, #0]
   14d48:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14d4a:	4909      	ldr	r1, [pc, #36]	; (14d70 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14d4c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14d4e:	684b      	ldr	r3, [r1, #4]
   14d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14d54:	604b      	str	r3, [r1, #4]
   14d56:	2300      	movs	r3, #0
   14d58:	f383 8811 	msr	BASEPRI, r3
   14d5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14d60:	6893      	ldr	r3, [r2, #8]
}
   14d62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14d64:	4770      	bx	lr
   14d66:	bf00      	nop
   14d68:	200037fc 	.word	0x200037fc
   14d6c:	0002fd10 	.word	0x0002fd10
   14d70:	e000ed00 	.word	0xe000ed00

00014d74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14d74:	4912      	ldr	r1, [pc, #72]	; (14dc0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14d76:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14d78:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14d7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14d7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14d82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14d86:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14d88:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14d8c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14d90:	4f0c      	ldr	r7, [pc, #48]	; (14dc4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14d92:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14d96:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14d98:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14d9a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14d9c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14d9e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14da0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14da2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14da6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14da8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14daa:	f000 fb5f 	bl	1546c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14dae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14db2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14db6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14dba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14dbe:	4770      	bx	lr
    ldr r1, =_kernel
   14dc0:	200037fc 	.word	0x200037fc
    ldr v4, =_SCS_ICSR
   14dc4:	e000ed04 	.word	0xe000ed04

00014dc8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14dc8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14dcc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14dce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14dd2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14dd6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14dd8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14ddc:	2902      	cmp	r1, #2
    beq _oops
   14dde:	d0ff      	beq.n	14de0 <_oops>

00014de0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14de0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14de2:	f016 fda2 	bl	2b92a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14de6:	bd01      	pop	{r0, pc}

00014de8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14de8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14dec:	9b00      	ldr	r3, [sp, #0]
   14dee:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14df2:	490a      	ldr	r1, [pc, #40]	; (14e1c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14df4:	9b01      	ldr	r3, [sp, #4]
   14df6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14dfa:	9b02      	ldr	r3, [sp, #8]
   14dfc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14e00:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14e04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14e08:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14e0c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14e10:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14e12:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14e14:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14e16:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14e18:	4770      	bx	lr
   14e1a:	bf00      	nop
   14e1c:	0002a771 	.word	0x0002a771

00014e20 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14e20:	4a09      	ldr	r2, [pc, #36]	; (14e48 <z_check_thread_stack_fail+0x28>)
{
   14e22:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14e24:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14e26:	b170      	cbz	r0, 14e46 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14e28:	f113 0f16 	cmn.w	r3, #22
   14e2c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14e2e:	d005      	beq.n	14e3c <z_check_thread_stack_fail+0x1c>
   14e30:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14e34:	429a      	cmp	r2, r3
   14e36:	d805      	bhi.n	14e44 <z_check_thread_stack_fail+0x24>
   14e38:	4283      	cmp	r3, r0
   14e3a:	d203      	bcs.n	14e44 <z_check_thread_stack_fail+0x24>
		return 0;
   14e3c:	4281      	cmp	r1, r0
   14e3e:	bf28      	it	cs
   14e40:	2000      	movcs	r0, #0
   14e42:	4770      	bx	lr
   14e44:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14e46:	4770      	bx	lr
   14e48:	200037fc 	.word	0x200037fc

00014e4c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14e4c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14e4e:	4b09      	ldr	r3, [pc, #36]	; (14e74 <arch_switch_to_main_thread+0x28>)
   14e50:	6098      	str	r0, [r3, #8]
{
   14e52:	460d      	mov	r5, r1
   14e54:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14e56:	f000 fb09 	bl	1546c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14e5a:	4620      	mov	r0, r4
   14e5c:	f385 8809 	msr	PSP, r5
   14e60:	2100      	movs	r1, #0
   14e62:	b663      	cpsie	if
   14e64:	f381 8811 	msr	BASEPRI, r1
   14e68:	f3bf 8f6f 	isb	sy
   14e6c:	2200      	movs	r2, #0
   14e6e:	2300      	movs	r3, #0
   14e70:	f015 fc7e 	bl	2a770 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14e74:	200037fc 	.word	0x200037fc

00014e78 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14e78:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14e7a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14e7c:	4a0b      	ldr	r2, [pc, #44]	; (14eac <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14e7e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14e80:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14e82:	bf1e      	ittt	ne
	movne	r1, #0
   14e84:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14e86:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14e88:	f019 fe60 	blne	2eb4c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14e8c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14e8e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14e92:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14e96:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14e9a:	4905      	ldr	r1, [pc, #20]	; (14eb0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14e9c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14e9e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14ea0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14ea2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14ea6:	4903      	ldr	r1, [pc, #12]	; (14eb4 <_isr_wrapper+0x3c>)
	bx r1
   14ea8:	4708      	bx	r1
   14eaa:	0000      	.short	0x0000
	ldr r2, =_kernel
   14eac:	200037fc 	.word	0x200037fc
	ldr r1, =_sw_isr_table
   14eb0:	0002f104 	.word	0x0002f104
	ldr r1, =z_arm_int_exit
   14eb4:	00014eb9 	.word	0x00014eb9

00014eb8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14eb8:	4b04      	ldr	r3, [pc, #16]	; (14ecc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14eba:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14ebc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14ebe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14ec0:	d003      	beq.n	14eca <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14ec2:	4903      	ldr	r1, [pc, #12]	; (14ed0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14ec8:	600a      	str	r2, [r1, #0]

00014eca <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14eca:	4770      	bx	lr
	ldr r3, =_kernel
   14ecc:	200037fc 	.word	0x200037fc
	ldr r1, =_SCS_ICSR
   14ed0:	e000ed04 	.word	0xe000ed04

00014ed4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14ed8:	4c38      	ldr	r4, [pc, #224]	; (14fbc <mem_manage_fault+0xe8>)
{
   14eda:	4607      	mov	r7, r0
   14edc:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14ede:	4838      	ldr	r0, [pc, #224]	; (14fc0 <mem_manage_fault+0xec>)
   14ee0:	2145      	movs	r1, #69	; 0x45
{
   14ee2:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14ee4:	f015 fe40 	bl	2ab68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14ee8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14eea:	06d8      	lsls	r0, r3, #27
   14eec:	d503      	bpl.n	14ef6 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14eee:	4835      	ldr	r0, [pc, #212]	; (14fc4 <mem_manage_fault+0xf0>)
   14ef0:	2145      	movs	r1, #69	; 0x45
   14ef2:	f015 fe39 	bl	2ab68 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ef8:	0719      	lsls	r1, r3, #28
   14efa:	d503      	bpl.n	14f04 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   14efc:	4832      	ldr	r0, [pc, #200]	; (14fc8 <mem_manage_fault+0xf4>)
   14efe:	2145      	movs	r1, #69	; 0x45
   14f00:	f015 fe32 	bl	2ab68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14f04:	4c2d      	ldr	r4, [pc, #180]	; (14fbc <mem_manage_fault+0xe8>)
   14f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f08:	079a      	lsls	r2, r3, #30
   14f0a:	d432      	bmi.n	14f72 <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   14f0c:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14f10:	4c2a      	ldr	r4, [pc, #168]	; (14fbc <mem_manage_fault+0xe8>)
   14f12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f14:	07d8      	lsls	r0, r3, #31
   14f16:	d503      	bpl.n	14f20 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   14f18:	482c      	ldr	r0, [pc, #176]	; (14fcc <mem_manage_fault+0xf8>)
   14f1a:	2145      	movs	r1, #69	; 0x45
   14f1c:	f015 fe24 	bl	2ab68 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f22:	0699      	lsls	r1, r3, #26
   14f24:	d503      	bpl.n	14f2e <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   14f26:	482a      	ldr	r0, [pc, #168]	; (14fd0 <mem_manage_fault+0xfc>)
   14f28:	2145      	movs	r1, #69	; 0x45
   14f2a:	f015 fe1d 	bl	2ab68 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14f2e:	4c23      	ldr	r4, [pc, #140]	; (14fbc <mem_manage_fault+0xe8>)
   14f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f32:	06da      	lsls	r2, r3, #27
   14f34:	d402      	bmi.n	14f3c <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14f36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14f38:	079b      	lsls	r3, r3, #30
   14f3a:	d53d      	bpl.n	14fb8 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14f3c:	6863      	ldr	r3, [r4, #4]
   14f3e:	0518      	lsls	r0, r3, #20
   14f40:	d53a      	bpl.n	14fb8 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14f42:	4639      	mov	r1, r7
   14f44:	4630      	mov	r0, r6
   14f46:	f7ff ff6b 	bl	14e20 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   14f4a:	b338      	cbz	r0, 14f9c <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14f4c:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   14f50:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14f52:	4b1a      	ldr	r3, [pc, #104]	; (14fbc <mem_manage_fault+0xe8>)
   14f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14f56:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14f58:	bf42      	ittt	mi
   14f5a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14f5c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   14f60:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14f64:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   14f68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14f6a:	2300      	movs	r3, #0
   14f6c:	702b      	strb	r3, [r5, #0]

	return reason;
}
   14f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14f72:	4818      	ldr	r0, [pc, #96]	; (14fd4 <mem_manage_fault+0x100>)
   14f74:	2145      	movs	r1, #69	; 0x45
   14f76:	f015 fdf7 	bl	2ab68 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   14f7a:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f7e:	061b      	lsls	r3, r3, #24
   14f80:	d5c4      	bpl.n	14f0c <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14f82:	4815      	ldr	r0, [pc, #84]	; (14fd8 <mem_manage_fault+0x104>)
   14f84:	4632      	mov	r2, r6
   14f86:	2145      	movs	r1, #69	; 0x45
   14f88:	f015 fdee 	bl	2ab68 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   14f8c:	f1b8 0f00 	cmp.w	r8, #0
   14f90:	d0be      	beq.n	14f10 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14f92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14f98:	62a3      	str	r3, [r4, #40]	; 0x28
   14f9a:	e7b9      	b.n	14f10 <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   14f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f9e:	06d9      	lsls	r1, r3, #27
   14fa0:	d50a      	bpl.n	14fb8 <mem_manage_fault+0xe4>
   14fa2:	490e      	ldr	r1, [pc, #56]	; (14fdc <mem_manage_fault+0x108>)
   14fa4:	480e      	ldr	r0, [pc, #56]	; (14fe0 <mem_manage_fault+0x10c>)
   14fa6:	f44f 72ab 	mov.w	r2, #342	; 0x156
   14faa:	f015 fdcf 	bl	2ab4c <assert_print>
   14fae:	480b      	ldr	r0, [pc, #44]	; (14fdc <mem_manage_fault+0x108>)
   14fb0:	f44f 71ab 	mov.w	r1, #342	; 0x156
   14fb4:	f015 fdc3 	bl	2ab3e <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14fb8:	2000      	movs	r0, #0
   14fba:	e7ca      	b.n	14f52 <mem_manage_fault+0x7e>
   14fbc:	e000ed00 	.word	0xe000ed00
   14fc0:	00030f2f 	.word	0x00030f2f
   14fc4:	00030f4a 	.word	0x00030f4a
   14fc8:	00030f82 	.word	0x00030f82
   14fcc:	00030fd2 	.word	0x00030fd2
   14fd0:	00030ff6 	.word	0x00030ff6
   14fd4:	00030f9a 	.word	0x00030f9a
   14fd8:	00030fb7 	.word	0x00030fb7
   14fdc:	0003102a 	.word	0x0003102a
   14fe0:	0003013d 	.word	0x0003013d

00014fe4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14fe4:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14fe6:	4c1d      	ldr	r4, [pc, #116]	; (1505c <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14fe8:	481d      	ldr	r0, [pc, #116]	; (15060 <usage_fault.constprop.0+0x7c>)
   14fea:	2145      	movs	r1, #69	; 0x45
   14fec:	f015 fdbc 	bl	2ab68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ff2:	019b      	lsls	r3, r3, #6
   14ff4:	d503      	bpl.n	14ffe <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   14ff6:	481b      	ldr	r0, [pc, #108]	; (15064 <usage_fault.constprop.0+0x80>)
   14ff8:	2145      	movs	r1, #69	; 0x45
   14ffa:	f015 fdb5 	bl	2ab68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15000:	01dc      	lsls	r4, r3, #7
   15002:	d503      	bpl.n	1500c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   15004:	4818      	ldr	r0, [pc, #96]	; (15068 <usage_fault.constprop.0+0x84>)
   15006:	2145      	movs	r1, #69	; 0x45
   15008:	f015 fdae 	bl	2ab68 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1500c:	4c13      	ldr	r4, [pc, #76]	; (1505c <usage_fault.constprop.0+0x78>)
   1500e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15010:	0318      	lsls	r0, r3, #12
   15012:	d503      	bpl.n	1501c <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   15014:	4815      	ldr	r0, [pc, #84]	; (1506c <usage_fault.constprop.0+0x88>)
   15016:	2145      	movs	r1, #69	; 0x45
   15018:	f015 fda6 	bl	2ab68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1501c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1501e:	0359      	lsls	r1, r3, #13
   15020:	d503      	bpl.n	1502a <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15022:	4813      	ldr	r0, [pc, #76]	; (15070 <usage_fault.constprop.0+0x8c>)
   15024:	2145      	movs	r1, #69	; 0x45
   15026:	f015 fd9f 	bl	2ab68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1502a:	4c0c      	ldr	r4, [pc, #48]	; (1505c <usage_fault.constprop.0+0x78>)
   1502c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1502e:	039a      	lsls	r2, r3, #14
   15030:	d503      	bpl.n	1503a <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15032:	4810      	ldr	r0, [pc, #64]	; (15074 <usage_fault.constprop.0+0x90>)
   15034:	2145      	movs	r1, #69	; 0x45
   15036:	f015 fd97 	bl	2ab68 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1503a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1503c:	03db      	lsls	r3, r3, #15
   1503e:	d503      	bpl.n	15048 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15040:	480d      	ldr	r0, [pc, #52]	; (15078 <usage_fault.constprop.0+0x94>)
   15042:	2145      	movs	r1, #69	; 0x45
   15044:	f015 fd90 	bl	2ab68 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15048:	4a04      	ldr	r2, [pc, #16]	; (1505c <usage_fault.constprop.0+0x78>)
   1504a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1504c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15050:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15054:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15056:	2000      	movs	r0, #0
   15058:	bd10      	pop	{r4, pc}
   1505a:	bf00      	nop
   1505c:	e000ed00 	.word	0xe000ed00
   15060:	00031064 	.word	0x00031064
   15064:	00031081 	.word	0x00031081
   15068:	00031099 	.word	0x00031099
   1506c:	000310b8 	.word	0x000310b8
   15070:	000310db 	.word	0x000310db
   15074:	00031105 	.word	0x00031105
   15078:	00031124 	.word	0x00031124

0001507c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1507c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1507e:	4c23      	ldr	r4, [pc, #140]	; (1510c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15080:	4606      	mov	r6, r0
   15082:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   15084:	4822      	ldr	r0, [pc, #136]	; (15110 <bus_fault.constprop.0+0x94>)
   15086:	2145      	movs	r1, #69	; 0x45
   15088:	f015 fd6e 	bl	2ab68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1508c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1508e:	04d9      	lsls	r1, r3, #19
   15090:	d503      	bpl.n	1509a <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   15092:	4820      	ldr	r0, [pc, #128]	; (15114 <bus_fault.constprop.0+0x98>)
   15094:	2145      	movs	r1, #69	; 0x45
   15096:	f015 fd67 	bl	2ab68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1509a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1509c:	051a      	lsls	r2, r3, #20
   1509e:	d503      	bpl.n	150a8 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   150a0:	481d      	ldr	r0, [pc, #116]	; (15118 <bus_fault.constprop.0+0x9c>)
   150a2:	2145      	movs	r1, #69	; 0x45
   150a4:	f015 fd60 	bl	2ab68 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   150a8:	4c18      	ldr	r4, [pc, #96]	; (1510c <bus_fault.constprop.0+0x90>)
   150aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150ac:	059b      	lsls	r3, r3, #22
   150ae:	d510      	bpl.n	150d2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   150b0:	481a      	ldr	r0, [pc, #104]	; (1511c <bus_fault.constprop.0+0xa0>)
   150b2:	2145      	movs	r1, #69	; 0x45
   150b4:	f015 fd58 	bl	2ab68 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   150b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   150ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150bc:	0418      	lsls	r0, r3, #16
   150be:	d508      	bpl.n	150d2 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   150c0:	4817      	ldr	r0, [pc, #92]	; (15120 <bus_fault.constprop.0+0xa4>)
   150c2:	2145      	movs	r1, #69	; 0x45
   150c4:	f015 fd50 	bl	2ab68 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   150c8:	b11e      	cbz	r6, 150d2 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   150ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   150d0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   150d2:	4c0e      	ldr	r4, [pc, #56]	; (1510c <bus_fault.constprop.0+0x90>)
   150d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150d6:	0559      	lsls	r1, r3, #21
   150d8:	d503      	bpl.n	150e2 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   150da:	4812      	ldr	r0, [pc, #72]	; (15124 <bus_fault.constprop.0+0xa8>)
   150dc:	2145      	movs	r1, #69	; 0x45
   150de:	f015 fd43 	bl	2ab68 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   150e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150e4:	05da      	lsls	r2, r3, #23
   150e6:	d50b      	bpl.n	15100 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   150e8:	480f      	ldr	r0, [pc, #60]	; (15128 <bus_fault.constprop.0+0xac>)
   150ea:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   150ec:	f015 fd3c 	bl	2ab68 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   150f0:	4a06      	ldr	r2, [pc, #24]	; (1510c <bus_fault.constprop.0+0x90>)
   150f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   150f4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   150f6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   150fa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   150fc:	7028      	strb	r0, [r5, #0]
}
   150fe:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15100:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15102:	049b      	lsls	r3, r3, #18
   15104:	d5f4      	bpl.n	150f0 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15106:	4809      	ldr	r0, [pc, #36]	; (1512c <bus_fault.constprop.0+0xb0>)
   15108:	2145      	movs	r1, #69	; 0x45
   1510a:	e7ef      	b.n	150ec <bus_fault.constprop.0+0x70>
   1510c:	e000ed00 	.word	0xe000ed00
   15110:	00031154 	.word	0x00031154
   15114:	0003116f 	.word	0x0003116f
   15118:	00030f82 	.word	0x00030f82
   1511c:	00031185 	.word	0x00031185
   15120:	000311a3 	.word	0x000311a3
   15124:	000311bd 	.word	0x000311bd
   15128:	000311dd 	.word	0x000311dd
   1512c:	00030ff6 	.word	0x00030ff6

00015130 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15130:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15132:	4b6a      	ldr	r3, [pc, #424]	; (152dc <z_arm_fault+0x1ac>)
{
   15134:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15136:	6858      	ldr	r0, [r3, #4]
{
   15138:	b08a      	sub	sp, #40	; 0x28
   1513a:	f3c0 0308 	ubfx	r3, r0, #0, #9
   1513e:	2600      	movs	r6, #0
   15140:	f386 8811 	msr	BASEPRI, r6
   15144:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15148:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   1514c:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   15150:	d107      	bne.n	15162 <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15152:	f002 040c 	and.w	r4, r2, #12
   15156:	2c08      	cmp	r4, #8
   15158:	d10e      	bne.n	15178 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1515a:	4861      	ldr	r0, [pc, #388]	; (152e0 <z_arm_fault+0x1b0>)
   1515c:	2145      	movs	r1, #69	; 0x45
   1515e:	f015 fd03 	bl	2ab68 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   15162:	4960      	ldr	r1, [pc, #384]	; (152e4 <z_arm_fault+0x1b4>)
   15164:	4860      	ldr	r0, [pc, #384]	; (152e8 <z_arm_fault+0x1b8>)
   15166:	f44f 6284 	mov.w	r2, #1056	; 0x420
   1516a:	f015 fcef 	bl	2ab4c <assert_print>
   1516e:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   15172:	485c      	ldr	r0, [pc, #368]	; (152e4 <z_arm_fault+0x1b4>)
   15174:	f015 fce3 	bl	2ab3e <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15178:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1517a:	bf4c      	ite	mi
   1517c:	460d      	movmi	r5, r1
			*nested_exc = true;
   1517e:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   15180:	2d00      	cmp	r5, #0
   15182:	d0ee      	beq.n	15162 <z_arm_fault+0x32>
	*recoverable = false;
   15184:	2400      	movs	r4, #0
	switch (fault) {
   15186:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   15188:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   1518c:	2a09      	cmp	r2, #9
   1518e:	f200 8093 	bhi.w	152b8 <z_arm_fault+0x188>
   15192:	e8df f002 	tbb	[pc, r2]
   15196:	8605      	.short	0x8605
   15198:	9191718a 	.word	0x9191718a
   1519c:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   151a0:	4852      	ldr	r0, [pc, #328]	; (152ec <z_arm_fault+0x1bc>)
   151a2:	2145      	movs	r1, #69	; 0x45
   151a4:	f015 fce0 	bl	2ab68 <z_log_minimal_printk>
	*recoverable = false;
   151a8:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   151ac:	4c4b      	ldr	r4, [pc, #300]	; (152dc <z_arm_fault+0x1ac>)
   151ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   151b0:	079a      	lsls	r2, r3, #30
   151b2:	d505      	bpl.n	151c0 <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   151b4:	484e      	ldr	r0, [pc, #312]	; (152f0 <z_arm_fault+0x1c0>)
   151b6:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   151b8:	f015 fcd6 	bl	2ab68 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   151bc:	2400      	movs	r4, #0
   151be:	e029      	b.n	15214 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   151c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   151c2:	2b00      	cmp	r3, #0
   151c4:	da02      	bge.n	151cc <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   151c6:	484b      	ldr	r0, [pc, #300]	; (152f4 <z_arm_fault+0x1c4>)
   151c8:	2145      	movs	r1, #69	; 0x45
   151ca:	e7f5      	b.n	151b8 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   151cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   151ce:	005b      	lsls	r3, r3, #1
   151d0:	d55e      	bpl.n	15290 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   151d2:	4849      	ldr	r0, [pc, #292]	; (152f8 <z_arm_fault+0x1c8>)
   151d4:	2145      	movs	r1, #69	; 0x45
   151d6:	f015 fcc7 	bl	2ab68 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   151da:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   151dc:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   151de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   151e2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   151e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   151e8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   151ec:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   151ee:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   151f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   151f6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   151f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   151fc:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15200:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15204:	429a      	cmp	r2, r3
   15206:	d11e      	bne.n	15246 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15208:	682a      	ldr	r2, [r5, #0]
   1520a:	483c      	ldr	r0, [pc, #240]	; (152fc <z_arm_fault+0x1cc>)
   1520c:	2145      	movs	r1, #69	; 0x45
   1520e:	f015 fcab 	bl	2ab68 <z_log_minimal_printk>
			reason = esf->basic.r0;
   15212:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15214:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15218:	b99b      	cbnz	r3, 15242 <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1521a:	2220      	movs	r2, #32
   1521c:	4629      	mov	r1, r5
   1521e:	a802      	add	r0, sp, #8
   15220:	f016 fc6a 	bl	2baf8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15224:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15226:	2e00      	cmp	r6, #0
   15228:	d052      	beq.n	152d0 <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1522a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1522e:	b922      	cbnz	r2, 1523a <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15230:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15234:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15238:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1523a:	a902      	add	r1, sp, #8
   1523c:	4620      	mov	r0, r4
   1523e:	f7ff fcc9 	bl	14bd4 <z_arm_fatal_error>
}
   15242:	b00a      	add	sp, #40	; 0x28
   15244:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15246:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15248:	b2db      	uxtb	r3, r3
   1524a:	b13b      	cbz	r3, 1525c <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   1524c:	f10d 0207 	add.w	r2, sp, #7
   15250:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15252:	4628      	mov	r0, r5
   15254:	f7ff fe3e 	bl	14ed4 <mem_manage_fault>
   15258:	4604      	mov	r4, r0
		break;
   1525a:	e7db      	b.n	15214 <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1525c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1525e:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15262:	d005      	beq.n	15270 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   15264:	f10d 0107 	add.w	r1, sp, #7
   15268:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1526a:	f7ff ff07 	bl	1507c <bus_fault.constprop.0>
   1526e:	e7f3      	b.n	15258 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15276:	d302      	bcc.n	1527e <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   15278:	f7ff feb4 	bl	14fe4 <usage_fault.constprop.0>
   1527c:	e7ec      	b.n	15258 <z_arm_fault+0x128>
			__ASSERT(0,
   1527e:	4919      	ldr	r1, [pc, #100]	; (152e4 <z_arm_fault+0x1b4>)
   15280:	4819      	ldr	r0, [pc, #100]	; (152e8 <z_arm_fault+0x1b8>)
   15282:	f240 22f2 	movw	r2, #754	; 0x2f2
   15286:	f015 fc61 	bl	2ab4c <assert_print>
   1528a:	f240 21f2 	movw	r1, #754	; 0x2f2
   1528e:	e770      	b.n	15172 <z_arm_fault+0x42>
		__ASSERT(0,
   15290:	4914      	ldr	r1, [pc, #80]	; (152e4 <z_arm_fault+0x1b4>)
   15292:	4815      	ldr	r0, [pc, #84]	; (152e8 <z_arm_fault+0x1b8>)
   15294:	f240 22f6 	movw	r2, #758	; 0x2f6
   15298:	f015 fc58 	bl	2ab4c <assert_print>
   1529c:	f240 21f6 	movw	r1, #758	; 0x2f6
   152a0:	e767      	b.n	15172 <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   152a2:	f10d 0207 	add.w	r2, sp, #7
   152a6:	2100      	movs	r1, #0
   152a8:	e7d3      	b.n	15252 <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   152aa:	f10d 0107 	add.w	r1, sp, #7
   152ae:	2000      	movs	r0, #0
   152b0:	e7db      	b.n	1526a <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   152b2:	4813      	ldr	r0, [pc, #76]	; (15300 <z_arm_fault+0x1d0>)
   152b4:	2145      	movs	r1, #69	; 0x45
   152b6:	e77f      	b.n	151b8 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   152b8:	4912      	ldr	r1, [pc, #72]	; (15304 <z_arm_fault+0x1d4>)
   152ba:	4a13      	ldr	r2, [pc, #76]	; (15308 <z_arm_fault+0x1d8>)
   152bc:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   152c0:	bf08      	it	eq
   152c2:	460a      	moveq	r2, r1
   152c4:	4811      	ldr	r0, [pc, #68]	; (1530c <z_arm_fault+0x1dc>)
   152c6:	3b10      	subs	r3, #16
   152c8:	2145      	movs	r1, #69	; 0x45
   152ca:	f015 fc4d 	bl	2ab68 <z_log_minimal_printk>
}
   152ce:	e775      	b.n	151bc <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   152d0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   152d4:	f023 0301 	bic.w	r3, r3, #1
   152d8:	e7ae      	b.n	15238 <z_arm_fault+0x108>
   152da:	bf00      	nop
   152dc:	e000ed00 	.word	0xe000ed00
   152e0:	00031228 	.word	0x00031228
   152e4:	0003102a 	.word	0x0003102a
   152e8:	0003013d 	.word	0x0003013d
   152ec:	00031258 	.word	0x00031258
   152f0:	00031274 	.word	0x00031274
   152f4:	0003129a 	.word	0x0003129a
   152f8:	000312ad 	.word	0x000312ad
   152fc:	000312d1 	.word	0x000312d1
   15300:	000312f2 	.word	0x000312f2
   15304:	000311fa 	.word	0x000311fa
   15308:	0003120f 	.word	0x0003120f
   1530c:	0003131b 	.word	0x0003131b

00015310 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15310:	4a02      	ldr	r2, [pc, #8]	; (1531c <z_arm_fault_init+0xc>)
   15312:	6953      	ldr	r3, [r2, #20]
   15314:	f043 0310 	orr.w	r3, r3, #16
   15318:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1531a:	4770      	bx	lr
   1531c:	e000ed00 	.word	0xe000ed00

00015320 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15320:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15324:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15328:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1532a:	4672      	mov	r2, lr
	bl z_arm_fault
   1532c:	f7ff ff00 	bl	15130 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15330:	bd01      	pop	{r0, pc}
   15332:	bf00      	nop

00015334 <z_arm_interrupt_init>:
   15334:	4804      	ldr	r0, [pc, #16]	; (15348 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15336:	2300      	movs	r3, #0
   15338:	2140      	movs	r1, #64	; 0x40
   1533a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1533c:	3301      	adds	r3, #1
   1533e:	2b30      	cmp	r3, #48	; 0x30
   15340:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15344:	d1f9      	bne.n	1533a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15346:	4770      	bx	lr
   15348:	e000e100 	.word	0xe000e100

0001534c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1534c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1534e:	f380 8814 	msr	CONTROL, r0
    isb
   15352:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15356:	f7fd fef7 	bl	13148 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1535a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1535c:	490d      	ldr	r1, [pc, #52]	; (15394 <__start+0x48>)
    str r0, [r1]
   1535e:	6008      	str	r0, [r1, #0]
    dsb
   15360:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15364:	480c      	ldr	r0, [pc, #48]	; (15398 <__start+0x4c>)
    msr msp, r0
   15366:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1536a:	f000 f82b 	bl	153c4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1536e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15370:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15374:	4809      	ldr	r0, [pc, #36]	; (1539c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15376:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   1537a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1537c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15380:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15384:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15386:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15388:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1538c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15390:	f7ff fcba 	bl	14d08 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15394:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15398:	2000b100 	.word	0x2000b100
    ldr r0, =z_interrupt_stacks
   1539c:	20008740 	.word	0x20008740

000153a0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   153a0:	4907      	ldr	r1, [pc, #28]	; (153c0 <z_arm_clear_arm_mpu_config+0x20>)
   153a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   153a6:	2300      	movs	r3, #0
	int num_regions =
   153a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   153ac:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   153ae:	4293      	cmp	r3, r2
   153b0:	db00      	blt.n	153b4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   153b2:	4770      	bx	lr
  MPU->RNR = rnr;
   153b4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   153b8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   153bc:	3301      	adds	r3, #1
   153be:	e7f6      	b.n	153ae <z_arm_clear_arm_mpu_config+0xe>
   153c0:	e000ed00 	.word	0xe000ed00

000153c4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   153c4:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   153c6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   153c8:	2300      	movs	r3, #0
   153ca:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   153ce:	f7ff ffe7 	bl	153a0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   153d2:	4b14      	ldr	r3, [pc, #80]	; (15424 <z_arm_init_arch_hw_at_boot+0x60>)
   153d4:	f04f 32ff 	mov.w	r2, #4294967295
   153d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   153dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   153e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   153e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   153e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   153ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   153f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   153f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   153f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   153fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15400:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   15404:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15408:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   1540c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   15410:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   15414:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15418:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1541a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1541e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15422:	bd08      	pop	{r3, pc}
   15424:	e000e100 	.word	0xe000e100

00015428 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15428:	4b08      	ldr	r3, [pc, #32]	; (1544c <z_impl_k_thread_abort+0x24>)
   1542a:	689b      	ldr	r3, [r3, #8]
   1542c:	4283      	cmp	r3, r0
   1542e:	d10b      	bne.n	15448 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15430:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15434:	b143      	cbz	r3, 15448 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15436:	4b06      	ldr	r3, [pc, #24]	; (15450 <z_impl_k_thread_abort+0x28>)
   15438:	685a      	ldr	r2, [r3, #4]
   1543a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1543e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15442:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15446:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15448:	f011 b8be 	b.w	265c8 <z_thread_abort>
   1544c:	200037fc 	.word	0x200037fc
   15450:	e000ed00 	.word	0xe000ed00

00015454 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15454:	4b02      	ldr	r3, [pc, #8]	; (15460 <z_arm_configure_static_mpu_regions+0xc>)
   15456:	4a03      	ldr	r2, [pc, #12]	; (15464 <z_arm_configure_static_mpu_regions+0x10>)
   15458:	4803      	ldr	r0, [pc, #12]	; (15468 <z_arm_configure_static_mpu_regions+0x14>)
   1545a:	2101      	movs	r1, #1
   1545c:	f000 b87c 	b.w	15558 <arm_core_mpu_configure_static_mpu_regions>
   15460:	20040000 	.word	0x20040000
   15464:	20000000 	.word	0x20000000
   15468:	0002f678 	.word	0x0002f678

0001546c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   1546c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1546e:	4b05      	ldr	r3, [pc, #20]	; (15484 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   15470:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   15472:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15474:	4a04      	ldr	r2, [pc, #16]	; (15488 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15476:	2140      	movs	r1, #64	; 0x40
   15478:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   1547c:	4618      	mov	r0, r3
   1547e:	2101      	movs	r1, #1
   15480:	f000 b886 	b.w	15590 <arm_core_mpu_configure_dynamic_mpu_regions>
   15484:	200032f0 	.word	0x200032f0
   15488:	150b0000 	.word	0x150b0000

0001548c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1548e:	4e24      	ldr	r6, [pc, #144]	; (15520 <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   15490:	2500      	movs	r5, #0
   15492:	428d      	cmp	r5, r1
   15494:	da0f      	bge.n	154b6 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   15496:	6844      	ldr	r4, [r0, #4]
   15498:	2c00      	cmp	r4, #0
   1549a:	d03e      	beq.n	1551a <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1549c:	b19b      	cbz	r3, 154c6 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1549e:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   154a2:	ea14 0f0c 	tst.w	r4, ip
   154a6:	d008      	beq.n	154ba <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   154a8:	481e      	ldr	r0, [pc, #120]	; (15524 <mpu_configure_regions+0x98>)
   154aa:	462a      	mov	r2, r5
   154ac:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   154ae:	f015 fb5b 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   154b2:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   154b6:	4610      	mov	r0, r2
   154b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   154ba:	2c1f      	cmp	r4, #31
   154bc:	d9f4      	bls.n	154a8 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   154be:	6807      	ldr	r7, [r0, #0]
		&&
   154c0:	ea1c 0f07 	tst.w	ip, r7
   154c4:	d1f0      	bne.n	154a8 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   154c6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   154c8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   154ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   154ce:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   154d2:	d910      	bls.n	154f6 <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   154d4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   154d8:	d80f      	bhi.n	154fa <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   154da:	3c01      	subs	r4, #1
   154dc:	fab4 f484 	clz	r4, r4
   154e0:	f1c4 041f 	rsb	r4, r4, #31
   154e4:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   154e6:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   154ea:	ea4c 0c04 	orr.w	ip, ip, r4
   154ee:	d906      	bls.n	154fe <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   154f0:	480d      	ldr	r0, [pc, #52]	; (15528 <mpu_configure_regions+0x9c>)
   154f2:	2145      	movs	r1, #69	; 0x45
   154f4:	e7db      	b.n	154ae <mpu_configure_regions+0x22>
		return REGION_32B;
   154f6:	2408      	movs	r4, #8
   154f8:	e7f5      	b.n	154e6 <mpu_configure_regions+0x5a>
		return REGION_4G;
   154fa:	243e      	movs	r4, #62	; 0x3e
   154fc:	e7f3      	b.n	154e6 <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   154fe:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   15502:	4314      	orrs	r4, r2
   15504:	f044 0410 	orr.w	r4, r4, #16
   15508:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1550c:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15510:	f04c 0401 	orr.w	r4, ip, #1
   15514:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   15518:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   1551a:	3501      	adds	r5, #1
   1551c:	300c      	adds	r0, #12
   1551e:	e7b8      	b.n	15492 <mpu_configure_regions+0x6>
   15520:	e000ed00 	.word	0xe000ed00
   15524:	00031337 	.word	0x00031337
   15528:	0003135f 	.word	0x0003135f

0001552c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1552c:	4b04      	ldr	r3, [pc, #16]	; (15540 <arm_core_mpu_enable+0x14>)
   1552e:	2205      	movs	r2, #5
   15530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15538:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1553c:	4770      	bx	lr
   1553e:	bf00      	nop
   15540:	e000ed00 	.word	0xe000ed00

00015544 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15544:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15548:	4b02      	ldr	r3, [pc, #8]	; (15554 <arm_core_mpu_disable+0x10>)
   1554a:	2200      	movs	r2, #0
   1554c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15550:	4770      	bx	lr
   15552:	bf00      	nop
   15554:	e000ed00 	.word	0xe000ed00

00015558 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15558:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1555a:	4c0a      	ldr	r4, [pc, #40]	; (15584 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   1555c:	2301      	movs	r3, #1
   1555e:	7822      	ldrb	r2, [r4, #0]
   15560:	f7ff ff94 	bl	1548c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15564:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15566:	3016      	adds	r0, #22
   15568:	d10a      	bne.n	15580 <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1556a:	4907      	ldr	r1, [pc, #28]	; (15588 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   1556c:	4807      	ldr	r0, [pc, #28]	; (1558c <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1556e:	f44f 728d 	mov.w	r2, #282	; 0x11a
   15572:	f015 faeb 	bl	2ab4c <assert_print>
   15576:	4804      	ldr	r0, [pc, #16]	; (15588 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   15578:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1557c:	f015 fadf 	bl	2ab3e <assert_post_action>
			regions_num);
	}
}
   15580:	bd10      	pop	{r4, pc}
   15582:	bf00      	nop
   15584:	2000433e 	.word	0x2000433e
   15588:	0003138a 	.word	0x0003138a
   1558c:	0003013d 	.word	0x0003013d

00015590 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15590:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15592:	4a0f      	ldr	r2, [pc, #60]	; (155d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   15594:	2300      	movs	r3, #0
   15596:	7812      	ldrb	r2, [r2, #0]
   15598:	f7ff ff78 	bl	1548c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1559c:	f110 0f16 	cmn.w	r0, #22
   155a0:	d004      	beq.n	155ac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   155a2:	4b0c      	ldr	r3, [pc, #48]	; (155d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   155a4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   155a6:	2807      	cmp	r0, #7
   155a8:	dd0b      	ble.n	155c2 <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   155aa:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   155ac:	490a      	ldr	r1, [pc, #40]	; (155d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   155ae:	480b      	ldr	r0, [pc, #44]	; (155dc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   155b0:	f240 1239 	movw	r2, #313	; 0x139
   155b4:	f015 faca 	bl	2ab4c <assert_print>
   155b8:	4807      	ldr	r0, [pc, #28]	; (155d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   155ba:	f240 1139 	movw	r1, #313	; 0x139
   155be:	f015 fabe 	bl	2ab3e <assert_post_action>
  MPU->RNR = rnr;
   155c2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   155c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   155ca:	3001      	adds	r0, #1
   155cc:	e7eb      	b.n	155a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   155ce:	bf00      	nop
   155d0:	2000433e 	.word	0x2000433e
   155d4:	e000ed00 	.word	0xe000ed00
   155d8:	0003138a 	.word	0x0003138a
   155dc:	0003013d 	.word	0x0003013d

000155e0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   155e0:	4920      	ldr	r1, [pc, #128]	; (15664 <z_arm_mpu_init+0x84>)
{
   155e2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   155e4:	680c      	ldr	r4, [r1, #0]
   155e6:	2c08      	cmp	r4, #8
   155e8:	d90a      	bls.n	15600 <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   155ea:	491f      	ldr	r1, [pc, #124]	; (15668 <z_arm_mpu_init+0x88>)
   155ec:	481f      	ldr	r0, [pc, #124]	; (1566c <z_arm_mpu_init+0x8c>)
   155ee:	f240 1251 	movw	r2, #337	; 0x151
   155f2:	f015 faab 	bl	2ab4c <assert_print>
   155f6:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   155fa:	481b      	ldr	r0, [pc, #108]	; (15668 <z_arm_mpu_init+0x88>)
   155fc:	f015 fa9f 	bl	2ab3e <assert_post_action>
	arm_core_mpu_disable();
   15600:	f7ff ffa0 	bl	15544 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15604:	6848      	ldr	r0, [r1, #4]
   15606:	491a      	ldr	r1, [pc, #104]	; (15670 <z_arm_mpu_init+0x90>)
   15608:	2200      	movs	r2, #0
   1560a:	4294      	cmp	r4, r2
   1560c:	f100 000c 	add.w	r0, r0, #12
   15610:	d112      	bne.n	15638 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   15612:	4b18      	ldr	r3, [pc, #96]	; (15674 <z_arm_mpu_init+0x94>)
   15614:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   15616:	f7ff ff89 	bl	1552c <arm_core_mpu_enable>
	__ASSERT(
   1561a:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1561e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15622:	2b08      	cmp	r3, #8
   15624:	d01b      	beq.n	1565e <z_arm_mpu_init+0x7e>
   15626:	4910      	ldr	r1, [pc, #64]	; (15668 <z_arm_mpu_init+0x88>)
   15628:	4810      	ldr	r0, [pc, #64]	; (1566c <z_arm_mpu_init+0x8c>)
   1562a:	f240 12b7 	movw	r2, #439	; 0x1b7
   1562e:	f015 fa8d 	bl	2ab4c <assert_print>
   15632:	f240 11b7 	movw	r1, #439	; 0x1b7
   15636:	e7e0      	b.n	155fa <z_arm_mpu_init+0x1a>
   15638:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1563c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   15640:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15644:	4313      	orrs	r3, r2
   15646:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1564a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1564e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15652:	f043 0301 	orr.w	r3, r3, #1
   15656:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1565a:	3201      	adds	r2, #1
   1565c:	e7d5      	b.n	1560a <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1565e:	2000      	movs	r0, #0
   15660:	bd10      	pop	{r4, pc}
   15662:	bf00      	nop
   15664:	0002f684 	.word	0x0002f684
   15668:	0003138a 	.word	0x0003138a
   1566c:	0003013d 	.word	0x0003013d
   15670:	e000ed00 	.word	0xe000ed00
   15674:	2000433e 	.word	0x2000433e

00015678 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15678:	4b01      	ldr	r3, [pc, #4]	; (15680 <__stdout_hook_install+0x8>)
   1567a:	6018      	str	r0, [r3, #0]
}
   1567c:	4770      	bx	lr
   1567e:	bf00      	nop
   15680:	20000730 	.word	0x20000730

00015684 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   15684:	b510      	push	{r4, lr}
	__asm__ volatile(
   15686:	f04f 0340 	mov.w	r3, #64	; 0x40
   1568a:	f3ef 8011 	mrs	r0, BASEPRI
   1568e:	f383 8812 	msr	BASEPRI_MAX, r3
   15692:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15696:	4a11      	ldr	r2, [pc, #68]	; (156dc <nordicsemi_nrf52_init+0x58>)
   15698:	2301      	movs	r3, #1
   1569a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1569e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   156a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   156a6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   156aa:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   156ae:	2c08      	cmp	r4, #8
   156b0:	d108      	bne.n	156c4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   156b2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   156b6:	2905      	cmp	r1, #5
   156b8:	d804      	bhi.n	156c4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   156ba:	4c09      	ldr	r4, [pc, #36]	; (156e0 <nordicsemi_nrf52_init+0x5c>)
   156bc:	5c61      	ldrb	r1, [r4, r1]
   156be:	b109      	cbz	r1, 156c4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   156c0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   156c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156c8:	2201      	movs	r2, #1
   156ca:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   156ce:	f380 8811 	msr	BASEPRI, r0
   156d2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   156d6:	2000      	movs	r0, #0
   156d8:	bd10      	pop	{r4, pc}
   156da:	bf00      	nop
   156dc:	4001e000 	.word	0x4001e000
   156e0:	000313d0 	.word	0x000313d0

000156e4 <sys_arch_reboot>:
    *p_gpregret = val;
   156e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156e8:	b2c0      	uxtb	r0, r0
   156ea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   156ee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   156f2:	4905      	ldr	r1, [pc, #20]	; (15708 <sys_arch_reboot+0x24>)
   156f4:	4b05      	ldr	r3, [pc, #20]	; (1570c <sys_arch_reboot+0x28>)
   156f6:	68ca      	ldr	r2, [r1, #12]
   156f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   156fc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   156fe:	60cb      	str	r3, [r1, #12]
   15700:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15704:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15706:	e7fd      	b.n	15704 <sys_arch_reboot+0x20>
   15708:	e000ed00 	.word	0xe000ed00
   1570c:	05fa0004 	.word	0x05fa0004

00015710 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15710:	b120      	cbz	r0, 1571c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15712:	4b03      	ldr	r3, [pc, #12]	; (15720 <arch_busy_wait+0x10>)
   15714:	0180      	lsls	r0, r0, #6
   15716:	f043 0301 	orr.w	r3, r3, #1
   1571a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1571c:	4770      	bx	lr
   1571e:	bf00      	nop
   15720:	0002f5e0 	.word	0x0002f5e0

00015724 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15724:	4b0e      	ldr	r3, [pc, #56]	; (15760 <bt_hex+0x3c>)
   15726:	2940      	cmp	r1, #64	; 0x40
{
   15728:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1572a:	bf28      	it	cs
   1572c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1572e:	4c0d      	ldr	r4, [pc, #52]	; (15764 <bt_hex+0x40>)
   15730:	1846      	adds	r6, r0, r1
   15732:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15734:	42b0      	cmp	r0, r6
   15736:	f103 0302 	add.w	r3, r3, #2
   1573a:	d104      	bne.n	15746 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1573c:	2300      	movs	r3, #0
   1573e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15742:	4807      	ldr	r0, [pc, #28]	; (15760 <bt_hex+0x3c>)
   15744:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15746:	7802      	ldrb	r2, [r0, #0]
   15748:	0912      	lsrs	r2, r2, #4
   1574a:	5ca2      	ldrb	r2, [r4, r2]
   1574c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15750:	f810 2b01 	ldrb.w	r2, [r0], #1
   15754:	f002 020f 	and.w	r2, r2, #15
   15758:	5ca2      	ldrb	r2, [r4, r2]
   1575a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1575e:	e7e9      	b.n	15734 <bt_hex+0x10>
   15760:	2000435d 	.word	0x2000435d
   15764:	000313ed 	.word	0x000313ed

00015768 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15768:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1576a:	7803      	ldrb	r3, [r0, #0]
   1576c:	b08b      	sub	sp, #44	; 0x2c
   1576e:	4604      	mov	r4, r0
   15770:	ad07      	add	r5, sp, #28
   15772:	2b03      	cmp	r3, #3
   15774:	d821      	bhi.n	157ba <bt_addr_le_str+0x52>
   15776:	e8df f003 	tbb	[pc, r3]
   1577a:	1a02      	.short	0x1a02
   1577c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1577e:	4912      	ldr	r1, [pc, #72]	; (157c8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   15780:	4628      	mov	r0, r5
   15782:	f016 f958 	bl	2ba36 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15786:	9505      	str	r5, [sp, #20]
   15788:	7863      	ldrb	r3, [r4, #1]
   1578a:	9304      	str	r3, [sp, #16]
   1578c:	78a3      	ldrb	r3, [r4, #2]
   1578e:	9303      	str	r3, [sp, #12]
   15790:	78e3      	ldrb	r3, [r4, #3]
   15792:	9302      	str	r3, [sp, #8]
   15794:	7923      	ldrb	r3, [r4, #4]
   15796:	9301      	str	r3, [sp, #4]
   15798:	7963      	ldrb	r3, [r4, #5]
   1579a:	9300      	str	r3, [sp, #0]
   1579c:	79a3      	ldrb	r3, [r4, #6]
   1579e:	4a0b      	ldr	r2, [pc, #44]	; (157cc <bt_addr_le_str+0x64>)
   157a0:	480b      	ldr	r0, [pc, #44]	; (157d0 <bt_addr_le_str+0x68>)
   157a2:	211e      	movs	r1, #30
   157a4:	f014 ffd7 	bl	2a756 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   157a8:	4809      	ldr	r0, [pc, #36]	; (157d0 <bt_addr_le_str+0x68>)
   157aa:	b00b      	add	sp, #44	; 0x2c
   157ac:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   157ae:	4909      	ldr	r1, [pc, #36]	; (157d4 <bt_addr_le_str+0x6c>)
   157b0:	e7e6      	b.n	15780 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   157b2:	4909      	ldr	r1, [pc, #36]	; (157d8 <bt_addr_le_str+0x70>)
   157b4:	e7e4      	b.n	15780 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   157b6:	4909      	ldr	r1, [pc, #36]	; (157dc <bt_addr_le_str+0x74>)
   157b8:	e7e2      	b.n	15780 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   157ba:	4a09      	ldr	r2, [pc, #36]	; (157e0 <bt_addr_le_str+0x78>)
   157bc:	210a      	movs	r1, #10
   157be:	4628      	mov	r0, r5
   157c0:	f014 ffc9 	bl	2a756 <snprintk>
		break;
   157c4:	e7df      	b.n	15786 <bt_addr_le_str+0x1e>
   157c6:	bf00      	nop
   157c8:	00030550 	.word	0x00030550
   157cc:	00030579 	.word	0x00030579
   157d0:	2000433f 	.word	0x2000433f
   157d4:	00030557 	.word	0x00030557
   157d8:	0003055e 	.word	0x0003055e
   157dc:	00030568 	.word	0x00030568
   157e0:	00030572 	.word	0x00030572

000157e4 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   157e4:	b510      	push	{r4, lr}
	int err;
	LOG_INF("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   157e6:	4c10      	ldr	r4, [pc, #64]	; (15828 <save_id+0x44>)
	LOG_INF("Saving ID");
   157e8:	4810      	ldr	r0, [pc, #64]	; (1582c <save_id+0x48>)
   157ea:	2149      	movs	r1, #73	; 0x49
   157ec:	f015 f9bc 	bl	2ab68 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   157f0:	79e2      	ldrb	r2, [r4, #7]
   157f2:	480f      	ldr	r0, [pc, #60]	; (15830 <save_id+0x4c>)
   157f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   157f8:	4621      	mov	r1, r4
   157fa:	f7fe f865 	bl	138c8 <settings_save_one>
	if (err) {
   157fe:	4602      	mov	r2, r0
   15800:	b118      	cbz	r0, 1580a <save_id+0x26>
		LOG_ERR("Failed to save ID (err %d)", err);
   15802:	480c      	ldr	r0, [pc, #48]	; (15834 <save_id+0x50>)
   15804:	2145      	movs	r1, #69	; 0x45
   15806:	f015 f9af 	bl	2ab68 <z_log_minimal_printk>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   1580a:	79e2      	ldrb	r2, [r4, #7]
   1580c:	490a      	ldr	r1, [pc, #40]	; (15838 <save_id+0x54>)
   1580e:	480b      	ldr	r0, [pc, #44]	; (1583c <save_id+0x58>)
   15810:	0112      	lsls	r2, r2, #4
   15812:	f7fe f859 	bl	138c8 <settings_save_one>
	if (err) {
   15816:	4602      	mov	r2, r0
   15818:	b128      	cbz	r0, 15826 <save_id+0x42>
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1581a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to save IRK (err %d)", err);
   1581e:	4808      	ldr	r0, [pc, #32]	; (15840 <save_id+0x5c>)
   15820:	2145      	movs	r1, #69	; 0x45
   15822:	f015 b9a1 	b.w	2ab68 <z_log_minimal_printk>
}
   15826:	bd10      	pop	{r4, pc}
   15828:	20000378 	.word	0x20000378
   1582c:	00031405 	.word	0x00031405
   15830:	00031414 	.word	0x00031414
   15834:	0003141a 	.word	0x0003141a
   15838:	200004dc 	.word	0x200004dc
   1583c:	0003143a 	.word	0x0003143a
   15840:	00031441 	.word	0x00031441

00015844 <set_setting>:
{
   15844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15848:	4c2f      	ldr	r4, [pc, #188]	; (15908 <set_setting+0xc4>)
   1584a:	f3bf 8f5b 	dmb	ish
   1584e:	461f      	mov	r7, r3
   15850:	6823      	ldr	r3, [r4, #0]
   15852:	f3bf 8f5b 	dmb	ish
   15856:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15858:	07da      	lsls	r2, r3, #31
{
   1585a:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1585c:	d51e      	bpl.n	1589c <set_setting+0x58>
	if (!name) {
   1585e:	b930      	cbnz	r0, 1586e <set_setting+0x2a>
		LOG_ERR("Insufficient number of arguments");
   15860:	482a      	ldr	r0, [pc, #168]	; (1590c <set_setting+0xc8>)
   15862:	2145      	movs	r1, #69	; 0x45
   15864:	f015 f980 	bl	2ab68 <z_log_minimal_printk>
		return -ENOENT;
   15868:	f06f 0001 	mvn.w	r0, #1
   1586c:	e017      	b.n	1589e <set_setting+0x5a>
	len = settings_name_next(name, &next);
   1586e:	a901      	add	r1, sp, #4
   15870:	f015 fc26 	bl	2b0c0 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15874:	4926      	ldr	r1, [pc, #152]	; (15910 <set_setting+0xcc>)
	len = settings_name_next(name, &next);
   15876:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   15878:	4602      	mov	r2, r0
   1587a:	4628      	mov	r0, r5
   1587c:	f016 f901 	bl	2ba82 <strncmp>
   15880:	bb38      	cbnz	r0, 158d2 <set_setting+0x8e>
   15882:	f3bf 8f5b 	dmb	ish
   15886:	6823      	ldr	r3, [r4, #0]
   15888:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1588c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   15890:	071b      	lsls	r3, r3, #28
   15892:	d507      	bpl.n	158a4 <set_setting+0x60>
			LOG_WRN("Ignoring identities stored in flash");
   15894:	481f      	ldr	r0, [pc, #124]	; (15914 <set_setting+0xd0>)
   15896:	2157      	movs	r1, #87	; 0x57
   15898:	f015 f966 	bl	2ab68 <z_log_minimal_printk>
		return 0;
   1589c:	2000      	movs	r0, #0
}
   1589e:	b002      	add	sp, #8
   158a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   158a4:	3ccc      	subs	r4, #204	; 0xcc
   158a6:	2207      	movs	r2, #7
   158a8:	4621      	mov	r1, r4
   158aa:	4638      	mov	r0, r7
   158ac:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   158ae:	2806      	cmp	r0, #6
   158b0:	d80a      	bhi.n	158c8 <set_setting+0x84>
				LOG_ERR("Invalid length ID address in storage");
   158b2:	4819      	ldr	r0, [pc, #100]	; (15918 <set_setting+0xd4>)
   158b4:	2145      	movs	r1, #69	; 0x45
   158b6:	f015 f957 	bl	2ab68 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   158ba:	2207      	movs	r2, #7
   158bc:	4629      	mov	r1, r5
   158be:	4620      	mov	r0, r4
   158c0:	f016 f925 	bl	2bb0e <memset>
			bt_dev.id_count = 0U;
   158c4:	71e5      	strb	r5, [r4, #7]
   158c6:	e7e9      	b.n	1589c <set_setting+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   158c8:	2307      	movs	r3, #7
   158ca:	fbb0 f0f3 	udiv	r0, r0, r3
   158ce:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   158d0:	e7e4      	b.n	1589c <set_setting+0x58>
	if (!strncmp(name, "irk", len)) {
   158d2:	4628      	mov	r0, r5
   158d4:	4911      	ldr	r1, [pc, #68]	; (1591c <set_setting+0xd8>)
   158d6:	4642      	mov	r2, r8
   158d8:	f016 f8d3 	bl	2ba82 <strncmp>
   158dc:	4605      	mov	r5, r0
   158de:	2800      	cmp	r0, #0
   158e0:	d1c2      	bne.n	15868 <set_setting+0x24>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   158e2:	2210      	movs	r2, #16
   158e4:	f104 0198 	add.w	r1, r4, #152	; 0x98
   158e8:	4638      	mov	r0, r7
   158ea:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   158ec:	280f      	cmp	r0, #15
   158ee:	d8d5      	bhi.n	1589c <set_setting+0x58>
				LOG_ERR("Invalid length IRK in storage");
   158f0:	480b      	ldr	r0, [pc, #44]	; (15920 <set_setting+0xdc>)
   158f2:	2145      	movs	r1, #69	; 0x45
   158f4:	f015 f938 	bl	2ab68 <z_log_minimal_printk>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   158f8:	2210      	movs	r2, #16
   158fa:	4629      	mov	r1, r5
   158fc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15900:	f016 f905 	bl	2bb0e <memset>
   15904:	e7ca      	b.n	1589c <set_setting+0x58>
   15906:	bf00      	nop
   15908:	20000444 	.word	0x20000444
   1590c:	00031462 	.word	0x00031462
   15910:	00030565 	.word	0x00030565
   15914:	00031488 	.word	0x00031488
   15918:	000314b1 	.word	0x000314b1
   1591c:	0003143d 	.word	0x0003143d
   15920:	000314db 	.word	0x000314db

00015924 <bt_settings_encode_key>:
{
   15924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15928:	b088      	sub	sp, #32
		snprintk(path, path_size,
   1592a:	799c      	ldrb	r4, [r3, #6]
{
   1592c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   15930:	795d      	ldrb	r5, [r3, #5]
   15932:	791e      	ldrb	r6, [r3, #4]
   15934:	78df      	ldrb	r7, [r3, #3]
   15936:	f893 c002 	ldrb.w	ip, [r3, #2]
   1593a:	f893 e001 	ldrb.w	lr, [r3, #1]
   1593e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15940:	f1b8 0f00 	cmp.w	r8, #0
   15944:	d00e      	beq.n	15964 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15946:	e9cd 3806 	strd	r3, r8, [sp, #24]
   1594a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1594e:	4613      	mov	r3, r2
   15950:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15954:	e9cd 4500 	strd	r4, r5, [sp]
   15958:	4a08      	ldr	r2, [pc, #32]	; (1597c <bt_settings_encode_key+0x58>)
   1595a:	f014 fefc 	bl	2a756 <snprintk>
}
   1595e:	b008      	add	sp, #32
   15960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15964:	e9cd e305 	strd	lr, r3, [sp, #20]
   15968:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   1596c:	4613      	mov	r3, r2
   1596e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15972:	4a03      	ldr	r2, [pc, #12]	; (15980 <bt_settings_encode_key+0x5c>)
   15974:	9400      	str	r4, [sp, #0]
   15976:	f014 feee 	bl	2a756 <snprintk>
}
   1597a:	e7f0      	b.n	1595e <bt_settings_encode_key+0x3a>
   1597c:	000314fe 	.word	0x000314fe
   15980:	00031522 	.word	0x00031522

00015984 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15984:	4801      	ldr	r0, [pc, #4]	; (1598c <bt_settings_save_id+0x8>)
   15986:	f00f bce7 	b.w	25358 <k_work_submit>
   1598a:	bf00      	nop
   1598c:	20000734 	.word	0x20000734

00015990 <commit_settings>:
}

static int commit_settings(void)
{
   15990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15992:	4d1d      	ldr	r5, [pc, #116]	; (15a08 <commit_settings+0x78>)
   15994:	f3bf 8f5b 	dmb	ish
   15998:	682b      	ldr	r3, [r5, #0]
   1599a:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1599e:	f013 0f01 	tst.w	r3, #1
   159a2:	462e      	mov	r6, r5
   159a4:	d02e      	beq.n	15a04 <commit_settings+0x74>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   159a6:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   159aa:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   159ae:	b983      	cbnz	r3, 159d2 <commit_settings+0x42>
		err = bt_setup_public_id_addr();
   159b0:	f001 ff16 	bl	177e0 <bt_setup_public_id_addr>
		if (err) {
   159b4:	4604      	mov	r4, r0
   159b6:	b128      	cbz	r0, 159c4 <commit_settings+0x34>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   159b8:	4814      	ldr	r0, [pc, #80]	; (15a0c <commit_settings+0x7c>)
   159ba:	2145      	movs	r1, #69	; 0x45
   159bc:	f015 f8d4 	bl	2ab68 <z_log_minimal_printk>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   159c0:	4620      	mov	r0, r4
   159c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   159c4:	79fb      	ldrb	r3, [r7, #7]
   159c6:	b923      	cbnz	r3, 159d2 <commit_settings+0x42>
		err = bt_setup_random_id_addr();
   159c8:	f001 ff8c 	bl	178e4 <bt_setup_random_id_addr>
		if (err) {
   159cc:	4604      	mov	r4, r0
   159ce:	2800      	cmp	r0, #0
   159d0:	d1f2      	bne.n	159b8 <commit_settings+0x28>
   159d2:	f3bf 8f5b 	dmb	ish
   159d6:	682b      	ldr	r3, [r5, #0]
   159d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   159dc:	075a      	lsls	r2, r3, #29
   159de:	d401      	bmi.n	159e4 <commit_settings+0x54>
		bt_finalize_init();
   159e0:	f001 f9d0 	bl	16d84 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   159e4:	f3bf 8f5b 	dmb	ish
   159e8:	e856 3f00 	ldrex	r3, [r6]
   159ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   159f0:	e846 2100 	strex	r1, r2, [r6]
   159f4:	2900      	cmp	r1, #0
   159f6:	d1f7      	bne.n	159e8 <commit_settings+0x58>
   159f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   159fc:	03db      	lsls	r3, r3, #15
   159fe:	d501      	bpl.n	15a04 <commit_settings+0x74>
		bt_settings_save_id();
   15a00:	f7ff ffc0 	bl	15984 <bt_settings_save_id>
		return 0;
   15a04:	2400      	movs	r4, #0
   15a06:	e7db      	b.n	159c0 <commit_settings+0x30>
   15a08:	20000444 	.word	0x20000444
   15a0c:	00031543 	.word	0x00031543

00015a10 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   15a10:	b510      	push	{r4, lr}
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   15a12:	f7fe f8c9 	bl	13ba8 <settings_subsys_init>
	if (err) {
   15a16:	4604      	mov	r4, r0
   15a18:	b120      	cbz	r0, 15a24 <bt_settings_init+0x14>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   15a1a:	4602      	mov	r2, r0
   15a1c:	2145      	movs	r1, #69	; 0x45
   15a1e:	4802      	ldr	r0, [pc, #8]	; (15a28 <bt_settings_init+0x18>)
   15a20:	f015 f8a2 	bl	2ab68 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   15a24:	4620      	mov	r0, r4
   15a26:	bd10      	pop	{r4, pc}
   15a28:	0003156c 	.word	0x0003156c

00015a2c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   15a2c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15a2e:	4d0a      	ldr	r5, [pc, #40]	; (15a58 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15a30:	4b0a      	ldr	r3, [pc, #40]	; (15a5c <long_wq_init+0x30>)
{
   15a32:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15a34:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15a36:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15a38:	9302      	str	r3, [sp, #8]
   15a3a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15a3c:	f00f fc92 	bl	25364 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15a40:	ab02      	add	r3, sp, #8
   15a42:	9300      	str	r3, [sp, #0]
   15a44:	4628      	mov	r0, r5
   15a46:	4906      	ldr	r1, [pc, #24]	; (15a60 <long_wq_init+0x34>)
   15a48:	230a      	movs	r3, #10
   15a4a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15a4e:	f00f fc9f 	bl	25390 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15a52:	4620      	mov	r0, r4
   15a54:	b005      	add	sp, #20
   15a56:	bd30      	pop	{r4, r5, pc}
   15a58:	20001c90 	.word	0x20001c90
   15a5c:	000315a5 	.word	0x000315a5
   15a60:	20004d80 	.word	0x20004d80

00015a64 <bt_long_wq_schedule>:
{
   15a64:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15a66:	4801      	ldr	r0, [pc, #4]	; (15a6c <bt_long_wq_schedule+0x8>)
   15a68:	f00f bd18 	b.w	2549c <k_work_schedule_for_queue>
   15a6c:	20001c90 	.word	0x20001c90

00015a70 <bt_long_wq_reschedule>:
{
   15a70:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   15a72:	4801      	ldr	r0, [pc, #4]	; (15a78 <bt_long_wq_reschedule+0x8>)
   15a74:	f00f bd78 	b.w	25568 <k_work_reschedule_for_queue>
   15a78:	20001c90 	.word	0x20001c90

00015a7c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15a7c:	b430      	push	{r4, r5}
   15a7e:	4603      	mov	r3, r0
   15a80:	4608      	mov	r0, r1
	switch (src->type) {
   15a82:	781a      	ldrb	r2, [r3, #0]
   15a84:	2a01      	cmp	r2, #1
   15a86:	d013      	beq.n	15ab0 <uuid_to_uuid128+0x34>
   15a88:	2a02      	cmp	r2, #2
   15a8a:	d026      	beq.n	15ada <uuid_to_uuid128+0x5e>
   15a8c:	b972      	cbnz	r2, 15aac <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15a8e:	4a15      	ldr	r2, [pc, #84]	; (15ae4 <uuid_to_uuid128+0x68>)
   15a90:	f102 0410 	add.w	r4, r2, #16
   15a94:	f852 5b04 	ldr.w	r5, [r2], #4
   15a98:	f841 5b04 	str.w	r5, [r1], #4
   15a9c:	42a2      	cmp	r2, r4
   15a9e:	d1f9      	bne.n	15a94 <uuid_to_uuid128+0x18>
   15aa0:	7812      	ldrb	r2, [r2, #0]
   15aa2:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15aa4:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   15aa6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15aa8:	0a1b      	lsrs	r3, r3, #8
   15aaa:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15aac:	bc30      	pop	{r4, r5}
   15aae:	4770      	bx	lr
		*dst = uuid128_base;
   15ab0:	4a0c      	ldr	r2, [pc, #48]	; (15ae4 <uuid_to_uuid128+0x68>)
   15ab2:	f102 0410 	add.w	r4, r2, #16
   15ab6:	f852 5b04 	ldr.w	r5, [r2], #4
   15aba:	f841 5b04 	str.w	r5, [r1], #4
   15abe:	42a2      	cmp	r2, r4
   15ac0:	d1f9      	bne.n	15ab6 <uuid_to_uuid128+0x3a>
   15ac2:	7812      	ldrb	r2, [r2, #0]
   15ac4:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15ac6:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15ac8:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15aca:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15ace:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15ad0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15ad2:	0a1b      	lsrs	r3, r3, #8
   15ad4:	7382      	strb	r2, [r0, #14]
   15ad6:	7403      	strb	r3, [r0, #16]
}
   15ad8:	e7e8      	b.n	15aac <uuid_to_uuid128+0x30>
}
   15ada:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15adc:	2211      	movs	r2, #17
   15ade:	4619      	mov	r1, r3
   15ae0:	f016 b80a 	b.w	2baf8 <memcpy>
   15ae4:	000315ae 	.word	0x000315ae

00015ae8 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15ae8:	2805      	cmp	r0, #5
{
   15aea:	b538      	push	{r3, r4, r5, lr}
   15aec:	4605      	mov	r5, r0
   15aee:	d803      	bhi.n	15af8 <bt_buf_get_rx+0x10>
   15af0:	212a      	movs	r1, #42	; 0x2a
   15af2:	40c1      	lsrs	r1, r0
   15af4:	07c9      	lsls	r1, r1, #31
   15af6:	d408      	bmi.n	15b0a <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15af8:	490a      	ldr	r1, [pc, #40]	; (15b24 <bt_buf_get_rx+0x3c>)
   15afa:	480b      	ldr	r0, [pc, #44]	; (15b28 <bt_buf_get_rx+0x40>)
   15afc:	223d      	movs	r2, #61	; 0x3d
   15afe:	f015 f825 	bl	2ab4c <assert_print>
   15b02:	4808      	ldr	r0, [pc, #32]	; (15b24 <bt_buf_get_rx+0x3c>)
   15b04:	213d      	movs	r1, #61	; 0x3d
   15b06:	f015 f81a 	bl	2ab3e <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15b0a:	4808      	ldr	r0, [pc, #32]	; (15b2c <bt_buf_get_rx+0x44>)
   15b0c:	f018 f9e3 	bl	2ded6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15b10:	4604      	mov	r4, r0
   15b12:	b120      	cbz	r0, 15b1e <bt_buf_get_rx+0x36>
	net_buf_simple_reserve(&buf->b, reserve);
   15b14:	2100      	movs	r1, #0
   15b16:	300c      	adds	r0, #12
   15b18:	f009 f8ec 	bl	1ecf4 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15b1c:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15b1e:	4620      	mov	r0, r4
   15b20:	bd38      	pop	{r3, r4, r5, pc}
   15b22:	bf00      	nop
   15b24:	000315bf 	.word	0x000315bf
   15b28:	0003013d 	.word	0x0003013d
   15b2c:	20000ca4 	.word	0x20000ca4

00015b30 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15b30:	b510      	push	{r4, lr}
   15b32:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15b34:	490a      	ldr	r1, [pc, #40]	; (15b60 <bt_buf_get_cmd_complete+0x30>)
{
   15b36:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15b38:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   15b3c:	b920      	cbnz	r0, 15b48 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15b42:	2001      	movs	r0, #1
   15b44:	f7ff bfd0 	b.w	15ae8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15b48:	f009 f9ee 	bl	1ef28 <net_buf_ref>
   15b4c:	2301      	movs	r3, #1
		buf->len = 0U;
   15b4e:	2100      	movs	r1, #0
   15b50:	7603      	strb	r3, [r0, #24]
   15b52:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15b54:	4604      	mov	r4, r0
   15b56:	300c      	adds	r0, #12
   15b58:	f009 f8cc 	bl	1ecf4 <net_buf_simple_reserve>
}
   15b5c:	4620      	mov	r0, r4
   15b5e:	bd10      	pop	{r4, pc}
   15b60:	20000378 	.word	0x20000378

00015b64 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15b64:	b570      	push	{r4, r5, r6, lr}
   15b66:	4604      	mov	r4, r0
	switch (evt) {
   15b68:	2c0f      	cmp	r4, #15
{
   15b6a:	460d      	mov	r5, r1
   15b6c:	4610      	mov	r0, r2
   15b6e:	4619      	mov	r1, r3
	switch (evt) {
   15b70:	d805      	bhi.n	15b7e <bt_buf_get_evt+0x1a>
   15b72:	2c0d      	cmp	r4, #13
   15b74:	d90d      	bls.n	15b92 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15b7a:	f7ff bfd9 	b.w	15b30 <bt_buf_get_cmd_complete>
	switch (evt) {
   15b7e:	2c13      	cmp	r4, #19
   15b80:	d107      	bne.n	15b92 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15b82:	480c      	ldr	r0, [pc, #48]	; (15bb4 <bt_buf_get_evt+0x50>)
   15b84:	f018 f9a7 	bl	2ded6 <net_buf_alloc_fixed>
			if (buf) {
   15b88:	4604      	mov	r4, r0
   15b8a:	b938      	cbnz	r0, 15b9c <bt_buf_get_evt+0x38>
{
   15b8c:	2400      	movs	r4, #0
}
   15b8e:	4620      	mov	r0, r4
   15b90:	bd70      	pop	{r4, r5, r6, pc}
   15b92:	4602      	mov	r2, r0
   15b94:	460b      	mov	r3, r1
		if (discardable) {
   15b96:	b145      	cbz	r5, 15baa <bt_buf_get_evt+0x46>
   15b98:	4807      	ldr	r0, [pc, #28]	; (15bb8 <bt_buf_get_evt+0x54>)
   15b9a:	e7f3      	b.n	15b84 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15b9c:	2100      	movs	r1, #0
   15b9e:	300c      	adds	r0, #12
   15ba0:	f009 f8a8 	bl	1ecf4 <net_buf_simple_reserve>
   15ba4:	2301      	movs	r3, #1
   15ba6:	7623      	strb	r3, [r4, #24]
}
   15ba8:	e7f1      	b.n	15b8e <bt_buf_get_evt+0x2a>
}
   15baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15bae:	2001      	movs	r0, #1
   15bb0:	f7ff bf9a 	b.w	15ae8 <bt_buf_get_rx>
   15bb4:	20000cd8 	.word	0x20000cd8
   15bb8:	20000c08 	.word	0x20000c08

00015bbc <ver_str>:
{
   15bbc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15bbe:	4d0b      	ldr	r5, [pc, #44]	; (15bec <ver_str+0x30>)
{
   15bc0:	4606      	mov	r6, r0
	const char * const str[] = {
   15bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15bc4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15bc6:	ac01      	add	r4, sp, #4
   15bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   15bd2:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15bd4:	682b      	ldr	r3, [r5, #0]
   15bd6:	6023      	str	r3, [r4, #0]
		return str[ver];
   15bd8:	bf9b      	ittet	ls
   15bda:	ab0e      	addls	r3, sp, #56	; 0x38
   15bdc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15be0:	4803      	ldrhi	r0, [pc, #12]	; (15bf0 <ver_str+0x34>)
		return str[ver];
   15be2:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   15be6:	b00e      	add	sp, #56	; 0x38
   15be8:	bd70      	pop	{r4, r5, r6, pc}
   15bea:	bf00      	nop
   15bec:	0002f524 	.word	0x0002f524
   15bf0:	000315ee 	.word	0x000315ee

00015bf4 <hci_data_buf_overflow>:
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15bf4:	68c3      	ldr	r3, [r0, #12]
   15bf6:	4802      	ldr	r0, [pc, #8]	; (15c00 <hci_data_buf_overflow+0xc>)
   15bf8:	781a      	ldrb	r2, [r3, #0]
   15bfa:	2157      	movs	r1, #87	; 0x57
   15bfc:	f014 bfb4 	b.w	2ab68 <z_log_minimal_printk>
   15c00:	000315f6 	.word	0x000315f6

00015c04 <hci_disconn_complete_prio>:
{
   15c04:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15c06:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c08:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15c0c:	781b      	ldrb	r3, [r3, #0]
   15c0e:	b963      	cbnz	r3, 15c2a <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15c10:	4620      	mov	r0, r4
   15c12:	f002 fd7f 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15c16:	4605      	mov	r5, r0
   15c18:	b940      	cbnz	r0, 15c2c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15c1a:	4b08      	ldr	r3, [pc, #32]	; (15c3c <hci_disconn_complete_prio+0x38>)
   15c1c:	881a      	ldrh	r2, [r3, #0]
   15c1e:	b922      	cbnz	r2, 15c2a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15c20:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15c24:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15c28:	8018      	strh	r0, [r3, #0]
}
   15c2a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15c2c:	2101      	movs	r1, #1
   15c2e:	f002 fd79 	bl	18724 <bt_conn_set_state>
	bt_conn_unref(conn);
   15c32:	4628      	mov	r0, r5
}
   15c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15c38:	f002 bd4c 	b.w	186d4 <bt_conn_unref>
   15c3c:	20004320 	.word	0x20004320

00015c40 <le_phy_update_complete>:
{
   15c40:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c42:	68c3      	ldr	r3, [r0, #12]
   15c44:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15c48:	4620      	mov	r0, r4
   15c4a:	f002 fd63 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15c4e:	b930      	cbnz	r0, 15c5e <le_phy_update_complete+0x1e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c50:	4622      	mov	r2, r4
   15c52:	4805      	ldr	r0, [pc, #20]	; (15c68 <le_phy_update_complete+0x28>)
}
   15c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c58:	2145      	movs	r1, #69	; 0x45
   15c5a:	f014 bf85 	b.w	2ab68 <z_log_minimal_printk>
}
   15c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15c62:	f002 bd37 	b.w	186d4 <bt_conn_unref>
   15c66:	bf00      	nop
   15c68:	00031623 	.word	0x00031623

00015c6c <le_data_len_change>:
{
   15c6c:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c6e:	68c3      	ldr	r3, [r0, #12]
   15c70:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15c72:	4620      	mov	r0, r4
   15c74:	f002 fd4e 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15c78:	b930      	cbnz	r0, 15c88 <le_data_len_change+0x1c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c7a:	4622      	mov	r2, r4
   15c7c:	4804      	ldr	r0, [pc, #16]	; (15c90 <le_data_len_change+0x24>)
}
   15c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c82:	2145      	movs	r1, #69	; 0x45
   15c84:	f014 bf70 	b.w	2ab68 <z_log_minimal_printk>
}
   15c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15c8c:	f002 bd22 	b.w	186d4 <bt_conn_unref>
   15c90:	00031623 	.word	0x00031623

00015c94 <hci_hardware_error>:
{
   15c94:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15c96:	2101      	movs	r1, #1
   15c98:	300c      	adds	r0, #12
   15c9a:	f009 f9ef 	bl	1f07c <net_buf_simple_pull_mem>
}
   15c9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15ca2:	7802      	ldrb	r2, [r0, #0]
   15ca4:	4801      	ldr	r0, [pc, #4]	; (15cac <hci_hardware_error+0x18>)
   15ca6:	2145      	movs	r1, #69	; 0x45
   15ca8:	f014 bf5e 	b.w	2ab68 <z_log_minimal_printk>
   15cac:	0003164c 	.word	0x0003164c

00015cb0 <rx_queue_put>:
{
   15cb0:	4601      	mov	r1, r0
   15cb2:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15cb4:	4807      	ldr	r0, [pc, #28]	; (15cd4 <rx_queue_put+0x24>)
   15cb6:	f009 f83d 	bl	1ed34 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15cba:	4907      	ldr	r1, [pc, #28]	; (15cd8 <rx_queue_put+0x28>)
   15cbc:	4807      	ldr	r0, [pc, #28]	; (15cdc <rx_queue_put+0x2c>)
   15cbe:	f018 ffec 	bl	2ec9a <k_work_submit_to_queue>
	if (err < 0) {
   15cc2:	1e02      	subs	r2, r0, #0
   15cc4:	da05      	bge.n	15cd2 <rx_queue_put+0x22>
}
   15cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Could not submit rx_work: %d", err);
   15cca:	4805      	ldr	r0, [pc, #20]	; (15ce0 <rx_queue_put+0x30>)
   15ccc:	2145      	movs	r1, #69	; 0x45
   15cce:	f014 bf4b 	b.w	2ab68 <z_log_minimal_printk>
}
   15cd2:	bd08      	pop	{r3, pc}
   15cd4:	200004b4 	.word	0x200004b4
   15cd8:	20000780 	.word	0x20000780
   15cdc:	20001db0 	.word	0x20001db0
   15ce0:	00031673 	.word	0x00031673

00015ce4 <le_conn_update_complete>:
{
   15ce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15ce6:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   15ce8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15cec:	4630      	mov	r0, r6
   15cee:	f002 fd11 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15cf2:	4604      	mov	r4, r0
   15cf4:	b938      	cbnz	r0, 15d06 <le_conn_update_complete+0x22>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15cf6:	481b      	ldr	r0, [pc, #108]	; (15d64 <le_conn_update_complete+0x80>)
   15cf8:	4632      	mov	r2, r6
   15cfa:	2145      	movs	r1, #69	; 0x45
}
   15cfc:	b002      	add	sp, #8
   15cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15d02:	f014 bf31 	b.w	2ab68 <z_log_minimal_printk>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15d06:	782b      	ldrb	r3, [r5, #0]
   15d08:	2b1a      	cmp	r3, #26
   15d0a:	d119      	bne.n	15d40 <le_conn_update_complete+0x5c>
   15d0c:	78c3      	ldrb	r3, [r0, #3]
   15d0e:	2b01      	cmp	r3, #1
   15d10:	d124      	bne.n	15d5c <le_conn_update_complete+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15d16:	3004      	adds	r0, #4
   15d18:	f016 f807 	bl	2bd2a <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15d1c:	0543      	lsls	r3, r0, #21
   15d1e:	d40f      	bmi.n	15d40 <le_conn_update_complete+0x5c>
		param.interval_min = conn->le.interval_min;
   15d20:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15d24:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   15d26:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   15d28:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   15d2c:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15d2e:	4620      	mov	r0, r4
   15d30:	f003 fbbc 	bl	194ac <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   15d34:	4620      	mov	r0, r4
}
   15d36:	b002      	add	sp, #8
   15d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15d3c:	f002 bcca 	b.w	186d4 <bt_conn_unref>
		if (!evt->status) {
   15d40:	782b      	ldrb	r3, [r5, #0]
   15d42:	b95b      	cbnz	r3, 15d5c <le_conn_update_complete+0x78>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   15d44:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   15d48:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   15d4c:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   15d50:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15d54:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   15d58:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		notify_le_param_updated(conn);
   15d5c:	4620      	mov	r0, r4
   15d5e:	f002 fe2f 	bl	189c0 <notify_le_param_updated>
   15d62:	e7e7      	b.n	15d34 <le_conn_update_complete+0x50>
   15d64:	00031623 	.word	0x00031623

00015d68 <handle_event>:
{
   15d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15d6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15d6e:	4605      	mov	r5, r0
   15d70:	4614      	mov	r4, r2
   15d72:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   15d74:	429c      	cmp	r4, r3
   15d76:	d10d      	bne.n	15d94 <handle_event+0x2c>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15d78:	8a04      	ldrh	r4, [r0, #16]
   15d7a:	68c0      	ldr	r0, [r0, #12]
   15d7c:	4621      	mov	r1, r4
   15d7e:	f7ff fcd1 	bl	15724 <bt_hex>
   15d82:	4623      	mov	r3, r4
   15d84:	9000      	str	r0, [sp, #0]
   15d86:	462a      	mov	r2, r5
   15d88:	480e      	ldr	r0, [pc, #56]	; (15dc4 <handle_event+0x5c>)
   15d8a:	2157      	movs	r1, #87	; 0x57
   15d8c:	f014 feec 	bl	2ab68 <z_log_minimal_printk>
}
   15d90:	b003      	add	sp, #12
   15d92:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
   15d94:	4622      	mov	r2, r4
   15d96:	f812 1b08 	ldrb.w	r1, [r2], #8
   15d9a:	42a9      	cmp	r1, r5
   15d9c:	d110      	bne.n	15dc0 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   15d9e:	8a02      	ldrh	r2, [r0, #16]
   15da0:	7863      	ldrb	r3, [r4, #1]
   15da2:	4293      	cmp	r3, r2
   15da4:	d907      	bls.n	15db6 <handle_event+0x4e>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   15da6:	4808      	ldr	r0, [pc, #32]	; (15dc8 <handle_event+0x60>)
   15da8:	462b      	mov	r3, r5
   15daa:	2145      	movs	r1, #69	; 0x45
}
   15dac:	b003      	add	sp, #12
   15dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   15db2:	f014 bed9 	b.w	2ab68 <z_log_minimal_printk>
		handler->handler(buf);
   15db6:	6863      	ldr	r3, [r4, #4]
}
   15db8:	b003      	add	sp, #12
   15dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   15dbe:	4718      	bx	r3
   15dc0:	4614      	mov	r4, r2
   15dc2:	e7d7      	b.n	15d74 <handle_event+0xc>
   15dc4:	000316bc 	.word	0x000316bc
   15dc8:	00031695 	.word	0x00031695

00015dcc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   15dcc:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15dce:	4844      	ldr	r0, [pc, #272]	; (15ee0 <rx_work_handler+0x114>)
   15dd0:	f009 f802 	bl	1edd8 <net_buf_slist_get>
	if (!buf) {
   15dd4:	4604      	mov	r4, r0
   15dd6:	2800      	cmp	r0, #0
   15dd8:	f000 8081 	beq.w	15ede <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15ddc:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   15dde:	2a01      	cmp	r2, #1
   15de0:	d04d      	beq.n	15e7e <rx_work_handler+0xb2>
   15de2:	2a03      	cmp	r2, #3
   15de4:	d178      	bne.n	15ed8 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15de6:	8a03      	ldrh	r3, [r0, #16]
   15de8:	2b03      	cmp	r3, #3
   15dea:	d80b      	bhi.n	15e04 <rx_work_handler+0x38>
   15dec:	493d      	ldr	r1, [pc, #244]	; (15ee4 <rx_work_handler+0x118>)
   15dee:	483e      	ldr	r0, [pc, #248]	; (15ee8 <rx_work_handler+0x11c>)
   15df0:	f240 12ed 	movw	r2, #493	; 0x1ed
   15df4:	f014 feaa 	bl	2ab4c <assert_print>
   15df8:	4040      	eors	r0, r0
   15dfa:	f380 8811 	msr	BASEPRI, r0
   15dfe:	f04f 0003 	mov.w	r0, #3
   15e02:	df02      	svc	2
   15e04:	2104      	movs	r1, #4
   15e06:	f104 000c 	add.w	r0, r4, #12
   15e0a:	f009 f937 	bl	1f07c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15e0e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   15e10:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15e12:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15e14:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   15e16:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   15e18:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15e1c:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   15e1e:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   15e20:	d007      	beq.n	15e32 <rx_work_handler+0x66>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15e22:	4832      	ldr	r0, [pc, #200]	; (15eec <rx_work_handler+0x120>)
   15e24:	2145      	movs	r1, #69	; 0x45
   15e26:	f014 fe9f 	bl	2ab68 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   15e2a:	4620      	mov	r0, r4
   15e2c:	f009 f83a 	bl	1eea4 <net_buf_unref>
		break;
   15e30:	e014      	b.n	15e5c <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15e32:	f002 fc6f 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15e36:	4605      	mov	r5, r0
   15e38:	b928      	cbnz	r0, 15e46 <rx_work_handler+0x7a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15e3a:	8b62      	ldrh	r2, [r4, #26]
   15e3c:	482c      	ldr	r0, [pc, #176]	; (15ef0 <rx_work_handler+0x124>)
   15e3e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15e40:	f014 fe92 	bl	2ab68 <z_log_minimal_printk>
   15e44:	e7f1      	b.n	15e2a <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   15e46:	f002 fd6b 	bl	18920 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15e4a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15e4c:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   15e4e:	4621      	mov	r1, r4
   15e50:	4628      	mov	r0, r5
   15e52:	f002 fb19 	bl	18488 <bt_conn_recv>
	bt_conn_unref(conn);
   15e56:	4628      	mov	r0, r5
   15e58:	f002 fc3c 	bl	186d4 <bt_conn_unref>
	return list->head;
   15e5c:	4b25      	ldr	r3, [pc, #148]	; (15ef4 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15e5e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   15e62:	2b00      	cmp	r3, #0
   15e64:	d03b      	beq.n	15ede <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15e66:	4924      	ldr	r1, [pc, #144]	; (15ef8 <rx_work_handler+0x12c>)
   15e68:	4824      	ldr	r0, [pc, #144]	; (15efc <rx_work_handler+0x130>)
   15e6a:	f018 ff16 	bl	2ec9a <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15e6e:	1e02      	subs	r2, r0, #0
   15e70:	da35      	bge.n	15ede <rx_work_handler+0x112>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   15e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Could not submit rx_work: %d", err);
   15e76:	4822      	ldr	r0, [pc, #136]	; (15f00 <rx_work_handler+0x134>)
   15e78:	2145      	movs	r1, #69	; 0x45
   15e7a:	f014 be75 	b.w	2ab68 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15e7e:	8a03      	ldrh	r3, [r0, #16]
   15e80:	2b01      	cmp	r3, #1
   15e82:	d80b      	bhi.n	15e9c <rx_work_handler+0xd0>
   15e84:	4917      	ldr	r1, [pc, #92]	; (15ee4 <rx_work_handler+0x118>)
   15e86:	4818      	ldr	r0, [pc, #96]	; (15ee8 <rx_work_handler+0x11c>)
   15e88:	f640 126d 	movw	r2, #2413	; 0x96d
   15e8c:	f014 fe5e 	bl	2ab4c <assert_print>
   15e90:	4040      	eors	r0, r0
   15e92:	f380 8811 	msr	BASEPRI, r0
   15e96:	f04f 0003 	mov.w	r0, #3
   15e9a:	df02      	svc	2
   15e9c:	2102      	movs	r1, #2
   15e9e:	f104 000c 	add.w	r0, r4, #12
   15ea2:	f009 f8eb 	bl	1f07c <net_buf_simple_pull_mem>
   15ea6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15ea8:	7800      	ldrb	r0, [r0, #0]
   15eaa:	f015 ff10 	bl	2bcce <bt_hci_evt_get_flags>
   15eae:	0783      	lsls	r3, r0, #30
   15eb0:	d40b      	bmi.n	15eca <rx_work_handler+0xfe>
   15eb2:	490c      	ldr	r1, [pc, #48]	; (15ee4 <rx_work_handler+0x118>)
   15eb4:	480c      	ldr	r0, [pc, #48]	; (15ee8 <rx_work_handler+0x11c>)
   15eb6:	f640 1271 	movw	r2, #2417	; 0x971
   15eba:	f014 fe47 	bl	2ab4c <assert_print>
   15ebe:	4040      	eors	r0, r0
   15ec0:	f380 8811 	msr	BASEPRI, r0
   15ec4:	f04f 0003 	mov.w	r0, #3
   15ec8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15eca:	4a0e      	ldr	r2, [pc, #56]	; (15f04 <rx_work_handler+0x138>)
   15ecc:	7828      	ldrb	r0, [r5, #0]
   15ece:	2306      	movs	r3, #6
   15ed0:	4621      	mov	r1, r4
   15ed2:	f7ff ff49 	bl	15d68 <handle_event>
	net_buf_unref(buf);
   15ed6:	e7a8      	b.n	15e2a <rx_work_handler+0x5e>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15ed8:	480b      	ldr	r0, [pc, #44]	; (15f08 <rx_work_handler+0x13c>)
   15eda:	2145      	movs	r1, #69	; 0x45
   15edc:	e7b0      	b.n	15e40 <rx_work_handler+0x74>
}
   15ede:	bd70      	pop	{r4, r5, r6, pc}
   15ee0:	200004b4 	.word	0x200004b4
   15ee4:	000316e3 	.word	0x000316e3
   15ee8:	0003013d 	.word	0x0003013d
   15eec:	00031717 	.word	0x00031717
   15ef0:	00031740 	.word	0x00031740
   15ef4:	20000378 	.word	0x20000378
   15ef8:	20000780 	.word	0x20000780
   15efc:	20001db0 	.word	0x20001db0
   15f00:	00031673 	.word	0x00031673
   15f04:	0002f72c 	.word	0x0002f72c
   15f08:	00031767 	.word	0x00031767

00015f0c <hci_le_meta_event>:
{
   15f0c:	b510      	push	{r4, lr}
   15f0e:	2101      	movs	r1, #1
   15f10:	4604      	mov	r4, r0
   15f12:	300c      	adds	r0, #12
   15f14:	f009 f8b2 	bl	1f07c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15f18:	4621      	mov	r1, r4
   15f1a:	4a03      	ldr	r2, [pc, #12]	; (15f28 <hci_le_meta_event+0x1c>)
   15f1c:	7800      	ldrb	r0, [r0, #0]
}
   15f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15f22:	230b      	movs	r3, #11
   15f24:	f7ff bf20 	b.w	15d68 <handle_event>
   15f28:	0002f75c 	.word	0x0002f75c

00015f2c <le_remote_feat_complete>:
{
   15f2c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15f2e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15f30:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15f34:	4630      	mov	r0, r6
   15f36:	f002 fbed 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   15f3a:	4604      	mov	r4, r0
   15f3c:	b930      	cbnz	r0, 15f4c <le_remote_feat_complete+0x20>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15f3e:	4632      	mov	r2, r6
   15f40:	480b      	ldr	r0, [pc, #44]	; (15f70 <le_remote_feat_complete+0x44>)
}
   15f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15f46:	2145      	movs	r1, #69	; 0x45
   15f48:	f014 be0e 	b.w	2ab68 <z_log_minimal_printk>
	if (!evt->status) {
   15f4c:	782b      	ldrb	r3, [r5, #0]
   15f4e:	b923      	cbnz	r3, 15f5a <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   15f50:	2208      	movs	r2, #8
   15f52:	1ce9      	adds	r1, r5, #3
   15f54:	30b4      	adds	r0, #180	; 0xb4
   15f56:	f015 fdcf 	bl	2baf8 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15f5a:	1d20      	adds	r0, r4, #4
   15f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   15f60:	f015 fee3 	bl	2bd2a <atomic_or>
	bt_conn_unref(conn);
   15f64:	4620      	mov	r0, r4
}
   15f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15f6a:	f002 bbb3 	b.w	186d4 <bt_conn_unref>
   15f6e:	bf00      	nop
   15f70:	00031623 	.word	0x00031623

00015f74 <hci_cmd_done>:
{
   15f74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15f78:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f7a:	7a90      	ldrb	r0, [r2, #10]
   15f7c:	4d39      	ldr	r5, [pc, #228]	; (16064 <hci_cmd_done+0xf0>)
{
   15f7e:	460f      	mov	r7, r1
   15f80:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f82:	f008 fdad 	bl	1eae0 <net_buf_pool_get>
   15f86:	4285      	cmp	r5, r0
   15f88:	d00e      	beq.n	15fa8 <hci_cmd_done+0x34>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   15f8a:	7aa4      	ldrb	r4, [r4, #10]
   15f8c:	4620      	mov	r0, r4
   15f8e:	f008 fda7 	bl	1eae0 <net_buf_pool_get>
   15f92:	4623      	mov	r3, r4
   15f94:	e9cd 0500 	strd	r0, r5, [sp]
   15f98:	4632      	mov	r2, r6
   15f9a:	4833      	ldr	r0, [pc, #204]	; (16068 <hci_cmd_done+0xf4>)
   15f9c:	2157      	movs	r1, #87	; 0x57
   15f9e:	f014 fde3 	bl	2ab68 <z_log_minimal_printk>
}
   15fa2:	b002      	add	sp, #8
   15fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   15fa8:	4620      	mov	r0, r4
   15faa:	f008 fda1 	bl	1eaf0 <net_buf_id>
   15fae:	4d2f      	ldr	r5, [pc, #188]	; (1606c <hci_cmd_done+0xf8>)
   15fb0:	f04f 080c 	mov.w	r8, #12
   15fb4:	fb08 5000 	mla	r0, r8, r0, r5
   15fb8:	8843      	ldrh	r3, [r0, #2]
   15fba:	42b3      	cmp	r3, r6
   15fbc:	d00d      	beq.n	15fda <hci_cmd_done+0x66>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   15fbe:	4620      	mov	r0, r4
   15fc0:	f008 fd96 	bl	1eaf0 <net_buf_id>
   15fc4:	fb08 5000 	mla	r0, r8, r0, r5
   15fc8:	4632      	mov	r2, r6
   15fca:	8843      	ldrh	r3, [r0, #2]
   15fcc:	4828      	ldr	r0, [pc, #160]	; (16070 <hci_cmd_done+0xfc>)
   15fce:	2157      	movs	r1, #87	; 0x57
}
   15fd0:	b002      	add	sp, #8
   15fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   15fd6:	f014 bdc7 	b.w	2ab68 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   15fda:	4e26      	ldr	r6, [pc, #152]	; (16074 <hci_cmd_done+0x100>)
   15fdc:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   15fe0:	b120      	cbz	r0, 15fec <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   15fe2:	f008 ff5f 	bl	1eea4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15fe6:	2300      	movs	r3, #0
   15fe8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15fec:	4620      	mov	r0, r4
   15fee:	f008 fd7f 	bl	1eaf0 <net_buf_id>
   15ff2:	260c      	movs	r6, #12
   15ff4:	fb06 5000 	mla	r0, r6, r0, r5
   15ff8:	6843      	ldr	r3, [r0, #4]
   15ffa:	b19b      	cbz	r3, 16024 <hci_cmd_done+0xb0>
   15ffc:	b997      	cbnz	r7, 16024 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15ffe:	4620      	mov	r0, r4
   16000:	f008 fd76 	bl	1eaf0 <net_buf_id>
   16004:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16008:	2101      	movs	r1, #1
   1600a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1600c:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   16010:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   16012:	f003 061f 	and.w	r6, r3, #31
   16016:	40b1      	lsls	r1, r6
	if (val) {
   16018:	095b      	lsrs	r3, r3, #5
   1601a:	b1e2      	cbz	r2, 16056 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1601c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16020:	f015 fe83 	bl	2bd2a <atomic_or>
	if (cmd(buf)->sync) {
   16024:	4620      	mov	r0, r4
   16026:	f008 fd63 	bl	1eaf0 <net_buf_id>
   1602a:	260c      	movs	r6, #12
   1602c:	fb06 5000 	mla	r0, r6, r0, r5
   16030:	6883      	ldr	r3, [r0, #8]
   16032:	2b00      	cmp	r3, #0
   16034:	d0b5      	beq.n	15fa2 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   16036:	4620      	mov	r0, r4
   16038:	f008 fd5a 	bl	1eaf0 <net_buf_id>
   1603c:	4370      	muls	r0, r6
   1603e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16040:	4620      	mov	r0, r4
   16042:	f008 fd55 	bl	1eaf0 <net_buf_id>
   16046:	fb06 5500 	mla	r5, r6, r0, r5
   1604a:	68a8      	ldr	r0, [r5, #8]
}
   1604c:	b002      	add	sp, #8
   1604e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   16052:	f00e be57 	b.w	24d04 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16056:	43c9      	mvns	r1, r1
   16058:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1605c:	f015 fe74 	bl	2bd48 <atomic_and.isra.0>
   16060:	e7e0      	b.n	16024 <hci_cmd_done+0xb0>
   16062:	bf00      	nop
   16064:	20000c70 	.word	0x20000c70
   16068:	00031780 	.word	0x00031780
   1606c:	200032fc 	.word	0x200032fc
   16070:	000317ba 	.word	0x000317ba
   16074:	20000378 	.word	0x20000378

00016078 <hci_cmd_status>:
{
   16078:	b538      	push	{r3, r4, r5, lr}
   1607a:	2104      	movs	r1, #4
   1607c:	4604      	mov	r4, r0
   1607e:	300c      	adds	r0, #12
   16080:	f008 fffc 	bl	1f07c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16084:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16086:	7801      	ldrb	r1, [r0, #0]
   16088:	8840      	ldrh	r0, [r0, #2]
   1608a:	4622      	mov	r2, r4
   1608c:	f7ff ff72 	bl	15f74 <hci_cmd_done>
	if (ncmd) {
   16090:	b125      	cbz	r5, 1609c <hci_cmd_status+0x24>
   16092:	4803      	ldr	r0, [pc, #12]	; (160a0 <hci_cmd_status+0x28>)
}
   16094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16098:	f00e be34 	b.w	24d04 <z_impl_k_sem_give>
   1609c:	bd38      	pop	{r3, r4, r5, pc}
   1609e:	bf00      	nop
   160a0:	20000498 	.word	0x20000498

000160a4 <hci_cmd_complete>:
{
   160a4:	b538      	push	{r3, r4, r5, lr}
   160a6:	2103      	movs	r1, #3
   160a8:	4604      	mov	r4, r0
   160aa:	300c      	adds	r0, #12
   160ac:	f008 ffe6 	bl	1f07c <net_buf_simple_pull_mem>
	status = buf->data[0];
   160b0:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   160b2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   160b4:	7819      	ldrb	r1, [r3, #0]
   160b6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   160ba:	4622      	mov	r2, r4
   160bc:	f7ff ff5a 	bl	15f74 <hci_cmd_done>
	if (ncmd) {
   160c0:	b125      	cbz	r5, 160cc <hci_cmd_complete+0x28>
   160c2:	4803      	ldr	r0, [pc, #12]	; (160d0 <hci_cmd_complete+0x2c>)
}
   160c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   160c8:	f00e be1c 	b.w	24d04 <z_impl_k_sem_give>
   160cc:	bd38      	pop	{r3, r4, r5, pc}
   160ce:	bf00      	nop
   160d0:	20000498 	.word	0x20000498

000160d4 <hci_num_completed_packets>:
{
   160d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   160d8:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   160da:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   160dc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 161b0 <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   160e0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   160e2:	783b      	ldrb	r3, [r7, #0]
   160e4:	429d      	cmp	r5, r3
   160e6:	db01      	blt.n	160ec <hci_num_completed_packets+0x18>
}
   160e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   160ec:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   160f0:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   160f4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   160f8:	4650      	mov	r0, sl
   160fa:	f002 fb0b 	bl	18714 <bt_conn_lookup_handle>
		if (!conn) {
   160fe:	4604      	mov	r4, r0
   16100:	b1d0      	cbz	r0, 16138 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   16102:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   16106:	b346      	cbz	r6, 1615a <hci_num_completed_packets+0x86>
	__asm__ volatile(
   16108:	f04f 0340 	mov.w	r3, #64	; 0x40
   1610c:	f3ef 8211 	mrs	r2, BASEPRI
   16110:	f383 8812 	msr	BASEPRI_MAX, r3
   16114:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16118:	69e3      	ldr	r3, [r4, #28]
   1611a:	b1a3      	cbz	r3, 16146 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   1611c:	3b01      	subs	r3, #1
   1611e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16120:	f382 8811 	msr	BASEPRI, r2
   16124:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16128:	4620      	mov	r0, r4
   1612a:	f002 f937 	bl	1839c <bt_conn_get_pkts>
   1612e:	3e01      	subs	r6, #1
   16130:	f00e fde8 	bl	24d04 <z_impl_k_sem_give>
   16134:	b2b6      	uxth	r6, r6
   16136:	e7e6      	b.n	16106 <hci_num_completed_packets+0x32>
			LOG_ERR("No connection for handle %u", handle);
   16138:	481e      	ldr	r0, [pc, #120]	; (161b4 <hci_num_completed_packets+0xe0>)
   1613a:	4652      	mov	r2, sl
   1613c:	2145      	movs	r1, #69	; 0x45
   1613e:	f014 fd13 	bl	2ab68 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   16142:	3501      	adds	r5, #1
   16144:	e7cd      	b.n	160e2 <hci_num_completed_packets+0xe>
   16146:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16148:	b95b      	cbnz	r3, 16162 <hci_num_completed_packets+0x8e>
   1614a:	f382 8811 	msr	BASEPRI, r2
   1614e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   16152:	2145      	movs	r1, #69	; 0x45
   16154:	4648      	mov	r0, r9
   16156:	f014 fd07 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_unref(conn);
   1615a:	4620      	mov	r0, r4
   1615c:	f002 faba 	bl	186d4 <bt_conn_unref>
   16160:	e7ef      	b.n	16142 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16162:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16164:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16166:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16168:	428b      	cmp	r3, r1
	list->tail = node;
   1616a:	bf08      	it	eq
   1616c:	61a0      	streq	r0, [r4, #24]
   1616e:	f382 8811 	msr	BASEPRI, r2
   16172:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16176:	f04f 0240 	mov.w	r2, #64	; 0x40
   1617a:	f3ef 8111 	mrs	r1, BASEPRI
   1617e:	f382 8812 	msr	BASEPRI_MAX, r2
   16182:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16186:	68da      	ldr	r2, [r3, #12]
   16188:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1618a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1618e:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   16192:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16194:	b94a      	cbnz	r2, 161aa <hci_num_completed_packets+0xd6>
	list->head = node;
   16196:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1619a:	f381 8811 	msr	BASEPRI, r1
   1619e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   161a2:	4650      	mov	r0, sl
   161a4:	f00f f8d8 	bl	25358 <k_work_submit>
   161a8:	e7be      	b.n	16128 <hci_num_completed_packets+0x54>
	parent->next = child;
   161aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   161ac:	6263      	str	r3, [r4, #36]	; 0x24
}
   161ae:	e7f4      	b.n	1619a <hci_num_completed_packets+0xc6>
   161b0:	00031813 	.word	0x00031813
   161b4:	000317f2 	.word	0x000317f2

000161b8 <hci_disconn_complete>:
{
   161b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   161ba:	68c6      	ldr	r6, [r0, #12]
	if (evt->status) {
   161bc:	7835      	ldrb	r5, [r6, #0]
   161be:	bb4d      	cbnz	r5, 16214 <hci_disconn_complete+0x5c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161c0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   161c4:	4638      	mov	r0, r7
   161c6:	f002 faa5 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   161ca:	4604      	mov	r4, r0
   161cc:	b930      	cbnz	r0, 161dc <hci_disconn_complete+0x24>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   161ce:	463a      	mov	r2, r7
   161d0:	4811      	ldr	r0, [pc, #68]	; (16218 <hci_disconn_complete+0x60>)
}
   161d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   161d6:	2145      	movs	r1, #69	; 0x45
   161d8:	f014 bcc6 	b.w	2ab68 <z_log_minimal_printk>
	conn->err = evt->reason;
   161dc:	78f3      	ldrb	r3, [r6, #3]
   161de:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   161e0:	4629      	mov	r1, r5
   161e2:	f002 fa9f 	bl	18724 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   161e6:	78a3      	ldrb	r3, [r4, #2]
   161e8:	2b01      	cmp	r3, #1
   161ea:	d004      	beq.n	161f6 <hci_disconn_complete+0x3e>
	bt_conn_unref(conn);
   161ec:	4620      	mov	r0, r4
}
   161ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   161f2:	f002 ba6f 	b.w	186d4 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161f6:	f3bf 8f5b 	dmb	ish
   161fa:	6863      	ldr	r3, [r4, #4]
   161fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   16200:	07db      	lsls	r3, r3, #31
   16202:	d5f3      	bpl.n	161ec <hci_disconn_complete+0x34>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   16204:	4620      	mov	r0, r4
   16206:	2102      	movs	r1, #2
   16208:	f002 fa8c 	bl	18724 <bt_conn_set_state>
		bt_le_scan_update(false);
   1620c:	4628      	mov	r0, r5
   1620e:	f001 fc8d 	bl	17b2c <bt_le_scan_update>
   16212:	e7eb      	b.n	161ec <hci_disconn_complete+0x34>
}
   16214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16216:	bf00      	nop
   16218:	0003182f 	.word	0x0003182f

0001621c <bt_hci_cmd_state_set_init>:
{
   1621c:	b510      	push	{r4, lr}
	state->bit = bit;
   1621e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16222:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16226:	720b      	strb	r3, [r1, #8]
{
   16228:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1622a:	f008 fc61 	bl	1eaf0 <net_buf_id>
   1622e:	4b03      	ldr	r3, [pc, #12]	; (1623c <bt_hci_cmd_state_set_init+0x20>)
   16230:	220c      	movs	r2, #12
   16232:	fb02 3300 	mla	r3, r2, r0, r3
   16236:	605c      	str	r4, [r3, #4]
}
   16238:	bd10      	pop	{r4, pc}
   1623a:	bf00      	nop
   1623c:	200032fc 	.word	0x200032fc

00016240 <bt_hci_cmd_create>:
{
   16240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16244:	f04f 32ff 	mov.w	r2, #4294967295
   16248:	4606      	mov	r6, r0
   1624a:	f04f 33ff 	mov.w	r3, #4294967295
   1624e:	481d      	ldr	r0, [pc, #116]	; (162c4 <bt_hci_cmd_create+0x84>)
   16250:	460f      	mov	r7, r1
   16252:	f017 fe40 	bl	2ded6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16256:	4604      	mov	r4, r0
   16258:	b950      	cbnz	r0, 16270 <bt_hci_cmd_create+0x30>
   1625a:	491b      	ldr	r1, [pc, #108]	; (162c8 <bt_hci_cmd_create+0x88>)
   1625c:	481b      	ldr	r0, [pc, #108]	; (162cc <bt_hci_cmd_create+0x8c>)
   1625e:	f240 1201 	movw	r2, #257	; 0x101
   16262:	f014 fc73 	bl	2ab4c <assert_print>
   16266:	4818      	ldr	r0, [pc, #96]	; (162c8 <bt_hci_cmd_create+0x88>)
   16268:	f240 1101 	movw	r1, #257	; 0x101
   1626c:	f014 fc67 	bl	2ab3e <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   16270:	f100 0a0c 	add.w	sl, r0, #12
   16274:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16276:	f04f 0800 	mov.w	r8, #0
   1627a:	4650      	mov	r0, sl
   1627c:	f008 fd3a 	bl	1ecf4 <net_buf_simple_reserve>
   16280:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   16284:	4620      	mov	r0, r4
   16286:	f008 fc33 	bl	1eaf0 <net_buf_id>
   1628a:	4d11      	ldr	r5, [pc, #68]	; (162d0 <bt_hci_cmd_create+0x90>)
   1628c:	f04f 090c 	mov.w	r9, #12
   16290:	fb09 5000 	mla	r0, r9, r0, r5
   16294:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   16296:	4620      	mov	r0, r4
   16298:	f008 fc2a 	bl	1eaf0 <net_buf_id>
   1629c:	fb09 5000 	mla	r0, r9, r0, r5
   162a0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   162a4:	4620      	mov	r0, r4
   162a6:	f008 fc23 	bl	1eaf0 <net_buf_id>
   162aa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   162ae:	2103      	movs	r1, #3
   162b0:	f8c5 8004 	str.w	r8, [r5, #4]
   162b4:	4650      	mov	r0, sl
   162b6:	f008 fefb 	bl	1f0b0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   162ba:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   162bc:	7087      	strb	r7, [r0, #2]
}
   162be:	4620      	mov	r0, r4
   162c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   162c4:	20000c70 	.word	0x20000c70
   162c8:	000316e3 	.word	0x000316e3
   162cc:	0003013d 	.word	0x0003013d
   162d0:	200032fc 	.word	0x200032fc

000162d4 <bt_hci_cmd_send_sync>:
{
   162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   162d6:	4607      	mov	r7, r0
   162d8:	b087      	sub	sp, #28
   162da:	4615      	mov	r5, r2
	if (!buf) {
   162dc:	460c      	mov	r4, r1
   162de:	b921      	cbnz	r1, 162ea <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   162e0:	f7ff ffae 	bl	16240 <bt_hci_cmd_create>
		if (!buf) {
   162e4:	4604      	mov	r4, r0
   162e6:	2800      	cmp	r0, #0
   162e8:	d047      	beq.n	1637a <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   162ea:	2201      	movs	r2, #1
   162ec:	2100      	movs	r1, #0
   162ee:	4668      	mov	r0, sp
   162f0:	f018 fc70 	bl	2ebd4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   162f4:	4620      	mov	r0, r4
   162f6:	f008 fbfb 	bl	1eaf0 <net_buf_id>
   162fa:	4e21      	ldr	r6, [pc, #132]	; (16380 <bt_hci_cmd_send_sync+0xac>)
   162fc:	230c      	movs	r3, #12
   162fe:	fb03 6000 	mla	r0, r3, r0, r6
   16302:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16306:	4620      	mov	r0, r4
   16308:	f008 fe0e 	bl	1ef28 <net_buf_ref>
   1630c:	4601      	mov	r1, r0
   1630e:	481d      	ldr	r0, [pc, #116]	; (16384 <bt_hci_cmd_send_sync+0xb0>)
   16310:	f008 fda8 	bl	1ee64 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16314:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16318:	2300      	movs	r3, #0
   1631a:	4668      	mov	r0, sp
   1631c:	f00e fd2c 	bl	24d78 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16320:	b158      	cbz	r0, 1633a <bt_hci_cmd_send_sync+0x66>
   16322:	4919      	ldr	r1, [pc, #100]	; (16388 <bt_hci_cmd_send_sync+0xb4>)
   16324:	4819      	ldr	r0, [pc, #100]	; (1638c <bt_hci_cmd_send_sync+0xb8>)
   16326:	f240 1249 	movw	r2, #329	; 0x149
   1632a:	f014 fc0f 	bl	2ab4c <assert_print>
   1632e:	4040      	eors	r0, r0
   16330:	f380 8811 	msr	BASEPRI, r0
   16334:	f04f 0003 	mov.w	r0, #3
   16338:	df02      	svc	2
	status = cmd(buf)->status;
   1633a:	4620      	mov	r0, r4
   1633c:	f008 fbd8 	bl	1eaf0 <net_buf_id>
   16340:	230c      	movs	r3, #12
   16342:	4358      	muls	r0, r3
   16344:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   16346:	b186      	cbz	r6, 1636a <bt_hci_cmd_send_sync+0x96>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16348:	4811      	ldr	r0, [pc, #68]	; (16390 <bt_hci_cmd_send_sync+0xbc>)
   1634a:	4633      	mov	r3, r6
   1634c:	463a      	mov	r2, r7
   1634e:	2157      	movs	r1, #87	; 0x57
   16350:	f014 fc0a 	bl	2ab68 <z_log_minimal_printk>
		net_buf_unref(buf);
   16354:	4620      	mov	r0, r4
   16356:	f008 fda5 	bl	1eea4 <net_buf_unref>
			return -ECONNREFUSED;
   1635a:	2e09      	cmp	r6, #9
   1635c:	bf14      	ite	ne
   1635e:	f06f 0004 	mvnne.w	r0, #4
   16362:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16366:	b007      	add	sp, #28
   16368:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   1636a:	b115      	cbz	r5, 16372 <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   1636c:	602c      	str	r4, [r5, #0]
	return 0;
   1636e:	2000      	movs	r0, #0
   16370:	e7f9      	b.n	16366 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   16372:	4620      	mov	r0, r4
   16374:	f008 fd96 	bl	1eea4 <net_buf_unref>
   16378:	e7f9      	b.n	1636e <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
   1637a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1637e:	e7f2      	b.n	16366 <bt_hci_cmd_send_sync+0x92>
   16380:	200032fc 	.word	0x200032fc
   16384:	200004bc 	.word	0x200004bc
   16388:	000316e3 	.word	0x000316e3
   1638c:	0003013d 	.word	0x0003013d
   16390:	0003185a 	.word	0x0003185a

00016394 <hci_le_read_max_data_len>:
{
   16394:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16396:	4606      	mov	r6, r0
   16398:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1639a:	aa01      	add	r2, sp, #4
   1639c:	2100      	movs	r1, #0
   1639e:	f242 002f 	movw	r0, #8239	; 0x202f
   163a2:	f7ff ff97 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   163a6:	4604      	mov	r4, r0
   163a8:	b130      	cbz	r0, 163b8 <hci_le_read_max_data_len+0x24>
		LOG_ERR("Failed to read DLE max data len");
   163aa:	4809      	ldr	r0, [pc, #36]	; (163d0 <hci_le_read_max_data_len+0x3c>)
   163ac:	2145      	movs	r1, #69	; 0x45
   163ae:	f014 fbdb 	bl	2ab68 <z_log_minimal_printk>
}
   163b2:	4620      	mov	r0, r4
   163b4:	b002      	add	sp, #8
   163b6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   163b8:	9801      	ldr	r0, [sp, #4]
   163ba:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   163bc:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   163c0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   163c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   163c6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   163c8:	f008 fd6c 	bl	1eea4 <net_buf_unref>
	return 0;
   163cc:	e7f1      	b.n	163b2 <hci_le_read_max_data_len+0x1e>
   163ce:	bf00      	nop
   163d0:	0003187b 	.word	0x0003187b

000163d4 <bt_hci_le_rand>:
{
   163d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   163d6:	4b14      	ldr	r3, [pc, #80]	; (16428 <bt_hci_le_rand+0x54>)
   163d8:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   163dc:	2b00      	cmp	r3, #0
{
   163de:	4605      	mov	r5, r0
   163e0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   163e2:	da1d      	bge.n	16420 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   163e4:	b914      	cbnz	r4, 163ec <bt_hci_le_rand+0x18>
	return 0;
   163e6:	4620      	mov	r0, r4
}
   163e8:	b003      	add	sp, #12
   163ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   163ec:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   163ee:	aa01      	add	r2, sp, #4
   163f0:	f04f 0100 	mov.w	r1, #0
   163f4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   163f8:	4626      	mov	r6, r4
   163fa:	bf28      	it	cs
   163fc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   163fe:	f7ff ff69 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   16402:	2800      	cmp	r0, #0
   16404:	d1f0      	bne.n	163e8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16406:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16408:	68f9      	ldr	r1, [r7, #12]
   1640a:	4632      	mov	r2, r6
   1640c:	3101      	adds	r1, #1
   1640e:	4628      	mov	r0, r5
   16410:	f015 fb72 	bl	2baf8 <memcpy>
		net_buf_unref(rsp);
   16414:	4638      	mov	r0, r7
   16416:	f008 fd45 	bl	1eea4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1641a:	4435      	add	r5, r6
		len -= count;
   1641c:	1ba4      	subs	r4, r4, r6
   1641e:	e7e1      	b.n	163e4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16420:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16424:	e7e0      	b.n	163e8 <bt_hci_le_rand+0x14>
   16426:	bf00      	nop
   16428:	20000378 	.word	0x20000378

0001642c <bt_le_create_conn>:
{
   1642c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1642e:	b087      	sub	sp, #28
   16430:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   16432:	f10d 010b 	add.w	r1, sp, #11
   16436:	2000      	movs	r0, #0
   16438:	f001 fa9c 	bl	17974 <bt_id_set_create_conn_own_addr>
	if (err) {
   1643c:	4605      	mov	r5, r0
   1643e:	2800      	cmp	r0, #0
   16440:	d148      	bne.n	164d4 <bt_le_create_conn+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   16442:	2119      	movs	r1, #25
   16444:	f242 000d 	movw	r0, #8205	; 0x200d
   16448:	f7ff fefa 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   1644c:	4607      	mov	r7, r0
   1644e:	2800      	cmp	r0, #0
   16450:	d043      	beq.n	164da <bt_le_create_conn+0xae>
   16452:	2119      	movs	r1, #25
   16454:	300c      	adds	r0, #12
   16456:	f008 fe2b 	bl	1f0b0 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   1645a:	4629      	mov	r1, r5
   1645c:	4604      	mov	r4, r0
   1645e:	2219      	movs	r2, #25
   16460:	f015 fb55 	bl	2bb0e <memset>
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   16464:	f106 059e 	add.w	r5, r6, #158	; 0x9e
	cp->own_addr_type = own_addr_type;
   16468:	f89d 300b 	ldrb.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   1646c:	491c      	ldr	r1, [pc, #112]	; (164e0 <bt_le_create_conn+0xb4>)
   1646e:	7323      	strb	r3, [r4, #12]
   16470:	2207      	movs	r2, #7
   16472:	4628      	mov	r0, r5
   16474:	f015 fb19 	bl	2baaa <memcmp>
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   16478:	b908      	cbnz	r0, 1647e <bt_le_create_conn+0x52>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   1647a:	f106 0590 	add.w	r5, r6, #144	; 0x90
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   1647e:	4629      	mov	r1, r5
   16480:	1d60      	adds	r0, r4, #5
   16482:	f015 fc4f 	bl	2bd24 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   16486:	2500      	movs	r5, #0
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   16488:	4a16      	ldr	r2, [pc, #88]	; (164e4 <bt_le_create_conn+0xb8>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   1648a:	7125      	strb	r5, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   1648c:	8993      	ldrh	r3, [r2, #12]
   1648e:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   16490:	89d3      	ldrh	r3, [r2, #14]
   16492:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   16494:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   16498:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   1649c:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   164a0:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   164a4:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   164a8:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   164ac:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   164b0:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   164b4:	2301      	movs	r3, #1
   164b6:	9300      	str	r3, [sp, #0]
   164b8:	230c      	movs	r3, #12
   164ba:	eb0d 0103 	add.w	r1, sp, r3
   164be:	32cc      	adds	r2, #204	; 0xcc
   164c0:	4638      	mov	r0, r7
   164c2:	f7ff feab 	bl	1621c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   164c6:	462a      	mov	r2, r5
   164c8:	4639      	mov	r1, r7
   164ca:	f242 000d 	movw	r0, #8205	; 0x200d
   164ce:	f7ff ff01 	bl	162d4 <bt_hci_cmd_send_sync>
   164d2:	4605      	mov	r5, r0
}
   164d4:	4628      	mov	r0, r5
   164d6:	b007      	add	sp, #28
   164d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   164da:	f06f 0568 	mvn.w	r5, #104	; 0x68
   164de:	e7f9      	b.n	164d4 <bt_le_create_conn+0xa8>
   164e0:	000313da 	.word	0x000313da
   164e4:	20000378 	.word	0x20000378

000164e8 <bt_le_create_conn_cancel>:
{
   164e8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164ea:	2100      	movs	r1, #0
{
   164ec:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164ee:	f242 000e 	movw	r0, #8206	; 0x200e
   164f2:	f7ff fea5 	bl	16240 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   164f6:	2500      	movs	r5, #0
   164f8:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164fa:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   164fc:	eb0d 0103 	add.w	r1, sp, r3
   16500:	4a05      	ldr	r2, [pc, #20]	; (16518 <bt_le_create_conn_cancel+0x30>)
   16502:	9500      	str	r5, [sp, #0]
   16504:	f7ff fe8a 	bl	1621c <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   16508:	462a      	mov	r2, r5
   1650a:	4621      	mov	r1, r4
   1650c:	f242 000e 	movw	r0, #8206	; 0x200e
   16510:	f7ff fee0 	bl	162d4 <bt_hci_cmd_send_sync>
}
   16514:	b007      	add	sp, #28
   16516:	bd30      	pop	{r4, r5, pc}
   16518:	20000444 	.word	0x20000444

0001651c <bt_hci_le_enh_conn_complete>:
{
   1651c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16520:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16524:	4a96      	ldr	r2, [pc, #600]	; (16780 <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   16526:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   1652a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1652c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   16530:	b29b      	uxth	r3, r3
   16532:	4299      	cmp	r1, r3
{
   16534:	4605      	mov	r5, r0
   16536:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   1653a:	bf08      	it	eq
   1653c:	8016      	strheq	r6, [r2, #0]
{
   1653e:	b089      	sub	sp, #36	; 0x24
			return true;
   16540:	bf08      	it	eq
   16542:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   16544:	f000 ff40 	bl	173c8 <bt_id_pending_keys_update>
	if (evt->status) {
   16548:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1654a:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   1654e:	b36c      	cbz	r4, 165ac <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16550:	2c02      	cmp	r4, #2
   16552:	d123      	bne.n	1659c <bt_hci_le_enh_conn_complete+0x80>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   16554:	2100      	movs	r1, #0
   16556:	2206      	movs	r2, #6
   16558:	4608      	mov	r0, r1
   1655a:	f002 fb9b 	bl	18c94 <bt_conn_lookup_state_le>
	if (!conn) {
   1655e:	4605      	mov	r5, r0
   16560:	b948      	cbnz	r0, 16576 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_ERR("No pending central connection");
   16562:	4888      	ldr	r0, [pc, #544]	; (16784 <bt_hci_le_enh_conn_complete+0x268>)
   16564:	2145      	movs	r1, #69	; 0x45
   16566:	f014 faff 	bl	2ab68 <z_log_minimal_printk>
			bt_le_scan_update(false);
   1656a:	2000      	movs	r0, #0
   1656c:	f001 fade 	bl	17b2c <bt_le_scan_update>
}
   16570:	b009      	add	sp, #36	; 0x24
   16572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   16576:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16578:	2100      	movs	r1, #0
   1657a:	f002 f8d3 	bl	18724 <bt_conn_set_state>
   1657e:	f3bf 8f5b 	dmb	ish
   16582:	686b      	ldr	r3, [r5, #4]
   16584:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   16588:	07de      	lsls	r6, r3, #31
   1658a:	d503      	bpl.n	16594 <bt_hci_le_enh_conn_complete+0x78>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   1658c:	4621      	mov	r1, r4
   1658e:	4628      	mov	r0, r5
   16590:	f002 f8c8 	bl	18724 <bt_conn_set_state>
	bt_conn_unref(conn);
   16594:	4628      	mov	r0, r5
   16596:	f002 f89d 	bl	186d4 <bt_conn_unref>
   1659a:	e7e6      	b.n	1656a <bt_hci_le_enh_conn_complete+0x4e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1659c:	487a      	ldr	r0, [pc, #488]	; (16788 <bt_hci_le_enh_conn_complete+0x26c>)
   1659e:	4622      	mov	r2, r4
   165a0:	2157      	movs	r1, #87	; 0x57
}
   165a2:	b009      	add	sp, #36	; 0x24
   165a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   165a8:	f014 bade 	b.w	2ab68 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   165ac:	792b      	ldrb	r3, [r5, #4]
   165ae:	3b02      	subs	r3, #2
   165b0:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   165b2:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   165b6:	d821      	bhi.n	165fc <bt_hci_le_enh_conn_complete+0xe0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   165b8:	4649      	mov	r1, r9
   165ba:	a806      	add	r0, sp, #24
   165bc:	f015 fbb2 	bl	2bd24 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   165c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   165c4:	2206      	movs	r2, #6
   165c6:	3b02      	subs	r3, #2
   165c8:	f105 0111 	add.w	r1, r5, #17
   165cc:	f10d 0011 	add.w	r0, sp, #17
   165d0:	f88d 3018 	strb.w	r3, [sp, #24]
   165d4:	f015 fa90 	bl	2baf8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   165d8:	2301      	movs	r3, #1
   165da:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   165de:	78e8      	ldrb	r0, [r5, #3]
   165e0:	b1f8      	cbz	r0, 16622 <bt_hci_le_enh_conn_complete+0x106>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   165e2:	4648      	mov	r0, r9
   165e4:	f7ff f8c0 	bl	15768 <bt_addr_le_str>
   165e8:	2145      	movs	r1, #69	; 0x45
   165ea:	4602      	mov	r2, r0
   165ec:	4867      	ldr	r0, [pc, #412]	; (1678c <bt_hci_le_enh_conn_complete+0x270>)
   165ee:	f014 fabb 	bl	2ab68 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   165f2:	211f      	movs	r1, #31
   165f4:	4640      	mov	r0, r8
   165f6:	f015 fbc3 	bl	2bd80 <bt_hci_disconnect>
		return;
   165fa:	e7b9      	b.n	16570 <bt_hci_le_enh_conn_complete+0x54>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   165fc:	78eb      	ldrb	r3, [r5, #3]
   165fe:	2b01      	cmp	r3, #1
   16600:	bf04      	itt	eq
   16602:	4b63      	ldreq	r3, [pc, #396]	; (16790 <bt_hci_le_enh_conn_complete+0x274>)
   16604:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   16608:	4649      	mov	r1, r9
   1660a:	4620      	mov	r0, r4
   1660c:	f015 fc76 	bl	2befc <bt_lookup_id_addr>
   16610:	4601      	mov	r1, r0
   16612:	a806      	add	r0, sp, #24
   16614:	f015 fb86 	bl	2bd24 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   16618:	4649      	mov	r1, r9
   1661a:	a804      	add	r0, sp, #16
   1661c:	f015 fb82 	bl	2bd24 <bt_addr_le_copy>
   16620:	e7dd      	b.n	165de <bt_hci_le_enh_conn_complete+0xc2>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   16622:	2206      	movs	r2, #6
   16624:	a906      	add	r1, sp, #24
   16626:	f002 fb35 	bl	18c94 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1662a:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1662c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1662e:	b923      	cbnz	r3, 1663a <bt_hci_le_enh_conn_complete+0x11e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16630:	4858      	ldr	r0, [pc, #352]	; (16794 <bt_hci_le_enh_conn_complete+0x278>)
   16632:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   16636:	f015 fb87 	bl	2bd48 <atomic_and.isra.0>
	if (!conn) {
   1663a:	2c00      	cmp	r4, #0
   1663c:	d0d1      	beq.n	165e2 <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   1663e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16640:	a906      	add	r1, sp, #24
	conn->handle = handle;
   16642:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16646:	f015 fb6d 	bl	2bd24 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1664a:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1664e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16652:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16656:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1665a:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1665e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16662:	78eb      	ldrb	r3, [r5, #3]
   16664:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16666:	2200      	movs	r2, #0
   16668:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1666a:	b9b3      	cbnz	r3, 1669a <bt_hci_le_enh_conn_complete+0x17e>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   1666c:	a904      	add	r1, sp, #16
   1666e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   16672:	f015 fb57 	bl	2bd24 <bt_addr_le_copy>
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   16676:	350b      	adds	r5, #11
			conn->le.init_addr.type = BT_ADDR_LE_RANDOM;
   16678:	2301      	movs	r3, #1
   1667a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	return memcmp(a, b, sizeof(*a));
   1667e:	2206      	movs	r2, #6
   16680:	4945      	ldr	r1, [pc, #276]	; (16798 <bt_hci_le_enh_conn_complete+0x27c>)
   16682:	4628      	mov	r0, r5
   16684:	f015 fa11 	bl	2baaa <memcmp>
   16688:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   1668a:	2206      	movs	r2, #6
				bt_addr_copy(&conn->le.init_addr.a,
   1668c:	f104 0098 	add.w	r0, r4, #152	; 0x98
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   16690:	2b00      	cmp	r3, #0
   16692:	d06f      	beq.n	16774 <bt_hci_le_enh_conn_complete+0x258>
   16694:	4629      	mov	r1, r5
   16696:	f015 fa2f 	bl	2baf8 <memcpy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1669a:	2107      	movs	r1, #7
   1669c:	4620      	mov	r0, r4
   1669e:	f002 f841 	bl	18724 <bt_conn_set_state>
	if (is_disconnected) {
   166a2:	b11e      	cbz	r6, 166ac <bt_hci_le_enh_conn_complete+0x190>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   166a4:	2101      	movs	r1, #1
   166a6:	4620      	mov	r0, r4
   166a8:	f002 f83c 	bl	18724 <bt_conn_set_state>
	bt_conn_connected(conn);
   166ac:	4620      	mov	r0, r4
   166ae:	f015 fcb2 	bl	2c016 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   166b2:	7b63      	ldrb	r3, [r4, #13]
   166b4:	2b07      	cmp	r3, #7
   166b6:	d155      	bne.n	16764 <bt_hci_le_enh_conn_complete+0x248>
   166b8:	f3bf 8f5b 	dmb	ish
   166bc:	6863      	ldr	r3, [r4, #4]
   166be:	4e34      	ldr	r6, [pc, #208]	; (16790 <bt_hci_le_enh_conn_complete+0x274>)
   166c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   166c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   166c8:	d11f      	bne.n	1670a <bt_hci_le_enh_conn_complete+0x1ee>
   166ca:	78e3      	ldrb	r3, [r4, #3]
   166cc:	b11b      	cbz	r3, 166d6 <bt_hci_le_enh_conn_complete+0x1ba>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   166ce:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   166d2:	0718      	lsls	r0, r3, #28
   166d4:	d519      	bpl.n	1670a <bt_hci_le_enh_conn_complete+0x1ee>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   166d6:	2102      	movs	r1, #2
   166d8:	f242 0016 	movw	r0, #8214	; 0x2016
   166dc:	f7ff fdb0 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   166e0:	4605      	mov	r5, r0
   166e2:	2800      	cmp	r0, #0
   166e4:	d048      	beq.n	16778 <bt_hci_le_enh_conn_complete+0x25c>
   166e6:	2102      	movs	r1, #2
   166e8:	300c      	adds	r0, #12
   166ea:	f008 fce1 	bl	1f0b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   166ee:	8823      	ldrh	r3, [r4, #0]
   166f0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   166f2:	2200      	movs	r2, #0
   166f4:	4629      	mov	r1, r5
   166f6:	f242 0016 	movw	r0, #8214	; 0x2016
   166fa:	f7ff fdeb 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   166fe:	4602      	mov	r2, r0
   16700:	b118      	cbz	r0, 1670a <bt_hci_le_enh_conn_complete+0x1ee>
			LOG_ERR("Failed read remote features (%d)", err);
   16702:	4826      	ldr	r0, [pc, #152]	; (1679c <bt_hci_le_enh_conn_complete+0x280>)
   16704:	2145      	movs	r1, #69	; 0x45
   16706:	f014 fa2f 	bl	2ab68 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1670a:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   1670e:	07d9      	lsls	r1, r3, #31
   16710:	d50c      	bpl.n	1672c <bt_hci_le_enh_conn_complete+0x210>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16712:	2100      	movs	r1, #0
   16714:	2302      	movs	r3, #2
   16716:	461a      	mov	r2, r3
   16718:	9100      	str	r1, [sp, #0]
   1671a:	4620      	mov	r0, r4
   1671c:	f015 fb69 	bl	2bdf2 <bt_le_set_phy>
		if (err) {
   16720:	4602      	mov	r2, r0
   16722:	b118      	cbz	r0, 1672c <bt_hci_le_enh_conn_complete+0x210>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16724:	481e      	ldr	r0, [pc, #120]	; (167a0 <bt_hci_le_enh_conn_complete+0x284>)
   16726:	2145      	movs	r1, #69	; 0x45
   16728:	f014 fa1e 	bl	2ab68 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1672c:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   16730:	069a      	lsls	r2, r3, #26
   16732:	d517      	bpl.n	16764 <bt_hci_le_enh_conn_complete+0x248>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16734:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   16738:	689b      	ldr	r3, [r3, #8]
   1673a:	079b      	lsls	r3, r3, #30
   1673c:	d512      	bpl.n	16764 <bt_hci_le_enh_conn_complete+0x248>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1673e:	f10d 010e 	add.w	r1, sp, #14
   16742:	a803      	add	r0, sp, #12
   16744:	f7ff fe26 	bl	16394 <hci_le_read_max_data_len>
			if (!err) {
   16748:	b960      	cbnz	r0, 16764 <bt_hci_le_enh_conn_complete+0x248>
				err = bt_le_set_data_len(conn,
   1674a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1674e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   16752:	4620      	mov	r0, r4
   16754:	f015 fb2f 	bl	2bdb6 <bt_le_set_data_len>
				if (err) {
   16758:	4602      	mov	r2, r0
   1675a:	b118      	cbz	r0, 16764 <bt_hci_le_enh_conn_complete+0x248>
					LOG_ERR("Failed to set data len (%d)", err);
   1675c:	4811      	ldr	r0, [pc, #68]	; (167a4 <bt_hci_le_enh_conn_complete+0x288>)
   1675e:	2145      	movs	r1, #69	; 0x45
   16760:	f014 fa02 	bl	2ab68 <z_log_minimal_printk>
	bt_conn_unref(conn);
   16764:	4620      	mov	r0, r4
   16766:	f001 ffb5 	bl	186d4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1676a:	78e3      	ldrb	r3, [r4, #3]
   1676c:	2b00      	cmp	r3, #0
   1676e:	f47f aeff 	bne.w	16570 <bt_hci_le_enh_conn_complete+0x54>
   16772:	e6fa      	b.n	1656a <bt_hci_le_enh_conn_complete+0x4e>
   16774:	490c      	ldr	r1, [pc, #48]	; (167a8 <bt_hci_le_enh_conn_complete+0x28c>)
   16776:	e78e      	b.n	16696 <bt_hci_le_enh_conn_complete+0x17a>
		return -ENOBUFS;
   16778:	f06f 0268 	mvn.w	r2, #104	; 0x68
   1677c:	e7c1      	b.n	16702 <bt_hci_le_enh_conn_complete+0x1e6>
   1677e:	bf00      	nop
   16780:	20004320 	.word	0x20004320
   16784:	000318a0 	.word	0x000318a0
   16788:	000318c3 	.word	0x000318c3
   1678c:	000318e1 	.word	0x000318e1
   16790:	20000378 	.word	0x20000378
   16794:	20000444 	.word	0x20000444
   16798:	000313e7 	.word	0x000313e7
   1679c:	00031902 	.word	0x00031902
   167a0:	00031928 	.word	0x00031928
   167a4:	00031944 	.word	0x00031944
   167a8:	200003d9 	.word	0x200003d9

000167ac <le_legacy_conn_complete>:
{
   167ac:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   167ae:	68c1      	ldr	r1, [r0, #12]
{
   167b0:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   167b2:	780b      	ldrb	r3, [r1, #0]
   167b4:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   167b8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   167bc:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   167c0:	78cb      	ldrb	r3, [r1, #3]
   167c2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   167c6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   167ca:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   167ce:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   167d2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   167d6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   167da:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   167de:	7c4b      	ldrb	r3, [r1, #17]
   167e0:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   167e4:	a801      	add	r0, sp, #4
   167e6:	3104      	adds	r1, #4
   167e8:	f015 fa9c 	bl	2bd24 <bt_addr_le_copy>
   167ec:	4908      	ldr	r1, [pc, #32]	; (16810 <le_legacy_conn_complete+0x64>)
   167ee:	2206      	movs	r2, #6
   167f0:	f10d 000b 	add.w	r0, sp, #11
   167f4:	f015 f980 	bl	2baf8 <memcpy>
   167f8:	4906      	ldr	r1, [pc, #24]	; (16814 <le_legacy_conn_complete+0x68>)
   167fa:	2206      	movs	r2, #6
   167fc:	f10d 0011 	add.w	r0, sp, #17
   16800:	f015 f97a 	bl	2baf8 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16804:	4668      	mov	r0, sp
   16806:	f7ff fe89 	bl	1651c <bt_hci_le_enh_conn_complete>
}
   1680a:	b009      	add	sp, #36	; 0x24
   1680c:	f85d fb04 	ldr.w	pc, [sp], #4
   16810:	200003d9 	.word	0x200003d9
   16814:	000313e7 	.word	0x000313e7

00016818 <bt_security_err_get>:
	switch (hci_err) {
   16818:	2829      	cmp	r0, #41	; 0x29
   1681a:	bf9a      	itte	ls
   1681c:	4b01      	ldrls	r3, [pc, #4]	; (16824 <bt_security_err_get+0xc>)
   1681e:	5c18      	ldrbls	r0, [r3, r0]
{
   16820:	2009      	movhi	r0, #9
}
   16822:	4770      	bx	lr
   16824:	00031cd5 	.word	0x00031cd5

00016828 <hci_encrypt_key_refresh_complete>:
{
   16828:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1682a:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1682c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16830:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16832:	4630      	mov	r0, r6
   16834:	f001 ff6e 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   16838:	4604      	mov	r4, r0
   1683a:	b930      	cbnz	r0, 1684a <hci_encrypt_key_refresh_complete+0x22>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1683c:	4632      	mov	r2, r6
   1683e:	4817      	ldr	r0, [pc, #92]	; (1689c <hci_encrypt_key_refresh_complete+0x74>)
}
   16840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16844:	2145      	movs	r1, #69	; 0x45
   16846:	f014 b98f 	b.w	2ab68 <z_log_minimal_printk>
	if (status) {
   1684a:	b165      	cbz	r5, 16866 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1684c:	4628      	mov	r0, r5
   1684e:	f7ff ffe3 	bl	16818 <bt_security_err_get>
   16852:	4629      	mov	r1, r5
   16854:	4602      	mov	r2, r0
   16856:	4620      	mov	r0, r4
   16858:	f002 f98c 	bl	18b74 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1685c:	4620      	mov	r0, r4
}
   1685e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16862:	f001 bf37 	b.w	186d4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16866:	7883      	ldrb	r3, [r0, #2]
   16868:	2b01      	cmp	r3, #1
   1686a:	d1ef      	bne.n	1684c <hci_encrypt_key_refresh_complete+0x24>
		bt_smp_update_keys(conn);
   1686c:	f007 fd9a 	bl	1e3a4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16870:	4620      	mov	r0, r4
   16872:	f015 fa3e 	bl	2bcf2 <update_sec_level>
   16876:	2800      	cmp	r0, #0
   16878:	d1e8      	bne.n	1684c <hci_encrypt_key_refresh_complete+0x24>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1687a:	2005      	movs	r0, #5
   1687c:	f7ff ffcc 	bl	16818 <bt_security_err_get>
   16880:	2105      	movs	r1, #5
   16882:	4602      	mov	r2, r0
   16884:	4620      	mov	r0, r4
   16886:	f002 f975 	bl	18b74 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   1688a:	4805      	ldr	r0, [pc, #20]	; (168a0 <hci_encrypt_key_refresh_complete+0x78>)
   1688c:	2145      	movs	r1, #69	; 0x45
   1688e:	f014 f96b 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   16892:	2105      	movs	r1, #5
   16894:	4620      	mov	r0, r4
   16896:	f015 fc56 	bl	2c146 <bt_conn_disconnect>
   1689a:	e7df      	b.n	1685c <hci_encrypt_key_refresh_complete+0x34>
   1689c:	0003182f 	.word	0x0003182f
   168a0:	00031965 	.word	0x00031965

000168a4 <hci_encrypt_change>:
{
   168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   168a6:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   168a8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   168ac:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   168ae:	4638      	mov	r0, r7
   168b0:	f001 ff30 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   168b4:	4604      	mov	r4, r0
   168b6:	b930      	cbnz	r0, 168c6 <hci_encrypt_change+0x22>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   168b8:	463a      	mov	r2, r7
   168ba:	481c      	ldr	r0, [pc, #112]	; (1692c <hci_encrypt_change+0x88>)
}
   168bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   168c0:	2145      	movs	r1, #69	; 0x45
   168c2:	f014 b951 	b.w	2ab68 <z_log_minimal_printk>
	if (status) {
   168c6:	b165      	cbz	r5, 168e2 <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   168c8:	4628      	mov	r0, r5
   168ca:	f7ff ffa5 	bl	16818 <bt_security_err_get>
   168ce:	4629      	mov	r1, r5
   168d0:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   168d2:	4620      	mov	r0, r4
   168d4:	f002 f94e 	bl	18b74 <bt_conn_security_changed>
	bt_conn_unref(conn);
   168d8:	4620      	mov	r0, r4
}
   168da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   168de:	f001 bef9 	b.w	186d4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   168e2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   168e4:	78f3      	ldrb	r3, [r6, #3]
   168e6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   168e8:	2a01      	cmp	r2, #1
   168ea:	d005      	beq.n	168f8 <hci_encrypt_change+0x54>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   168ec:	2000      	movs	r0, #0
   168ee:	f7ff ff93 	bl	16818 <bt_security_err_get>
   168f2:	2100      	movs	r1, #0
   168f4:	4602      	mov	r2, r0
   168f6:	e7ec      	b.n	168d2 <hci_encrypt_change+0x2e>
		if (conn->encrypt) {
   168f8:	b10b      	cbz	r3, 168fe <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   168fa:	f007 fd53 	bl	1e3a4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   168fe:	4620      	mov	r0, r4
   16900:	f015 f9f7 	bl	2bcf2 <update_sec_level>
   16904:	2800      	cmp	r0, #0
   16906:	d1f1      	bne.n	168ec <hci_encrypt_change+0x48>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16908:	2005      	movs	r0, #5
   1690a:	f7ff ff85 	bl	16818 <bt_security_err_get>
   1690e:	2105      	movs	r1, #5
   16910:	4602      	mov	r2, r0
   16912:	4620      	mov	r0, r4
   16914:	f002 f92e 	bl	18b74 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   16918:	4805      	ldr	r0, [pc, #20]	; (16930 <hci_encrypt_change+0x8c>)
   1691a:	2145      	movs	r1, #69	; 0x45
   1691c:	f014 f924 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   16920:	2105      	movs	r1, #5
   16922:	4620      	mov	r0, r4
   16924:	f015 fc0f 	bl	2c146 <bt_conn_disconnect>
   16928:	e7d6      	b.n	168d8 <hci_encrypt_change+0x34>
   1692a:	bf00      	nop
   1692c:	0003182f 	.word	0x0003182f
   16930:	00031965 	.word	0x00031965

00016934 <bt_send>:
	return bt_dev.drv->send(buf);
   16934:	4b02      	ldr	r3, [pc, #8]	; (16940 <bt_send+0xc>)
   16936:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1693a:	695b      	ldr	r3, [r3, #20]
   1693c:	4718      	bx	r3
   1693e:	bf00      	nop
   16940:	20000378 	.word	0x20000378

00016944 <bt_hci_cmd_send>:
{
   16944:	b538      	push	{r3, r4, r5, lr}
   16946:	4605      	mov	r5, r0
	if (!buf) {
   16948:	460c      	mov	r4, r1
   1694a:	b919      	cbnz	r1, 16954 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1694c:	f7ff fc78 	bl	16240 <bt_hci_cmd_create>
		if (!buf) {
   16950:	4604      	mov	r4, r0
   16952:	b1c0      	cbz	r0, 16986 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16954:	f640 4335 	movw	r3, #3125	; 0xc35
   16958:	429d      	cmp	r5, r3
   1695a:	d10e      	bne.n	1697a <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   1695c:	4620      	mov	r0, r4
   1695e:	f7ff ffe9 	bl	16934 <bt_send>
		if (err) {
   16962:	4605      	mov	r5, r0
   16964:	b168      	cbz	r0, 16982 <bt_hci_cmd_send+0x3e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16966:	4602      	mov	r2, r0
   16968:	2145      	movs	r1, #69	; 0x45
   1696a:	4808      	ldr	r0, [pc, #32]	; (1698c <bt_hci_cmd_send+0x48>)
   1696c:	f014 f8fc 	bl	2ab68 <z_log_minimal_printk>
			net_buf_unref(buf);
   16970:	4620      	mov	r0, r4
   16972:	f008 fa97 	bl	1eea4 <net_buf_unref>
}
   16976:	4628      	mov	r0, r5
   16978:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1697a:	4805      	ldr	r0, [pc, #20]	; (16990 <bt_hci_cmd_send+0x4c>)
   1697c:	4621      	mov	r1, r4
   1697e:	f008 fa71 	bl	1ee64 <net_buf_put>
	return 0;
   16982:	2500      	movs	r5, #0
   16984:	e7f7      	b.n	16976 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   16986:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1698a:	e7f4      	b.n	16976 <bt_hci_cmd_send+0x32>
   1698c:	00031990 	.word	0x00031990
   16990:	200004bc 	.word	0x200004bc

00016994 <le_ltk_request>:
{
   16994:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16996:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16998:	8826      	ldrh	r6, [r4, #0]
   1699a:	b2b7      	uxth	r7, r6
{
   1699c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1699e:	4638      	mov	r0, r7
   169a0:	f001 feb8 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   169a4:	4605      	mov	r5, r0
   169a6:	b938      	cbnz	r0, 169b8 <le_ltk_request+0x24>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   169a8:	4821      	ldr	r0, [pc, #132]	; (16a30 <le_ltk_request+0x9c>)
   169aa:	463a      	mov	r2, r7
   169ac:	2145      	movs	r1, #69	; 0x45
}
   169ae:	b007      	add	sp, #28
   169b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   169b4:	f014 b8d8 	b.w	2ab68 <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   169b8:	af02      	add	r7, sp, #8
   169ba:	f8d4 2002 	ldr.w	r2, [r4, #2]
   169be:	f8d4 3006 	ldr.w	r3, [r4, #6]
   169c2:	9701      	str	r7, [sp, #4]
   169c4:	8961      	ldrh	r1, [r4, #10]
   169c6:	9100      	str	r1, [sp, #0]
   169c8:	f017 f84c 	bl	2da64 <bt_smp_request_ltk>
   169cc:	b1f8      	cbz	r0, 16a0e <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   169ce:	2112      	movs	r1, #18
   169d0:	f242 001a 	movw	r0, #8218	; 0x201a
   169d4:	f7ff fc34 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   169d8:	4604      	mov	r4, r0
   169da:	b940      	cbnz	r0, 169ee <le_ltk_request+0x5a>
		LOG_ERR("Out of command buffers");
   169dc:	4815      	ldr	r0, [pc, #84]	; (16a34 <le_ltk_request+0xa0>)
   169de:	2145      	movs	r1, #69	; 0x45
   169e0:	f014 f8c2 	bl	2ab68 <z_log_minimal_printk>
	bt_conn_unref(conn);
   169e4:	4628      	mov	r0, r5
   169e6:	f001 fe75 	bl	186d4 <bt_conn_unref>
}
   169ea:	b007      	add	sp, #28
   169ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169ee:	2112      	movs	r1, #18
   169f0:	300c      	adds	r0, #12
   169f2:	f008 fb5d 	bl	1f0b0 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   169f6:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   169f8:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   169fc:	2210      	movs	r2, #16
   169fe:	f015 f87b 	bl	2baf8 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16a02:	4621      	mov	r1, r4
   16a04:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16a08:	f7ff ff9c 	bl	16944 <bt_hci_cmd_send>
   16a0c:	e7ea      	b.n	169e4 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16a0e:	2102      	movs	r1, #2
   16a10:	f242 001b 	movw	r0, #8219	; 0x201b
   16a14:	f7ff fc14 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   16a18:	4604      	mov	r4, r0
   16a1a:	2800      	cmp	r0, #0
   16a1c:	d0de      	beq.n	169dc <le_ltk_request+0x48>
   16a1e:	2102      	movs	r1, #2
   16a20:	300c      	adds	r0, #12
   16a22:	f008 fb45 	bl	1f0b0 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16a26:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   16a28:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16a2a:	f242 001b 	movw	r0, #8219	; 0x201b
   16a2e:	e7eb      	b.n	16a08 <le_ltk_request+0x74>
   16a30:	00031623 	.word	0x00031623
   16a34:	000319b7 	.word	0x000319b7

00016a38 <le_conn_param_neg_reply>:
{
   16a38:	b570      	push	{r4, r5, r6, lr}
   16a3a:	4606      	mov	r6, r0
   16a3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   16a3e:	f242 0021 	movw	r0, #8225	; 0x2021
   16a42:	2103      	movs	r1, #3
   16a44:	f7ff fbfc 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   16a48:	4604      	mov	r4, r0
   16a4a:	b928      	cbnz	r0, 16a58 <le_conn_param_neg_reply+0x20>
}
   16a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   16a50:	4808      	ldr	r0, [pc, #32]	; (16a74 <le_conn_param_neg_reply+0x3c>)
   16a52:	2145      	movs	r1, #69	; 0x45
   16a54:	f014 b888 	b.w	2ab68 <z_log_minimal_printk>
   16a58:	2103      	movs	r1, #3
   16a5a:	300c      	adds	r0, #12
   16a5c:	f008 fb28 	bl	1f0b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   16a60:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   16a62:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16a64:	4621      	mov	r1, r4
   16a66:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16a6e:	f7ff bf69 	b.w	16944 <bt_hci_cmd_send>
   16a72:	bf00      	nop
   16a74:	000319d3 	.word	0x000319d3

00016a78 <le_conn_param_req>:
{
   16a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16a7a:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a7c:	78d9      	ldrb	r1, [r3, #3]
   16a7e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16a80:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a86:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16a8a:	7959      	ldrb	r1, [r3, #5]
   16a8c:	791a      	ldrb	r2, [r3, #4]
   16a8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a92:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16a96:	799a      	ldrb	r2, [r3, #6]
   16a98:	79d9      	ldrb	r1, [r3, #7]
   16a9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a9e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16aa2:	7a1a      	ldrb	r2, [r3, #8]
   16aa4:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16aa6:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16aa8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16aac:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16aae:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16ab2:	f001 fe2f 	bl	18714 <bt_conn_lookup_handle>
	if (!conn) {
   16ab6:	4606      	mov	r6, r0
   16ab8:	b950      	cbnz	r0, 16ad0 <le_conn_param_req+0x58>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16aba:	481d      	ldr	r0, [pc, #116]	; (16b30 <le_conn_param_req+0xb8>)
   16abc:	2145      	movs	r1, #69	; 0x45
   16abe:	4622      	mov	r2, r4
   16ac0:	f014 f852 	bl	2ab68 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16ac4:	2102      	movs	r1, #2
   16ac6:	4620      	mov	r0, r4
   16ac8:	f7ff ffb6 	bl	16a38 <le_conn_param_neg_reply>
}
   16acc:	b003      	add	sp, #12
   16ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16ad0:	4669      	mov	r1, sp
   16ad2:	f001 ffc7 	bl	18a64 <le_param_req>
   16ad6:	b938      	cbnz	r0, 16ae8 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16ad8:	211e      	movs	r1, #30
   16ada:	4620      	mov	r0, r4
   16adc:	f7ff ffac 	bl	16a38 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16ae0:	4630      	mov	r0, r6
   16ae2:	f001 fdf7 	bl	186d4 <bt_conn_unref>
   16ae6:	e7f1      	b.n	16acc <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16ae8:	210e      	movs	r1, #14
   16aea:	f242 0020 	movw	r0, #8224	; 0x2020
   16aee:	f7ff fba7 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   16af2:	4605      	mov	r5, r0
   16af4:	2800      	cmp	r0, #0
   16af6:	d0f3      	beq.n	16ae0 <le_conn_param_req+0x68>
   16af8:	210e      	movs	r1, #14
   16afa:	300c      	adds	r0, #12
   16afc:	f008 fad8 	bl	1f0b0 <net_buf_simple_add>
   16b00:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16b02:	220e      	movs	r2, #14
   16b04:	2100      	movs	r1, #0
   16b06:	f015 f802 	bl	2bb0e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   16b0a:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16b0c:	f8bd 3000 	ldrh.w	r3, [sp]
   16b10:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16b12:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16b16:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16b18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16b1c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16b1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16b22:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16b24:	4629      	mov	r1, r5
   16b26:	f242 0020 	movw	r0, #8224	; 0x2020
   16b2a:	f7ff ff0b 	bl	16944 <bt_hci_cmd_send>
   16b2e:	e7d7      	b.n	16ae0 <le_conn_param_req+0x68>
   16b30:	00031623 	.word	0x00031623

00016b34 <hci_tx_thread>:
{
   16b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16b38:	4f45      	ldr	r7, [pc, #276]	; (16c50 <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
   16b3a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16c54 <hci_tx_thread+0x120>
			ev_count += bt_conn_prepare_events(&events[1]);
   16b3e:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   16b42:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b44:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   16b46:	f36f 3394 	bfc	r3, #14, #7
   16b4a:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b4c:	f001 fd5e 	bl	1860c <bt_conn_prepare_events>
   16b50:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16b52:	483f      	ldr	r0, [pc, #252]	; (16c50 <hci_tx_thread+0x11c>)
   16b54:	f04f 32ff 	mov.w	r2, #4294967295
   16b58:	f04f 33ff 	mov.w	r3, #4294967295
   16b5c:	4629      	mov	r1, r5
   16b5e:	f010 fb89 	bl	27274 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16b62:	b158      	cbz	r0, 16b7c <hci_tx_thread+0x48>
   16b64:	483c      	ldr	r0, [pc, #240]	; (16c58 <hci_tx_thread+0x124>)
   16b66:	f640 12e6 	movw	r2, #2534	; 0x9e6
   16b6a:	4641      	mov	r1, r8
   16b6c:	f013 ffee 	bl	2ab4c <assert_print>
   16b70:	4040      	eors	r0, r0
   16b72:	f380 8811 	msr	BASEPRI, r0
   16b76:	f04f 0003 	mov.w	r0, #3
   16b7a:	df02      	svc	2
{
   16b7c:	4e34      	ldr	r6, [pc, #208]	; (16c50 <hci_tx_thread+0x11c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16b7e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 16c5c <hci_tx_thread+0x128>
	for (; count; ev++, count--) {
   16b82:	b915      	cbnz	r5, 16b8a <hci_tx_thread+0x56>
	z_impl_k_yield();
   16b84:	f00f fbf0 	bl	26368 <z_impl_k_yield>
	while (1) {
   16b88:	e7db      	b.n	16b42 <hci_tx_thread+0xe>
		switch (ev->state) {
   16b8a:	68f2      	ldr	r2, [r6, #12]
   16b8c:	f3c2 3286 	ubfx	r2, r2, #14, #7
   16b90:	2a01      	cmp	r2, #1
   16b92:	d94e      	bls.n	16c32 <hci_tx_thread+0xfe>
   16b94:	2a04      	cmp	r2, #4
   16b96:	d156      	bne.n	16c46 <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16b98:	7b33      	ldrb	r3, [r6, #12]
   16b9a:	2b00      	cmp	r3, #0
   16b9c:	d14c      	bne.n	16c38 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16b9e:	4830      	ldr	r0, [pc, #192]	; (16c60 <hci_tx_thread+0x12c>)
   16ba0:	2200      	movs	r2, #0
   16ba2:	2300      	movs	r3, #0
   16ba4:	f017 f99c 	bl	2dee0 <net_buf_get>
	BT_ASSERT(buf);
   16ba8:	4604      	mov	r4, r0
   16baa:	b958      	cbnz	r0, 16bc4 <hci_tx_thread+0x90>
   16bac:	482a      	ldr	r0, [pc, #168]	; (16c58 <hci_tx_thread+0x124>)
   16bae:	f44f 6218 	mov.w	r2, #2432	; 0x980
   16bb2:	4641      	mov	r1, r8
   16bb4:	f013 ffca 	bl	2ab4c <assert_print>
   16bb8:	4040      	eors	r0, r0
   16bba:	f380 8811 	msr	BASEPRI, r0
   16bbe:	f04f 0003 	mov.w	r0, #3
   16bc2:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   16bc4:	f8df b09c 	ldr.w	fp, [pc, #156]	; 16c64 <hci_tx_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
   16bc8:	4827      	ldr	r0, [pc, #156]	; (16c68 <hci_tx_thread+0x134>)
   16bca:	f04f 33ff 	mov.w	r3, #4294967295
   16bce:	f04f 32ff 	mov.w	r2, #4294967295
   16bd2:	f00e f8d1 	bl	24d78 <z_impl_k_sem_take>
   16bd6:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   16bda:	b153      	cbz	r3, 16bf2 <hci_tx_thread+0xbe>
		LOG_ERR("Uncleared pending sent_cmd");
   16bdc:	4823      	ldr	r0, [pc, #140]	; (16c6c <hci_tx_thread+0x138>)
   16bde:	2145      	movs	r1, #69	; 0x45
   16be0:	f013 ffc2 	bl	2ab68 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   16be4:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   16be8:	f008 f95c 	bl	1eea4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16bec:	2300      	movs	r3, #0
   16bee:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16bf2:	4620      	mov	r0, r4
   16bf4:	f008 f998 	bl	1ef28 <net_buf_ref>
   16bf8:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   16bfc:	4620      	mov	r0, r4
   16bfe:	f7ff fe99 	bl	16934 <bt_send>
	if (err) {
   16c02:	4602      	mov	r2, r0
   16c04:	b1a8      	cbz	r0, 16c32 <hci_tx_thread+0xfe>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16c06:	481a      	ldr	r0, [pc, #104]	; (16c70 <hci_tx_thread+0x13c>)
   16c08:	2145      	movs	r1, #69	; 0x45
   16c0a:	f013 ffad 	bl	2ab68 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   16c0e:	4816      	ldr	r0, [pc, #88]	; (16c68 <hci_tx_thread+0x134>)
   16c10:	f00e f878 	bl	24d04 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16c14:	4620      	mov	r0, r4
   16c16:	f007 ff6b 	bl	1eaf0 <net_buf_id>
   16c1a:	4b16      	ldr	r3, [pc, #88]	; (16c74 <hci_tx_thread+0x140>)
   16c1c:	220c      	movs	r2, #12
   16c1e:	fb02 3000 	mla	r0, r2, r0, r3
   16c22:	211f      	movs	r1, #31
   16c24:	8840      	ldrh	r0, [r0, #2]
   16c26:	4622      	mov	r2, r4
   16c28:	f7ff f9a4 	bl	15f74 <hci_cmd_done>
		net_buf_unref(buf);
   16c2c:	4620      	mov	r0, r4
   16c2e:	f008 f939 	bl	1eea4 <net_buf_unref>
	for (; count; ev++, count--) {
   16c32:	3614      	adds	r6, #20
   16c34:	3d01      	subs	r5, #1
   16c36:	e7a4      	b.n	16b82 <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16c38:	2b01      	cmp	r3, #1
   16c3a:	d1fa      	bne.n	16c32 <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
   16c3c:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   16c3e:	3838      	subs	r0, #56	; 0x38
   16c40:	f002 fa52 	bl	190e8 <bt_conn_process_tx>
   16c44:	e7f5      	b.n	16c32 <hci_tx_thread+0xfe>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16c46:	2157      	movs	r1, #87	; 0x57
   16c48:	4650      	mov	r0, sl
   16c4a:	f013 ff8d 	bl	2ab68 <z_log_minimal_printk>
   16c4e:	e7f0      	b.n	16c32 <hci_tx_thread+0xfe>
   16c50:	20000744 	.word	0x20000744
   16c54:	000316e3 	.word	0x000316e3
   16c58:	0003013d 	.word	0x0003013d
   16c5c:	00031a12 	.word	0x00031a12
   16c60:	200004bc 	.word	0x200004bc
   16c64:	20000378 	.word	0x20000378
   16c68:	20000498 	.word	0x20000498
   16c6c:	000319f2 	.word	0x000319f2
   16c70:	00031990 	.word	0x00031990
   16c74:	200032fc 	.word	0x200032fc

00016c78 <hci_event_prio>:
{
   16c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c7c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16c7e:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   16c82:	4630      	mov	r0, r6
   16c84:	f017 f944 	bl	2df10 <net_buf_simple_headroom>
	state->len = buf->len;
   16c88:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c8c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16c90:	4605      	mov	r5, r0
   16c92:	d80b      	bhi.n	16cac <hci_event_prio+0x34>
   16c94:	491b      	ldr	r1, [pc, #108]	; (16d04 <hci_event_prio+0x8c>)
   16c96:	481c      	ldr	r0, [pc, #112]	; (16d08 <hci_event_prio+0x90>)
   16c98:	f640 527b 	movw	r2, #3451	; 0xd7b
   16c9c:	f013 ff56 	bl	2ab4c <assert_print>
   16ca0:	4040      	eors	r0, r0
   16ca2:	f380 8811 	msr	BASEPRI, r0
   16ca6:	f04f 0003 	mov.w	r0, #3
   16caa:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16cac:	4630      	mov	r0, r6
   16cae:	2102      	movs	r1, #2
   16cb0:	f008 f9e4 	bl	1f07c <net_buf_simple_pull_mem>
   16cb4:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16cb6:	7800      	ldrb	r0, [r0, #0]
   16cb8:	f015 f809 	bl	2bcce <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16cbc:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16cbe:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16cc0:	d40b      	bmi.n	16cda <hci_event_prio+0x62>
   16cc2:	4910      	ldr	r1, [pc, #64]	; (16d04 <hci_event_prio+0x8c>)
   16cc4:	4810      	ldr	r0, [pc, #64]	; (16d08 <hci_event_prio+0x90>)
   16cc6:	f640 527f 	movw	r2, #3455	; 0xd7f
   16cca:	f013 ff3f 	bl	2ab4c <assert_print>
   16cce:	4040      	eors	r0, r0
   16cd0:	f380 8811 	msr	BASEPRI, r0
   16cd4:	f04f 0003 	mov.w	r0, #3
   16cd8:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16cda:	2305      	movs	r3, #5
   16cdc:	4a0b      	ldr	r2, [pc, #44]	; (16d0c <hci_event_prio+0x94>)
   16cde:	7838      	ldrb	r0, [r7, #0]
   16ce0:	4621      	mov	r1, r4
   16ce2:	f7ff f841 	bl	15d68 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16ce6:	07b3      	lsls	r3, r6, #30
   16ce8:	d507      	bpl.n	16cfa <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   16cea:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16cec:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16cf0:	fa13 f585 	uxtah	r5, r3, r5
   16cf4:	60e5      	str	r5, [r4, #12]
}
   16cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16cfa:	4620      	mov	r0, r4
}
   16cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16d00:	f008 b8d0 	b.w	1eea4 <net_buf_unref>
   16d04:	000316e3 	.word	0x000316e3
   16d08:	0003013d 	.word	0x0003013d
   16d0c:	0002f704 	.word	0x0002f704

00016d10 <bt_recv>:
{
   16d10:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16d12:	7e02      	ldrb	r2, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   16d14:	2a01      	cmp	r2, #1
{
   16d16:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   16d18:	d005      	beq.n	16d26 <bt_recv+0x16>
   16d1a:	2a03      	cmp	r2, #3
   16d1c:	d111      	bne.n	16d42 <bt_recv+0x32>
			rx_queue_put(buf);
   16d1e:	f7fe ffc7 	bl	15cb0 <rx_queue_put>
		return 0;
   16d22:	2000      	movs	r0, #0
}
   16d24:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16d26:	68c3      	ldr	r3, [r0, #12]
   16d28:	7818      	ldrb	r0, [r3, #0]
   16d2a:	f014 ffd0 	bl	2bcce <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16d2e:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16d30:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16d32:	d502      	bpl.n	16d3a <bt_recv+0x2a>
			hci_event_prio(buf);
   16d34:	4620      	mov	r0, r4
   16d36:	f7ff ff9f 	bl	16c78 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16d3a:	07ab      	lsls	r3, r5, #30
   16d3c:	d5f1      	bpl.n	16d22 <bt_recv+0x12>
			rx_queue_put(buf);
   16d3e:	4620      	mov	r0, r4
   16d40:	e7ed      	b.n	16d1e <bt_recv+0xe>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16d42:	4805      	ldr	r0, [pc, #20]	; (16d58 <bt_recv+0x48>)
   16d44:	2145      	movs	r1, #69	; 0x45
   16d46:	f013 ff0f 	bl	2ab68 <z_log_minimal_printk>
		net_buf_unref(buf);
   16d4a:	4620      	mov	r0, r4
   16d4c:	f008 f8aa 	bl	1eea4 <net_buf_unref>
		return -EINVAL;
   16d50:	f06f 0015 	mvn.w	r0, #21
   16d54:	e7e6      	b.n	16d24 <bt_recv+0x14>
   16d56:	bf00      	nop
   16d58:	00031a38 	.word	0x00031a38

00016d5c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16d5c:	4a08      	ldr	r2, [pc, #32]	; (16d80 <bt_hci_driver_register+0x24>)
{
   16d5e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16d60:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   16d64:	b930      	cbnz	r0, 16d74 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16d66:	68d9      	ldr	r1, [r3, #12]
   16d68:	b139      	cbz	r1, 16d7a <bt_hci_driver_register+0x1e>
   16d6a:	6959      	ldr	r1, [r3, #20]
   16d6c:	b129      	cbz	r1, 16d7a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16d6e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   16d72:	4770      	bx	lr
		return -EALREADY;
   16d74:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16d78:	4770      	bx	lr
		return -EINVAL;
   16d7a:	f06f 0015 	mvn.w	r0, #21
}
   16d7e:	4770      	bx	lr
   16d80:	20000378 	.word	0x20000378

00016d84 <bt_finalize_init>:
{
   16d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16d86:	2104      	movs	r1, #4
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d88:	4c24      	ldr	r4, [pc, #144]	; (16e1c <bt_finalize_init+0x98>)
   16d8a:	4825      	ldr	r0, [pc, #148]	; (16e20 <bt_finalize_init+0x9c>)
   16d8c:	4d25      	ldr	r5, [pc, #148]	; (16e24 <bt_finalize_init+0xa0>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16d8e:	4f26      	ldr	r7, [pc, #152]	; (16e28 <bt_finalize_init+0xa4>)
   16d90:	f014 ffcb 	bl	2bd2a <atomic_or>
		bt_le_scan_update(false);
   16d94:	2000      	movs	r0, #0
   16d96:	f000 fec9 	bl	17b2c <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d9a:	79e2      	ldrb	r2, [r4, #7]
   16d9c:	4b23      	ldr	r3, [pc, #140]	; (16e2c <bt_finalize_init+0xa8>)
   16d9e:	4620      	mov	r0, r4
   16da0:	2a01      	cmp	r2, #1
   16da2:	bf88      	it	hi
   16da4:	461d      	movhi	r5, r3
   16da6:	f7fe fcdf 	bl	15768 <bt_addr_le_str>
   16daa:	462a      	mov	r2, r5
   16dac:	4603      	mov	r3, r0
   16dae:	2149      	movs	r1, #73	; 0x49
   16db0:	481f      	ldr	r0, [pc, #124]	; (16e30 <bt_finalize_init+0xac>)
   16db2:	f013 fed9 	bl	2ab68 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   16db6:	4626      	mov	r6, r4
   16db8:	2501      	movs	r5, #1
   16dba:	79e3      	ldrb	r3, [r4, #7]
   16dbc:	429d      	cmp	r5, r3
   16dbe:	f106 0607 	add.w	r6, r6, #7
   16dc2:	db20      	blt.n	16e06 <bt_finalize_init+0x82>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16dc4:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   16dc8:	4628      	mov	r0, r5
   16dca:	f7fe fef7 	bl	15bbc <ver_str>
   16dce:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   16dd2:	9301      	str	r3, [sp, #4]
   16dd4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   16dd8:	9300      	str	r3, [sp, #0]
   16dda:	4602      	mov	r2, r0
   16ddc:	462b      	mov	r3, r5
   16dde:	2149      	movs	r1, #73	; 0x49
   16de0:	4814      	ldr	r0, [pc, #80]	; (16e34 <bt_finalize_init+0xb0>)
   16de2:	f013 fec1 	bl	2ab68 <z_log_minimal_printk>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   16de6:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
   16dea:	4628      	mov	r0, r5
   16dec:	f7fe fee6 	bl	15bbc <ver_str>
   16df0:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   16df4:	9300      	str	r3, [sp, #0]
   16df6:	4602      	mov	r2, r0
   16df8:	462b      	mov	r3, r5
   16dfa:	480f      	ldr	r0, [pc, #60]	; (16e38 <bt_finalize_init+0xb4>)
   16dfc:	2149      	movs	r1, #73	; 0x49
   16dfe:	f013 feb3 	bl	2ab68 <z_log_minimal_printk>
}
   16e02:	b003      	add	sp, #12
   16e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16e06:	4630      	mov	r0, r6
   16e08:	f7fe fcae 	bl	15768 <bt_addr_le_str>
   16e0c:	462a      	mov	r2, r5
   16e0e:	4603      	mov	r3, r0
   16e10:	2149      	movs	r1, #73	; 0x49
   16e12:	4638      	mov	r0, r7
   16e14:	f013 fea8 	bl	2ab68 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   16e18:	3501      	adds	r5, #1
   16e1a:	e7ce      	b.n	16dba <bt_finalize_init+0x36>
   16e1c:	20000378 	.word	0x20000378
   16e20:	20000444 	.word	0x20000444
   16e24:	00033f1c 	.word	0x00033f1c
   16e28:	00031a69 	.word	0x00031a69
   16e2c:	00031a51 	.word	0x00031a51
   16e30:	00031a55 	.word	0x00031a55
   16e34:	00031a7f 	.word	0x00031a7f
   16e38:	00031ac2 	.word	0x00031ac2

00016e3c <init_work>:
{
   16e3c:	b510      	push	{r4, lr}
	err = bt_init();
   16e3e:	f7fa f9f3 	bl	11228 <bt_init>
	if (ready_cb) {
   16e42:	4b03      	ldr	r3, [pc, #12]	; (16e50 <init_work+0x14>)
   16e44:	681b      	ldr	r3, [r3, #0]
   16e46:	b113      	cbz	r3, 16e4e <init_work+0x12>
}
   16e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16e4c:	4718      	bx	r3
}
   16e4e:	bd10      	pop	{r4, pc}
   16e50:	20003314 	.word	0x20003314

00016e54 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   16e54:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   16e56:	4d35      	ldr	r5, [pc, #212]	; (16f2c <bt_enable+0xd8>)
   16e58:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   16e5c:	b088      	sub	sp, #32
   16e5e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16e60:	b943      	cbnz	r3, 16e74 <bt_enable+0x20>
		LOG_ERR("No HCI driver registered");
   16e62:	4833      	ldr	r0, [pc, #204]	; (16f30 <bt_enable+0xdc>)
   16e64:	2145      	movs	r1, #69	; 0x45
   16e66:	f013 fe7f 	bl	2ab68 <z_log_minimal_printk>
		return -ENODEV;
   16e6a:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16e6e:	4620      	mov	r0, r4
   16e70:	b008      	add	sp, #32
   16e72:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16e74:	f06f 0102 	mvn.w	r1, #2
   16e78:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16e7c:	f014 ff64 	bl	2bd48 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16e80:	2101      	movs	r1, #1
   16e82:	f014 ff52 	bl	2bd2a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16e86:	07c3      	lsls	r3, r0, #31
   16e88:	d44d      	bmi.n	16f26 <bt_enable+0xd2>
		err = bt_settings_init();
   16e8a:	f7fe fdc1 	bl	15a10 <bt_settings_init>
		if (err) {
   16e8e:	4604      	mov	r4, r0
   16e90:	2800      	cmp	r0, #0
   16e92:	d1ec      	bne.n	16e6e <bt_enable+0x1a>
	ready_cb = cb;
   16e94:	4b27      	ldr	r3, [pc, #156]	; (16f34 <bt_enable+0xe0>)
   16e96:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16e98:	2201      	movs	r2, #1
   16e9a:	4611      	mov	r1, r2
   16e9c:	f505 7090 	add.w	r0, r5, #288	; 0x120
   16ea0:	f017 fe98 	bl	2ebd4 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   16ea4:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   16ea8:	f017 fe72 	bl	2eb90 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16eac:	2200      	movs	r2, #0
   16eae:	2300      	movs	r3, #0
   16eb0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16eb4:	f06f 0308 	mvn.w	r3, #8
   16eb8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16ebc:	e9cd 4400 	strd	r4, r4, [sp]
   16ec0:	4b1d      	ldr	r3, [pc, #116]	; (16f38 <bt_enable+0xe4>)
   16ec2:	491e      	ldr	r1, [pc, #120]	; (16f3c <bt_enable+0xe8>)
   16ec4:	9404      	str	r4, [sp, #16]
   16ec6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16eca:	481d      	ldr	r0, [pc, #116]	; (16f40 <bt_enable+0xec>)
   16ecc:	f00d faee 	bl	244ac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16ed0:	491c      	ldr	r1, [pc, #112]	; (16f44 <bt_enable+0xf0>)
   16ed2:	481b      	ldr	r0, [pc, #108]	; (16f40 <bt_enable+0xec>)
   16ed4:	f017 fe33 	bl	2eb3e <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   16ed8:	481b      	ldr	r0, [pc, #108]	; (16f48 <bt_enable+0xf4>)
   16eda:	f00e fa43 	bl	25364 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   16ede:	491b      	ldr	r1, [pc, #108]	; (16f4c <bt_enable+0xf8>)
   16ee0:	4819      	ldr	r0, [pc, #100]	; (16f48 <bt_enable+0xf4>)
   16ee2:	9400      	str	r4, [sp, #0]
   16ee4:	f06f 0307 	mvn.w	r3, #7
   16ee8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16eec:	f00e fa50 	bl	25390 <k_work_queue_start>
   16ef0:	4917      	ldr	r1, [pc, #92]	; (16f50 <bt_enable+0xfc>)
   16ef2:	4815      	ldr	r0, [pc, #84]	; (16f48 <bt_enable+0xf4>)
   16ef4:	f017 fe23 	bl	2eb3e <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16ef8:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16efc:	68db      	ldr	r3, [r3, #12]
   16efe:	4798      	blx	r3
	if (err) {
   16f00:	4604      	mov	r4, r0
   16f02:	b128      	cbz	r0, 16f10 <bt_enable+0xbc>
		LOG_ERR("HCI driver open failed (%d)", err);
   16f04:	4602      	mov	r2, r0
   16f06:	2145      	movs	r1, #69	; 0x45
   16f08:	4812      	ldr	r0, [pc, #72]	; (16f54 <bt_enable+0x100>)
   16f0a:	f013 fe2d 	bl	2ab68 <z_log_minimal_printk>
		return err;
   16f0e:	e7ae      	b.n	16e6e <bt_enable+0x1a>
	if (!cb) {
   16f10:	b926      	cbnz	r6, 16f1c <bt_enable+0xc8>
}
   16f12:	b008      	add	sp, #32
   16f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   16f18:	f7fa b986 	b.w	11228 <bt_init>
	k_work_submit(&bt_dev.init);
   16f1c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   16f20:	f00e fa1a 	bl	25358 <k_work_submit>
	return 0;
   16f24:	e7a3      	b.n	16e6e <bt_enable+0x1a>
		return -EALREADY;
   16f26:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16f2a:	e7a0      	b.n	16e6e <bt_enable+0x1a>
   16f2c:	20000378 	.word	0x20000378
   16f30:	00031c63 	.word	0x00031c63
   16f34:	20003314 	.word	0x20003314
   16f38:	00016b35 	.word	0x00016b35
   16f3c:	20005300 	.word	0x20005300
   16f40:	20001d30 	.word	0x20001d30
   16f44:	00031c81 	.word	0x00031c81
   16f48:	20001db0 	.word	0x20001db0
   16f4c:	20005940 	.word	0x20005940
   16f50:	00031c87 	.word	0x00031c87
   16f54:	00031c8d 	.word	0x00031c8d

00016f58 <bt_is_ready>:
   16f58:	4b04      	ldr	r3, [pc, #16]	; (16f6c <bt_is_ready+0x14>)
   16f5a:	f3bf 8f5b 	dmb	ish
   16f5e:	6818      	ldr	r0, [r3, #0]
   16f60:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16f64:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16f68:	4770      	bx	lr
   16f6a:	bf00      	nop
   16f6c:	20000444 	.word	0x20000444

00016f70 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16f70:	4800      	ldr	r0, [pc, #0]	; (16f74 <bt_get_name+0x4>)
   16f72:	4770      	bx	lr
   16f74:	00031cae 	.word	0x00031cae

00016f78 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   16f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16f7a:	4604      	mov	r4, r0
   16f7c:	460e      	mov	r6, r1
   16f7e:	4617      	mov	r7, r2
	while (ad->len > 1) {
   16f80:	88a3      	ldrh	r3, [r4, #4]
   16f82:	2b01      	cmp	r3, #1
   16f84:	d801      	bhi.n	16f8a <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   16f86:	b003      	add	sp, #12
   16f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   16f8a:	4620      	mov	r0, r4
   16f8c:	f016 ffb0 	bl	2def0 <net_buf_simple_pull_u8>
		if (len == 0U) {
   16f90:	4605      	mov	r5, r0
   16f92:	2800      	cmp	r0, #0
   16f94:	d0f7      	beq.n	16f86 <bt_data_parse+0xe>
		if (len > ad->len) {
   16f96:	88a3      	ldrh	r3, [r4, #4]
   16f98:	4283      	cmp	r3, r0
   16f9a:	d206      	bcs.n	16faa <bt_data_parse+0x32>
			LOG_WRN("malformed advertising data");
   16f9c:	480d      	ldr	r0, [pc, #52]	; (16fd4 <bt_data_parse+0x5c>)
   16f9e:	2157      	movs	r1, #87	; 0x57
}
   16fa0:	b003      	add	sp, #12
   16fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			LOG_WRN("malformed advertising data");
   16fa6:	f013 bddf 	b.w	2ab68 <z_log_minimal_printk>
		data.type = net_buf_simple_pull_u8(ad);
   16faa:	4620      	mov	r0, r4
   16fac:	f016 ffa0 	bl	2def0 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   16fb0:	3d01      	subs	r5, #1
		data.data = ad->data;
   16fb2:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   16fb4:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   16fb8:	4639      	mov	r1, r7
   16fba:	4668      	mov	r0, sp
		data.data_len = len - 1;
   16fbc:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   16fc0:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   16fc2:	47b0      	blx	r6
   16fc4:	2800      	cmp	r0, #0
   16fc6:	d0de      	beq.n	16f86 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   16fc8:	4629      	mov	r1, r5
   16fca:	4620      	mov	r0, r4
   16fcc:	f008 f83c 	bl	1f048 <net_buf_simple_pull>
   16fd0:	e7d6      	b.n	16f80 <bt_data_parse+0x8>
   16fd2:	bf00      	nop
   16fd4:	00031cb5 	.word	0x00031cb5

00016fd8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16fda:	4f0a      	ldr	r7, [pc, #40]	; (17004 <id_find+0x2c>)
{
   16fdc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16fde:	2500      	movs	r5, #0
   16fe0:	79fb      	ldrb	r3, [r7, #7]
   16fe2:	b2ec      	uxtb	r4, r5
   16fe4:	42a3      	cmp	r3, r4
   16fe6:	d802      	bhi.n	16fee <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16fe8:	f06f 0001 	mvn.w	r0, #1
   16fec:	e009      	b.n	17002 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   16fee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16ff2:	4439      	add	r1, r7
   16ff4:	4630      	mov	r0, r6
   16ff6:	f014 ff53 	bl	2bea0 <bt_addr_le_eq>
   16ffa:	3501      	adds	r5, #1
   16ffc:	2800      	cmp	r0, #0
   16ffe:	d0ef      	beq.n	16fe0 <id_find+0x8>
   17000:	4620      	mov	r0, r4
}
   17002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17004:	20000378 	.word	0x20000378

00017008 <le_rpa_timeout_submit>:
{
   17008:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   1700a:	4d0d      	ldr	r5, [pc, #52]	; (17040 <le_rpa_timeout_submit+0x38>)
   1700c:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   17010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17014:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   17016:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1701a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1701e:	2100      	movs	r1, #0
   17020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17024:	2300      	movs	r3, #0
   17026:	fbe4 0106 	umlal	r0, r1, r4, r6
   1702a:	f7e9 f869 	bl	100 <__aeabi_uldivmod>
   1702e:	4602      	mov	r2, r0
   17030:	460b      	mov	r3, r1
   17032:	f505 70bc 	add.w	r0, r5, #376	; 0x178
}
   17036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   1703a:	f00e ba8f 	b.w	2555c <k_work_schedule>
   1703e:	bf00      	nop
   17040:	20000378 	.word	0x20000378

00017044 <hci_id_add>:
{
   17044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17048:	4688      	mov	r8, r1
   1704a:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   1704c:	4605      	mov	r5, r0
   1704e:	bb08      	cbnz	r0, 17094 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   17050:	2127      	movs	r1, #39	; 0x27
   17052:	f242 0027 	movw	r0, #8231	; 0x2027
   17056:	f7ff f8f3 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   1705a:	4604      	mov	r4, r0
   1705c:	b1f0      	cbz	r0, 1709c <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   1705e:	2127      	movs	r1, #39	; 0x27
   17060:	300c      	adds	r0, #12
   17062:	f008 f825 	bl	1f0b0 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17066:	4641      	mov	r1, r8
   17068:	4606      	mov	r6, r0
   1706a:	f014 ff21 	bl	2beb0 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1706e:	4639      	mov	r1, r7
   17070:	2210      	movs	r2, #16
   17072:	1df0      	adds	r0, r6, #7
   17074:	f014 fd40 	bl	2baf8 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   17078:	490a      	ldr	r1, [pc, #40]	; (170a4 <hci_id_add+0x60>)
   1707a:	2210      	movs	r2, #16
   1707c:	f106 0017 	add.w	r0, r6, #23
   17080:	f014 fd3a 	bl	2baf8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17084:	462a      	mov	r2, r5
   17086:	4621      	mov	r1, r4
   17088:	f242 0027 	movw	r0, #8231	; 0x2027
}
   1708c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17090:	f7ff b920 	b.w	162d4 <bt_hci_cmd_send_sync>
		return -EINVAL;
   17094:	f06f 0015 	mvn.w	r0, #21
}
   17098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1709c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   170a0:	e7fa      	b.n	17098 <hci_id_add+0x54>
   170a2:	bf00      	nop
   170a4:	200004dc 	.word	0x200004dc

000170a8 <atomic_get.constprop.0>:
   170a8:	4b03      	ldr	r3, [pc, #12]	; (170b8 <atomic_get.constprop.0+0x10>)
   170aa:	f3bf 8f5b 	dmb	ish
   170ae:	6818      	ldr	r0, [r3, #0]
   170b0:	f3bf 8f5b 	dmb	ish
}
   170b4:	4770      	bx	lr
   170b6:	bf00      	nop
   170b8:	20000444 	.word	0x20000444

000170bc <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   170bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   170be:	4604      	mov	r4, r0
   170c0:	b085      	sub	sp, #20
   170c2:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   170c4:	460d      	mov	r5, r1
   170c6:	b329      	cbz	r1, 17114 <id_create+0x58>
   170c8:	4928      	ldr	r1, [pc, #160]	; (1716c <id_create+0xb0>)
   170ca:	4628      	mov	r0, r5
   170cc:	f014 fee8 	bl	2bea0 <bt_addr_le_eq>
   170d0:	bb00      	cbnz	r0, 17114 <id_create+0x58>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   170d2:	4b27      	ldr	r3, [pc, #156]	; (17170 <id_create+0xb4>)
   170d4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   170d8:	4629      	mov	r1, r5
   170da:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   170dc:	f014 fee8 	bl	2beb0 <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   170e0:	2300      	movs	r3, #0
   170e2:	e9cd 3300 	strd	r3, r3, [sp]
   170e6:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   170ea:	4b22      	ldr	r3, [pc, #136]	; (17174 <id_create+0xb8>)
   170ec:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   170f0:	b336      	cbz	r6, 17140 <id_create+0x84>
   170f2:	2210      	movs	r2, #16
   170f4:	4669      	mov	r1, sp
   170f6:	4630      	mov	r0, r6
   170f8:	f014 fcd7 	bl	2baaa <memcmp>
   170fc:	b340      	cbz	r0, 17150 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
   170fe:	2210      	movs	r2, #16
   17100:	4631      	mov	r1, r6
   17102:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   17104:	f014 fcf8 	bl	2baf8 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17108:	f7ff ffce 	bl	170a8 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1710c:	0743      	lsls	r3, r0, #29
   1710e:	d429      	bmi.n	17164 <id_create+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   17110:	2000      	movs	r0, #0
   17112:	e01b      	b.n	1714c <id_create+0x90>
			err = bt_addr_le_create_static(&new_addr);
   17114:	4668      	mov	r0, sp
   17116:	f014 fdcc 	bl	2bcb2 <bt_addr_le_create_static>
			if (err) {
   1711a:	b9b8      	cbnz	r0, 1714c <id_create+0x90>
		} while (id_find(&new_addr) >= 0);
   1711c:	4668      	mov	r0, sp
   1711e:	f7ff ff5b 	bl	16fd8 <id_find>
   17122:	2800      	cmp	r0, #0
   17124:	daf6      	bge.n	17114 <id_create+0x58>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17126:	4b12      	ldr	r3, [pc, #72]	; (17170 <id_create+0xb4>)
   17128:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   1712c:	441f      	add	r7, r3
   1712e:	4669      	mov	r1, sp
   17130:	4638      	mov	r0, r7
   17132:	f014 febd 	bl	2beb0 <bt_addr_le_copy>
		if (addr) {
   17136:	2d00      	cmp	r5, #0
   17138:	d0d2      	beq.n	170e0 <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   1713a:	4639      	mov	r1, r7
   1713c:	4628      	mov	r0, r5
   1713e:	e7cd      	b.n	170dc <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   17140:	2110      	movs	r1, #16
   17142:	4620      	mov	r0, r4
   17144:	f00b f96a 	bl	2241c <bt_rand>
			if (err) {
   17148:	2800      	cmp	r0, #0
   1714a:	d0dd      	beq.n	17108 <id_create+0x4c>
}
   1714c:	b005      	add	sp, #20
   1714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   17150:	2110      	movs	r1, #16
   17152:	4620      	mov	r0, r4
   17154:	f00b f962 	bl	2241c <bt_rand>
			if (err) {
   17158:	2800      	cmp	r0, #0
   1715a:	d1f7      	bne.n	1714c <id_create+0x90>
				memcpy(irk, &bt_dev.irk[id], 16);
   1715c:	2210      	movs	r2, #16
   1715e:	4621      	mov	r1, r4
   17160:	4630      	mov	r0, r6
   17162:	e7cf      	b.n	17104 <id_create+0x48>
		bt_settings_save_id();
   17164:	f7fe fc0e 	bl	15984 <bt_settings_save_id>
   17168:	e7d2      	b.n	17110 <id_create+0x54>
   1716a:	bf00      	nop
   1716c:	000313da 	.word	0x000313da
   17170:	20000378 	.word	0x20000378
   17174:	200004dc 	.word	0x200004dc

00017178 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17178:	4b06      	ldr	r3, [pc, #24]	; (17194 <atomic_or.constprop.0.isra.0+0x1c>)
   1717a:	f3bf 8f5b 	dmb	ish
   1717e:	e853 1f00 	ldrex	r1, [r3]
   17182:	4301      	orrs	r1, r0
   17184:	e843 1200 	strex	r2, r1, [r3]
   17188:	2a00      	cmp	r2, #0
   1718a:	d1f8      	bne.n	1717e <atomic_or.constprop.0.isra.0+0x6>
   1718c:	f3bf 8f5b 	dmb	ish
}
   17190:	4770      	bx	lr
   17192:	bf00      	nop
   17194:	20000444 	.word	0x20000444

00017198 <set_random_address>:
{
   17198:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   1719a:	4913      	ldr	r1, [pc, #76]	; (171e8 <set_random_address+0x50>)
   1719c:	2206      	movs	r2, #6
   1719e:	4605      	mov	r5, r0
   171a0:	f014 fc83 	bl	2baaa <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   171a4:	b1d8      	cbz	r0, 171de <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   171a6:	2106      	movs	r1, #6
   171a8:	f242 0005 	movw	r0, #8197	; 0x2005
   171ac:	f7ff f848 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   171b0:	4604      	mov	r4, r0
   171b2:	b1b0      	cbz	r0, 171e2 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   171b4:	2206      	movs	r2, #6
   171b6:	4629      	mov	r1, r5
   171b8:	300c      	adds	r0, #12
   171ba:	f016 feb5 	bl	2df28 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   171be:	2200      	movs	r2, #0
   171c0:	4621      	mov	r1, r4
   171c2:	f242 0005 	movw	r0, #8197	; 0x2005
   171c6:	f7ff f885 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   171ca:	b948      	cbnz	r0, 171e0 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   171cc:	2206      	movs	r2, #6
   171ce:	4806      	ldr	r0, [pc, #24]	; (171e8 <set_random_address+0x50>)
   171d0:	4629      	mov	r1, r5
   171d2:	f014 fc91 	bl	2baf8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   171d6:	4b05      	ldr	r3, [pc, #20]	; (171ec <set_random_address+0x54>)
   171d8:	2201      	movs	r2, #1
   171da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   171de:	2000      	movs	r0, #0
}
   171e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   171e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   171e6:	e7fb      	b.n	171e0 <set_random_address+0x48>
   171e8:	200003d9 	.word	0x200003d9
   171ec:	20000378 	.word	0x20000378

000171f0 <find_rl_conflict>:
{
   171f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171f4:	4605      	mov	r5, r0
   171f6:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   171f8:	460c      	mov	r4, r1
   171fa:	b951      	cbnz	r1, 17212 <find_rl_conflict+0x22>
   171fc:	4929      	ldr	r1, [pc, #164]	; (172a4 <find_rl_conflict+0xb4>)
   171fe:	482a      	ldr	r0, [pc, #168]	; (172a8 <find_rl_conflict+0xb8>)
   17200:	f44f 7257 	mov.w	r2, #860	; 0x35c
   17204:	f013 fca2 	bl	2ab4c <assert_print>
   17208:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   1720c:	4825      	ldr	r0, [pc, #148]	; (172a4 <find_rl_conflict+0xb4>)
   1720e:	f013 fc96 	bl	2ab3e <assert_post_action>
   17212:	6808      	ldr	r0, [r1, #0]
   17214:	b940      	cbnz	r0, 17228 <find_rl_conflict+0x38>
   17216:	4923      	ldr	r1, [pc, #140]	; (172a4 <find_rl_conflict+0xb4>)
   17218:	4823      	ldr	r0, [pc, #140]	; (172a8 <find_rl_conflict+0xb8>)
   1721a:	f240 325d 	movw	r2, #861	; 0x35d
   1721e:	f013 fc95 	bl	2ab4c <assert_print>
   17222:	f240 315d 	movw	r1, #861	; 0x35d
   17226:	e7f1      	b.n	1720c <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG(resident != NULL);
   17228:	b945      	cbnz	r5, 1723c <find_rl_conflict+0x4c>
   1722a:	491e      	ldr	r1, [pc, #120]	; (172a4 <find_rl_conflict+0xb4>)
   1722c:	481e      	ldr	r0, [pc, #120]	; (172a8 <find_rl_conflict+0xb8>)
   1722e:	f240 325e 	movw	r2, #862	; 0x35e
   17232:	f013 fc8b 	bl	2ab4c <assert_print>
   17236:	f240 315e 	movw	r1, #862	; 0x35e
   1723a:	e7e7      	b.n	1720c <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1723c:	7a03      	ldrb	r3, [r0, #8]
   1723e:	075a      	lsls	r2, r3, #29
   17240:	d508      	bpl.n	17254 <find_rl_conflict+0x64>
   17242:	4918      	ldr	r1, [pc, #96]	; (172a4 <find_rl_conflict+0xb4>)
   17244:	4818      	ldr	r0, [pc, #96]	; (172a8 <find_rl_conflict+0xb8>)
   17246:	f44f 7258 	mov.w	r2, #864	; 0x360
   1724a:	f013 fc7f 	bl	2ab4c <assert_print>
   1724e:	f44f 7158 	mov.w	r1, #864	; 0x360
   17252:	e7db      	b.n	1720c <find_rl_conflict+0x1c>
	if (conflict->found) {
   17254:	684f      	ldr	r7, [r1, #4]
   17256:	b9f7      	cbnz	r7, 17296 <find_rl_conflict+0xa6>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   17258:	7a2b      	ldrb	r3, [r5, #8]
   1725a:	075b      	lsls	r3, r3, #29
   1725c:	d51b      	bpl.n	17296 <find_rl_conflict+0xa6>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1725e:	1c69      	adds	r1, r5, #1
   17260:	3001      	adds	r0, #1
   17262:	f014 fe1d 	bl	2bea0 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   17266:	f8d4 8000 	ldr.w	r8, [r4]
   1726a:	2216      	movs	r2, #22
   1726c:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1726e:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   17270:	4668      	mov	r0, sp
   17272:	f014 fc4c 	bl	2bb0e <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   17276:	2210      	movs	r2, #16
   17278:	4669      	mov	r1, sp
   1727a:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1727e:	f014 fc14 	bl	2baaa <memcmp>
   17282:	b158      	cbz	r0, 1729c <find_rl_conflict+0xac>
   17284:	6820      	ldr	r0, [r4, #0]
   17286:	2210      	movs	r2, #16
   17288:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1728c:	302a      	adds	r0, #42	; 0x2a
   1728e:	f014 fc0c 	bl	2baaa <memcmp>
   17292:	b918      	cbnz	r0, 1729c <find_rl_conflict+0xac>
		conflict->found = resident;
   17294:	6065      	str	r5, [r4, #4]
}
   17296:	b006      	add	sp, #24
   17298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   1729c:	2e00      	cmp	r6, #0
   1729e:	d1f9      	bne.n	17294 <find_rl_conflict+0xa4>
   172a0:	e7f9      	b.n	17296 <find_rl_conflict+0xa6>
   172a2:	bf00      	nop
   172a4:	00031dee 	.word	0x00031dee
   172a8:	0003013d 	.word	0x0003013d

000172ac <bt_id_set_private_addr>:
{
   172ac:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   172ae:	b9e0      	cbnz	r0, 172ea <bt_id_set_private_addr+0x3e>
   172b0:	f7ff fefa 	bl	170a8 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   172b4:	0483      	lsls	r3, r0, #18
   172b6:	d416      	bmi.n	172e6 <bt_id_set_private_addr+0x3a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   172b8:	480d      	ldr	r0, [pc, #52]	; (172f0 <bt_id_set_private_addr+0x44>)
   172ba:	4669      	mov	r1, sp
   172bc:	f014 fc75 	bl	2bbaa <bt_rpa_create>
	if (!err) {
   172c0:	4604      	mov	r4, r0
   172c2:	b120      	cbz	r0, 172ce <bt_id_set_private_addr+0x22>
	le_rpa_timeout_submit();
   172c4:	f7ff fea0 	bl	17008 <le_rpa_timeout_submit>
}
   172c8:	4620      	mov	r0, r4
   172ca:	b002      	add	sp, #8
   172cc:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   172ce:	4668      	mov	r0, sp
   172d0:	f7ff ff62 	bl	17198 <set_random_address>
		if (!err) {
   172d4:	4604      	mov	r4, r0
   172d6:	2800      	cmp	r0, #0
   172d8:	d1f4      	bne.n	172c4 <bt_id_set_private_addr+0x18>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   172da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   172de:	f7ff ff4b 	bl	17178 <atomic_or.constprop.0.isra.0>
	le_rpa_timeout_submit();
   172e2:	f7ff fe91 	bl	17008 <le_rpa_timeout_submit>
		return 0;
   172e6:	2400      	movs	r4, #0
   172e8:	e7ee      	b.n	172c8 <bt_id_set_private_addr+0x1c>
		return -EINVAL;
   172ea:	f06f 0415 	mvn.w	r4, #21
   172ee:	e7eb      	b.n	172c8 <bt_id_set_private_addr+0x1c>
   172f0:	200004dc 	.word	0x200004dc

000172f4 <le_update_private_addr>:
{
   172f4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   172f6:	f7ff fed7 	bl	170a8 <atomic_get.constprop.0>
   172fa:	4603      	mov	r3, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   172fc:	065b      	lsls	r3, r3, #25
   172fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17302:	d409      	bmi.n	17318 <le_update_private_addr+0x24>
	err = bt_id_set_private_addr(id);
   17304:	f7ff ffd2 	bl	172ac <bt_id_set_private_addr>
	if (err) {
   17308:	4602      	mov	r2, r0
   1730a:	b198      	cbz	r0, 17334 <le_update_private_addr+0x40>
}
   1730c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Failed to update RPA address (%d)", err);
   17310:	4809      	ldr	r0, [pc, #36]	; (17338 <le_update_private_addr+0x44>)
   17312:	2157      	movs	r1, #87	; 0x57
   17314:	f013 bc28 	b.w	2ab68 <z_log_minimal_printk>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   17318:	2000      	movs	r0, #0
   1731a:	f014 fe1c 	bl	2bf56 <bt_le_scan_set_enable>
	err = bt_id_set_private_addr(id);
   1731e:	2000      	movs	r0, #0
   17320:	f7ff ffc4 	bl	172ac <bt_id_set_private_addr>
	if (err) {
   17324:	4602      	mov	r2, r0
   17326:	2800      	cmp	r0, #0
   17328:	d1f0      	bne.n	1730c <le_update_private_addr+0x18>
}
   1732a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1732e:	2001      	movs	r0, #1
   17330:	f014 be11 	b.w	2bf56 <bt_le_scan_set_enable>
}
   17334:	bd08      	pop	{r3, pc}
   17336:	bf00      	nop
   17338:	00031e1c 	.word	0x00031e1c

0001733c <le_force_rpa_timeout>:
{
   1733c:	b510      	push	{r4, lr}
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
   1733e:	4c0b      	ldr	r4, [pc, #44]	; (1736c <le_force_rpa_timeout+0x30>)
{
   17340:	b08a      	sub	sp, #40	; 0x28
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
   17342:	4620      	mov	r0, r4
   17344:	4669      	mov	r1, sp
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17346:	3cac      	subs	r4, #172	; 0xac
   17348:	f00e f9b8 	bl	256bc <k_work_cancel_delayable_sync>
   1734c:	f3bf 8f5b 	dmb	ish
   17350:	e854 3f00 	ldrex	r3, [r4]
   17354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17358:	e844 3200 	strex	r2, r3, [r4]
   1735c:	2a00      	cmp	r2, #0
   1735e:	d1f7      	bne.n	17350 <le_force_rpa_timeout+0x14>
   17360:	f3bf 8f5b 	dmb	ish
	le_update_private_addr();
   17364:	f7ff ffc6 	bl	172f4 <le_update_private_addr>
}
   17368:	b00a      	add	sp, #40	; 0x28
   1736a:	bd10      	pop	{r4, pc}
   1736c:	200004f0 	.word	0x200004f0

00017370 <rpa_timeout>:
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17370:	2100      	movs	r1, #0
{
   17372:	b508      	push	{r3, lr}
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17374:	2202      	movs	r2, #2
   17376:	4608      	mov	r0, r1
   17378:	f001 fc8c 	bl	18c94 <bt_conn_lookup_state_le>
		if (conn) {
   1737c:	b118      	cbz	r0, 17386 <rpa_timeout+0x16>
			bt_conn_unref(conn);
   1737e:	f001 f9a9 	bl	186d4 <bt_conn_unref>
			bt_le_create_conn_cancel();
   17382:	f7ff f8b1 	bl	164e8 <bt_le_create_conn_cancel>
   17386:	f3bf 8f5b 	dmb	ish
   1738a:	4b0e      	ldr	r3, [pc, #56]	; (173c4 <rpa_timeout+0x54>)
   1738c:	e853 1f00 	ldrex	r1, [r3]
   17390:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   17394:	e843 1200 	strex	r2, r1, [r3]
   17398:	2a00      	cmp	r2, #0
   1739a:	d1f7      	bne.n	1738c <rpa_timeout+0x1c>
   1739c:	f3bf 8f5b 	dmb	ish
   173a0:	f7ff fe82 	bl	170a8 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   173a4:	04c1      	lsls	r1, r0, #19
   173a6:	d503      	bpl.n	173b0 <rpa_timeout+0x40>
}
   173a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
   173ac:	f7ff bfa2 	b.w	172f4 <le_update_private_addr>
   173b0:	f7ff fe7a 	bl	170a8 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   173b4:	0642      	lsls	r2, r0, #25
   173b6:	d503      	bpl.n	173c0 <rpa_timeout+0x50>
   173b8:	f7ff fe76 	bl	170a8 <atomic_get.constprop.0>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   173bc:	05c3      	lsls	r3, r0, #23
   173be:	d4f3      	bmi.n	173a8 <rpa_timeout+0x38>
}
   173c0:	bd08      	pop	{r3, pc}
   173c2:	bf00      	nop
   173c4:	20000444 	.word	0x20000444

000173c8 <bt_id_pending_keys_update>:
   173c8:	4b0a      	ldr	r3, [pc, #40]	; (173f4 <bt_id_pending_keys_update+0x2c>)
   173ca:	f3bf 8f5b 	dmb	ish
   173ce:	e853 2f00 	ldrex	r2, [r3]
   173d2:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   173d6:	e843 1000 	strex	r0, r1, [r3]
   173da:	2800      	cmp	r0, #0
   173dc:	d1f7      	bne.n	173ce <bt_id_pending_keys_update+0x6>
   173de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   173e2:	0413      	lsls	r3, r2, #16
   173e4:	d504      	bpl.n	173f0 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_ALL, pending_id_update, NULL);
   173e6:	4904      	ldr	r1, [pc, #16]	; (173f8 <bt_id_pending_keys_update+0x30>)
   173e8:	2200      	movs	r2, #0
   173ea:	203f      	movs	r0, #63	; 0x3f
   173ec:	f007 b8d0 	b.w	1e590 <bt_keys_foreach_type>
}
   173f0:	4770      	bx	lr
   173f2:	bf00      	nop
   173f4:	20000444 	.word	0x20000444
   173f8:	0002bf19 	.word	0x0002bf19

000173fc <bt_id_find_conflict>:
{
   173fc:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   173fe:	2300      	movs	r3, #0
   17400:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   17404:	4904      	ldr	r1, [pc, #16]	; (17418 <bt_id_find_conflict+0x1c>)
   17406:	466a      	mov	r2, sp
   17408:	2002      	movs	r0, #2
   1740a:	f007 f8c1 	bl	1e590 <bt_keys_foreach_type>
}
   1740e:	9801      	ldr	r0, [sp, #4]
   17410:	b003      	add	sp, #12
   17412:	f85d fb04 	ldr.w	pc, [sp], #4
   17416:	bf00      	nop
   17418:	000171f1 	.word	0x000171f1

0001741c <bt_id_add>:
{
   1741c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   17420:	4604      	mov	r4, r0
   17422:	b170      	cbz	r0, 17442 <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17424:	4d4f      	ldr	r5, [pc, #316]	; (17564 <bt_id_add+0x148>)
   17426:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   1742a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1742e:	b10a      	cbz	r2, 17434 <bt_id_add+0x18>
   17430:	429a      	cmp	r2, r3
   17432:	d209      	bcs.n	17448 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   17434:	3301      	adds	r3, #1
   17436:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1743a:	7a23      	ldrb	r3, [r4, #8]
   1743c:	f043 0304 	orr.w	r3, r3, #4
   17440:	7223      	strb	r3, [r4, #8]
}
   17442:	b002      	add	sp, #8
   17444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17448:	2100      	movs	r1, #0
   1744a:	2206      	movs	r2, #6
   1744c:	4608      	mov	r0, r1
   1744e:	f001 fc21 	bl	18c94 <bt_conn_lookup_state_le>
	if (conn) {
   17452:	4606      	mov	r6, r0
   17454:	b168      	cbz	r0, 17472 <bt_id_add+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17456:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1745a:	f7ff fe8d 	bl	17178 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   1745e:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   17460:	4630      	mov	r0, r6
	keys->state |= flag;
   17462:	f043 0301 	orr.w	r3, r3, #1
   17466:	7223      	strb	r3, [r4, #8]
}
   17468:	b002      	add	sp, #8
   1746a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1746e:	f001 b931 	b.w	186d4 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17472:	f7ff fe19 	bl	170a8 <atomic_get.constprop.0>
	if (scan_enabled) {
   17476:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17478:	f3c0 1780 	ubfx	r7, r0, #6, #1
   1747c:	d502      	bpl.n	17484 <bt_id_add+0x68>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1747e:	4630      	mov	r0, r6
   17480:	f014 fd69 	bl	2bf56 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   17484:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17488:	b143      	cbz	r3, 1749c <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1748a:	2000      	movs	r0, #0
   1748c:	f014 fd1e 	bl	2becc <addr_res_enable>
		if (err) {
   17490:	b120      	cbz	r0, 1749c <bt_id_add+0x80>
			LOG_WRN("Failed to disable address resolution");
   17492:	4835      	ldr	r0, [pc, #212]	; (17568 <bt_id_add+0x14c>)
   17494:	2157      	movs	r1, #87	; 0x57
		LOG_ERR("Failed to set privacy mode");
   17496:	f013 fb67 	bl	2ab68 <z_log_minimal_printk>
		goto done;
   1749a:	e01c      	b.n	174d6 <bt_id_add+0xba>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1749c:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   174a0:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   174a4:	429a      	cmp	r2, r3
   174a6:	d121      	bne.n	174ec <bt_id_add+0xd0>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   174a8:	4830      	ldr	r0, [pc, #192]	; (1756c <bt_id_add+0x150>)
   174aa:	2157      	movs	r1, #87	; 0x57
   174ac:	f013 fb5c 	bl	2ab68 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   174b0:	2200      	movs	r2, #0
   174b2:	4611      	mov	r1, r2
   174b4:	f242 0029 	movw	r0, #8233	; 0x2029
   174b8:	f7fe ff0c 	bl	162d4 <bt_hci_cmd_send_sync>
		if (err) {
   174bc:	b110      	cbz	r0, 174c4 <bt_id_add+0xa8>
			LOG_ERR("Failed to clear resolution list");
   174be:	482c      	ldr	r0, [pc, #176]	; (17570 <bt_id_add+0x154>)
   174c0:	2145      	movs	r1, #69	; 0x45
   174c2:	e7e8      	b.n	17496 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
   174c4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   174c8:	3301      	adds	r3, #1
   174ca:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   174ce:	7a23      	ldrb	r3, [r4, #8]
   174d0:	f043 0304 	orr.w	r3, r3, #4
   174d4:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   174d6:	2001      	movs	r0, #1
   174d8:	f014 fcf8 	bl	2becc <addr_res_enable>
	if (scan_enabled) {
   174dc:	2f00      	cmp	r7, #0
   174de:	d0b0      	beq.n	17442 <bt_id_add+0x26>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   174e0:	2001      	movs	r0, #1
}
   174e2:	b002      	add	sp, #8
   174e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   174e8:	f014 bd35 	b.w	2bf56 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   174ec:	4622      	mov	r2, r4
   174ee:	f104 0801 	add.w	r8, r4, #1
   174f2:	f812 0b2a 	ldrb.w	r0, [r2], #42
   174f6:	4641      	mov	r1, r8
   174f8:	f7ff fda4 	bl	17044 <hci_id_add>
	if (err) {
   174fc:	4606      	mov	r6, r0
   174fe:	b110      	cbz	r0, 17506 <bt_id_add+0xea>
		LOG_ERR("Failed to add IRK to controller");
   17500:	481c      	ldr	r0, [pc, #112]	; (17574 <bt_id_add+0x158>)
   17502:	2145      	movs	r1, #69	; 0x45
   17504:	e7c7      	b.n	17496 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
   17506:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1750a:	3301      	adds	r3, #1
   1750c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   17510:	7a23      	ldrb	r3, [r4, #8]
   17512:	f043 0304 	orr.w	r3, r3, #4
   17516:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17518:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   1751c:	075b      	lsls	r3, r3, #29
   1751e:	d402      	bmi.n	17526 <bt_id_add+0x10a>
		LOG_WRN("Set privacy mode command is not supported");
   17520:	4815      	ldr	r0, [pc, #84]	; (17578 <bt_id_add+0x15c>)
   17522:	2157      	movs	r1, #87	; 0x57
   17524:	e7b7      	b.n	17496 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
   17526:	4641      	mov	r1, r8
   17528:	4668      	mov	r0, sp
   1752a:	f014 fcc1 	bl	2beb0 <bt_addr_le_copy>
	cp.mode = mode;
   1752e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17530:	2108      	movs	r1, #8
   17532:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17536:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1753a:	f7fe fe81 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   1753e:	4604      	mov	r4, r0
   17540:	b160      	cbz	r0, 1755c <bt_id_add+0x140>
   17542:	2208      	movs	r2, #8
   17544:	4669      	mov	r1, sp
   17546:	300c      	adds	r0, #12
   17548:	f016 fcee 	bl	2df28 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1754c:	4632      	mov	r2, r6
   1754e:	4621      	mov	r1, r4
   17550:	f242 004e 	movw	r0, #8270	; 0x204e
   17554:	f7fe febe 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   17558:	2800      	cmp	r0, #0
   1755a:	d0bc      	beq.n	174d6 <bt_id_add+0xba>
		LOG_ERR("Failed to set privacy mode");
   1755c:	4807      	ldr	r0, [pc, #28]	; (1757c <bt_id_add+0x160>)
   1755e:	2145      	movs	r1, #69	; 0x45
   17560:	e799      	b.n	17496 <bt_id_add+0x7a>
   17562:	bf00      	nop
   17564:	20000378 	.word	0x20000378
   17568:	00031e43 	.word	0x00031e43
   1756c:	00031e6d 	.word	0x00031e6d
   17570:	00031ea3 	.word	0x00031ea3
   17574:	00031ec8 	.word	0x00031ec8
   17578:	00031eed 	.word	0x00031eed
   1757c:	00031f1c 	.word	0x00031f1c

00017580 <bt_id_del>:
{
   17580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CHECKIF(keys == NULL) {
   17584:	4604      	mov	r4, r0
   17586:	b378      	cbz	r0, 175e8 <bt_id_del+0x68>
	if (!bt_dev.le.rl_size ||
   17588:	4d46      	ldr	r5, [pc, #280]	; (176a4 <bt_id_del+0x124>)
   1758a:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1758e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   17592:	b1b2      	cbz	r2, 175c2 <bt_id_del+0x42>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17594:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   17596:	4293      	cmp	r3, r2
   17598:	dc1f      	bgt.n	175da <bt_id_del+0x5a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1759a:	2100      	movs	r1, #0
   1759c:	2206      	movs	r2, #6
   1759e:	4608      	mov	r0, r1
   175a0:	f001 fb78 	bl	18c94 <bt_conn_lookup_state_le>
	if (conn) {
   175a4:	4606      	mov	r6, r0
   175a6:	b308      	cbz	r0, 175ec <bt_id_del+0x6c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   175a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   175ac:	f7ff fde4 	bl	17178 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   175b0:	7a23      	ldrb	r3, [r4, #8]
   175b2:	f043 0302 	orr.w	r3, r3, #2
   175b6:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   175b8:	4630      	mov	r0, r6
}
   175ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   175be:	f001 b889 	b.w	186d4 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   175c2:	b953      	cbnz	r3, 175da <bt_id_del+0x5a>
   175c4:	4938      	ldr	r1, [pc, #224]	; (176a8 <bt_id_del+0x128>)
   175c6:	4839      	ldr	r0, [pc, #228]	; (176ac <bt_id_del+0x12c>)
   175c8:	f240 4223 	movw	r2, #1059	; 0x423
   175cc:	f013 fabe 	bl	2ab4c <assert_print>
   175d0:	4835      	ldr	r0, [pc, #212]	; (176a8 <bt_id_del+0x128>)
   175d2:	f240 4123 	movw	r1, #1059	; 0x423
   175d6:	f013 fab2 	bl	2ab3e <assert_post_action>
			bt_dev.le.rl_entries--;
   175da:	3b01      	subs	r3, #1
   175dc:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   175e0:	7a23      	ldrb	r3, [r4, #8]
   175e2:	f023 0304 	bic.w	r3, r3, #4
   175e6:	7223      	strb	r3, [r4, #8]
}
   175e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   175ec:	f7ff fd5c 	bl	170a8 <atomic_get.constprop.0>
	if (scan_enabled) {
   175f0:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   175f2:	f3c0 1880 	ubfx	r8, r0, #6, #1
   175f6:	d502      	bpl.n	175fe <bt_id_del+0x7e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   175f8:	4630      	mov	r0, r6
   175fa:	f014 fcac 	bl	2bf56 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   175fe:	2000      	movs	r0, #0
   17600:	f014 fc64 	bl	2becc <addr_res_enable>
	if (err) {
   17604:	4606      	mov	r6, r0
   17606:	b190      	cbz	r0, 1762e <bt_id_del+0xae>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   17608:	4602      	mov	r2, r0
   1760a:	2145      	movs	r1, #69	; 0x45
   1760c:	4828      	ldr	r0, [pc, #160]	; (176b0 <bt_id_del+0x130>)
   1760e:	f013 faab 	bl	2ab68 <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   17612:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17616:	b113      	cbz	r3, 1761e <bt_id_del+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17618:	2001      	movs	r0, #1
   1761a:	f014 fc57 	bl	2becc <addr_res_enable>
	if (scan_enabled) {
   1761e:	f1b8 0f00 	cmp.w	r8, #0
   17622:	d0e1      	beq.n	175e8 <bt_id_del+0x68>
}
   17624:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   17628:	2001      	movs	r0, #1
   1762a:	f014 bc94 	b.w	2bf56 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1762e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17632:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   17636:	429a      	cmp	r2, r3
   17638:	d20c      	bcs.n	17654 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   1763a:	3b01      	subs	r3, #1
   1763c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   17640:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   17642:	491c      	ldr	r1, [pc, #112]	; (176b4 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17644:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   17648:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   1764a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   1764c:	203f      	movs	r0, #63	; 0x3f
   1764e:	f006 ff9f 	bl	1e590 <bt_keys_foreach_type>
		goto done;
   17652:	e7de      	b.n	17612 <bt_id_del+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17654:	2107      	movs	r1, #7
   17656:	f242 0028 	movw	r0, #8232	; 0x2028
   1765a:	f7fe fdf1 	bl	16240 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1765e:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   17662:	4607      	mov	r7, r0
   17664:	b920      	cbnz	r0, 17670 <bt_id_del+0xf0>
		LOG_ERR("Failed to remove IRK from controller");
   17666:	4814      	ldr	r0, [pc, #80]	; (176b8 <bt_id_del+0x138>)
   17668:	2145      	movs	r1, #69	; 0x45
   1766a:	f013 fa7d 	bl	2ab68 <z_log_minimal_printk>
		goto done;
   1766e:	e7d0      	b.n	17612 <bt_id_del+0x92>
	return net_buf_simple_add(&buf->b, len);
   17670:	2107      	movs	r1, #7
   17672:	300c      	adds	r0, #12
   17674:	f007 fd1c 	bl	1f0b0 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17678:	4649      	mov	r1, r9
   1767a:	f014 fc19 	bl	2beb0 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1767e:	4632      	mov	r2, r6
   17680:	4639      	mov	r1, r7
   17682:	f242 0028 	movw	r0, #8232	; 0x2028
   17686:	f7fe fe25 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1768a:	2800      	cmp	r0, #0
   1768c:	d1eb      	bne.n	17666 <bt_id_del+0xe6>
	bt_dev.le.rl_entries--;
   1768e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17692:	3b01      	subs	r3, #1
   17694:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   17698:	7a23      	ldrb	r3, [r4, #8]
   1769a:	f023 0304 	bic.w	r3, r3, #4
   1769e:	7223      	strb	r3, [r4, #8]
   176a0:	e7b7      	b.n	17612 <bt_id_del+0x92>
   176a2:	bf00      	nop
   176a4:	20000378 	.word	0x20000378
   176a8:	00031dee 	.word	0x00031dee
   176ac:	0003013d 	.word	0x0003013d
   176b0:	00031f3c 	.word	0x00031f3c
   176b4:	0002beb7 	.word	0x0002beb7
   176b8:	00031f6e 	.word	0x00031f6e

000176bc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   176bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   176be:	460d      	mov	r5, r1
   176c0:	b085      	sub	sp, #20
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   176c2:	4604      	mov	r4, r0
   176c4:	b930      	cbnz	r0, 176d4 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   176c6:	4e25      	ldr	r6, [pc, #148]	; (1775c <bt_id_create+0xa0>)
   176c8:	79f3      	ldrb	r3, [r6, #7]
   176ca:	2b01      	cmp	r3, #1
   176cc:	d11f      	bne.n	1770e <bt_id_create+0x52>
		return -ENOMEM;
   176ce:	f06f 000b 	mvn.w	r0, #11
   176d2:	e012      	b.n	176fa <bt_id_create+0x3e>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   176d4:	4922      	ldr	r1, [pc, #136]	; (17760 <bt_id_create+0xa4>)
   176d6:	f014 fbe3 	bl	2bea0 <bt_addr_le_eq>
   176da:	2800      	cmp	r0, #0
   176dc:	d1f3      	bne.n	176c6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   176de:	7823      	ldrb	r3, [r4, #0]
   176e0:	2b01      	cmp	r3, #1
   176e2:	d104      	bne.n	176ee <bt_id_create+0x32>
   176e4:	79a3      	ldrb	r3, [r4, #6]
   176e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   176ea:	2bc0      	cmp	r3, #192	; 0xc0
   176ec:	d007      	beq.n	176fe <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   176ee:	481d      	ldr	r0, [pc, #116]	; (17764 <bt_id_create+0xa8>)
   176f0:	2145      	movs	r1, #69	; 0x45
   176f2:	f013 fa39 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   176f6:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   176fa:	b005      	add	sp, #20
   176fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (id_find(addr) >= 0) {
   176fe:	4620      	mov	r0, r4
   17700:	f7ff fc6a 	bl	16fd8 <id_find>
   17704:	2800      	cmp	r0, #0
   17706:	dbde      	blt.n	176c6 <bt_id_create+0xa>
			return -EALREADY;
   17708:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1770c:	e7f5      	b.n	176fa <bt_id_create+0x3e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1770e:	f7ff fccb 	bl	170a8 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17712:	f010 0001 	ands.w	r0, r0, #1
   17716:	d114      	bne.n	17742 <bt_id_create+0x86>
		uint8_t zero_irk[16] = { 0 };
   17718:	e9cd 0000 	strd	r0, r0, [sp]
   1771c:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17720:	2c00      	cmp	r4, #0
   17722:	d0e8      	beq.n	176f6 <bt_id_create+0x3a>
   17724:	490e      	ldr	r1, [pc, #56]	; (17760 <bt_id_create+0xa4>)
   17726:	4620      	mov	r0, r4
   17728:	f014 fbba 	bl	2bea0 <bt_addr_le_eq>
   1772c:	2800      	cmp	r0, #0
   1772e:	d1e2      	bne.n	176f6 <bt_id_create+0x3a>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   17730:	2d00      	cmp	r5, #0
   17732:	d0e0      	beq.n	176f6 <bt_id_create+0x3a>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   17734:	2210      	movs	r2, #16
   17736:	4669      	mov	r1, sp
   17738:	4628      	mov	r0, r5
   1773a:	f014 f9b6 	bl	2baaa <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1773e:	2800      	cmp	r0, #0
   17740:	d0d9      	beq.n	176f6 <bt_id_create+0x3a>
	new_id = bt_dev.id_count;
   17742:	79f7      	ldrb	r7, [r6, #7]
	err = id_create(new_id, addr, irk);
   17744:	462a      	mov	r2, r5
   17746:	4621      	mov	r1, r4
   17748:	4638      	mov	r0, r7
   1774a:	f7ff fcb7 	bl	170bc <id_create>
	if (err) {
   1774e:	2800      	cmp	r0, #0
   17750:	d1d3      	bne.n	176fa <bt_id_create+0x3e>
		bt_dev.id_count++;
   17752:	79f3      	ldrb	r3, [r6, #7]
   17754:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17756:	4638      	mov	r0, r7
		bt_dev.id_count++;
   17758:	71f3      	strb	r3, [r6, #7]
	return new_id;
   1775a:	e7ce      	b.n	176fa <bt_id_create+0x3e>
   1775c:	20000378 	.word	0x20000378
   17760:	000313da 	.word	0x000313da
   17764:	00031f98 	.word	0x00031f98

00017768 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17768:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1776a:	4604      	mov	r4, r0
   1776c:	b930      	cbnz	r0, 1777c <bt_id_read_public_addr+0x14>
		LOG_WRN("Invalid input parameters");
   1776e:	4818      	ldr	r0, [pc, #96]	; (177d0 <bt_id_read_public_addr+0x68>)
   17770:	2157      	movs	r1, #87	; 0x57
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17772:	f013 f9f9 	bl	2ab68 <z_log_minimal_printk>
		return 0U;
   17776:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17778:	b002      	add	sp, #8
   1777a:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1777c:	aa01      	add	r2, sp, #4
   1777e:	2100      	movs	r1, #0
   17780:	f241 0009 	movw	r0, #4105	; 0x1009
   17784:	f7fe fda6 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   17788:	4606      	mov	r6, r0
   1778a:	b110      	cbz	r0, 17792 <bt_id_read_public_addr+0x2a>
		LOG_WRN("Failed to read public address");
   1778c:	4811      	ldr	r0, [pc, #68]	; (177d4 <bt_id_read_public_addr+0x6c>)
   1778e:	2157      	movs	r1, #87	; 0x57
   17790:	e7ef      	b.n	17772 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   17792:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17794:	4910      	ldr	r1, [pc, #64]	; (177d8 <bt_id_read_public_addr+0x70>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17796:	68dd      	ldr	r5, [r3, #12]
   17798:	3501      	adds	r5, #1
   1779a:	2206      	movs	r2, #6
   1779c:	4628      	mov	r0, r5
   1779e:	f014 f984 	bl	2baaa <memcmp>
   177a2:	b918      	cbnz	r0, 177ac <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   177a4:	9801      	ldr	r0, [sp, #4]
   177a6:	f007 fb7d 	bl	1eea4 <net_buf_unref>
		return 0U;
   177aa:	e7e4      	b.n	17776 <bt_id_read_public_addr+0xe>
   177ac:	490b      	ldr	r1, [pc, #44]	; (177dc <bt_id_read_public_addr+0x74>)
   177ae:	2206      	movs	r2, #6
   177b0:	4628      	mov	r0, r5
   177b2:	f014 f97a 	bl	2baaa <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   177b6:	2800      	cmp	r0, #0
   177b8:	d0f4      	beq.n	177a4 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   177ba:	2206      	movs	r2, #6
   177bc:	4629      	mov	r1, r5
   177be:	1c60      	adds	r0, r4, #1
   177c0:	f014 f99a 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   177c4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   177c6:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   177c8:	f007 fb6c 	bl	1eea4 <net_buf_unref>
	return 1U;
   177cc:	2001      	movs	r0, #1
   177ce:	e7d3      	b.n	17778 <bt_id_read_public_addr+0x10>
   177d0:	00031fcb 	.word	0x00031fcb
   177d4:	00031fe9 	.word	0x00031fe9
   177d8:	000313e7 	.word	0x000313e7
   177dc:	000313e1 	.word	0x000313e1

000177e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   177e0:	b510      	push	{r4, lr}
   177e2:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   177e4:	4668      	mov	r0, sp
   177e6:	f7ff ffbf 	bl	17768 <bt_id_read_public_addr>
   177ea:	4c1a      	ldr	r4, [pc, #104]	; (17854 <bt_setup_public_id_addr+0x74>)
   177ec:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   177ee:	b308      	cbz	r0, 17834 <bt_setup_public_id_addr+0x54>
	memset(ir, 0, 16);
   177f0:	2210      	movs	r2, #16
   177f2:	2100      	movs	r1, #0
   177f4:	a806      	add	r0, sp, #24
   177f6:	f014 f98a 	bl	2bb0e <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   177fa:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   177fe:	079b      	lsls	r3, r3, #30
   17800:	d50a      	bpl.n	17818 <bt_setup_public_id_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   17802:	aa02      	add	r2, sp, #8
   17804:	2100      	movs	r1, #0
   17806:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   1780a:	f7fe fd63 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1780e:	b198      	cbz	r0, 17838 <bt_setup_public_id_addr+0x58>
		LOG_WRN("Failed to read identity root");
   17810:	4811      	ldr	r0, [pc, #68]	; (17858 <bt_setup_public_id_addr+0x78>)
   17812:	2157      	movs	r1, #87	; 0x57
   17814:	f013 f9a8 	bl	2ab68 <z_log_minimal_printk>
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   17818:	a902      	add	r1, sp, #8
   1781a:	a806      	add	r0, sp, #24
   1781c:	f016 f9af 	bl	2db7e <bt_smp_irk_get>
   17820:	b1a8      	cbz	r0, 1784e <bt_setup_public_id_addr+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17822:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   17826:	f7ff fca7 	bl	17178 <atomic_or.constprop.0.isra.0>
	uint8_t *irk = NULL;
   1782a:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1782c:	4669      	mov	r1, sp
   1782e:	2000      	movs	r0, #0
   17830:	f7ff fc44 	bl	170bc <id_create>
}
   17834:	b00a      	add	sp, #40	; 0x28
   17836:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   17838:	9b02      	ldr	r3, [sp, #8]
	memcpy(ir, rp->ir, 16);
   1783a:	68d9      	ldr	r1, [r3, #12]
   1783c:	2210      	movs	r2, #16
   1783e:	3101      	adds	r1, #1
   17840:	a806      	add	r0, sp, #24
   17842:	f014 f959 	bl	2baf8 <memcpy>
	net_buf_unref(rsp);
   17846:	9802      	ldr	r0, [sp, #8]
   17848:	f007 fb2c 	bl	1eea4 <net_buf_unref>
   1784c:	e7e4      	b.n	17818 <bt_setup_public_id_addr+0x38>
			irk = ir_irk;
   1784e:	aa02      	add	r2, sp, #8
   17850:	e7ec      	b.n	1782c <bt_setup_public_id_addr+0x4c>
   17852:	bf00      	nop
   17854:	20000378 	.word	0x20000378
   17858:	0003200c 	.word	0x0003200c

0001785c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1785c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17860:	4b1c      	ldr	r3, [pc, #112]	; (178d4 <bt_read_static_addr+0x78>)
   17862:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   17866:	07db      	lsls	r3, r3, #31
{
   17868:	4607      	mov	r7, r0
   1786a:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1786c:	d408      	bmi.n	17880 <bt_read_static_addr+0x24>
		LOG_WRN("Read Static Addresses command not available");
   1786e:	481a      	ldr	r0, [pc, #104]	; (178d8 <bt_read_static_addr+0x7c>)
   17870:	2157      	movs	r1, #87	; 0x57
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   17872:	f013 f979 	bl	2ab68 <z_log_minimal_printk>
		return 0;
   17876:	2500      	movs	r5, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   17878:	4628      	mov	r0, r5
   1787a:	b002      	add	sp, #8
   1787c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17880:	aa01      	add	r2, sp, #4
   17882:	2100      	movs	r1, #0
   17884:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17888:	f7fe fd24 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   1788c:	4604      	mov	r4, r0
   1788e:	b110      	cbz	r0, 17896 <bt_read_static_addr+0x3a>
		LOG_WRN("Failed to read static addresses");
   17890:	4812      	ldr	r0, [pc, #72]	; (178dc <bt_read_static_addr+0x80>)
   17892:	2157      	movs	r1, #87	; 0x57
   17894:	e7ed      	b.n	17872 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   17896:	9b01      	ldr	r3, [sp, #4]
   17898:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1789a:	7875      	ldrb	r5, [r6, #1]
   1789c:	4545      	cmp	r5, r8
   1789e:	bf28      	it	cs
   178a0:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   178a2:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   178a4:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   178a8:	42a5      	cmp	r5, r4
   178aa:	dc09      	bgt.n	178c0 <bt_read_static_addr+0x64>
	net_buf_unref(rsp);
   178ac:	9801      	ldr	r0, [sp, #4]
   178ae:	f007 faf9 	bl	1eea4 <net_buf_unref>
	if (!cnt) {
   178b2:	2d00      	cmp	r5, #0
   178b4:	d1e0      	bne.n	17878 <bt_read_static_addr+0x1c>
		LOG_WRN("No static addresses stored in controller");
   178b6:	480a      	ldr	r0, [pc, #40]	; (178e0 <bt_read_static_addr+0x84>)
   178b8:	2157      	movs	r1, #87	; 0x57
   178ba:	f013 f955 	bl	2ab68 <z_log_minimal_printk>
   178be:	e7db      	b.n	17878 <bt_read_static_addr+0x1c>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   178c0:	4631      	mov	r1, r6
   178c2:	fb08 7004 	mla	r0, r8, r4, r7
   178c6:	2216      	movs	r2, #22
   178c8:	f014 f916 	bl	2baf8 <memcpy>
	for (i = 0; i < cnt; i++) {
   178cc:	3401      	adds	r4, #1
   178ce:	3616      	adds	r6, #22
   178d0:	e7ea      	b.n	178a8 <bt_read_static_addr+0x4c>
   178d2:	bf00      	nop
   178d4:	20000378 	.word	0x20000378
   178d8:	0003202e 	.word	0x0003202e
   178dc:	0003205f 	.word	0x0003205f
   178e0:	00032084 	.word	0x00032084

000178e4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   178e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   178e8:	4e21      	ldr	r6, [pc, #132]	; (17970 <bt_setup_random_id_addr+0x8c>)
   178ea:	79f4      	ldrb	r4, [r6, #7]
{
   178ec:	b08d      	sub	sp, #52	; 0x34
	if (!bt_dev.id_count) {
   178ee:	b92c      	cbnz	r4, 178fc <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   178f0:	2101      	movs	r1, #1
   178f2:	a806      	add	r0, sp, #24
   178f4:	f7ff ffb2 	bl	1785c <bt_read_static_addr>
   178f8:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   178fa:	bb80      	cbnz	r0, 1795e <bt_setup_random_id_addr+0x7a>
   178fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   17900:	f7ff fc3a 	bl	17178 <atomic_or.constprop.0.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   17904:	2100      	movs	r1, #0
   17906:	4608      	mov	r0, r1
}
   17908:	b00d      	add	sp, #52	; 0x34
   1790a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_id_create(NULL, NULL);
   1790e:	f7ff bed5 	b.w	176bc <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   17912:	fb09 f805 	mul.w	r8, r9, r5
   17916:	f108 0006 	add.w	r0, r8, #6
   1791a:	ab06      	add	r3, sp, #24
   1791c:	a902      	add	r1, sp, #8
   1791e:	4418      	add	r0, r3
   17920:	f016 f92d 	bl	2db7e <bt_smp_irk_get>
   17924:	b1c8      	cbz	r0, 1795a <bt_setup_random_id_addr+0x76>
   17926:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1792a:	f7ff fc25 	bl	17178 <atomic_or.constprop.0.isra.0>
				uint8_t *irk = NULL;
   1792e:	2700      	movs	r7, #0
   17930:	ab06      	add	r3, sp, #24
   17932:	eb03 0108 	add.w	r1, r3, r8
   17936:	2206      	movs	r2, #6
   17938:	f10d 0001 	add.w	r0, sp, #1
   1793c:	f014 f8dc 	bl	2baf8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17940:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   17942:	463a      	mov	r2, r7
   17944:	4669      	mov	r1, sp
   17946:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   17948:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1794c:	f7ff fbb6 	bl	170bc <id_create>
				if (err) {
   17950:	3401      	adds	r4, #1
   17952:	b130      	cbz	r0, 17962 <bt_setup_random_id_addr+0x7e>
}
   17954:	b00d      	add	sp, #52	; 0x34
   17956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						irk = ir_irk;
   1795a:	af02      	add	r7, sp, #8
   1795c:	e7e8      	b.n	17930 <bt_setup_random_id_addr+0x4c>
   1795e:	f04f 0916 	mov.w	r9, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17962:	79f3      	ldrb	r3, [r6, #7]
   17964:	b2e5      	uxtb	r5, r4
   17966:	42ab      	cmp	r3, r5
   17968:	d8d3      	bhi.n	17912 <bt_setup_random_id_addr+0x2e>
			return 0;
   1796a:	2000      	movs	r0, #0
   1796c:	e7f2      	b.n	17954 <bt_setup_random_id_addr+0x70>
   1796e:	bf00      	nop
   17970:	20000378 	.word	0x20000378

00017974 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   17974:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   17976:	460c      	mov	r4, r1
   17978:	b311      	cbz	r1, 179c0 <bt_id_set_create_conn_own_addr+0x4c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		if (use_filter || rpa_timeout_valid_check()) {
   1797a:	b120      	cbz	r0, 17986 <bt_id_set_create_conn_own_addr+0x12>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1797c:	2000      	movs	r0, #0
   1797e:	f7ff fc95 	bl	172ac <bt_id_set_private_addr>
			if (err) {
   17982:	b190      	cbz	r0, 179aa <bt_id_set_create_conn_own_addr+0x36>

		*own_addr_type = addr->type;
	}

	return 0;
}
   17984:	bd10      	pop	{r4, pc}
	return z_timeout_remaining(&dwork->timeout);
   17986:	4810      	ldr	r0, [pc, #64]	; (179c8 <bt_id_set_create_conn_own_addr+0x54>)
   17988:	f00f f890 	bl	26aac <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1798c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17990:	fba0 0203 	umull	r0, r2, r0, r3
   17994:	0bc3      	lsrs	r3, r0, #15
   17996:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	return remaining_ms > (10 * bt_dev.create_param.timeout);
   1799a:	4a0c      	ldr	r2, [pc, #48]	; (179cc <bt_id_set_create_conn_own_addr+0x58>)
   1799c:	8a92      	ldrh	r2, [r2, #20]
   1799e:	210a      	movs	r1, #10
   179a0:	434a      	muls	r2, r1
		if (use_filter || rpa_timeout_valid_check()) {
   179a2:	429a      	cmp	r2, r3
   179a4:	d3ea      	bcc.n	1797c <bt_id_set_create_conn_own_addr+0x8>
			le_force_rpa_timeout();
   179a6:	f7ff fcc9 	bl	1733c <le_force_rpa_timeout>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   179aa:	4b08      	ldr	r3, [pc, #32]	; (179cc <bt_id_set_create_conn_own_addr+0x58>)
   179ac:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   179b0:	f013 0f40 	tst.w	r3, #64	; 0x40
   179b4:	bf0c      	ite	eq
   179b6:	2301      	moveq	r3, #1
   179b8:	2303      	movne	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
   179ba:	7023      	strb	r3, [r4, #0]
	return 0;
   179bc:	2000      	movs	r0, #0
   179be:	e7e1      	b.n	17984 <bt_id_set_create_conn_own_addr+0x10>
		return -EINVAL;
   179c0:	f06f 0015 	mvn.w	r0, #21
   179c4:	e7de      	b.n	17984 <bt_id_set_create_conn_own_addr+0x10>
   179c6:	bf00      	nop
   179c8:	20000500 	.word	0x20000500
   179cc:	20000378 	.word	0x20000378

000179d0 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   179d0:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   179d2:	460c      	mov	r4, r1
   179d4:	b169      	cbz	r1, 179f2 <bt_id_set_scan_own_addr+0x22>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
   179d6:	2000      	movs	r0, #0
   179d8:	f7ff fc68 	bl	172ac <bt_id_set_private_addr>
		if (err) {
   179dc:	b940      	cbnz	r0, 179f0 <bt_id_set_scan_own_addr+0x20>
			return err;
		}

		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   179de:	4b06      	ldr	r3, [pc, #24]	; (179f8 <bt_id_set_scan_own_addr+0x28>)
   179e0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   179e4:	f013 0f40 	tst.w	r3, #64	; 0x40
   179e8:	bf0c      	ite	eq
   179ea:	2301      	moveq	r3, #1
   179ec:	2303      	movne	r3, #3
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
   179ee:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   179f0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   179f2:	f06f 0015 	mvn.w	r0, #21
   179f6:	e7fb      	b.n	179f0 <bt_id_set_scan_own_addr+0x20>
   179f8:	20000378 	.word	0x20000378

000179fc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   179fc:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   179fe:	4903      	ldr	r1, [pc, #12]	; (17a0c <bt_id_init+0x10>)
   17a00:	4803      	ldr	r0, [pc, #12]	; (17a10 <bt_id_init+0x14>)
   17a02:	f00d fd25 	bl	25450 <k_work_init_delayable>
#endif

	return 0;
}
   17a06:	2000      	movs	r0, #0
   17a08:	bd08      	pop	{r3, pc}
   17a0a:	bf00      	nop
   17a0c:	00017371 	.word	0x00017371
   17a10:	200004f0 	.word	0x200004f0

00017a14 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   17a14:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   17a16:	2102      	movs	r1, #2
{
   17a18:	b087      	sub	sp, #28
   17a1a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   17a1c:	f242 000c 	movw	r0, #8204	; 0x200c
   17a20:	f7fe fc0e 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   17a24:	4605      	mov	r5, r0
   17a26:	b318      	cbz	r0, 17a70 <bt_le_scan_set_enable_legacy+0x5c>
   17a28:	2102      	movs	r1, #2
   17a2a:	300c      	adds	r0, #12
   17a2c:	f007 fb40 	bl	1f0b0 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   17a30:	2c01      	cmp	r4, #1
   17a32:	d11b      	bne.n	17a6c <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17a34:	f3bf 8f5b 	dmb	ish
   17a38:	4b0f      	ldr	r3, [pc, #60]	; (17a78 <bt_le_scan_set_enable_legacy+0x64>)
   17a3a:	681b      	ldr	r3, [r3, #0]
   17a3c:	f3bf 8f5b 	dmb	ish
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   17a40:	f3c3 2340 	ubfx	r3, r3, #9, #1
   17a44:	7043      	strb	r3, [r0, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17a46:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   17a48:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17a4a:	425c      	negs	r4, r3
   17a4c:	415c      	adcs	r4, r3
   17a4e:	4a0a      	ldr	r2, [pc, #40]	; (17a78 <bt_le_scan_set_enable_legacy+0x64>)
   17a50:	9400      	str	r4, [sp, #0]
   17a52:	a903      	add	r1, sp, #12
   17a54:	4628      	mov	r0, r5
   17a56:	2306      	movs	r3, #6
   17a58:	f7fe fbe0 	bl	1621c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   17a5c:	2200      	movs	r2, #0
   17a5e:	4629      	mov	r1, r5
   17a60:	f242 000c 	movw	r0, #8204	; 0x200c
   17a64:	f7fe fc36 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   17a68:	b007      	add	sp, #28
   17a6a:	bd30      	pop	{r4, r5, pc}
   17a6c:	2300      	movs	r3, #0
   17a6e:	e7e9      	b.n	17a44 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   17a70:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a74:	e7f8      	b.n	17a68 <bt_le_scan_set_enable_legacy+0x54>
   17a76:	bf00      	nop
   17a78:	20000444 	.word	0x20000444

00017a7c <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   17a7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17a7e:	4605      	mov	r5, r0
   17a80:	4614      	mov	r4, r2
   17a82:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   17a84:	2207      	movs	r2, #7
   17a86:	2100      	movs	r1, #0
   17a88:	4668      	mov	r0, sp
   17a8a:	f014 f840 	bl	2bb0e <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   17a8e:	2300      	movs	r3, #0
   17a90:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   17a94:	1e6b      	subs	r3, r5, #1
   17a96:	4258      	negs	r0, r3
   17a98:	f10d 0105 	add.w	r1, sp, #5
   17a9c:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   17a9e:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   17aa2:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   17aa6:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   17aaa:	f7ff ff91 	bl	179d0 <bt_id_set_scan_own_addr>
	if (err) {
   17aae:	4604      	mov	r4, r0
   17ab0:	bb38      	cbnz	r0, 17b02 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   17ab2:	2107      	movs	r1, #7
   17ab4:	f242 000b 	movw	r0, #8203	; 0x200b
   17ab8:	f7fe fbc2 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   17abc:	4606      	mov	r6, r0
   17abe:	b348      	cbz	r0, 17b14 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17ac0:	2207      	movs	r2, #7
   17ac2:	4669      	mov	r1, sp
   17ac4:	300c      	adds	r0, #12
   17ac6:	f016 fa2f 	bl	2df28 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   17aca:	4622      	mov	r2, r4
   17acc:	4631      	mov	r1, r6
   17ace:	f242 000b 	movw	r0, #8203	; 0x200b
   17ad2:	f7fe fbff 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   17ad6:	4604      	mov	r4, r0
   17ad8:	b998      	cbnz	r0, 17b02 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   17ada:	2001      	movs	r0, #1
   17adc:	f7ff ff9a 	bl	17a14 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   17ae0:	4604      	mov	r4, r0
   17ae2:	b970      	cbnz	r0, 17b02 <start_le_scan_legacy+0x86>
	if (val) {
   17ae4:	2d01      	cmp	r5, #1
   17ae6:	d10f      	bne.n	17b08 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17ae8:	f3bf 8f5b 	dmb	ish
   17aec:	4b0b      	ldr	r3, [pc, #44]	; (17b1c <start_le_scan_legacy+0xa0>)
   17aee:	e853 1f00 	ldrex	r1, [r3]
   17af2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   17af6:	e843 1200 	strex	r2, r1, [r3]
   17afa:	2a00      	cmp	r2, #0
   17afc:	d1f7      	bne.n	17aee <start_le_scan_legacy+0x72>
   17afe:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   17b02:	4620      	mov	r0, r4
   17b04:	b002      	add	sp, #8
   17b06:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b08:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17b0c:	4803      	ldr	r0, [pc, #12]	; (17b1c <start_le_scan_legacy+0xa0>)
   17b0e:	f014 fa13 	bl	2bf38 <atomic_and>
   17b12:	e7f6      	b.n	17b02 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   17b14:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17b18:	e7f3      	b.n	17b02 <start_le_scan_legacy+0x86>
   17b1a:	bf00      	nop
   17b1c:	20000444 	.word	0x20000444

00017b20 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   17b20:	4b01      	ldr	r3, [pc, #4]	; (17b28 <bt_scan_reset+0x8>)
   17b22:	2200      	movs	r2, #0
   17b24:	601a      	str	r2, [r3, #0]
}
   17b26:	4770      	bx	lr
   17b28:	20003320 	.word	0x20003320

00017b2c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   17b2c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b2e:	4d21      	ldr	r5, [pc, #132]	; (17bb4 <bt_le_scan_update+0x88>)
   17b30:	f3bf 8f5b 	dmb	ish
   17b34:	682b      	ldr	r3, [r5, #0]
   17b36:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17b3a:	061a      	lsls	r2, r3, #24
{
   17b3c:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17b3e:	f3c3 10c0 	ubfx	r0, r3, #7, #1
   17b42:	d434      	bmi.n	17bae <bt_le_scan_update+0x82>
   17b44:	f3bf 8f5b 	dmb	ish
   17b48:	682b      	ldr	r3, [r5, #0]
   17b4a:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17b4e:	065b      	lsls	r3, r3, #25
   17b50:	d426      	bmi.n	17ba0 <bt_le_scan_update+0x74>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17b52:	2100      	movs	r1, #0
   17b54:	2206      	movs	r2, #6
   17b56:	4608      	mov	r0, r1
   17b58:	f001 f89c 	bl	18c94 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   17b5c:	4604      	mov	r4, r0
   17b5e:	bb20      	cbnz	r0, 17baa <bt_le_scan_update+0x7e>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17b60:	2202      	movs	r2, #2
   17b62:	4601      	mov	r1, r0
   17b64:	f001 f896 	bl	18c94 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   17b68:	b308      	cbz	r0, 17bae <bt_le_scan_update+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b6a:	f3bf 8f5b 	dmb	ish
   17b6e:	e855 3f00 	ldrex	r3, [r5]
   17b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17b76:	e845 3200 	strex	r2, r3, [r5]
   17b7a:	2a00      	cmp	r2, #0
   17b7c:	d1f7      	bne.n	17b6e <bt_le_scan_update+0x42>
   17b7e:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   17b82:	f000 fda7 	bl	186d4 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   17b86:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   17b88:	4620      	mov	r0, r4
   17b8a:	bf08      	it	eq
   17b8c:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   17b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   17b92:	bf16      	itet	ne
   17b94:	2230      	movne	r2, #48	; 0x30
   17b96:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   17b9a:	2160      	movne	r1, #96	; 0x60
   17b9c:	f7ff bf6e 	b.w	17a7c <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   17ba0:	f7ff ff38 	bl	17a14 <bt_le_scan_set_enable_legacy>
		if (err) {
   17ba4:	2800      	cmp	r0, #0
   17ba6:	d0d4      	beq.n	17b52 <bt_le_scan_update+0x26>
}
   17ba8:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
   17baa:	f000 fd93 	bl	186d4 <bt_conn_unref>
		return 0;
   17bae:	2000      	movs	r0, #0
   17bb0:	e7fa      	b.n	17ba8 <bt_le_scan_update+0x7c>
   17bb2:	bf00      	nop
   17bb4:	20000444 	.word	0x20000444

00017bb8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   17bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   17bbc:	f100 060c 	add.w	r6, r0, #12
   17bc0:	b08b      	sub	sp, #44	; 0x2c
   17bc2:	4604      	mov	r4, r0
   17bc4:	4630      	mov	r0, r6
   17bc6:	f016 f993 	bl	2def0 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   17bca:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 17d98 <bt_hci_le_adv_report+0x1e0>
   17bce:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   17bd0:	f1b8 0f00 	cmp.w	r8, #0
   17bd4:	d102      	bne.n	17bdc <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   17bd6:	b00b      	add	sp, #44	; 0x2c
   17bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   17bdc:	8a23      	ldrh	r3, [r4, #16]
   17bde:	2b08      	cmp	r3, #8
   17be0:	d806      	bhi.n	17bf0 <bt_hci_le_adv_report+0x38>
			LOG_ERR("Unexpected end of buffer");
   17be2:	486e      	ldr	r0, [pc, #440]	; (17d9c <bt_hci_le_adv_report+0x1e4>)
   17be4:	2145      	movs	r1, #69	; 0x45
}
   17be6:	b00b      	add	sp, #44	; 0x2c
   17be8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Unexpected end of buffer");
   17bec:	f012 bfbc 	b.w	2ab68 <z_log_minimal_printk>
	return net_buf_simple_pull_mem(&buf->b, len);
   17bf0:	2109      	movs	r1, #9
   17bf2:	4630      	mov	r0, r6
   17bf4:	f007 fa42 	bl	1f07c <net_buf_simple_pull_mem>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   17bf8:	2301      	movs	r3, #1
   17bfa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   17bfe:	237f      	movs	r3, #127	; 0x7f
   17c00:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   17c04:	7a03      	ldrb	r3, [r0, #8]
   17c06:	4403      	add	r3, r0
   17c08:	4605      	mov	r5, r0
   17c0a:	7a5b      	ldrb	r3, [r3, #9]
   17c0c:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   17c10:	23ff      	movs	r3, #255	; 0xff
   17c12:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   17c16:	2300      	movs	r3, #0
   17c18:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   17c1c:	7802      	ldrb	r2, [r0, #0]
   17c1e:	f88d 201f 	strb.w	r2, [sp, #31]
	switch (evt_type) {
   17c22:	2a04      	cmp	r2, #4
   17c24:	bf9c      	itt	ls
   17c26:	4b5e      	ldrls	r3, [pc, #376]	; (17da0 <bt_hci_le_adv_report+0x1e8>)
   17c28:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   17c2a:	f8ad 3020 	strh.w	r3, [sp, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17c2e:	7a03      	ldrb	r3, [r0, #8]
   17c30:	9301      	str	r3, [sp, #4]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17c32:	7843      	ldrb	r3, [r0, #1]
   17c34:	1e9a      	subs	r2, r3, #2
   17c36:	2a01      	cmp	r2, #1
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17c38:	f100 0901 	add.w	r9, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17c3c:	d84e      	bhi.n	17cdc <bt_hci_le_adv_report+0x124>
	memcpy(dst, src, sizeof(*dst));
   17c3e:	2207      	movs	r2, #7
   17c40:	4649      	mov	r1, r9
   17c42:	a804      	add	r0, sp, #16
   17c44:	f013 ff58 	bl	2baf8 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17c48:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17c4c:	3b02      	subs	r3, #2
   17c4e:	f88d 3010 	strb.w	r3, [sp, #16]
	if (scan_dev_found_cb) {
   17c52:	f8da 3000 	ldr.w	r3, [sl]
   17c56:	b1a3      	cbz	r3, 17c82 <bt_hci_le_adv_report+0xca>
	state->offset = net_buf_simple_headroom(buf);
   17c58:	4630      	mov	r0, r6
   17c5a:	f016 f959 	bl	2df10 <net_buf_simple_headroom>
		buf->len = len;
   17c5e:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   17c60:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17c62:	f89d 201f 	ldrb.w	r2, [sp, #31]
		buf->len = len;
   17c66:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   17c68:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17c6a:	4633      	mov	r3, r6
   17c6c:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   17c70:	f8da c000 	ldr.w	ip, [sl]
   17c74:	a804      	add	r0, sp, #16
   17c76:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   17c78:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17c7a:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17c7c:	fa13 f38b 	uxtah	r3, r3, fp
   17c80:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   17c82:	ab04      	add	r3, sp, #16
   17c84:	9306      	str	r3, [sp, #24]
	return list->head;
   17c86:	4b47      	ldr	r3, [pc, #284]	; (17da4 <bt_hci_le_adv_report+0x1ec>)
   17c88:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c8a:	2b00      	cmp	r3, #0
   17c8c:	d037      	beq.n	17cfe <bt_hci_le_adv_report+0x146>
	return node->next;
   17c8e:	681a      	ldr	r2, [r3, #0]
   17c90:	b102      	cbz	r2, 17c94 <bt_hci_le_adv_report+0xdc>
   17c92:	3a08      	subs	r2, #8
		if (listener->recv) {
   17c94:	f853 1c08 	ldr.w	r1, [r3, #-8]
   17c98:	b1b9      	cbz	r1, 17cca <bt_hci_le_adv_report+0x112>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c9a:	4617      	mov	r7, r2
   17c9c:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   17ca0:	4630      	mov	r0, r6
   17ca2:	9203      	str	r2, [sp, #12]
   17ca4:	f016 f934 	bl	2df10 <net_buf_simple_headroom>
	state->len = buf->len;
   17ca8:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   17caa:	9a03      	ldr	r2, [sp, #12]
   17cac:	9302      	str	r3, [sp, #8]
			buf->len = len;
   17cae:	9b01      	ldr	r3, [sp, #4]
   17cb0:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   17cb2:	6812      	ldr	r2, [r2, #0]
	state->offset = net_buf_simple_headroom(buf);
   17cb4:	4683      	mov	fp, r0
   17cb6:	4631      	mov	r1, r6
   17cb8:	a806      	add	r0, sp, #24
   17cba:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   17cbc:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   17cbe:	9b02      	ldr	r3, [sp, #8]
   17cc0:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17cc2:	fa12 f28b 	uxtah	r2, r2, fp
   17cc6:	60e2      	str	r2, [r4, #12]
}
   17cc8:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17cca:	b1c2      	cbz	r2, 17cfe <bt_hci_le_adv_report+0x146>
   17ccc:	6897      	ldr	r7, [r2, #8]
   17cce:	6813      	ldr	r3, [r2, #0]
   17cd0:	b19f      	cbz	r7, 17cfa <bt_hci_le_adv_report+0x142>
   17cd2:	3f08      	subs	r7, #8
		if (listener->recv) {
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	d1e3      	bne.n	17ca0 <bt_hci_le_adv_report+0xe8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17cd8:	463a      	mov	r2, r7
   17cda:	e7f7      	b.n	17ccc <bt_hci_le_adv_report+0x114>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   17cdc:	2bff      	cmp	r3, #255	; 0xff
   17cde:	d105      	bne.n	17cec <bt_hci_le_adv_report+0x134>
   17ce0:	4931      	ldr	r1, [pc, #196]	; (17da8 <bt_hci_le_adv_report+0x1f0>)
   17ce2:	2207      	movs	r2, #7
   17ce4:	a804      	add	r0, sp, #16
   17ce6:	f013 ff07 	bl	2baf8 <memcpy>
}
   17cea:	e7b2      	b.n	17c52 <bt_hci_le_adv_report+0x9a>
		bt_addr_le_copy(&id_addr,
   17cec:	4649      	mov	r1, r9
   17cee:	2000      	movs	r0, #0
   17cf0:	f014 f904 	bl	2befc <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   17cf4:	2207      	movs	r2, #7
   17cf6:	4601      	mov	r1, r0
   17cf8:	e7f4      	b.n	17ce4 <bt_hci_le_adv_report+0x12c>
		if (listener->recv) {
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d1d0      	bne.n	17ca0 <bt_hci_le_adv_report+0xe8>
	info->addr = NULL;
   17cfe:	2300      	movs	r3, #0
   17d00:	9306      	str	r3, [sp, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d02:	4b2a      	ldr	r3, [pc, #168]	; (17dac <bt_hci_le_adv_report+0x1f4>)
	check_pending_conn(&id_addr, addr, info->adv_props);
   17d04:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   17d08:	f3bf 8f5b 	dmb	ish
   17d0c:	681a      	ldr	r2, [r3, #0]
   17d0e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17d12:	0610      	lsls	r0, r2, #24
   17d14:	f3c2 1bc0 	ubfx	fp, r2, #7, #1
   17d18:	d421      	bmi.n	17d5e <bt_hci_le_adv_report+0x1a6>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   17d1a:	07ca      	lsls	r2, r1, #31
   17d1c:	d51f      	bpl.n	17d5e <bt_hci_le_adv_report+0x1a6>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   17d1e:	2202      	movs	r2, #2
   17d20:	a904      	add	r1, sp, #16
   17d22:	4658      	mov	r0, fp
   17d24:	f000 ffb6 	bl	18c94 <bt_conn_lookup_state_le>
	if (!conn) {
   17d28:	4607      	mov	r7, r0
   17d2a:	b1c0      	cbz	r0, 17d5e <bt_hci_le_adv_report+0x1a6>
   17d2c:	f3bf 8f5b 	dmb	ish
   17d30:	4b1e      	ldr	r3, [pc, #120]	; (17dac <bt_hci_le_adv_report+0x1f4>)
   17d32:	681b      	ldr	r3, [r3, #0]
   17d34:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17d38:	065b      	lsls	r3, r3, #25
   17d3a:	d41a      	bmi.n	17d72 <bt_hci_le_adv_report+0x1ba>
   17d3c:	2207      	movs	r2, #7
   17d3e:	4649      	mov	r1, r9
   17d40:	f107 009e 	add.w	r0, r7, #158	; 0x9e
   17d44:	f013 fed8 	bl	2baf8 <memcpy>
	if (bt_le_create_conn(conn)) {
   17d48:	4638      	mov	r0, r7
   17d4a:	f7fe fb6f 	bl	1642c <bt_le_create_conn>
   17d4e:	b9a8      	cbnz	r0, 17d7c <bt_hci_le_adv_report+0x1c4>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   17d50:	4638      	mov	r0, r7
   17d52:	2106      	movs	r1, #6
   17d54:	f000 fce6 	bl	18724 <bt_conn_set_state>
	bt_conn_unref(conn);
   17d58:	4638      	mov	r0, r7
   17d5a:	f000 fcbb 	bl	186d4 <bt_conn_unref>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   17d5e:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   17d60:	4630      	mov	r0, r6
   17d62:	3101      	adds	r1, #1
   17d64:	f108 38ff 	add.w	r8, r8, #4294967295
   17d68:	f007 f96e 	bl	1f048 <net_buf_simple_pull>
   17d6c:	fa5f f888 	uxtb.w	r8, r8
   17d70:	e72e      	b.n	17bd0 <bt_hci_le_adv_report+0x18>
	return bt_le_scan_set_enable_legacy(enable);
   17d72:	4658      	mov	r0, fp
   17d74:	f7ff fe4e 	bl	17a14 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17d78:	2800      	cmp	r0, #0
   17d7a:	d0df      	beq.n	17d3c <bt_hci_le_adv_report+0x184>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   17d7c:	231f      	movs	r3, #31
   17d7e:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d80:	2100      	movs	r1, #0
   17d82:	4638      	mov	r0, r7
   17d84:	f000 fcce 	bl	18724 <bt_conn_set_state>
	bt_conn_unref(conn);
   17d88:	4638      	mov	r0, r7
   17d8a:	f000 fca3 	bl	186d4 <bt_conn_unref>
	bt_le_scan_update(false);
   17d8e:	2000      	movs	r0, #0
   17d90:	f7ff fecc 	bl	17b2c <bt_le_scan_update>
   17d94:	e7e3      	b.n	17d5e <bt_hci_le_adv_report+0x1a6>
   17d96:	bf00      	nop
   17d98:	20003320 	.word	0x20003320
   17d9c:	000320b8 	.word	0x000320b8
   17da0:	000320d6 	.word	0x000320d6
   17da4:	20003318 	.word	0x20003318
   17da8:	000313da 	.word	0x000313da
   17dac:	20000444 	.word	0x20000444

00017db0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   17db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17db2:	4e3d      	ldr	r6, [pc, #244]	; (17ea8 <bt_le_scan_start+0xf8>)
   17db4:	f3bf 8f5b 	dmb	ish
   17db8:	6833      	ldr	r3, [r6, #0]
   17dba:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17dbe:	f013 0f04 	tst.w	r3, #4
{
   17dc2:	4605      	mov	r5, r0
   17dc4:	460f      	mov	r7, r1
   17dc6:	4634      	mov	r4, r6
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17dc8:	d06a      	beq.n	17ea0 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   17dca:	7802      	ldrb	r2, [r0, #0]
   17dcc:	2a01      	cmp	r2, #1
   17dce:	d903      	bls.n	17dd8 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   17dd0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   17dd4:	4620      	mov	r0, r4
   17dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   17dd8:	6843      	ldr	r3, [r0, #4]
   17dda:	2b0f      	cmp	r3, #15
   17ddc:	d8f8      	bhi.n	17dd0 <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   17dde:	8900      	ldrh	r0, [r0, #8]
   17de0:	1f03      	subs	r3, r0, #4
   17de2:	b29b      	uxth	r3, r3
   17de4:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
   17de8:	4563      	cmp	r3, ip
   17dea:	d8f1      	bhi.n	17dd0 <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
   17dec:	8969      	ldrh	r1, [r5, #10]
   17dee:	1f0b      	subs	r3, r1, #4
   17df0:	b29b      	uxth	r3, r3
   17df2:	4563      	cmp	r3, ip
   17df4:	d8ec      	bhi.n	17dd0 <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
   17df6:	4288      	cmp	r0, r1
   17df8:	d3ea      	bcc.n	17dd0 <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
   17dfa:	b98a      	cbnz	r2, 17e20 <bt_le_scan_start+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17dfc:	f3bf 8f5b 	dmb	ish
   17e00:	e854 0f00 	ldrex	r0, [r4]
   17e04:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   17e08:	e844 3200 	strex	r2, r3, [r4]
   17e0c:	2a00      	cmp	r2, #0
   17e0e:	d1f7      	bne.n	17e00 <bt_le_scan_start+0x50>
   17e10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   17e18:	d007      	beq.n	17e2a <bt_le_scan_start+0x7a>
		return -EALREADY;
   17e1a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17e1e:	e7d9      	b.n	17dd4 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   17e20:	f014 f878 	bl	2bf14 <bt_id_scan_random_addr_check>
   17e24:	2800      	cmp	r0, #0
   17e26:	d1e9      	bne.n	17dfc <bt_le_scan_start+0x4c>
   17e28:	e7d2      	b.n	17dd0 <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17e2a:	f3bf 8f5b 	dmb	ish
   17e2e:	6833      	ldr	r3, [r6, #0]
   17e30:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17e34:	065a      	lsls	r2, r3, #25
   17e36:	d509      	bpl.n	17e4c <bt_le_scan_start+0x9c>
	return bt_le_scan_set_enable_legacy(enable);
   17e38:	f7ff fdec 	bl	17a14 <bt_le_scan_set_enable_legacy>
		if (err) {
   17e3c:	4604      	mov	r4, r0
   17e3e:	b128      	cbz	r0, 17e4c <bt_le_scan_start+0x9c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e40:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17e44:	4818      	ldr	r0, [pc, #96]	; (17ea8 <bt_le_scan_start+0xf8>)
   17e46:	f014 f877 	bl	2bf38 <atomic_and>
		return err;
   17e4a:	e7c3      	b.n	17dd4 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   17e4c:	686b      	ldr	r3, [r5, #4]
	if (val) {
   17e4e:	07db      	lsls	r3, r3, #31
   17e50:	d515      	bpl.n	17e7e <bt_le_scan_start+0xce>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e52:	f3bf 8f5b 	dmb	ish
   17e56:	e856 3f00 	ldrex	r3, [r6]
   17e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17e5e:	e846 3200 	strex	r2, r3, [r6]
   17e62:	2a00      	cmp	r2, #0
   17e64:	d1f7      	bne.n	17e56 <bt_le_scan_start+0xa6>
   17e66:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   17e6a:	89ab      	ldrh	r3, [r5, #12]
   17e6c:	b16b      	cbz	r3, 17e8a <bt_le_scan_start+0xda>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e6e:	480e      	ldr	r0, [pc, #56]	; (17ea8 <bt_le_scan_start+0xf8>)
   17e70:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17e74:	f014 f860 	bl	2bf38 <atomic_and>
			return -ENOTSUP;
   17e78:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17e7c:	e7aa      	b.n	17dd4 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e7e:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17e82:	4809      	ldr	r0, [pc, #36]	; (17ea8 <bt_le_scan_start+0xf8>)
   17e84:	f014 f858 	bl	2bf38 <atomic_and>
   17e88:	e7ef      	b.n	17e6a <bt_le_scan_start+0xba>
		err = start_le_scan_legacy(param->type, param->interval,
   17e8a:	896a      	ldrh	r2, [r5, #10]
   17e8c:	8929      	ldrh	r1, [r5, #8]
   17e8e:	7828      	ldrb	r0, [r5, #0]
   17e90:	f7ff fdf4 	bl	17a7c <start_le_scan_legacy>
	if (err) {
   17e94:	4604      	mov	r4, r0
   17e96:	2800      	cmp	r0, #0
   17e98:	d1d2      	bne.n	17e40 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   17e9a:	4b04      	ldr	r3, [pc, #16]	; (17eac <bt_le_scan_start+0xfc>)
   17e9c:	601f      	str	r7, [r3, #0]
	return 0;
   17e9e:	e799      	b.n	17dd4 <bt_le_scan_start+0x24>
		return -EAGAIN;
   17ea0:	f06f 040a 	mvn.w	r4, #10
   17ea4:	e796      	b.n	17dd4 <bt_le_scan_start+0x24>
   17ea6:	bf00      	nop
   17ea8:	20000444 	.word	0x20000444
   17eac:	20003320 	.word	0x20003320

00017eb0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   17eb0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17eb2:	4808      	ldr	r0, [pc, #32]	; (17ed4 <bt_le_scan_stop+0x24>)
   17eb4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17eb8:	f014 f83e 	bl	2bf38 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17ebc:	0603      	lsls	r3, r0, #24
   17ebe:	d506      	bpl.n	17ece <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   17ec0:	4b05      	ldr	r3, [pc, #20]	; (17ed8 <bt_le_scan_stop+0x28>)
   17ec2:	2000      	movs	r0, #0
   17ec4:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   17ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   17eca:	f7ff be2f 	b.w	17b2c <bt_le_scan_update>
}
   17ece:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17ed2:	bd08      	pop	{r3, pc}
   17ed4:	20000444 	.word	0x20000444
   17ed8:	20003320 	.word	0x20003320

00017edc <bt_le_scan_cb_register>:
	parent->next = child;
   17edc:	2300      	movs	r3, #0
   17ede:	6083      	str	r3, [r0, #8]
	return list->tail;
   17ee0:	4b05      	ldr	r3, [pc, #20]	; (17ef8 <bt_le_scan_cb_register+0x1c>)
   17ee2:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   17ee4:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode)
   17ee8:	b911      	cbnz	r1, 17ef0 <bt_le_scan_cb_register+0x14>
	list->head = node;
   17eea:	e9c3 2200 	strd	r2, r2, [r3]
}
   17eee:	4770      	bx	lr
	parent->next = child;
   17ef0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17ef2:	605a      	str	r2, [r3, #4]
}
   17ef4:	4770      	bx	lr
   17ef6:	bf00      	nop
   17ef8:	20003318 	.word	0x20003318

00017efc <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17efc:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   17efe:	4904      	ldr	r1, [pc, #16]	; (17f10 <bt_pub_key_is_debug+0x14>)
   17f00:	2240      	movs	r2, #64	; 0x40
   17f02:	f013 fdd2 	bl	2baaa <memcmp>
}
   17f06:	fab0 f080 	clz	r0, r0
   17f0a:	0940      	lsrs	r0, r0, #5
   17f0c:	bd08      	pop	{r3, pc}
   17f0e:	bf00      	nop
   17f10:	00032176 	.word	0x00032176

00017f14 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17f14:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17f16:	4b37      	ldr	r3, [pc, #220]	; (17ff4 <bt_pub_key_gen+0xe0>)
   17f18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17f1c:	f003 0306 	and.w	r3, r3, #6
   17f20:	2b06      	cmp	r3, #6
   17f22:	d007      	beq.n	17f34 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   17f24:	4834      	ldr	r0, [pc, #208]	; (17ff8 <bt_pub_key_gen+0xe4>)
   17f26:	2157      	movs	r1, #87	; 0x57
   17f28:	f012 fe1e 	bl	2ab68 <z_log_minimal_printk>
		return -ENOTSUP;
   17f2c:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17f30:	4628      	mov	r0, r5
   17f32:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   17f34:	2800      	cmp	r0, #0
   17f36:	d05a      	beq.n	17fee <bt_pub_key_gen+0xda>
	return list->head;
   17f38:	4e30      	ldr	r6, [pc, #192]	; (17ffc <bt_pub_key_gen+0xe8>)
   17f3a:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f3c:	b16a      	cbz	r2, 17f5a <bt_pub_key_gen+0x46>
   17f3e:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   17f40:	4283      	cmp	r3, r0
   17f42:	d106      	bne.n	17f52 <bt_pub_key_gen+0x3e>
			LOG_WRN("Callback already registered");
   17f44:	482e      	ldr	r0, [pc, #184]	; (18000 <bt_pub_key_gen+0xec>)
   17f46:	2157      	movs	r1, #87	; 0x57
   17f48:	f012 fe0e 	bl	2ab68 <z_log_minimal_printk>
			return -EALREADY;
   17f4c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17f50:	e7ee      	b.n	17f30 <bt_pub_key_gen+0x1c>
	return node->next;
   17f52:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f54:	b10b      	cbz	r3, 17f5a <bt_pub_key_gen+0x46>
   17f56:	3b04      	subs	r3, #4
   17f58:	e7f2      	b.n	17f40 <bt_pub_key_gen+0x2c>
	parent->next = child;
   17f5a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17f5c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17f5e:	1d03      	adds	r3, r0, #4
	list->head = node;
   17f60:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17f62:	b902      	cbnz	r2, 17f66 <bt_pub_key_gen+0x52>
	list->tail = node;
   17f64:	6073      	str	r3, [r6, #4]
   17f66:	4c27      	ldr	r4, [pc, #156]	; (18004 <bt_pub_key_gen+0xf0>)
   17f68:	f3bf 8f5b 	dmb	ish
   17f6c:	e854 2f00 	ldrex	r2, [r4]
   17f70:	f042 0320 	orr.w	r3, r2, #32
   17f74:	e844 3100 	strex	r1, r3, [r4]
   17f78:	2900      	cmp	r1, #0
   17f7a:	d1f7      	bne.n	17f6c <bt_pub_key_gen+0x58>
   17f7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17f80:	f012 0220 	ands.w	r2, r2, #32
   17f84:	d001      	beq.n	17f8a <bt_pub_key_gen+0x76>
	return 0;
   17f86:	2500      	movs	r5, #0
   17f88:	e7d2      	b.n	17f30 <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f8a:	f3bf 8f5b 	dmb	ish
   17f8e:	e854 3f00 	ldrex	r3, [r4]
   17f92:	f023 0310 	bic.w	r3, r3, #16
   17f96:	e844 3100 	strex	r1, r3, [r4]
   17f9a:	2900      	cmp	r1, #0
   17f9c:	d1f7      	bne.n	17f8e <bt_pub_key_gen+0x7a>
   17f9e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17fa2:	4611      	mov	r1, r2
   17fa4:	f242 0025 	movw	r0, #8229	; 0x2025
   17fa8:	f7fe f994 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   17fac:	4605      	mov	r5, r0
   17fae:	2800      	cmp	r0, #0
   17fb0:	d0e9      	beq.n	17f86 <bt_pub_key_gen+0x72>
		LOG_ERR("Sending LE P256 Public Key command failed");
   17fb2:	4815      	ldr	r0, [pc, #84]	; (18008 <bt_pub_key_gen+0xf4>)
   17fb4:	2145      	movs	r1, #69	; 0x45
   17fb6:	f012 fdd7 	bl	2ab68 <z_log_minimal_printk>
   17fba:	f3bf 8f5b 	dmb	ish
   17fbe:	e854 3f00 	ldrex	r3, [r4]
   17fc2:	f023 0320 	bic.w	r3, r3, #32
   17fc6:	e844 3200 	strex	r2, r3, [r4]
   17fca:	2a00      	cmp	r2, #0
   17fcc:	d1f7      	bne.n	17fbe <bt_pub_key_gen+0xaa>
   17fce:	f3bf 8f5b 	dmb	ish
	return list->head;
   17fd2:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fd4:	b13c      	cbz	r4, 17fe6 <bt_pub_key_gen+0xd2>
			if (cb->func) {
   17fd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17fda:	3c04      	subs	r4, #4
			if (cb->func) {
   17fdc:	b10b      	cbz	r3, 17fe2 <bt_pub_key_gen+0xce>
				cb->func(NULL);
   17fde:	2000      	movs	r0, #0
   17fe0:	4798      	blx	r3
	return node->next;
   17fe2:	6864      	ldr	r4, [r4, #4]
   17fe4:	e7f6      	b.n	17fd4 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   17fe6:	2300      	movs	r3, #0
	list->tail = NULL;
   17fe8:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   17fec:	e7a0      	b.n	17f30 <bt_pub_key_gen+0x1c>
		return -EINVAL;
   17fee:	f06f 0515 	mvn.w	r5, #21
   17ff2:	e79d      	b.n	17f30 <bt_pub_key_gen+0x1c>
   17ff4:	20000378 	.word	0x20000378
   17ff8:	000320db 	.word	0x000320db
   17ffc:	20003328 	.word	0x20003328
   18000:	000320ff 	.word	0x000320ff
   18004:	20000444 	.word	0x20000444
   18008:	00032120 	.word	0x00032120

0001800c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1800c:	4b05      	ldr	r3, [pc, #20]	; (18024 <bt_pub_key_get+0x18>)
   1800e:	f3bf 8f5b 	dmb	ish
   18012:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   18014:	4804      	ldr	r0, [pc, #16]	; (18028 <bt_pub_key_get+0x1c>)
   18016:	f3bf 8f5b 	dmb	ish
	return NULL;
   1801a:	f013 0f10 	tst.w	r3, #16
}
   1801e:	bf08      	it	eq
   18020:	2000      	moveq	r0, #0
   18022:	4770      	bx	lr
   18024:	20000444 	.word	0x20000444
   18028:	200043de 	.word	0x200043de

0001802c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   1802e:	4d22      	ldr	r5, [pc, #136]	; (180b8 <bt_dh_key_gen+0x8c>)
   18030:	682b      	ldr	r3, [r5, #0]
   18032:	428b      	cmp	r3, r1
{
   18034:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   18036:	d039      	beq.n	180ac <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18038:	b11b      	cbz	r3, 18042 <bt_dh_key_gen+0x16>
		return -EBUSY;
   1803a:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1803e:	4620      	mov	r0, r4
   18040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18042:	4b1e      	ldr	r3, [pc, #120]	; (180bc <bt_dh_key_gen+0x90>)
   18044:	f3bf 8f5b 	dmb	ish
   18048:	681a      	ldr	r2, [r3, #0]
   1804a:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1804e:	f3c2 1740 	ubfx	r7, r2, #5, #1
   18052:	0692      	lsls	r2, r2, #26
   18054:	d4f1      	bmi.n	1803a <bt_dh_key_gen+0xe>
   18056:	f3bf 8f5b 	dmb	ish
   1805a:	681b      	ldr	r3, [r3, #0]
   1805c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   18060:	06db      	lsls	r3, r3, #27
   18062:	d526      	bpl.n	180b2 <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   18064:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   18066:	f242 0026 	movw	r0, #8230	; 0x2026
   1806a:	2140      	movs	r1, #64	; 0x40
   1806c:	f7fe f8e8 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   18070:	4604      	mov	r4, r0
   18072:	b1c0      	cbz	r0, 180a6 <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   18074:	2140      	movs	r1, #64	; 0x40
   18076:	300c      	adds	r0, #12
   18078:	f007 f81a 	bl	1f0b0 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   1807c:	2240      	movs	r2, #64	; 0x40
   1807e:	4631      	mov	r1, r6
   18080:	f013 fd3a 	bl	2baf8 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   18084:	4621      	mov	r1, r4
   18086:	463a      	mov	r2, r7
   18088:	f242 0026 	movw	r0, #8230	; 0x2026
   1808c:	f7fe f922 	bl	162d4 <bt_hci_cmd_send_sync>
	if (err) {
   18090:	4604      	mov	r4, r0
   18092:	2800      	cmp	r0, #0
   18094:	d0d3      	beq.n	1803e <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   18096:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18098:	4809      	ldr	r0, [pc, #36]	; (180c0 <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   1809a:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1809c:	4622      	mov	r2, r4
   1809e:	2157      	movs	r1, #87	; 0x57
   180a0:	f012 fd62 	bl	2ab68 <z_log_minimal_printk>
		return err;
   180a4:	e7cb      	b.n	1803e <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   180a6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   180aa:	e7f4      	b.n	18096 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   180ac:	f06f 0477 	mvn.w	r4, #119	; 0x77
   180b0:	e7c5      	b.n	1803e <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   180b2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   180b6:	e7c2      	b.n	1803e <bt_dh_key_gen+0x12>
   180b8:	20003324 	.word	0x20003324
   180bc:	20000444 	.word	0x20000444
   180c0:	0003214f 	.word	0x0003214f

000180c4 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   180c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   180c6:	4c1b      	ldr	r4, [pc, #108]	; (18134 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   180c8:	68c6      	ldr	r6, [r0, #12]
   180ca:	f3bf 8f5b 	dmb	ish
   180ce:	e854 3f00 	ldrex	r3, [r4]
   180d2:	f023 0320 	bic.w	r3, r3, #32
   180d6:	e844 3200 	strex	r2, r3, [r4]
   180da:	2a00      	cmp	r2, #0
   180dc:	d1f7      	bne.n	180ce <bt_hci_evt_le_pkey_complete+0xa>
   180de:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   180e2:	7833      	ldrb	r3, [r6, #0]
   180e4:	b983      	cbnz	r3, 18108 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   180e6:	4814      	ldr	r0, [pc, #80]	; (18138 <bt_hci_evt_le_pkey_complete+0x74>)
   180e8:	2240      	movs	r2, #64	; 0x40
   180ea:	1c71      	adds	r1, r6, #1
   180ec:	f013 fd04 	bl	2baf8 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   180f0:	f3bf 8f5b 	dmb	ish
   180f4:	e854 3f00 	ldrex	r3, [r4]
   180f8:	f043 0310 	orr.w	r3, r3, #16
   180fc:	e844 3200 	strex	r2, r3, [r4]
   18100:	2a00      	cmp	r2, #0
   18102:	d1f7      	bne.n	180f4 <bt_hci_evt_le_pkey_complete+0x30>
   18104:	f3bf 8f5b 	dmb	ish
	return list->head;
   18108:	4d0c      	ldr	r5, [pc, #48]	; (1813c <bt_hci_evt_le_pkey_complete+0x78>)
   1810a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1810c:	b16c      	cbz	r4, 1812a <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1810e:	4f0a      	ldr	r7, [pc, #40]	; (18138 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18110:	3c04      	subs	r4, #4
		if (cb->func) {
   18112:	6823      	ldr	r3, [r4, #0]
   18114:	b12b      	cbz	r3, 18122 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   18116:	7832      	ldrb	r2, [r6, #0]
   18118:	2a00      	cmp	r2, #0
   1811a:	bf0c      	ite	eq
   1811c:	4638      	moveq	r0, r7
   1811e:	2000      	movne	r0, #0
   18120:	4798      	blx	r3
	return node->next;
   18122:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18124:	b10c      	cbz	r4, 1812a <bt_hci_evt_le_pkey_complete+0x66>
   18126:	3c04      	subs	r4, #4
   18128:	e7f3      	b.n	18112 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   1812a:	2300      	movs	r3, #0
	list->tail = NULL;
   1812c:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   18130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18132:	bf00      	nop
   18134:	20000444 	.word	0x20000444
   18138:	200043de 	.word	0x200043de
   1813c:	20003328 	.word	0x20003328

00018140 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   18140:	4905      	ldr	r1, [pc, #20]	; (18158 <bt_hci_evt_le_dhkey_complete+0x18>)
   18142:	680b      	ldr	r3, [r1, #0]
   18144:	b133      	cbz	r3, 18154 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   18146:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   18148:	2000      	movs	r0, #0
   1814a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1814c:	7811      	ldrb	r1, [r2, #0]
   1814e:	b901      	cbnz	r1, 18152 <bt_hci_evt_le_dhkey_complete+0x12>
   18150:	1c50      	adds	r0, r2, #1
   18152:	4718      	bx	r3
	}
}
   18154:	4770      	bx	lr
   18156:	bf00      	nop
   18158:	20003324 	.word	0x20003324

0001815c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1815c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1815e:	4b11      	ldr	r3, [pc, #68]	; (181a4 <notify_connected+0x48>)
   18160:	681d      	ldr	r5, [r3, #0]
{
   18162:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18164:	b975      	cbnz	r5, 18184 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18166:	4d10      	ldr	r5, [pc, #64]	; (181a8 <notify_connected+0x4c>)
   18168:	4e10      	ldr	r6, [pc, #64]	; (181ac <notify_connected+0x50>)
   1816a:	42b5      	cmp	r5, r6
   1816c:	d918      	bls.n	181a0 <notify_connected+0x44>
   1816e:	4910      	ldr	r1, [pc, #64]	; (181b0 <notify_connected+0x54>)
   18170:	4810      	ldr	r0, [pc, #64]	; (181b4 <notify_connected+0x58>)
   18172:	f240 525b 	movw	r2, #1371	; 0x55b
   18176:	f012 fce9 	bl	2ab4c <assert_print>
   1817a:	480d      	ldr	r0, [pc, #52]	; (181b0 <notify_connected+0x54>)
   1817c:	f240 515b 	movw	r1, #1371	; 0x55b
   18180:	f012 fcdd 	bl	2ab3e <assert_post_action>
		if (cb->connected) {
   18184:	682b      	ldr	r3, [r5, #0]
   18186:	b113      	cbz	r3, 1818e <notify_connected+0x32>
			cb->connected(conn, conn->err);
   18188:	7b21      	ldrb	r1, [r4, #12]
   1818a:	4620      	mov	r0, r4
   1818c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1818e:	69ad      	ldr	r5, [r5, #24]
   18190:	e7e8      	b.n	18164 <notify_connected+0x8>
		if (cb->connected) {
   18192:	682b      	ldr	r3, [r5, #0]
   18194:	b113      	cbz	r3, 1819c <notify_connected+0x40>
			cb->connected(conn, conn->err);
   18196:	7b21      	ldrb	r1, [r4, #12]
   18198:	4620      	mov	r0, r4
   1819a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1819c:	351c      	adds	r5, #28
   1819e:	e7e4      	b.n	1816a <notify_connected+0xe>
   181a0:	d3f7      	bcc.n	18192 <notify_connected+0x36>
		}
	}
}
   181a2:	bd70      	pop	{r4, r5, r6, pc}
   181a4:	20003360 	.word	0x20003360
   181a8:	0002f2e4 	.word	0x0002f2e4
   181ac:	0002f300 	.word	0x0002f300
   181b0:	000321bd 	.word	0x000321bd
   181b4:	0003013d 	.word	0x0003013d

000181b8 <tx_notify>:
{
   181b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   181bc:	4f15      	ldr	r7, [pc, #84]	; (18214 <tx_notify+0x5c>)
{
   181be:	4604      	mov	r4, r0
	tx->cb = NULL;
   181c0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   181c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   181c8:	f3ef 8311 	mrs	r3, BASEPRI
   181cc:	f382 8812 	msr	BASEPRI_MAX, r2
   181d0:	f3bf 8f6f 	isb	sy
	return list->head;
   181d4:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   181d6:	b929      	cbnz	r1, 181e4 <tx_notify+0x2c>
	__asm__ volatile(
   181d8:	f383 8811 	msr	BASEPRI, r3
   181dc:	f3bf 8f6f 	isb	sy
}
   181e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   181e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   181e6:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   181e8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   181ea:	4281      	cmp	r1, r0
	list->tail = node;
   181ec:	bf08      	it	eq
   181ee:	6262      	streq	r2, [r4, #36]	; 0x24
   181f0:	f383 8811 	msr	BASEPRI, r3
   181f4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   181f8:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   181fc:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18200:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   18204:	4638      	mov	r0, r7
   18206:	f016 fcd0 	bl	2ebaa <k_queue_append>
		cb(conn, user_data, 0);
   1820a:	2200      	movs	r2, #0
   1820c:	4631      	mov	r1, r6
   1820e:	4620      	mov	r0, r4
   18210:	47a8      	blx	r5
	while (1) {
   18212:	e7d7      	b.n	181c4 <tx_notify+0xc>
   18214:	20000bb8 	.word	0x20000bb8

00018218 <conn_tx_destroy>:
{
   18218:	b570      	push	{r4, r5, r6, lr}
   1821a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1821c:	b941      	cbnz	r1, 18230 <conn_tx_destroy+0x18>
   1821e:	490d      	ldr	r1, [pc, #52]	; (18254 <conn_tx_destroy+0x3c>)
   18220:	480d      	ldr	r0, [pc, #52]	; (18258 <conn_tx_destroy+0x40>)
   18222:	2239      	movs	r2, #57	; 0x39
   18224:	f012 fc92 	bl	2ab4c <assert_print>
   18228:	480a      	ldr	r0, [pc, #40]	; (18254 <conn_tx_destroy+0x3c>)
   1822a:	2139      	movs	r1, #57	; 0x39
   1822c:	f012 fc87 	bl	2ab3e <assert_post_action>
	void *user_data = tx->user_data;
   18230:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18234:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18236:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   1823a:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1823c:	4807      	ldr	r0, [pc, #28]	; (1825c <conn_tx_destroy+0x44>)
   1823e:	f016 fcb4 	bl	2ebaa <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   18242:	4631      	mov	r1, r6
   18244:	4620      	mov	r0, r4
   18246:	462b      	mov	r3, r5
   18248:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1824c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   18250:	4718      	bx	r3
   18252:	bf00      	nop
   18254:	000321bd 	.word	0x000321bd
   18258:	0003013d 	.word	0x0003013d
   1825c:	20000bb8 	.word	0x20000bb8

00018260 <send_frag>:
{
   18260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18264:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18266:	698d      	ldr	r5, [r1, #24]
{
   18268:	460e      	mov	r6, r1
   1826a:	4617      	mov	r7, r2
   1826c:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   1826e:	f04f 33ff 	mov.w	r3, #4294967295
   18272:	4846      	ldr	r0, [pc, #280]	; (1838c <send_frag+0x12c>)
   18274:	f04f 32ff 	mov.w	r2, #4294967295
   18278:	f00c fd7e 	bl	24d78 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1827c:	7b63      	ldrb	r3, [r4, #13]
   1827e:	2b07      	cmp	r3, #7
   18280:	d178      	bne.n	18374 <send_frag+0x114>
	__asm__ volatile(
   18282:	f04f 0340 	mov.w	r3, #64	; 0x40
   18286:	f3ef 8211 	mrs	r2, BASEPRI
   1828a:	f383 8812 	msr	BASEPRI_MAX, r3
   1828e:	f3bf 8f6f 	isb	sy
	if (tx) {
   18292:	2d00      	cmp	r5, #0
   18294:	d043      	beq.n	1831e <send_frag+0xbe>
	parent->next = child;
   18296:	2300      	movs	r3, #0
   18298:	602b      	str	r3, [r5, #0]
	return list->tail;
   1829a:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1829c:	2b00      	cmp	r3, #0
   1829e:	d13b      	bne.n	18318 <send_frag+0xb8>
	list->head = node;
   182a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   182a4:	f382 8811 	msr	BASEPRI, r2
   182a8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   182ac:	2104      	movs	r1, #4
   182ae:	f106 000c 	add.w	r0, r6, #12
   182b2:	f006 fead 	bl	1f010 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   182b6:	8823      	ldrh	r3, [r4, #0]
   182b8:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   182bc:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   182c0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   182c2:	8a33      	ldrh	r3, [r6, #16]
   182c4:	3b04      	subs	r3, #4
   182c6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   182c8:	2302      	movs	r3, #2
   182ca:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   182cc:	4630      	mov	r0, r6
   182ce:	f7fe fb31 	bl	16934 <bt_send>
	if (err) {
   182d2:	4602      	mov	r2, r0
   182d4:	2800      	cmp	r0, #0
   182d6:	d057      	beq.n	18388 <send_frag+0x128>
		LOG_ERR("Unable to send to driver (err %d)", err);
   182d8:	482d      	ldr	r0, [pc, #180]	; (18390 <send_frag+0x130>)
   182da:	2145      	movs	r1, #69	; 0x45
   182dc:	f012 fc44 	bl	2ab68 <z_log_minimal_printk>
	__asm__ volatile(
   182e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   182e4:	f3ef 8711 	mrs	r7, BASEPRI
   182e8:	f383 8812 	msr	BASEPRI_MAX, r3
   182ec:	f3bf 8f6f 	isb	sy
		if (tx) {
   182f0:	b315      	cbz	r5, 18338 <send_frag+0xd8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   182f2:	4629      	mov	r1, r5
   182f4:	f104 0014 	add.w	r0, r4, #20
   182f8:	f013 fe2f 	bl	2bf5a <sys_slist_find_and_remove>
	__asm__ volatile(
   182fc:	f387 8811 	msr	BASEPRI, r7
   18300:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   18304:	4821      	ldr	r0, [pc, #132]	; (1838c <send_frag+0x12c>)
   18306:	f00c fcfd 	bl	24d04 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1830a:	2300      	movs	r3, #0
   1830c:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1830e:	4629      	mov	r1, r5
   18310:	4620      	mov	r0, r4
   18312:	f7ff ff81 	bl	18218 <conn_tx_destroy>
   18316:	e027      	b.n	18368 <send_frag+0x108>
	parent->next = child;
   18318:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1831a:	61a5      	str	r5, [r4, #24]
}
   1831c:	e7c2      	b.n	182a4 <send_frag+0x44>
	return list->tail;
   1831e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18320:	b133      	cbz	r3, 18330 <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   18322:	f103 080c 	add.w	r8, r3, #12
   18326:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   18328:	3301      	adds	r3, #1
   1832a:	f8c8 3000 	str.w	r3, [r8]
   1832e:	e7b9      	b.n	182a4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   18330:	69e3      	ldr	r3, [r4, #28]
   18332:	f104 081c 	add.w	r8, r4, #28
   18336:	e7f7      	b.n	18328 <send_frag+0xc8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   18338:	f8d8 2000 	ldr.w	r2, [r8]
   1833c:	b952      	cbnz	r2, 18354 <send_frag+0xf4>
   1833e:	4915      	ldr	r1, [pc, #84]	; (18394 <send_frag+0x134>)
   18340:	4815      	ldr	r0, [pc, #84]	; (18398 <send_frag+0x138>)
   18342:	f240 2227 	movw	r2, #551	; 0x227
   18346:	f012 fc01 	bl	2ab4c <assert_print>
   1834a:	4812      	ldr	r0, [pc, #72]	; (18394 <send_frag+0x134>)
   1834c:	f240 2127 	movw	r1, #551	; 0x227
   18350:	f012 fbf5 	bl	2ab3e <assert_post_action>
			(*pending_no_cb)--;
   18354:	3a01      	subs	r2, #1
   18356:	f8c8 2000 	str.w	r2, [r8]
   1835a:	f387 8811 	msr	BASEPRI, r7
   1835e:	f3bf 8f6f 	isb	sy
   18362:	480a      	ldr	r0, [pc, #40]	; (1838c <send_frag+0x12c>)
   18364:	f00c fcce 	bl	24d04 <z_impl_k_sem_give>
	if (always_consume) {
   18368:	f1b9 0f00 	cmp.w	r9, #0
   1836c:	d108      	bne.n	18380 <send_frag+0x120>
	return false;
   1836e:	2000      	movs	r0, #0
}
   18370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18374:	4805      	ldr	r0, [pc, #20]	; (1838c <send_frag+0x12c>)
   18376:	f00c fcc5 	bl	24d04 <z_impl_k_sem_give>
	if (tx) {
   1837a:	2d00      	cmp	r5, #0
   1837c:	d1c5      	bne.n	1830a <send_frag+0xaa>
   1837e:	e7f3      	b.n	18368 <send_frag+0x108>
		net_buf_unref(buf);
   18380:	4630      	mov	r0, r6
   18382:	f006 fd8f 	bl	1eea4 <net_buf_unref>
   18386:	e7f2      	b.n	1836e <send_frag+0x10e>
	return true;
   18388:	2001      	movs	r0, #1
   1838a:	e7f1      	b.n	18370 <send_frag+0x110>
   1838c:	20000478 	.word	0x20000478
   18390:	00031990 	.word	0x00031990
   18394:	000321bd 	.word	0x000321bd
   18398:	0003013d 	.word	0x0003013d

0001839c <bt_conn_get_pkts>:
}
   1839c:	4800      	ldr	r0, [pc, #0]	; (183a0 <bt_conn_get_pkts+0x4>)
   1839e:	4770      	bx	lr
   183a0:	20000478 	.word	0x20000478

000183a4 <bt_conn_new>:
{
   183a4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   183a6:	2200      	movs	r2, #0
   183a8:	4604      	mov	r4, r0
   183aa:	428a      	cmp	r2, r1
   183ac:	d102      	bne.n	183b4 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   183ae:	2400      	movs	r4, #0
}
   183b0:	4620      	mov	r0, r4
   183b2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   183b4:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   183b8:	2001      	movs	r0, #1
   183ba:	f3bf 8f5b 	dmb	ish
   183be:	e853 5f00 	ldrex	r5, [r3]
   183c2:	2d00      	cmp	r5, #0
   183c4:	d104      	bne.n	183d0 <bt_conn_new+0x2c>
   183c6:	e843 0c00 	strex	ip, r0, [r3]
   183ca:	f1bc 0f00 	cmp.w	ip, #0
   183ce:	d1f6      	bne.n	183be <bt_conn_new+0x1a>
   183d0:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   183d4:	d002      	beq.n	183dc <bt_conn_new+0x38>
   183d6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   183d8:	4402      	add	r2, r0
   183da:	e7e6      	b.n	183aa <bt_conn_new+0x6>
	if (!conn) {
   183dc:	2c00      	cmp	r4, #0
   183de:	d0e6      	beq.n	183ae <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   183e0:	22c0      	movs	r2, #192	; 0xc0
   183e2:	2100      	movs	r1, #0
   183e4:	4620      	mov	r0, r4
   183e6:	f013 fb92 	bl	2bb0e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   183ea:	f104 0060 	add.w	r0, r4, #96	; 0x60
   183ee:	4904      	ldr	r1, [pc, #16]	; (18400 <bt_conn_new+0x5c>)
   183f0:	f00d f82e 	bl	25450 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   183f4:	4903      	ldr	r1, [pc, #12]	; (18404 <bt_conn_new+0x60>)
   183f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   183fa:	f00c ff13 	bl	25224 <k_work_init>
	return conn;
   183fe:	e7d7      	b.n	183b0 <bt_conn_new+0xc>
   18400:	00018f85 	.word	0x00018f85
   18404:	0002bfbb 	.word	0x0002bfbb

00018408 <conn_cleanup>:
{
   18408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1840c:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1840e:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18410:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18414:	2300      	movs	r3, #0
   18416:	2200      	movs	r2, #0
   18418:	4630      	mov	r0, r6
   1841a:	f015 fd61 	bl	2dee0 <net_buf_get>
   1841e:	4603      	mov	r3, r0
   18420:	b960      	cbnz	r0, 1843c <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   18422:	6963      	ldr	r3, [r4, #20]
   18424:	b1ab      	cbz	r3, 18452 <conn_cleanup+0x4a>
   18426:	4916      	ldr	r1, [pc, #88]	; (18480 <conn_cleanup+0x78>)
   18428:	4816      	ldr	r0, [pc, #88]	; (18484 <conn_cleanup+0x7c>)
   1842a:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   1842e:	f012 fb8d 	bl	2ab4c <assert_print>
   18432:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   18436:	4812      	ldr	r0, [pc, #72]	; (18480 <conn_cleanup+0x78>)
   18438:	f012 fb81 	bl	2ab3e <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1843c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1843e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   18440:	f006 fd30 	bl	1eea4 <net_buf_unref>
		if (tx) {
   18444:	2d00      	cmp	r5, #0
   18446:	d0e5      	beq.n	18414 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   18448:	4629      	mov	r1, r5
   1844a:	4620      	mov	r0, r4
   1844c:	f7ff fee4 	bl	18218 <conn_tx_destroy>
   18450:	e7de      	b.n	18410 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   18452:	69e3      	ldr	r3, [r4, #28]
   18454:	b143      	cbz	r3, 18468 <conn_cleanup+0x60>
   18456:	490a      	ldr	r1, [pc, #40]	; (18480 <conn_cleanup+0x78>)
   18458:	480a      	ldr	r0, [pc, #40]	; (18484 <conn_cleanup+0x7c>)
   1845a:	f240 22b5 	movw	r2, #693	; 0x2b5
   1845e:	f012 fb75 	bl	2ab4c <assert_print>
   18462:	f240 21b5 	movw	r1, #693	; 0x2b5
   18466:	e7e6      	b.n	18436 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   18468:	4620      	mov	r0, r4
   1846a:	f013 fda9 	bl	2bfc0 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1846e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18472:	2200      	movs	r2, #0
}
   18474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18478:	2300      	movs	r3, #0
   1847a:	f00d b8d3 	b.w	25624 <k_work_reschedule>
   1847e:	bf00      	nop
   18480:	000321bd 	.word	0x000321bd
   18484:	0003013d 	.word	0x0003013d

00018488 <bt_conn_recv>:
{
   18488:	b570      	push	{r4, r5, r6, lr}
   1848a:	4616      	mov	r6, r2
   1848c:	4604      	mov	r4, r0
   1848e:	460d      	mov	r5, r1
	tx_notify(conn);
   18490:	f7ff fe92 	bl	181b8 <tx_notify>
	switch (flags) {
   18494:	2e01      	cmp	r6, #1
   18496:	d01f      	beq.n	184d8 <bt_conn_recv+0x50>
   18498:	2e02      	cmp	r6, #2
   1849a:	d149      	bne.n	18530 <bt_conn_recv+0xa8>
		if (conn->rx) {
   1849c:	6923      	ldr	r3, [r4, #16]
   1849e:	b133      	cbz	r3, 184ae <bt_conn_recv+0x26>
			LOG_ERR("Unexpected first L2CAP frame");
   184a0:	482b      	ldr	r0, [pc, #172]	; (18550 <bt_conn_recv+0xc8>)
   184a2:	2145      	movs	r1, #69	; 0x45
   184a4:	f012 fb60 	bl	2ab68 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   184a8:	4620      	mov	r0, r4
   184aa:	f013 fd89 	bl	2bfc0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   184ae:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   184b0:	6921      	ldr	r1, [r4, #16]
   184b2:	8a0a      	ldrh	r2, [r1, #16]
   184b4:	2a01      	cmp	r2, #1
   184b6:	d949      	bls.n	1854c <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   184b8:	68cb      	ldr	r3, [r1, #12]
   184ba:	881b      	ldrh	r3, [r3, #0]
   184bc:	3304      	adds	r3, #4
   184be:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   184c0:	429a      	cmp	r2, r3
   184c2:	d343      	bcc.n	1854c <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   184c4:	d93a      	bls.n	1853c <bt_conn_recv+0xb4>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   184c6:	4823      	ldr	r0, [pc, #140]	; (18554 <bt_conn_recv+0xcc>)
   184c8:	2145      	movs	r1, #69	; 0x45
   184ca:	f012 fb4d 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   184ce:	4620      	mov	r0, r4
}
   184d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   184d4:	f013 bd74 	b.w	2bfc0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   184d8:	6920      	ldr	r0, [r4, #16]
   184da:	b938      	cbnz	r0, 184ec <bt_conn_recv+0x64>
			LOG_ERR("Unexpected L2CAP continuation");
   184dc:	481e      	ldr	r0, [pc, #120]	; (18558 <bt_conn_recv+0xd0>)
   184de:	2145      	movs	r1, #69	; 0x45
   184e0:	f012 fb42 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   184e4:	4620      	mov	r0, r4
   184e6:	f013 fd6b 	bl	2bfc0 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   184ea:	e001      	b.n	184f0 <bt_conn_recv+0x68>
		if (!buf->len) {
   184ec:	8a2e      	ldrh	r6, [r5, #16]
   184ee:	b926      	cbnz	r6, 184fa <bt_conn_recv+0x72>
			net_buf_unref(buf);
   184f0:	4628      	mov	r0, r5
}
   184f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   184f6:	f006 bcd5 	b.w	1eea4 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   184fa:	300c      	adds	r0, #12
   184fc:	f015 fd0c 	bl	2df18 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   18500:	4286      	cmp	r6, r0
   18502:	d90b      	bls.n	1851c <bt_conn_recv+0x94>
			LOG_ERR("Not enough buffer space for L2CAP data");
   18504:	4815      	ldr	r0, [pc, #84]	; (1855c <bt_conn_recv+0xd4>)
   18506:	2145      	movs	r1, #69	; 0x45
   18508:	f012 fb2e 	bl	2ab68 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   1850c:	6921      	ldr	r1, [r4, #16]
   1850e:	2200      	movs	r2, #0
   18510:	4620      	mov	r0, r4
   18512:	f000 ffa3 	bl	1945c <bt_l2cap_recv>
			conn->rx = NULL;
   18516:	2300      	movs	r3, #0
   18518:	6123      	str	r3, [r4, #16]
   1851a:	e7e9      	b.n	184f0 <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1851c:	6920      	ldr	r0, [r4, #16]
   1851e:	8a2a      	ldrh	r2, [r5, #16]
   18520:	68e9      	ldr	r1, [r5, #12]
   18522:	300c      	adds	r0, #12
   18524:	f015 fd00 	bl	2df28 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18528:	4628      	mov	r0, r5
   1852a:	f006 fcbb 	bl	1eea4 <net_buf_unref>
		break;
   1852e:	e7bf      	b.n	184b0 <bt_conn_recv+0x28>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   18530:	480b      	ldr	r0, [pc, #44]	; (18560 <bt_conn_recv+0xd8>)
   18532:	4632      	mov	r2, r6
   18534:	2145      	movs	r1, #69	; 0x45
   18536:	f012 fb17 	bl	2ab68 <z_log_minimal_printk>
   1853a:	e7d3      	b.n	184e4 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   1853c:	2300      	movs	r3, #0
   1853e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18540:	4620      	mov	r0, r4
   18542:	2201      	movs	r2, #1
}
   18544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   18548:	f000 bf88 	b.w	1945c <bt_l2cap_recv>
}
   1854c:	bd70      	pop	{r4, r5, r6, pc}
   1854e:	bf00      	nop
   18550:	000321ed 	.word	0x000321ed
   18554:	00032281 	.word	0x00032281
   18558:	0003220f 	.word	0x0003220f
   1855c:	00032232 	.word	0x00032232
   18560:	0003225e 	.word	0x0003225e

00018564 <bt_conn_send_cb>:
{
   18564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18568:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1856a:	7b43      	ldrb	r3, [r0, #13]
   1856c:	2b07      	cmp	r3, #7
{
   1856e:	4605      	mov	r5, r0
   18570:	460f      	mov	r7, r1
   18572:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18574:	d006      	beq.n	18584 <bt_conn_send_cb+0x20>
		LOG_ERR("not connected!");
   18576:	4820      	ldr	r0, [pc, #128]	; (185f8 <bt_conn_send_cb+0x94>)
   18578:	2145      	movs	r1, #69	; 0x45
   1857a:	f012 faf5 	bl	2ab68 <z_log_minimal_printk>
		return -ENOTCONN;
   1857e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18582:	e017      	b.n	185b4 <bt_conn_send_cb+0x50>
	if (cb) {
   18584:	2a00      	cmp	r2, #0
   18586:	d035      	beq.n	185f4 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   18588:	f00e f818 	bl	265bc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1858c:	4b1b      	ldr	r3, [pc, #108]	; (185fc <bt_conn_send_cb+0x98>)
   1858e:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18590:	481b      	ldr	r0, [pc, #108]	; (18600 <bt_conn_send_cb+0x9c>)
   18592:	bf07      	ittee	eq
   18594:	2200      	moveq	r2, #0
   18596:	2300      	moveq	r3, #0
   18598:	f04f 32ff 	movne.w	r2, #4294967295
   1859c:	f04f 33ff 	movne.w	r3, #4294967295
   185a0:	f00c fb58 	bl	24c54 <z_impl_k_queue_get>
   185a4:	4604      	mov	r4, r0
		if (!tx) {
   185a6:	b938      	cbnz	r0, 185b8 <bt_conn_send_cb+0x54>
			LOG_ERR("Unable to allocate TX context");
   185a8:	4816      	ldr	r0, [pc, #88]	; (18604 <bt_conn_send_cb+0xa0>)
   185aa:	2145      	movs	r1, #69	; 0x45
   185ac:	f012 fadc 	bl	2ab68 <z_log_minimal_printk>
			return -ENOBUFS;
   185b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   185b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   185b8:	7b6b      	ldrb	r3, [r5, #13]
   185ba:	2b07      	cmp	r3, #7
   185bc:	f04f 0800 	mov.w	r8, #0
   185c0:	d00c      	beq.n	185dc <bt_conn_send_cb+0x78>
			LOG_WRN("Disconnected while allocating context");
   185c2:	4811      	ldr	r0, [pc, #68]	; (18608 <bt_conn_send_cb+0xa4>)
   185c4:	2157      	movs	r1, #87	; 0x57
   185c6:	f012 facf 	bl	2ab68 <z_log_minimal_printk>
	tx->user_data = NULL;
   185ca:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   185ce:	480c      	ldr	r0, [pc, #48]	; (18600 <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   185d0:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   185d4:	4621      	mov	r1, r4
   185d6:	f016 fae8 	bl	2ebaa <k_queue_append>
}
   185da:	e7d0      	b.n	1857e <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   185dc:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   185e0:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   185e4:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   185e8:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   185ea:	4639      	mov	r1, r7
   185ec:	f006 fc3a 	bl	1ee64 <net_buf_put>
	return 0;
   185f0:	2000      	movs	r0, #0
   185f2:	e7df      	b.n	185b4 <bt_conn_send_cb+0x50>
   185f4:	4614      	mov	r4, r2
   185f6:	e7f5      	b.n	185e4 <bt_conn_send_cb+0x80>
   185f8:	000322a1 	.word	0x000322a1
   185fc:	20002ac0 	.word	0x20002ac0
   18600:	20000bb8 	.word	0x20000bb8
   18604:	000322b5 	.word	0x000322b5
   18608:	000322d8 	.word	0x000322d8

0001860c <bt_conn_prepare_events>:
{
   1860c:	b570      	push	{r4, r5, r6, lr}
   1860e:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   18610:	4816      	ldr	r0, [pc, #88]	; (1866c <bt_conn_prepare_events+0x60>)
   18612:	f016 fc72 	bl	2eefa <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18616:	4620      	mov	r0, r4
   18618:	4b14      	ldr	r3, [pc, #80]	; (1866c <bt_conn_prepare_events+0x60>)
   1861a:	2200      	movs	r2, #0
   1861c:	2101      	movs	r1, #1
   1861e:	f00e fdff 	bl	27220 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   18622:	4813      	ldr	r0, [pc, #76]	; (18670 <bt_conn_prepare_events+0x64>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   18624:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   18628:	f013 fcc1 	bl	2bfae <atomic_get>
   1862c:	b908      	cbnz	r0, 18632 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1862e:	2001      	movs	r0, #1
}
   18630:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18632:	4d10      	ldr	r5, [pc, #64]	; (18674 <bt_conn_prepare_events+0x68>)
   18634:	7b6b      	ldrb	r3, [r5, #13]
   18636:	b953      	cbnz	r3, 1864e <bt_conn_prepare_events+0x42>
   18638:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1863c:	1d28      	adds	r0, r5, #4
   1863e:	f013 fca7 	bl	2bf90 <atomic_and>
   18642:	0643      	lsls	r3, r0, #25
   18644:	d503      	bpl.n	1864e <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   18646:	4628      	mov	r0, r5
   18648:	f7ff fede 	bl	18408 <conn_cleanup>
		return -ENOTCONN;
   1864c:	e7ef      	b.n	1862e <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1864e:	7b6b      	ldrb	r3, [r5, #13]
   18650:	2b07      	cmp	r3, #7
   18652:	d1ec      	bne.n	1862e <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   18654:	4b08      	ldr	r3, [pc, #32]	; (18678 <bt_conn_prepare_events+0x6c>)
   18656:	4630      	mov	r0, r6
   18658:	2200      	movs	r2, #0
   1865a:	2104      	movs	r1, #4
   1865c:	f00e fde0 	bl	27220 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   18660:	2301      	movs	r3, #1
   18662:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18666:	2002      	movs	r0, #2
	return ev_count;
   18668:	e7e2      	b.n	18630 <bt_conn_prepare_events+0x24>
   1866a:	bf00      	nop
   1866c:	20000790 	.word	0x20000790
   18670:	20001f10 	.word	0x20001f10
   18674:	20001e50 	.word	0x20001e50
   18678:	20001e88 	.word	0x20001e88

0001867c <bt_conn_ref>:
{
   1867c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1867e:	4603      	mov	r3, r0
   18680:	b1b0      	cbz	r0, 186b0 <bt_conn_ref+0x34>
		old = atomic_get(&conn->ref);
   18682:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   18686:	4610      	mov	r0, r2
   18688:	f013 fc91 	bl	2bfae <atomic_get>
		if (!old) {
   1868c:	b1d8      	cbz	r0, 186c6 <bt_conn_ref+0x4a>
   1868e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   18692:	1c41      	adds	r1, r0, #1
   18694:	e852 4f00 	ldrex	r4, [r2]
   18698:	4284      	cmp	r4, r0
   1869a:	d104      	bne.n	186a6 <bt_conn_ref+0x2a>
   1869c:	e842 1c00 	strex	ip, r1, [r2]
   186a0:	f1bc 0f00 	cmp.w	ip, #0
   186a4:	d1f6      	bne.n	18694 <bt_conn_ref+0x18>
   186a6:	f3bf 8f5b 	dmb	ish
   186aa:	d1ec      	bne.n	18686 <bt_conn_ref+0xa>
}
   186ac:	4618      	mov	r0, r3
   186ae:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   186b0:	4906      	ldr	r1, [pc, #24]	; (186cc <bt_conn_ref+0x50>)
   186b2:	4807      	ldr	r0, [pc, #28]	; (186d0 <bt_conn_ref+0x54>)
   186b4:	f240 427c 	movw	r2, #1148	; 0x47c
   186b8:	f012 fa48 	bl	2ab4c <assert_print>
   186bc:	4803      	ldr	r0, [pc, #12]	; (186cc <bt_conn_ref+0x50>)
   186be:	f240 417c 	movw	r1, #1148	; 0x47c
   186c2:	f012 fa3c 	bl	2ab3e <assert_post_action>
			return NULL;
   186c6:	4603      	mov	r3, r0
   186c8:	e7f0      	b.n	186ac <bt_conn_ref+0x30>
   186ca:	bf00      	nop
   186cc:	000321bd 	.word	0x000321bd
   186d0:	0003013d 	.word	0x0003013d

000186d4 <bt_conn_unref>:
{
   186d4:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   186d6:	30c0      	adds	r0, #192	; 0xc0
   186d8:	f3bf 8f5b 	dmb	ish
   186dc:	e850 3f00 	ldrex	r3, [r0]
   186e0:	1e5a      	subs	r2, r3, #1
   186e2:	e840 2100 	strex	r1, r2, [r0]
   186e6:	2900      	cmp	r1, #0
   186e8:	d1f8      	bne.n	186dc <bt_conn_unref+0x8>
   186ea:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   186ee:	2b00      	cmp	r3, #0
   186f0:	dc0a      	bgt.n	18708 <bt_conn_unref+0x34>
   186f2:	4906      	ldr	r1, [pc, #24]	; (1870c <bt_conn_unref+0x38>)
   186f4:	4806      	ldr	r0, [pc, #24]	; (18710 <bt_conn_unref+0x3c>)
   186f6:	f44f 6293 	mov.w	r2, #1176	; 0x498
   186fa:	f012 fa27 	bl	2ab4c <assert_print>
   186fe:	4803      	ldr	r0, [pc, #12]	; (1870c <bt_conn_unref+0x38>)
   18700:	f44f 6193 	mov.w	r1, #1176	; 0x498
   18704:	f012 fa1b 	bl	2ab3e <assert_post_action>
}
   18708:	bd08      	pop	{r3, pc}
   1870a:	bf00      	nop
   1870c:	000321bd 	.word	0x000321bd
   18710:	0003013d 	.word	0x0003013d

00018714 <bt_conn_lookup_handle>:
{
   18714:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18716:	2101      	movs	r1, #1
   18718:	4801      	ldr	r0, [pc, #4]	; (18720 <bt_conn_lookup_handle+0xc>)
   1871a:	f013 bc5a 	b.w	2bfd2 <conn_lookup_handle>
   1871e:	bf00      	nop
   18720:	20001e50 	.word	0x20001e50

00018724 <bt_conn_set_state>:
{
   18724:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   18726:	7b45      	ldrb	r5, [r0, #13]
   18728:	428d      	cmp	r5, r1
{
   1872a:	4604      	mov	r4, r0
   1872c:	460e      	mov	r6, r1
	if (conn->state == state) {
   1872e:	d10b      	bne.n	18748 <bt_conn_set_state+0x24>
	switch (state) {
   18730:	2d08      	cmp	r5, #8
   18732:	bf96      	itet	ls
   18734:	4b72      	ldrls	r3, [pc, #456]	; (18900 <bt_conn_set_state+0x1dc>)
	if (conn->state == state) {
   18736:	4a73      	ldrhi	r2, [pc, #460]	; (18904 <bt_conn_set_state+0x1e0>)
   18738:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1873c:	4872      	ldr	r0, [pc, #456]	; (18908 <bt_conn_set_state+0x1e4>)
   1873e:	2157      	movs	r1, #87	; 0x57
}
   18740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("no valid (%u) state was set", state);
   18744:	f012 ba10 	b.w	2ab68 <z_log_minimal_printk>
	conn->state = state;
   18748:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   1874a:	b165      	cbz	r5, 18766 <bt_conn_set_state+0x42>
   1874c:	2d06      	cmp	r5, #6
   1874e:	d010      	beq.n	18772 <bt_conn_set_state+0x4e>
	switch (conn->state) {
   18750:	7b63      	ldrb	r3, [r4, #13]
   18752:	2b08      	cmp	r3, #8
   18754:	f200 80cf 	bhi.w	188f6 <bt_conn_set_state+0x1d2>
   18758:	e8df f003 	tbb	[pc, r3]
   1875c:	38381239 	.word	0x38381239
   18760:	2a873838 	.word	0x2a873838
   18764:	38          	.byte	0x38
   18765:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   18766:	7883      	ldrb	r3, [r0, #2]
   18768:	2b08      	cmp	r3, #8
   1876a:	d0f1      	beq.n	18750 <bt_conn_set_state+0x2c>
			bt_conn_ref(conn);
   1876c:	f7ff ff86 	bl	1867c <bt_conn_ref>
   18770:	e7ee      	b.n	18750 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18772:	7883      	ldrb	r3, [r0, #2]
   18774:	2b01      	cmp	r3, #1
   18776:	d1eb      	bne.n	18750 <bt_conn_set_state+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   18778:	3060      	adds	r0, #96	; 0x60
   1877a:	f00c ff59 	bl	25630 <k_work_cancel_delayable>
   1877e:	e7e7      	b.n	18750 <bt_conn_set_state+0x2c>
	z_impl_k_sem_give(sem);
   18780:	4d62      	ldr	r5, [pc, #392]	; (1890c <bt_conn_set_state+0x1e8>)
		tx->pending_no_cb = 0U;
   18782:	2600      	movs	r6, #0
	__asm__ volatile(
   18784:	f04f 0240 	mov.w	r2, #64	; 0x40
   18788:	f3ef 8311 	mrs	r3, BASEPRI
   1878c:	f382 8812 	msr	BASEPRI_MAX, r2
   18790:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18794:	69e2      	ldr	r2, [r4, #28]
   18796:	2a00      	cmp	r2, #0
   18798:	f000 8089 	beq.w	188ae <bt_conn_set_state+0x18a>
			conn->pending_no_cb--;
   1879c:	3a01      	subs	r2, #1
   1879e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   187a0:	f383 8811 	msr	BASEPRI, r3
   187a4:	f3bf 8f6f 	isb	sy
   187a8:	4628      	mov	r0, r5
   187aa:	f00c faab 	bl	24d04 <z_impl_k_sem_give>
}
   187ae:	e7e9      	b.n	18784 <bt_conn_set_state+0x60>
		if (conn->type == BT_CONN_TYPE_SCO) {
   187b0:	78a3      	ldrb	r3, [r4, #2]
   187b2:	2b04      	cmp	r3, #4
   187b4:	d00a      	beq.n	187cc <bt_conn_set_state+0xa8>
	z_impl_k_queue_init(queue);
   187b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   187ba:	f016 f9e9 	bl	2eb90 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   187be:	4854      	ldr	r0, [pc, #336]	; (18910 <bt_conn_set_state+0x1ec>)
   187c0:	2100      	movs	r1, #0
   187c2:	f00e fe09 	bl	273d8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   187c6:	2300      	movs	r3, #0
	list->tail = NULL;
   187c8:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   187cc:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   187ce:	78a3      	ldrb	r3, [r4, #2]
   187d0:	2b04      	cmp	r3, #4
   187d2:	d104      	bne.n	187de <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   187d4:	4620      	mov	r0, r4
}
   187d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   187da:	f7ff bf7b 	b.w	186d4 <bt_conn_unref>
		switch (old_state) {
   187de:	2d08      	cmp	r5, #8
   187e0:	d8f4      	bhi.n	187cc <bt_conn_set_state+0xa8>
   187e2:	a301      	add	r3, pc, #4	; (adr r3, 187e8 <bt_conn_set_state+0xc4>)
   187e4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   187e8:	00018863 	.word	0x00018863
   187ec:	0001880d 	.word	0x0001880d
   187f0:	00018855 	.word	0x00018855
   187f4:	000187d5 	.word	0x000187d5
   187f8:	000187d5 	.word	0x000187d5
   187fc:	00018855 	.word	0x00018855
   18800:	00018855 	.word	0x00018855
   18804:	000187cd 	.word	0x000187cd
   18808:	00018863 	.word	0x00018863
			tx_notify(conn);
   1880c:	4620      	mov	r0, r4
   1880e:	f7ff fcd3 	bl	181b8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18812:	78a3      	ldrb	r3, [r4, #2]
   18814:	2b01      	cmp	r3, #1
   18816:	d10a      	bne.n	1882e <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   18818:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1881c:	4628      	mov	r0, r5
   1881e:	f016 fa4d 	bl	2ecbc <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18822:	f010 0f0c 	tst.w	r0, #12
   18826:	d002      	beq.n	1882e <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   18828:	4628      	mov	r0, r5
   1882a:	f00c ff01 	bl	25630 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1882e:	f3bf 8f5b 	dmb	ish
   18832:	3404      	adds	r4, #4
   18834:	e854 3f00 	ldrex	r3, [r4]
   18838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1883c:	e844 3200 	strex	r2, r3, [r4]
   18840:	2a00      	cmp	r2, #0
   18842:	d1f7      	bne.n	18834 <bt_conn_set_state+0x110>
   18844:	f3bf 8f5b 	dmb	ish
   18848:	4831      	ldr	r0, [pc, #196]	; (18910 <bt_conn_set_state+0x1ec>)
}
   1884a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1884e:	2100      	movs	r1, #0
   18850:	f00e bdc2 	b.w	273d8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   18854:	7b23      	ldrb	r3, [r4, #12]
   18856:	2b00      	cmp	r3, #0
   18858:	d0bc      	beq.n	187d4 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   1885a:	4620      	mov	r0, r4
   1885c:	f7ff fc7e 	bl	1815c <notify_connected>
   18860:	e7b8      	b.n	187d4 <bt_conn_set_state+0xb0>
			LOG_WRN("Invalid (%u) old state", state);
   18862:	482c      	ldr	r0, [pc, #176]	; (18914 <bt_conn_set_state+0x1f0>)
   18864:	4632      	mov	r2, r6
   18866:	2157      	movs	r1, #87	; 0x57
   18868:	e76a      	b.n	18740 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1886a:	78a3      	ldrb	r3, [r4, #2]
   1886c:	2b01      	cmp	r3, #1
   1886e:	d1ad      	bne.n	187cc <bt_conn_set_state+0xa8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   18870:	4b29      	ldr	r3, [pc, #164]	; (18918 <bt_conn_set_state+0x1f4>)
   18872:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   18874:	3460      	adds	r4, #96	; 0x60
					K_MSEC(10 * bt_dev.create_param.timeout));
   18876:	b1c0      	cbz	r0, 188aa <bt_conn_set_state+0x186>
   18878:	230a      	movs	r3, #10
   1887a:	4358      	muls	r0, r3
   1887c:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   1887e:	03c9      	lsls	r1, r1, #15
   18880:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   18884:	f240 33e7 	movw	r3, #999	; 0x3e7
   18888:	03c0      	lsls	r0, r0, #15
   1888a:	18c0      	adds	r0, r0, r3
   1888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18890:	f04f 0300 	mov.w	r3, #0
   18894:	f141 0100 	adc.w	r1, r1, #0
   18898:	f7e7 fc32 	bl	100 <__aeabi_uldivmod>
   1889c:	4602      	mov	r2, r0
   1889e:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   188a0:	4620      	mov	r0, r4
}
   188a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   188a6:	f00c be59 	b.w	2555c <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
   188aa:	4601      	mov	r1, r0
   188ac:	e7e7      	b.n	1887e <bt_conn_set_state+0x15a>
	return list->head;
   188ae:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   188b0:	b921      	cbnz	r1, 188bc <bt_conn_set_state+0x198>
   188b2:	f383 8811 	msr	BASEPRI, r3
   188b6:	f3bf 8f6f 	isb	sy
		if (!node) {
   188ba:	e787      	b.n	187cc <bt_conn_set_state+0xa8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   188bc:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   188be:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   188c0:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   188c2:	4281      	cmp	r1, r0
	list->tail = node;
   188c4:	bf08      	it	eq
   188c6:	61a2      	streq	r2, [r4, #24]
   188c8:	f383 8811 	msr	BASEPRI, r3
   188cc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   188d0:	f04f 0240 	mov.w	r2, #64	; 0x40
   188d4:	f3ef 8311 	mrs	r3, BASEPRI
   188d8:	f382 8812 	msr	BASEPRI_MAX, r2
   188dc:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   188e0:	68ca      	ldr	r2, [r1, #12]
   188e2:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   188e4:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   188e6:	f383 8811 	msr	BASEPRI, r3
   188ea:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   188ee:	4620      	mov	r0, r4
   188f0:	f7ff fc92 	bl	18218 <conn_tx_destroy>
   188f4:	e758      	b.n	187a8 <bt_conn_set_state+0x84>
		LOG_WRN("no valid (%u) state was set", state);
   188f6:	4809      	ldr	r0, [pc, #36]	; (1891c <bt_conn_set_state+0x1f8>)
   188f8:	4632      	mov	r2, r6
   188fa:	2157      	movs	r1, #87	; 0x57
   188fc:	e720      	b.n	18740 <bt_conn_set_state+0x1c>
   188fe:	bf00      	nop
   18900:	0002f7c4 	.word	0x0002f7c4
   18904:	00032303 	.word	0x00032303
   18908:	0003230d 	.word	0x0003230d
   1890c:	20000478 	.word	0x20000478
   18910:	20000790 	.word	0x20000790
   18914:	00032323 	.word	0x00032323
   18918:	20000378 	.word	0x20000378
   1891c:	0003233f 	.word	0x0003233f

00018920 <bt_conn_index>:
		index = conn - acl_conns;
   18920:	4a0a      	ldr	r2, [pc, #40]	; (1894c <bt_conn_index+0x2c>)
   18922:	490b      	ldr	r1, [pc, #44]	; (18950 <bt_conn_index+0x30>)
{
   18924:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   18926:	1a83      	subs	r3, r0, r2
   18928:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1892a:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1892c:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18930:	d00a      	beq.n	18948 <bt_conn_index+0x28>
   18932:	4908      	ldr	r1, [pc, #32]	; (18954 <bt_conn_index+0x34>)
   18934:	4808      	ldr	r0, [pc, #32]	; (18958 <bt_conn_index+0x38>)
   18936:	f240 42b6 	movw	r2, #1206	; 0x4b6
   1893a:	f012 f907 	bl	2ab4c <assert_print>
   1893e:	4805      	ldr	r0, [pc, #20]	; (18954 <bt_conn_index+0x34>)
   18940:	f240 41b6 	movw	r1, #1206	; 0x4b6
   18944:	f012 f8fb 	bl	2ab3e <assert_post_action>
}
   18948:	b2d8      	uxtb	r0, r3
   1894a:	bd08      	pop	{r3, pc}
   1894c:	20001e50 	.word	0x20001e50
   18950:	c28f5c29 	.word	0xc28f5c29
   18954:	000321bd 	.word	0x000321bd
   18958:	0003013d 	.word	0x0003013d

0001895c <bt_conn_create_pdu_timeout>:
{
   1895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1895e:	4604      	mov	r4, r0
   18960:	460d      	mov	r5, r1
   18962:	4617      	mov	r7, r2
   18964:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   18966:	f016 f8e4 	bl	2eb32 <k_is_in_isr>
   1896a:	b150      	cbz	r0, 18982 <bt_conn_create_pdu_timeout+0x26>
   1896c:	4910      	ldr	r1, [pc, #64]	; (189b0 <bt_conn_create_pdu_timeout+0x54>)
   1896e:	4811      	ldr	r0, [pc, #68]	; (189b4 <bt_conn_create_pdu_timeout+0x58>)
   18970:	f240 42d2 	movw	r2, #1234	; 0x4d2
   18974:	f012 f8ea 	bl	2ab4c <assert_print>
   18978:	480d      	ldr	r0, [pc, #52]	; (189b0 <bt_conn_create_pdu_timeout+0x54>)
   1897a:	f240 41d2 	movw	r1, #1234	; 0x4d2
   1897e:	f012 f8de 	bl	2ab3e <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   18982:	490d      	ldr	r1, [pc, #52]	; (189b8 <bt_conn_create_pdu_timeout+0x5c>)
   18984:	463a      	mov	r2, r7
   18986:	2c00      	cmp	r4, #0
   18988:	bf14      	ite	ne
   1898a:	4620      	movne	r0, r4
   1898c:	4608      	moveq	r0, r1
   1898e:	4633      	mov	r3, r6
   18990:	f015 faa1 	bl	2ded6 <net_buf_alloc_fixed>
	if (!buf) {
   18994:	4604      	mov	r4, r0
   18996:	b928      	cbnz	r0, 189a4 <bt_conn_create_pdu_timeout+0x48>
		LOG_WRN("Unable to allocate buffer within timeout");
   18998:	4808      	ldr	r0, [pc, #32]	; (189bc <bt_conn_create_pdu_timeout+0x60>)
   1899a:	2157      	movs	r1, #87	; 0x57
   1899c:	f012 f8e4 	bl	2ab68 <z_log_minimal_printk>
}
   189a0:	4620      	mov	r0, r4
   189a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   189a4:	1d29      	adds	r1, r5, #4
   189a6:	300c      	adds	r0, #12
   189a8:	f006 f9a4 	bl	1ecf4 <net_buf_simple_reserve>
	return buf;
   189ac:	e7f8      	b.n	189a0 <bt_conn_create_pdu_timeout+0x44>
   189ae:	bf00      	nop
   189b0:	000321bd 	.word	0x000321bd
   189b4:	0003013d 	.word	0x0003013d
   189b8:	20000bd4 	.word	0x20000bd4
   189bc:	00032360 	.word	0x00032360

000189c0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   189c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   189c2:	1d03      	adds	r3, r0, #4
{
   189c4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   189c6:	4618      	mov	r0, r3
   189c8:	f013 faf1 	bl	2bfae <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   189cc:	0582      	lsls	r2, r0, #22
   189ce:	d512      	bpl.n	189f6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   189d0:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   189d4:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   189d8:	4291      	cmp	r1, r2
   189da:	d80c      	bhi.n	189f6 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   189dc:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   189e0:	4291      	cmp	r1, r2
   189e2:	d308      	bcc.n	189f6 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   189e4:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   189e8:	4291      	cmp	r1, r2
   189ea:	d104      	bne.n	189f6 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   189ec:	f46f 7100 	mvn.w	r1, #512	; 0x200
   189f0:	4618      	mov	r0, r3
   189f2:	f013 facd 	bl	2bf90 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   189f6:	4b16      	ldr	r3, [pc, #88]	; (18a50 <notify_le_param_updated+0x90>)
   189f8:	681d      	ldr	r5, [r3, #0]
   189fa:	b975      	cbnz	r5, 18a1a <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   189fc:	4d15      	ldr	r5, [pc, #84]	; (18a54 <notify_le_param_updated+0x94>)
   189fe:	4f16      	ldr	r7, [pc, #88]	; (18a58 <notify_le_param_updated+0x98>)
   18a00:	42bd      	cmp	r5, r7
   18a02:	d922      	bls.n	18a4a <notify_le_param_updated+0x8a>
   18a04:	4915      	ldr	r1, [pc, #84]	; (18a5c <notify_le_param_updated+0x9c>)
   18a06:	4816      	ldr	r0, [pc, #88]	; (18a60 <notify_le_param_updated+0xa0>)
   18a08:	f240 52a5 	movw	r2, #1445	; 0x5a5
   18a0c:	f012 f89e 	bl	2ab4c <assert_print>
   18a10:	4812      	ldr	r0, [pc, #72]	; (18a5c <notify_le_param_updated+0x9c>)
   18a12:	f240 51a5 	movw	r1, #1445	; 0x5a5
   18a16:	f012 f892 	bl	2ab3e <assert_post_action>
		if (cb->le_param_updated) {
   18a1a:	68ee      	ldr	r6, [r5, #12]
   18a1c:	b13e      	cbz	r6, 18a2e <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   18a1e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18a22:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18a26:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18a2a:	4620      	mov	r0, r4
   18a2c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   18a2e:	69ad      	ldr	r5, [r5, #24]
   18a30:	e7e3      	b.n	189fa <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   18a32:	68ee      	ldr	r6, [r5, #12]
   18a34:	b13e      	cbz	r6, 18a46 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   18a36:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18a3a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18a3e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18a42:	4620      	mov	r0, r4
   18a44:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a46:	351c      	adds	r5, #28
   18a48:	e7da      	b.n	18a00 <notify_le_param_updated+0x40>
   18a4a:	d3f2      	bcc.n	18a32 <notify_le_param_updated+0x72>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   18a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a4e:	bf00      	nop
   18a50:	20003360 	.word	0x20003360
   18a54:	0002f2e4 	.word	0x0002f2e4
   18a58:	0002f300 	.word	0x0002f300
   18a5c:	000321bd 	.word	0x000321bd
   18a60:	0003013d 	.word	0x0003013d

00018a64 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   18a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a68:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18a6a:	4608      	mov	r0, r1
{
   18a6c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18a6e:	f013 f9eb 	bl	2be48 <bt_le_conn_params_valid>
   18a72:	4605      	mov	r5, r0
   18a74:	b918      	cbnz	r0, 18a7e <le_param_req+0x1a>
		return false;
   18a76:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18a78:	4628      	mov	r0, r5
   18a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18a7e:	4b19      	ldr	r3, [pc, #100]	; (18ae4 <le_param_req+0x80>)
   18a80:	681e      	ldr	r6, [r3, #0]
   18a82:	b97e      	cbnz	r6, 18aa4 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a84:	4e18      	ldr	r6, [pc, #96]	; (18ae8 <le_param_req+0x84>)
   18a86:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18aec <le_param_req+0x88>
   18a8a:	4546      	cmp	r6, r8
   18a8c:	d923      	bls.n	18ad6 <le_param_req+0x72>
   18a8e:	4918      	ldr	r1, [pc, #96]	; (18af0 <le_param_req+0x8c>)
   18a90:	4818      	ldr	r0, [pc, #96]	; (18af4 <le_param_req+0x90>)
   18a92:	f240 52ed 	movw	r2, #1517	; 0x5ed
   18a96:	f012 f859 	bl	2ab4c <assert_print>
   18a9a:	4815      	ldr	r0, [pc, #84]	; (18af0 <le_param_req+0x8c>)
   18a9c:	f240 51ed 	movw	r1, #1517	; 0x5ed
   18aa0:	f012 f84d 	bl	2ab3e <assert_post_action>
		if (!cb->le_param_req) {
   18aa4:	68b3      	ldr	r3, [r6, #8]
   18aa6:	b90b      	cbnz	r3, 18aac <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   18aa8:	69b6      	ldr	r6, [r6, #24]
   18aaa:	e7ea      	b.n	18a82 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   18aac:	4621      	mov	r1, r4
   18aae:	4638      	mov	r0, r7
   18ab0:	4798      	blx	r3
   18ab2:	2800      	cmp	r0, #0
   18ab4:	d0df      	beq.n	18a76 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18ab6:	4620      	mov	r0, r4
   18ab8:	f013 f9c6 	bl	2be48 <bt_le_conn_params_valid>
   18abc:	2800      	cmp	r0, #0
   18abe:	d1f3      	bne.n	18aa8 <le_param_req+0x44>
   18ac0:	e7d9      	b.n	18a76 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   18ac2:	4621      	mov	r1, r4
   18ac4:	4638      	mov	r0, r7
   18ac6:	4798      	blx	r3
   18ac8:	2800      	cmp	r0, #0
   18aca:	d0d4      	beq.n	18a76 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18acc:	4620      	mov	r0, r4
   18ace:	f013 f9bb 	bl	2be48 <bt_le_conn_params_valid>
   18ad2:	b920      	cbnz	r0, 18ade <le_param_req+0x7a>
   18ad4:	e7cf      	b.n	18a76 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18ad6:	d2cf      	bcs.n	18a78 <le_param_req+0x14>
		if (!cb->le_param_req) {
   18ad8:	68b3      	ldr	r3, [r6, #8]
   18ada:	2b00      	cmp	r3, #0
   18adc:	d1f1      	bne.n	18ac2 <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18ade:	361c      	adds	r6, #28
   18ae0:	e7d3      	b.n	18a8a <le_param_req+0x26>
   18ae2:	bf00      	nop
   18ae4:	20003360 	.word	0x20003360
   18ae8:	0002f2e4 	.word	0x0002f2e4
   18aec:	0002f300 	.word	0x0002f300
   18af0:	000321bd 	.word	0x000321bd
   18af4:	0003013d 	.word	0x0003013d

00018af8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   18af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18afc:	78c3      	ldrb	r3, [r0, #3]
{
   18afe:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18b00:	b9bb      	cbnz	r3, 18b32 <bt_conn_identity_resolved+0x3a>
		rpa = &conn->le.resp_addr;
   18b02:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18b06:	4b16      	ldr	r3, [pc, #88]	; (18b60 <bt_conn_identity_resolved+0x68>)
   18b08:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18b0a:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   18b0e:	b99d      	cbnz	r5, 18b38 <bt_conn_identity_resolved+0x40>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b10:	4d14      	ldr	r5, [pc, #80]	; (18b64 <bt_conn_identity_resolved+0x6c>)
   18b12:	4f15      	ldr	r7, [pc, #84]	; (18b68 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18b14:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b18:	42bd      	cmp	r5, r7
   18b1a:	d91d      	bls.n	18b58 <bt_conn_identity_resolved+0x60>
   18b1c:	4913      	ldr	r1, [pc, #76]	; (18b6c <bt_conn_identity_resolved+0x74>)
   18b1e:	4814      	ldr	r0, [pc, #80]	; (18b70 <bt_conn_identity_resolved+0x78>)
   18b20:	f240 72bc 	movw	r2, #1980	; 0x7bc
   18b24:	f012 f812 	bl	2ab4c <assert_print>
   18b28:	4810      	ldr	r0, [pc, #64]	; (18b6c <bt_conn_identity_resolved+0x74>)
   18b2a:	f240 71bc 	movw	r1, #1980	; 0x7bc
   18b2e:	f012 f806 	bl	2ab3e <assert_post_action>
		rpa = &conn->le.init_addr;
   18b32:	f100 0697 	add.w	r6, r0, #151	; 0x97
   18b36:	e7e6      	b.n	18b06 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   18b38:	692b      	ldr	r3, [r5, #16]
   18b3a:	b11b      	cbz	r3, 18b44 <bt_conn_identity_resolved+0x4c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18b3c:	463a      	mov	r2, r7
   18b3e:	4631      	mov	r1, r6
   18b40:	4620      	mov	r0, r4
   18b42:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18b44:	69ad      	ldr	r5, [r5, #24]
   18b46:	e7e2      	b.n	18b0e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   18b48:	692b      	ldr	r3, [r5, #16]
   18b4a:	b11b      	cbz	r3, 18b54 <bt_conn_identity_resolved+0x5c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18b4c:	4642      	mov	r2, r8
   18b4e:	4631      	mov	r1, r6
   18b50:	4620      	mov	r0, r4
   18b52:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b54:	351c      	adds	r5, #28
   18b56:	e7df      	b.n	18b18 <bt_conn_identity_resolved+0x20>
   18b58:	d3f6      	bcc.n	18b48 <bt_conn_identity_resolved+0x50>
		}
	}
}
   18b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b5e:	bf00      	nop
   18b60:	20003360 	.word	0x20003360
   18b64:	0002f2e4 	.word	0x0002f2e4
   18b68:	0002f300 	.word	0x0002f300
   18b6c:	000321bd 	.word	0x000321bd
   18b70:	0003013d 	.word	0x0003013d

00018b74 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   18b76:	7a43      	ldrb	r3, [r0, #9]
   18b78:	7283      	strb	r3, [r0, #10]
{
   18b7a:	4604      	mov	r4, r0
   18b7c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18b7e:	f013 fb70 	bl	2c262 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18b82:	4b12      	ldr	r3, [pc, #72]	; (18bcc <bt_conn_security_changed+0x58>)
   18b84:	681d      	ldr	r5, [r3, #0]
   18b86:	b975      	cbnz	r5, 18ba6 <bt_conn_security_changed+0x32>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b88:	4d11      	ldr	r5, [pc, #68]	; (18bd0 <bt_conn_security_changed+0x5c>)
   18b8a:	4f12      	ldr	r7, [pc, #72]	; (18bd4 <bt_conn_security_changed+0x60>)
   18b8c:	42bd      	cmp	r5, r7
   18b8e:	d91a      	bls.n	18bc6 <bt_conn_security_changed+0x52>
   18b90:	4911      	ldr	r1, [pc, #68]	; (18bd8 <bt_conn_security_changed+0x64>)
   18b92:	4812      	ldr	r0, [pc, #72]	; (18bdc <bt_conn_security_changed+0x68>)
   18b94:	f640 0228 	movw	r2, #2088	; 0x828
   18b98:	f011 ffd8 	bl	2ab4c <assert_print>
   18b9c:	480e      	ldr	r0, [pc, #56]	; (18bd8 <bt_conn_security_changed+0x64>)
   18b9e:	f640 0128 	movw	r1, #2088	; 0x828
   18ba2:	f011 ffcc 	bl	2ab3e <assert_post_action>
		if (cb->security_changed) {
   18ba6:	696b      	ldr	r3, [r5, #20]
   18ba8:	b11b      	cbz	r3, 18bb2 <bt_conn_security_changed+0x3e>
			cb->security_changed(conn, conn->sec_level, err);
   18baa:	7a61      	ldrb	r1, [r4, #9]
   18bac:	4632      	mov	r2, r6
   18bae:	4620      	mov	r0, r4
   18bb0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18bb2:	69ad      	ldr	r5, [r5, #24]
   18bb4:	e7e7      	b.n	18b86 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   18bb6:	696b      	ldr	r3, [r5, #20]
   18bb8:	b11b      	cbz	r3, 18bc2 <bt_conn_security_changed+0x4e>
			cb->security_changed(conn, conn->sec_level, err);
   18bba:	7a61      	ldrb	r1, [r4, #9]
   18bbc:	4632      	mov	r2, r6
   18bbe:	4620      	mov	r0, r4
   18bc0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18bc2:	351c      	adds	r5, #28
   18bc4:	e7e2      	b.n	18b8c <bt_conn_security_changed+0x18>
   18bc6:	d3f6      	bcc.n	18bb6 <bt_conn_security_changed+0x42>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   18bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bca:	bf00      	nop
   18bcc:	20003360 	.word	0x20003360
   18bd0:	0002f2e4 	.word	0x0002f2e4
   18bd4:	0002f300 	.word	0x0002f300
   18bd8:	000321bd 	.word	0x000321bd
   18bdc:	0003013d 	.word	0x0003013d

00018be0 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   18be0:	4b02      	ldr	r3, [pc, #8]	; (18bec <bt_conn_cb_register+0xc>)
   18be2:	681a      	ldr	r2, [r3, #0]
   18be4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   18be6:	6018      	str	r0, [r3, #0]
}
   18be8:	4770      	bx	lr
   18bea:	bf00      	nop
   18bec:	20003360 	.word	0x20003360

00018bf0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18bf0:	b570      	push	{r4, r5, r6, lr}
   18bf2:	4606      	mov	r6, r0
   18bf4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18bf6:	480a      	ldr	r0, [pc, #40]	; (18c20 <bt_conn_add_le+0x30>)
   18bf8:	2101      	movs	r1, #1
   18bfa:	f7ff fbd3 	bl	183a4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   18bfe:	4604      	mov	r4, r0
   18c00:	b160      	cbz	r0, 18c1c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   18c02:	7206      	strb	r6, [r0, #8]
   18c04:	2207      	movs	r2, #7
   18c06:	4629      	mov	r1, r5
   18c08:	3090      	adds	r0, #144	; 0x90
   18c0a:	f012 ff75 	bl	2baf8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   18c0e:	2301      	movs	r3, #1
   18c10:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18c12:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18c14:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18c16:	4b03      	ldr	r3, [pc, #12]	; (18c24 <bt_conn_add_le+0x34>)
   18c18:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18c1c:	4620      	mov	r0, r4
   18c1e:	bd70      	pop	{r4, r5, r6, pc}
   18c20:	20001e50 	.word	0x20001e50
   18c24:	00280018 	.word	0x00280018

00018c28 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18c28:	b570      	push	{r4, r5, r6, lr}
   18c2a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c2c:	480a      	ldr	r0, [pc, #40]	; (18c58 <bt_conn_lookup_addr_le+0x30>)
{
   18c2e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c30:	f7ff fd24 	bl	1867c <bt_conn_ref>
   18c34:	4604      	mov	r4, r0

		if (!conn) {
   18c36:	b120      	cbz	r0, 18c42 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18c38:	7883      	ldrb	r3, [r0, #2]
   18c3a:	2b01      	cmp	r3, #1
   18c3c:	d004      	beq.n	18c48 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   18c3e:	f7ff fd49 	bl	186d4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18c42:	2400      	movs	r4, #0
}
   18c44:	4620      	mov	r0, r4
   18c46:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18c48:	4632      	mov	r2, r6
   18c4a:	4629      	mov	r1, r5
   18c4c:	f013 fa59 	bl	2c102 <bt_conn_is_peer_addr_le>
   18c50:	2800      	cmp	r0, #0
   18c52:	d1f7      	bne.n	18c44 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18c54:	4620      	mov	r0, r4
   18c56:	e7f2      	b.n	18c3e <bt_conn_lookup_addr_le+0x16>
   18c58:	20001e50 	.word	0x20001e50

00018c5c <bt_conn_exists_le>:
{
   18c5c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18c5e:	f7ff ffe3 	bl	18c28 <bt_conn_lookup_addr_le>
	if (conn) {
   18c62:	4604      	mov	r4, r0
   18c64:	b170      	cbz	r0, 18c84 <bt_conn_exists_le+0x28>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   18c66:	7b43      	ldrb	r3, [r0, #13]
   18c68:	4807      	ldr	r0, [pc, #28]	; (18c88 <bt_conn_exists_le+0x2c>)
   18c6a:	2b08      	cmp	r3, #8
   18c6c:	bf96      	itet	ls
   18c6e:	4a07      	ldrls	r2, [pc, #28]	; (18c8c <bt_conn_exists_le+0x30>)
   18c70:	4a07      	ldrhi	r2, [pc, #28]	; (18c90 <bt_conn_exists_le+0x34>)
   18c72:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   18c76:	2157      	movs	r1, #87	; 0x57
   18c78:	f011 ff76 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_unref(conn);
   18c7c:	4620      	mov	r0, r4
   18c7e:	f7ff fd29 	bl	186d4 <bt_conn_unref>
		return true;
   18c82:	2001      	movs	r0, #1
}
   18c84:	bd10      	pop	{r4, pc}
   18c86:	bf00      	nop
   18c88:	0003238e 	.word	0x0003238e
   18c8c:	0002f7c4 	.word	0x0002f7c4
   18c90:	00032303 	.word	0x00032303

00018c94 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c96:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c98:	480e      	ldr	r0, [pc, #56]	; (18cd4 <bt_conn_lookup_state_le+0x40>)
{
   18c9a:	460e      	mov	r6, r1
   18c9c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c9e:	f7ff fced 	bl	1867c <bt_conn_ref>

		if (!conn) {
   18ca2:	4604      	mov	r4, r0
   18ca4:	b120      	cbz	r0, 18cb0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18ca6:	7883      	ldrb	r3, [r0, #2]
   18ca8:	2b01      	cmp	r3, #1
   18caa:	d003      	beq.n	18cb4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18cac:	f7ff fd12 	bl	186d4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18cb0:	2400      	movs	r4, #0
   18cb2:	e00d      	b.n	18cd0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18cb4:	b136      	cbz	r6, 18cc4 <bt_conn_lookup_state_le+0x30>
   18cb6:	4632      	mov	r2, r6
   18cb8:	4629      	mov	r1, r5
   18cba:	f013 fa22 	bl	2c102 <bt_conn_is_peer_addr_le>
   18cbe:	b908      	cbnz	r0, 18cc4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18cc0:	4620      	mov	r0, r4
   18cc2:	e7f3      	b.n	18cac <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18cc4:	7b63      	ldrb	r3, [r4, #13]
   18cc6:	42bb      	cmp	r3, r7
   18cc8:	d1fa      	bne.n	18cc0 <bt_conn_lookup_state_le+0x2c>
   18cca:	7a23      	ldrb	r3, [r4, #8]
   18ccc:	42ab      	cmp	r3, r5
   18cce:	d1f7      	bne.n	18cc0 <bt_conn_lookup_state_le+0x2c>
}
   18cd0:	4620      	mov	r0, r4
   18cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18cd4:	20001e50 	.word	0x20001e50

00018cd8 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   18cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18cdc:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18cde:	4855      	ldr	r0, [pc, #340]	; (18e34 <bt_conn_le_create+0x15c>)
   18ce0:	f013 f965 	bl	2bfae <atomic_get>
   18ce4:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18ce6:	0741      	lsls	r1, r0, #29
{
   18ce8:	4617      	mov	r7, r2
   18cea:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18cec:	d405      	bmi.n	18cfa <bt_conn_le_create+0x22>
		return -EAGAIN;
   18cee:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   18cf2:	4628      	mov	r0, r5
   18cf4:	b003      	add	sp, #12
   18cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   18cfa:	4610      	mov	r0, r2
   18cfc:	f013 f8a4 	bl	2be48 <bt_le_conn_params_valid>
   18d00:	b910      	cbnz	r0, 18d08 <bt_conn_le_create+0x30>
		return -EINVAL;
   18d02:	f06f 0515 	mvn.w	r5, #21
   18d06:	e7f4      	b.n	18cf2 <bt_conn_le_create+0x1a>
	const uint32_t timeout_max = (MSEC_PER_SEC / 10) * bt_dev.rpa_timeout;
   18d08:	4d4b      	ldr	r5, [pc, #300]	; (18e38 <bt_conn_le_create+0x160>)
   18d0a:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   18d0e:	2264      	movs	r2, #100	; 0x64
   18d10:	4353      	muls	r3, r2
	if (param->timeout > timeout_max) {
   18d12:	89b2      	ldrh	r2, [r6, #12]
   18d14:	4293      	cmp	r3, r2
   18d16:	d3f4      	bcc.n	18d02 <bt_conn_le_create+0x2a>
   18d18:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   18d1c:	f013 f947 	bl	2bfae <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18d20:	0602      	lsls	r2, r0, #24
   18d22:	d4e4      	bmi.n	18cee <bt_conn_le_create+0x16>
   18d24:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   18d28:	f013 f941 	bl	2bfae <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   18d2c:	04c3      	lsls	r3, r0, #19
   18d2e:	f3c0 3900 	ubfx	r9, r0, #12, #1
   18d32:	d478      	bmi.n	18e26 <bt_conn_le_create+0x14e>
	if (!bt_id_scan_random_addr_check()) {
   18d34:	f013 f8ee 	bl	2bf14 <bt_id_scan_random_addr_check>
   18d38:	2800      	cmp	r0, #0
   18d3a:	d0e2      	beq.n	18d02 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   18d3c:	4621      	mov	r1, r4
   18d3e:	4648      	mov	r0, r9
   18d40:	f7ff ff8c 	bl	18c5c <bt_conn_exists_le>
   18d44:	2800      	cmp	r0, #0
   18d46:	d1dc      	bne.n	18d02 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   18d48:	7823      	ldrb	r3, [r4, #0]
   18d4a:	3b02      	subs	r3, #2
   18d4c:	2b01      	cmp	r3, #1
   18d4e:	d846      	bhi.n	18dde <bt_conn_le_create+0x106>
   18d50:	2207      	movs	r2, #7
   18d52:	4621      	mov	r1, r4
   18d54:	4668      	mov	r0, sp
   18d56:	f012 fecf 	bl	2baf8 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   18d5a:	f89d 3000 	ldrb.w	r3, [sp]
   18d5e:	3b02      	subs	r3, #2
   18d60:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   18d64:	4669      	mov	r1, sp
   18d66:	2000      	movs	r0, #0
   18d68:	f7ff ff42 	bl	18bf0 <bt_conn_add_le>
	if (!conn) {
   18d6c:	4604      	mov	r4, r0
   18d6e:	2800      	cmp	r0, #0
   18d70:	d05c      	beq.n	18e2c <bt_conn_le_create+0x154>
	conn->le.interval_min = param->interval_min;
   18d72:	883b      	ldrh	r3, [r7, #0]
   18d74:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   18d78:	887b      	ldrh	r3, [r7, #2]
   18d7a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   18d7e:	88bb      	ldrh	r3, [r7, #4]
   18d80:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18d84:	88fb      	ldrh	r3, [r7, #6]
   18d86:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   18d8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   18d8e:	4f2b      	ldr	r7, [pc, #172]	; (18e3c <bt_conn_le_create+0x164>)
   18d90:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   18d94:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   18d96:	2b00      	cmp	r3, #0
   18d98:	bf08      	it	eq
   18d9a:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   18d9e:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   18da0:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   18da2:	b903      	cbnz	r3, 18da6 <bt_conn_le_create+0xce>
   18da4:	89ab      	ldrh	r3, [r5, #12]
   18da6:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   18da8:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   18daa:	b903      	cbnz	r3, 18dae <bt_conn_le_create+0xd6>
   18dac:	89eb      	ldrh	r3, [r5, #14]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18dae:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
	bt_dev.create_param.window_coded =
   18db2:	826b      	strh	r3, [r5, #18]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18db4:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   18db8:	429a      	cmp	r2, r3
   18dba:	d91d      	bls.n	18df8 <bt_conn_le_create+0x120>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18dbc:	2102      	movs	r1, #2
   18dbe:	4620      	mov	r0, r4
   18dc0:	f7ff fcb0 	bl	18724 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   18dc4:	2001      	movs	r0, #1
   18dc6:	f7fe feb1 	bl	17b2c <bt_le_scan_update>
		if (err) {
   18dca:	4605      	mov	r5, r0
   18dcc:	b180      	cbz	r0, 18df0 <bt_conn_le_create+0x118>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18dce:	4620      	mov	r0, r4
   18dd0:	2100      	movs	r1, #0
   18dd2:	f7ff fca7 	bl	18724 <bt_conn_set_state>
			bt_conn_unref(conn);
   18dd6:	4620      	mov	r0, r4
   18dd8:	f7ff fc7c 	bl	186d4 <bt_conn_unref>
			return err;
   18ddc:	e789      	b.n	18cf2 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   18dde:	4621      	mov	r1, r4
   18de0:	f013 f88c 	bl	2befc <bt_lookup_id_addr>
   18de4:	2207      	movs	r2, #7
   18de6:	4601      	mov	r1, r0
   18de8:	4668      	mov	r0, sp
   18dea:	f012 fe85 	bl	2baf8 <memcpy>
}
   18dee:	e7b9      	b.n	18d64 <bt_conn_le_create+0x8c>
		*ret_conn = conn;
   18df0:	f8c8 4000 	str.w	r4, [r8]
		return 0;
   18df4:	2500      	movs	r5, #0
   18df6:	e77c      	b.n	18cf2 <bt_conn_le_create+0x1a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   18df8:	2106      	movs	r1, #6
   18dfa:	4620      	mov	r0, r4
   18dfc:	f7ff fc92 	bl	18724 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   18e00:	4620      	mov	r0, r4
   18e02:	f7fd fb13 	bl	1642c <bt_le_create_conn>
	if (err) {
   18e06:	4605      	mov	r5, r0
   18e08:	2800      	cmp	r0, #0
   18e0a:	d0f1      	beq.n	18df0 <bt_conn_le_create+0x118>
		conn->err = 0;
   18e0c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18e0e:	4631      	mov	r1, r6
   18e10:	4620      	mov	r0, r4
		conn->err = 0;
   18e12:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18e14:	f7ff fc86 	bl	18724 <bt_conn_set_state>
		bt_conn_unref(conn);
   18e18:	4620      	mov	r0, r4
   18e1a:	f7ff fc5b 	bl	186d4 <bt_conn_unref>
		bt_le_scan_update(false);
   18e1e:	4630      	mov	r0, r6
   18e20:	f7fe fe84 	bl	17b2c <bt_le_scan_update>
		return err;
   18e24:	e765      	b.n	18cf2 <bt_conn_le_create+0x1a>
		return -EALREADY;
   18e26:	f06f 0577 	mvn.w	r5, #119	; 0x77
   18e2a:	e762      	b.n	18cf2 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   18e2c:	f06f 050b 	mvn.w	r5, #11
   18e30:	e75f      	b.n	18cf2 <bt_conn_le_create+0x1a>
   18e32:	bf00      	nop
   18e34:	20000444 	.word	0x20000444
   18e38:	20000378 	.word	0x20000378
   18e3c:	20000380 	.word	0x20000380

00018e40 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   18e40:	b570      	push	{r4, r5, r6, lr}
   18e42:	4606      	mov	r6, r0
   18e44:	4834      	ldr	r0, [pc, #208]	; (18f18 <bt_le_set_auto_conn+0xd8>)
   18e46:	f013 f8b2 	bl	2bfae <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18e4a:	0740      	lsls	r0, r0, #29
{
   18e4c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18e4e:	d55c      	bpl.n	18f0a <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   18e50:	b929      	cbnz	r1, 18e5e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   18e52:	f013 f85f 	bl	2bf14 <bt_id_scan_random_addr_check>
   18e56:	b940      	cbnz	r0, 18e6a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   18e58:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   18e5c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   18e5e:	4608      	mov	r0, r1
   18e60:	f012 fff2 	bl	2be48 <bt_le_conn_params_valid>
   18e64:	2800      	cmp	r0, #0
   18e66:	d1f4      	bne.n	18e52 <bt_le_set_auto_conn+0x12>
   18e68:	e7f6      	b.n	18e58 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   18e6a:	4631      	mov	r1, r6
   18e6c:	2000      	movs	r0, #0
   18e6e:	f7ff fedb 	bl	18c28 <bt_conn_lookup_addr_le>
	if (!conn) {
   18e72:	4604      	mov	r4, r0
   18e74:	b928      	cbnz	r0, 18e82 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   18e76:	4631      	mov	r1, r6
   18e78:	f7ff feba 	bl	18bf0 <bt_conn_add_le>
		if (!conn) {
   18e7c:	4604      	mov	r4, r0
   18e7e:	2800      	cmp	r0, #0
   18e80:	d046      	beq.n	18f10 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   18e82:	1d20      	adds	r0, r4, #4
	if (param) {
   18e84:	b385      	cbz	r5, 18ee8 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
   18e86:	882b      	ldrh	r3, [r5, #0]
   18e88:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   18e8c:	886b      	ldrh	r3, [r5, #2]
   18e8e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   18e92:	88ab      	ldrh	r3, [r5, #4]
   18e94:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18e98:	88eb      	ldrh	r3, [r5, #6]
   18e9a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
   18e9e:	f3bf 8f5b 	dmb	ish
   18ea2:	e850 3f00 	ldrex	r3, [r0]
   18ea6:	f043 0201 	orr.w	r2, r3, #1
   18eaa:	e840 2100 	strex	r1, r2, [r0]
   18eae:	2900      	cmp	r1, #0
   18eb0:	d1f7      	bne.n	18ea2 <bt_le_set_auto_conn+0x62>
   18eb2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   18eb6:	07d9      	lsls	r1, r3, #31
   18eb8:	d402      	bmi.n	18ec0 <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
   18eba:	4620      	mov	r0, r4
   18ebc:	f7ff fbde 	bl	1867c <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   18ec0:	7b63      	ldrb	r3, [r4, #13]
   18ec2:	b963      	cbnz	r3, 18ede <bt_le_set_auto_conn+0x9e>
   18ec4:	4814      	ldr	r0, [pc, #80]	; (18f18 <bt_le_set_auto_conn+0xd8>)
   18ec6:	f013 f872 	bl	2bfae <atomic_get>
   18eca:	0743      	lsls	r3, r0, #29
   18ecc:	d507      	bpl.n	18ede <bt_le_set_auto_conn+0x9e>
		if (param) {
   18ece:	b11d      	cbz	r5, 18ed8 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18ed0:	2102      	movs	r1, #2
   18ed2:	4620      	mov	r0, r4
   18ed4:	f7ff fc26 	bl	18724 <bt_conn_set_state>
		bt_le_scan_update(false);
   18ed8:	2000      	movs	r0, #0
   18eda:	f7fe fe27 	bl	17b2c <bt_le_scan_update>
	bt_conn_unref(conn);
   18ede:	4620      	mov	r0, r4
   18ee0:	f7ff fbf8 	bl	186d4 <bt_conn_unref>
	return 0;
   18ee4:	2000      	movs	r0, #0
   18ee6:	e7b9      	b.n	18e5c <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ee8:	f06f 0101 	mvn.w	r1, #1
   18eec:	f013 f850 	bl	2bf90 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   18ef0:	07c2      	lsls	r2, r0, #31
   18ef2:	d5e5      	bpl.n	18ec0 <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
   18ef4:	4620      	mov	r0, r4
   18ef6:	f7ff fbed 	bl	186d4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   18efa:	7b63      	ldrb	r3, [r4, #13]
   18efc:	2b02      	cmp	r3, #2
   18efe:	d1df      	bne.n	18ec0 <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18f00:	4629      	mov	r1, r5
   18f02:	4620      	mov	r0, r4
   18f04:	f7ff fc0e 	bl	18724 <bt_conn_set_state>
   18f08:	e7da      	b.n	18ec0 <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
   18f0a:	f06f 000a 	mvn.w	r0, #10
   18f0e:	e7a5      	b.n	18e5c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   18f10:	f06f 000b 	mvn.w	r0, #11
   18f14:	e7a2      	b.n	18e5c <bt_le_set_auto_conn+0x1c>
   18f16:	bf00      	nop
   18f18:	20000444 	.word	0x20000444

00018f1c <send_conn_le_param_update>:
{
   18f1c:	b538      	push	{r3, r4, r5, lr}
   18f1e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18f20:	4608      	mov	r0, r1
{
   18f22:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18f24:	f012 ff90 	bl	2be48 <bt_le_conn_params_valid>
   18f28:	b338      	cbz	r0, 18f7a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18f2a:	4b15      	ldr	r3, [pc, #84]	; (18f80 <send_conn_le_param_update+0x64>)
   18f2c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18f30:	0799      	lsls	r1, r3, #30
   18f32:	d407      	bmi.n	18f44 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   18f34:	78e3      	ldrb	r3, [r4, #3]
   18f36:	b173      	cbz	r3, 18f56 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   18f38:	4629      	mov	r1, r5
   18f3a:	4620      	mov	r0, r4
}
   18f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18f40:	f000 bab4 	b.w	194ac <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18f44:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18f48:	079a      	lsls	r2, r3, #30
   18f4a:	d5f3      	bpl.n	18f34 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18f4c:	1d20      	adds	r0, r4, #4
   18f4e:	f013 f82e 	bl	2bfae <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18f52:	0543      	lsls	r3, r0, #21
   18f54:	d4ee      	bmi.n	18f34 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18f56:	4629      	mov	r1, r5
   18f58:	4620      	mov	r0, r4
   18f5a:	f013 f92b 	bl	2c1b4 <bt_conn_le_conn_update>
		if (rc == 0) {
   18f5e:	b958      	cbnz	r0, 18f78 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   18f60:	882b      	ldrh	r3, [r5, #0]
   18f62:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   18f66:	886b      	ldrh	r3, [r5, #2]
   18f68:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18f6c:	88ab      	ldrh	r3, [r5, #4]
   18f6e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18f72:	88eb      	ldrh	r3, [r5, #6]
   18f74:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   18f78:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18f7a:	f06f 0015 	mvn.w	r0, #21
   18f7e:	e7fb      	b.n	18f78 <send_conn_le_param_update+0x5c>
   18f80:	20000378 	.word	0x20000378

00018f84 <deferred_work>:
{
   18f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18f86:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   18f8a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   18f8c:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18f90:	bb5b      	cbnz	r3, 18fea <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   18f92:	4628      	mov	r0, r5
   18f94:	f013 f94d 	bl	2c232 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18f98:	4b2f      	ldr	r3, [pc, #188]	; (19058 <deferred_work+0xd4>)
   18f9a:	681e      	ldr	r6, [r3, #0]
   18f9c:	b976      	cbnz	r6, 18fbc <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f9e:	4e2f      	ldr	r6, [pc, #188]	; (1905c <deferred_work+0xd8>)
   18fa0:	4f2f      	ldr	r7, [pc, #188]	; (19060 <deferred_work+0xdc>)
   18fa2:	42be      	cmp	r6, r7
   18fa4:	d91a      	bls.n	18fdc <deferred_work+0x58>
   18fa6:	492f      	ldr	r1, [pc, #188]	; (19064 <deferred_work+0xe0>)
   18fa8:	482f      	ldr	r0, [pc, #188]	; (19068 <deferred_work+0xe4>)
   18faa:	f240 526c 	movw	r2, #1388	; 0x56c
   18fae:	f011 fdcd 	bl	2ab4c <assert_print>
   18fb2:	482c      	ldr	r0, [pc, #176]	; (19064 <deferred_work+0xe0>)
   18fb4:	f240 516c 	movw	r1, #1388	; 0x56c
   18fb8:	f011 fdc1 	bl	2ab3e <assert_post_action>
		if (cb->disconnected) {
   18fbc:	6873      	ldr	r3, [r6, #4]
   18fbe:	b11b      	cbz	r3, 18fc8 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   18fc0:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18fc4:	4628      	mov	r0, r5
   18fc6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18fc8:	69b6      	ldr	r6, [r6, #24]
   18fca:	e7e7      	b.n	18f9c <deferred_work+0x18>
		if (cb->disconnected) {
   18fcc:	6873      	ldr	r3, [r6, #4]
   18fce:	b11b      	cbz	r3, 18fd8 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   18fd0:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18fd4:	4628      	mov	r0, r5
   18fd6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18fd8:	361c      	adds	r6, #28
   18fda:	e7e2      	b.n	18fa2 <deferred_work+0x1e>
   18fdc:	d3f6      	bcc.n	18fcc <deferred_work+0x48>
		bt_conn_unref(conn);
   18fde:	4628      	mov	r0, r5
}
   18fe0:	b003      	add	sp, #12
   18fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   18fe6:	f7ff bb75 	b.w	186d4 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   18fea:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18fee:	2b01      	cmp	r3, #1
   18ff0:	d12b      	bne.n	1904a <deferred_work+0xc6>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18ff2:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   18ff6:	b923      	cbnz	r3, 19002 <deferred_work+0x7e>
}
   18ff8:	b003      	add	sp, #12
   18ffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   18ffe:	f7fd ba73 	b.w	164e8 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   19002:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19006:	f46f 7100 	mvn.w	r1, #512	; 0x200
   1900a:	4630      	mov	r0, r6
   1900c:	f012 ffc0 	bl	2bf90 <atomic_and>
   19010:	0583      	lsls	r3, r0, #22
   19012:	d50e      	bpl.n	19032 <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19014:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19016:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
   19018:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1901a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1901c:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   1901e:	4628      	mov	r0, r5
   19020:	f7ff ff7c 	bl	18f1c <send_conn_le_param_update>
		if (!err) {
   19024:	4602      	mov	r2, r0
   19026:	b990      	cbnz	r0, 1904e <deferred_work+0xca>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19028:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1902c:	4630      	mov	r0, r6
   1902e:	f012 ffaf 	bl	2bf90 <atomic_and>
   19032:	f3bf 8f5b 	dmb	ish
   19036:	e856 3f00 	ldrex	r3, [r6]
   1903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1903e:	e846 3200 	strex	r2, r3, [r6]
   19042:	2a00      	cmp	r2, #0
   19044:	d1f7      	bne.n	19036 <deferred_work+0xb2>
   19046:	f3bf 8f5b 	dmb	ish
}
   1904a:	b003      	add	sp, #12
   1904c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1904e:	4807      	ldr	r0, [pc, #28]	; (1906c <deferred_work+0xe8>)
   19050:	2157      	movs	r1, #87	; 0x57
   19052:	f011 fd89 	bl	2ab68 <z_log_minimal_printk>
   19056:	e7ec      	b.n	19032 <deferred_work+0xae>
   19058:	20003360 	.word	0x20003360
   1905c:	0002f2e4 	.word	0x0002f2e4
   19060:	0002f300 	.word	0x0002f300
   19064:	000321bd 	.word	0x000321bd
   19068:	0003013d 	.word	0x0003013d
   1906c:	000323b6 	.word	0x000323b6

00019070 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19070:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19072:	4801      	ldr	r0, [pc, #4]	; (19078 <bt_conn_create_frag_timeout+0x8>)
   19074:	f7ff bc72 	b.w	1895c <bt_conn_create_pdu_timeout>
   19078:	20000c3c 	.word	0x20000c3c

0001907c <create_frag>:
{
   1907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19080:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   19082:	f04f 33ff 	mov.w	r3, #4294967295
   19086:	f04f 32ff 	mov.w	r2, #4294967295
   1908a:	2000      	movs	r0, #0
{
   1908c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1908e:	f7ff ffef 	bl	19070 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19092:	7b73      	ldrb	r3, [r6, #13]
   19094:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19096:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19098:	f04f 0600 	mov.w	r6, #0
   1909c:	d005      	beq.n	190aa <create_frag+0x2e>
		net_buf_unref(frag);
   1909e:	f005 ff01 	bl	1eea4 <net_buf_unref>
		return NULL;
   190a2:	4635      	mov	r5, r6
}
   190a4:	4628      	mov	r0, r5
   190a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   190aa:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   190ac:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   190b0:	4e0c      	ldr	r6, [pc, #48]	; (190e4 <create_frag+0x68>)
   190b2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   190b4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   190b8:	f014 ff2e 	bl	2df18 <net_buf_simple_tailroom>
   190bc:	4580      	cmp	r8, r0
   190be:	d20c      	bcs.n	190da <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   190c0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   190c4:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   190c8:	4632      	mov	r2, r6
   190ca:	4638      	mov	r0, r7
   190cc:	f014 ff2c 	bl	2df28 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   190d0:	4631      	mov	r1, r6
   190d2:	4620      	mov	r0, r4
   190d4:	f005 ffb8 	bl	1f048 <net_buf_simple_pull>
   190d8:	e7e4      	b.n	190a4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   190da:	4638      	mov	r0, r7
   190dc:	f014 ff1c 	bl	2df18 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   190e0:	b286      	uxth	r6, r0
   190e2:	e7ef      	b.n	190c4 <create_frag+0x48>
   190e4:	20000378 	.word	0x20000378

000190e8 <bt_conn_process_tx>:
{
   190e8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   190ea:	7b43      	ldrb	r3, [r0, #13]
{
   190ec:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   190ee:	b95b      	cbnz	r3, 19108 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   190f0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   190f4:	3004      	adds	r0, #4
   190f6:	f012 ff4b 	bl	2bf90 <atomic_and>
   190fa:	0643      	lsls	r3, r0, #25
   190fc:	d504      	bpl.n	19108 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   190fe:	4620      	mov	r0, r4
}
   19100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   19104:	f7ff b980 	b.w	18408 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   19108:	2200      	movs	r2, #0
   1910a:	2300      	movs	r3, #0
   1910c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19110:	f014 fee6 	bl	2dee0 <net_buf_get>
	BT_ASSERT(buf);
   19114:	4605      	mov	r5, r0
   19116:	b958      	cbnz	r0, 19130 <bt_conn_process_tx+0x48>
   19118:	4923      	ldr	r1, [pc, #140]	; (191a8 <bt_conn_process_tx+0xc0>)
   1911a:	4824      	ldr	r0, [pc, #144]	; (191ac <bt_conn_process_tx+0xc4>)
   1911c:	f240 321a 	movw	r2, #794	; 0x31a
   19120:	f011 fd14 	bl	2ab4c <assert_print>
   19124:	4040      	eors	r0, r0
   19126:	f380 8811 	msr	BASEPRI, r0
   1912a:	f04f 0003 	mov.w	r0, #3
   1912e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   19130:	4e1f      	ldr	r6, [pc, #124]	; (191b0 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   19132:	8a2a      	ldrh	r2, [r5, #16]
   19134:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   19138:	429a      	cmp	r2, r3
   1913a:	d807      	bhi.n	1914c <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1913c:	2300      	movs	r3, #0
   1913e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   19140:	4629      	mov	r1, r5
   19142:	4620      	mov	r0, r4
   19144:	f7ff f88c 	bl	18260 <send_frag>
	if (!send_buf(conn, buf)) {
   19148:	b968      	cbnz	r0, 19166 <bt_conn_process_tx+0x7e>
   1914a:	e005      	b.n	19158 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   1914c:	4629      	mov	r1, r5
   1914e:	4620      	mov	r0, r4
   19150:	f7ff ff94 	bl	1907c <create_frag>
	if (!frag) {
   19154:	4601      	mov	r1, r0
   19156:	b938      	cbnz	r0, 19168 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19158:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   1915a:	2300      	movs	r3, #0
   1915c:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1915e:	4628      	mov	r0, r5
   19160:	f005 fea0 	bl	1eea4 <net_buf_unref>
		if (tx) {
   19164:	b9ce      	cbnz	r6, 1919a <bt_conn_process_tx+0xb2>
}
   19166:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   19168:	2301      	movs	r3, #1
   1916a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1916c:	4620      	mov	r0, r4
   1916e:	f7ff f877 	bl	18260 <send_frag>
   19172:	2800      	cmp	r0, #0
   19174:	d0f0      	beq.n	19158 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   19176:	8a2a      	ldrh	r2, [r5, #16]
   19178:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   1917c:	429a      	cmp	r2, r3
   1917e:	d802      	bhi.n	19186 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   19180:	2300      	movs	r3, #0
   19182:	2203      	movs	r2, #3
   19184:	e7dc      	b.n	19140 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   19186:	4629      	mov	r1, r5
   19188:	4620      	mov	r0, r4
   1918a:	f7ff ff77 	bl	1907c <create_frag>
		if (!frag) {
   1918e:	4601      	mov	r1, r0
   19190:	2800      	cmp	r0, #0
   19192:	d0e1      	beq.n	19158 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19194:	2301      	movs	r3, #1
   19196:	461a      	mov	r2, r3
   19198:	e7e8      	b.n	1916c <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   1919a:	4631      	mov	r1, r6
   1919c:	4620      	mov	r0, r4
}
   1919e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   191a2:	f7ff b839 	b.w	18218 <conn_tx_destroy>
   191a6:	bf00      	nop
   191a8:	000321bd 	.word	0x000321bd
   191ac:	0003013d 	.word	0x0003013d
   191b0:	20000378 	.word	0x20000378

000191b4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   191b4:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   191b6:	4815      	ldr	r0, [pc, #84]	; (1920c <bt_conn_init+0x58>)
   191b8:	f015 fcea 	bl	2eb90 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   191bc:	4914      	ldr	r1, [pc, #80]	; (19210 <bt_conn_init+0x5c>)
   191be:	4813      	ldr	r0, [pc, #76]	; (1920c <bt_conn_init+0x58>)
   191c0:	f015 fcf3 	bl	2ebaa <k_queue_append>
   191c4:	4913      	ldr	r1, [pc, #76]	; (19214 <bt_conn_init+0x60>)
   191c6:	4811      	ldr	r0, [pc, #68]	; (1920c <bt_conn_init+0x58>)
   191c8:	f015 fcef 	bl	2ebaa <k_queue_append>
   191cc:	4912      	ldr	r1, [pc, #72]	; (19218 <bt_conn_init+0x64>)
   191ce:	480f      	ldr	r0, [pc, #60]	; (1920c <bt_conn_init+0x58>)
   191d0:	f015 fceb 	bl	2ebaa <k_queue_append>
	}

	bt_att_init();
   191d4:	f001 f86e 	bl	1a2b4 <bt_att_init>

	err = bt_smp_init();
   191d8:	f005 f974 	bl	1e4c4 <bt_smp_init>
	if (err) {
   191dc:	4605      	mov	r5, r0
   191de:	b998      	cbnz	r0, 19208 <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
   191e0:	f013 f8aa 	bl	2c338 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   191e4:	480d      	ldr	r0, [pc, #52]	; (1921c <bt_conn_init+0x68>)
   191e6:	f7ff fa49 	bl	1867c <bt_conn_ref>

			if (!conn) {
   191ea:	4604      	mov	r4, r0
   191ec:	b160      	cbz	r0, 19208 <bt_conn_init+0x54>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   191ee:	3004      	adds	r0, #4
   191f0:	f012 fedd 	bl	2bfae <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   191f4:	07c3      	lsls	r3, r0, #31
   191f6:	d504      	bpl.n	19202 <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   191f8:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   191fa:	2102      	movs	r1, #2
   191fc:	4620      	mov	r0, r4
   191fe:	f7ff fa91 	bl	18724 <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   19202:	4620      	mov	r0, r4
   19204:	f7ff fa66 	bl	186d4 <bt_conn_unref>
		}
	}

	return 0;
}
   19208:	4628      	mov	r0, r5
   1920a:	bd38      	pop	{r3, r4, r5, pc}
   1920c:	20000bb8 	.word	0x20000bb8
   19210:	20003330 	.word	0x20003330
   19214:	20003340 	.word	0x20003340
   19218:	20003350 	.word	0x20003350
   1921c:	20001e50 	.word	0x20001e50

00019220 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   19220:	b508      	push	{r3, lr}
   19222:	4602      	mov	r2, r0
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   19224:	4807      	ldr	r0, [pc, #28]	; (19244 <l2cap_accept+0x24>)
   19226:	6803      	ldr	r3, [r0, #0]
   19228:	b923      	cbnz	r3, 19234 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1922a:	4a07      	ldr	r2, [pc, #28]	; (19248 <l2cap_accept+0x28>)
   1922c:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
   1922e:	6008      	str	r0, [r1, #0]

		return 0;
   19230:	4618      	mov	r0, r3
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   19232:	bd08      	pop	{r3, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   19234:	4805      	ldr	r0, [pc, #20]	; (1924c <l2cap_accept+0x2c>)
   19236:	2145      	movs	r1, #69	; 0x45
   19238:	f011 fc96 	bl	2ab68 <z_log_minimal_printk>
   1923c:	f06f 000b 	mvn.w	r0, #11
   19240:	e7f7      	b.n	19232 <l2cap_accept+0x12>
   19242:	bf00      	nop
   19244:	20003370 	.word	0x20003370
   19248:	0002f808 	.word	0x0002f808
   1924c:	00032459 	.word	0x00032459

00019250 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19252:	4605      	mov	r5, r0
   19254:	460f      	mov	r7, r1
   19256:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   19258:	2300      	movs	r3, #0
   1925a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1925e:	2104      	movs	r1, #4
   19260:	2000      	movs	r0, #0
   19262:	f7ff fb7b 	bl	1895c <bt_conn_create_pdu_timeout>
	if (!buf) {
   19266:	4604      	mov	r4, r0
   19268:	b930      	cbnz	r0, 19278 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   1926a:	4807      	ldr	r0, [pc, #28]	; (19288 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   1926c:	462a      	mov	r2, r5
   1926e:	2145      	movs	r1, #69	; 0x45
   19270:	f011 fc7a 	bl	2ab68 <z_log_minimal_printk>
}
   19274:	4620      	mov	r0, r4
   19276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   19278:	2104      	movs	r1, #4
   1927a:	300c      	adds	r0, #12
   1927c:	f005 ff18 	bl	1f0b0 <net_buf_simple_add>
	hdr->code = code;
   19280:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   19282:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   19284:	8046      	strh	r6, [r0, #2]
	return buf;
   19286:	e7f5      	b.n	19274 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   19288:	00032485 	.word	0x00032485

0001928c <bt_l2cap_connected>:
{
   1928c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1928e:	4d2a      	ldr	r5, [pc, #168]	; (19338 <bt_l2cap_connected+0xac>)
   19290:	4f2a      	ldr	r7, [pc, #168]	; (1933c <bt_l2cap_connected+0xb0>)
{
   19292:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19294:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19296:	42bd      	cmp	r5, r7
   19298:	d94a      	bls.n	19330 <bt_l2cap_connected+0xa4>
   1929a:	4929      	ldr	r1, [pc, #164]	; (19340 <bt_l2cap_connected+0xb4>)
   1929c:	4829      	ldr	r0, [pc, #164]	; (19344 <bt_l2cap_connected+0xb8>)
   1929e:	f240 1281 	movw	r2, #385	; 0x181
   192a2:	f011 fc53 	bl	2ab4c <assert_print>
   192a6:	4826      	ldr	r0, [pc, #152]	; (19340 <bt_l2cap_connected+0xb4>)
   192a8:	f240 1181 	movw	r1, #385	; 0x181
   192ac:	f011 fc47 	bl	2ab3e <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   192b0:	686b      	ldr	r3, [r5, #4]
   192b2:	a901      	add	r1, sp, #4
   192b4:	4620      	mov	r0, r4
   192b6:	4798      	blx	r3
   192b8:	2800      	cmp	r0, #0
   192ba:	db34      	blt.n	19326 <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   192bc:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   192be:	882a      	ldrh	r2, [r5, #0]
   192c0:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   192c2:	849a      	strh	r2, [r3, #36]	; 0x24
   192c4:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   192c8:	68a8      	ldr	r0, [r5, #8]
   192ca:	f3bf 8f5b 	dmb	ish
   192ce:	e852 1f00 	ldrex	r1, [r2]
   192d2:	e842 6c00 	strex	ip, r6, [r2]
   192d6:	f1bc 0f00 	cmp.w	ip, #0
   192da:	d1f8      	bne.n	192ce <bt_l2cap_connected+0x42>
   192dc:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   192e0:	609e      	str	r6, [r3, #8]
	return list->tail;
   192e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   192e4:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   192e8:	b9f9      	cbnz	r1, 1932a <bt_l2cap_connected+0x9e>
	list->head = node;
   192ea:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   192ee:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   192f0:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   192f2:	9801      	ldr	r0, [sp, #4]
   192f4:	6843      	ldr	r3, [r0, #4]
   192f6:	681b      	ldr	r3, [r3, #0]
   192f8:	b103      	cbz	r3, 192fc <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   192fa:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192fc:	9b01      	ldr	r3, [sp, #4]
   192fe:	f3bf 8f5b 	dmb	ish
   19302:	3310      	adds	r3, #16
   19304:	e853 1f00 	ldrex	r1, [r3]
   19308:	f041 0101 	orr.w	r1, r1, #1
   1930c:	e843 1200 	strex	r2, r1, [r3]
   19310:	2a00      	cmp	r2, #0
   19312:	d1f7      	bne.n	19304 <bt_l2cap_connected+0x78>
   19314:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19318:	9801      	ldr	r0, [sp, #4]
   1931a:	6843      	ldr	r3, [r0, #4]
   1931c:	69db      	ldr	r3, [r3, #28]
   1931e:	b113      	cbz	r3, 19326 <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   19320:	f100 0110 	add.w	r1, r0, #16
   19324:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19326:	350c      	adds	r5, #12
   19328:	e7b5      	b.n	19296 <bt_l2cap_connected+0xa>
	parent->next = child;
   1932a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1932c:	65a2      	str	r2, [r4, #88]	; 0x58
}
   1932e:	e7de      	b.n	192ee <bt_l2cap_connected+0x62>
   19330:	d3be      	bcc.n	192b0 <bt_l2cap_connected+0x24>
}
   19332:	b003      	add	sp, #12
   19334:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19336:	bf00      	nop
   19338:	0002f2c0 	.word	0x0002f2c0
   1933c:	0002f2e4 	.word	0x0002f2e4
   19340:	000324b2 	.word	0x000324b2
   19344:	0003013d 	.word	0x0003013d

00019348 <l2cap_recv>:
{
   19348:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1934a:	8a0b      	ldrh	r3, [r1, #16]
   1934c:	2b03      	cmp	r3, #3
{
   1934e:	b085      	sub	sp, #20
   19350:	4606      	mov	r6, r0
   19352:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19354:	d804      	bhi.n	19360 <l2cap_recv+0x18>
		LOG_ERR("Too small L2CAP signaling PDU");
   19356:	483a      	ldr	r0, [pc, #232]	; (19440 <l2cap_recv+0xf8>)
   19358:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1935a:	f011 fc05 	bl	2ab68 <z_log_minimal_printk>
		return 0;
   1935e:	e00d      	b.n	1937c <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   19360:	2104      	movs	r1, #4
   19362:	f105 000c 	add.w	r0, r5, #12
   19366:	f005 fe89 	bl	1f07c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1936a:	8a2a      	ldrh	r2, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   1936c:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1936e:	4293      	cmp	r3, r2
   19370:	4604      	mov	r4, r0
   19372:	d006      	beq.n	19382 <l2cap_recv+0x3a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19374:	4833      	ldr	r0, [pc, #204]	; (19444 <l2cap_recv+0xfc>)
   19376:	2145      	movs	r1, #69	; 0x45
   19378:	f011 fbf6 	bl	2ab68 <z_log_minimal_printk>
}
   1937c:	2000      	movs	r0, #0
   1937e:	b005      	add	sp, #20
   19380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19382:	7841      	ldrb	r1, [r0, #1]
   19384:	b911      	cbnz	r1, 1938c <l2cap_recv+0x44>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19386:	4830      	ldr	r0, [pc, #192]	; (19448 <l2cap_recv+0x100>)
   19388:	2145      	movs	r1, #69	; 0x45
   1938a:	e7e6      	b.n	1935a <l2cap_recv+0x12>
	switch (hdr->code) {
   1938c:	7802      	ldrb	r2, [r0, #0]
   1938e:	2a12      	cmp	r2, #18
   19390:	d00f      	beq.n	193b2 <l2cap_recv+0x6a>
   19392:	2a13      	cmp	r2, #19
   19394:	d008      	beq.n	193a8 <l2cap_recv+0x60>
   19396:	2a01      	cmp	r2, #1
   19398:	d0f0      	beq.n	1937c <l2cap_recv+0x34>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1939a:	482c      	ldr	r0, [pc, #176]	; (1944c <l2cap_recv+0x104>)
   1939c:	2157      	movs	r1, #87	; 0x57
   1939e:	f011 fbe3 	bl	2ab68 <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   193a2:	7861      	ldrb	r1, [r4, #1]
   193a4:	6830      	ldr	r0, [r6, #0]
   193a6:	e014      	b.n	193d2 <l2cap_recv+0x8a>
	if (buf->len < sizeof(*rsp)) {
   193a8:	2b01      	cmp	r3, #1
   193aa:	d8e7      	bhi.n	1937c <l2cap_recv+0x34>
		LOG_ERR("Too small LE conn param rsp");
   193ac:	4828      	ldr	r0, [pc, #160]	; (19450 <l2cap_recv+0x108>)
   193ae:	2145      	movs	r1, #69	; 0x45
   193b0:	e7d3      	b.n	1935a <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   193b2:	2b07      	cmp	r3, #7
   193b4:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   193b6:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   193b8:	d802      	bhi.n	193c0 <l2cap_recv+0x78>
		LOG_ERR("Too small LE conn update param req");
   193ba:	4826      	ldr	r0, [pc, #152]	; (19454 <l2cap_recv+0x10c>)
   193bc:	2145      	movs	r1, #69	; 0x45
   193be:	e7cc      	b.n	1935a <l2cap_recv+0x12>
	if (conn->state != BT_CONN_CONNECTED) {
   193c0:	7b63      	ldrb	r3, [r4, #13]
   193c2:	2b07      	cmp	r3, #7
   193c4:	d002      	beq.n	193cc <l2cap_recv+0x84>
		LOG_WRN("Not connected");
   193c6:	4824      	ldr	r0, [pc, #144]	; (19458 <l2cap_recv+0x110>)
   193c8:	2157      	movs	r1, #87	; 0x57
   193ca:	e7c6      	b.n	1935a <l2cap_recv+0x12>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   193cc:	78e7      	ldrb	r7, [r4, #3]
   193ce:	b11f      	cbz	r7, 193d8 <l2cap_recv+0x90>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   193d0:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   193d2:	f012 ff7f 	bl	2c2d4 <l2cap_send_reject.constprop.0>
		break;
   193d6:	e7d1      	b.n	1937c <l2cap_recv+0x34>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   193d8:	8813      	ldrh	r3, [r2, #0]
   193da:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   193de:	8853      	ldrh	r3, [r2, #2]
   193e0:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   193e4:	8893      	ldrh	r3, [r2, #4]
   193e6:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   193ea:	88d3      	ldrh	r3, [r2, #6]
   193ec:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   193f0:	2202      	movs	r2, #2
   193f2:	2013      	movs	r0, #19
   193f4:	f7ff ff2c 	bl	19250 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   193f8:	4605      	mov	r5, r0
   193fa:	2800      	cmp	r0, #0
   193fc:	d0be      	beq.n	1937c <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   193fe:	a902      	add	r1, sp, #8
   19400:	4620      	mov	r0, r4
   19402:	f7ff fb2f 	bl	18a64 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   19406:	2102      	movs	r1, #2
   19408:	4606      	mov	r6, r0
   1940a:	f105 000c 	add.w	r0, r5, #12
   1940e:	f005 fe4f 	bl	1f0b0 <net_buf_simple_add>
	if (accepted) {
   19412:	f086 0301 	eor.w	r3, r6, #1
   19416:	b2db      	uxtb	r3, r3
   19418:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1941a:	462a      	mov	r2, r5
   1941c:	9700      	str	r7, [sp, #0]
   1941e:	463b      	mov	r3, r7
   19420:	2105      	movs	r1, #5
   19422:	4620      	mov	r0, r4
   19424:	f012 ff3d 	bl	2c2a2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19428:	b110      	cbz	r0, 19430 <l2cap_recv+0xe8>
		net_buf_unref(buf);
   1942a:	4628      	mov	r0, r5
   1942c:	f005 fd3a 	bl	1eea4 <net_buf_unref>
	if (accepted) {
   19430:	2e00      	cmp	r6, #0
   19432:	d0a3      	beq.n	1937c <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   19434:	a902      	add	r1, sp, #8
   19436:	4620      	mov	r0, r4
   19438:	f012 febc 	bl	2c1b4 <bt_conn_le_conn_update>
   1943c:	e79e      	b.n	1937c <l2cap_recv+0x34>
   1943e:	bf00      	nop
   19440:	000324e3 	.word	0x000324e3
   19444:	00032506 	.word	0x00032506
   19448:	0003252c 	.word	0x0003252c
   1944c:	000325ae 	.word	0x000325ae
   19450:	00032552 	.word	0x00032552
   19454:	00032573 	.word	0x00032573
   19458:	0003259b 	.word	0x0003259b

0001945c <bt_l2cap_recv>:
{
   1945c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1945e:	8a0b      	ldrh	r3, [r1, #16]
   19460:	2b03      	cmp	r3, #3
{
   19462:	4605      	mov	r5, r0
   19464:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19466:	d808      	bhi.n	1947a <bt_l2cap_recv+0x1e>
		LOG_ERR("Too small L2CAP PDU received");
   19468:	480e      	ldr	r0, [pc, #56]	; (194a4 <bt_l2cap_recv+0x48>)
   1946a:	2145      	movs	r1, #69	; 0x45
   1946c:	f011 fb7c 	bl	2ab68 <z_log_minimal_printk>
	net_buf_unref(buf);
   19470:	4620      	mov	r0, r4
}
   19472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   19476:	f005 bd15 	b.w	1eea4 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1947a:	2104      	movs	r1, #4
   1947c:	f104 000c 	add.w	r0, r4, #12
   19480:	f005 fdfc 	bl	1f07c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19484:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19486:	4628      	mov	r0, r5
   19488:	4611      	mov	r1, r2
   1948a:	f012 ff4b 	bl	2c324 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1948e:	b920      	cbnz	r0, 1949a <bt_l2cap_recv+0x3e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19490:	4805      	ldr	r0, [pc, #20]	; (194a8 <bt_l2cap_recv+0x4c>)
   19492:	2157      	movs	r1, #87	; 0x57
   19494:	f011 fb68 	bl	2ab68 <z_log_minimal_printk>
		net_buf_unref(buf);
   19498:	e7ea      	b.n	19470 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1949a:	6843      	ldr	r3, [r0, #4]
   1949c:	4621      	mov	r1, r4
   1949e:	695b      	ldr	r3, [r3, #20]
   194a0:	4798      	blx	r3
   194a2:	e7e5      	b.n	19470 <bt_l2cap_recv+0x14>
   194a4:	000325db 	.word	0x000325db
   194a8:	000325fd 	.word	0x000325fd

000194ac <bt_l2cap_update_conn_param>:
{
   194ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   194ae:	4b17      	ldr	r3, [pc, #92]	; (1950c <bt_l2cap_update_conn_param+0x60>)
{
   194b0:	460e      	mov	r6, r1
	ident++;
   194b2:	7819      	ldrb	r1, [r3, #0]
   194b4:	3101      	adds	r1, #1
   194b6:	b2c9      	uxtb	r1, r1
   194b8:	2901      	cmp	r1, #1
   194ba:	bf38      	it	cc
   194bc:	2101      	movcc	r1, #1
{
   194be:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   194c0:	2208      	movs	r2, #8
   194c2:	2012      	movs	r0, #18
	ident++;
   194c4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   194c6:	f7ff fec3 	bl	19250 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   194ca:	4604      	mov	r4, r0
   194cc:	b1d0      	cbz	r0, 19504 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   194ce:	2108      	movs	r1, #8
   194d0:	300c      	adds	r0, #12
   194d2:	f005 fded 	bl	1f0b0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   194d6:	8833      	ldrh	r3, [r6, #0]
   194d8:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   194da:	8873      	ldrh	r3, [r6, #2]
   194dc:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   194de:	88b3      	ldrh	r3, [r6, #4]
   194e0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   194e2:	88f3      	ldrh	r3, [r6, #6]
   194e4:	80c3      	strh	r3, [r0, #6]
   194e6:	2300      	movs	r3, #0
   194e8:	4628      	mov	r0, r5
   194ea:	9300      	str	r3, [sp, #0]
   194ec:	4622      	mov	r2, r4
   194ee:	2105      	movs	r1, #5
   194f0:	f012 fed7 	bl	2c2a2 <bt_l2cap_send_cb>
	if (err) {
   194f4:	4605      	mov	r5, r0
   194f6:	b110      	cbz	r0, 194fe <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   194f8:	4620      	mov	r0, r4
   194fa:	f005 fcd3 	bl	1eea4 <net_buf_unref>
}
   194fe:	4628      	mov	r0, r5
   19500:	b002      	add	sp, #8
   19502:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19504:	f06f 050b 	mvn.w	r5, #11
   19508:	e7f9      	b.n	194fe <bt_l2cap_update_conn_param+0x52>
   1950a:	bf00      	nop
   1950c:	2000441e 	.word	0x2000441e

00019510 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   19510:	2823      	cmp	r0, #35	; 0x23
   19512:	d81f      	bhi.n	19554 <att_op_get_type+0x44>
   19514:	281a      	cmp	r0, #26
   19516:	d804      	bhi.n	19522 <att_op_get_type+0x12>
   19518:	1e43      	subs	r3, r0, #1
   1951a:	2b18      	cmp	r3, #24
   1951c:	d90e      	bls.n	1953c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1951e:	2006      	movs	r0, #6
   19520:	4770      	bx	lr
	switch (op) {
   19522:	f1a0 031b 	sub.w	r3, r0, #27
   19526:	2b08      	cmp	r3, #8
   19528:	d81e      	bhi.n	19568 <att_op_get_type+0x58>
   1952a:	e8df f003 	tbb	[pc, r3]
   1952e:	1d05      	.short	0x1d05
   19530:	191d231b 	.word	0x191d231b
   19534:	1d25      	.short	0x1d25
   19536:	05          	.byte	0x05
   19537:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   19538:	2003      	movs	r0, #3
   1953a:	4770      	bx	lr
	switch (op) {
   1953c:	4a0f      	ldr	r2, [pc, #60]	; (1957c <att_op_get_type+0x6c>)
   1953e:	2301      	movs	r3, #1
   19540:	4083      	lsls	r3, r0
   19542:	401a      	ands	r2, r3
   19544:	b9c2      	cbnz	r2, 19578 <att_op_get_type+0x68>
   19546:	4a0e      	ldr	r2, [pc, #56]	; (19580 <att_op_get_type+0x70>)
   19548:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1954a:	2a00      	cmp	r2, #0
   1954c:	bf14      	ite	ne
   1954e:	2001      	movne	r0, #1
   19550:	2006      	moveq	r0, #6
   19552:	4770      	bx	lr
	switch (op) {
   19554:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19558:	2b52      	cmp	r3, #82	; 0x52
   1955a:	d105      	bne.n	19568 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1955c:	2000      	movs	r0, #0
}
   1955e:	4770      	bx	lr
		return ATT_REQUEST;
   19560:	2001      	movs	r0, #1
   19562:	4770      	bx	lr
		return ATT_INDICATION;
   19564:	2005      	movs	r0, #5
   19566:	4770      	bx	lr
		return ATT_COMMAND;
   19568:	f010 0f40 	tst.w	r0, #64	; 0x40
   1956c:	bf0c      	ite	eq
   1956e:	2006      	moveq	r0, #6
   19570:	2000      	movne	r0, #0
   19572:	4770      	bx	lr
	switch (op) {
   19574:	2004      	movs	r0, #4
   19576:	4770      	bx	lr
		return ATT_RESPONSE;
   19578:	2002      	movs	r0, #2
   1957a:	4770      	bx	lr
   1957c:	028aaaaa 	.word	0x028aaaaa
   19580:	01455554 	.word	0x01455554

00019584 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   19584:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   19586:	7b43      	ldrb	r3, [r0, #13]
   19588:	2b07      	cmp	r3, #7
   1958a:	d005      	beq.n	19598 <att_get+0x14>
		LOG_WRN("Not connected");
   1958c:	4810      	ldr	r0, [pc, #64]	; (195d0 <att_get+0x4c>)
   1958e:	2157      	movs	r1, #87	; 0x57
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		LOG_ERR("Unable to find ATT channel");
   19590:	f011 faea 	bl	2ab68 <z_log_minimal_printk>
		return NULL;
   19594:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   19596:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19598:	2104      	movs	r1, #4
   1959a:	f012 fec3 	bl	2c324 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1959e:	4603      	mov	r3, r0
   195a0:	b910      	cbnz	r0, 195a8 <att_get+0x24>
		LOG_ERR("Unable to find ATT channel");
   195a2:	480c      	ldr	r0, [pc, #48]	; (195d4 <att_get+0x50>)
   195a4:	2145      	movs	r1, #69	; 0x45
   195a6:	e7f3      	b.n	19590 <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   195a8:	2102      	movs	r1, #2
   195aa:	3094      	adds	r0, #148	; 0x94
   195ac:	f012 fee9 	bl	2c382 <atomic_test_bit>
   195b0:	b950      	cbnz	r0, 195c8 <att_get+0x44>
   195b2:	4909      	ldr	r1, [pc, #36]	; (195d8 <att_get+0x54>)
   195b4:	4809      	ldr	r0, [pc, #36]	; (195dc <att_get+0x58>)
   195b6:	f640 322a 	movw	r2, #2858	; 0xb2a
   195ba:	f011 fac7 	bl	2ab4c <assert_print>
   195be:	4806      	ldr	r0, [pc, #24]	; (195d8 <att_get+0x54>)
   195c0:	f640 312a 	movw	r1, #2858	; 0xb2a
   195c4:	f011 fabb 	bl	2ab3e <assert_post_action>
	return att_chan->att;
   195c8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   195cc:	e7e3      	b.n	19596 <att_get+0x12>
   195ce:	bf00      	nop
   195d0:	0003259b 	.word	0x0003259b
   195d4:	0003263e 	.word	0x0003263e
   195d8:	0003265e 	.word	0x0003265e
   195dc:	0003013d 	.word	0x0003013d

000195e0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   195e0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   195e2:	3804      	subs	r0, #4
   195e4:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   195e6:	a901      	add	r1, sp, #4
   195e8:	4802      	ldr	r0, [pc, #8]	; (195f4 <bt_att_released+0x14>)
   195ea:	f00a fec3 	bl	24374 <k_mem_slab_free>
}
   195ee:	b003      	add	sp, #12
   195f0:	f85d fb04 	ldr.w	pc, [sp], #4
   195f4:	20000a6c 	.word	0x20000a6c

000195f8 <find_type_cb>:
{
   195f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195fc:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   195fe:	f8d2 9000 	ldr.w	r9, [r2]
{
   19602:	4607      	mov	r7, r0
   19604:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19606:	2500      	movs	r5, #0
   19608:	f642 0301 	movw	r3, #10241	; 0x2801
   1960c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1960e:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19612:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   19616:	a90b      	add	r1, sp, #44	; 0x2c
{
   19618:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1961a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1961e:	f012 faff 	bl	2bc20 <bt_uuid_cmp>
   19622:	2800      	cmp	r0, #0
   19624:	d060      	beq.n	196e8 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19626:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1962a:	6838      	ldr	r0, [r7, #0]
   1962c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   19630:	a90b      	add	r1, sp, #44	; 0x2c
   19632:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19636:	f012 faf3 	bl	2bc20 <bt_uuid_cmp>
   1963a:	b138      	cbz	r0, 1964c <find_type_cb+0x54>
		if (data->group &&
   1963c:	68a3      	ldr	r3, [r4, #8]
   1963e:	b11b      	cbz	r3, 19648 <find_type_cb+0x50>
   19640:	885a      	ldrh	r2, [r3, #2]
   19642:	42b2      	cmp	r2, r6
   19644:	d200      	bcs.n	19648 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19646:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19648:	2001      	movs	r0, #1
   1964a:	e009      	b.n	19660 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1964c:	6861      	ldr	r1, [r4, #4]
   1964e:	4608      	mov	r0, r1
   19650:	f012 fe7d 	bl	2c34e <net_buf_frags_len>
   19654:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   19658:	1a1b      	subs	r3, r3, r0
   1965a:	2b03      	cmp	r3, #3
   1965c:	d803      	bhi.n	19666 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1965e:	2000      	movs	r0, #0
}
   19660:	b011      	add	sp, #68	; 0x44
   19662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19666:	4608      	mov	r0, r1
   19668:	f005 fc74 	bl	1ef54 <net_buf_frag_last>
   1966c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1966e:	6860      	ldr	r0, [r4, #4]
   19670:	f012 fe6d 	bl	2c34e <net_buf_frags_len>
   19674:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   19678:	f105 0b0c 	add.w	fp, r5, #12
   1967c:	ebaa 0a00 	sub.w	sl, sl, r0
   19680:	4658      	mov	r0, fp
   19682:	f014 fc49 	bl	2df18 <net_buf_simple_tailroom>
   19686:	4582      	cmp	sl, r0
   19688:	d231      	bcs.n	196ee <find_type_cb+0xf6>
   1968a:	6860      	ldr	r0, [r4, #4]
   1968c:	f012 fe5f 	bl	2c34e <net_buf_frags_len>
   19690:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   19694:	1a18      	subs	r0, r3, r0
	if (!len) {
   19696:	b970      	cbnz	r0, 196b6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19698:	6863      	ldr	r3, [r4, #4]
   1969a:	7a98      	ldrb	r0, [r3, #10]
   1969c:	f005 fa20 	bl	1eae0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   196a0:	2200      	movs	r2, #0
   196a2:	2300      	movs	r3, #0
   196a4:	f014 fc17 	bl	2ded6 <net_buf_alloc_fixed>
		if (!frag) {
   196a8:	4605      	mov	r5, r0
   196aa:	2800      	cmp	r0, #0
   196ac:	d0d7      	beq.n	1965e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   196ae:	4601      	mov	r1, r0
   196b0:	6860      	ldr	r0, [r4, #4]
   196b2:	f005 fc8d 	bl	1efd0 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   196b6:	2300      	movs	r3, #0
   196b8:	9300      	str	r3, [sp, #0]
   196ba:	f8d7 9004 	ldr.w	r9, [r7, #4]
   196be:	4639      	mov	r1, r7
   196c0:	2310      	movs	r3, #16
   196c2:	aa02      	add	r2, sp, #8
   196c4:	4640      	mov	r0, r8
   196c6:	47c8      	blx	r9
	if (read < 0) {
   196c8:	1e07      	subs	r7, r0, #0
   196ca:	db0d      	blt.n	196e8 <find_type_cb+0xf0>
	if (read != data->value_len) {
   196cc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   196ce:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   196d0:	42ba      	cmp	r2, r7
   196d2:	d02b      	beq.n	1972c <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   196d4:	4601      	mov	r1, r0
   196d6:	a80b      	add	r0, sp, #44	; 0x2c
   196d8:	f012 fad0 	bl	2bc7c <bt_uuid_create>
   196dc:	b958      	cbnz	r0, 196f6 <find_type_cb+0xfe>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   196de:	7c22      	ldrb	r2, [r4, #16]
   196e0:	4814      	ldr	r0, [pc, #80]	; (19734 <find_type_cb+0x13c>)
   196e2:	2157      	movs	r1, #87	; 0x57
			LOG_WRN("Unable to create UUID: size %d", read);
   196e4:	f011 fa40 	bl	2ab68 <z_log_minimal_printk>
	data->group = NULL;
   196e8:	2300      	movs	r3, #0
   196ea:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   196ec:	e7ac      	b.n	19648 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   196ee:	4658      	mov	r0, fp
   196f0:	f014 fc12 	bl	2df18 <net_buf_simple_tailroom>
   196f4:	e7cf      	b.n	19696 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   196f6:	b2fa      	uxtb	r2, r7
   196f8:	a902      	add	r1, sp, #8
   196fa:	a806      	add	r0, sp, #24
   196fc:	f012 fabe 	bl	2bc7c <bt_uuid_create>
   19700:	b918      	cbnz	r0, 1970a <find_type_cb+0x112>
			LOG_WRN("Unable to create UUID: size %d", read);
   19702:	480d      	ldr	r0, [pc, #52]	; (19738 <find_type_cb+0x140>)
   19704:	463a      	mov	r2, r7
   19706:	2157      	movs	r1, #87	; 0x57
   19708:	e7ec      	b.n	196e4 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1970a:	a906      	add	r1, sp, #24
   1970c:	a80b      	add	r0, sp, #44	; 0x2c
   1970e:	f012 fa87 	bl	2bc20 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19712:	2800      	cmp	r0, #0
   19714:	d1e8      	bne.n	196e8 <find_type_cb+0xf0>
	data->err = 0x00;
   19716:	2300      	movs	r3, #0
   19718:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1971a:	2104      	movs	r1, #4
   1971c:	f105 000c 	add.w	r0, r5, #12
   19720:	f005 fcc6 	bl	1f0b0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19724:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19726:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19728:	68a3      	ldr	r3, [r4, #8]
   1972a:	e78c      	b.n	19646 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   1972c:	a902      	add	r1, sp, #8
   1972e:	f012 f9bc 	bl	2baaa <memcmp>
   19732:	e7ee      	b.n	19712 <find_type_cb+0x11a>
   19734:	0003268d 	.word	0x0003268d
   19738:	000326b1 	.word	0x000326b1

0001973c <tx_meta_data_free>:
{
   1973c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1973e:	4604      	mov	r4, r0
   19740:	b940      	cbnz	r0, 19754 <tx_meta_data_free+0x18>
   19742:	4909      	ldr	r1, [pc, #36]	; (19768 <tx_meta_data_free+0x2c>)
   19744:	4809      	ldr	r0, [pc, #36]	; (1976c <tx_meta_data_free+0x30>)
   19746:	22a6      	movs	r2, #166	; 0xa6
   19748:	f011 fa00 	bl	2ab4c <assert_print>
   1974c:	4806      	ldr	r0, [pc, #24]	; (19768 <tx_meta_data_free+0x2c>)
   1974e:	21a6      	movs	r1, #166	; 0xa6
   19750:	f011 f9f5 	bl	2ab3e <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   19754:	2100      	movs	r1, #0
   19756:	2214      	movs	r2, #20
   19758:	f012 f9d9 	bl	2bb0e <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1975c:	4621      	mov	r1, r4
   1975e:	4804      	ldr	r0, [pc, #16]	; (19770 <tx_meta_data_free+0x34>)
}
   19760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19764:	f015 ba21 	b.w	2ebaa <k_queue_append>
   19768:	0003265e 	.word	0x0003265e
   1976c:	0003013d 	.word	0x0003013d
   19770:	20000b9c 	.word	0x20000b9c

00019774 <chan_send>:
{
   19774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19778:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1977a:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   1977e:	68cb      	ldr	r3, [r1, #12]
{
   19780:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19782:	3098      	adds	r0, #152	; 0x98
   19784:	2102      	movs	r1, #2
   19786:	f012 fdfc 	bl	2c382 <atomic_test_bit>
   1978a:	2800      	cmp	r0, #0
   1978c:	d047      	beq.n	1981e <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1978e:	781b      	ldrb	r3, [r3, #0]
   19790:	2bd2      	cmp	r3, #210	; 0xd2
   19792:	d114      	bne.n	197be <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   19794:	6833      	ldr	r3, [r6, #0]
   19796:	4621      	mov	r1, r4
   19798:	6818      	ldr	r0, [r3, #0]
   1979a:	f014 f9ed 	bl	2db78 <bt_smp_sign>
		if (err) {
   1979e:	4605      	mov	r5, r0
   197a0:	b168      	cbz	r0, 197be <chan_send+0x4a>
			LOG_ERR("Error signing data");
   197a2:	4820      	ldr	r0, [pc, #128]	; (19824 <chan_send+0xb0>)
   197a4:	2145      	movs	r1, #69	; 0x45
   197a6:	f011 f9df 	bl	2ab68 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   197aa:	69a0      	ldr	r0, [r4, #24]
   197ac:	f7ff ffc6 	bl	1973c <tx_meta_data_free>
			net_buf_unref(buf);
   197b0:	4620      	mov	r0, r4
   197b2:	f005 fb77 	bl	1eea4 <net_buf_unref>
}
   197b6:	4628      	mov	r0, r5
   197b8:	b003      	add	sp, #12
   197ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   197be:	f104 000c 	add.w	r0, r4, #12
   197c2:	f014 fba5 	bl	2df10 <net_buf_simple_headroom>
	state->len = buf->len;
   197c6:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   197ca:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   197ce:	6833      	ldr	r3, [r6, #0]
   197d0:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   197d2:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   197d4:	4607      	mov	r7, r0
   197d6:	7818      	ldrb	r0, [r3, #0]
   197d8:	f7ff fe9a 	bl	19510 <att_op_get_type>
	switch (op_type) {
   197dc:	2805      	cmp	r0, #5
   197de:	d813      	bhi.n	19808 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   197e0:	4b11      	ldr	r3, [pc, #68]	; (19828 <chan_send+0xb4>)
   197e2:	f8cd 8000 	str.w	r8, [sp]
   197e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   197ea:	4622      	mov	r2, r4
   197ec:	4628      	mov	r0, r5
   197ee:	2104      	movs	r1, #4
   197f0:	f012 fd57 	bl	2c2a2 <bt_l2cap_send_cb>
	if (err) {
   197f4:	4605      	mov	r5, r0
   197f6:	2800      	cmp	r0, #0
   197f8:	d0dd      	beq.n	197b6 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   197fa:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   197fc:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   19800:	fa13 f787 	uxtah	r7, r3, r7
   19804:	60e7      	str	r7, [r4, #12]
}
   19806:	e7d6      	b.n	197b6 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   19808:	4908      	ldr	r1, [pc, #32]	; (1982c <chan_send+0xb8>)
   1980a:	4809      	ldr	r0, [pc, #36]	; (19830 <chan_send+0xbc>)
   1980c:	f240 2257 	movw	r2, #599	; 0x257
   19810:	f011 f99c 	bl	2ab4c <assert_print>
   19814:	4805      	ldr	r0, [pc, #20]	; (1982c <chan_send+0xb8>)
   19816:	f240 2157 	movw	r1, #599	; 0x257
   1981a:	f011 f990 	bl	2ab3e <assert_post_action>
		return -EINVAL;
   1981e:	f06f 0515 	mvn.w	r5, #21
   19822:	e7c8      	b.n	197b6 <chan_send+0x42>
   19824:	000326d5 	.word	0x000326d5
   19828:	0002f830 	.word	0x0002f830
   1982c:	0003265e 	.word	0x0003265e
   19830:	0003013d 	.word	0x0003013d

00019834 <bt_att_chan_req_send>:
{
   19834:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   19836:	b950      	cbnz	r0, 1984e <bt_att_chan_req_send+0x1a>
   19838:	4917      	ldr	r1, [pc, #92]	; (19898 <bt_att_chan_req_send+0x64>)
   1983a:	4818      	ldr	r0, [pc, #96]	; (1989c <bt_att_chan_req_send+0x68>)
   1983c:	f44f 7246 	mov.w	r2, #792	; 0x318
   19840:	f011 f984 	bl	2ab4c <assert_print>
   19844:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   19848:	4813      	ldr	r0, [pc, #76]	; (19898 <bt_att_chan_req_send+0x64>)
   1984a:	f011 f978 	bl	2ab3e <assert_post_action>
   1984e:	b941      	cbnz	r1, 19862 <bt_att_chan_req_send+0x2e>
   19850:	4911      	ldr	r1, [pc, #68]	; (19898 <bt_att_chan_req_send+0x64>)
   19852:	4812      	ldr	r0, [pc, #72]	; (1989c <bt_att_chan_req_send+0x68>)
   19854:	f240 3219 	movw	r2, #793	; 0x319
   19858:	f011 f978 	bl	2ab4c <assert_print>
   1985c:	f240 3119 	movw	r1, #793	; 0x319
   19860:	e7f2      	b.n	19848 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   19862:	684a      	ldr	r2, [r1, #4]
   19864:	b942      	cbnz	r2, 19878 <bt_att_chan_req_send+0x44>
   19866:	490c      	ldr	r1, [pc, #48]	; (19898 <bt_att_chan_req_send+0x64>)
   19868:	480c      	ldr	r0, [pc, #48]	; (1989c <bt_att_chan_req_send+0x68>)
   1986a:	f240 321a 	movw	r2, #794	; 0x31a
   1986e:	f011 f96d 	bl	2ab4c <assert_print>
   19872:	f240 311a 	movw	r1, #794	; 0x31a
   19876:	e7e7      	b.n	19848 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   19878:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1987c:	b143      	cbz	r3, 19890 <bt_att_chan_req_send+0x5c>
   1987e:	4906      	ldr	r1, [pc, #24]	; (19898 <bt_att_chan_req_send+0x64>)
   19880:	4806      	ldr	r0, [pc, #24]	; (1989c <bt_att_chan_req_send+0x68>)
   19882:	f240 321b 	movw	r2, #795	; 0x31b
   19886:	f011 f961 	bl	2ab4c <assert_print>
   1988a:	f240 311b 	movw	r1, #795	; 0x31b
   1988e:	e7db      	b.n	19848 <bt_att_chan_req_send+0x14>
}
   19890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   19894:	f012 be62 	b.w	2c55c <chan_req_send>
   19898:	0003265e 	.word	0x0003265e
   1989c:	0003013d 	.word	0x0003013d

000198a0 <read_group_cb>:
{
   198a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   198a4:	4605      	mov	r5, r0
   198a6:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   198a8:	f04f 0800 	mov.w	r8, #0
   198ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   198b0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   198b2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   198b4:	f88d 8008 	strb.w	r8, [sp, #8]
   198b8:	a902      	add	r1, sp, #8
{
   198ba:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   198bc:	f8ad 300a 	strh.w	r3, [sp, #10]
   198c0:	f012 f9ae 	bl	2bc20 <bt_uuid_cmp>
   198c4:	b1a0      	cbz	r0, 198f0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   198c6:	f642 0301 	movw	r3, #10241	; 0x2801
   198ca:	6828      	ldr	r0, [r5, #0]
   198cc:	f88d 800c 	strb.w	r8, [sp, #12]
   198d0:	a903      	add	r1, sp, #12
   198d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   198d6:	f012 f9a3 	bl	2bc20 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   198da:	b148      	cbz	r0, 198f0 <read_group_cb+0x50>
		if (data->group &&
   198dc:	6923      	ldr	r3, [r4, #16]
   198de:	b11b      	cbz	r3, 198e8 <read_group_cb+0x48>
   198e0:	885a      	ldrh	r2, [r3, #2]
   198e2:	42b2      	cmp	r2, r6
   198e4:	d200      	bcs.n	198e8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   198e6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   198e8:	2001      	movs	r0, #1
}
   198ea:	b004      	add	sp, #16
   198ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   198f0:	6861      	ldr	r1, [r4, #4]
   198f2:	6828      	ldr	r0, [r5, #0]
   198f4:	f012 f994 	bl	2bc20 <bt_uuid_cmp>
   198f8:	b110      	cbz	r0, 19900 <read_group_cb+0x60>
		data->group = NULL;
   198fa:	2300      	movs	r3, #0
   198fc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   198fe:	e7f3      	b.n	198e8 <read_group_cb+0x48>
	if (data->rsp->len &&
   19900:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19902:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   19904:	781a      	ldrb	r2, [r3, #0]
   19906:	b132      	cbz	r2, 19916 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19908:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1990a:	8a01      	ldrh	r1, [r0, #16]
   1990c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1990e:	4293      	cmp	r3, r2
   19910:	da01      	bge.n	19916 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   19912:	2000      	movs	r0, #0
   19914:	e7e9      	b.n	198ea <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   19916:	2104      	movs	r1, #4
   19918:	300c      	adds	r0, #12
   1991a:	f005 fbc9 	bl	1f0b0 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1991e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19920:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19922:	6923      	ldr	r3, [r4, #16]
   19924:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19926:	4b08      	ldr	r3, [pc, #32]	; (19948 <read_group_cb+0xa8>)
   19928:	9300      	str	r3, [sp, #0]
   1992a:	9401      	str	r4, [sp, #4]
   1992c:	68a2      	ldr	r2, [r4, #8]
   1992e:	2300      	movs	r3, #0
   19930:	4629      	mov	r1, r5
   19932:	4638      	mov	r0, r7
   19934:	f012 fe53 	bl	2c5de <att_chan_read>
	if (read < 0) {
   19938:	2800      	cmp	r0, #0
   1993a:	dbea      	blt.n	19912 <read_group_cb+0x72>
	if (!data->group) {
   1993c:	6920      	ldr	r0, [r4, #16]
   1993e:	3800      	subs	r0, #0
   19940:	bf18      	it	ne
   19942:	2001      	movne	r0, #1
   19944:	e7d1      	b.n	198ea <read_group_cb+0x4a>
   19946:	bf00      	nop
   19948:	0002c53d 	.word	0x0002c53d

0001994c <read_type_cb>:
{
   1994c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19950:	6817      	ldr	r7, [r2, #0]
{
   19952:	4605      	mov	r5, r0
   19954:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19956:	6800      	ldr	r0, [r0, #0]
   19958:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1995a:	687e      	ldr	r6, [r7, #4]
{
   1995c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1995e:	f012 f95f 	bl	2bc20 <bt_uuid_cmp>
   19962:	4681      	mov	r9, r0
   19964:	2800      	cmp	r0, #0
   19966:	d13c      	bne.n	199e2 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19968:	4630      	mov	r0, r6
   1996a:	2295      	movs	r2, #149	; 0x95
   1996c:	4629      	mov	r1, r5
   1996e:	f013 fdb4 	bl	2d4da <bt_gatt_check_perm>
   19972:	4606      	mov	r6, r0
   19974:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   19976:	b140      	cbz	r0, 1998a <read_type_cb+0x3e>
		if (data->rsp->len) {
   19978:	68e3      	ldr	r3, [r4, #12]
   1997a:	781b      	ldrb	r3, [r3, #0]
   1997c:	b10b      	cbz	r3, 19982 <read_type_cb+0x36>
			data->err = 0x00;
   1997e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   19982:	2000      	movs	r0, #0
}
   19984:	b003      	add	sp, #12
   19986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1998a:	68a0      	ldr	r0, [r4, #8]
   1998c:	f005 fae2 	bl	1ef54 <net_buf_frag_last>
   19990:	2102      	movs	r1, #2
   19992:	300c      	adds	r0, #12
   19994:	f005 fb8c 	bl	1f0b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19998:	4b13      	ldr	r3, [pc, #76]	; (199e8 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1999a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1999c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   199a0:	9300      	str	r3, [sp, #0]
   199a2:	9401      	str	r4, [sp, #4]
   199a4:	68a2      	ldr	r2, [r4, #8]
   199a6:	4633      	mov	r3, r6
   199a8:	4629      	mov	r1, r5
   199aa:	4638      	mov	r0, r7
   199ac:	f012 fe17 	bl	2c5de <att_chan_read>
	if (read < 0) {
   199b0:	2800      	cmp	r0, #0
   199b2:	da07      	bge.n	199c4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   199b4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   199b8:	bf26      	itte	cs
   199ba:	4240      	negcs	r0, r0
   199bc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   199be:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   199c0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   199c2:	e7de      	b.n	19982 <read_type_cb+0x36>
	if (!data->item) {
   199c4:	6923      	ldr	r3, [r4, #16]
   199c6:	2b00      	cmp	r3, #0
   199c8:	d0db      	beq.n	19982 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   199ca:	68a0      	ldr	r0, [r4, #8]
   199cc:	f012 fcbf 	bl	2c34e <net_buf_frags_len>
   199d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   199d2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   199d4:	68e3      	ldr	r3, [r4, #12]
   199d6:	781b      	ldrb	r3, [r3, #0]
   199d8:	4298      	cmp	r0, r3
   199da:	bf94      	ite	ls
   199dc:	2000      	movls	r0, #0
   199de:	2001      	movhi	r0, #1
   199e0:	e7d0      	b.n	19984 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   199e2:	2001      	movs	r0, #1
   199e4:	e7ce      	b.n	19984 <read_type_cb+0x38>
   199e6:	bf00      	nop
   199e8:	0002c35f 	.word	0x0002c35f

000199ec <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   199ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   199ee:	2300      	movs	r3, #0
{
   199f0:	4604      	mov	r4, r0
   199f2:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   199f4:	482e      	ldr	r0, [pc, #184]	; (19ab0 <bt_att_accept+0xc4>)
   199f6:	2200      	movs	r2, #0
   199f8:	4669      	mov	r1, sp
   199fa:	f00a fc63 	bl	242c4 <k_mem_slab_alloc>
   199fe:	4605      	mov	r5, r0
   19a00:	b148      	cbz	r0, 19a16 <bt_att_accept+0x2a>
		LOG_ERR("No available ATT context for conn %p", conn);
   19a02:	482c      	ldr	r0, [pc, #176]	; (19ab4 <bt_att_accept+0xc8>)
   19a04:	4622      	mov	r2, r4
   19a06:	2145      	movs	r1, #69	; 0x45
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   19a08:	f011 f8ae 	bl	2ab68 <z_log_minimal_printk>
		return -ENOMEM;
   19a0c:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   19a10:	4628      	mov	r0, r5
   19a12:	b003      	add	sp, #12
   19a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   19a16:	f00c fdd1 	bl	265bc <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   19a1a:	4b27      	ldr	r3, [pc, #156]	; (19ab8 <bt_att_accept+0xcc>)
	(void)memset(att, 0, sizeof(*att));
   19a1c:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   19a1e:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   19a20:	2230      	movs	r2, #48	; 0x30
   19a22:	9800      	ldr	r0, [sp, #0]
   19a24:	f012 f873 	bl	2bb0e <memset>
	att->conn = conn;
   19a28:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19a2a:	4824      	ldr	r0, [pc, #144]	; (19abc <bt_att_accept+0xd0>)
	att->conn = conn;
   19a2c:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   19a2e:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19a30:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   19a32:	e9c4 5501 	strd	r5, r5, [r4, #4]
   19a36:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19a3a:	2200      	movs	r2, #0
   19a3c:	2300      	movs	r3, #0
   19a3e:	a901      	add	r1, sp, #4
   19a40:	f00a fc40 	bl	242c4 <k_mem_slab_alloc>
   19a44:	4605      	mov	r5, r0
   19a46:	b118      	cbz	r0, 19a50 <bt_att_accept+0x64>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   19a48:	6822      	ldr	r2, [r4, #0]
   19a4a:	481d      	ldr	r0, [pc, #116]	; (19ac0 <bt_att_accept+0xd4>)
   19a4c:	2157      	movs	r1, #87	; 0x57
   19a4e:	e7db      	b.n	19a08 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   19a50:	4601      	mov	r1, r0
   19a52:	22f8      	movs	r2, #248	; 0xf8
   19a54:	9801      	ldr	r0, [sp, #4]
   19a56:	f012 f85a 	bl	2bb0e <memset>
	chan->chan.chan.ops = &ops;
   19a5a:	9801      	ldr	r0, [sp, #4]
   19a5c:	4b19      	ldr	r3, [pc, #100]	; (19ac4 <bt_att_accept+0xd8>)
   19a5e:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   19a60:	30a0      	adds	r0, #160	; 0xa0
   19a62:	f015 f895 	bl	2eb90 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19a66:	9b01      	ldr	r3, [sp, #4]
   19a68:	f3bf 8f5b 	dmb	ish
   19a6c:	3398      	adds	r3, #152	; 0x98
   19a6e:	e853 2f00 	ldrex	r2, [r3]
   19a72:	e843 5100 	strex	r1, r5, [r3]
   19a76:	2900      	cmp	r1, #0
   19a78:	d1f9      	bne.n	19a6e <bt_att_accept+0x82>
   19a7a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19a7e:	9b01      	ldr	r3, [sp, #4]
   19a80:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   19a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   19a84:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   19a86:	b91b      	cbnz	r3, 19a90 <bt_att_accept+0xa4>
   19a88:	f104 000c 	add.w	r0, r4, #12
   19a8c:	f015 f880 	bl	2eb90 <z_impl_k_queue_init>
	return list->head;
   19a90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   19a92:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   19a96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   19a98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   19a9c:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   19a9e:	b902      	cbnz	r2, 19aa2 <bt_att_accept+0xb6>
	list->tail = node;
   19aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   19aa2:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   19aa4:	2b00      	cmp	r3, #0
   19aa6:	d0b1      	beq.n	19a0c <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   19aa8:	3304      	adds	r3, #4
   19aaa:	6033      	str	r3, [r6, #0]
	return 0;
   19aac:	e7b0      	b.n	19a10 <bt_att_accept+0x24>
   19aae:	bf00      	nop
   19ab0:	20000a4c 	.word	0x20000a4c
   19ab4:	000326ed 	.word	0x000326ed
   19ab8:	20003440 	.word	0x20003440
   19abc:	20000a6c 	.word	0x20000a6c
   19ac0:	00032717 	.word	0x00032717
   19ac4:	200007a0 	.word	0x200007a0

00019ac8 <bt_att_connected>:
{
   19ac8:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19aca:	f100 0394 	add.w	r3, r0, #148	; 0x94
   19ace:	4604      	mov	r4, r0
   19ad0:	f3bf 8f5b 	dmb	ish
   19ad4:	e853 1f00 	ldrex	r1, [r3]
   19ad8:	f041 0104 	orr.w	r1, r1, #4
   19adc:	e843 1200 	strex	r2, r1, [r3]
   19ae0:	2a00      	cmp	r2, #0
   19ae2:	d1f7      	bne.n	19ad4 <bt_att_connected+0xc>
   19ae4:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19ae8:	2317      	movs	r3, #23
   19aea:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19aec:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   19aee:	1f20      	subs	r0, r4, #4
   19af0:	f012 fc69 	bl	2c3c6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19af4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   19af8:	4903      	ldr	r1, [pc, #12]	; (19b08 <bt_att_connected+0x40>)
   19afa:	f00b fca9 	bl	25450 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   19afe:	6820      	ldr	r0, [r4, #0]
}
   19b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19b04:	f002 bf5c 	b.w	1c9c0 <bt_gatt_connected>
   19b08:	0001a50d 	.word	0x0001a50d

00019b0c <bt_att_chan_create_pdu>:
{
   19b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19b0e:	1c53      	adds	r3, r2, #1
   19b10:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   19b12:	4293      	cmp	r3, r2
{
   19b14:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19b16:	d906      	bls.n	19b26 <bt_att_chan_create_pdu+0x1a>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   19b18:	481c      	ldr	r0, [pc, #112]	; (19b8c <bt_att_chan_create_pdu+0x80>)
   19b1a:	2157      	movs	r1, #87	; 0x57
   19b1c:	f011 f824 	bl	2ab68 <z_log_minimal_printk>
		return NULL;
   19b20:	2400      	movs	r4, #0
}
   19b22:	4620      	mov	r0, r4
   19b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   19b26:	4608      	mov	r0, r1
   19b28:	f7ff fcf2 	bl	19510 <att_op_get_type>
   19b2c:	2802      	cmp	r0, #2
   19b2e:	d013      	beq.n	19b58 <bt_att_chan_create_pdu+0x4c>
   19b30:	2804      	cmp	r0, #4
   19b32:	d011      	beq.n	19b58 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
   19b34:	f04f 36ff 	mov.w	r6, #4294967295
   19b38:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   19b3c:	2100      	movs	r1, #0
   19b3e:	4632      	mov	r2, r6
   19b40:	463b      	mov	r3, r7
   19b42:	4608      	mov	r0, r1
   19b44:	f012 fbaa 	bl	2c29c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19b48:	4604      	mov	r4, r0
   19b4a:	b948      	cbnz	r0, 19b60 <bt_att_chan_create_pdu+0x54>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   19b4c:	4810      	ldr	r0, [pc, #64]	; (19b90 <bt_att_chan_create_pdu+0x84>)
   19b4e:	462a      	mov	r2, r5
   19b50:	2145      	movs	r1, #69	; 0x45
   19b52:	f011 f809 	bl	2ab68 <z_log_minimal_printk>
		return NULL;
   19b56:	e7e3      	b.n	19b20 <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
   19b58:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   19b5c:	2700      	movs	r7, #0
   19b5e:	e7ed      	b.n	19b3c <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
   19b60:	480c      	ldr	r0, [pc, #48]	; (19b94 <bt_att_chan_create_pdu+0x88>)
   19b62:	4632      	mov	r2, r6
   19b64:	463b      	mov	r3, r7
   19b66:	f00b f875 	bl	24c54 <z_impl_k_queue_get>
	if (!data) {
   19b6a:	b938      	cbnz	r0, 19b7c <bt_att_chan_create_pdu+0x70>
		LOG_WRN("Unable to allocate ATT TX meta");
   19b6c:	480a      	ldr	r0, [pc, #40]	; (19b98 <bt_att_chan_create_pdu+0x8c>)
   19b6e:	2157      	movs	r1, #87	; 0x57
   19b70:	f010 fffa 	bl	2ab68 <z_log_minimal_printk>
		net_buf_unref(buf);
   19b74:	4620      	mov	r0, r4
   19b76:	f005 f995 	bl	1eea4 <net_buf_unref>
		return NULL;
   19b7a:	e7d1      	b.n	19b20 <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   19b7c:	61a0      	str	r0, [r4, #24]
   19b7e:	2101      	movs	r1, #1
   19b80:	f104 000c 	add.w	r0, r4, #12
   19b84:	f005 fa94 	bl	1f0b0 <net_buf_simple_add>
	hdr->code = op;
   19b88:	7005      	strb	r5, [r0, #0]
	return buf;
   19b8a:	e7ca      	b.n	19b22 <bt_att_chan_create_pdu+0x16>
   19b8c:	00032741 	.word	0x00032741
   19b90:	00032485 	.word	0x00032485
   19b94:	20000b9c 	.word	0x20000b9c
   19b98:	0003276b 	.word	0x0003276b

00019b9c <bt_att_recv>:
{
   19b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   19ba0:	8a0b      	ldrh	r3, [r1, #16]
{
   19ba2:	4607      	mov	r7, r0
   19ba4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19ba6:	b933      	cbnz	r3, 19bb6 <bt_att_recv+0x1a>
		LOG_ERR("Too small ATT PDU received");
   19ba8:	4835      	ldr	r0, [pc, #212]	; (19c80 <bt_att_recv+0xe4>)
   19baa:	2145      	movs	r1, #69	; 0x45
			LOG_WRN("Ignoring unexpected request");
   19bac:	f010 ffdc 	bl	2ab68 <z_log_minimal_printk>
}
   19bb0:	2000      	movs	r0, #0
   19bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19bb6:	2101      	movs	r1, #1
   19bb8:	f105 000c 	add.w	r0, r5, #12
   19bbc:	f005 fa5e 	bl	1f07c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19bc0:	f857 3c04 	ldr.w	r3, [r7, #-4]
   19bc4:	4604      	mov	r4, r0
   19bc6:	2b00      	cmp	r3, #0
   19bc8:	d0f2      	beq.n	19bb0 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   19bca:	7802      	ldrb	r2, [r0, #0]
   19bcc:	4e2d      	ldr	r6, [pc, #180]	; (19c84 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19bce:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19bd2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19bd4:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   19bd8:	4290      	cmp	r0, r2
   19bda:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   19bde:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   19be2:	d10d      	bne.n	19c00 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   19be4:	f891 9002 	ldrb.w	r9, [r1, #2]
   19be8:	f1b9 0f01 	cmp.w	r9, #1
   19bec:	d11f      	bne.n	19c2e <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   19bee:	2100      	movs	r1, #0
   19bf0:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19bf4:	f012 fe8d 	bl	2c912 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   19bf8:	b328      	cbz	r0, 19c46 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected request");
   19bfa:	4823      	ldr	r0, [pc, #140]	; (19c88 <bt_att_recv+0xec>)
   19bfc:	2157      	movs	r1, #87	; 0x57
   19bfe:	e7d5      	b.n	19bac <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19c00:	3301      	adds	r3, #1
   19c02:	2b1e      	cmp	r3, #30
   19c04:	d1e6      	bne.n	19bd4 <bt_att_recv+0x38>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   19c06:	4821      	ldr	r0, [pc, #132]	; (19c8c <bt_att_recv+0xf0>)
   19c08:	2157      	movs	r1, #87	; 0x57
   19c0a:	f010 ffad 	bl	2ab68 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   19c0e:	7821      	ldrb	r1, [r4, #0]
   19c10:	4608      	mov	r0, r1
   19c12:	f7ff fc7d 	bl	19510 <att_op_get_type>
   19c16:	2800      	cmp	r0, #0
   19c18:	d0ca      	beq.n	19bb0 <bt_att_recv+0x14>
   19c1a:	2805      	cmp	r0, #5
   19c1c:	d0c8      	beq.n	19bb0 <bt_att_recv+0x14>
	if (!req) {
   19c1e:	2900      	cmp	r1, #0
   19c20:	d0c6      	beq.n	19bb0 <bt_att_recv+0x14>
   19c22:	2306      	movs	r3, #6
   19c24:	2200      	movs	r2, #0
   19c26:	4640      	mov	r0, r8
   19c28:	f012 ff0d 	bl	2ca46 <send_err_rsp.part.0>
   19c2c:	e7c0      	b.n	19bb0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   19c2e:	f1b9 0f05 	cmp.w	r9, #5
   19c32:	d108      	bne.n	19c46 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   19c34:	2101      	movs	r1, #1
   19c36:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19c3a:	f012 fe6a 	bl	2c912 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   19c3e:	b110      	cbz	r0, 19c46 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected indication");
   19c40:	4813      	ldr	r0, [pc, #76]	; (19c90 <bt_att_recv+0xf4>)
   19c42:	2157      	movs	r1, #87	; 0x57
   19c44:	e7b2      	b.n	19bac <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   19c46:	4456      	add	r6, sl
   19c48:	8a2a      	ldrh	r2, [r5, #16]
   19c4a:	7873      	ldrb	r3, [r6, #1]
   19c4c:	4293      	cmp	r3, r2
   19c4e:	d909      	bls.n	19c64 <bt_att_recv+0xc8>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19c50:	7823      	ldrb	r3, [r4, #0]
   19c52:	4810      	ldr	r0, [pc, #64]	; (19c94 <bt_att_recv+0xf8>)
   19c54:	2145      	movs	r1, #69	; 0x45
   19c56:	f010 ff87 	bl	2ab68 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   19c5a:	f1b9 0f01 	cmp.w	r9, #1
   19c5e:	d1a7      	bne.n	19bb0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   19c60:	2304      	movs	r3, #4
   19c62:	e009      	b.n	19c78 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   19c64:	6873      	ldr	r3, [r6, #4]
   19c66:	4629      	mov	r1, r5
   19c68:	4640      	mov	r0, r8
   19c6a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19c6c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   19c70:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19c72:	d19d      	bne.n	19bb0 <bt_att_recv+0x14>
   19c74:	2800      	cmp	r0, #0
   19c76:	d09b      	beq.n	19bb0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19c78:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   19c7a:	2900      	cmp	r1, #0
   19c7c:	d098      	beq.n	19bb0 <bt_att_recv+0x14>
   19c7e:	e7d1      	b.n	19c24 <bt_att_recv+0x88>
   19c80:	0003278f 	.word	0x0003278f
   19c84:	0002f848 	.word	0x0002f848
   19c88:	000327ce 	.word	0x000327ce
   19c8c:	000327af 	.word	0x000327af
   19c90:	000327ef 	.word	0x000327ef
   19c94:	00032813 	.word	0x00032813

00019c98 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c9a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19c9c:	6803      	ldr	r3, [r0, #0]
   19c9e:	460d      	mov	r5, r1
   19ca0:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19ca2:	b087      	sub	sp, #28
   19ca4:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19ca6:	bf18      	it	ne
   19ca8:	2101      	movne	r1, #1
   19caa:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19cac:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19cae:	f013 fd05 	bl	2d6bc <bt_gatt_change_aware>
   19cb2:	b948      	cbnz	r0, 19cc8 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19cb4:	2105      	movs	r1, #5
   19cb6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19cba:	f012 fe2a 	bl	2c912 <atomic_test_and_set_bit>
   19cbe:	2800      	cmp	r0, #0
   19cc0:	d048      	beq.n	19d54 <att_write_rsp.constprop.0+0xbc>
			return 0;
   19cc2:	2000      	movs	r0, #0
}
   19cc4:	b007      	add	sp, #28
   19cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   19cc8:	2e00      	cmp	r6, #0
   19cca:	d045      	beq.n	19d58 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   19ccc:	2218      	movs	r2, #24
   19cce:	2100      	movs	r1, #0
   19cd0:	4668      	mov	r0, sp
   19cd2:	f011 ff1c 	bl	2bb0e <memset>
	if (rsp) {
   19cd6:	bb67      	cbnz	r7, 19d32 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   19cd8:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19cda:	4a20      	ldr	r2, [pc, #128]	; (19d5c <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   19cdc:	681b      	ldr	r3, [r3, #0]
   19cde:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19ce0:	2300      	movs	r3, #0
   19ce2:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   19ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19ce8:	9303      	str	r3, [sp, #12]
	data.len = len;
   19cea:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19cee:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19cf2:	2301      	movs	r3, #1
   19cf4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19cf8:	4631      	mov	r1, r6
   19cfa:	466b      	mov	r3, sp
   19cfc:	4630      	mov	r0, r6
	data.req = req;
   19cfe:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19d02:	f012 fbc4 	bl	2c48e <bt_gatt_foreach_attr>
	if (data.err) {
   19d06:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19d0a:	b1e3      	cbz	r3, 19d46 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   19d0c:	2f00      	cmp	r7, #0
   19d0e:	d0d8      	beq.n	19cc2 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19d10:	9b01      	ldr	r3, [sp, #4]
   19d12:	6998      	ldr	r0, [r3, #24]
   19d14:	f7ff fd12 	bl	1973c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19d18:	9801      	ldr	r0, [sp, #4]
   19d1a:	f005 f8c3 	bl	1eea4 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   19d1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   19d22:	2d00      	cmp	r5, #0
   19d24:	d0cd      	beq.n	19cc2 <att_write_rsp.constprop.0+0x2a>
   19d26:	4632      	mov	r2, r6
   19d28:	4629      	mov	r1, r5
   19d2a:	4620      	mov	r0, r4
   19d2c:	f012 fe8b 	bl	2ca46 <send_err_rsp.part.0>
   19d30:	e7c7      	b.n	19cc2 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19d32:	2200      	movs	r2, #0
   19d34:	4639      	mov	r1, r7
   19d36:	4620      	mov	r0, r4
   19d38:	f7ff fee8 	bl	19b0c <bt_att_chan_create_pdu>
   19d3c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   19d3e:	2800      	cmp	r0, #0
   19d40:	d1ca      	bne.n	19cd8 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   19d42:	200e      	movs	r0, #14
   19d44:	e7be      	b.n	19cc4 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   19d46:	9901      	ldr	r1, [sp, #4]
   19d48:	2900      	cmp	r1, #0
   19d4a:	d0ba      	beq.n	19cc2 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   19d4c:	4620      	mov	r0, r4
   19d4e:	f012 fc1f 	bl	2c590 <bt_att_chan_send_rsp>
   19d52:	e7b6      	b.n	19cc2 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19d54:	2012      	movs	r0, #18
   19d56:	e7b5      	b.n	19cc4 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19d58:	2001      	movs	r0, #1
   19d5a:	e7b3      	b.n	19cc4 <att_write_rsp.constprop.0+0x2c>
   19d5c:	0002c42d 	.word	0x0002c42d

00019d60 <bt_att_create_pdu>:
{
   19d60:	b570      	push	{r4, r5, r6, lr}
   19d62:	460e      	mov	r6, r1
   19d64:	4615      	mov	r5, r2
	att = att_get(conn);
   19d66:	f7ff fc0d 	bl	19584 <att_get>
	if (!att) {
   19d6a:	b190      	cbz	r0, 19d92 <bt_att_create_pdu+0x32>
	return list->head;
   19d6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d6e:	4618      	mov	r0, r3
   19d70:	b11b      	cbz	r3, 19d7a <bt_att_create_pdu+0x1a>
	return node->next;
   19d72:	f850 39f0 	ldr.w	r3, [r0], #-240
   19d76:	b103      	cbz	r3, 19d7a <bt_att_create_pdu+0x1a>
   19d78:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d7a:	1c6c      	adds	r4, r5, #1
   19d7c:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d7e:	b118      	cbz	r0, 19d88 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d80:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19d82:	42a1      	cmp	r1, r4
   19d84:	d210      	bcs.n	19da8 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d86:	b933      	cbnz	r3, 19d96 <bt_att_create_pdu+0x36>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   19d88:	480b      	ldr	r0, [pc, #44]	; (19db8 <bt_att_create_pdu+0x58>)
   19d8a:	4622      	mov	r2, r4
   19d8c:	2157      	movs	r1, #87	; 0x57
   19d8e:	f010 feeb 	bl	2ab68 <z_log_minimal_printk>
}
   19d92:	2000      	movs	r0, #0
   19d94:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d96:	4618      	mov	r0, r3
   19d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   19d9c:	b153      	cbz	r3, 19db4 <bt_att_create_pdu+0x54>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d9e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19da0:	4291      	cmp	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19da2:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19da6:	d3f6      	bcc.n	19d96 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   19da8:	462a      	mov	r2, r5
   19daa:	4631      	mov	r1, r6
}
   19dac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19db0:	f7ff beac 	b.w	19b0c <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19db4:	4614      	mov	r4, r2
   19db6:	e7e3      	b.n	19d80 <bt_att_create_pdu+0x20>
   19db8:	00032837 	.word	0x00032837

00019dbc <att_read_group_req>:
{
   19dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19dc0:	8a0e      	ldrh	r6, [r1, #16]
   19dc2:	3e04      	subs	r6, #4
   19dc4:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   19dc6:	2e02      	cmp	r6, #2
{
   19dc8:	4604      	mov	r4, r0
   19dca:	b08c      	sub	sp, #48	; 0x30
   19dcc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19dce:	d001      	beq.n	19dd4 <att_read_group_req+0x18>
   19dd0:	2e10      	cmp	r6, #16
   19dd2:	d16a      	bne.n	19eaa <att_read_group_req+0xee>
   19dd4:	2104      	movs	r1, #4
   19dd6:	300c      	adds	r0, #12
   19dd8:	f005 f950 	bl	1f07c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19ddc:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19de0:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19de2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19de4:	1d01      	adds	r1, r0, #4
   19de6:	4632      	mov	r2, r6
   19de8:	4640      	mov	r0, r8
   19dea:	f011 ff47 	bl	2bc7c <bt_uuid_create>
   19dee:	2800      	cmp	r0, #0
   19df0:	d05d      	beq.n	19eae <att_read_group_req+0xf2>
	if (!start || !end) {
   19df2:	2d00      	cmp	r5, #0
   19df4:	d03a      	beq.n	19e6c <att_read_group_req+0xb0>
   19df6:	2600      	movs	r6, #0
   19df8:	2f00      	cmp	r7, #0
   19dfa:	d036      	beq.n	19e6a <att_read_group_req+0xae>
	if (start > end) {
   19dfc:	42bd      	cmp	r5, r7
   19dfe:	d835      	bhi.n	19e6c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19e00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19e04:	a901      	add	r1, sp, #4
   19e06:	4640      	mov	r0, r8
   19e08:	f88d 6004 	strb.w	r6, [sp, #4]
   19e0c:	f8ad 3006 	strh.w	r3, [sp, #6]
   19e10:	f011 ff06 	bl	2bc20 <bt_uuid_cmp>
   19e14:	bb70      	cbnz	r0, 19e74 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   19e16:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19e18:	2214      	movs	r2, #20
   19e1a:	2100      	movs	r1, #0
   19e1c:	a807      	add	r0, sp, #28
   19e1e:	f011 fe76 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19e22:	2201      	movs	r2, #1
   19e24:	2111      	movs	r1, #17
   19e26:	4630      	mov	r0, r6
   19e28:	f7ff ff9a 	bl	19d60 <bt_att_create_pdu>
   19e2c:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19e2e:	2800      	cmp	r0, #0
   19e30:	d03d      	beq.n	19eae <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   19e32:	2101      	movs	r1, #1
   19e34:	300c      	adds	r0, #12
	data.uuid = uuid;
   19e36:	e9cd 4807 	strd	r4, r8, [sp, #28]
   19e3a:	f005 f939 	bl	1f0b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   19e3e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19e40:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19e42:	4a1c      	ldr	r2, [pc, #112]	; (19eb4 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   19e44:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19e46:	4639      	mov	r1, r7
	data.group = NULL;
   19e48:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19e4a:	4628      	mov	r0, r5
   19e4c:	ab07      	add	r3, sp, #28
   19e4e:	f012 fb1e 	bl	2c48e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e54:	781b      	ldrb	r3, [r3, #0]
   19e56:	bb1b      	cbnz	r3, 19ea0 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19e5a:	6998      	ldr	r0, [r3, #24]
   19e5c:	f7ff fc6e 	bl	1973c <tx_meta_data_free>
		net_buf_unref(data.buf);
   19e60:	9809      	ldr	r0, [sp, #36]	; 0x24
   19e62:	f005 f81f 	bl	1eea4 <net_buf_unref>
	if (!req) {
   19e66:	230a      	movs	r3, #10
   19e68:	e001      	b.n	19e6e <att_read_group_req+0xb2>
			*err = 0U;
   19e6a:	463d      	mov	r5, r7
	if (!req) {
   19e6c:	2301      	movs	r3, #1
   19e6e:	462a      	mov	r2, r5
   19e70:	2110      	movs	r1, #16
   19e72:	e00e      	b.n	19e92 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19e74:	f642 0301 	movw	r3, #10241	; 0x2801
   19e78:	a907      	add	r1, sp, #28
   19e7a:	4640      	mov	r0, r8
   19e7c:	f88d 601c 	strb.w	r6, [sp, #28]
   19e80:	f8ad 301e 	strh.w	r3, [sp, #30]
   19e84:	f011 fecc 	bl	2bc20 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19e88:	2800      	cmp	r0, #0
   19e8a:	d0c4      	beq.n	19e16 <att_read_group_req+0x5a>
	if (!req) {
   19e8c:	2310      	movs	r3, #16
   19e8e:	462a      	mov	r2, r5
   19e90:	4619      	mov	r1, r3
   19e92:	4620      	mov	r0, r4
   19e94:	f012 fdd7 	bl	2ca46 <send_err_rsp.part.0>
		return 0;
   19e98:	2000      	movs	r0, #0
}
   19e9a:	b00c      	add	sp, #48	; 0x30
   19e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   19ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
   19ea2:	4620      	mov	r0, r4
   19ea4:	f012 fb74 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   19ea8:	e7f6      	b.n	19e98 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   19eaa:	2004      	movs	r0, #4
   19eac:	e7f5      	b.n	19e9a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   19eae:	200e      	movs	r0, #14
   19eb0:	e7f3      	b.n	19e9a <att_read_group_req+0xde>
   19eb2:	bf00      	nop
   19eb4:	000198a1 	.word	0x000198a1

00019eb8 <att_read_mult_vl_req>:
{
   19eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19ebc:	6846      	ldr	r6, [r0, #4]
{
   19ebe:	b085      	sub	sp, #20
   19ec0:	4604      	mov	r4, r0
   19ec2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19ec4:	4630      	mov	r0, r6
   19ec6:	2101      	movs	r1, #1
   19ec8:	f013 fbf8 	bl	2d6bc <bt_gatt_change_aware>
   19ecc:	b950      	cbnz	r0, 19ee4 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19ece:	2105      	movs	r1, #5
   19ed0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19ed4:	f012 fd1d 	bl	2c912 <atomic_test_and_set_bit>
   19ed8:	2800      	cmp	r0, #0
   19eda:	d13b      	bne.n	19f54 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19edc:	2012      	movs	r0, #18
}
   19ede:	b005      	add	sp, #20
   19ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19ee4:	2210      	movs	r2, #16
   19ee6:	2100      	movs	r1, #0
   19ee8:	4668      	mov	r0, sp
   19eea:	f011 fe10 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19eee:	2200      	movs	r2, #0
   19ef0:	2121      	movs	r1, #33	; 0x21
   19ef2:	4630      	mov	r0, r6
   19ef4:	f7ff ff34 	bl	19d60 <bt_att_create_pdu>
   19ef8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19efa:	b368      	cbz	r0, 19f58 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19efc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19f5c <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   19f00:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19f02:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19f06:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19f0a:	8a2b      	ldrh	r3, [r5, #16]
   19f0c:	2b01      	cmp	r3, #1
   19f0e:	d804      	bhi.n	19f1a <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19f10:	9902      	ldr	r1, [sp, #8]
   19f12:	4620      	mov	r0, r4
   19f14:	f012 fb3c 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   19f18:	e01c      	b.n	19f54 <att_read_mult_vl_req+0x9c>
   19f1a:	4638      	mov	r0, r7
   19f1c:	f013 fff0 	bl	2df00 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19f20:	466b      	mov	r3, sp
   19f22:	464a      	mov	r2, r9
   19f24:	4601      	mov	r1, r0
   19f26:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19f28:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19f2c:	f012 faaf 	bl	2c48e <bt_gatt_foreach_attr>
		if (data.err) {
   19f30:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19f34:	2b00      	cmp	r3, #0
   19f36:	d0e8      	beq.n	19f0a <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19f38:	9b02      	ldr	r3, [sp, #8]
   19f3a:	6998      	ldr	r0, [r3, #24]
   19f3c:	f7ff fbfe 	bl	1973c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19f40:	9802      	ldr	r0, [sp, #8]
   19f42:	f004 ffaf 	bl	1eea4 <net_buf_unref>
	if (!req) {
   19f46:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19f4a:	4632      	mov	r2, r6
   19f4c:	2120      	movs	r1, #32
   19f4e:	4620      	mov	r0, r4
   19f50:	f012 fd79 	bl	2ca46 <send_err_rsp.part.0>
			return 0;
   19f54:	2000      	movs	r0, #0
   19f56:	e7c2      	b.n	19ede <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19f58:	200e      	movs	r0, #14
   19f5a:	e7c0      	b.n	19ede <att_read_mult_vl_req+0x26>
   19f5c:	0002c771 	.word	0x0002c771

00019f60 <att_read_mult_req>:
{
   19f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19f64:	6846      	ldr	r6, [r0, #4]
{
   19f66:	b085      	sub	sp, #20
   19f68:	4604      	mov	r4, r0
   19f6a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19f6c:	4630      	mov	r0, r6
   19f6e:	2101      	movs	r1, #1
   19f70:	f013 fba4 	bl	2d6bc <bt_gatt_change_aware>
   19f74:	b950      	cbnz	r0, 19f8c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19f76:	2105      	movs	r1, #5
   19f78:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19f7c:	f012 fcc9 	bl	2c912 <atomic_test_and_set_bit>
   19f80:	2800      	cmp	r0, #0
   19f82:	d13b      	bne.n	19ffc <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19f84:	2012      	movs	r0, #18
}
   19f86:	b005      	add	sp, #20
   19f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19f8c:	2210      	movs	r2, #16
   19f8e:	2100      	movs	r1, #0
   19f90:	4668      	mov	r0, sp
   19f92:	f011 fdbc 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19f96:	2200      	movs	r2, #0
   19f98:	210f      	movs	r1, #15
   19f9a:	4630      	mov	r0, r6
   19f9c:	f7ff fee0 	bl	19d60 <bt_att_create_pdu>
   19fa0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19fa2:	b368      	cbz	r0, 1a000 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19fa4:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a004 <att_read_mult_req+0xa4>
	data.chan = chan;
   19fa8:	9400      	str	r4, [sp, #0]
   19faa:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19fae:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19fb2:	8a2b      	ldrh	r3, [r5, #16]
   19fb4:	2b01      	cmp	r3, #1
   19fb6:	d804      	bhi.n	19fc2 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19fb8:	9902      	ldr	r1, [sp, #8]
   19fba:	4620      	mov	r0, r4
   19fbc:	f012 fae8 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   19fc0:	e01c      	b.n	19ffc <att_read_mult_req+0x9c>
   19fc2:	4638      	mov	r0, r7
   19fc4:	f013 ff9c 	bl	2df00 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19fc8:	466b      	mov	r3, sp
   19fca:	464a      	mov	r2, r9
   19fcc:	4601      	mov	r1, r0
   19fce:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19fd0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19fd4:	f012 fa5b 	bl	2c48e <bt_gatt_foreach_attr>
		if (data.err) {
   19fd8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19fdc:	2b00      	cmp	r3, #0
   19fde:	d0e8      	beq.n	19fb2 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19fe0:	9b02      	ldr	r3, [sp, #8]
   19fe2:	6998      	ldr	r0, [r3, #24]
   19fe4:	f7ff fbaa 	bl	1973c <tx_meta_data_free>
			net_buf_unref(data.buf);
   19fe8:	9802      	ldr	r0, [sp, #8]
   19fea:	f004 ff5b 	bl	1eea4 <net_buf_unref>
	if (!req) {
   19fee:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19ff2:	4632      	mov	r2, r6
   19ff4:	210e      	movs	r1, #14
   19ff6:	4620      	mov	r0, r4
   19ff8:	f012 fd25 	bl	2ca46 <send_err_rsp.part.0>
			return 0;
   19ffc:	2000      	movs	r0, #0
   19ffe:	e7c2      	b.n	19f86 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a000:	200e      	movs	r0, #14
   1a002:	e7c0      	b.n	19f86 <att_read_mult_req+0x26>
   1a004:	0002c72b 	.word	0x0002c72b

0001a008 <att_read_rsp>:
{
   1a008:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a00c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1a010:	4604      	mov	r4, r0
   1a012:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a014:	4640      	mov	r0, r8
   1a016:	2101      	movs	r1, #1
{
   1a018:	4617      	mov	r7, r2
   1a01a:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1a01c:	f013 fb4e 	bl	2d6bc <bt_gatt_change_aware>
   1a020:	b948      	cbnz	r0, 1a036 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a022:	2105      	movs	r1, #5
   1a024:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1a028:	f012 fc73 	bl	2c912 <atomic_test_and_set_bit>
   1a02c:	bb78      	cbnz	r0, 1a08e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a02e:	2012      	movs	r0, #18
}
   1a030:	b004      	add	sp, #16
   1a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1a036:	b38d      	cbz	r5, 1a09c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1a038:	2210      	movs	r2, #16
   1a03a:	2100      	movs	r1, #0
   1a03c:	4668      	mov	r0, sp
   1a03e:	f011 fd66 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a042:	2200      	movs	r2, #0
   1a044:	4639      	mov	r1, r7
   1a046:	4640      	mov	r0, r8
   1a048:	f7ff fe8a 	bl	19d60 <bt_att_create_pdu>
   1a04c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a04e:	b338      	cbz	r0, 1a0a0 <att_read_rsp+0x98>
	data.offset = offset;
   1a050:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a054:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a058:	2301      	movs	r3, #1
   1a05a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a05e:	4a11      	ldr	r2, [pc, #68]	; (1a0a4 <att_read_rsp+0x9c>)
	data.chan = chan;
   1a060:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a062:	466b      	mov	r3, sp
   1a064:	4629      	mov	r1, r5
   1a066:	4628      	mov	r0, r5
   1a068:	f012 fa11 	bl	2c48e <bt_gatt_foreach_attr>
	if (data.err) {
   1a06c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a070:	b17b      	cbz	r3, 1a092 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a072:	9b02      	ldr	r3, [sp, #8]
   1a074:	6998      	ldr	r0, [r3, #24]
   1a076:	f7ff fb61 	bl	1973c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a07a:	9802      	ldr	r0, [sp, #8]
   1a07c:	f004 ff12 	bl	1eea4 <net_buf_unref>
	if (!req) {
   1a080:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a084:	462a      	mov	r2, r5
   1a086:	4631      	mov	r1, r6
   1a088:	4620      	mov	r0, r4
   1a08a:	f012 fcdc 	bl	2ca46 <send_err_rsp.part.0>
			return 0;
   1a08e:	2000      	movs	r0, #0
   1a090:	e7ce      	b.n	1a030 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a092:	9902      	ldr	r1, [sp, #8]
   1a094:	4620      	mov	r0, r4
   1a096:	f012 fa7b 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   1a09a:	e7f8      	b.n	1a08e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a09c:	2001      	movs	r0, #1
   1a09e:	e7c7      	b.n	1a030 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a0a0:	200e      	movs	r0, #14
   1a0a2:	e7c5      	b.n	1a030 <att_read_rsp+0x28>
   1a0a4:	0002c72b 	.word	0x0002c72b

0001a0a8 <att_read_type_req>:
{
   1a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a0ac:	8a0d      	ldrh	r5, [r1, #16]
   1a0ae:	3d04      	subs	r5, #4
   1a0b0:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a0b2:	2d02      	cmp	r5, #2
{
   1a0b4:	4604      	mov	r4, r0
   1a0b6:	b08c      	sub	sp, #48	; 0x30
   1a0b8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a0ba:	d001      	beq.n	1a0c0 <att_read_type_req+0x18>
   1a0bc:	2d10      	cmp	r5, #16
   1a0be:	d150      	bne.n	1a162 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a0c0:	2104      	movs	r1, #4
   1a0c2:	300c      	adds	r0, #12
   1a0c4:	f004 ffda 	bl	1f07c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a0c8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a0cc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a0ce:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a0d0:	1d01      	adds	r1, r0, #4
   1a0d2:	462a      	mov	r2, r5
   1a0d4:	4640      	mov	r0, r8
   1a0d6:	f011 fdd1 	bl	2bc7c <bt_uuid_create>
   1a0da:	b188      	cbz	r0, 1a100 <att_read_type_req+0x58>
	if (!start || !end) {
   1a0dc:	b19e      	cbz	r6, 1a106 <att_read_type_req+0x5e>
   1a0de:	b18f      	cbz	r7, 1a104 <att_read_type_req+0x5c>
	if (start > end) {
   1a0e0:	42b7      	cmp	r7, r6
   1a0e2:	d310      	bcc.n	1a106 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a0e4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a0e6:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a0e8:	2100      	movs	r1, #0
   1a0ea:	eb0d 0002 	add.w	r0, sp, r2
   1a0ee:	f011 fd0e 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1a0f2:	2201      	movs	r2, #1
   1a0f4:	2109      	movs	r1, #9
   1a0f6:	4628      	mov	r0, r5
   1a0f8:	f7ff fe32 	bl	19d60 <bt_att_create_pdu>
   1a0fc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1a0fe:	b960      	cbnz	r0, 1a11a <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1a100:	200e      	movs	r0, #14
   1a102:	e007      	b.n	1a114 <att_read_type_req+0x6c>
			*err = 0U;
   1a104:	463e      	mov	r6, r7
	if (!req) {
   1a106:	2301      	movs	r3, #1
   1a108:	4632      	mov	r2, r6
   1a10a:	2108      	movs	r1, #8
   1a10c:	4620      	mov	r0, r4
   1a10e:	f012 fc9a 	bl	2ca46 <send_err_rsp.part.0>
		return 0;
   1a112:	2000      	movs	r0, #0
}
   1a114:	b00c      	add	sp, #48	; 0x30
   1a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1a11a:	2101      	movs	r1, #1
   1a11c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a11e:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1a122:	f004 ffc5 	bl	1f0b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   1a126:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a128:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1a12a:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a12c:	230a      	movs	r3, #10
   1a12e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1a132:	4a0d      	ldr	r2, [pc, #52]	; (1a168 <att_read_type_req+0xc0>)
   1a134:	ab06      	add	r3, sp, #24
   1a136:	4639      	mov	r1, r7
   1a138:	4630      	mov	r0, r6
   1a13a:	f012 f9a8 	bl	2c48e <bt_gatt_foreach_attr>
	if (data.err) {
   1a13e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a142:	b14b      	cbz	r3, 1a158 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a144:	9b08      	ldr	r3, [sp, #32]
   1a146:	6998      	ldr	r0, [r3, #24]
   1a148:	f7ff faf8 	bl	1973c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a14c:	9808      	ldr	r0, [sp, #32]
   1a14e:	f004 fea9 	bl	1eea4 <net_buf_unref>
	if (!req) {
   1a152:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a156:	e7d7      	b.n	1a108 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1a158:	9908      	ldr	r1, [sp, #32]
   1a15a:	4620      	mov	r0, r4
   1a15c:	f012 fa18 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   1a160:	e7d7      	b.n	1a112 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1a162:	2004      	movs	r0, #4
   1a164:	e7d6      	b.n	1a114 <att_read_type_req+0x6c>
   1a166:	bf00      	nop
   1a168:	0001994d 	.word	0x0001994d

0001a16c <att_find_type_req>:
{
   1a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a170:	460f      	mov	r7, r1
   1a172:	b086      	sub	sp, #24
   1a174:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1a176:	2106      	movs	r1, #6
   1a178:	f107 000c 	add.w	r0, r7, #12
   1a17c:	f004 ff7e 	bl	1f07c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a180:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a182:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1a186:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1a188:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1a18c:	b1c5      	cbz	r5, 1a1c0 <att_find_type_req+0x54>
   1a18e:	2300      	movs	r3, #0
   1a190:	f1b8 0f00 	cmp.w	r8, #0
   1a194:	d013      	beq.n	1a1be <att_find_type_req+0x52>
	if (start > end) {
   1a196:	4545      	cmp	r5, r8
   1a198:	d812      	bhi.n	1a1c0 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1a19a:	f88d 3000 	strb.w	r3, [sp]
   1a19e:	f88d 3004 	strb.w	r3, [sp, #4]
   1a1a2:	a901      	add	r1, sp, #4
   1a1a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a1a8:	4668      	mov	r0, sp
   1a1aa:	f8ad 2002 	strh.w	r2, [sp, #2]
   1a1ae:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a1b2:	f011 fd35 	bl	2bc20 <bt_uuid_cmp>
   1a1b6:	4606      	mov	r6, r0
   1a1b8:	b160      	cbz	r0, 1a1d4 <att_find_type_req+0x68>
	if (!req) {
   1a1ba:	230a      	movs	r3, #10
   1a1bc:	e001      	b.n	1a1c2 <att_find_type_req+0x56>
			*err = 0U;
   1a1be:	4645      	mov	r5, r8
	if (!req) {
   1a1c0:	2301      	movs	r3, #1
   1a1c2:	462a      	mov	r2, r5
   1a1c4:	2106      	movs	r1, #6
   1a1c6:	4620      	mov	r0, r4
   1a1c8:	f012 fc3d 	bl	2ca46 <send_err_rsp.part.0>
		return 0;
   1a1cc:	2000      	movs	r0, #0
}
   1a1ce:	b006      	add	sp, #24
   1a1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1d4:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a1d8:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1a1da:	4601      	mov	r1, r0
   1a1dc:	2214      	movs	r2, #20
   1a1de:	a801      	add	r0, sp, #4
   1a1e0:	f011 fc95 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1a1e4:	4632      	mov	r2, r6
   1a1e6:	2107      	movs	r1, #7
   1a1e8:	4650      	mov	r0, sl
   1a1ea:	f7ff fdb9 	bl	19d60 <bt_att_create_pdu>
   1a1ee:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a1f0:	b1f8      	cbz	r0, 1a232 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a1f2:	230a      	movs	r3, #10
   1a1f4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a1f8:	4a0f      	ldr	r2, [pc, #60]	; (1a238 <att_find_type_req+0xcc>)
	data.chan = chan;
   1a1fa:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a1fc:	ab01      	add	r3, sp, #4
   1a1fe:	4641      	mov	r1, r8
   1a200:	4628      	mov	r0, r5
	data.value = value;
   1a202:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1a206:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a20a:	f012 f940 	bl	2c48e <bt_gatt_foreach_attr>
	if (data.err) {
   1a20e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a212:	b14b      	cbz	r3, 1a228 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a214:	9b02      	ldr	r3, [sp, #8]
   1a216:	6998      	ldr	r0, [r3, #24]
   1a218:	f7ff fa90 	bl	1973c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a21c:	9802      	ldr	r0, [sp, #8]
   1a21e:	f004 fe41 	bl	1eea4 <net_buf_unref>
	if (!req) {
   1a222:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a226:	e7cc      	b.n	1a1c2 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1a228:	9902      	ldr	r1, [sp, #8]
   1a22a:	4620      	mov	r0, r4
   1a22c:	f012 f9b0 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   1a230:	e7cc      	b.n	1a1cc <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1a232:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a234:	e7cb      	b.n	1a1ce <att_find_type_req+0x62>
   1a236:	bf00      	nop
   1a238:	000195f9 	.word	0x000195f9

0001a23c <att_find_info_req>:
{
   1a23c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1a23e:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a240:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a242:	885e      	ldrh	r6, [r3, #2]
{
   1a244:	b085      	sub	sp, #20
   1a246:	4604      	mov	r4, r0
	if (!start || !end) {
   1a248:	b195      	cbz	r5, 1a270 <att_find_info_req+0x34>
   1a24a:	b186      	cbz	r6, 1a26e <att_find_info_req+0x32>
	if (start > end) {
   1a24c:	42b5      	cmp	r5, r6
   1a24e:	d80f      	bhi.n	1a270 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a250:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1a252:	2210      	movs	r2, #16
   1a254:	2100      	movs	r1, #0
   1a256:	4668      	mov	r0, sp
   1a258:	f011 fc59 	bl	2bb0e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1a25c:	2200      	movs	r2, #0
   1a25e:	2105      	movs	r1, #5
   1a260:	4638      	mov	r0, r7
   1a262:	f7ff fd7d 	bl	19d60 <bt_att_create_pdu>
   1a266:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1a268:	b958      	cbnz	r0, 1a282 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1a26a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1a26c:	e007      	b.n	1a27e <att_find_info_req+0x42>
			*err = 0U;
   1a26e:	4635      	mov	r5, r6
	if (!req) {
   1a270:	2301      	movs	r3, #1
   1a272:	462a      	mov	r2, r5
   1a274:	2104      	movs	r1, #4
   1a276:	4620      	mov	r0, r4
   1a278:	f012 fbe5 	bl	2ca46 <send_err_rsp.part.0>
		return 0;
   1a27c:	2000      	movs	r0, #0
}
   1a27e:	b005      	add	sp, #20
   1a280:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a282:	466b      	mov	r3, sp
   1a284:	4a0a      	ldr	r2, [pc, #40]	; (1a2b0 <att_find_info_req+0x74>)
	data.chan = chan;
   1a286:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a288:	4631      	mov	r1, r6
   1a28a:	4628      	mov	r0, r5
   1a28c:	f012 f8ff 	bl	2c48e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1a290:	9b02      	ldr	r3, [sp, #8]
   1a292:	b943      	cbnz	r3, 1a2a6 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a294:	9b01      	ldr	r3, [sp, #4]
   1a296:	6998      	ldr	r0, [r3, #24]
   1a298:	f7ff fa50 	bl	1973c <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a29c:	9801      	ldr	r0, [sp, #4]
   1a29e:	f004 fe01 	bl	1eea4 <net_buf_unref>
	if (!req) {
   1a2a2:	230a      	movs	r3, #10
   1a2a4:	e7e5      	b.n	1a272 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1a2a6:	9901      	ldr	r1, [sp, #4]
   1a2a8:	4620      	mov	r0, r4
   1a2aa:	f012 f971 	bl	2c590 <bt_att_chan_send_rsp>
	return 0;
   1a2ae:	e7e5      	b.n	1a27c <att_find_info_req+0x40>
   1a2b0:	0002c4a5 	.word	0x0002c4a5

0001a2b4 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1a2b4:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a2b6:	4c0b      	ldr	r4, [pc, #44]	; (1a2e4 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1a2b8:	4d0b      	ldr	r5, [pc, #44]	; (1a2e8 <bt_att_init+0x34>)
   1a2ba:	4620      	mov	r0, r4
   1a2bc:	f014 fc68 	bl	2eb90 <z_impl_k_queue_init>
   1a2c0:	4629      	mov	r1, r5
   1a2c2:	4620      	mov	r0, r4
   1a2c4:	f014 fc71 	bl	2ebaa <k_queue_append>
   1a2c8:	f105 0114 	add.w	r1, r5, #20
   1a2cc:	4620      	mov	r0, r4
   1a2ce:	f014 fc6c 	bl	2ebaa <k_queue_append>
   1a2d2:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a2d6:	4620      	mov	r0, r4
   1a2d8:	f014 fc67 	bl	2ebaa <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1a2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1a2e0:	f000 bef8 	b.w	1b0d4 <bt_gatt_init>
   1a2e4:	20000b9c 	.word	0x20000b9c
   1a2e8:	20003404 	.word	0x20003404

0001a2ec <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1a2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1a2ee:	2300      	movs	r3, #0
{
   1a2f0:	4605      	mov	r5, r0
   1a2f2:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1a2f4:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1a2f6:	f00c f961 	bl	265bc <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1a2fa:	4b0b      	ldr	r3, [pc, #44]	; (1a328 <bt_att_req_alloc+0x3c>)
   1a2fc:	681b      	ldr	r3, [r3, #0]
   1a2fe:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1a300:	bf04      	itt	eq
   1a302:	2500      	moveq	r5, #0
   1a304:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1a306:	a901      	add	r1, sp, #4
   1a308:	4808      	ldr	r0, [pc, #32]	; (1a32c <bt_att_req_alloc+0x40>)
   1a30a:	462a      	mov	r2, r5
   1a30c:	4623      	mov	r3, r4
   1a30e:	f009 ffd9 	bl	242c4 <k_mem_slab_alloc>
   1a312:	4601      	mov	r1, r0
   1a314:	b930      	cbnz	r0, 1a324 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1a316:	9801      	ldr	r0, [sp, #4]
   1a318:	221c      	movs	r2, #28
   1a31a:	f011 fbf8 	bl	2bb0e <memset>

	return req;
   1a31e:	9801      	ldr	r0, [sp, #4]
}
   1a320:	b003      	add	sp, #12
   1a322:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a324:	2000      	movs	r0, #0
   1a326:	e7fb      	b.n	1a320 <bt_att_req_alloc+0x34>
   1a328:	20003440 	.word	0x20003440
   1a32c:	20000a8c 	.word	0x20000a8c

0001a330 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1a330:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1a332:	6883      	ldr	r3, [r0, #8]
{
   1a334:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1a336:	b14b      	cbz	r3, 1a34c <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1a338:	6998      	ldr	r0, [r3, #24]
   1a33a:	f7ff f9ff 	bl	1973c <tx_meta_data_free>
		net_buf_unref(req->buf);
   1a33e:	9b01      	ldr	r3, [sp, #4]
   1a340:	6898      	ldr	r0, [r3, #8]
   1a342:	f004 fdaf 	bl	1eea4 <net_buf_unref>
		req->buf = NULL;
   1a346:	9b01      	ldr	r3, [sp, #4]
   1a348:	2200      	movs	r2, #0
   1a34a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1a34c:	4803      	ldr	r0, [pc, #12]	; (1a35c <bt_att_req_free+0x2c>)
   1a34e:	a901      	add	r1, sp, #4
   1a350:	f00a f810 	bl	24374 <k_mem_slab_free>
}
   1a354:	b003      	add	sp, #12
   1a356:	f85d fb04 	ldr.w	pc, [sp], #4
   1a35a:	bf00      	nop
   1a35c:	20000a8c 	.word	0x20000a8c

0001a360 <att_handle_rsp>:
{
   1a360:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a364:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1a366:	30c0      	adds	r0, #192	; 0xc0
{
   1a368:	460e      	mov	r6, r1
   1a36a:	4617      	mov	r7, r2
   1a36c:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1a36e:	f00b f95f 	bl	25630 <k_work_cancel_delayable>
	if (!chan->req) {
   1a372:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1a376:	b950      	cbnz	r0, 1a38e <att_handle_rsp+0x2e>
		LOG_WRN("No pending ATT request");
   1a378:	4816      	ldr	r0, [pc, #88]	; (1a3d4 <att_handle_rsp+0x74>)
   1a37a:	2157      	movs	r1, #87	; 0x57
   1a37c:	f010 fbf4 	bl	2ab68 <z_log_minimal_printk>
	att_req_send_process(chan->att);
   1a380:	6820      	ldr	r0, [r4, #0]
   1a382:	f012 fa61 	bl	2c848 <att_req_send_process>
}
   1a386:	2000      	movs	r0, #0
   1a388:	b002      	add	sp, #8
   1a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1a38e:	4b12      	ldr	r3, [pc, #72]	; (1a3d8 <att_handle_rsp+0x78>)
   1a390:	4298      	cmp	r0, r3
   1a392:	f04f 0800 	mov.w	r8, #0
   1a396:	d102      	bne.n	1a39e <att_handle_rsp+0x3e>
		chan->req = NULL;
   1a398:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   1a39c:	e7f0      	b.n	1a380 <att_handle_rsp+0x20>
	func = chan->req->func;
   1a39e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1a3a2:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1a3a6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1a3aa:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1a3ae:	f7ff ffbf 	bl	1a330 <bt_att_req_free>
	att_req_send_process(chan->att);
   1a3b2:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1a3b4:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1a3b8:	f012 fa46 	bl	2c848 <att_req_send_process>
	if (func) {
   1a3bc:	f1b9 0f00 	cmp.w	r9, #0
   1a3c0:	d0e1      	beq.n	1a386 <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
   1a3c2:	6820      	ldr	r0, [r4, #0]
   1a3c4:	f8cd a000 	str.w	sl, [sp]
   1a3c8:	6800      	ldr	r0, [r0, #0]
   1a3ca:	463b      	mov	r3, r7
   1a3cc:	4632      	mov	r2, r6
   1a3ce:	4629      	mov	r1, r5
   1a3d0:	47c8      	blx	r9
   1a3d2:	e7d8      	b.n	1a386 <att_handle_rsp+0x26>
   1a3d4:	00032857 	.word	0x00032857
   1a3d8:	20003444 	.word	0x20003444

0001a3dc <att_error_rsp>:
{
   1a3dc:	b570      	push	{r4, r5, r6, lr}
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1a3de:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
	rsp = (void *)buf->data;
   1a3e2:	68ca      	ldr	r2, [r1, #12]
{
   1a3e4:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1a3e6:	b313      	cbz	r3, 1a42e <att_error_rsp+0x52>
   1a3e8:	4915      	ldr	r1, [pc, #84]	; (1a440 <att_error_rsp+0x64>)
   1a3ea:	428b      	cmp	r3, r1
   1a3ec:	d01f      	beq.n	1a42e <att_error_rsp+0x52>
   1a3ee:	78d4      	ldrb	r4, [r2, #3]
   1a3f0:	b1ec      	cbz	r4, 1a42e <att_error_rsp+0x52>
	switch (err) {
   1a3f2:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1a3f4:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   1a3f6:	d006      	beq.n	1a406 <att_error_rsp+0x2a>
   1a3f8:	2c0f      	cmp	r4, #15
   1a3fa:	d119      	bne.n	1a430 <att_error_rsp+0x54>
		if (conn->sec_level >= BT_SECURITY_L2)
   1a3fc:	7a43      	ldrb	r3, [r0, #9]
   1a3fe:	2b01      	cmp	r3, #1
   1a400:	d816      	bhi.n	1a430 <att_error_rsp+0x54>
		sec = BT_SECURITY_L2;
   1a402:	2102      	movs	r1, #2
   1a404:	e007      	b.n	1a416 <att_error_rsp+0x3a>
		if (conn->sec_level < BT_SECURITY_L2) {
   1a406:	7a43      	ldrb	r3, [r0, #9]
   1a408:	2b01      	cmp	r3, #1
   1a40a:	d9fa      	bls.n	1a402 <att_error_rsp+0x26>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1a40c:	2b02      	cmp	r3, #2
   1a40e:	d00c      	beq.n	1a42a <att_error_rsp+0x4e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1a410:	2b03      	cmp	r3, #3
   1a412:	d10d      	bne.n	1a430 <att_error_rsp+0x54>
			sec = BT_SECURITY_L4;
   1a414:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1a416:	f011 fe42 	bl	2c09e <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1a41a:	b948      	cbnz	r0, 1a430 <att_error_rsp+0x54>
		chan->req->retrying = true;
   1a41c:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   1a420:	7c13      	ldrb	r3, [r2, #16]
   1a422:	f043 0301 	orr.w	r3, r3, #1
   1a426:	7413      	strb	r3, [r2, #16]
}
   1a428:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1a42a:	2103      	movs	r1, #3
   1a42c:	e7f3      	b.n	1a416 <att_error_rsp+0x3a>
		err = BT_ATT_ERR_UNLIKELY;
   1a42e:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   1a430:	2200      	movs	r2, #0
   1a432:	4623      	mov	r3, r4
   1a434:	4628      	mov	r0, r5
   1a436:	4611      	mov	r1, r2
}
   1a438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1a43c:	f7ff bf90 	b.w	1a360 <att_handle_rsp>
   1a440:	20003444 	.word	0x20003444

0001a444 <bt_att_disconnected>:
{
   1a444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1a448:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1a44c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1a44e:	2e00      	cmp	r6, #0
   1a450:	d056      	beq.n	1a500 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1a452:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   1a456:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1a45a:	f012 f94b 	bl	2c6f4 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1a45e:	1f27      	subs	r7, r4, #4
   1a460:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   1a464:	2200      	movs	r2, #0
   1a466:	2300      	movs	r3, #0
   1a468:	4640      	mov	r0, r8
   1a46a:	f013 fd39 	bl	2dee0 <net_buf_get>
   1a46e:	4605      	mov	r5, r0
   1a470:	bb28      	cbnz	r0, 1a4be <bt_att_disconnected+0x7a>
	if (chan->req) {
   1a472:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a476:	b12b      	cbz	r3, 1a484 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1a478:	4602      	mov	r2, r0
   1a47a:	4601      	mov	r1, r0
   1a47c:	230e      	movs	r3, #14
   1a47e:	4638      	mov	r0, r7
   1a480:	f7ff ff6e 	bl	1a360 <att_handle_rsp>
	chan->att = NULL;
   1a484:	2300      	movs	r3, #0
   1a486:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1a48a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1a48c:	2b00      	cmp	r3, #0
   1a48e:	d137      	bne.n	1a500 <bt_att_disconnected+0xbc>
	att_reset(att);
   1a490:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a492:	9803      	ldr	r0, [sp, #12]
   1a494:	2200      	movs	r2, #0
   1a496:	2300      	movs	r3, #0
   1a498:	300c      	adds	r0, #12
   1a49a:	f013 fd21 	bl	2dee0 <net_buf_get>
   1a49e:	4605      	mov	r5, r0
   1a4a0:	b9a0      	cbnz	r0, 1a4cc <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1a4a2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1a4a4:	6845      	ldr	r5, [r0, #4]
   1a4a6:	b9c5      	cbnz	r5, 1a4da <bt_att_disconnected+0x96>
	att->conn = NULL;
   1a4a8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1a4aa:	a903      	add	r1, sp, #12
   1a4ac:	4816      	ldr	r0, [pc, #88]	; (1a508 <bt_att_disconnected+0xc4>)
   1a4ae:	f009 ff61 	bl	24374 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1a4b2:	6820      	ldr	r0, [r4, #0]
}
   1a4b4:	b004      	add	sp, #16
   1a4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1a4ba:	f002 bb55 	b.w	1cb68 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a4be:	69a8      	ldr	r0, [r5, #24]
   1a4c0:	f7ff f93c 	bl	1973c <tx_meta_data_free>
		net_buf_unref(buf);
   1a4c4:	4628      	mov	r0, r5
   1a4c6:	f004 fced 	bl	1eea4 <net_buf_unref>
   1a4ca:	e7cb      	b.n	1a464 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a4cc:	69a8      	ldr	r0, [r5, #24]
   1a4ce:	f7ff f935 	bl	1973c <tx_meta_data_free>
		net_buf_unref(buf);
   1a4d2:	4628      	mov	r0, r5
   1a4d4:	f004 fce6 	bl	1eea4 <net_buf_unref>
   1a4d8:	e7db      	b.n	1a492 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a4da:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1a4dc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1a4de:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a4e0:	4295      	cmp	r5, r2
	list->tail = node;
   1a4e2:	bf08      	it	eq
   1a4e4:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1a4e6:	686e      	ldr	r6, [r5, #4]
   1a4e8:	b136      	cbz	r6, 1a4f8 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a4ea:	69ab      	ldr	r3, [r5, #24]
   1a4ec:	9300      	str	r3, [sp, #0]
   1a4ee:	2300      	movs	r3, #0
   1a4f0:	6800      	ldr	r0, [r0, #0]
   1a4f2:	461a      	mov	r2, r3
   1a4f4:	210e      	movs	r1, #14
   1a4f6:	47b0      	blx	r6
		bt_att_req_free(req);
   1a4f8:	4628      	mov	r0, r5
   1a4fa:	f7ff ff19 	bl	1a330 <bt_att_req_free>
   1a4fe:	e7d0      	b.n	1a4a2 <bt_att_disconnected+0x5e>
}
   1a500:	b004      	add	sp, #16
   1a502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a506:	bf00      	nop
   1a508:	20000a4c 	.word	0x20000a4c

0001a50c <att_timeout>:
{
   1a50c:	b510      	push	{r4, lr}
	LOG_ERR("ATT Timeout");
   1a50e:	2145      	movs	r1, #69	; 0x45
{
   1a510:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1a512:	4804      	ldr	r0, [pc, #16]	; (1a524 <att_timeout+0x18>)
   1a514:	f010 fb28 	bl	2ab68 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   1a518:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a520:	f7ff bf90 	b.w	1a444 <bt_att_disconnected>
   1a524:	00032873 	.word	0x00032873

0001a528 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a52a:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1a52c:	b950      	cbnz	r0, 1a544 <bt_att_send+0x1c>
   1a52e:	4928      	ldr	r1, [pc, #160]	; (1a5d0 <bt_att_send+0xa8>)
   1a530:	4828      	ldr	r0, [pc, #160]	; (1a5d4 <bt_att_send+0xac>)
   1a532:	f640 62a4 	movw	r2, #3748	; 0xea4
   1a536:	f010 fb09 	bl	2ab4c <assert_print>
   1a53a:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   1a53e:	4824      	ldr	r0, [pc, #144]	; (1a5d0 <bt_att_send+0xa8>)
   1a540:	f010 fafd 	bl	2ab3e <assert_post_action>
   1a544:	b941      	cbnz	r1, 1a558 <bt_att_send+0x30>
   1a546:	4922      	ldr	r1, [pc, #136]	; (1a5d0 <bt_att_send+0xa8>)
   1a548:	4822      	ldr	r0, [pc, #136]	; (1a5d4 <bt_att_send+0xac>)
   1a54a:	f640 62a5 	movw	r2, #3749	; 0xea5
   1a54e:	f010 fafd 	bl	2ab4c <assert_print>
   1a552:	f640 61a5 	movw	r1, #3749	; 0xea5
   1a556:	e7f2      	b.n	1a53e <bt_att_send+0x16>

	att = att_get(conn);
   1a558:	f7ff f814 	bl	19584 <att_get>
	if (!att) {
   1a55c:	4605      	mov	r5, r0
   1a55e:	b940      	cbnz	r0, 1a572 <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a560:	69a0      	ldr	r0, [r4, #24]
   1a562:	f7ff f8eb 	bl	1973c <tx_meta_data_free>
		net_buf_unref(buf);
   1a566:	4620      	mov	r0, r4
   1a568:	f004 fc9c 	bl	1eea4 <net_buf_unref>
		return -ENOTCONN;
   1a56c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1a572:	f100 060c 	add.w	r6, r0, #12
   1a576:	4621      	mov	r1, r4
   1a578:	4630      	mov	r0, r6
   1a57a:	f004 fc73 	bl	1ee64 <net_buf_put>
	return list->head;
   1a57e:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a580:	b14d      	cbz	r5, 1a596 <bt_att_send+0x6e>
	return node->next;
   1a582:	f855 49f0 	ldr.w	r4, [r5], #-240
   1a586:	b104      	cbz	r4, 1a58a <bt_att_send+0x62>
   1a588:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   1a58a:	4631      	mov	r1, r6
   1a58c:	4628      	mov	r0, r5
   1a58e:	f012 f80d 	bl	2c5ac <process_queue>
		if (!err) {
   1a592:	4603      	mov	r3, r0
   1a594:	b980      	cbnz	r0, 1a5b8 <bt_att_send+0x90>
	return 0;
   1a596:	2000      	movs	r0, #0
   1a598:	e7ea      	b.n	1a570 <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1a59a:	2103      	movs	r1, #3
   1a59c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1a5a0:	f011 feef 	bl	2c382 <atomic_test_bit>
   1a5a4:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1a5a6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1a5aa:	f011 feea 	bl	2c382 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1a5ae:	4287      	cmp	r7, r0
   1a5b0:	f06f 0301 	mvn.w	r3, #1
   1a5b4:	d107      	bne.n	1a5c6 <bt_att_send+0x9e>
   1a5b6:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a5b8:	2c00      	cmp	r4, #0
   1a5ba:	d0ec      	beq.n	1a596 <bt_att_send+0x6e>
   1a5bc:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1a5c0:	b922      	cbnz	r2, 1a5cc <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   1a5c2:	3302      	adds	r3, #2
   1a5c4:	d0e9      	beq.n	1a59a <bt_att_send+0x72>
{
   1a5c6:	4625      	mov	r5, r4
   1a5c8:	4614      	mov	r4, r2
   1a5ca:	e7de      	b.n	1a58a <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a5cc:	3af0      	subs	r2, #240	; 0xf0
   1a5ce:	e7f8      	b.n	1a5c2 <bt_att_send+0x9a>
   1a5d0:	0003265e 	.word	0x0003265e
   1a5d4:	0003013d 	.word	0x0003013d

0001a5d8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a5d8:	b510      	push	{r4, lr}
   1a5da:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1a5dc:	b950      	cbnz	r0, 1a5f4 <bt_att_req_send+0x1c>
   1a5de:	4914      	ldr	r1, [pc, #80]	; (1a630 <bt_att_req_send+0x58>)
   1a5e0:	4814      	ldr	r0, [pc, #80]	; (1a634 <bt_att_req_send+0x5c>)
   1a5e2:	f640 62ba 	movw	r2, #3770	; 0xeba
   1a5e6:	f010 fab1 	bl	2ab4c <assert_print>
   1a5ea:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   1a5ee:	4810      	ldr	r0, [pc, #64]	; (1a630 <bt_att_req_send+0x58>)
   1a5f0:	f010 faa5 	bl	2ab3e <assert_post_action>
   1a5f4:	b941      	cbnz	r1, 1a608 <bt_att_req_send+0x30>
   1a5f6:	490e      	ldr	r1, [pc, #56]	; (1a630 <bt_att_req_send+0x58>)
   1a5f8:	480e      	ldr	r0, [pc, #56]	; (1a634 <bt_att_req_send+0x5c>)
   1a5fa:	f640 62bb 	movw	r2, #3771	; 0xebb
   1a5fe:	f010 faa5 	bl	2ab4c <assert_print>
   1a602:	f640 61bb 	movw	r1, #3771	; 0xebb
   1a606:	e7f2      	b.n	1a5ee <bt_att_req_send+0x16>

	att = att_get(conn);
   1a608:	f7fe ffbc 	bl	19584 <att_get>
	if (!att) {
   1a60c:	b160      	cbz	r0, 1a628 <bt_att_req_send+0x50>
	parent->next = child;
   1a60e:	2300      	movs	r3, #0
   1a610:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a612:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a614:	b92b      	cbnz	r3, 1a622 <bt_att_req_send+0x4a>
	list->head = node;
   1a616:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1a61a:	f012 f915 	bl	2c848 <att_req_send_process>

	return 0;
   1a61e:	2000      	movs	r0, #0
}
   1a620:	bd10      	pop	{r4, pc}
	parent->next = child;
   1a622:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a624:	6084      	str	r4, [r0, #8]
}
   1a626:	e7f8      	b.n	1a61a <bt_att_req_send+0x42>
		return -ENOTCONN;
   1a628:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a62c:	e7f8      	b.n	1a620 <bt_att_req_send+0x48>
   1a62e:	bf00      	nop
   1a630:	0003265e 	.word	0x0003265e
   1a634:	0003013d 	.word	0x0003013d

0001a638 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1a638:	b510      	push	{r4, lr}
   1a63a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   1a63c:	b338      	cbz	r0, 1a68e <bt_att_req_cancel+0x56>
   1a63e:	b331      	cbz	r1, 1a68e <bt_att_req_cancel+0x56>
		return;
	}

	att = att_get(conn);
   1a640:	f7fe ffa0 	bl	19584 <att_get>
	if (!att) {
   1a644:	b318      	cbz	r0, 1a68e <bt_att_req_cancel+0x56>
	return list->head;
   1a646:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a648:	b1db      	cbz	r3, 1a682 <bt_att_req_cancel+0x4a>
	return node->next;
   1a64a:	f853 29f0 	ldr.w	r2, [r3], #-240
   1a64e:	b102      	cbz	r2, 1a652 <bt_att_req_cancel+0x1a>
   1a650:	3af0      	subs	r2, #240	; 0xf0
	if (chan->req != req) {
   1a652:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   1a656:	428c      	cmp	r4, r1
   1a658:	d00b      	beq.n	1a672 <bt_att_req_cancel+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a65a:	b192      	cbz	r2, 1a682 <bt_att_req_cancel+0x4a>
   1a65c:	4613      	mov	r3, r2
   1a65e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   1a662:	2a00      	cmp	r2, #0
   1a664:	d0f5      	beq.n	1a652 <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   1a666:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   1a66a:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a66c:	f1a2 02f0 	sub.w	r2, r2, #240	; 0xf0
	if (chan->req != req) {
   1a670:	d1f4      	bne.n	1a65c <bt_att_req_cancel+0x24>
	chan->req = &cancel;
   1a672:	4a07      	ldr	r2, [pc, #28]	; (1a690 <bt_att_req_cancel+0x58>)
   1a674:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	bt_att_req_free(req);
   1a678:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   1a67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1a67e:	f7ff be57 	b.w	1a330 <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1a682:	3004      	adds	r0, #4
   1a684:	4621      	mov	r1, r4
   1a686:	f012 f835 	bl	2c6f4 <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   1a68a:	4620      	mov	r0, r4
   1a68c:	e7f5      	b.n	1a67a <bt_att_req_cancel+0x42>
}
   1a68e:	bd10      	pop	{r4, pc}
   1a690:	20003444 	.word	0x20003444

0001a694 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1a694:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a696:	4908      	ldr	r1, [pc, #32]	; (1a6b8 <db_hash_set+0x24>)
{
   1a698:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a69a:	4618      	mov	r0, r3
   1a69c:	2210      	movs	r2, #16
   1a69e:	47a0      	blx	r4
	if (len < 0) {
   1a6a0:	1e04      	subs	r4, r0, #0
   1a6a2:	da06      	bge.n	1a6b2 <db_hash_set+0x1e>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1a6a4:	4805      	ldr	r0, [pc, #20]	; (1a6bc <db_hash_set+0x28>)
   1a6a6:	4622      	mov	r2, r4
   1a6a8:	2145      	movs	r1, #69	; 0x45
   1a6aa:	f010 fa5d 	bl	2ab68 <z_log_minimal_printk>
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1a6ae:	4620      	mov	r0, r4
   1a6b0:	bd10      	pop	{r4, pc}
	return 0;
   1a6b2:	2400      	movs	r4, #0
   1a6b4:	e7fb      	b.n	1a6ae <db_hash_set+0x1a>
   1a6b6:	bf00      	nop
   1a6b8:	20001f60 	.word	0x20001f60
   1a6bc:	0003288b 	.word	0x0003288b

0001a6c0 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a6c0:	2210      	movs	r2, #16
{
   1a6c2:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a6c4:	4906      	ldr	r1, [pc, #24]	; (1a6e0 <db_hash_store+0x20>)
   1a6c6:	4807      	ldr	r0, [pc, #28]	; (1a6e4 <db_hash_store+0x24>)
   1a6c8:	f7f9 f8fe 	bl	138c8 <settings_save_one>
	if (err) {
   1a6cc:	4602      	mov	r2, r0
   1a6ce:	b128      	cbz	r0, 1a6dc <db_hash_store+0x1c>
}
   1a6d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1a6d4:	4804      	ldr	r0, [pc, #16]	; (1a6e8 <db_hash_store+0x28>)
   1a6d6:	2145      	movs	r1, #69	; 0x45
   1a6d8:	f010 ba46 	b.w	2ab68 <z_log_minimal_printk>
}
   1a6dc:	bd08      	pop	{r3, pc}
   1a6de:	bf00      	nop
   1a6e0:	20001f50 	.word	0x20001f50
   1a6e4:	000328b1 	.word	0x000328b1
   1a6e8:	000328b9 	.word	0x000328b9

0001a6ec <find_cf_cfg>:
{
   1a6ec:	b570      	push	{r4, r5, r6, lr}
   1a6ee:	4d14      	ldr	r5, [pc, #80]	; (1a740 <find_cf_cfg+0x54>)
		if (!conn) {
   1a6f0:	4606      	mov	r6, r0
   1a6f2:	b140      	cbz	r0, 1a706 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a6f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1a6f8:	462a      	mov	r2, r5
   1a6fa:	1e6c      	subs	r4, r5, #1
   1a6fc:	f011 fd01 	bl	2c102 <bt_conn_is_peer_addr_le>
   1a700:	b198      	cbz	r0, 1a72a <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a702:	4620      	mov	r0, r4
   1a704:	e00c      	b.n	1a720 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a706:	490f      	ldr	r1, [pc, #60]	; (1a744 <find_cf_cfg+0x58>)
   1a708:	4628      	mov	r0, r5
   1a70a:	f012 fb8a 	bl	2ce22 <bt_addr_le_eq>
   1a70e:	b940      	cbnz	r0, 1a722 <find_cf_cfg+0x36>
   1a710:	490c      	ldr	r1, [pc, #48]	; (1a744 <find_cf_cfg+0x58>)
   1a712:	f105 0010 	add.w	r0, r5, #16
   1a716:	f012 fb84 	bl	2ce22 <bt_addr_le_eq>
   1a71a:	b120      	cbz	r0, 1a726 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a71c:	f105 000f 	add.w	r0, r5, #15
}
   1a720:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a722:	1e68      	subs	r0, r5, #1
   1a724:	e7fc      	b.n	1a720 <find_cf_cfg+0x34>
	return NULL;
   1a726:	2000      	movs	r0, #0
   1a728:	e7fa      	b.n	1a720 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a72a:	7c21      	ldrb	r1, [r4, #16]
   1a72c:	f104 0211 	add.w	r2, r4, #17
   1a730:	4630      	mov	r0, r6
   1a732:	f011 fce6 	bl	2c102 <bt_conn_is_peer_addr_le>
   1a736:	2800      	cmp	r0, #0
   1a738:	d0f5      	beq.n	1a726 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a73a:	f104 0010 	add.w	r0, r4, #16
   1a73e:	e7ef      	b.n	1a720 <find_cf_cfg+0x34>
   1a740:	20003479 	.word	0x20003479
   1a744:	000313da 	.word	0x000313da

0001a748 <find_sc_cfg>:
{
   1a748:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a74a:	4c0e      	ldr	r4, [pc, #56]	; (1a784 <find_sc_cfg+0x3c>)
   1a74c:	7823      	ldrb	r3, [r4, #0]
   1a74e:	4283      	cmp	r3, r0
{
   1a750:	4605      	mov	r5, r0
   1a752:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a754:	d00c      	beq.n	1a770 <find_sc_cfg+0x28>
   1a756:	7b23      	ldrb	r3, [r4, #12]
   1a758:	42ab      	cmp	r3, r5
   1a75a:	d110      	bne.n	1a77e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a75c:	480a      	ldr	r0, [pc, #40]	; (1a788 <find_sc_cfg+0x40>)
   1a75e:	4631      	mov	r1, r6
   1a760:	f012 fb5f 	bl	2ce22 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a764:	b158      	cbz	r0, 1a77e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a766:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1a768:	220c      	movs	r2, #12
   1a76a:	fb02 4003 	mla	r0, r2, r3, r4
   1a76e:	e007      	b.n	1a780 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a770:	1c60      	adds	r0, r4, #1
   1a772:	f012 fb56 	bl	2ce22 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a776:	2800      	cmp	r0, #0
   1a778:	d0ed      	beq.n	1a756 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a77a:	2300      	movs	r3, #0
   1a77c:	e7f4      	b.n	1a768 <find_sc_cfg+0x20>
	return NULL;
   1a77e:	2000      	movs	r0, #0
}
   1a780:	bd70      	pop	{r4, r5, r6, pc}
   1a782:	bf00      	nop
   1a784:	20004322 	.word	0x20004322
   1a788:	2000432f 	.word	0x2000432f

0001a78c <find_ccc_cfg>:
{
   1a78c:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1a78e:	1c4a      	adds	r2, r1, #1
{
   1a790:	460c      	mov	r4, r1
		if (conn) {
   1a792:	b138      	cbz	r0, 1a7a4 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a794:	7809      	ldrb	r1, [r1, #0]
   1a796:	f011 fcb4 	bl	2c102 <bt_conn_is_peer_addr_le>
   1a79a:	b108      	cbz	r0, 1a7a0 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a79c:	4620      	mov	r0, r4
}
   1a79e:	bd10      	pop	{r4, pc}
	return NULL;
   1a7a0:	2000      	movs	r0, #0
   1a7a2:	e7fc      	b.n	1a79e <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a7a4:	4902      	ldr	r1, [pc, #8]	; (1a7b0 <find_ccc_cfg+0x24>)
   1a7a6:	4610      	mov	r0, r2
   1a7a8:	f012 fb3b 	bl	2ce22 <bt_addr_le_eq>
   1a7ac:	e7f5      	b.n	1a79a <find_ccc_cfg+0xe>
   1a7ae:	bf00      	nop
   1a7b0:	000313da 	.word	0x000313da

0001a7b4 <gatt_sub_find>:
{
   1a7b4:	b570      	push	{r4, r5, r6, lr}
   1a7b6:	4d14      	ldr	r5, [pc, #80]	; (1a808 <gatt_sub_find+0x54>)
		if (!conn) {
   1a7b8:	4606      	mov	r6, r0
   1a7ba:	b140      	cbz	r0, 1a7ce <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1a7bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1a7c0:	462a      	mov	r2, r5
   1a7c2:	1e6c      	subs	r4, r5, #1
   1a7c4:	f011 fc9d 	bl	2c102 <bt_conn_is_peer_addr_le>
   1a7c8:	b198      	cbz	r0, 1a7f2 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1a7ca:	4620      	mov	r0, r4
   1a7cc:	e00c      	b.n	1a7e8 <gatt_sub_find+0x34>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1a7ce:	490f      	ldr	r1, [pc, #60]	; (1a80c <gatt_sub_find+0x58>)
   1a7d0:	4628      	mov	r0, r5
   1a7d2:	f012 fb26 	bl	2ce22 <bt_addr_le_eq>
   1a7d6:	b940      	cbnz	r0, 1a7ea <gatt_sub_find+0x36>
   1a7d8:	490c      	ldr	r1, [pc, #48]	; (1a80c <gatt_sub_find+0x58>)
   1a7da:	f105 0010 	add.w	r0, r5, #16
   1a7de:	f012 fb20 	bl	2ce22 <bt_addr_le_eq>
   1a7e2:	b120      	cbz	r0, 1a7ee <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1a7e4:	f105 000f 	add.w	r0, r5, #15
}
   1a7e8:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   1a7ea:	1e68      	subs	r0, r5, #1
   1a7ec:	e7fc      	b.n	1a7e8 <gatt_sub_find+0x34>
	return NULL;
   1a7ee:	2000      	movs	r0, #0
   1a7f0:	e7fa      	b.n	1a7e8 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1a7f2:	7c21      	ldrb	r1, [r4, #16]
   1a7f4:	f104 0211 	add.w	r2, r4, #17
   1a7f8:	4630      	mov	r0, r6
   1a7fa:	f011 fc82 	bl	2c102 <bt_conn_is_peer_addr_le>
   1a7fe:	2800      	cmp	r0, #0
   1a800:	d0f5      	beq.n	1a7ee <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1a802:	f104 0010 	add.w	r0, r4, #16
   1a806:	e7ef      	b.n	1a7e8 <gatt_sub_find+0x34>
   1a808:	200034a9 	.word	0x200034a9
   1a80c:	000313da 	.word	0x000313da

0001a810 <find_cf_cfg_by_addr>:
{
   1a810:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a812:	4c0e      	ldr	r4, [pc, #56]	; (1a84c <find_cf_cfg_by_addr+0x3c>)
   1a814:	7823      	ldrb	r3, [r4, #0]
   1a816:	4283      	cmp	r3, r0
{
   1a818:	4606      	mov	r6, r0
   1a81a:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a81c:	d00b      	beq.n	1a836 <find_cf_cfg_by_addr+0x26>
   1a81e:	7c23      	ldrb	r3, [r4, #16]
   1a820:	42b3      	cmp	r3, r6
   1a822:	d110      	bne.n	1a846 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1a824:	490a      	ldr	r1, [pc, #40]	; (1a850 <find_cf_cfg_by_addr+0x40>)
   1a826:	4628      	mov	r0, r5
   1a828:	f012 fafb 	bl	2ce22 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1a82c:	b158      	cbz	r0, 1a846 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a82e:	2301      	movs	r3, #1
				return &cf_cfg[i];
   1a830:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1a834:	e008      	b.n	1a848 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1a836:	1c61      	adds	r1, r4, #1
   1a838:	4628      	mov	r0, r5
   1a83a:	f012 faf2 	bl	2ce22 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1a83e:	2800      	cmp	r0, #0
   1a840:	d0ed      	beq.n	1a81e <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a842:	2300      	movs	r3, #0
   1a844:	e7f4      	b.n	1a830 <find_cf_cfg_by_addr+0x20>
	return NULL;
   1a846:	2000      	movs	r0, #0
}
   1a848:	bd70      	pop	{r4, r5, r6, pc}
   1a84a:	bf00      	nop
   1a84c:	20003478 	.word	0x20003478
   1a850:	20003489 	.word	0x20003489

0001a854 <cf_write>:
{
   1a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a858:	461f      	mov	r7, r3
   1a85a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a85e:	2b01      	cmp	r3, #1
{
   1a860:	4606      	mov	r6, r0
   1a862:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1a864:	d835      	bhi.n	1a8d2 <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
   1a866:	443b      	add	r3, r7
   1a868:	2b01      	cmp	r3, #1
   1a86a:	463d      	mov	r5, r7
   1a86c:	dc34      	bgt.n	1a8d8 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
   1a86e:	f7ff ff3d 	bl	1a6ec <find_cf_cfg>
	if (!cfg) {
   1a872:	4604      	mov	r4, r0
   1a874:	b960      	cbnz	r0, 1a890 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   1a876:	f7ff ff39 	bl	1a6ec <find_cf_cfg>
	if (!cfg) {
   1a87a:	4604      	mov	r4, r0
   1a87c:	b940      	cbnz	r0, 1a890 <cf_write+0x3c>
		LOG_WRN("No space to store Client Supported Features");
   1a87e:	4819      	ldr	r0, [pc, #100]	; (1a8e4 <cf_write+0x90>)
   1a880:	2157      	movs	r1, #87	; 0x57
   1a882:	f010 f971 	bl	2ab68 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a886:	f06f 0510 	mvn.w	r5, #16
}
   1a88a:	4628      	mov	r0, r5
   1a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a890:	b197      	cbz	r7, 1a8b8 <cf_write+0x64>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a892:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1a894:	f898 2000 	ldrb.w	r2, [r8]
   1a898:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a89a:	fa21 f003 	lsr.w	r0, r1, r3
   1a89e:	07c7      	lsls	r7, r0, #31
   1a8a0:	d503      	bpl.n	1a8aa <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
   1a8a2:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a8a6:	07c0      	lsls	r0, r0, #31
   1a8a8:	d519      	bpl.n	1a8de <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a8aa:	3301      	adds	r3, #1
   1a8ac:	2b03      	cmp	r3, #3
   1a8ae:	d1f4      	bne.n	1a89a <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a8b0:	f002 0207 	and.w	r2, r2, #7
   1a8b4:	4311      	orrs	r1, r2
   1a8b6:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a8b8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a8bc:	1c60      	adds	r0, r4, #1
   1a8be:	f012 fada 	bl	2ce76 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	7a33      	ldrb	r3, [r6, #8]
   1a8c6:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a8ca:	2101      	movs	r1, #1
   1a8cc:	f012 fac4 	bl	2ce58 <atomic_or>
}
   1a8d0:	e7db      	b.n	1a88a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a8d2:	f06f 0506 	mvn.w	r5, #6
   1a8d6:	e7d8      	b.n	1a88a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a8d8:	f06f 050c 	mvn.w	r5, #12
   1a8dc:	e7d5      	b.n	1a88a <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a8de:	f06f 0512 	mvn.w	r5, #18
   1a8e2:	e7d2      	b.n	1a88a <cf_write+0x36>
   1a8e4:	000328e4 	.word	0x000328e4

0001a8e8 <ccc_load>:
{
   1a8e8:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a8ea:	4b20      	ldr	r3, [pc, #128]	; (1a96c <ccc_load+0x84>)
{
   1a8ec:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a8ee:	6882      	ldr	r2, [r0, #8]
   1a8f0:	429a      	cmp	r2, r3
   1a8f2:	d10f      	bne.n	1a914 <ccc_load+0x2c>
	if (!load->entry) {
   1a8f4:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1a8f6:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1a8f8:	b975      	cbnz	r5, 1a918 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a8fa:	7922      	ldrb	r2, [r4, #4]
   1a8fc:	6821      	ldr	r1, [r4, #0]
   1a8fe:	4630      	mov	r0, r6
   1a900:	f012 fa97 	bl	2ce32 <ccc_find_cfg>
	if (!cfg) {
   1a904:	4604      	mov	r4, r0
   1a906:	b128      	cbz	r0, 1a914 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a908:	4919      	ldr	r1, [pc, #100]	; (1a970 <ccc_load+0x88>)
   1a90a:	3001      	adds	r0, #1
   1a90c:	f012 fab3 	bl	2ce76 <bt_addr_le_copy>
	cfg->id = 0U;
   1a910:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a912:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1a914:	2001      	movs	r0, #1
}
   1a916:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1a918:	68e0      	ldr	r0, [r4, #12]
   1a91a:	2800      	cmp	r0, #0
   1a91c:	d0fb      	beq.n	1a916 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1a91e:	882b      	ldrh	r3, [r5, #0]
   1a920:	428b      	cmp	r3, r1
   1a922:	d00a      	beq.n	1a93a <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1a924:	d2f6      	bcs.n	1a914 <ccc_load+0x2c>
	load->count--;
   1a926:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a928:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a92a:	3801      	subs	r0, #1
	load->entry++;
   1a92c:	3304      	adds	r3, #4
	load->count--;
   1a92e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a930:	3800      	subs	r0, #0
	load->entry++;
   1a932:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a934:	bf18      	it	ne
   1a936:	2001      	movne	r0, #1
   1a938:	e7ed      	b.n	1a916 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a93a:	7922      	ldrb	r2, [r4, #4]
   1a93c:	6821      	ldr	r1, [r4, #0]
   1a93e:	4630      	mov	r0, r6
   1a940:	f012 fa77 	bl	2ce32 <ccc_find_cfg>
	if (!cfg) {
   1a944:	4605      	mov	r5, r0
   1a946:	b968      	cbnz	r0, 1a964 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a948:	4602      	mov	r2, r0
   1a94a:	4909      	ldr	r1, [pc, #36]	; (1a970 <ccc_load+0x88>)
   1a94c:	4630      	mov	r0, r6
   1a94e:	f012 fa70 	bl	2ce32 <ccc_find_cfg>
		if (!cfg) {
   1a952:	4605      	mov	r5, r0
   1a954:	2800      	cmp	r0, #0
   1a956:	d0e6      	beq.n	1a926 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a958:	6821      	ldr	r1, [r4, #0]
   1a95a:	3001      	adds	r0, #1
   1a95c:	f012 fa8b 	bl	2ce76 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a960:	7923      	ldrb	r3, [r4, #4]
   1a962:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a964:	68a3      	ldr	r3, [r4, #8]
   1a966:	885b      	ldrh	r3, [r3, #2]
   1a968:	812b      	strh	r3, [r5, #8]
   1a96a:	e7dc      	b.n	1a926 <ccc_load+0x3e>
   1a96c:	0001af59 	.word	0x0001af59
   1a970:	000313da 	.word	0x000313da

0001a974 <sc_store>:
{
   1a974:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1a976:	4605      	mov	r5, r0
{
   1a978:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1a97a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a97e:	4604      	mov	r4, r0
	if (cfg->id) {
   1a980:	b1ca      	cbz	r2, 1a9b6 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a982:	ae02      	add	r6, sp, #8
   1a984:	2104      	movs	r1, #4
   1a986:	4630      	mov	r0, r6
   1a988:	f00f fe4a 	bl	2a620 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a98c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a98e:	4a0b      	ldr	r2, [pc, #44]	; (1a9bc <sc_store+0x48>)
   1a990:	462b      	mov	r3, r5
   1a992:	2124      	movs	r1, #36	; 0x24
   1a994:	a803      	add	r0, sp, #12
   1a996:	f7fa ffc5 	bl	15924 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a99a:	2204      	movs	r2, #4
   1a99c:	f104 0108 	add.w	r1, r4, #8
   1a9a0:	a803      	add	r0, sp, #12
   1a9a2:	f7f8 ff91 	bl	138c8 <settings_save_one>
	if (err) {
   1a9a6:	4602      	mov	r2, r0
   1a9a8:	b118      	cbz	r0, 1a9b2 <sc_store+0x3e>
		LOG_ERR("failed to store SC (err %d)", err);
   1a9aa:	4805      	ldr	r0, [pc, #20]	; (1a9c0 <sc_store+0x4c>)
   1a9ac:	2145      	movs	r1, #69	; 0x45
   1a9ae:	f010 f8db 	bl	2ab68 <z_log_minimal_printk>
}
   1a9b2:	b00c      	add	sp, #48	; 0x30
   1a9b4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a9b6:	9200      	str	r2, [sp, #0]
   1a9b8:	e7e9      	b.n	1a98e <sc_store+0x1a>
   1a9ba:	bf00      	nop
   1a9bc:	00032da7 	.word	0x00032da7
   1a9c0:	00032915 	.word	0x00032915

0001a9c4 <sc_save>:
{
   1a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9c8:	4680      	mov	r8, r0
   1a9ca:	460f      	mov	r7, r1
   1a9cc:	4616      	mov	r6, r2
   1a9ce:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a9d0:	f7ff feba 	bl	1a748 <find_sc_cfg>
	if (!cfg) {
   1a9d4:	4604      	mov	r4, r0
   1a9d6:	b978      	cbnz	r0, 1a9f8 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a9d8:	4915      	ldr	r1, [pc, #84]	; (1aa30 <sc_save+0x6c>)
   1a9da:	f7ff feb5 	bl	1a748 <find_sc_cfg>
		if (!cfg) {
   1a9de:	4604      	mov	r4, r0
   1a9e0:	b928      	cbnz	r0, 1a9ee <sc_save+0x2a>
}
   1a9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("unable to save SC: no cfg left");
   1a9e6:	4813      	ldr	r0, [pc, #76]	; (1aa34 <sc_save+0x70>)
   1a9e8:	2145      	movs	r1, #69	; 0x45
   1a9ea:	f010 b8bd 	b.w	2ab68 <z_log_minimal_printk>
		cfg->id = id;
   1a9ee:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a9f2:	4639      	mov	r1, r7
   1a9f4:	f012 fa3f 	bl	2ce76 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a9f8:	8922      	ldrh	r2, [r4, #8]
   1a9fa:	8963      	ldrh	r3, [r4, #10]
   1a9fc:	b96a      	cbnz	r2, 1aa1a <sc_save+0x56>
   1a9fe:	b973      	cbnz	r3, 1aa1e <sc_save+0x5a>
		cfg->data.start = start;
   1aa00:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1aa02:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1aa04:	4621      	mov	r1, r4
   1aa06:	f811 0b01 	ldrb.w	r0, [r1], #1
   1aa0a:	f011 fa40 	bl	2be8e <bt_addr_le_is_bonded>
   1aa0e:	b140      	cbz	r0, 1aa22 <sc_save+0x5e>
		sc_store(cfg);
   1aa10:	4620      	mov	r0, r4
}
   1aa12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1aa16:	f7ff bfad 	b.w	1a974 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1aa1a:	4296      	cmp	r6, r2
   1aa1c:	d303      	bcc.n	1aa26 <sc_save+0x62>
   1aa1e:	42ab      	cmp	r3, r5
   1aa20:	d3ef      	bcc.n	1aa02 <sc_save+0x3e>
}
   1aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   1aa26:	42ab      	cmp	r3, r5
		*start = new_start;
   1aa28:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1aa2a:	d2eb      	bcs.n	1aa04 <sc_save+0x40>
   1aa2c:	e7e9      	b.n	1aa02 <sc_save+0x3e>
   1aa2e:	bf00      	nop
   1aa30:	000313da 	.word	0x000313da
   1aa34:	00032936 	.word	0x00032936

0001aa38 <sc_set>:
{
   1aa38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1aa3c:	460e      	mov	r6, r1
   1aa3e:	4617      	mov	r7, r2
   1aa40:	4698      	mov	r8, r3
	if (!name) {
   1aa42:	4604      	mov	r4, r0
   1aa44:	b948      	cbnz	r0, 1aa5a <sc_set+0x22>
		LOG_ERR("Insufficient number of arguments");
   1aa46:	4829      	ldr	r0, [pc, #164]	; (1aaec <sc_set+0xb4>)
   1aa48:	2145      	movs	r1, #69	; 0x45
   1aa4a:	f010 f88d 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1aa4e:	f06f 0515 	mvn.w	r5, #21
}
   1aa52:	4628      	mov	r0, r5
   1aa54:	b004      	add	sp, #16
   1aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1aa5a:	a902      	add	r1, sp, #8
   1aa5c:	f011 f8bc 	bl	2bbd8 <bt_settings_decode_key>
	if (err) {
   1aa60:	4605      	mov	r5, r0
   1aa62:	b128      	cbz	r0, 1aa70 <sc_set+0x38>
		LOG_ERR("Unable to decode address %s", name);
   1aa64:	4822      	ldr	r0, [pc, #136]	; (1aaf0 <sc_set+0xb8>)
   1aa66:	4622      	mov	r2, r4
   1aa68:	2145      	movs	r1, #69	; 0x45
   1aa6a:	f010 f87d 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1aa6e:	e7ee      	b.n	1aa4e <sc_set+0x16>
	settings_name_next(name, &next);
   1aa70:	a901      	add	r1, sp, #4
   1aa72:	4620      	mov	r0, r4
   1aa74:	f010 fb24 	bl	2b0c0 <settings_name_next>
	if (!next) {
   1aa78:	9801      	ldr	r0, [sp, #4]
   1aa7a:	b140      	cbz	r0, 1aa8e <sc_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1aa7c:	220a      	movs	r2, #10
   1aa7e:	4629      	mov	r1, r5
   1aa80:	f010 ff62 	bl	2b948 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1aa84:	4602      	mov	r2, r0
   1aa86:	b110      	cbz	r0, 1aa8e <sc_set+0x56>
			LOG_ERR("Invalid local identity %lu", next_id);
   1aa88:	481a      	ldr	r0, [pc, #104]	; (1aaf4 <sc_set+0xbc>)
   1aa8a:	2145      	movs	r1, #69	; 0x45
   1aa8c:	e7ed      	b.n	1aa6a <sc_set+0x32>
	cfg = find_sc_cfg(id, &addr);
   1aa8e:	a902      	add	r1, sp, #8
   1aa90:	2000      	movs	r0, #0
   1aa92:	f7ff fe59 	bl	1a748 <find_sc_cfg>
	if (!cfg && len_rd) {
   1aa96:	4604      	mov	r4, r0
   1aa98:	bb08      	cbnz	r0, 1aade <sc_set+0xa6>
   1aa9a:	2e00      	cmp	r6, #0
   1aa9c:	d0d9      	beq.n	1aa52 <sc_set+0x1a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1aa9e:	4916      	ldr	r1, [pc, #88]	; (1aaf8 <sc_set+0xc0>)
   1aaa0:	f7ff fe52 	bl	1a748 <find_sc_cfg>
		if (!cfg) {
   1aaa4:	4604      	mov	r4, r0
   1aaa6:	b930      	cbnz	r0, 1aab6 <sc_set+0x7e>
			LOG_ERR("Unable to restore SC: no cfg left");
   1aaa8:	4814      	ldr	r0, [pc, #80]	; (1aafc <sc_set+0xc4>)
   1aaaa:	2145      	movs	r1, #69	; 0x45
   1aaac:	f010 f85c 	bl	2ab68 <z_log_minimal_printk>
			return -ENOMEM;
   1aab0:	f06f 050b 	mvn.w	r5, #11
   1aab4:	e7cd      	b.n	1aa52 <sc_set+0x1a>
		cfg->id = id;
   1aab6:	2300      	movs	r3, #0
   1aab8:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1aabc:	a902      	add	r1, sp, #8
   1aabe:	f012 f9da 	bl	2ce76 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1aac2:	f104 0108 	add.w	r1, r4, #8
   1aac6:	2204      	movs	r2, #4
   1aac8:	4640      	mov	r0, r8
   1aaca:	47b8      	blx	r7
		if (len < 0) {
   1aacc:	1e04      	subs	r4, r0, #0
   1aace:	dac0      	bge.n	1aa52 <sc_set+0x1a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1aad0:	480b      	ldr	r0, [pc, #44]	; (1ab00 <sc_set+0xc8>)
   1aad2:	4622      	mov	r2, r4
   1aad4:	2145      	movs	r1, #69	; 0x45
   1aad6:	f010 f847 	bl	2ab68 <z_log_minimal_printk>
			return len;
   1aada:	4625      	mov	r5, r4
   1aadc:	e7b9      	b.n	1aa52 <sc_set+0x1a>
	if (len_rd) {
   1aade:	2e00      	cmp	r6, #0
   1aae0:	d1ef      	bne.n	1aac2 <sc_set+0x8a>
		memset(cfg, 0, sizeof(*cfg));
   1aae2:	220c      	movs	r2, #12
   1aae4:	4631      	mov	r1, r6
   1aae6:	f011 f812 	bl	2bb0e <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1aaea:	e7b2      	b.n	1aa52 <sc_set+0x1a>
   1aaec:	00031462 	.word	0x00031462
   1aaf0:	0003295a 	.word	0x0003295a
   1aaf4:	0003297b 	.word	0x0003297b
   1aaf8:	000313da 	.word	0x000313da
   1aafc:	0003299b 	.word	0x0003299b
   1ab00:	0003288b 	.word	0x0003288b

0001ab04 <db_hash_commit>:

static int db_hash_commit(void)
{
   1ab04:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ab06:	2108      	movs	r1, #8
   1ab08:	4809      	ldr	r0, [pc, #36]	; (1ab30 <db_hash_commit+0x2c>)
   1ab0a:	f012 f9a5 	bl	2ce58 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1ab0e:	4809      	ldr	r0, [pc, #36]	; (1ab34 <db_hash_commit+0x30>)
   1ab10:	2200      	movs	r2, #0
   1ab12:	2300      	movs	r3, #0
   1ab14:	f7fa ffac 	bl	15a70 <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1ab18:	1e04      	subs	r4, r0, #0
   1ab1a:	da06      	bge.n	1ab2a <db_hash_commit+0x26>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   1ab1c:	4806      	ldr	r0, [pc, #24]	; (1ab38 <db_hash_commit+0x34>)
   1ab1e:	4622      	mov	r2, r4
   1ab20:	2145      	movs	r1, #69	; 0x45
   1ab22:	f010 f821 	bl	2ab68 <z_log_minimal_printk>
	}

	return err;
}
   1ab26:	4620      	mov	r0, r4
   1ab28:	bd10      	pop	{r4, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1ab2a:	2400      	movs	r4, #0
	return err;
   1ab2c:	e7fb      	b.n	1ab26 <db_hash_commit+0x22>
   1ab2e:	bf00      	nop
   1ab30:	20002018 	.word	0x20002018
   1ab34:	20001f70 	.word	0x20001f70
   1ab38:	000329c2 	.word	0x000329c2

0001ab3c <gatt_sub_free>:
{
   1ab3c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1ab3e:	6883      	ldr	r3, [r0, #8]
   1ab40:	b153      	cbz	r3, 1ab58 <gatt_sub_free+0x1c>
   1ab42:	4908      	ldr	r1, [pc, #32]	; (1ab64 <gatt_sub_free+0x28>)
   1ab44:	4808      	ldr	r0, [pc, #32]	; (1ab68 <gatt_sub_free+0x2c>)
   1ab46:	f44f 6249 	mov.w	r2, #3216	; 0xc90
   1ab4a:	f00f ffff 	bl	2ab4c <assert_print>
   1ab4e:	4805      	ldr	r0, [pc, #20]	; (1ab64 <gatt_sub_free+0x28>)
   1ab50:	f44f 6149 	mov.w	r1, #3216	; 0xc90
   1ab54:	f00f fff3 	bl	2ab3e <assert_post_action>
}
   1ab58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1ab5c:	4903      	ldr	r1, [pc, #12]	; (1ab6c <gatt_sub_free+0x30>)
   1ab5e:	3001      	adds	r0, #1
   1ab60:	f012 b989 	b.w	2ce76 <bt_addr_le_copy>
   1ab64:	000329fb 	.word	0x000329fb
   1ab68:	0003013d 	.word	0x0003013d
   1ab6c:	000313da 	.word	0x000313da

0001ab70 <gatt_write_ccc_rsp>:
{
   1ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab74:	9c06      	ldr	r4, [sp, #24]
   1ab76:	460e      	mov	r6, r1
   1ab78:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ab7a:	f06f 0104 	mvn.w	r1, #4
   1ab7e:	f104 0014 	add.w	r0, r4, #20
   1ab82:	f012 f97b 	bl	2ce7c <atomic_and>
	if (err) {
   1ab86:	b306      	cbz	r6, 1abca <gatt_write_ccc_rsp+0x5a>
		sub = gatt_sub_find(conn);
   1ab88:	4628      	mov	r0, r5
   1ab8a:	f7ff fe13 	bl	1a7b4 <gatt_sub_find>
		if (!sub) {
   1ab8e:	4601      	mov	r1, r0
   1ab90:	b380      	cbz	r0, 1abf4 <gatt_write_ccc_rsp+0x84>
	return list->head;
   1ab92:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab94:	b14b      	cbz	r3, 1abaa <gatt_write_ccc_rsp+0x3a>
	return node->next;
   1ab96:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1ab98:	f104 0718 	add.w	r7, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1ab9c:	b12b      	cbz	r3, 1abaa <gatt_write_ccc_rsp+0x3a>
			if (node == &params->node) {
   1ab9e:	42bb      	cmp	r3, r7
   1aba0:	d10c      	bne.n	1abbc <gatt_write_ccc_rsp+0x4c>
				gatt_sub_remove(conn, sub, tmp, params);
   1aba2:	4623      	mov	r3, r4
   1aba4:	4628      	mov	r0, r5
   1aba6:	f012 fa5b 	bl	2d060 <gatt_sub_remove>
	if (params->subscribe) {
   1abaa:	6867      	ldr	r7, [r4, #4]
   1abac:	b1bf      	cbz	r7, 1abde <gatt_write_ccc_rsp+0x6e>
		params->subscribe(conn, err, params);
   1abae:	4622      	mov	r2, r4
   1abb0:	4631      	mov	r1, r6
   1abb2:	4628      	mov	r0, r5
   1abb4:	463b      	mov	r3, r7
}
   1abb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1abba:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1abbc:	b11a      	cbz	r2, 1abc6 <gatt_write_ccc_rsp+0x56>
	return node->next;
   1abbe:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1abc0:	4613      	mov	r3, r2
   1abc2:	4602      	mov	r2, r0
   1abc4:	e7ea      	b.n	1ab9c <gatt_write_ccc_rsp+0x2c>
   1abc6:	4610      	mov	r0, r2
   1abc8:	e7fa      	b.n	1abc0 <gatt_write_ccc_rsp+0x50>
	} else if (!params->value) {
   1abca:	8a23      	ldrh	r3, [r4, #16]
   1abcc:	2b00      	cmp	r3, #0
   1abce:	d1ec      	bne.n	1abaa <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
   1abd0:	6827      	ldr	r7, [r4, #0]
   1abd2:	4633      	mov	r3, r6
   1abd4:	4632      	mov	r2, r6
   1abd6:	4621      	mov	r1, r4
   1abd8:	4628      	mov	r0, r5
   1abda:	47b8      	blx	r7
   1abdc:	e7e5      	b.n	1abaa <gatt_write_ccc_rsp+0x3a>
	} else if (params->write) {
   1abde:	68a3      	ldr	r3, [r4, #8]
   1abe0:	b143      	cbz	r3, 1abf4 <gatt_write_ccc_rsp+0x84>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1abe2:	4805      	ldr	r0, [pc, #20]	; (1abf8 <gatt_write_ccc_rsp+0x88>)
   1abe4:	2157      	movs	r1, #87	; 0x57
   1abe6:	f00f ffbf 	bl	2ab68 <z_log_minimal_printk>
		params->write(conn, err, NULL);
   1abea:	68a3      	ldr	r3, [r4, #8]
   1abec:	463a      	mov	r2, r7
   1abee:	4631      	mov	r1, r6
   1abf0:	4628      	mov	r0, r5
   1abf2:	e7e0      	b.n	1abb6 <gatt_write_ccc_rsp+0x46>
}
   1abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abf8:	00032a2b 	.word	0x00032a2b

0001abfc <clear_cf_cfg>:
{
   1abfc:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1abfe:	490c      	ldr	r1, [pc, #48]	; (1ac30 <clear_cf_cfg+0x34>)
{
   1ac00:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ac02:	3001      	adds	r0, #1
   1ac04:	f012 f937 	bl	2ce76 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ac08:	f104 0008 	add.w	r0, r4, #8
   1ac0c:	2201      	movs	r2, #1
   1ac0e:	2100      	movs	r1, #0
   1ac10:	f010 ff7d 	bl	2bb0e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ac14:	f3bf 8f5b 	dmb	ish
   1ac18:	340c      	adds	r4, #12
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	e854 2f00 	ldrex	r2, [r4]
   1ac20:	e844 3100 	strex	r1, r3, [r4]
   1ac24:	2900      	cmp	r1, #0
   1ac26:	d1f9      	bne.n	1ac1c <clear_cf_cfg+0x20>
   1ac28:	f3bf 8f5b 	dmb	ish
}
   1ac2c:	bd10      	pop	{r4, pc}
   1ac2e:	bf00      	nop
   1ac30:	000313da 	.word	0x000313da

0001ac34 <cf_set>:
{
   1ac34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ac38:	4688      	mov	r8, r1
   1ac3a:	4616      	mov	r6, r2
   1ac3c:	461f      	mov	r7, r3
	if (!name) {
   1ac3e:	4604      	mov	r4, r0
   1ac40:	b948      	cbnz	r0, 1ac56 <cf_set+0x22>
		LOG_ERR("Insufficient number of arguments");
   1ac42:	4828      	ldr	r0, [pc, #160]	; (1ace4 <cf_set+0xb0>)
   1ac44:	2145      	movs	r1, #69	; 0x45
   1ac46:	f00f ff8f 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1ac4a:	f06f 0515 	mvn.w	r5, #21
}
   1ac4e:	4628      	mov	r0, r5
   1ac50:	b004      	add	sp, #16
   1ac52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1ac56:	a902      	add	r1, sp, #8
   1ac58:	f010 ffbe 	bl	2bbd8 <bt_settings_decode_key>
	if (err) {
   1ac5c:	4605      	mov	r5, r0
   1ac5e:	b128      	cbz	r0, 1ac6c <cf_set+0x38>
		LOG_ERR("Unable to decode address %s", name);
   1ac60:	4821      	ldr	r0, [pc, #132]	; (1ace8 <cf_set+0xb4>)
   1ac62:	4622      	mov	r2, r4
   1ac64:	2145      	movs	r1, #69	; 0x45
   1ac66:	f00f ff7f 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1ac6a:	e7ee      	b.n	1ac4a <cf_set+0x16>
	settings_name_next(name, &next);
   1ac6c:	a901      	add	r1, sp, #4
   1ac6e:	4620      	mov	r0, r4
   1ac70:	f010 fa26 	bl	2b0c0 <settings_name_next>
	if (!next) {
   1ac74:	9801      	ldr	r0, [sp, #4]
   1ac76:	b140      	cbz	r0, 1ac8a <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1ac78:	220a      	movs	r2, #10
   1ac7a:	4629      	mov	r1, r5
   1ac7c:	f010 fe64 	bl	2b948 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1ac80:	4602      	mov	r2, r0
   1ac82:	b110      	cbz	r0, 1ac8a <cf_set+0x56>
			LOG_ERR("Invalid local identity %lu", next_id);
   1ac84:	4819      	ldr	r0, [pc, #100]	; (1acec <cf_set+0xb8>)
   1ac86:	2145      	movs	r1, #69	; 0x45
   1ac88:	e7ed      	b.n	1ac66 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1ac8a:	a902      	add	r1, sp, #8
   1ac8c:	2000      	movs	r0, #0
   1ac8e:	f7ff fdbf 	bl	1a810 <find_cf_cfg_by_addr>
	if (!cfg) {
   1ac92:	4604      	mov	r4, r0
   1ac94:	b980      	cbnz	r0, 1acb8 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   1ac96:	f7ff fd29 	bl	1a6ec <find_cf_cfg>
		if (!cfg) {
   1ac9a:	4604      	mov	r4, r0
   1ac9c:	b930      	cbnz	r0, 1acac <cf_set+0x78>
			LOG_ERR("Unable to restore CF: no cfg left");
   1ac9e:	4814      	ldr	r0, [pc, #80]	; (1acf0 <cf_set+0xbc>)
   1aca0:	2145      	movs	r1, #69	; 0x45
   1aca2:	f00f ff61 	bl	2ab68 <z_log_minimal_printk>
			return -ENOMEM;
   1aca6:	f06f 050b 	mvn.w	r5, #11
   1acaa:	e7d0      	b.n	1ac4e <cf_set+0x1a>
		cfg->id = id;
   1acac:	2300      	movs	r3, #0
   1acae:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1acb2:	a902      	add	r1, sp, #8
   1acb4:	f012 f8df 	bl	2ce76 <bt_addr_le_copy>
	if (len_rd) {
   1acb8:	f1b8 0f00 	cmp.w	r8, #0
   1acbc:	d00d      	beq.n	1acda <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1acbe:	f104 0108 	add.w	r1, r4, #8
   1acc2:	2201      	movs	r2, #1
   1acc4:	4638      	mov	r0, r7
   1acc6:	47b0      	blx	r6
		if (len < 0) {
   1acc8:	1e04      	subs	r4, r0, #0
   1acca:	dac0      	bge.n	1ac4e <cf_set+0x1a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1accc:	4809      	ldr	r0, [pc, #36]	; (1acf4 <cf_set+0xc0>)
   1acce:	4622      	mov	r2, r4
   1acd0:	2145      	movs	r1, #69	; 0x45
   1acd2:	f00f ff49 	bl	2ab68 <z_log_minimal_printk>
			return len;
   1acd6:	4625      	mov	r5, r4
   1acd8:	e7b9      	b.n	1ac4e <cf_set+0x1a>
		clear_cf_cfg(cfg);
   1acda:	4620      	mov	r0, r4
   1acdc:	f7ff ff8e 	bl	1abfc <clear_cf_cfg>
   1ace0:	e7b5      	b.n	1ac4e <cf_set+0x1a>
   1ace2:	bf00      	nop
   1ace4:	00031462 	.word	0x00031462
   1ace8:	0003295a 	.word	0x0003295a
   1acec:	0003297b 	.word	0x0003297b
   1acf0:	00032a67 	.word	0x00032a67
   1acf4:	0003288b 	.word	0x0003288b

0001acf8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1acf8:	b508      	push	{r3, lr}
   1acfa:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1acfc:	6881      	ldr	r1, [r0, #8]
   1acfe:	4a07      	ldr	r2, [pc, #28]	; (1ad1c <remove_peer_from_attr+0x24>)
   1ad00:	4291      	cmp	r1, r2
   1ad02:	d109      	bne.n	1ad18 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1ad04:	791a      	ldrb	r2, [r3, #4]
   1ad06:	6819      	ldr	r1, [r3, #0]
   1ad08:	68c0      	ldr	r0, [r0, #12]
   1ad0a:	f012 f892 	bl	2ce32 <ccc_find_cfg>
	if (cfg) {
   1ad0e:	b118      	cbz	r0, 1ad18 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1ad10:	220a      	movs	r2, #10
   1ad12:	2100      	movs	r1, #0
   1ad14:	f010 fefb 	bl	2bb0e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1ad18:	2001      	movs	r0, #1
   1ad1a:	bd08      	pop	{r3, pc}
   1ad1c:	0001af59 	.word	0x0001af59

0001ad20 <convert_to_id_on_match>:
{
   1ad20:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad22:	4b09      	ldr	r3, [pc, #36]	; (1ad48 <convert_to_id_on_match+0x28>)
{
   1ad24:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad26:	6882      	ldr	r2, [r0, #8]
   1ad28:	429a      	cmp	r2, r3
   1ad2a:	d10a      	bne.n	1ad42 <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1ad2c:	68c4      	ldr	r4, [r0, #12]
   1ad2e:	6829      	ldr	r1, [r5, #0]
   1ad30:	3401      	adds	r4, #1
   1ad32:	4620      	mov	r0, r4
   1ad34:	f012 f875 	bl	2ce22 <bt_addr_le_eq>
   1ad38:	b118      	cbz	r0, 1ad42 <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1ad3a:	6869      	ldr	r1, [r5, #4]
   1ad3c:	4620      	mov	r0, r4
   1ad3e:	f012 f89a 	bl	2ce76 <bt_addr_le_copy>
}
   1ad42:	2001      	movs	r0, #1
   1ad44:	bd38      	pop	{r3, r4, r5, pc}
   1ad46:	bf00      	nop
   1ad48:	0001af59 	.word	0x0001af59

0001ad4c <ccc_save>:
{
   1ad4c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad4e:	4b0c      	ldr	r3, [pc, #48]	; (1ad80 <ccc_save+0x34>)
{
   1ad50:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad52:	6882      	ldr	r2, [r0, #8]
   1ad54:	429a      	cmp	r2, r3
{
   1ad56:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad58:	d10f      	bne.n	1ad7a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1ad5a:	7922      	ldrb	r2, [r4, #4]
   1ad5c:	6821      	ldr	r1, [r4, #0]
   1ad5e:	68c0      	ldr	r0, [r0, #12]
   1ad60:	f012 f867 	bl	2ce32 <ccc_find_cfg>
	if (!cfg) {
   1ad64:	b148      	cbz	r0, 1ad7a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1ad66:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1ad6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1ad6e:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1ad70:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1ad72:	8901      	ldrh	r1, [r0, #8]
   1ad74:	8151      	strh	r1, [r2, #10]
	save->count++;
   1ad76:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1ad7a:	2001      	movs	r0, #1
   1ad7c:	bd38      	pop	{r3, r4, r5, pc}
   1ad7e:	bf00      	nop
   1ad80:	0001af59 	.word	0x0001af59

0001ad84 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   1ad84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad86:	b08d      	sub	sp, #52	; 0x34
   1ad88:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   1ad8a:	f7ff fcaf 	bl	1a6ec <find_cf_cfg>
					       &conn->le.dst, id_str);
   1ad8e:	f105 0690 	add.w	r6, r5, #144	; 0x90
	if (!cfg) {
   1ad92:	4604      	mov	r4, r0
   1ad94:	b330      	cbz	r0, 1ade4 <bt_gatt_store_cf.isra.0+0x60>
		if (conn->id) {
   1ad96:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   1ad98:	3408      	adds	r4, #8
		if (conn->id) {
   1ad9a:	b16a      	cbz	r2, 1adb8 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ad9c:	af02      	add	r7, sp, #8
   1ad9e:	2104      	movs	r1, #4
   1ada0:	4638      	mov	r0, r7
   1ada2:	f00f fc3d 	bl	2a620 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ada6:	4633      	mov	r3, r6
   1ada8:	4a10      	ldr	r2, [pc, #64]	; (1adec <bt_gatt_store_cf.isra.0+0x68>)
   1adaa:	9700      	str	r7, [sp, #0]
   1adac:	2124      	movs	r1, #36	; 0x24
   1adae:	a803      	add	r0, sp, #12
   1adb0:	f7fa fdb8 	bl	15924 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1adb4:	7a2b      	ldrb	r3, [r5, #8]
   1adb6:	b9bb      	cbnz	r3, 1ade8 <bt_gatt_store_cf.isra.0+0x64>
		len = 0;
   1adb8:	2501      	movs	r5, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   1adba:	2300      	movs	r3, #0
   1adbc:	9300      	str	r3, [sp, #0]
   1adbe:	4a0b      	ldr	r2, [pc, #44]	; (1adec <bt_gatt_store_cf.isra.0+0x68>)
   1adc0:	4633      	mov	r3, r6
   1adc2:	2124      	movs	r1, #36	; 0x24
   1adc4:	a803      	add	r0, sp, #12
   1adc6:	f7fa fdad 	bl	15924 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1adca:	462a      	mov	r2, r5
   1adcc:	4621      	mov	r1, r4
   1adce:	a803      	add	r0, sp, #12
   1add0:	f7f8 fd7a 	bl	138c8 <settings_save_one>
	if (err) {
   1add4:	4602      	mov	r2, r0
   1add6:	b118      	cbz	r0, 1ade0 <bt_gatt_store_cf.isra.0+0x5c>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1add8:	4805      	ldr	r0, [pc, #20]	; (1adf0 <bt_gatt_store_cf.isra.0+0x6c>)
   1adda:	2145      	movs	r1, #69	; 0x45
   1addc:	f00f fec4 	bl	2ab68 <z_log_minimal_printk>
}
   1ade0:	b00d      	add	sp, #52	; 0x34
   1ade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1ade4:	4605      	mov	r5, r0
   1ade6:	e7e8      	b.n	1adba <bt_gatt_store_cf.isra.0+0x36>
   1ade8:	2501      	movs	r5, #1
   1adea:	e7ee      	b.n	1adca <bt_gatt_store_cf.isra.0+0x46>
   1adec:	00032da1 	.word	0x00032da1
   1adf0:	00032a8e 	.word	0x00032a8e

0001adf4 <bt_gatt_clear_sc>:
{
   1adf4:	b570      	push	{r4, r5, r6, lr}
   1adf6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1adf8:	f7ff fca6 	bl	1a748 <find_sc_cfg>
	if (!cfg) {
   1adfc:	4604      	mov	r4, r0
   1adfe:	b1e8      	cbz	r0, 1ae3c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   1ae00:	4605      	mov	r5, r0
   1ae02:	f815 2b01 	ldrb.w	r2, [r5], #1
   1ae06:	b1e2      	cbz	r2, 1ae42 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1ae08:	ae02      	add	r6, sp, #8
   1ae0a:	2104      	movs	r1, #4
   1ae0c:	4630      	mov	r0, r6
   1ae0e:	f00f fc07 	bl	2a620 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1ae12:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1ae14:	4a0c      	ldr	r2, [pc, #48]	; (1ae48 <bt_gatt_clear_sc+0x54>)
   1ae16:	462b      	mov	r3, r5
   1ae18:	2124      	movs	r1, #36	; 0x24
   1ae1a:	a803      	add	r0, sp, #12
   1ae1c:	f7fa fd82 	bl	15924 <bt_settings_encode_key>
		err = settings_delete(key);
   1ae20:	a803      	add	r0, sp, #12
   1ae22:	f010 f925 	bl	2b070 <settings_delete>
		if (err) {
   1ae26:	4602      	mov	r2, r0
   1ae28:	b118      	cbz	r0, 1ae32 <bt_gatt_clear_sc+0x3e>
			LOG_ERR("failed to delete SC (err %d)", err);
   1ae2a:	4808      	ldr	r0, [pc, #32]	; (1ae4c <bt_gatt_clear_sc+0x58>)
   1ae2c:	2145      	movs	r1, #69	; 0x45
   1ae2e:	f00f fe9b 	bl	2ab68 <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   1ae32:	220c      	movs	r2, #12
   1ae34:	2100      	movs	r1, #0
   1ae36:	4620      	mov	r0, r4
   1ae38:	f010 fe69 	bl	2bb0e <memset>
}
   1ae3c:	2000      	movs	r0, #0
   1ae3e:	b00c      	add	sp, #48	; 0x30
   1ae40:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1ae42:	9200      	str	r2, [sp, #0]
   1ae44:	e7e6      	b.n	1ae14 <bt_gatt_clear_sc+0x20>
   1ae46:	bf00      	nop
   1ae48:	00032da7 	.word	0x00032da7
   1ae4c:	00032abc 	.word	0x00032abc

0001ae50 <sc_clear>:
{
   1ae50:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae52:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1ae56:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae58:	4631      	mov	r1, r6
   1ae5a:	7a00      	ldrb	r0, [r0, #8]
   1ae5c:	f011 f817 	bl	2be8e <bt_addr_le_is_bonded>
   1ae60:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ae62:	4631      	mov	r1, r6
   1ae64:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae66:	b14d      	cbz	r5, 1ae7c <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ae68:	f7ff ffc4 	bl	1adf4 <bt_gatt_clear_sc>
		if (err) {
   1ae6c:	4602      	mov	r2, r0
   1ae6e:	b170      	cbz	r0, 1ae8e <sc_clear+0x3e>
}
   1ae70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Failed to clear SC %d", err);
   1ae74:	4806      	ldr	r0, [pc, #24]	; (1ae90 <sc_clear+0x40>)
   1ae76:	2145      	movs	r1, #69	; 0x45
   1ae78:	f00f be76 	b.w	2ab68 <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ae7c:	f7ff fc64 	bl	1a748 <find_sc_cfg>
		if (cfg) {
   1ae80:	b128      	cbz	r0, 1ae8e <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1ae82:	4629      	mov	r1, r5
   1ae84:	220c      	movs	r2, #12
}
   1ae86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ae8a:	f010 be40 	b.w	2bb0e <memset>
}
   1ae8e:	bd70      	pop	{r4, r5, r6, pc}
   1ae90:	00032ade 	.word	0x00032ade

0001ae94 <gatt_write_ccc>:
{
   1ae94:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1ae96:	2312      	movs	r3, #18
{
   1ae98:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1ae9a:	2104      	movs	r1, #4
   1ae9c:	e9cd 3100 	strd	r3, r1, [sp]
   1aea0:	4b03      	ldr	r3, [pc, #12]	; (1aeb0 <gatt_write_ccc+0x1c>)
   1aea2:	4904      	ldr	r1, [pc, #16]	; (1aeb4 <gatt_write_ccc+0x20>)
   1aea4:	f012 fa47 	bl	2d336 <gatt_req_send.constprop.0>
}
   1aea8:	b003      	add	sp, #12
   1aeaa:	f85d fb04 	ldr.w	pc, [sp], #4
   1aeae:	bf00      	nop
   1aeb0:	0002d3b7 	.word	0x0002d3b7
   1aeb4:	0001ab71 	.word	0x0001ab71

0001aeb8 <disconnected_cb>:
{
   1aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aebc:	4b23      	ldr	r3, [pc, #140]	; (1af4c <disconnected_cb+0x94>)
{
   1aebe:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aec0:	6882      	ldr	r2, [r0, #8]
   1aec2:	429a      	cmp	r2, r3
{
   1aec4:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aec6:	d102      	bne.n	1aece <disconnected_cb+0x16>
	ccc = attr->user_data;
   1aec8:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1aeca:	8963      	ldrh	r3, [r4, #10]
   1aecc:	bb33      	cbnz	r3, 1af1c <disconnected_cb+0x64>
}
   1aece:	2001      	movs	r0, #1
   1aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1aed4:	f7fd fbfe 	bl	186d4 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1aed8:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1aeda:	2100      	movs	r1, #0
   1aedc:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1aede:	2b00      	cmp	r3, #0
   1aee0:	d0f5      	beq.n	1aece <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1aee2:	4638      	mov	r0, r7
   1aee4:	4798      	blx	r3
   1aee6:	e7f2      	b.n	1aece <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aee8:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1aeec:	7a28      	ldrb	r0, [r5, #8]
   1aeee:	4641      	mov	r1, r8
   1aef0:	f010 ffcd 	bl	2be8e <bt_addr_le_is_bonded>
   1aef4:	b968      	cbnz	r0, 1af12 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1aef6:	4b16      	ldr	r3, [pc, #88]	; (1af50 <disconnected_cb+0x98>)
   1aef8:	429c      	cmp	r4, r3
   1aefa:	d102      	bne.n	1af02 <disconnected_cb+0x4a>
					sc_clear(conn);
   1aefc:	4628      	mov	r0, r5
   1aefe:	f7ff ffa7 	bl	1ae50 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1af02:	4914      	ldr	r1, [pc, #80]	; (1af54 <disconnected_cb+0x9c>)
   1af04:	4630      	mov	r0, r6
   1af06:	f011 ffb6 	bl	2ce76 <bt_addr_le_copy>
	cfg->id = 0U;
   1af0a:	2300      	movs	r3, #0
   1af0c:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1af0e:	8123      	strh	r3, [r4, #8]
}
   1af10:	e7e2      	b.n	1aed8 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1af12:	4641      	mov	r1, r8
   1af14:	4630      	mov	r0, r6
   1af16:	f011 ffae 	bl	2ce76 <bt_addr_le_copy>
   1af1a:	e7dd      	b.n	1aed8 <disconnected_cb+0x20>
		if (!cfg->value) {
   1af1c:	8923      	ldrh	r3, [r4, #8]
   1af1e:	2b00      	cmp	r3, #0
   1af20:	d0da      	beq.n	1aed8 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1af22:	4626      	mov	r6, r4
   1af24:	4628      	mov	r0, r5
   1af26:	f816 1b01 	ldrb.w	r1, [r6], #1
   1af2a:	4632      	mov	r2, r6
   1af2c:	f011 f8e9 	bl	2c102 <bt_conn_is_peer_addr_le>
   1af30:	2800      	cmp	r0, #0
   1af32:	d1d9      	bne.n	1aee8 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1af34:	7820      	ldrb	r0, [r4, #0]
   1af36:	4631      	mov	r1, r6
   1af38:	f7fd fe76 	bl	18c28 <bt_conn_lookup_addr_le>
			if (tmp) {
   1af3c:	2800      	cmp	r0, #0
   1af3e:	d0cb      	beq.n	1aed8 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1af40:	7b43      	ldrb	r3, [r0, #13]
   1af42:	2b07      	cmp	r3, #7
   1af44:	d1c6      	bne.n	1aed4 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1af46:	f7fd fbc5 	bl	186d4 <bt_conn_unref>
	if (!value_used) {
   1af4a:	e7c0      	b.n	1aece <disconnected_cb+0x16>
   1af4c:	0001af59 	.word	0x0001af59
   1af50:	200007fc 	.word	0x200007fc
   1af54:	000313da 	.word	0x000313da

0001af58 <bt_gatt_attr_write_ccc>:
{
   1af58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af5c:	461f      	mov	r7, r3
   1af5e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1af62:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1af66:	4605      	mov	r5, r0
   1af68:	4688      	mov	r8, r1
	if (offset) {
   1af6a:	2b00      	cmp	r3, #0
   1af6c:	d166      	bne.n	1b03c <bt_gatt_attr_write_ccc+0xe4>
	if (!len || len > sizeof(uint16_t)) {
   1af6e:	1e7b      	subs	r3, r7, #1
   1af70:	2b01      	cmp	r3, #1
   1af72:	d866      	bhi.n	1b042 <bt_gatt_attr_write_ccc+0xea>
	if (len < sizeof(uint16_t)) {
   1af74:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1af76:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1af78:	7816      	ldrb	r6, [r2, #0]
   1af7a:	bf18      	it	ne
   1af7c:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1af7e:	f7ff fc05 	bl	1a78c <find_ccc_cfg>
	if (!cfg) {
   1af82:	4604      	mov	r4, r0
   1af84:	b9b0      	cbnz	r0, 1afb4 <bt_gatt_attr_write_ccc+0x5c>
		if (!value) {
   1af86:	b916      	cbnz	r6, 1af8e <bt_gatt_attr_write_ccc+0x36>
			return len;
   1af88:	4638      	mov	r0, r7
}
   1af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1af8e:	4649      	mov	r1, r9
   1af90:	f7ff fbfc 	bl	1a78c <find_ccc_cfg>
		if (!cfg) {
   1af94:	4604      	mov	r4, r0
   1af96:	b930      	cbnz	r0, 1afa6 <bt_gatt_attr_write_ccc+0x4e>
			LOG_WRN("No space to store CCC cfg");
   1af98:	482b      	ldr	r0, [pc, #172]	; (1b048 <bt_gatt_attr_write_ccc+0xf0>)
   1af9a:	2157      	movs	r1, #87	; 0x57
   1af9c:	f00f fde4 	bl	2ab68 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1afa0:	f06f 0010 	mvn.w	r0, #16
   1afa4:	e7f1      	b.n	1af8a <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1afa6:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1afaa:	3001      	adds	r0, #1
   1afac:	f011 ff63 	bl	2ce76 <bt_addr_le_copy>
		cfg->id = conn->id;
   1afb0:	7a2b      	ldrb	r3, [r5, #8]
   1afb2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1afb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1afb8:	bba3      	cbnz	r3, 1b024 <bt_gatt_attr_write_ccc+0xcc>
	value_changed = cfg->value != value;
   1afba:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1afbe:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   1afc0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1afc4:	42b3      	cmp	r3, r6
   1afc6:	d003      	beq.n	1afd0 <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   1afc8:	4649      	mov	r1, r9
   1afca:	4640      	mov	r0, r8
   1afcc:	f011 feb0 	bl	2cd30 <gatt_ccc_changed>
	if (value_changed) {
   1afd0:	45b2      	cmp	sl, r6
   1afd2:	d01e      	beq.n	1b012 <bt_gatt_attr_write_ccc+0xba>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1afd4:	4628      	mov	r0, r5
   1afd6:	f7fd fca3 	bl	18920 <bt_conn_index>
   1afda:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1b04c <bt_gatt_attr_write_ccc+0xf4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1afde:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   1afe2:	429d      	cmp	r5, r3
   1afe4:	d015      	beq.n	1b012 <bt_gatt_attr_write_ccc+0xba>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1afe6:	7a28      	ldrb	r0, [r5, #8]
   1afe8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1afec:	f010 ff4f 	bl	2be8e <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1aff0:	b178      	cbz	r0, 1b012 <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1aff2:	4628      	mov	r0, r5
   1aff4:	f7fd fc94 	bl	18920 <bt_conn_index>
   1aff8:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1affa:	4628      	mov	r0, r5
   1affc:	f7fd fb3e 	bl	1867c <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1b000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1b004:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1b008:	2300      	movs	r3, #0
   1b00a:	f108 0008 	add.w	r0, r8, #8
   1b00e:	f00a fb09 	bl	25624 <k_work_reschedule>
	if (!value) {
   1b012:	2e00      	cmp	r6, #0
   1b014:	d1b8      	bne.n	1af88 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b016:	490e      	ldr	r1, [pc, #56]	; (1b050 <bt_gatt_attr_write_ccc+0xf8>)
   1b018:	1c60      	adds	r0, r4, #1
   1b01a:	f011 ff2c 	bl	2ce76 <bt_addr_le_copy>
	cfg->id = 0U;
   1b01e:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   1b020:	8126      	strh	r6, [r4, #8]
}
   1b022:	e7b1      	b.n	1af88 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1b024:	4632      	mov	r2, r6
   1b026:	4641      	mov	r1, r8
   1b028:	4628      	mov	r0, r5
   1b02a:	4798      	blx	r3
		if (write < 0) {
   1b02c:	2800      	cmp	r0, #0
   1b02e:	dbac      	blt.n	1af8a <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   1b030:	3801      	subs	r0, #1
   1b032:	2801      	cmp	r0, #1
   1b034:	d9c1      	bls.n	1afba <bt_gatt_attr_write_ccc+0x62>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1b036:	f06f 000d 	mvn.w	r0, #13
   1b03a:	e7a6      	b.n	1af8a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b03c:	f06f 0006 	mvn.w	r0, #6
   1b040:	e7a3      	b.n	1af8a <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b042:	f06f 000c 	mvn.w	r0, #12
   1b046:	e7a0      	b.n	1af8a <bt_gatt_attr_write_ccc+0x32>
   1b048:	00032af9 	.word	0x00032af9
   1b04c:	20001f18 	.word	0x20001f18
   1b050:	000313da 	.word	0x000313da

0001b054 <sc_commit>:
{
   1b054:	b508      	push	{r3, lr}
   1b056:	4809      	ldr	r0, [pc, #36]	; (1b07c <sc_commit+0x28>)
   1b058:	f06f 0102 	mvn.w	r1, #2
   1b05c:	f011 ff0e 	bl	2ce7c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b060:	4806      	ldr	r0, [pc, #24]	; (1b07c <sc_commit+0x28>)
   1b062:	f011 fef3 	bl	2ce4c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b066:	07c3      	lsls	r3, r0, #31
   1b068:	d505      	bpl.n	1b076 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b06a:	4805      	ldr	r0, [pc, #20]	; (1b080 <sc_commit+0x2c>)
   1b06c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b070:	2300      	movs	r3, #0
   1b072:	f00a fad7 	bl	25624 <k_work_reschedule>
}
   1b076:	2000      	movs	r0, #0
   1b078:	bd08      	pop	{r3, pc}
   1b07a:	bf00      	nop
   1b07c:	20002018 	.word	0x20002018
   1b080:	20001fe8 	.word	0x20001fe8

0001b084 <sc_indicate_rsp>:
{
   1b084:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b086:	f06f 0102 	mvn.w	r1, #2
   1b08a:	4604      	mov	r4, r0
   1b08c:	480f      	ldr	r0, [pc, #60]	; (1b0cc <sc_indicate_rsp+0x48>)
   1b08e:	f011 fef5 	bl	2ce7c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b092:	480e      	ldr	r0, [pc, #56]	; (1b0cc <sc_indicate_rsp+0x48>)
   1b094:	f011 feda 	bl	2ce4c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b098:	07c2      	lsls	r2, r0, #31
   1b09a:	d504      	bpl.n	1b0a6 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b09c:	480c      	ldr	r0, [pc, #48]	; (1b0d0 <sc_indicate_rsp+0x4c>)
   1b09e:	2200      	movs	r2, #0
   1b0a0:	2300      	movs	r3, #0
   1b0a2:	f00a fabf 	bl	25624 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f011 fe11 	bl	2ccce <bt_att_fixed_chan_only>
   1b0ac:	b160      	cbz	r0, 1b0c8 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1b0ae:	4620      	mov	r0, r4
   1b0b0:	f7ff fb1c 	bl	1a6ec <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b0b4:	b140      	cbz	r0, 1b0c8 <sc_indicate_rsp+0x44>
   1b0b6:	7a03      	ldrb	r3, [r0, #8]
   1b0b8:	07db      	lsls	r3, r3, #31
   1b0ba:	d505      	bpl.n	1b0c8 <sc_indicate_rsp+0x44>
}
   1b0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b0c0:	2101      	movs	r1, #1
   1b0c2:	300c      	adds	r0, #12
   1b0c4:	f011 bec8 	b.w	2ce58 <atomic_or>
   1b0c8:	bd10      	pop	{r4, pc}
   1b0ca:	bf00      	nop
   1b0cc:	20002018 	.word	0x20002018
   1b0d0:	20001fe8 	.word	0x20001fe8

0001b0d4 <bt_gatt_init>:
{
   1b0d4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b0d6:	4b2d      	ldr	r3, [pc, #180]	; (1b18c <bt_gatt_init+0xb8>)
   1b0d8:	f3bf 8f5b 	dmb	ish
   1b0dc:	2201      	movs	r2, #1
   1b0de:	e853 1f00 	ldrex	r1, [r3]
   1b0e2:	2900      	cmp	r1, #0
   1b0e4:	d103      	bne.n	1b0ee <bt_gatt_init+0x1a>
   1b0e6:	e843 2000 	strex	r0, r2, [r3]
   1b0ea:	2800      	cmp	r0, #0
   1b0ec:	d1f7      	bne.n	1b0de <bt_gatt_init+0xa>
   1b0ee:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1b0f2:	d149      	bne.n	1b188 <bt_gatt_init+0xb4>
   1b0f4:	f3bf 8f5b 	dmb	ish
   1b0f8:	4b25      	ldr	r3, [pc, #148]	; (1b190 <bt_gatt_init+0xbc>)
   1b0fa:	e853 1f00 	ldrex	r1, [r3]
   1b0fe:	2900      	cmp	r1, #0
   1b100:	d103      	bne.n	1b10a <bt_gatt_init+0x36>
   1b102:	e843 2000 	strex	r0, r2, [r3]
   1b106:	2800      	cmp	r0, #0
   1b108:	d1f7      	bne.n	1b0fa <bt_gatt_init+0x26>
   1b10a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1b10e:	d11c      	bne.n	1b14a <bt_gatt_init+0x76>
   1b110:	4920      	ldr	r1, [pc, #128]	; (1b194 <bt_gatt_init+0xc0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b112:	4a21      	ldr	r2, [pc, #132]	; (1b198 <bt_gatt_init+0xc4>)
   1b114:	880b      	ldrh	r3, [r1, #0]
   1b116:	4c21      	ldr	r4, [pc, #132]	; (1b19c <bt_gatt_init+0xc8>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1b118:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b11a:	42a2      	cmp	r2, r4
   1b11c:	d912      	bls.n	1b144 <bt_gatt_init+0x70>
   1b11e:	b100      	cbz	r0, 1b122 <bt_gatt_init+0x4e>
   1b120:	800b      	strh	r3, [r1, #0]
   1b122:	491f      	ldr	r1, [pc, #124]	; (1b1a0 <bt_gatt_init+0xcc>)
   1b124:	481f      	ldr	r0, [pc, #124]	; (1b1a4 <bt_gatt_init+0xd0>)
   1b126:	f44f 62a1 	mov.w	r2, #1288	; 0x508
   1b12a:	f00f fd0f 	bl	2ab4c <assert_print>
   1b12e:	481c      	ldr	r0, [pc, #112]	; (1b1a0 <bt_gatt_init+0xcc>)
   1b130:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1b134:	f00f fd03 	bl	2ab3e <assert_post_action>
		last_static_handle += svc->attr_count;
   1b138:	6850      	ldr	r0, [r2, #4]
   1b13a:	4403      	add	r3, r0
   1b13c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b13e:	3208      	adds	r2, #8
   1b140:	2001      	movs	r0, #1
   1b142:	e7ea      	b.n	1b11a <bt_gatt_init+0x46>
   1b144:	d3f8      	bcc.n	1b138 <bt_gatt_init+0x64>
   1b146:	b100      	cbz	r0, 1b14a <bt_gatt_init+0x76>
   1b148:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1b14a:	4b17      	ldr	r3, [pc, #92]	; (1b1a8 <bt_gatt_init+0xd4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b14c:	4917      	ldr	r1, [pc, #92]	; (1b1ac <bt_gatt_init+0xd8>)
   1b14e:	4818      	ldr	r0, [pc, #96]	; (1b1b0 <bt_gatt_init+0xdc>)
   1b150:	2200      	movs	r2, #0
	list->tail = NULL;
   1b152:	e9c3 2200 	strd	r2, r2, [r3]
   1b156:	f00a f97b 	bl	25450 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b15a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b15e:	2300      	movs	r3, #0
   1b160:	4813      	ldr	r0, [pc, #76]	; (1b1b0 <bt_gatt_init+0xdc>)
   1b162:	f7fa fc7f 	bl	15a64 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b166:	4913      	ldr	r1, [pc, #76]	; (1b1b4 <bt_gatt_init+0xe0>)
   1b168:	4813      	ldr	r0, [pc, #76]	; (1b1b8 <bt_gatt_init+0xe4>)
   1b16a:	f00a f971 	bl	25450 <k_work_init_delayable>
   1b16e:	2102      	movs	r1, #2
   1b170:	4812      	ldr	r0, [pc, #72]	; (1b1bc <bt_gatt_init+0xe8>)
   1b172:	f011 fe71 	bl	2ce58 <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1b176:	4812      	ldr	r0, [pc, #72]	; (1b1c0 <bt_gatt_init+0xec>)
   1b178:	4912      	ldr	r1, [pc, #72]	; (1b1c4 <bt_gatt_init+0xf0>)
   1b17a:	f00a f969 	bl	25450 <k_work_init_delayable>
}
   1b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1b182:	4811      	ldr	r0, [pc, #68]	; (1b1c8 <bt_gatt_init+0xf4>)
   1b184:	f7fd bd2c 	b.w	18be0 <bt_conn_cb_register>
}
   1b188:	bd10      	pop	{r4, pc}
   1b18a:	bf00      	nop
   1b18c:	2000349c 	.word	0x2000349c
   1b190:	20003498 	.word	0x20003498
   1b194:	2000433a 	.word	0x2000433a
   1b198:	0002f300 	.word	0x0002f300
   1b19c:	0002f310 	.word	0x0002f310
   1b1a0:	000329fb 	.word	0x000329fb
   1b1a4:	0003013d 	.word	0x0003013d
   1b1a8:	200034a0 	.word	0x200034a0
   1b1ac:	0001b41d 	.word	0x0001b41d
   1b1b0:	20001f70 	.word	0x20001f70
   1b1b4:	0001b935 	.word	0x0001b935
   1b1b8:	20001fe8 	.word	0x20001fe8
   1b1bc:	20002018 	.word	0x20002018
   1b1c0:	20001f20 	.word	0x20001f20
   1b1c4:	0002d725 	.word	0x0002d725
   1b1c8:	200007c8 	.word	0x200007c8

0001b1cc <bt_gatt_attr_get_handle>:
{
   1b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b1d0:	4603      	mov	r3, r0
   1b1d2:	b378      	cbz	r0, 1b234 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   1b1d4:	8a00      	ldrh	r0, [r0, #16]
   1b1d6:	bb68      	cbnz	r0, 1b234 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1d8:	4918      	ldr	r1, [pc, #96]	; (1b23c <bt_gatt_attr_get_handle+0x70>)
   1b1da:	f8df e064 	ldr.w	lr, [pc, #100]	; 1b240 <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   1b1de:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b1e0:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1e4:	4571      	cmp	r1, lr
   1b1e6:	d924      	bls.n	1b232 <bt_gatt_attr_get_handle+0x66>
   1b1e8:	4916      	ldr	r1, [pc, #88]	; (1b244 <bt_gatt_attr_get_handle+0x78>)
   1b1ea:	4817      	ldr	r0, [pc, #92]	; (1b248 <bt_gatt_attr_get_handle+0x7c>)
   1b1ec:	f240 625d 	movw	r2, #1629	; 0x65d
   1b1f0:	f00f fcac 	bl	2ab4c <assert_print>
   1b1f4:	4813      	ldr	r0, [pc, #76]	; (1b244 <bt_gatt_attr_get_handle+0x78>)
   1b1f6:	f240 615d 	movw	r1, #1629	; 0x65d
   1b1fa:	f00f fca0 	bl	2ab3e <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b1fe:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1b202:	42bb      	cmp	r3, r7
   1b204:	d304      	bcc.n	1b210 <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b206:	fb0c 7206 	mla	r2, ip, r6, r7
   1b20a:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1b20c:	4293      	cmp	r3, r2
   1b20e:	d90e      	bls.n	1b22e <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   1b210:	4434      	add	r4, r6
   1b212:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b214:	3108      	adds	r1, #8
   1b216:	4614      	mov	r4, r2
   1b218:	e7e4      	b.n	1b1e4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1b21a:	fb0c 7805 	mla	r8, ip, r5, r7
   1b21e:	4543      	cmp	r3, r8
   1b220:	d00a      	beq.n	1b238 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b222:	3501      	adds	r5, #1
   1b224:	1962      	adds	r2, r4, r5
   1b226:	42b5      	cmp	r5, r6
   1b228:	b292      	uxth	r2, r2
   1b22a:	d1f6      	bne.n	1b21a <bt_gatt_attr_get_handle+0x4e>
   1b22c:	e7f2      	b.n	1b214 <bt_gatt_attr_get_handle+0x48>
   1b22e:	2500      	movs	r5, #0
   1b230:	e7f8      	b.n	1b224 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b232:	d3e4      	bcc.n	1b1fe <bt_gatt_attr_get_handle+0x32>
}
   1b234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b238:	4610      	mov	r0, r2
   1b23a:	e7fb      	b.n	1b234 <bt_gatt_attr_get_handle+0x68>
   1b23c:	0002f300 	.word	0x0002f300
   1b240:	0002f310 	.word	0x0002f310
   1b244:	000329fb 	.word	0x000329fb
   1b248:	0003013d 	.word	0x0003013d

0001b24c <bt_gatt_foreach_attr_type>:
{
   1b24c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b250:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1b254:	9100      	str	r1, [sp, #0]
   1b256:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1b258:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b25c:	2d00      	cmp	r5, #0
   1b25e:	bf08      	it	eq
   1b260:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1b262:	4b29      	ldr	r3, [pc, #164]	; (1b308 <bt_gatt_foreach_attr_type+0xbc>)
   1b264:	881b      	ldrh	r3, [r3, #0]
   1b266:	4283      	cmp	r3, r0
{
   1b268:	4607      	mov	r7, r0
   1b26a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1b26c:	d232      	bcs.n	1b2d4 <bt_gatt_foreach_attr_type+0x88>
}
   1b26e:	b003      	add	sp, #12
   1b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b274:	5889      	ldr	r1, [r1, r2]
   1b276:	9301      	str	r3, [sp, #4]
   1b278:	4640      	mov	r0, r8
   1b27a:	f010 fcd1 	bl	2bc20 <bt_uuid_cmp>
   1b27e:	9b01      	ldr	r3, [sp, #4]
   1b280:	b190      	cbz	r0, 1b2a8 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b282:	3401      	adds	r4, #1
   1b284:	f10a 0a01 	add.w	sl, sl, #1
   1b288:	b2a4      	uxth	r4, r4
   1b28a:	6873      	ldr	r3, [r6, #4]
   1b28c:	4553      	cmp	r3, sl
   1b28e:	d92c      	bls.n	1b2ea <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1b290:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b292:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1b294:	429c      	cmp	r4, r3
   1b296:	d8ea      	bhi.n	1b26e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1b298:	42bc      	cmp	r4, r7
   1b29a:	d3f2      	bcc.n	1b282 <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b29c:	fb0b f20a 	mul.w	r2, fp, sl
   1b2a0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b2a2:	f1b8 0f00 	cmp.w	r8, #0
   1b2a6:	d1e5      	bne.n	1b274 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1b2a8:	f1b9 0f00 	cmp.w	r9, #0
   1b2ac:	d10b      	bne.n	1b2c6 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1b2ae:	3d01      	subs	r5, #1
   1b2b0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1b2b2:	4618      	mov	r0, r3
   1b2b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b2b8:	4621      	mov	r1, r4
   1b2ba:	4798      	blx	r3
	if (!*num_matches) {
   1b2bc:	2d00      	cmp	r5, #0
   1b2be:	d0d6      	beq.n	1b26e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b2c0:	2800      	cmp	r0, #0
   1b2c2:	d1de      	bne.n	1b282 <bt_gatt_foreach_attr_type+0x36>
   1b2c4:	e7d3      	b.n	1b26e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1b2c6:	68da      	ldr	r2, [r3, #12]
   1b2c8:	4591      	cmp	r9, r2
   1b2ca:	d1da      	bne.n	1b282 <bt_gatt_foreach_attr_type+0x36>
   1b2cc:	e7ef      	b.n	1b2ae <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b2ce:	f04f 0a00 	mov.w	sl, #0
   1b2d2:	e7da      	b.n	1b28a <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2d4:	4e0d      	ldr	r6, [pc, #52]	; (1b30c <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   1b2d6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b2d8:	f04f 0b14 	mov.w	fp, #20
   1b2dc:	e006      	b.n	1b2ec <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2de:	d2c6      	bcs.n	1b26e <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1b2e0:	6873      	ldr	r3, [r6, #4]
   1b2e2:	4423      	add	r3, r4
   1b2e4:	42bb      	cmp	r3, r7
   1b2e6:	d2f2      	bcs.n	1b2ce <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1b2e8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2ea:	3608      	adds	r6, #8
   1b2ec:	4b08      	ldr	r3, [pc, #32]	; (1b310 <bt_gatt_foreach_attr_type+0xc4>)
   1b2ee:	429e      	cmp	r6, r3
   1b2f0:	d9f5      	bls.n	1b2de <bt_gatt_foreach_attr_type+0x92>
   1b2f2:	4908      	ldr	r1, [pc, #32]	; (1b314 <bt_gatt_foreach_attr_type+0xc8>)
   1b2f4:	4808      	ldr	r0, [pc, #32]	; (1b318 <bt_gatt_foreach_attr_type+0xcc>)
   1b2f6:	f240 7221 	movw	r2, #1825	; 0x721
   1b2fa:	f00f fc27 	bl	2ab4c <assert_print>
   1b2fe:	4805      	ldr	r0, [pc, #20]	; (1b314 <bt_gatt_foreach_attr_type+0xc8>)
   1b300:	f240 7121 	movw	r1, #1825	; 0x721
   1b304:	f00f fc1b 	bl	2ab3e <assert_post_action>
   1b308:	2000433a 	.word	0x2000433a
   1b30c:	0002f300 	.word	0x0002f300
   1b310:	0002f310 	.word	0x0002f310
   1b314:	000329fb 	.word	0x000329fb
   1b318:	0003013d 	.word	0x0003013d

0001b31c <db_hash_gen>:
{
   1b31c:	b530      	push	{r4, r5, lr}
   1b31e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1b320:	2300      	movs	r3, #0
{
   1b322:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b324:	aa1c      	add	r2, sp, #112	; 0x70
   1b326:	4669      	mov	r1, sp
   1b328:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1b32a:	e9cd 3300 	strd	r3, r3, [sp]
   1b32e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b332:	f010 fa2c 	bl	2b78e <tc_cmac_setup>
   1b336:	b928      	cbnz	r0, 1b344 <db_hash_gen+0x28>
		LOG_ERR("Unable to setup AES CMAC");
   1b338:	4814      	ldr	r0, [pc, #80]	; (1b38c <db_hash_gen+0x70>)
   1b33a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unable to calculate hash");
   1b33c:	f00f fc14 	bl	2ab68 <z_log_minimal_printk>
}
   1b340:	b049      	add	sp, #292	; 0x124
   1b342:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1b344:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b348:	2001      	movs	r0, #1
   1b34a:	4a11      	ldr	r2, [pc, #68]	; (1b390 <db_hash_gen+0x74>)
   1b34c:	ab04      	add	r3, sp, #16
   1b34e:	f012 f8b9 	bl	2d4c4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b352:	4810      	ldr	r0, [pc, #64]	; (1b394 <db_hash_gen+0x78>)
   1b354:	a904      	add	r1, sp, #16
   1b356:	f010 faaf 	bl	2b8b8 <tc_cmac_final>
   1b35a:	b910      	cbnz	r0, 1b362 <db_hash_gen+0x46>
		LOG_ERR("Unable to calculate hash");
   1b35c:	480e      	ldr	r0, [pc, #56]	; (1b398 <db_hash_gen+0x7c>)
   1b35e:	2145      	movs	r1, #69	; 0x45
   1b360:	e7ec      	b.n	1b33c <db_hash_gen+0x20>
   1b362:	4b0c      	ldr	r3, [pc, #48]	; (1b394 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b364:	2208      	movs	r2, #8
   1b366:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b36a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b36c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   1b370:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1b374:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b376:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1b378:	d1f7      	bne.n	1b36a <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1b37a:	b10c      	cbz	r4, 1b380 <db_hash_gen+0x64>
		db_hash_store();
   1b37c:	f7ff f9a0 	bl	1a6c0 <db_hash_store>
   1b380:	2104      	movs	r1, #4
   1b382:	4806      	ldr	r0, [pc, #24]	; (1b39c <db_hash_gen+0x80>)
   1b384:	f011 fd68 	bl	2ce58 <atomic_or>
   1b388:	e7da      	b.n	1b340 <db_hash_gen+0x24>
   1b38a:	bf00      	nop
   1b38c:	00032b18 	.word	0x00032b18
   1b390:	0002cd7d 	.word	0x0002cd7d
   1b394:	20001f50 	.word	0x20001f50
   1b398:	00032b36 	.word	0x00032b36
   1b39c:	20002018 	.word	0x20002018

0001b3a0 <db_hash_read>:
{
   1b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b3a2:	491b      	ldr	r1, [pc, #108]	; (1b410 <db_hash_read+0x70>)
{
   1b3a4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b3a8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b3aa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b3ae:	4615      	mov	r5, r2
   1b3b0:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b3b2:	f00a f983 	bl	256bc <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3b6:	4817      	ldr	r0, [pc, #92]	; (1b414 <db_hash_read+0x74>)
   1b3b8:	f011 fd48 	bl	2ce4c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b3bc:	0741      	lsls	r1, r0, #29
   1b3be:	d402      	bmi.n	1b3c6 <db_hash_read+0x26>
		db_hash_gen(true);
   1b3c0:	2001      	movs	r0, #1
   1b3c2:	f7ff ffab 	bl	1b31c <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1b3c6:	4620      	mov	r0, r4
   1b3c8:	f7ff f990 	bl	1a6ec <find_cf_cfg>
	if (cfg &&
   1b3cc:	b168      	cbz	r0, 1b3ea <db_hash_read+0x4a>
   1b3ce:	7a03      	ldrb	r3, [r0, #8]
   1b3d0:	07da      	lsls	r2, r3, #31
   1b3d2:	d50a      	bpl.n	1b3ea <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b3d4:	f100 040c 	add.w	r4, r0, #12
   1b3d8:	4620      	mov	r0, r4
   1b3da:	f011 fd37 	bl	2ce4c <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1b3de:	07c3      	lsls	r3, r0, #31
   1b3e0:	d403      	bmi.n	1b3ea <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b3e2:	2102      	movs	r1, #2
   1b3e4:	4620      	mov	r0, r4
   1b3e6:	f011 fd37 	bl	2ce58 <atomic_or>
	if (offset > value_len) {
   1b3ea:	2e10      	cmp	r6, #16
   1b3ec:	d80c      	bhi.n	1b408 <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   1b3ee:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b3f2:	4909      	ldr	r1, [pc, #36]	; (1b418 <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   1b3f4:	42bc      	cmp	r4, r7
   1b3f6:	bfa8      	it	ge
   1b3f8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b3fa:	4622      	mov	r2, r4
   1b3fc:	4431      	add	r1, r6
   1b3fe:	4628      	mov	r0, r5
   1b400:	f010 fb7a 	bl	2baf8 <memcpy>
}
   1b404:	4620      	mov	r0, r4
   1b406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b408:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b40c:	e7fa      	b.n	1b404 <db_hash_read+0x64>
   1b40e:	bf00      	nop
   1b410:	20001fa0 	.word	0x20001fa0
   1b414:	20002018 	.word	0x20002018
   1b418:	20001f50 	.word	0x20001f50

0001b41c <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b41c:	f06f 0108 	mvn.w	r1, #8
{
   1b420:	b508      	push	{r3, lr}
   1b422:	4826      	ldr	r0, [pc, #152]	; (1b4bc <db_hash_process+0xa0>)
   1b424:	f011 fd2a 	bl	2ce7c <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1b428:	0701      	lsls	r1, r0, #28
   1b42a:	d542      	bpl.n	1b4b2 <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b42c:	4823      	ldr	r0, [pc, #140]	; (1b4bc <db_hash_process+0xa0>)
   1b42e:	f011 fd0d 	bl	2ce4c <atomic_get>
   1b432:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b434:	075a      	lsls	r2, r3, #29
   1b436:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1b43a:	d401      	bmi.n	1b440 <db_hash_process+0x24>
			db_hash_gen(false);
   1b43c:	f7ff ff6e 	bl	1b31c <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1b440:	491f      	ldr	r1, [pc, #124]	; (1b4c0 <db_hash_process+0xa4>)
   1b442:	2210      	movs	r2, #16
   1b444:	1888      	adds	r0, r1, r2
   1b446:	f010 fb30 	bl	2baaa <memcmp>
   1b44a:	b948      	cbnz	r0, 1b460 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1b44c:	481d      	ldr	r0, [pc, #116]	; (1b4c4 <db_hash_process+0xa8>)
   1b44e:	f00a f8ef 	bl	25630 <k_work_cancel_delayable>
}
   1b452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b456:	4819      	ldr	r0, [pc, #100]	; (1b4bc <db_hash_process+0xa0>)
   1b458:	f06f 0101 	mvn.w	r1, #1
   1b45c:	f011 bd0e 	b.w	2ce7c <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b460:	4816      	ldr	r0, [pc, #88]	; (1b4bc <db_hash_process+0xa0>)
   1b462:	2101      	movs	r1, #1
   1b464:	f011 fcf8 	bl	2ce58 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b468:	f010 0f01 	tst.w	r0, #1
   1b46c:	4b16      	ldr	r3, [pc, #88]	; (1b4c8 <db_hash_process+0xac>)
   1b46e:	d110      	bne.n	1b492 <db_hash_process+0x76>
		gatt_sc.start = start;
   1b470:	4a16      	ldr	r2, [pc, #88]	; (1b4cc <db_hash_process+0xb0>)
   1b472:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b474:	4811      	ldr	r0, [pc, #68]	; (1b4bc <db_hash_process+0xa0>)
   1b476:	f011 fce9 	bl	2ce4c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1b47a:	0783      	lsls	r3, r0, #30
   1b47c:	d405      	bmi.n	1b48a <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b47e:	4811      	ldr	r0, [pc, #68]	; (1b4c4 <db_hash_process+0xa8>)
   1b480:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b484:	2300      	movs	r3, #0
   1b486:	f00a f8cd 	bl	25624 <k_work_reschedule>
}
   1b48a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   1b48e:	f7ff b917 	b.w	1a6c0 <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1b492:	8b1a      	ldrh	r2, [r3, #24]
   1b494:	8b58      	ldrh	r0, [r3, #26]
   1b496:	2a01      	cmp	r2, #1
   1b498:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b49c:	d805      	bhi.n	1b4aa <db_hash_process+0x8e>
   1b49e:	4290      	cmp	r0, r2
   1b4a0:	d0f3      	beq.n	1b48a <db_hash_process+0x6e>
		*end = new_end;
   1b4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b4a6:	835a      	strh	r2, [r3, #26]
   1b4a8:	e7e4      	b.n	1b474 <db_hash_process+0x58>
	if (*end < new_end) {
   1b4aa:	4290      	cmp	r0, r2
		*start = new_start;
   1b4ac:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1b4ae:	d0e1      	beq.n	1b474 <db_hash_process+0x58>
   1b4b0:	e7f7      	b.n	1b4a2 <db_hash_process+0x86>
}
   1b4b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   1b4b6:	2001      	movs	r0, #1
   1b4b8:	f7ff bf30 	b.w	1b31c <db_hash_gen>
   1b4bc:	20002018 	.word	0x20002018
   1b4c0:	20001f50 	.word	0x20001f50
   1b4c4:	20001fe8 	.word	0x20001fe8
   1b4c8:	20001fc8 	.word	0x20001fc8
   1b4cc:	ffff0001 	.word	0xffff0001

0001b4d0 <ccc_set_direct>:
{
   1b4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b4d4:	b0b9      	sub	sp, #228	; 0xe4
   1b4d6:	460c      	mov	r4, r1
   1b4d8:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b4da:	492c      	ldr	r1, [pc, #176]	; (1b58c <ccc_set_direct+0xbc>)
   1b4dc:	9840      	ldr	r0, [sp, #256]	; 0x100
   1b4de:	466a      	mov	r2, sp
{
   1b4e0:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b4e2:	f00f fdc9 	bl	2b078 <settings_name_steq>
   1b4e6:	b948      	cbnz	r0, 1b4fc <ccc_set_direct+0x2c>
			LOG_ERR("Invalid key");
   1b4e8:	4829      	ldr	r0, [pc, #164]	; (1b590 <ccc_set_direct+0xc0>)
   1b4ea:	2145      	movs	r1, #69	; 0x45
   1b4ec:	f00f fb3c 	bl	2ab68 <z_log_minimal_printk>
   1b4f0:	f06f 0515 	mvn.w	r5, #21
}
   1b4f4:	4628      	mov	r0, r5
   1b4f6:	b039      	add	sp, #228	; 0xe4
   1b4f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1b4fc:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1b4fe:	a901      	add	r1, sp, #4
   1b500:	4630      	mov	r0, r6
   1b502:	f00f fddd 	bl	2b0c0 <settings_name_next>
		if (!name) {
   1b506:	b936      	cbnz	r6, 1b516 <ccc_set_direct+0x46>
			LOG_ERR("Insufficient number of arguments");
   1b508:	4822      	ldr	r0, [pc, #136]	; (1b594 <ccc_set_direct+0xc4>)
   1b50a:	2145      	movs	r1, #69	; 0x45
   1b50c:	f00f fb2c 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   1b510:	f06f 0415 	mvn.w	r4, #21
   1b514:	e02a      	b.n	1b56c <ccc_set_direct+0x9c>
		} else if (!next) {
   1b516:	9801      	ldr	r0, [sp, #4]
   1b518:	b970      	cbnz	r0, 1b538 <ccc_set_direct+0x68>
		err = bt_settings_decode_key(name, &addr);
   1b51a:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1b51e:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1b520:	4649      	mov	r1, r9
   1b522:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1b524:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1b528:	f010 fb56 	bl	2bbd8 <bt_settings_decode_key>
		if (err) {
   1b52c:	4605      	mov	r5, r0
   1b52e:	b178      	cbz	r0, 1b550 <ccc_set_direct+0x80>
			LOG_ERR("Unable to decode address %s", name);
   1b530:	4819      	ldr	r0, [pc, #100]	; (1b598 <ccc_set_direct+0xc8>)
   1b532:	4632      	mov	r2, r6
   1b534:	2145      	movs	r1, #69	; 0x45
   1b536:	e008      	b.n	1b54a <ccc_set_direct+0x7a>
			unsigned long next_id = strtoul(next, NULL, 10);
   1b538:	220a      	movs	r2, #10
   1b53a:	2100      	movs	r1, #0
   1b53c:	f010 fa04 	bl	2b948 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1b540:	4602      	mov	r2, r0
   1b542:	2800      	cmp	r0, #0
   1b544:	d0e9      	beq.n	1b51a <ccc_set_direct+0x4a>
				LOG_ERR("Invalid local identity %lu", next_id);
   1b546:	4815      	ldr	r0, [pc, #84]	; (1b59c <ccc_set_direct+0xcc>)
   1b548:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to decode address %s", name);
   1b54a:	f00f fb0d 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   1b54e:	e7df      	b.n	1b510 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   1b550:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1b554:	b1c4      	cbz	r4, 1b588 <ccc_set_direct+0xb8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1b556:	22c0      	movs	r2, #192	; 0xc0
   1b558:	a908      	add	r1, sp, #32
   1b55a:	4640      	mov	r0, r8
   1b55c:	47b8      	blx	r7
			if (len < 0) {
   1b55e:	1e04      	subs	r4, r0, #0
   1b560:	da06      	bge.n	1b570 <ccc_set_direct+0xa0>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1b562:	480f      	ldr	r0, [pc, #60]	; (1b5a0 <ccc_set_direct+0xd0>)
   1b564:	4622      	mov	r2, r4
   1b566:	2145      	movs	r1, #69	; 0x45
   1b568:	f00f fafe 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   1b56c:	4625      	mov	r5, r4
   1b56e:	e7c1      	b.n	1b4f4 <ccc_set_direct+0x24>
			load.count = len / sizeof(*ccc_store);
   1b570:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1b572:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   1b574:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1b578:	4a0a      	ldr	r2, [pc, #40]	; (1b5a4 <ccc_set_direct+0xd4>)
   1b57a:	ab04      	add	r3, sp, #16
   1b57c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b580:	2001      	movs	r0, #1
   1b582:	f011 ff9f 	bl	2d4c4 <bt_gatt_foreach_attr>
	return 0;
   1b586:	e7b5      	b.n	1b4f4 <ccc_set_direct+0x24>
   1b588:	4623      	mov	r3, r4
   1b58a:	e7f3      	b.n	1b574 <ccc_set_direct+0xa4>
   1b58c:	00032b54 	.word	0x00032b54
   1b590:	00032b5b 	.word	0x00032b5b
   1b594:	00031462 	.word	0x00031462
   1b598:	0003295a 	.word	0x0003295a
   1b59c:	0003297b 	.word	0x0003297b
   1b5a0:	0003288b 	.word	0x0003288b
   1b5a4:	0001a8e9 	.word	0x0001a8e9

0001b5a8 <bt_gatt_attr_next>:
{
   1b5a8:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b5aa:	2300      	movs	r3, #0
   1b5ac:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b5ae:	f7ff fe0d 	bl	1b1cc <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b5b2:	1c41      	adds	r1, r0, #1
   1b5b4:	b289      	uxth	r1, r1
   1b5b6:	4608      	mov	r0, r1
   1b5b8:	4a03      	ldr	r2, [pc, #12]	; (1b5c8 <bt_gatt_attr_next+0x20>)
   1b5ba:	ab01      	add	r3, sp, #4
   1b5bc:	f011 ff82 	bl	2d4c4 <bt_gatt_foreach_attr>
}
   1b5c0:	9801      	ldr	r0, [sp, #4]
   1b5c2:	b003      	add	sp, #12
   1b5c4:	f85d fb04 	ldr.w	pc, [sp], #4
   1b5c8:	0002cd2b 	.word	0x0002cd2b

0001b5cc <bt_gatt_is_subscribed>:
{
   1b5cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b5d0:	460c      	mov	r4, r1
   1b5d2:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1b5d4:	4605      	mov	r5, r0
   1b5d6:	b950      	cbnz	r0, 1b5ee <bt_gatt_is_subscribed+0x22>
   1b5d8:	4953      	ldr	r1, [pc, #332]	; (1b728 <bt_gatt_is_subscribed+0x15c>)
   1b5da:	4854      	ldr	r0, [pc, #336]	; (1b72c <bt_gatt_is_subscribed+0x160>)
   1b5dc:	f640 424d 	movw	r2, #3149	; 0xc4d
   1b5e0:	f00f fab4 	bl	2ab4c <assert_print>
   1b5e4:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   1b5e8:	484f      	ldr	r0, [pc, #316]	; (1b728 <bt_gatt_is_subscribed+0x15c>)
   1b5ea:	f00f faa8 	bl	2ab3e <assert_post_action>
   1b5ee:	b941      	cbnz	r1, 1b602 <bt_gatt_is_subscribed+0x36>
   1b5f0:	494d      	ldr	r1, [pc, #308]	; (1b728 <bt_gatt_is_subscribed+0x15c>)
   1b5f2:	484e      	ldr	r0, [pc, #312]	; (1b72c <bt_gatt_is_subscribed+0x160>)
   1b5f4:	f640 424e 	movw	r2, #3150	; 0xc4e
   1b5f8:	f00f faa8 	bl	2ab4c <assert_print>
   1b5fc:	f640 414e 	movw	r1, #3150	; 0xc4e
   1b600:	e7f2      	b.n	1b5e8 <bt_gatt_is_subscribed+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   1b602:	7b43      	ldrb	r3, [r0, #13]
   1b604:	2b07      	cmp	r3, #7
   1b606:	d110      	bne.n	1b62a <bt_gatt_is_subscribed+0x5e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b608:	2300      	movs	r3, #0
   1b60a:	f88d 300c 	strb.w	r3, [sp, #12]
   1b60e:	6820      	ldr	r0, [r4, #0]
   1b610:	f642 0303 	movw	r3, #10243	; 0x2803
   1b614:	a903      	add	r1, sp, #12
   1b616:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b61a:	f010 fb01 	bl	2bc20 <bt_uuid_cmp>
   1b61e:	b9b0      	cbnz	r0, 1b64e <bt_gatt_is_subscribed+0x82>
		if (!(chrc->properties &
   1b620:	68e3      	ldr	r3, [r4, #12]
   1b622:	799b      	ldrb	r3, [r3, #6]
   1b624:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b628:	d103      	bne.n	1b632 <bt_gatt_is_subscribed+0x66>
		return false;
   1b62a:	2000      	movs	r0, #0
}
   1b62c:	b004      	add	sp, #16
   1b62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1b632:	4620      	mov	r0, r4
   1b634:	f7ff ffb8 	bl	1b5a8 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b638:	4604      	mov	r4, r0
   1b63a:	b940      	cbnz	r0, 1b64e <bt_gatt_is_subscribed+0x82>
   1b63c:	493a      	ldr	r1, [pc, #232]	; (1b728 <bt_gatt_is_subscribed+0x15c>)
   1b63e:	483b      	ldr	r0, [pc, #236]	; (1b72c <bt_gatt_is_subscribed+0x160>)
   1b640:	f640 425f 	movw	r2, #3167	; 0xc5f
   1b644:	f00f fa82 	bl	2ab4c <assert_print>
   1b648:	f640 415f 	movw	r1, #3167	; 0xc5f
   1b64c:	e7cc      	b.n	1b5e8 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b64e:	2300      	movs	r3, #0
   1b650:	6820      	ldr	r0, [r4, #0]
   1b652:	f88d 300c 	strb.w	r3, [sp, #12]
   1b656:	a903      	add	r1, sp, #12
   1b658:	f642 1302 	movw	r3, #10498	; 0x2902
   1b65c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b660:	f010 fade 	bl	2bc20 <bt_uuid_cmp>
   1b664:	b168      	cbz	r0, 1b682 <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   1b666:	4620      	mov	r0, r4
   1b668:	f7ff ff9e 	bl	1b5a8 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b66c:	4604      	mov	r4, r0
   1b66e:	b940      	cbnz	r0, 1b682 <bt_gatt_is_subscribed+0xb6>
   1b670:	492d      	ldr	r1, [pc, #180]	; (1b728 <bt_gatt_is_subscribed+0x15c>)
   1b672:	482e      	ldr	r0, [pc, #184]	; (1b72c <bt_gatt_is_subscribed+0x160>)
   1b674:	f640 4265 	movw	r2, #3173	; 0xc65
   1b678:	f00f fa68 	bl	2ab4c <assert_print>
   1b67c:	f640 4165 	movw	r1, #3173	; 0xc65
   1b680:	e7b2      	b.n	1b5e8 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b682:	2600      	movs	r6, #0
   1b684:	f642 1802 	movw	r8, #10498	; 0x2902
   1b688:	6820      	ldr	r0, [r4, #0]
   1b68a:	f88d 6000 	strb.w	r6, [sp]
   1b68e:	4669      	mov	r1, sp
   1b690:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b694:	f010 fac4 	bl	2bc20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b698:	b9d8      	cbnz	r0, 1b6d2 <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b69a:	2300      	movs	r3, #0
   1b69c:	6820      	ldr	r0, [r4, #0]
   1b69e:	f88d 300c 	strb.w	r3, [sp, #12]
   1b6a2:	a903      	add	r1, sp, #12
   1b6a4:	f642 1302 	movw	r3, #10498	; 0x2902
   1b6a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b6ac:	f010 fab8 	bl	2bc20 <bt_uuid_cmp>
   1b6b0:	2800      	cmp	r0, #0
   1b6b2:	d1ba      	bne.n	1b62a <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   1b6b4:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b6b6:	4622      	mov	r2, r4
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b6be:	f010 fd20 	bl	2c102 <bt_conn_is_peer_addr_le>
   1b6c2:	2800      	cmp	r0, #0
   1b6c4:	d0b1      	beq.n	1b62a <bt_gatt_is_subscribed+0x5e>
   1b6c6:	8923      	ldrh	r3, [r4, #8]
   1b6c8:	421f      	tst	r7, r3
   1b6ca:	bf14      	ite	ne
   1b6cc:	2001      	movne	r0, #1
   1b6ce:	2000      	moveq	r0, #0
   1b6d0:	e7ac      	b.n	1b62c <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b6d2:	6820      	ldr	r0, [r4, #0]
   1b6d4:	f88d 6004 	strb.w	r6, [sp, #4]
   1b6d8:	f642 0303 	movw	r3, #10243	; 0x2803
   1b6dc:	a901      	add	r1, sp, #4
   1b6de:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b6e2:	f010 fa9d 	bl	2bc20 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b6e6:	2800      	cmp	r0, #0
   1b6e8:	d0d7      	beq.n	1b69a <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b6ea:	6820      	ldr	r0, [r4, #0]
   1b6ec:	f88d 6008 	strb.w	r6, [sp, #8]
   1b6f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b6f4:	a902      	add	r1, sp, #8
   1b6f6:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b6fa:	f010 fa91 	bl	2bc20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b6fe:	2800      	cmp	r0, #0
   1b700:	d0cb      	beq.n	1b69a <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b702:	6820      	ldr	r0, [r4, #0]
   1b704:	f88d 600c 	strb.w	r6, [sp, #12]
   1b708:	f642 0301 	movw	r3, #10241	; 0x2801
   1b70c:	a903      	add	r1, sp, #12
   1b70e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b712:	f010 fa85 	bl	2bc20 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b716:	2800      	cmp	r0, #0
   1b718:	d0bf      	beq.n	1b69a <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   1b71a:	4620      	mov	r0, r4
   1b71c:	f7ff ff44 	bl	1b5a8 <bt_gatt_attr_next>
		if (!attr) {
   1b720:	4604      	mov	r4, r0
   1b722:	2800      	cmp	r0, #0
   1b724:	d1b0      	bne.n	1b688 <bt_gatt_is_subscribed+0xbc>
   1b726:	e780      	b.n	1b62a <bt_gatt_is_subscribed+0x5e>
   1b728:	000329fb 	.word	0x000329fb
   1b72c:	0003013d 	.word	0x0003013d

0001b730 <gatt_indicate>:
{
   1b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b734:	4615      	mov	r5, r2
   1b736:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b738:	2294      	movs	r2, #148	; 0x94
   1b73a:	6869      	ldr	r1, [r5, #4]
{
   1b73c:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b73e:	f011 fecc 	bl	2d4da <bt_gatt_check_perm>
   1b742:	4680      	mov	r8, r0
   1b744:	b140      	cbz	r0, 1b758 <gatt_indicate+0x28>
		LOG_WRN("Link is not encrypted");
   1b746:	482d      	ldr	r0, [pc, #180]	; (1b7fc <gatt_indicate+0xcc>)
   1b748:	2157      	movs	r1, #87	; 0x57
   1b74a:	f00f fa0d 	bl	2ab68 <z_log_minimal_printk>
		return -EPERM;
   1b74e:	f04f 35ff 	mov.w	r5, #4294967295
}
   1b752:	4628      	mov	r0, r5
   1b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b758:	6869      	ldr	r1, [r5, #4]
   1b75a:	2202      	movs	r2, #2
   1b75c:	4630      	mov	r0, r6
   1b75e:	f7ff ff35 	bl	1b5cc <bt_gatt_is_subscribed>
   1b762:	b930      	cbnz	r0, 1b772 <gatt_indicate+0x42>
			LOG_WRN("Device is not subscribed to characteristic");
   1b764:	4826      	ldr	r0, [pc, #152]	; (1b800 <gatt_indicate+0xd0>)
   1b766:	2157      	movs	r1, #87	; 0x57
   1b768:	f00f f9fe 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   1b76c:	f06f 0515 	mvn.w	r5, #21
   1b770:	e7ef      	b.n	1b752 <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b772:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b776:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b778:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b77a:	f7fe fdb7 	bl	1a2ec <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b77e:	3702      	adds	r7, #2
	if (!req) {
   1b780:	4604      	mov	r4, r0
   1b782:	b1a0      	cbz	r0, 1b7ae <gatt_indicate+0x7e>
	req->func = func;
   1b784:	4b1f      	ldr	r3, [pc, #124]	; (1b804 <gatt_indicate+0xd4>)
	req->len = len;
   1b786:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1b788:	211d      	movs	r1, #29
   1b78a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1b78c:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1b790:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b792:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b794:	463a      	mov	r2, r7
   1b796:	4630      	mov	r0, r6
   1b798:	f7fe fae2 	bl	19d60 <bt_att_create_pdu>
	if (!buf) {
   1b79c:	4607      	mov	r7, r0
   1b79e:	b948      	cbnz	r0, 1b7b4 <gatt_indicate+0x84>
		LOG_WRN("No buffer available to send indication");
   1b7a0:	4819      	ldr	r0, [pc, #100]	; (1b808 <gatt_indicate+0xd8>)
   1b7a2:	2157      	movs	r1, #87	; 0x57
   1b7a4:	f00f f9e0 	bl	2ab68 <z_log_minimal_printk>
		bt_att_req_free(req);
   1b7a8:	4620      	mov	r0, r4
   1b7aa:	f7fe fdc1 	bl	1a330 <bt_att_req_free>
		return -ENOMEM;
   1b7ae:	f06f 050b 	mvn.w	r5, #11
   1b7b2:	e7ce      	b.n	1b752 <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1b7b4:	2301      	movs	r3, #1
   1b7b6:	4642      	mov	r2, r8
   1b7b8:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1b7ba:	f107 0a0c 	add.w	sl, r7, #12
   1b7be:	f011 faad 	bl	2cd1c <bt_att_set_tx_meta_data>
   1b7c2:	2102      	movs	r1, #2
   1b7c4:	4650      	mov	r0, sl
   1b7c6:	f003 fc73 	bl	1f0b0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b7ca:	4680      	mov	r8, r0
   1b7cc:	4650      	mov	r0, sl
   1b7ce:	f828 9b02 	strh.w	r9, [r8], #2
   1b7d2:	8aa9      	ldrh	r1, [r5, #20]
   1b7d4:	f003 fc6c 	bl	1f0b0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b7d8:	8aaa      	ldrh	r2, [r5, #20]
   1b7da:	6929      	ldr	r1, [r5, #16]
   1b7dc:	4640      	mov	r0, r8
   1b7de:	f010 f98b 	bl	2baf8 <memcpy>
	req->buf = buf;
   1b7e2:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b7e4:	4621      	mov	r1, r4
   1b7e6:	4630      	mov	r0, r6
   1b7e8:	f7fe fef6 	bl	1a5d8 <bt_att_req_send>
	if (err) {
   1b7ec:	4605      	mov	r5, r0
   1b7ee:	2800      	cmp	r0, #0
   1b7f0:	d0af      	beq.n	1b752 <gatt_indicate+0x22>
		bt_att_req_free(req);
   1b7f2:	4620      	mov	r0, r4
   1b7f4:	f7fe fd9c 	bl	1a330 <bt_att_req_free>
   1b7f8:	e7ab      	b.n	1b752 <gatt_indicate+0x22>
   1b7fa:	bf00      	nop
   1b7fc:	00032b6c 	.word	0x00032b6c
   1b800:	00032b87 	.word	0x00032b87
   1b804:	0002cd45 	.word	0x0002cd45
   1b808:	00032bb7 	.word	0x00032bb7

0001b80c <bt_gatt_indicate>:
{
   1b80c:	b530      	push	{r4, r5, lr}
   1b80e:	4605      	mov	r5, r0
   1b810:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b812:	460c      	mov	r4, r1
   1b814:	b951      	cbnz	r1, 1b82c <bt_gatt_indicate+0x20>
   1b816:	4942      	ldr	r1, [pc, #264]	; (1b920 <bt_gatt_indicate+0x114>)
   1b818:	4842      	ldr	r0, [pc, #264]	; (1b924 <bt_gatt_indicate+0x118>)
   1b81a:	f640 320d 	movw	r2, #2829	; 0xb0d
   1b81e:	f00f f995 	bl	2ab4c <assert_print>
   1b822:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b826:	483e      	ldr	r0, [pc, #248]	; (1b920 <bt_gatt_indicate+0x114>)
   1b828:	f00f f989 	bl	2ab3e <assert_post_action>
   1b82c:	684b      	ldr	r3, [r1, #4]
   1b82e:	b953      	cbnz	r3, 1b846 <bt_gatt_indicate+0x3a>
   1b830:	680b      	ldr	r3, [r1, #0]
   1b832:	b943      	cbnz	r3, 1b846 <bt_gatt_indicate+0x3a>
   1b834:	493a      	ldr	r1, [pc, #232]	; (1b920 <bt_gatt_indicate+0x114>)
   1b836:	483b      	ldr	r0, [pc, #236]	; (1b924 <bt_gatt_indicate+0x118>)
   1b838:	f640 320e 	movw	r2, #2830	; 0xb0e
   1b83c:	f00f f986 	bl	2ab4c <assert_print>
   1b840:	f640 310e 	movw	r1, #2830	; 0xb0e
   1b844:	e7ef      	b.n	1b826 <bt_gatt_indicate+0x1a>
   1b846:	4838      	ldr	r0, [pc, #224]	; (1b928 <bt_gatt_indicate+0x11c>)
   1b848:	f011 fb00 	bl	2ce4c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b84c:	0742      	lsls	r2, r0, #29
   1b84e:	d561      	bpl.n	1b914 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b850:	b115      	cbz	r5, 1b858 <bt_gatt_indicate+0x4c>
   1b852:	7b6b      	ldrb	r3, [r5, #13]
   1b854:	2b07      	cmp	r3, #7
   1b856:	d160      	bne.n	1b91a <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   1b858:	6860      	ldr	r0, [r4, #4]
   1b85a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b85c:	f7ff fcb6 	bl	1b1cc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b860:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b862:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b866:	b33a      	cbz	r2, 1b8b8 <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b868:	a905      	add	r1, sp, #20
   1b86a:	9102      	str	r1, [sp, #8]
   1b86c:	492f      	ldr	r1, [pc, #188]	; (1b92c <bt_gatt_indicate+0x120>)
   1b86e:	9101      	str	r1, [sp, #4]
   1b870:	2101      	movs	r1, #1
	found->attr = NULL;
   1b872:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b874:	9100      	str	r1, [sp, #0]
   1b876:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b87a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b87c:	f7ff fce6 	bl	1b24c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b880:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b882:	b91b      	cbnz	r3, 1b88c <bt_gatt_indicate+0x80>
			return -ENOENT;
   1b884:	f06f 0001 	mvn.w	r0, #1
}
   1b888:	b00b      	add	sp, #44	; 0x2c
   1b88a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b88c:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b88e:	9b05      	ldr	r3, [sp, #20]
   1b890:	6818      	ldr	r0, [r3, #0]
   1b892:	2300      	movs	r3, #0
   1b894:	f88d 3010 	strb.w	r3, [sp, #16]
   1b898:	a904      	add	r1, sp, #16
   1b89a:	f642 0303 	movw	r3, #10243	; 0x2803
   1b89e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b8a2:	f010 f9bd 	bl	2bc20 <bt_uuid_cmp>
   1b8a6:	b970      	cbnz	r0, 1b8c6 <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b8a8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b8aa:	68c3      	ldr	r3, [r0, #12]
   1b8ac:	799b      	ldrb	r3, [r3, #6]
   1b8ae:	069b      	lsls	r3, r3, #26
   1b8b0:	d405      	bmi.n	1b8be <bt_gatt_indicate+0xb2>
			return -EINVAL;
   1b8b2:	f06f 0015 	mvn.w	r0, #21
   1b8b6:	e7e7      	b.n	1b888 <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   1b8b8:	2800      	cmp	r0, #0
   1b8ba:	d1e8      	bne.n	1b88e <bt_gatt_indicate+0x82>
   1b8bc:	e7e2      	b.n	1b884 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b8be:	f011 fdb3 	bl	2d428 <bt_gatt_attr_value_handle>
   1b8c2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b8c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b8ca:	b13d      	cbz	r5, 1b8dc <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1b8cc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b8ce:	4601      	mov	r1, r0
		params->_ref = 1;
   1b8d0:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b8d2:	4622      	mov	r2, r4
   1b8d4:	4628      	mov	r0, r5
   1b8d6:	f7ff ff2b 	bl	1b730 <gatt_indicate>
   1b8da:	e7d5      	b.n	1b888 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   1b8dc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b8e0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b8e2:	2302      	movs	r3, #2
   1b8e4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8e8:	f642 1302 	movw	r3, #10498	; 0x2902
   1b8ec:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b8f0:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b8f2:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8f4:	9302      	str	r3, [sp, #8]
   1b8f6:	4b0e      	ldr	r3, [pc, #56]	; (1b930 <bt_gatt_indicate+0x124>)
   1b8f8:	9301      	str	r3, [sp, #4]
   1b8fa:	2301      	movs	r3, #1
   1b8fc:	9300      	str	r3, [sp, #0]
   1b8fe:	aa04      	add	r2, sp, #16
   1b900:	462b      	mov	r3, r5
   1b902:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b906:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b908:	f88d 5010 	strb.w	r5, [sp, #16]
   1b90c:	f7ff fc9e 	bl	1b24c <bt_gatt_foreach_attr_type>
	return data.err;
   1b910:	9807      	ldr	r0, [sp, #28]
   1b912:	e7b9      	b.n	1b888 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   1b914:	f06f 000a 	mvn.w	r0, #10
   1b918:	e7b6      	b.n	1b888 <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   1b91a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b91e:	e7b3      	b.n	1b888 <bt_gatt_indicate+0x7c>
   1b920:	000329fb 	.word	0x000329fb
   1b924:	0003013d 	.word	0x0003013d
   1b928:	20000444 	.word	0x20000444
   1b92c:	0002cd6b 	.word	0x0002cd6b
   1b930:	0001bb51 	.word	0x0001bb51

0001b934 <sc_process>:
{
   1b934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b936:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1b93a:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b93c:	f1a0 0720 	sub.w	r7, r0, #32
   1b940:	4628      	mov	r0, r5
   1b942:	f011 fa83 	bl	2ce4c <atomic_get>
   1b946:	0783      	lsls	r3, r0, #30
   1b948:	f3c0 0640 	ubfx	r6, r0, #1, #1
   1b94c:	d50a      	bpl.n	1b964 <sc_process+0x30>
   1b94e:	4917      	ldr	r1, [pc, #92]	; (1b9ac <sc_process+0x78>)
   1b950:	4817      	ldr	r0, [pc, #92]	; (1b9b0 <sc_process+0x7c>)
   1b952:	f240 429a 	movw	r2, #1178	; 0x49a
   1b956:	f00f f8f9 	bl	2ab4c <assert_print>
   1b95a:	4814      	ldr	r0, [pc, #80]	; (1b9ac <sc_process+0x78>)
   1b95c:	f240 419a 	movw	r1, #1178	; 0x49a
   1b960:	f00f f8ed 	bl	2ab3e <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b964:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b968:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b96a:	f06f 0101 	mvn.w	r1, #1
   1b96e:	4628      	mov	r0, r5
   1b970:	f011 fa84 	bl	2ce7c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b974:	4b0f      	ldr	r3, [pc, #60]	; (1b9b4 <sc_process+0x80>)
   1b976:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b97a:	4b0f      	ldr	r3, [pc, #60]	; (1b9b8 <sc_process+0x84>)
   1b97c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b980:	ab01      	add	r3, sp, #4
   1b982:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b986:	2304      	movs	r3, #4
	sc->start = 0U;
   1b988:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   1b98c:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b990:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b994:	4639      	mov	r1, r7
   1b996:	4630      	mov	r0, r6
   1b998:	f7ff ff38 	bl	1b80c <bt_gatt_indicate>
   1b99c:	b918      	cbnz	r0, 1b9a6 <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b99e:	2102      	movs	r1, #2
   1b9a0:	4628      	mov	r0, r5
   1b9a2:	f011 fa59 	bl	2ce58 <atomic_or>
}
   1b9a6:	b003      	add	sp, #12
   1b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b9aa:	bf00      	nop
   1b9ac:	000329fb 	.word	0x000329fb
   1b9b0:	0003013d 	.word	0x0003013d
   1b9b4:	0002f960 	.word	0x0002f960
   1b9b8:	0001b085 	.word	0x0001b085

0001b9bc <update_ccc>:
{
   1b9bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9c0:	4b33      	ldr	r3, [pc, #204]	; (1ba90 <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
   1b9c2:	6814      	ldr	r4, [r2, #0]
{
   1b9c4:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9c6:	6882      	ldr	r2, [r0, #8]
   1b9c8:	429a      	cmp	r2, r3
{
   1b9ca:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9cc:	d116      	bne.n	1b9fc <update_ccc+0x40>
	ccc = attr->user_data;
   1b9ce:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1b9d0:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b9d2:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1b9d4:	b193      	cbz	r3, 1b9fc <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b9d6:	7831      	ldrb	r1, [r6, #0]
   1b9d8:	4620      	mov	r0, r4
   1b9da:	f010 fb92 	bl	2c102 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b9de:	b168      	cbz	r0, 1b9fc <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b9e0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b9e4:	4629      	mov	r1, r5
   1b9e6:	4620      	mov	r0, r4
   1b9e8:	f011 fd77 	bl	2d4da <bt_gatt_check_perm>
		if (err) {
   1b9ec:	b1d8      	cbz	r0, 1ba26 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b9ee:	2803      	cmp	r0, #3
   1b9f0:	d108      	bne.n	1ba04 <update_ccc+0x48>
				LOG_WRN("CCC %p not writable", attr);
   1b9f2:	4828      	ldr	r0, [pc, #160]	; (1ba94 <update_ccc+0xd8>)
   1b9f4:	462a      	mov	r2, r5
   1b9f6:	2157      	movs	r1, #87	; 0x57
   1b9f8:	f00f f8b6 	bl	2ab68 <z_log_minimal_printk>
}
   1b9fc:	2001      	movs	r0, #1
   1b9fe:	b002      	add	sp, #8
   1ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sec = BT_SECURITY_L2;
   1ba04:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1ba06:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1ba08:	bf0c      	ite	eq
   1ba0a:	f04f 0803 	moveq.w	r8, #3
   1ba0e:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   1ba12:	f010 fb74 	bl	2c0fe <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ba16:	4580      	cmp	r8, r0
   1ba18:	d905      	bls.n	1ba26 <update_ccc+0x6a>
				if (data->sec < sec) {
   1ba1a:	793b      	ldrb	r3, [r7, #4]
   1ba1c:	4543      	cmp	r3, r8
   1ba1e:	d2ed      	bcs.n	1b9fc <update_ccc+0x40>
					data->sec = sec;
   1ba20:	f887 8004 	strb.w	r8, [r7, #4]
   1ba24:	e7ea      	b.n	1b9fc <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   1ba26:	4631      	mov	r1, r6
   1ba28:	4628      	mov	r0, r5
   1ba2a:	f011 f981 	bl	2cd30 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1ba2e:	4b1a      	ldr	r3, [pc, #104]	; (1ba98 <update_ccc+0xdc>)
   1ba30:	429e      	cmp	r6, r3
   1ba32:	d1e3      	bne.n	1b9fc <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ba34:	7a20      	ldrb	r0, [r4, #8]
   1ba36:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1ba3a:	f7fe fe85 	bl	1a748 <find_sc_cfg>
	if (!cfg) {
   1ba3e:	2800      	cmp	r0, #0
   1ba40:	d0dc      	beq.n	1b9fc <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   1ba42:	8902      	ldrh	r2, [r0, #8]
   1ba44:	8943      	ldrh	r3, [r0, #10]
   1ba46:	ea52 0103 	orrs.w	r1, r2, r3
   1ba4a:	d0d7      	beq.n	1b9fc <update_ccc+0x40>
	index = bt_conn_index(conn);
   1ba4c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1ba4e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1ba52:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1ba56:	f7fc ff63 	bl	18920 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba5a:	4910      	ldr	r1, [pc, #64]	; (1ba9c <update_ccc+0xe0>)
   1ba5c:	4a10      	ldr	r2, [pc, #64]	; (1baa0 <update_ccc+0xe4>)
   1ba5e:	2318      	movs	r3, #24
   1ba60:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba64:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba66:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1ba68:	4a0e      	ldr	r2, [pc, #56]	; (1baa4 <update_ccc+0xe8>)
   1ba6a:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1ba6c:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1ba72:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1ba74:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba76:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1ba7a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba7c:	4620      	mov	r0, r4
   1ba7e:	f7ff fec5 	bl	1b80c <bt_gatt_indicate>
   1ba82:	2800      	cmp	r0, #0
   1ba84:	d0ba      	beq.n	1b9fc <update_ccc+0x40>
		LOG_ERR("SC restore indication failed");
   1ba86:	4808      	ldr	r0, [pc, #32]	; (1baa8 <update_ccc+0xec>)
   1ba88:	2145      	movs	r1, #69	; 0x45
   1ba8a:	f00f f86d 	bl	2ab68 <z_log_minimal_printk>
   1ba8e:	e7b5      	b.n	1b9fc <update_ccc+0x40>
   1ba90:	0001af59 	.word	0x0001af59
   1ba94:	00032be3 	.word	0x00032be3
   1ba98:	200007fc 	.word	0x200007fc
   1ba9c:	20003460 	.word	0x20003460
   1baa0:	0002f960 	.word	0x0002f960
   1baa4:	0002d3e1 	.word	0x0002d3e1
   1baa8:	00032bfc 	.word	0x00032bfc

0001baac <gatt_notify>:
{
   1baac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bab0:	4614      	mov	r4, r2
   1bab2:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bab4:	2294      	movs	r2, #148	; 0x94
   1bab6:	6861      	ldr	r1, [r4, #4]
{
   1bab8:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1baba:	f011 fd0e 	bl	2d4da <bt_gatt_check_perm>
   1babe:	b138      	cbz	r0, 1bad0 <gatt_notify+0x24>
		LOG_WRN("Link is not encrypted");
   1bac0:	4820      	ldr	r0, [pc, #128]	; (1bb44 <gatt_notify+0x98>)
   1bac2:	2157      	movs	r1, #87	; 0x57
   1bac4:	f00f f850 	bl	2ab68 <z_log_minimal_printk>
		return -EPERM;
   1bac8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1bad0:	6861      	ldr	r1, [r4, #4]
   1bad2:	2201      	movs	r2, #1
   1bad4:	4630      	mov	r0, r6
   1bad6:	f7ff fd79 	bl	1b5cc <bt_gatt_is_subscribed>
   1bada:	b930      	cbnz	r0, 1baea <gatt_notify+0x3e>
			LOG_WRN("Device is not subscribed to characteristic");
   1badc:	481a      	ldr	r0, [pc, #104]	; (1bb48 <gatt_notify+0x9c>)
   1bade:	2157      	movs	r1, #87	; 0x57
   1bae0:	f00f f842 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   1bae4:	f06f 0015 	mvn.w	r0, #21
   1bae8:	e7f0      	b.n	1bacc <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1baea:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1baec:	211b      	movs	r1, #27
   1baee:	3202      	adds	r2, #2
   1baf0:	4630      	mov	r0, r6
   1baf2:	f7fe f935 	bl	19d60 <bt_att_create_pdu>
	if (!buf) {
   1baf6:	4605      	mov	r5, r0
   1baf8:	b930      	cbnz	r0, 1bb08 <gatt_notify+0x5c>
		LOG_WRN("No buffer available to send notification");
   1bafa:	4814      	ldr	r0, [pc, #80]	; (1bb4c <gatt_notify+0xa0>)
   1bafc:	2157      	movs	r1, #87	; 0x57
   1bafe:	f00f f833 	bl	2ab68 <z_log_minimal_printk>
		return -ENOMEM;
   1bb02:	f06f 000b 	mvn.w	r0, #11
   1bb06:	e7e1      	b.n	1bacc <gatt_notify+0x20>
   1bb08:	f100 090c 	add.w	r9, r0, #12
   1bb0c:	2102      	movs	r1, #2
   1bb0e:	4648      	mov	r0, r9
   1bb10:	f003 face 	bl	1f0b0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bb14:	4607      	mov	r7, r0
   1bb16:	4648      	mov	r0, r9
   1bb18:	f827 8b02 	strh.w	r8, [r7], #2
   1bb1c:	89a1      	ldrh	r1, [r4, #12]
   1bb1e:	f003 fac7 	bl	1f0b0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1bb22:	89a2      	ldrh	r2, [r4, #12]
   1bb24:	68a1      	ldr	r1, [r4, #8]
   1bb26:	4638      	mov	r0, r7
   1bb28:	f00f ffe6 	bl	2baf8 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1bb2c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1bb30:	4628      	mov	r0, r5
   1bb32:	2301      	movs	r3, #1
   1bb34:	f011 f8f2 	bl	2cd1c <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1bb38:	4629      	mov	r1, r5
   1bb3a:	4630      	mov	r0, r6
}
   1bb3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1bb40:	f7fe bcf2 	b.w	1a528 <bt_att_send>
   1bb44:	00032b6c 	.word	0x00032b6c
   1bb48:	00032b87 	.word	0x00032b87
   1bb4c:	00032c1e 	.word	0x00032c1e

0001bb50 <notify_cb>:
{
   1bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb54:	4b3f      	ldr	r3, [pc, #252]	; (1bc54 <notify_cb+0x104>)
{
   1bb56:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb58:	6882      	ldr	r2, [r0, #8]
   1bb5a:	429a      	cmp	r2, r3
{
   1bb5c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb5e:	d003      	beq.n	1bb68 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1bb60:	2701      	movs	r7, #1
}
   1bb62:	4638      	mov	r0, r7
   1bb64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1bb68:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1bb6a:	4b3b      	ldr	r3, [pc, #236]	; (1bc58 <notify_cb+0x108>)
   1bb6c:	429e      	cmp	r6, r3
   1bb6e:	d011      	beq.n	1bb94 <notify_cb+0x44>
		if (cfg->value != data->type) {
   1bb70:	8932      	ldrh	r2, [r6, #8]
   1bb72:	89ab      	ldrh	r3, [r5, #12]
   1bb74:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bb76:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1bb7a:	d1f1      	bne.n	1bb60 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bb7c:	7830      	ldrb	r0, [r6, #0]
   1bb7e:	f7fd f853 	bl	18c28 <bt_conn_lookup_addr_le>
		if (!conn) {
   1bb82:	4604      	mov	r4, r0
   1bb84:	2800      	cmp	r0, #0
   1bb86:	d0eb      	beq.n	1bb60 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1bb88:	7b43      	ldrb	r3, [r0, #13]
   1bb8a:	2b07      	cmp	r3, #7
   1bb8c:	d026      	beq.n	1bbdc <notify_cb+0x8c>
			bt_conn_unref(conn);
   1bb8e:	f7fc fda1 	bl	186d4 <bt_conn_unref>
			continue;
   1bb92:	e7e5      	b.n	1bb60 <notify_cb+0x10>
   1bb94:	4c31      	ldr	r4, [pc, #196]	; (1bc5c <notify_cb+0x10c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bb96:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1bc60 <notify_cb+0x110>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bb9a:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bb9e:	4649      	mov	r1, r9
   1bba0:	4620      	mov	r0, r4
   1bba2:	f011 f93e 	bl	2ce22 <bt_addr_le_eq>
   1bba6:	b978      	cbnz	r0, 1bbc8 <notify_cb+0x78>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1bba8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1bbac:	2207      	movs	r2, #7
   1bbae:	4621      	mov	r1, r4
   1bbb0:	f7fd f870 	bl	18c94 <bt_conn_lookup_state_le>
			if (!conn) {
   1bbb4:	b978      	cbnz	r0, 1bbd6 <notify_cb+0x86>
				sc = (struct sc_data *)data->ind_params->data;
   1bbb6:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1bbb8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1bbbc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1bbbe:	4621      	mov	r1, r4
   1bbc0:	8853      	ldrh	r3, [r2, #2]
   1bbc2:	8812      	ldrh	r2, [r2, #0]
   1bbc4:	f7fe fefe 	bl	1a9c4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bbc8:	340c      	adds	r4, #12
   1bbca:	f1b8 0f00 	cmp.w	r8, #0
   1bbce:	d1cf      	bne.n	1bb70 <notify_cb+0x20>
   1bbd0:	f04f 0801 	mov.w	r8, #1
   1bbd4:	e7e3      	b.n	1bb9e <notify_cb+0x4e>
			bt_conn_unref(conn);
   1bbd6:	f7fc fd7d 	bl	186d4 <bt_conn_unref>
   1bbda:	e7f5      	b.n	1bbc8 <notify_cb+0x78>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1bbdc:	6973      	ldr	r3, [r6, #20]
   1bbde:	b123      	cbz	r3, 1bbea <notify_cb+0x9a>
   1bbe0:	4639      	mov	r1, r7
   1bbe2:	4798      	blx	r3
   1bbe4:	b908      	cbnz	r0, 1bbea <notify_cb+0x9a>
			bt_conn_unref(conn);
   1bbe6:	4620      	mov	r0, r4
   1bbe8:	e7d1      	b.n	1bb8e <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bbea:	4639      	mov	r1, r7
   1bbec:	2294      	movs	r2, #148	; 0x94
   1bbee:	4620      	mov	r0, r4
   1bbf0:	f011 fc73 	bl	2d4da <bt_gatt_check_perm>
   1bbf4:	4607      	mov	r7, r0
   1bbf6:	b120      	cbz	r0, 1bc02 <notify_cb+0xb2>
			LOG_WRN("Link is not encrypted");
   1bbf8:	481a      	ldr	r0, [pc, #104]	; (1bc64 <notify_cb+0x114>)
   1bbfa:	2157      	movs	r1, #87	; 0x57
   1bbfc:	f00e ffb4 	bl	2ab68 <z_log_minimal_printk>
   1bc00:	e7f1      	b.n	1bbe6 <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1bc02:	89ab      	ldrh	r3, [r5, #12]
   1bc04:	2b02      	cmp	r3, #2
   1bc06:	d114      	bne.n	1bc32 <notify_cb+0xe2>
   1bc08:	8933      	ldrh	r3, [r6, #8]
   1bc0a:	079a      	lsls	r2, r3, #30
   1bc0c:	d405      	bmi.n	1bc1a <notify_cb+0xca>
		bt_conn_unref(conn);
   1bc0e:	4620      	mov	r0, r4
   1bc10:	f7fc fd60 	bl	186d4 <bt_conn_unref>
		data->err = 0;
   1bc14:	2300      	movs	r3, #0
   1bc16:	60ab      	str	r3, [r5, #8]
   1bc18:	e7a2      	b.n	1bb60 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1bc1a:	692a      	ldr	r2, [r5, #16]
   1bc1c:	88a9      	ldrh	r1, [r5, #4]
   1bc1e:	4620      	mov	r0, r4
   1bc20:	f7ff fd86 	bl	1b730 <gatt_indicate>
			if (err == 0) {
   1bc24:	4606      	mov	r6, r0
   1bc26:	b978      	cbnz	r0, 1bc48 <notify_cb+0xf8>
				data->ind_params->_ref++;
   1bc28:	692a      	ldr	r2, [r5, #16]
   1bc2a:	7d93      	ldrb	r3, [r2, #22]
   1bc2c:	3301      	adds	r3, #1
   1bc2e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1bc30:	e7ed      	b.n	1bc0e <notify_cb+0xbe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1bc32:	2b01      	cmp	r3, #1
   1bc34:	d1eb      	bne.n	1bc0e <notify_cb+0xbe>
   1bc36:	8933      	ldrh	r3, [r6, #8]
   1bc38:	07db      	lsls	r3, r3, #31
   1bc3a:	d5e8      	bpl.n	1bc0e <notify_cb+0xbe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1bc3c:	692a      	ldr	r2, [r5, #16]
   1bc3e:	88a9      	ldrh	r1, [r5, #4]
   1bc40:	4620      	mov	r0, r4
   1bc42:	f7ff ff33 	bl	1baac <gatt_notify>
   1bc46:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1bc48:	4620      	mov	r0, r4
   1bc4a:	f7fc fd43 	bl	186d4 <bt_conn_unref>
		if (err < 0) {
   1bc4e:	2e00      	cmp	r6, #0
   1bc50:	db87      	blt.n	1bb62 <notify_cb+0x12>
   1bc52:	e7df      	b.n	1bc14 <notify_cb+0xc4>
   1bc54:	0001af59 	.word	0x0001af59
   1bc58:	200007fc 	.word	0x200007fc
   1bc5c:	20004323 	.word	0x20004323
   1bc60:	000313da 	.word	0x000313da
   1bc64:	00032b6c 	.word	0x00032b6c

0001bc68 <bt_gatt_discover>:
{
   1bc68:	b570      	push	{r4, r5, r6, lr}
   1bc6a:	460c      	mov	r4, r1
   1bc6c:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1bc6e:	4605      	mov	r5, r0
   1bc70:	b950      	cbnz	r0, 1bc88 <bt_gatt_discover+0x20>
   1bc72:	496c      	ldr	r1, [pc, #432]	; (1be24 <bt_gatt_discover+0x1bc>)
   1bc74:	486c      	ldr	r0, [pc, #432]	; (1be28 <bt_gatt_discover+0x1c0>)
   1bc76:	f241 02c1 	movw	r2, #4289	; 0x10c1
   1bc7a:	f00e ff67 	bl	2ab4c <assert_print>
   1bc7e:	f241 01c1 	movw	r1, #4289	; 0x10c1
	__ASSERT(params && params->func, "invalid parameters\n");
   1bc82:	4868      	ldr	r0, [pc, #416]	; (1be24 <bt_gatt_discover+0x1bc>)
   1bc84:	f00e ff5b 	bl	2ab3e <assert_post_action>
   1bc88:	b109      	cbz	r1, 1bc8e <bt_gatt_discover+0x26>
   1bc8a:	684b      	ldr	r3, [r1, #4]
   1bc8c:	b943      	cbnz	r3, 1bca0 <bt_gatt_discover+0x38>
   1bc8e:	4965      	ldr	r1, [pc, #404]	; (1be24 <bt_gatt_discover+0x1bc>)
   1bc90:	4865      	ldr	r0, [pc, #404]	; (1be28 <bt_gatt_discover+0x1c0>)
   1bc92:	f241 02c2 	movw	r2, #4290	; 0x10c2
   1bc96:	f00e ff59 	bl	2ab4c <assert_print>
   1bc9a:	f241 01c2 	movw	r1, #4290	; 0x10c2
   1bc9e:	e7f0      	b.n	1bc82 <bt_gatt_discover+0x1a>
	__ASSERT((params->start_handle && params->end_handle),
   1bca0:	890a      	ldrh	r2, [r1, #8]
   1bca2:	b10a      	cbz	r2, 1bca8 <bt_gatt_discover+0x40>
   1bca4:	89cb      	ldrh	r3, [r1, #14]
   1bca6:	b943      	cbnz	r3, 1bcba <bt_gatt_discover+0x52>
   1bca8:	495e      	ldr	r1, [pc, #376]	; (1be24 <bt_gatt_discover+0x1bc>)
   1bcaa:	485f      	ldr	r0, [pc, #380]	; (1be28 <bt_gatt_discover+0x1c0>)
   1bcac:	f241 02c3 	movw	r2, #4291	; 0x10c3
   1bcb0:	f00e ff4c 	bl	2ab4c <assert_print>
   1bcb4:	f241 01c3 	movw	r1, #4291	; 0x10c3
   1bcb8:	e7e3      	b.n	1bc82 <bt_gatt_discover+0x1a>
	__ASSERT((params->start_handle <= params->end_handle),
   1bcba:	429a      	cmp	r2, r3
   1bcbc:	d908      	bls.n	1bcd0 <bt_gatt_discover+0x68>
   1bcbe:	4959      	ldr	r1, [pc, #356]	; (1be24 <bt_gatt_discover+0x1bc>)
   1bcc0:	4859      	ldr	r0, [pc, #356]	; (1be28 <bt_gatt_discover+0x1c0>)
   1bcc2:	f241 02c5 	movw	r2, #4293	; 0x10c5
   1bcc6:	f00e ff41 	bl	2ab4c <assert_print>
   1bcca:	f241 01c5 	movw	r1, #4293	; 0x10c5
   1bcce:	e7d8      	b.n	1bc82 <bt_gatt_discover+0x1a>
	if (conn->state != BT_CONN_CONNECTED) {
   1bcd0:	7b43      	ldrb	r3, [r0, #13]
   1bcd2:	2b07      	cmp	r3, #7
   1bcd4:	f040 80a2 	bne.w	1be1c <bt_gatt_discover+0x1b4>
	switch (params->type) {
   1bcd8:	7c0a      	ldrb	r2, [r1, #16]
   1bcda:	2a06      	cmp	r2, #6
   1bcdc:	f200 809b 	bhi.w	1be16 <bt_gatt_discover+0x1ae>
   1bce0:	e8df f002 	tbb	[pc, r2]
   1bce4:	56560404 	.word	0x56560404
   1bce8:	925e      	.short	0x925e
   1bcea:	25          	.byte	0x25
   1bceb:	00          	.byte	0x00
		if (params->uuid) {
   1bcec:	680b      	ldr	r3, [r1, #0]
   1bcee:	b1b3      	cbz	r3, 1bd1e <bt_gatt_discover+0xb6>
	switch (params->uuid->type) {
   1bcf0:	781a      	ldrb	r2, [r3, #0]
   1bcf2:	b132      	cbz	r2, 1bd02 <bt_gatt_discover+0x9a>
   1bcf4:	2a02      	cmp	r2, #2
   1bcf6:	d010      	beq.n	1bd1a <bt_gatt_discover+0xb2>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   1bcf8:	484c      	ldr	r0, [pc, #304]	; (1be2c <bt_gatt_discover+0x1c4>)
   1bcfa:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Invalid discovery type: %u", params->type);
   1bcfc:	f00e ff34 	bl	2ab68 <z_log_minimal_printk>
	return -EINVAL;
   1bd00:	e05b      	b.n	1bdba <bt_gatt_discover+0x152>
		len += BT_UUID_SIZE_16;
   1bd02:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1bd04:	9301      	str	r3, [sp, #4]
   1bd06:	2306      	movs	r3, #6
   1bd08:	9300      	str	r3, [sp, #0]
   1bd0a:	4949      	ldr	r1, [pc, #292]	; (1be30 <bt_gatt_discover+0x1c8>)
   1bd0c:	4b49      	ldr	r3, [pc, #292]	; (1be34 <bt_gatt_discover+0x1cc>)
   1bd0e:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1bd10:	4628      	mov	r0, r5
   1bd12:	f011 fb10 	bl	2d336 <gatt_req_send.constprop.0>
}
   1bd16:	b006      	add	sp, #24
   1bd18:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1bd1a:	2316      	movs	r3, #22
   1bd1c:	e7f2      	b.n	1bd04 <bt_gatt_discover+0x9c>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1bd1e:	2310      	movs	r3, #16
   1bd20:	2104      	movs	r1, #4
   1bd22:	e9cd 3100 	strd	r3, r1, [sp]
   1bd26:	4622      	mov	r2, r4
   1bd28:	4b43      	ldr	r3, [pc, #268]	; (1be38 <bt_gatt_discover+0x1d0>)
   1bd2a:	4944      	ldr	r1, [pc, #272]	; (1be3c <bt_gatt_discover+0x1d4>)
   1bd2c:	e7f0      	b.n	1bd10 <bt_gatt_discover+0xa8>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1bd2e:	6808      	ldr	r0, [r1, #0]
   1bd30:	2800      	cmp	r0, #0
   1bd32:	d042      	beq.n	1bdba <bt_gatt_discover+0x152>
   1bd34:	7806      	ldrb	r6, [r0, #0]
   1bd36:	2e00      	cmp	r6, #0
   1bd38:	d13f      	bne.n	1bdba <bt_gatt_discover+0x152>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1bd3a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1bd3e:	a902      	add	r1, sp, #8
   1bd40:	f88d 6008 	strb.w	r6, [sp, #8]
   1bd44:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bd48:	f00f ff6a 	bl	2bc20 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1bd4c:	b300      	cbz	r0, 1bd90 <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1bd4e:	f642 1302 	movw	r3, #10498	; 0x2902
   1bd52:	6820      	ldr	r0, [r4, #0]
   1bd54:	f88d 600c 	strb.w	r6, [sp, #12]
   1bd58:	a903      	add	r1, sp, #12
   1bd5a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bd5e:	f00f ff5f 	bl	2bc20 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1bd62:	b1a8      	cbz	r0, 1bd90 <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1bd64:	f642 1303 	movw	r3, #10499	; 0x2903
   1bd68:	6820      	ldr	r0, [r4, #0]
   1bd6a:	f88d 6010 	strb.w	r6, [sp, #16]
   1bd6e:	a904      	add	r1, sp, #16
   1bd70:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bd74:	f00f ff54 	bl	2bc20 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1bd78:	b150      	cbz	r0, 1bd90 <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1bd7a:	f642 1304 	movw	r3, #10500	; 0x2904
   1bd7e:	6820      	ldr	r0, [r4, #0]
   1bd80:	f88d 6014 	strb.w	r6, [sp, #20]
   1bd84:	a905      	add	r1, sp, #20
   1bd86:	f8ad 3016 	strh.w	r3, [sp, #22]
   1bd8a:	f00f ff49 	bl	2bc20 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1bd8e:	b9a0      	cbnz	r0, 1bdba <bt_gatt_discover+0x152>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1bd90:	2308      	movs	r3, #8
   1bd92:	2204      	movs	r2, #4
   1bd94:	e9cd 3200 	strd	r3, r2, [sp]
   1bd98:	4929      	ldr	r1, [pc, #164]	; (1be40 <bt_gatt_discover+0x1d8>)
   1bd9a:	4b2a      	ldr	r3, [pc, #168]	; (1be44 <bt_gatt_discover+0x1dc>)
   1bd9c:	4622      	mov	r2, r4
   1bd9e:	e7b7      	b.n	1bd10 <bt_gatt_discover+0xa8>
		if (params->uuid &&
   1bda0:	6808      	ldr	r0, [r1, #0]
   1bda2:	b388      	cbz	r0, 1be08 <bt_gatt_discover+0x1a0>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1bda4:	2600      	movs	r6, #0
   1bda6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bdaa:	a902      	add	r1, sp, #8
   1bdac:	f88d 6008 	strb.w	r6, [sp, #8]
   1bdb0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bdb4:	f00f ff34 	bl	2bc20 <bt_uuid_cmp>
		if (params->uuid &&
   1bdb8:	b910      	cbnz	r0, 1bdc0 <bt_gatt_discover+0x158>
			return -EINVAL;
   1bdba:	f06f 0015 	mvn.w	r0, #21
   1bdbe:	e7aa      	b.n	1bd16 <bt_gatt_discover+0xae>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1bdc0:	f642 0301 	movw	r3, #10241	; 0x2801
   1bdc4:	6820      	ldr	r0, [r4, #0]
   1bdc6:	f88d 600c 	strb.w	r6, [sp, #12]
   1bdca:	a903      	add	r1, sp, #12
   1bdcc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bdd0:	f00f ff26 	bl	2bc20 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1bdd4:	2800      	cmp	r0, #0
   1bdd6:	d0f0      	beq.n	1bdba <bt_gatt_discover+0x152>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1bdd8:	f642 0302 	movw	r3, #10242	; 0x2802
   1bddc:	6820      	ldr	r0, [r4, #0]
   1bdde:	f88d 6010 	strb.w	r6, [sp, #16]
   1bde2:	a904      	add	r1, sp, #16
   1bde4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bde8:	f00f ff1a 	bl	2bc20 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1bdec:	2800      	cmp	r0, #0
   1bdee:	d0e4      	beq.n	1bdba <bt_gatt_discover+0x152>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1bdf0:	f642 0303 	movw	r3, #10243	; 0x2803
   1bdf4:	6820      	ldr	r0, [r4, #0]
   1bdf6:	f88d 6014 	strb.w	r6, [sp, #20]
   1bdfa:	a905      	add	r1, sp, #20
   1bdfc:	f8ad 3016 	strh.w	r3, [sp, #22]
   1be00:	f00f ff0e 	bl	2bc20 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1be04:	2800      	cmp	r0, #0
   1be06:	d0d8      	beq.n	1bdba <bt_gatt_discover+0x152>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1be08:	2304      	movs	r3, #4
   1be0a:	e9cd 3300 	strd	r3, r3, [sp]
   1be0e:	490e      	ldr	r1, [pc, #56]	; (1be48 <bt_gatt_discover+0x1e0>)
   1be10:	4b0e      	ldr	r3, [pc, #56]	; (1be4c <bt_gatt_discover+0x1e4>)
   1be12:	4622      	mov	r2, r4
   1be14:	e77c      	b.n	1bd10 <bt_gatt_discover+0xa8>
		LOG_ERR("Invalid discovery type: %u", params->type);
   1be16:	480e      	ldr	r0, [pc, #56]	; (1be50 <bt_gatt_discover+0x1e8>)
   1be18:	2145      	movs	r1, #69	; 0x45
   1be1a:	e76f      	b.n	1bcfc <bt_gatt_discover+0x94>
		return -ENOTCONN;
   1be1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1be20:	e779      	b.n	1bd16 <bt_gatt_discover+0xae>
   1be22:	bf00      	nop
   1be24:	000329fb 	.word	0x000329fb
   1be28:	0003013d 	.word	0x0003013d
   1be2c:	00032c4c 	.word	0x00032c4c
   1be30:	0002d57f 	.word	0x0002d57f
   1be34:	0002d115 	.word	0x0002d115
   1be38:	0002cf17 	.word	0x0002cf17
   1be3c:	0001be55 	.word	0x0001be55
   1be40:	0001bf59 	.word	0x0001bf59
   1be44:	0002cf47 	.word	0x0002cf47
   1be48:	0001c2a9 	.word	0x0001c2a9
   1be4c:	0002ceaf 	.word	0x0002ceaf
   1be50:	00032c66 	.word	0x00032c66

0001be54 <gatt_read_group_rsp>:
{
   1be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be58:	b08f      	sub	sp, #60	; 0x3c
   1be5a:	4681      	mov	r9, r0
   1be5c:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1be5e:	4617      	mov	r7, r2
	if (err) {
   1be60:	b131      	cbz	r1, 1be70 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1be62:	686b      	ldr	r3, [r5, #4]
   1be64:	462a      	mov	r2, r5
   1be66:	2100      	movs	r1, #0
}
   1be68:	b00f      	add	sp, #60	; 0x3c
   1be6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1be6e:	4718      	bx	r3
	switch (rsp->len) {
   1be70:	7812      	ldrb	r2, [r2, #0]
   1be72:	2a06      	cmp	r2, #6
   1be74:	d00e      	beq.n	1be94 <gatt_read_group_rsp+0x40>
   1be76:	2a14      	cmp	r2, #20
   1be78:	d00b      	beq.n	1be92 <gatt_read_group_rsp+0x3e>
		LOG_ERR("Invalid data len %u", rsp->len);
   1be7a:	4836      	ldr	r0, [pc, #216]	; (1bf54 <gatt_read_group_rsp+0x100>)
   1be7c:	2145      	movs	r1, #69	; 0x45
   1be7e:	f00e fe73 	bl	2ab68 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1be82:	686b      	ldr	r3, [r5, #4]
   1be84:	462a      	mov	r2, r5
   1be86:	2100      	movs	r1, #0
   1be88:	4648      	mov	r0, r9
   1be8a:	4798      	blx	r3
}
   1be8c:	b00f      	add	sp, #60	; 0x3c
   1be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   1be92:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1be94:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1be96:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1be9a:	b29c      	uxth	r4, r3
   1be9c:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   1bea0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bea2:	783b      	ldrb	r3, [r7, #0]
   1bea4:	42a3      	cmp	r3, r4
   1bea6:	d90b      	bls.n	1bec0 <gatt_read_group_rsp+0x6c>
	if (length == 0U && end_handle) {
   1bea8:	2c00      	cmp	r4, #0
   1beaa:	d1ea      	bne.n	1be82 <gatt_read_group_rsp+0x2e>
   1beac:	2e00      	cmp	r6, #0
   1beae:	d0e8      	beq.n	1be82 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   1beb0:	462a      	mov	r2, r5
   1beb2:	4631      	mov	r1, r6
   1beb4:	4648      	mov	r0, r9
}
   1beb6:	b00f      	add	sp, #60	; 0x3c
   1beb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1bebc:	f011 bb41 	b.w	2d542 <gatt_discover_next>
		struct bt_gatt_attr attr = {};
   1bec0:	2214      	movs	r2, #20
   1bec2:	2100      	movs	r1, #0
   1bec4:	a809      	add	r0, sp, #36	; 0x24
   1bec6:	f00f fe22 	bl	2bb0e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1beca:	f8b8 a000 	ldrh.w	sl, [r8]
   1bece:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   1bed2:	2b00      	cmp	r3, #0
   1bed4:	d0d5      	beq.n	1be82 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1bed6:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   1beda:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1bede:	2e00      	cmp	r6, #0
   1bee0:	d0cf      	beq.n	1be82 <gatt_read_group_rsp+0x2e>
   1bee2:	42b3      	cmp	r3, r6
   1bee4:	d8cd      	bhi.n	1be82 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   1bee6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1beea:	b323      	cbz	r3, 1bf36 <gatt_read_group_rsp+0xe2>
   1beec:	2b02      	cmp	r3, #2
   1beee:	d02a      	beq.n	1bf46 <gatt_read_group_rsp+0xf2>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1bef0:	f04f 0300 	mov.w	r3, #0
   1bef4:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1bef8:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   1befa:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   1befe:	2b00      	cmp	r3, #0
   1bf00:	f642 0301 	movw	r3, #10241	; 0x2801
   1bf04:	bf08      	it	eq
   1bf06:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1bf0a:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1bf0e:	ab04      	add	r3, sp, #16
   1bf10:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1bf12:	ab01      	add	r3, sp, #4
   1bf14:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1bf16:	ab02      	add	r3, sp, #8
   1bf18:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   1bf1a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1bf1e:	686b      	ldr	r3, [r5, #4]
   1bf20:	462a      	mov	r2, r5
   1bf22:	a909      	add	r1, sp, #36	; 0x24
   1bf24:	4648      	mov	r0, r9
   1bf26:	4798      	blx	r3
   1bf28:	2800      	cmp	r0, #0
   1bf2a:	d0af      	beq.n	1be8c <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bf2c:	783b      	ldrb	r3, [r7, #0]
   1bf2e:	1ae4      	subs	r4, r4, r3
   1bf30:	b2a4      	uxth	r4, r4
   1bf32:	4498      	add	r8, r3
   1bf34:	e7b5      	b.n	1bea2 <gatt_read_group_rsp+0x4e>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1bf36:	2202      	movs	r2, #2
   1bf38:	f108 0104 	add.w	r1, r8, #4
   1bf3c:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1bf40:	f00f fdda 	bl	2baf8 <memcpy>
			break;
   1bf44:	e7d4      	b.n	1bef0 <gatt_read_group_rsp+0x9c>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1bf46:	2210      	movs	r2, #16
   1bf48:	f108 0104 	add.w	r1, r8, #4
   1bf4c:	f10d 0011 	add.w	r0, sp, #17
   1bf50:	e7f6      	b.n	1bf40 <gatt_read_group_rsp+0xec>
   1bf52:	bf00      	nop
   1bf54:	00032c86 	.word	0x00032c86

0001bf58 <gatt_read_type_rsp>:
{
   1bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf5c:	b093      	sub	sp, #76	; 0x4c
   1bf5e:	4680      	mov	r8, r0
   1bf60:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1bf62:	4617      	mov	r7, r2
	if (err) {
   1bf64:	b131      	cbz	r1, 1bf74 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1bf66:	686b      	ldr	r3, [r5, #4]
   1bf68:	462a      	mov	r2, r5
   1bf6a:	2100      	movs	r1, #0
}
   1bf6c:	b013      	add	sp, #76	; 0x4c
   1bf6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   1bf72:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1bf74:	7c28      	ldrb	r0, [r5, #16]
   1bf76:	2802      	cmp	r0, #2
   1bf78:	d17c      	bne.n	1c074 <gatt_read_type_rsp+0x11c>
	switch (rsp->len) {
   1bf7a:	7812      	ldrb	r2, [r2, #0]
   1bf7c:	2a06      	cmp	r2, #6
   1bf7e:	d00b      	beq.n	1bf98 <gatt_read_type_rsp+0x40>
   1bf80:	2a08      	cmp	r2, #8
   1bf82:	d00a      	beq.n	1bf9a <gatt_read_type_rsp+0x42>
		LOG_ERR("Invalid data len %u", rsp->len);
   1bf84:	489f      	ldr	r0, [pc, #636]	; (1c204 <gatt_read_type_rsp+0x2ac>)
   1bf86:	2145      	movs	r1, #69	; 0x45
   1bf88:	f00e fdee 	bl	2ab68 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1bf8c:	686b      	ldr	r3, [r5, #4]
   1bf8e:	462a      	mov	r2, r5
   1bf90:	2100      	movs	r1, #0
   1bf92:	4640      	mov	r0, r8
   1bf94:	4798      	blx	r3
	if (!handle) {
   1bf96:	e051      	b.n	1c03c <gatt_read_type_rsp+0xe4>
	switch (rsp->len) {
   1bf98:	4601      	mov	r1, r0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bf9a:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1bf9c:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bfa0:	b2a4      	uxth	r4, r4
   1bfa2:	f107 0b01 	add.w	fp, r7, #1
	uint16_t handle = 0U;
   1bfa6:	2600      	movs	r6, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   1bfa8:	f642 0a02 	movw	sl, #10242	; 0x2802
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bfac:	783b      	ldrb	r3, [r7, #0]
   1bfae:	42a3      	cmp	r3, r4
   1bfb0:	d90b      	bls.n	1bfca <gatt_read_type_rsp+0x72>
	if (length == 0U && handle) {
   1bfb2:	2c00      	cmp	r4, #0
   1bfb4:	d1ea      	bne.n	1bf8c <gatt_read_type_rsp+0x34>
   1bfb6:	2e00      	cmp	r6, #0
   1bfb8:	d0e8      	beq.n	1bf8c <gatt_read_type_rsp+0x34>
	gatt_discover_next(conn, handle, params);
   1bfba:	462a      	mov	r2, r5
   1bfbc:	4631      	mov	r1, r6
   1bfbe:	4640      	mov	r0, r8
}
   1bfc0:	b013      	add	sp, #76	; 0x4c
   1bfc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1bfc6:	f011 babc 	b.w	2d542 <gatt_discover_next>
		handle = sys_le16_to_cpu(data->handle);
   1bfca:	f8bb 9000 	ldrh.w	r9, [fp]
   1bfce:	fa1f f689 	uxth.w	r6, r9
		if (!handle) {
   1bfd2:	2e00      	cmp	r6, #0
   1bfd4:	d0da      	beq.n	1bf8c <gatt_read_type_rsp+0x34>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1bfd6:	f8bb 0002 	ldrh.w	r0, [fp, #2]
   1bfda:	f8ad 001c 	strh.w	r0, [sp, #28]
		switch (u.uuid.type) {
   1bfde:	f89d 2020 	ldrb.w	r2, [sp, #32]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1bfe2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   1bfe6:	f8ad 101e 	strh.w	r1, [sp, #30]
		switch (u.uuid.type) {
   1bfea:	b162      	cbz	r2, 1c006 <gatt_read_type_rsp+0xae>
   1bfec:	2a02      	cmp	r2, #2
   1bfee:	d015      	beq.n	1c01c <gatt_read_type_rsp+0xc4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1bff0:	6829      	ldr	r1, [r5, #0]
   1bff2:	b331      	cbz	r1, 1c042 <gatt_read_type_rsp+0xea>
   1bff4:	a808      	add	r0, sp, #32
   1bff6:	f00f fe13 	bl	2bc20 <bt_uuid_cmp>
   1bffa:	b310      	cbz	r0, 1c042 <gatt_read_type_rsp+0xea>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bffc:	783b      	ldrb	r3, [r7, #0]
   1bffe:	1ae4      	subs	r4, r4, r3
   1c000:	b2a4      	uxth	r4, r4
   1c002:	449b      	add	fp, r3
   1c004:	e7d2      	b.n	1bfac <gatt_read_type_rsp+0x54>
			value.uuid = &u.uuid;
   1c006:	aa08      	add	r2, sp, #32
   1c008:	9206      	str	r2, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1c00a:	f89b 2006 	ldrb.w	r2, [fp, #6]
   1c00e:	f89b 1007 	ldrb.w	r1, [fp, #7]
   1c012:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c016:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1c01a:	e7e9      	b.n	1bff0 <gatt_read_type_rsp+0x98>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1c01c:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   1c01e:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1c020:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   1c022:	f8a5 9008 	strh.w	r9, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1c026:	4978      	ldr	r1, [pc, #480]	; (1c208 <gatt_read_type_rsp+0x2b0>)
   1c028:	9201      	str	r2, [sp, #4]
   1c02a:	9300      	str	r3, [sp, #0]
   1c02c:	462a      	mov	r2, r5
   1c02e:	4b77      	ldr	r3, [pc, #476]	; (1c20c <gatt_read_type_rsp+0x2b4>)
   1c030:	4640      	mov	r0, r8
   1c032:	f011 f980 	bl	2d336 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   1c036:	b286      	uxth	r6, r0
	if (!handle) {
   1c038:	2e00      	cmp	r6, #0
   1c03a:	d1be      	bne.n	1bfba <gatt_read_type_rsp+0x62>
}
   1c03c:	b013      	add	sp, #76	; 0x4c
   1c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   1c042:	f04f 0300 	mov.w	r3, #0
		attr = (struct bt_gatt_attr) {
   1c046:	2210      	movs	r2, #16
   1c048:	2100      	movs	r1, #0
   1c04a:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_INCLUDE,
   1c04c:	f88d 3014 	strb.w	r3, [sp, #20]
   1c050:	f8ad a016 	strh.w	sl, [sp, #22]
		attr = (struct bt_gatt_attr) {
   1c054:	f00f fd5b 	bl	2bb0e <memset>
   1c058:	aa05      	add	r2, sp, #20
   1c05a:	920d      	str	r2, [sp, #52]	; 0x34
   1c05c:	aa06      	add	r2, sp, #24
   1c05e:	9210      	str	r2, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c060:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1c062:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c066:	462a      	mov	r2, r5
   1c068:	a90d      	add	r1, sp, #52	; 0x34
   1c06a:	4640      	mov	r0, r8
   1c06c:	4798      	blx	r3
   1c06e:	2800      	cmp	r0, #0
   1c070:	d1c4      	bne.n	1bffc <gatt_read_type_rsp+0xa4>
   1c072:	e7e3      	b.n	1c03c <gatt_read_type_rsp+0xe4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1c074:	2803      	cmp	r0, #3
   1c076:	d15c      	bne.n	1c132 <gatt_read_type_rsp+0x1da>
	switch (rsp->len) {
   1c078:	7812      	ldrb	r2, [r2, #0]
   1c07a:	2a07      	cmp	r2, #7
   1c07c:	d002      	beq.n	1c084 <gatt_read_type_rsp+0x12c>
   1c07e:	2a15      	cmp	r2, #21
   1c080:	d180      	bne.n	1bf84 <gatt_read_type_rsp+0x2c>
   1c082:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c084:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1c086:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c08a:	b2a4      	uxth	r4, r4
   1c08c:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   1c090:	2600      	movs	r6, #0
   1c092:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c096:	783b      	ldrb	r3, [r7, #0]
   1c098:	42a3      	cmp	r3, r4
   1c09a:	d88a      	bhi.n	1bfb2 <gatt_read_type_rsp+0x5a>
		handle = sys_le16_to_cpu(data->handle);
   1c09c:	f8b9 b000 	ldrh.w	fp, [r9]
   1c0a0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1c0a4:	2e00      	cmp	r6, #0
   1c0a6:	f43f af71 	beq.w	1bf8c <gatt_read_type_rsp+0x34>
		switch (u.uuid.type) {
   1c0aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c0ae:	b163      	cbz	r3, 1c0ca <gatt_read_type_rsp+0x172>
   1c0b0:	2b02      	cmp	r3, #2
   1c0b2:	d013      	beq.n	1c0dc <gatt_read_type_rsp+0x184>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c0b4:	6829      	ldr	r1, [r5, #0]
   1c0b6:	b1c9      	cbz	r1, 1c0ec <gatt_read_type_rsp+0x194>
   1c0b8:	4650      	mov	r0, sl
   1c0ba:	f00f fdb1 	bl	2bc20 <bt_uuid_cmp>
   1c0be:	b1a8      	cbz	r0, 1c0ec <gatt_read_type_rsp+0x194>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c0c0:	783b      	ldrb	r3, [r7, #0]
   1c0c2:	1ae4      	subs	r4, r4, r3
   1c0c4:	b2a4      	uxth	r4, r4
   1c0c6:	4499      	add	r9, r3
   1c0c8:	e7e5      	b.n	1c096 <gatt_read_type_rsp+0x13e>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1c0ca:	f899 3005 	ldrb.w	r3, [r9, #5]
   1c0ce:	f899 2006 	ldrb.w	r2, [r9, #6]
   1c0d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c0d6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   1c0da:	e7eb      	b.n	1c0b4 <gatt_read_type_rsp+0x15c>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1c0dc:	2210      	movs	r2, #16
   1c0de:	f109 0105 	add.w	r1, r9, #5
   1c0e2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   1c0e6:	f00f fd07 	bl	2baf8 <memcpy>
			break;
   1c0ea:	e7e3      	b.n	1c0b4 <gatt_read_type_rsp+0x15c>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c0ec:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1c0f0:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c0f4:	f8ad 201c 	strh.w	r2, [sp, #28]
			.uuid = BT_UUID_GATT_CHRC,
   1c0f8:	2100      	movs	r1, #0
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c0fa:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr) {
   1c0fe:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   1c100:	f642 0303 	movw	r3, #10243	; 0x2803
		attr = (struct bt_gatt_attr) {
   1c104:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_CHRC,
   1c106:	f88d 1014 	strb.w	r1, [sp, #20]
   1c10a:	f8ad 3016 	strh.w	r3, [sp, #22]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c10e:	f8cd a018 	str.w	sl, [sp, #24]
		attr = (struct bt_gatt_attr) {
   1c112:	f00f fcfc 	bl	2bb0e <memset>
   1c116:	ab05      	add	r3, sp, #20
   1c118:	930d      	str	r3, [sp, #52]	; 0x34
   1c11a:	ab06      	add	r3, sp, #24
   1c11c:	9310      	str	r3, [sp, #64]	; 0x40
   1c11e:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c122:	686b      	ldr	r3, [r5, #4]
   1c124:	462a      	mov	r2, r5
   1c126:	a90d      	add	r1, sp, #52	; 0x34
   1c128:	4640      	mov	r0, r8
   1c12a:	4798      	blx	r3
   1c12c:	2800      	cmp	r0, #0
   1c12e:	d1c7      	bne.n	1c0c0 <gatt_read_type_rsp+0x168>
   1c130:	e784      	b.n	1c03c <gatt_read_type_rsp+0xe4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1c132:	682a      	ldr	r2, [r5, #0]
   1c134:	7816      	ldrb	r6, [r2, #0]
   1c136:	b976      	cbnz	r6, 1c156 <gatt_read_type_rsp+0x1fe>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1c138:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c13c:	1e5c      	subs	r4, r3, #1
   1c13e:	b2a4      	uxth	r4, r4
   1c140:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   1c144:	f5aa 5a24 	sub.w	sl, sl, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c148:	783b      	ldrb	r3, [r7, #0]
   1c14a:	42a3      	cmp	r3, r4
   1c14c:	d908      	bls.n	1c160 <gatt_read_type_rsp+0x208>
	if (length == 0U && handle) {
   1c14e:	b914      	cbnz	r4, 1c156 <gatt_read_type_rsp+0x1fe>
   1c150:	2e00      	cmp	r6, #0
   1c152:	f47f af32 	bne.w	1bfba <gatt_read_type_rsp+0x62>
	params->func(conn, NULL, params);
   1c156:	686b      	ldr	r3, [r5, #4]
   1c158:	462a      	mov	r2, r5
   1c15a:	2100      	movs	r1, #0
   1c15c:	4640      	mov	r0, r8
   1c15e:	e705      	b.n	1bf6c <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   1c160:	f8b9 b000 	ldrh.w	fp, [r9]
   1c164:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1c168:	2e00      	cmp	r6, #0
   1c16a:	d0f4      	beq.n	1c156 <gatt_read_type_rsp+0x1fe>
		switch (uuid_val) {
   1c16c:	f1ba 0f04 	cmp.w	sl, #4
   1c170:	d8f1      	bhi.n	1c156 <gatt_read_type_rsp+0x1fe>
   1c172:	a301      	add	r3, pc, #4	; (adr r3, 1c178 <gatt_read_type_rsp+0x220>)
   1c174:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   1c178:	0001c18d 	.word	0x0001c18d
   1c17c:	0001c157 	.word	0x0001c157
   1c180:	0001c18d 	.word	0x0001c18d
   1c184:	0001c18d 	.word	0x0001c18d
   1c188:	0001c1c9 	.word	0x0001c1c9
			value.scc.flags = sys_get_le16(data->value);
   1c18c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c190:	f8ad 3020 	strh.w	r3, [sp, #32]
			.uuid = params->uuid,
   1c194:	682b      	ldr	r3, [r5, #0]
   1c196:	9303      	str	r3, [sp, #12]
		attr = (struct bt_gatt_attr) {
   1c198:	2210      	movs	r2, #16
   1c19a:	2100      	movs	r1, #0
   1c19c:	a80e      	add	r0, sp, #56	; 0x38
   1c19e:	f00f fcb6 	bl	2bb0e <memset>
   1c1a2:	9b03      	ldr	r3, [sp, #12]
   1c1a4:	930d      	str	r3, [sp, #52]	; 0x34
   1c1a6:	ab08      	add	r3, sp, #32
   1c1a8:	9310      	str	r3, [sp, #64]	; 0x40
   1c1aa:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c1ae:	686b      	ldr	r3, [r5, #4]
   1c1b0:	462a      	mov	r2, r5
   1c1b2:	a90d      	add	r1, sp, #52	; 0x34
   1c1b4:	4640      	mov	r0, r8
   1c1b6:	4798      	blx	r3
   1c1b8:	2800      	cmp	r0, #0
   1c1ba:	f43f af3f 	beq.w	1c03c <gatt_read_type_rsp+0xe4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c1be:	783b      	ldrb	r3, [r7, #0]
   1c1c0:	1ae4      	subs	r4, r4, r3
   1c1c2:	b2a4      	uxth	r4, r4
   1c1c4:	4499      	add	r9, r3
   1c1c6:	e7bf      	b.n	1c148 <gatt_read_type_rsp+0x1f0>
			value.cpf.format = cpf->format;
   1c1c8:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c1cc:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1c1d0:	f899 3003 	ldrb.w	r3, [r9, #3]
   1c1d4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1c1d8:	f899 2005 	ldrb.w	r2, [r9, #5]
   1c1dc:	f899 3004 	ldrb.w	r3, [r9, #4]
   1c1e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c1e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1c1e8:	f899 3006 	ldrb.w	r3, [r9, #6]
   1c1ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1c1f0:	f899 3007 	ldrb.w	r3, [r9, #7]
   1c1f4:	f899 2008 	ldrb.w	r2, [r9, #8]
   1c1f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c1fc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1c200:	e7c8      	b.n	1c194 <gatt_read_type_rsp+0x23c>
   1c202:	bf00      	nop
   1c204:	00032c86 	.word	0x00032c86
   1c208:	0001c211 	.word	0x0001c211
   1c20c:	0002ce9b 	.word	0x0002ce9b

0001c210 <read_included_uuid_cb>:
{
   1c210:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c212:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   1c214:	2b10      	cmp	r3, #16
{
   1c216:	4611      	mov	r1, r2
   1c218:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c21a:	4605      	mov	r5, r0
   1c21c:	461a      	mov	r2, r3
	if (length != 16U) {
   1c21e:	d00b      	beq.n	1c238 <read_included_uuid_cb+0x28>
		LOG_ERR("Invalid data len %u", length);
   1c220:	4820      	ldr	r0, [pc, #128]	; (1c2a4 <read_included_uuid_cb+0x94>)
   1c222:	2145      	movs	r1, #69	; 0x45
   1c224:	f00e fca0 	bl	2ab68 <z_log_minimal_printk>
		params->func(conn, NULL, params);
   1c228:	6863      	ldr	r3, [r4, #4]
   1c22a:	4622      	mov	r2, r4
   1c22c:	2100      	movs	r1, #0
   1c22e:	4628      	mov	r0, r5
}
   1c230:	b00f      	add	sp, #60	; 0x3c
   1c232:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, NULL, params);
   1c236:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   1c238:	8963      	ldrh	r3, [r4, #10]
   1c23a:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1c23e:	89a3      	ldrh	r3, [r4, #12]
   1c240:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   1c244:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1c246:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   1c248:	f10d 0011 	add.w	r0, sp, #17
	handle = params->_included.attr_handle;
   1c24c:	8927      	ldrh	r7, [r4, #8]
	value.uuid = &u.uuid;
   1c24e:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1c250:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   1c254:	f00f fc50 	bl	2baf8 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c258:	6821      	ldr	r1, [r4, #0]
   1c25a:	b9c1      	cbnz	r1, 1c28e <read_included_uuid_cb+0x7e>
		.uuid = BT_UUID_GATT_INCLUDE,
   1c25c:	2100      	movs	r1, #0
   1c25e:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   1c262:	2210      	movs	r2, #16
   1c264:	a80a      	add	r0, sp, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1c266:	f88d 1004 	strb.w	r1, [sp, #4]
   1c26a:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (struct bt_gatt_attr) {
   1c26e:	f00f fc4e 	bl	2bb0e <memset>
   1c272:	ab01      	add	r3, sp, #4
   1c274:	9309      	str	r3, [sp, #36]	; 0x24
   1c276:	ab02      	add	r3, sp, #8
   1c278:	930c      	str	r3, [sp, #48]	; 0x30
   1c27a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c27e:	6863      	ldr	r3, [r4, #4]
   1c280:	4622      	mov	r2, r4
   1c282:	a909      	add	r1, sp, #36	; 0x24
   1c284:	4628      	mov	r0, r5
   1c286:	4798      	blx	r3
   1c288:	b930      	cbnz	r0, 1c298 <read_included_uuid_cb+0x88>
}
   1c28a:	b00f      	add	sp, #60	; 0x3c
   1c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c28e:	4630      	mov	r0, r6
   1c290:	f00f fcc6 	bl	2bc20 <bt_uuid_cmp>
   1c294:	2800      	cmp	r0, #0
   1c296:	d0e1      	beq.n	1c25c <read_included_uuid_cb+0x4c>
	gatt_discover_next(conn, params->start_handle, params);
   1c298:	8921      	ldrh	r1, [r4, #8]
   1c29a:	4622      	mov	r2, r4
   1c29c:	4628      	mov	r0, r5
   1c29e:	f011 f950 	bl	2d542 <gatt_discover_next>
	return;
   1c2a2:	e7f2      	b.n	1c28a <read_included_uuid_cb+0x7a>
   1c2a4:	00032c86 	.word	0x00032c86

0001c2a8 <gatt_find_info_rsp>:
{
   1c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2ac:	b08f      	sub	sp, #60	; 0x3c
   1c2ae:	4680      	mov	r8, r0
   1c2b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1c2b2:	4615      	mov	r5, r2
	if (err) {
   1c2b4:	b941      	cbnz	r1, 1c2c8 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   1c2b6:	7812      	ldrb	r2, [r2, #0]
   1c2b8:	2a01      	cmp	r2, #1
   1c2ba:	d00b      	beq.n	1c2d4 <gatt_find_info_rsp+0x2c>
   1c2bc:	2a02      	cmp	r2, #2
   1c2be:	d021      	beq.n	1c304 <gatt_find_info_rsp+0x5c>
		LOG_ERR("Invalid format %u", rsp->format);
   1c2c0:	4849      	ldr	r0, [pc, #292]	; (1c3e8 <gatt_find_info_rsp+0x140>)
   1c2c2:	2145      	movs	r1, #69	; 0x45
   1c2c4:	f00e fc50 	bl	2ab68 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1c2c8:	6873      	ldr	r3, [r6, #4]
   1c2ca:	4632      	mov	r2, r6
   1c2cc:	2100      	movs	r1, #0
   1c2ce:	4640      	mov	r0, r8
   1c2d0:	4798      	blx	r3
   1c2d2:	e086      	b.n	1c3e2 <gatt_find_info_rsp+0x13a>
	switch (rsp->format) {
   1c2d4:	f04f 0a04 	mov.w	sl, #4
	length--;
   1c2d8:	1e5c      	subs	r4, r3, #1
   1c2da:	b2a4      	uxth	r4, r4
	if (length < len) {
   1c2dc:	4554      	cmp	r4, sl
		u.uuid.type = BT_UUID_TYPE_16;
   1c2de:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   1c2e2:	d3f1      	bcc.n	1c2c8 <gatt_find_info_rsp+0x20>
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2e4:	fbb4 f4fa 	udiv	r4, r4, sl
	bool skip = false;
   1c2e8:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2ec:	3501      	adds	r5, #1
	uint16_t handle = 0U;
   1c2ee:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   1c2f2:	46cb      	mov	fp, r9
   1c2f4:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2f6:	b94c      	cbnz	r4, 1c30c <gatt_find_info_rsp+0x64>
	gatt_discover_next(conn, handle, params);
   1c2f8:	9900      	ldr	r1, [sp, #0]
   1c2fa:	4632      	mov	r2, r6
   1c2fc:	4640      	mov	r0, r8
   1c2fe:	f011 f920 	bl	2d542 <gatt_discover_next>
	return;
   1c302:	e06e      	b.n	1c3e2 <gatt_find_info_rsp+0x13a>
	switch (rsp->format) {
   1c304:	4611      	mov	r1, r2
		len = sizeof(*info.i128);
   1c306:	f04f 0a12 	mov.w	sl, #18
   1c30a:	e7e5      	b.n	1c2d8 <gatt_find_info_rsp+0x30>
		handle = sys_le16_to_cpu(info.i16->handle);
   1c30c:	882b      	ldrh	r3, [r5, #0]
   1c30e:	9301      	str	r3, [sp, #4]
   1c310:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c314:	9300      	str	r3, [sp, #0]
		if (skip) {
   1c316:	f1b9 0f00 	cmp.w	r9, #0
   1c31a:	d14c      	bne.n	1c3b6 <gatt_find_info_rsp+0x10e>
		switch (u.uuid.type) {
   1c31c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1c320:	b3b3      	cbz	r3, 1c390 <gatt_find_info_rsp+0xe8>
   1c322:	2b02      	cmp	r3, #2
   1c324:	d03b      	beq.n	1c39e <gatt_find_info_rsp+0xf6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c326:	6831      	ldr	r1, [r6, #0]
   1c328:	2900      	cmp	r1, #0
   1c32a:	d13f      	bne.n	1c3ac <gatt_find_info_rsp+0x104>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1c32c:	7c33      	ldrb	r3, [r6, #16]
   1c32e:	2b04      	cmp	r3, #4
   1c330:	d146      	bne.n	1c3c0 <gatt_find_info_rsp+0x118>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1c332:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c336:	a902      	add	r1, sp, #8
   1c338:	4638      	mov	r0, r7
   1c33a:	f88d b008 	strb.w	fp, [sp, #8]
   1c33e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c342:	f00f fc6d 	bl	2bc20 <bt_uuid_cmp>
   1c346:	b3b0      	cbz	r0, 1c3b6 <gatt_find_info_rsp+0x10e>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1c348:	f642 0301 	movw	r3, #10241	; 0x2801
   1c34c:	a903      	add	r1, sp, #12
   1c34e:	4638      	mov	r0, r7
   1c350:	f88d b00c 	strb.w	fp, [sp, #12]
   1c354:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c358:	f00f fc62 	bl	2bc20 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1c35c:	b358      	cbz	r0, 1c3b6 <gatt_find_info_rsp+0x10e>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1c35e:	f642 0302 	movw	r3, #10242	; 0x2802
   1c362:	a909      	add	r1, sp, #36	; 0x24
   1c364:	4638      	mov	r0, r7
   1c366:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   1c36a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1c36e:	f00f fc57 	bl	2bc20 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1c372:	b300      	cbz	r0, 1c3b6 <gatt_find_info_rsp+0x10e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1c374:	f642 0303 	movw	r3, #10243	; 0x2803
   1c378:	a909      	add	r1, sp, #36	; 0x24
   1c37a:	4638      	mov	r0, r7
   1c37c:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   1c380:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1c384:	f00f fc4c 	bl	2bc20 <bt_uuid_cmp>
   1c388:	b9d0      	cbnz	r0, 1c3c0 <gatt_find_info_rsp+0x118>
				skip = true;
   1c38a:	f04f 0901 	mov.w	r9, #1
   1c38e:	e014      	b.n	1c3ba <gatt_find_info_rsp+0x112>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1c390:	78ab      	ldrb	r3, [r5, #2]
   1c392:	78ea      	ldrb	r2, [r5, #3]
   1c394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c398:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1c39c:	e7c3      	b.n	1c326 <gatt_find_info_rsp+0x7e>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1c39e:	2210      	movs	r2, #16
   1c3a0:	1ca9      	adds	r1, r5, #2
   1c3a2:	f10d 0011 	add.w	r0, sp, #17
   1c3a6:	f00f fba7 	bl	2baf8 <memcpy>
			break;
   1c3aa:	e7bc      	b.n	1c326 <gatt_find_info_rsp+0x7e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c3ac:	4638      	mov	r0, r7
   1c3ae:	f00f fc37 	bl	2bc20 <bt_uuid_cmp>
   1c3b2:	2800      	cmp	r0, #0
   1c3b4:	d0ba      	beq.n	1c32c <gatt_find_info_rsp+0x84>
			skip = false;
   1c3b6:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   1c3ba:	3c01      	subs	r4, #1
   1c3bc:	4455      	add	r5, sl
   1c3be:	e79a      	b.n	1c2f6 <gatt_find_info_rsp+0x4e>
		attr = (struct bt_gatt_attr) {
   1c3c0:	2210      	movs	r2, #16
   1c3c2:	2100      	movs	r1, #0
   1c3c4:	a80a      	add	r0, sp, #40	; 0x28
   1c3c6:	f00f fba2 	bl	2bb0e <memset>
   1c3ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c3ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1c3d2:	9709      	str	r7, [sp, #36]	; 0x24
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c3d4:	6873      	ldr	r3, [r6, #4]
   1c3d6:	4632      	mov	r2, r6
   1c3d8:	a909      	add	r1, sp, #36	; 0x24
   1c3da:	4640      	mov	r0, r8
   1c3dc:	4798      	blx	r3
   1c3de:	2800      	cmp	r0, #0
   1c3e0:	d1eb      	bne.n	1c3ba <gatt_find_info_rsp+0x112>
}
   1c3e2:	b00f      	add	sp, #60	; 0x3c
   1c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3e8:	00032c9f 	.word	0x00032c9f

0001c3ec <bt_gatt_read>:
{
   1c3ec:	b507      	push	{r0, r1, r2, lr}
   1c3ee:	460a      	mov	r2, r1
	__ASSERT(conn, "invalid parameters\n");
   1c3f0:	b950      	cbnz	r0, 1c408 <bt_gatt_read+0x1c>
   1c3f2:	4925      	ldr	r1, [pc, #148]	; (1c488 <bt_gatt_read+0x9c>)
   1c3f4:	4825      	ldr	r0, [pc, #148]	; (1c48c <bt_gatt_read+0xa0>)
   1c3f6:	f241 2211 	movw	r2, #4625	; 0x1211
   1c3fa:	f00e fba7 	bl	2ab4c <assert_print>
   1c3fe:	f241 2111 	movw	r1, #4625	; 0x1211
	__ASSERT(params && params->func, "invalid parameters\n");
   1c402:	4821      	ldr	r0, [pc, #132]	; (1c488 <bt_gatt_read+0x9c>)
   1c404:	f00e fb9b 	bl	2ab3e <assert_post_action>
   1c408:	b109      	cbz	r1, 1c40e <bt_gatt_read+0x22>
   1c40a:	6809      	ldr	r1, [r1, #0]
   1c40c:	b941      	cbnz	r1, 1c420 <bt_gatt_read+0x34>
   1c40e:	491e      	ldr	r1, [pc, #120]	; (1c488 <bt_gatt_read+0x9c>)
   1c410:	481e      	ldr	r0, [pc, #120]	; (1c48c <bt_gatt_read+0xa0>)
   1c412:	f241 2212 	movw	r2, #4626	; 0x1212
   1c416:	f00e fb99 	bl	2ab4c <assert_print>
   1c41a:	f241 2112 	movw	r1, #4626	; 0x1212
   1c41e:	e7f0      	b.n	1c402 <bt_gatt_read+0x16>
	if (conn->state != BT_CONN_CONNECTED) {
   1c420:	7b43      	ldrb	r3, [r0, #13]
   1c422:	2b07      	cmp	r3, #7
   1c424:	d12c      	bne.n	1c480 <bt_gatt_read+0x94>
	if (params->handle_count == 0) {
   1c426:	6853      	ldr	r3, [r2, #4]
   1c428:	b93b      	cbnz	r3, 1c43a <bt_gatt_read+0x4e>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1c42a:	2308      	movs	r3, #8
   1c42c:	f04f 0e04 	mov.w	lr, #4
   1c430:	e9cd 3e00 	strd	r3, lr, [sp]
   1c434:	4b16      	ldr	r3, [pc, #88]	; (1c490 <bt_gatt_read+0xa4>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c436:	4917      	ldr	r1, [pc, #92]	; (1c494 <bt_gatt_read+0xa8>)
   1c438:	e009      	b.n	1c44e <bt_gatt_read+0x62>
	if (params->handle_count > 1) {
   1c43a:	2b01      	cmp	r3, #1
   1c43c:	d011      	beq.n	1c462 <bt_gatt_read+0x76>
		if (params->multiple.variable) {
   1c43e:	7b11      	ldrb	r1, [r2, #12]
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1c440:	005b      	lsls	r3, r3, #1
   1c442:	9301      	str	r3, [sp, #4]
		if (params->multiple.variable) {
   1c444:	b141      	cbz	r1, 1c458 <bt_gatt_read+0x6c>
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1c446:	2320      	movs	r3, #32
   1c448:	9300      	str	r3, [sp, #0]
   1c44a:	4913      	ldr	r1, [pc, #76]	; (1c498 <bt_gatt_read+0xac>)
   1c44c:	4b13      	ldr	r3, [pc, #76]	; (1c49c <bt_gatt_read+0xb0>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c44e:	f010 ff72 	bl	2d336 <gatt_req_send.constprop.0>
}
   1c452:	b003      	add	sp, #12
   1c454:	f85d fb04 	ldr.w	pc, [sp], #4
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   1c458:	230e      	movs	r3, #14
   1c45a:	9300      	str	r3, [sp, #0]
   1c45c:	4910      	ldr	r1, [pc, #64]	; (1c4a0 <bt_gatt_read+0xb4>)
   1c45e:	4b11      	ldr	r3, [pc, #68]	; (1c4a4 <bt_gatt_read+0xb8>)
   1c460:	e7f5      	b.n	1c44e <bt_gatt_read+0x62>
	if (params->single.offset) {
   1c462:	8953      	ldrh	r3, [r2, #10]
   1c464:	b133      	cbz	r3, 1c474 <bt_gatt_read+0x88>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1c466:	230c      	movs	r3, #12
   1c468:	f04f 0c04 	mov.w	ip, #4
   1c46c:	e9cd 3c00 	strd	r3, ip, [sp]
   1c470:	4b0d      	ldr	r3, [pc, #52]	; (1c4a8 <bt_gatt_read+0xbc>)
   1c472:	e7e0      	b.n	1c436 <bt_gatt_read+0x4a>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c474:	230a      	movs	r3, #10
   1c476:	2102      	movs	r1, #2
   1c478:	e9cd 3100 	strd	r3, r1, [sp]
   1c47c:	4b0b      	ldr	r3, [pc, #44]	; (1c4ac <bt_gatt_read+0xc0>)
   1c47e:	e7da      	b.n	1c436 <bt_gatt_read+0x4a>
		return -ENOTCONN;
   1c480:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c484:	e7e5      	b.n	1c452 <bt_gatt_read+0x66>
   1c486:	bf00      	nop
   1c488:	000329fb 	.word	0x000329fb
   1c48c:	0003013d 	.word	0x0003013d
   1c490:	0002d161 	.word	0x0002d161
   1c494:	0001c4b1 	.word	0x0001c4b1
   1c498:	0002d0a1 	.word	0x0002d0a1
   1c49c:	0002cfab 	.word	0x0002cfab
   1c4a0:	0002d02b 	.word	0x0002d02b
   1c4a4:	0002cf83 	.word	0x0002cf83
   1c4a8:	0002cedb 	.word	0x0002cedb
   1c4ac:	0002cec7 	.word	0x0002cec7

0001c4b0 <gatt_read_rsp>:
{
   1c4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c4b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c4b6:	4606      	mov	r6, r0
   1c4b8:	4690      	mov	r8, r2
   1c4ba:	461d      	mov	r5, r3
	if (err || !length) {
   1c4bc:	460f      	mov	r7, r1
   1c4be:	b901      	cbnz	r1, 1c4c2 <gatt_read_rsp+0x12>
   1c4c0:	b953      	cbnz	r3, 1c4d8 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   1c4c2:	2300      	movs	r3, #0
   1c4c4:	930a      	str	r3, [sp, #40]	; 0x28
   1c4c6:	6825      	ldr	r5, [r4, #0]
   1c4c8:	4622      	mov	r2, r4
   1c4ca:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c4cc:	4630      	mov	r0, r6
   1c4ce:	46ac      	mov	ip, r5
}
   1c4d0:	b003      	add	sp, #12
   1c4d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c4d6:	4760      	bx	ip
	if (!params->handle_count) {
   1c4d8:	6863      	ldr	r3, [r4, #4]
   1c4da:	2b00      	cmp	r3, #0
   1c4dc:	d143      	bne.n	1c566 <gatt_read_rsp+0xb6>
	for (length--, pdu = rsp->data; length;
   1c4de:	3d01      	subs	r5, #1
   1c4e0:	b2ad      	uxth	r5, r5
   1c4e2:	f102 0901 	add.w	r9, r2, #1
   1c4e6:	b305      	cbz	r5, 1c52a <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   1c4e8:	f8b9 3000 	ldrh.w	r3, [r9]
   1c4ec:	b29a      	uxth	r2, r3
		if (!handle) {
   1c4ee:	b932      	cbnz	r2, 1c4fe <gatt_read_rsp+0x4e>
			LOG_ERR("Invalid handle");
   1c4f0:	482d      	ldr	r0, [pc, #180]	; (1c5a8 <gatt_read_rsp+0xf8>)
   1c4f2:	2145      	movs	r1, #69	; 0x45
}
   1c4f4:	b003      	add	sp, #12
   1c4f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			LOG_ERR("Invalid handle");
   1c4fa:	f00e bb35 	b.w	2ab68 <z_log_minimal_printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1c4fe:	f898 1000 	ldrb.w	r1, [r8]
		params->by_uuid.start_handle = handle;
   1c502:	8123      	strh	r3, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1c504:	42a9      	cmp	r1, r5
   1c506:	bf8c      	ite	hi
   1c508:	1ea9      	subhi	r1, r5, #2
   1c50a:	3902      	subls	r1, #2
   1c50c:	b289      	uxth	r1, r1
		if (params->func(conn, 0, params, data->value, len) ==
   1c50e:	9100      	str	r1, [sp, #0]
   1c510:	6827      	ldr	r7, [r4, #0]
   1c512:	f109 0302 	add.w	r3, r9, #2
   1c516:	4622      	mov	r2, r4
   1c518:	2100      	movs	r1, #0
   1c51a:	4630      	mov	r0, r6
   1c51c:	47b8      	blx	r7
   1c51e:	2800      	cmp	r0, #0
   1c520:	d03f      	beq.n	1c5a2 <gatt_read_rsp+0xf2>
		if (rsp->len > length) {
   1c522:	f898 3000 	ldrb.w	r3, [r8]
   1c526:	42ab      	cmp	r3, r5
   1c528:	d90b      	bls.n	1c542 <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   1c52a:	4621      	mov	r1, r4
   1c52c:	4630      	mov	r0, r6
   1c52e:	f7ff ff5d 	bl	1c3ec <bt_gatt_read>
   1c532:	2800      	cmp	r0, #0
   1c534:	da35      	bge.n	1c5a2 <gatt_read_rsp+0xf2>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c536:	2300      	movs	r3, #0
   1c538:	930a      	str	r3, [sp, #40]	; 0x28
   1c53a:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c53c:	4622      	mov	r2, r4
   1c53e:	210e      	movs	r1, #14
   1c540:	e7c4      	b.n	1c4cc <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1c542:	8923      	ldrh	r3, [r4, #8]
   1c544:	8962      	ldrh	r2, [r4, #10]
   1c546:	429a      	cmp	r2, r3
   1c548:	d105      	bne.n	1c556 <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   1c54a:	2300      	movs	r3, #0
   1c54c:	930a      	str	r3, [sp, #40]	; 0x28
   1c54e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1c550:	4622      	mov	r2, r4
   1c552:	4619      	mov	r1, r3
   1c554:	e7ba      	b.n	1c4cc <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1c556:	3301      	adds	r3, #1
   1c558:	8123      	strh	r3, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c55a:	f898 3000 	ldrb.w	r3, [r8]
   1c55e:	1aed      	subs	r5, r5, r3
   1c560:	b2ad      	uxth	r5, r5
   1c562:	4499      	add	r9, r3
   1c564:	e7bf      	b.n	1c4e6 <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1c566:	9500      	str	r5, [sp, #0]
   1c568:	4613      	mov	r3, r2
   1c56a:	f8d4 c000 	ldr.w	ip, [r4]
   1c56e:	4622      	mov	r2, r4
   1c570:	47e0      	blx	ip
   1c572:	b1b0      	cbz	r0, 1c5a2 <gatt_read_rsp+0xf2>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1c574:	4630      	mov	r0, r6
   1c576:	f010 fb00 	bl	2cb7a <bt_att_get_mtu>
   1c57a:	3801      	subs	r0, #1
   1c57c:	4285      	cmp	r5, r0
   1c57e:	da03      	bge.n	1c588 <gatt_read_rsp+0xd8>
		params->func(conn, 0, params, NULL, 0);
   1c580:	970a      	str	r7, [sp, #40]	; 0x28
   1c582:	6825      	ldr	r5, [r4, #0]
   1c584:	463b      	mov	r3, r7
   1c586:	e7e3      	b.n	1c550 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   1c588:	8963      	ldrh	r3, [r4, #10]
   1c58a:	441d      	add	r5, r3
   1c58c:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1c58e:	4621      	mov	r1, r4
   1c590:	4630      	mov	r0, r6
   1c592:	f7ff ff2b 	bl	1c3ec <bt_gatt_read>
   1c596:	2800      	cmp	r0, #0
   1c598:	da03      	bge.n	1c5a2 <gatt_read_rsp+0xf2>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c59a:	970a      	str	r7, [sp, #40]	; 0x28
   1c59c:	6825      	ldr	r5, [r4, #0]
   1c59e:	463b      	mov	r3, r7
   1c5a0:	e7cc      	b.n	1c53c <gatt_read_rsp+0x8c>
}
   1c5a2:	b003      	add	sp, #12
   1c5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c5a8:	00032cb6 	.word	0x00032cb6

0001c5ac <bt_gatt_write>:
{
   1c5ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c5ae:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1c5b0:	4605      	mov	r5, r0
   1c5b2:	b950      	cbnz	r0, 1c5ca <bt_gatt_write+0x1e>
   1c5b4:	4926      	ldr	r1, [pc, #152]	; (1c650 <bt_gatt_write+0xa4>)
   1c5b6:	4827      	ldr	r0, [pc, #156]	; (1c654 <bt_gatt_write+0xa8>)
   1c5b8:	f241 3210 	movw	r2, #4880	; 0x1310
   1c5bc:	f00e fac6 	bl	2ab4c <assert_print>
   1c5c0:	f241 3110 	movw	r1, #4880	; 0x1310
	__ASSERT(params && params->func, "invalid parameters\n");
   1c5c4:	4822      	ldr	r0, [pc, #136]	; (1c650 <bt_gatt_write+0xa4>)
   1c5c6:	f00e faba 	bl	2ab3e <assert_post_action>
   1c5ca:	b109      	cbz	r1, 1c5d0 <bt_gatt_write+0x24>
   1c5cc:	680b      	ldr	r3, [r1, #0]
   1c5ce:	b943      	cbnz	r3, 1c5e2 <bt_gatt_write+0x36>
   1c5d0:	491f      	ldr	r1, [pc, #124]	; (1c650 <bt_gatt_write+0xa4>)
   1c5d2:	4820      	ldr	r0, [pc, #128]	; (1c654 <bt_gatt_write+0xa8>)
   1c5d4:	f241 3211 	movw	r2, #4881	; 0x1311
   1c5d8:	f00e fab8 	bl	2ab4c <assert_print>
   1c5dc:	f241 3111 	movw	r1, #4881	; 0x1311
   1c5e0:	e7f0      	b.n	1c5c4 <bt_gatt_write+0x18>
	__ASSERT(params->handle, "invalid parameters\n");
   1c5e2:	888b      	ldrh	r3, [r1, #4]
   1c5e4:	b943      	cbnz	r3, 1c5f8 <bt_gatt_write+0x4c>
   1c5e6:	491a      	ldr	r1, [pc, #104]	; (1c650 <bt_gatt_write+0xa4>)
   1c5e8:	481a      	ldr	r0, [pc, #104]	; (1c654 <bt_gatt_write+0xa8>)
   1c5ea:	f241 3212 	movw	r2, #4882	; 0x1312
   1c5ee:	f00e faad 	bl	2ab4c <assert_print>
   1c5f2:	f241 3112 	movw	r1, #4882	; 0x1312
   1c5f6:	e7e5      	b.n	1c5c4 <bt_gatt_write+0x18>
	if (conn->state != BT_CONN_CONNECTED) {
   1c5f8:	7b43      	ldrb	r3, [r0, #13]
   1c5fa:	2b07      	cmp	r3, #7
   1c5fc:	d125      	bne.n	1c64a <bt_gatt_write+0x9e>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c5fe:	88cb      	ldrh	r3, [r1, #6]
	len = sizeof(struct bt_att_write_req) + params->length;
   1c600:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c602:	b1ab      	cbz	r3, 1c630 <bt_gatt_write+0x84>
	len = bt_att_get_mtu(conn) - req_len - 1;
   1c604:	4628      	mov	r0, r5
   1c606:	f010 fab8 	bl	2cb7a <bt_att_get_mtu>
	len = MIN(params->length, len);
   1c60a:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1c60c:	4912      	ldr	r1, [pc, #72]	; (1c658 <bt_gatt_write+0xac>)
	len = bt_att_get_mtu(conn) - req_len - 1;
   1c60e:	3805      	subs	r0, #5
   1c610:	b280      	uxth	r0, r0
	len = MIN(params->length, len);
   1c612:	4283      	cmp	r3, r0
   1c614:	bf28      	it	cs
   1c616:	4603      	movcs	r3, r0
	len += req_len;
   1c618:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1c61a:	b29b      	uxth	r3, r3
   1c61c:	9301      	str	r3, [sp, #4]
   1c61e:	2316      	movs	r3, #22
   1c620:	9300      	str	r3, [sp, #0]
   1c622:	4b0e      	ldr	r3, [pc, #56]	; (1c65c <bt_gatt_write+0xb0>)
   1c624:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1c626:	4628      	mov	r0, r5
   1c628:	f010 fe85 	bl	2d336 <gatt_req_send.constprop.0>
}
   1c62c:	b002      	add	sp, #8
   1c62e:	bd70      	pop	{r4, r5, r6, pc}
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c630:	f010 faa3 	bl	2cb7a <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   1c634:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c636:	3801      	subs	r0, #1
   1c638:	42b0      	cmp	r0, r6
   1c63a:	d3e3      	bcc.n	1c604 <bt_gatt_write+0x58>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1c63c:	2312      	movs	r3, #18
   1c63e:	9300      	str	r3, [sp, #0]
   1c640:	4907      	ldr	r1, [pc, #28]	; (1c660 <bt_gatt_write+0xb4>)
   1c642:	4b08      	ldr	r3, [pc, #32]	; (1c664 <bt_gatt_write+0xb8>)
   1c644:	9601      	str	r6, [sp, #4]
   1c646:	4622      	mov	r2, r4
   1c648:	e7ed      	b.n	1c626 <bt_gatt_write+0x7a>
		return -ENOTCONN;
   1c64a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c64e:	e7ed      	b.n	1c62c <bt_gatt_write+0x80>
   1c650:	000329fb 	.word	0x000329fb
   1c654:	0003013d 	.word	0x0003013d
   1c658:	0001c669 	.word	0x0001c669
   1c65c:	0002cfeb 	.word	0x0002cfeb
   1c660:	0002cd73 	.word	0x0002cd73
   1c664:	0002cfaf 	.word	0x0002cfaf

0001c668 <gatt_prepare_write_rsp>:
{
   1c668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c66a:	9c08      	ldr	r4, [sp, #32]
   1c66c:	4606      	mov	r6, r0
   1c66e:	4617      	mov	r7, r2
	if (err) {
   1c670:	b129      	cbz	r1, 1c67e <gatt_prepare_write_rsp+0x16>
		params->func(conn, err, params);
   1c672:	6823      	ldr	r3, [r4, #0]
   1c674:	4622      	mov	r2, r4
}
   1c676:	b003      	add	sp, #12
   1c678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1c67c:	4718      	bx	r3
	len = length - sizeof(*rsp);
   1c67e:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
   1c680:	89a3      	ldrh	r3, [r4, #12]
   1c682:	429d      	cmp	r5, r3
   1c684:	d913      	bls.n	1c6ae <gatt_prepare_write_rsp+0x46>
		LOG_ERR("Incorrect length, canceling write");
   1c686:	481c      	ldr	r0, [pc, #112]	; (1c6f8 <gatt_prepare_write_rsp+0x90>)
   1c688:	2145      	movs	r1, #69	; 0x45
   1c68a:	f00e fa6d 	bl	2ab68 <z_log_minimal_printk>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   1c68e:	2318      	movs	r3, #24
   1c690:	2101      	movs	r1, #1
   1c692:	e9cd 3100 	strd	r3, r1, [sp]
   1c696:	4b19      	ldr	r3, [pc, #100]	; (1c6fc <gatt_prepare_write_rsp+0x94>)
   1c698:	4919      	ldr	r1, [pc, #100]	; (1c700 <gatt_prepare_write_rsp+0x98>)
   1c69a:	4622      	mov	r2, r4
   1c69c:	4630      	mov	r0, r6
   1c69e:	f010 fe4a 	bl	2d336 <gatt_req_send.constprop.0>
		if (gatt_cancel_all_writes(conn, params)) {
   1c6a2:	b338      	cbz	r0, 1c6f4 <gatt_prepare_write_rsp+0x8c>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1c6a4:	6823      	ldr	r3, [r4, #0]
   1c6a6:	4622      	mov	r2, r4
   1c6a8:	210e      	movs	r1, #14
   1c6aa:	4630      	mov	r0, r6
   1c6ac:	e7e3      	b.n	1c676 <gatt_prepare_write_rsp+0xe>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   1c6ae:	462a      	mov	r2, r5
   1c6b0:	68a0      	ldr	r0, [r4, #8]
   1c6b2:	1d39      	adds	r1, r7, #4
   1c6b4:	f00f f9f9 	bl	2baaa <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   1c6b8:	88e2      	ldrh	r2, [r4, #6]
   1c6ba:	887b      	ldrh	r3, [r7, #2]
   1c6bc:	4293      	cmp	r3, r2
   1c6be:	d100      	bne.n	1c6c2 <gatt_prepare_write_rsp+0x5a>
   1c6c0:	b110      	cbz	r0, 1c6c8 <gatt_prepare_write_rsp+0x60>
		LOG_ERR("Incorrect offset or data in response, canceling write");
   1c6c2:	4810      	ldr	r0, [pc, #64]	; (1c704 <gatt_prepare_write_rsp+0x9c>)
   1c6c4:	2145      	movs	r1, #69	; 0x45
   1c6c6:	e7e0      	b.n	1c68a <gatt_prepare_write_rsp+0x22>
	params->offset += len;
   1c6c8:	fa13 f385 	uxtah	r3, r3, r5
   1c6cc:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
   1c6ce:	68a3      	ldr	r3, [r4, #8]
   1c6d0:	442b      	add	r3, r5
   1c6d2:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   1c6d4:	89a3      	ldrh	r3, [r4, #12]
   1c6d6:	1b5b      	subs	r3, r3, r5
   1c6d8:	b29b      	uxth	r3, r3
   1c6da:	81a3      	strh	r3, [r4, #12]
	if (!params->length) {
   1c6dc:	b92b      	cbnz	r3, 1c6ea <gatt_prepare_write_rsp+0x82>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   1c6de:	2318      	movs	r3, #24
   1c6e0:	2201      	movs	r2, #1
   1c6e2:	e9cd 3200 	strd	r3, r2, [sp]
   1c6e6:	4b08      	ldr	r3, [pc, #32]	; (1c708 <gatt_prepare_write_rsp+0xa0>)
   1c6e8:	e7d6      	b.n	1c698 <gatt_prepare_write_rsp+0x30>
	if (!bt_gatt_write(conn, params)) {
   1c6ea:	4621      	mov	r1, r4
   1c6ec:	4630      	mov	r0, r6
   1c6ee:	f7ff ff5d 	bl	1c5ac <bt_gatt_write>
   1c6f2:	e7d6      	b.n	1c6a2 <gatt_prepare_write_rsp+0x3a>
}
   1c6f4:	b003      	add	sp, #12
   1c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c6f8:	00032cca 	.word	0x00032cca
   1c6fc:	0002cef3 	.word	0x0002cef3
   1c700:	0002cd73 	.word	0x0002cd73
   1c704:	00032cf1 	.word	0x00032cf1
   1c708:	0002cf05 	.word	0x0002cf05

0001c70c <bt_gatt_subscribe>:
{
   1c70c:	b570      	push	{r4, r5, r6, lr}
   1c70e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1c710:	4606      	mov	r6, r0
   1c712:	b950      	cbnz	r0, 1c72a <bt_gatt_subscribe+0x1e>
   1c714:	4939      	ldr	r1, [pc, #228]	; (1c7fc <bt_gatt_subscribe+0xf0>)
   1c716:	483a      	ldr	r0, [pc, #232]	; (1c800 <bt_gatt_subscribe+0xf4>)
   1c718:	f241 32aa 	movw	r2, #5034	; 0x13aa
   1c71c:	f00e fa16 	bl	2ab4c <assert_print>
   1c720:	f241 31aa 	movw	r1, #5034	; 0x13aa
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1c724:	4835      	ldr	r0, [pc, #212]	; (1c7fc <bt_gatt_subscribe+0xf0>)
   1c726:	f00e fa0a 	bl	2ab3e <assert_post_action>
   1c72a:	b109      	cbz	r1, 1c730 <bt_gatt_subscribe+0x24>
   1c72c:	680b      	ldr	r3, [r1, #0]
   1c72e:	b943      	cbnz	r3, 1c742 <bt_gatt_subscribe+0x36>
   1c730:	4932      	ldr	r1, [pc, #200]	; (1c7fc <bt_gatt_subscribe+0xf0>)
   1c732:	4833      	ldr	r0, [pc, #204]	; (1c800 <bt_gatt_subscribe+0xf4>)
   1c734:	f241 32ab 	movw	r2, #5035	; 0x13ab
   1c738:	f00e fa08 	bl	2ab4c <assert_print>
   1c73c:	f241 31ab 	movw	r1, #5035	; 0x13ab
   1c740:	e7f0      	b.n	1c724 <bt_gatt_subscribe+0x18>
	__ASSERT(params->value, "invalid parameters\n");
   1c742:	8a0b      	ldrh	r3, [r1, #16]
   1c744:	b943      	cbnz	r3, 1c758 <bt_gatt_subscribe+0x4c>
   1c746:	492d      	ldr	r1, [pc, #180]	; (1c7fc <bt_gatt_subscribe+0xf0>)
   1c748:	482d      	ldr	r0, [pc, #180]	; (1c800 <bt_gatt_subscribe+0xf4>)
   1c74a:	f241 32ac 	movw	r2, #5036	; 0x13ac
   1c74e:	f00e f9fd 	bl	2ab4c <assert_print>
   1c752:	f241 31ac 	movw	r1, #5036	; 0x13ac
   1c756:	e7e5      	b.n	1c724 <bt_gatt_subscribe+0x18>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1c758:	89cb      	ldrh	r3, [r1, #14]
   1c75a:	b943      	cbnz	r3, 1c76e <bt_gatt_subscribe+0x62>
   1c75c:	4927      	ldr	r1, [pc, #156]	; (1c7fc <bt_gatt_subscribe+0xf0>)
   1c75e:	4828      	ldr	r0, [pc, #160]	; (1c800 <bt_gatt_subscribe+0xf4>)
   1c760:	f241 32b2 	movw	r2, #5042	; 0x13b2
   1c764:	f00e f9f2 	bl	2ab4c <assert_print>
   1c768:	f241 31b2 	movw	r1, #5042	; 0x13b2
   1c76c:	e7da      	b.n	1c724 <bt_gatt_subscribe+0x18>
	if (conn->state != BT_CONN_CONNECTED) {
   1c76e:	7b43      	ldrb	r3, [r0, #13]
   1c770:	2b07      	cmp	r3, #7
   1c772:	d13a      	bne.n	1c7ea <bt_gatt_subscribe+0xde>
	sub = gatt_sub_find(conn);
   1c774:	f7fe f81e 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   1c778:	4604      	mov	r4, r0
   1c77a:	b958      	cbnz	r0, 1c794 <bt_gatt_subscribe+0x88>
		sub = gatt_sub_find(NULL);
   1c77c:	f7fe f81a 	bl	1a7b4 <gatt_sub_find>
		if (sub) {
   1c780:	4604      	mov	r4, r0
   1c782:	2800      	cmp	r0, #0
   1c784:	d034      	beq.n	1c7f0 <bt_gatt_subscribe+0xe4>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c786:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c78a:	3001      	adds	r0, #1
   1c78c:	f010 fb73 	bl	2ce76 <bt_addr_le_copy>
			sub->id = conn->id;
   1c790:	7a33      	ldrb	r3, [r6, #8]
   1c792:	7023      	strb	r3, [r4, #0]
	return list->head;
   1c794:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c796:	b17b      	cbz	r3, 1c7b8 <bt_gatt_subscribe+0xac>
   1c798:	3b18      	subs	r3, #24
   1c79a:	2200      	movs	r2, #0
		if (tmp == params) {
   1c79c:	429d      	cmp	r5, r3
   1c79e:	d02a      	beq.n	1c7f6 <bt_gatt_subscribe+0xea>
		if (tmp->value_handle == params->value_handle &&
   1c7a0:	8998      	ldrh	r0, [r3, #12]
   1c7a2:	89a9      	ldrh	r1, [r5, #12]
   1c7a4:	4288      	cmp	r0, r1
   1c7a6:	d104      	bne.n	1c7b2 <bt_gatt_subscribe+0xa6>
   1c7a8:	8a18      	ldrh	r0, [r3, #16]
   1c7aa:	8a29      	ldrh	r1, [r5, #16]
			has_subscription = true;
   1c7ac:	4288      	cmp	r0, r1
   1c7ae:	bf28      	it	cs
   1c7b0:	2201      	movcs	r2, #1
	return node->next;
   1c7b2:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c7b4:	b96b      	cbnz	r3, 1c7d2 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   1c7b6:	b972      	cbnz	r2, 1c7d6 <bt_gatt_subscribe+0xca>
		err = gatt_write_ccc(conn, params);
   1c7b8:	4630      	mov	r0, r6
   1c7ba:	4629      	mov	r1, r5
   1c7bc:	f7fe fb6a 	bl	1ae94 <gatt_write_ccc>
		if (err) {
   1c7c0:	4606      	mov	r6, r0
   1c7c2:	b140      	cbz	r0, 1c7d6 <bt_gatt_subscribe+0xca>
	if (gatt_sub_is_empty(sub)) {
   1c7c4:	68a3      	ldr	r3, [r4, #8]
   1c7c6:	b913      	cbnz	r3, 1c7ce <bt_gatt_subscribe+0xc2>
		gatt_sub_free(sub);
   1c7c8:	4620      	mov	r0, r4
   1c7ca:	f7fe f9b7 	bl	1ab3c <gatt_sub_free>
}
   1c7ce:	4630      	mov	r0, r6
   1c7d0:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c7d2:	3b18      	subs	r3, #24
   1c7d4:	e7e2      	b.n	1c79c <bt_gatt_subscribe+0x90>
	return list->head;
   1c7d6:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1c7d8:	61aa      	str	r2, [r5, #24]
Z_GENLIST_PREPEND(slist, snode)
   1c7da:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1c7dc:	f105 0318 	add.w	r3, r5, #24
	list->head = node;
   1c7e0:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1c7e2:	b902      	cbnz	r2, 1c7e6 <bt_gatt_subscribe+0xda>
	list->tail = node;
   1c7e4:	60e3      	str	r3, [r4, #12]
	return 0;
   1c7e6:	2600      	movs	r6, #0
   1c7e8:	e7f1      	b.n	1c7ce <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   1c7ea:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1c7ee:	e7ee      	b.n	1c7ce <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   1c7f0:	f06f 060b 	mvn.w	r6, #11
   1c7f4:	e7eb      	b.n	1c7ce <bt_gatt_subscribe+0xc2>
			return -EALREADY;
   1c7f6:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1c7fa:	e7e8      	b.n	1c7ce <bt_gatt_subscribe+0xc2>
   1c7fc:	000329fb 	.word	0x000329fb
   1c800:	0003013d 	.word	0x0003013d

0001c804 <bt_gatt_unsubscribe>:
{
   1c804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c808:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1c80a:	4607      	mov	r7, r0
   1c80c:	b950      	cbnz	r0, 1c824 <bt_gatt_unsubscribe+0x20>
   1c80e:	493c      	ldr	r1, [pc, #240]	; (1c900 <bt_gatt_unsubscribe+0xfc>)
   1c810:	483c      	ldr	r0, [pc, #240]	; (1c904 <bt_gatt_unsubscribe+0x100>)
   1c812:	f241 4209 	movw	r2, #5129	; 0x1409
   1c816:	f00e f999 	bl	2ab4c <assert_print>
   1c81a:	f241 4109 	movw	r1, #5129	; 0x1409
	__ASSERT(params, "invalid parameters\n");
   1c81e:	4838      	ldr	r0, [pc, #224]	; (1c900 <bt_gatt_unsubscribe+0xfc>)
   1c820:	f00e f98d 	bl	2ab3e <assert_post_action>
   1c824:	b941      	cbnz	r1, 1c838 <bt_gatt_unsubscribe+0x34>
   1c826:	4936      	ldr	r1, [pc, #216]	; (1c900 <bt_gatt_unsubscribe+0xfc>)
   1c828:	4836      	ldr	r0, [pc, #216]	; (1c904 <bt_gatt_unsubscribe+0x100>)
   1c82a:	f241 420a 	movw	r2, #5130	; 0x140a
   1c82e:	f00e f98d 	bl	2ab4c <assert_print>
   1c832:	f241 410a 	movw	r1, #5130	; 0x140a
   1c836:	e7f2      	b.n	1c81e <bt_gatt_unsubscribe+0x1a>
	if (conn->state != BT_CONN_CONNECTED) {
   1c838:	7b43      	ldrb	r3, [r0, #13]
   1c83a:	2b07      	cmp	r3, #7
   1c83c:	d15a      	bne.n	1c8f4 <bt_gatt_unsubscribe+0xf0>
	sub = gatt_sub_find(conn);
   1c83e:	f7fd ffb9 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   1c842:	4606      	mov	r6, r0
   1c844:	2800      	cmp	r0, #0
   1c846:	d058      	beq.n	1c8fa <bt_gatt_unsubscribe+0xf6>
	return list->head;
   1c848:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c84a:	2d00      	cmp	r5, #0
   1c84c:	d055      	beq.n	1c8fa <bt_gatt_unsubscribe+0xf6>
   1c84e:	2300      	movs	r3, #0
   1c850:	3d18      	subs	r5, #24
   1c852:	4698      	mov	r8, r3
		if (params == tmp) {
   1c854:	42ac      	cmp	r4, r5
   1c856:	d009      	beq.n	1c86c <bt_gatt_unsubscribe+0x68>
		if (tmp->value_handle == params->value_handle) {
   1c858:	89a9      	ldrh	r1, [r5, #12]
   1c85a:	89a2      	ldrh	r2, [r4, #12]
			has_subscription = true;
   1c85c:	4291      	cmp	r1, r2
   1c85e:	bf08      	it	eq
   1c860:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   1c864:	69ad      	ldr	r5, [r5, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c866:	b11d      	cbz	r5, 1c870 <bt_gatt_unsubscribe+0x6c>
   1c868:	3d18      	subs	r5, #24
   1c86a:	e7f3      	b.n	1c854 <bt_gatt_unsubscribe+0x50>
			found = true;
   1c86c:	2301      	movs	r3, #1
   1c86e:	e7f9      	b.n	1c864 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   1c870:	2b00      	cmp	r3, #0
   1c872:	d042      	beq.n	1c8fa <bt_gatt_unsubscribe+0xf6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c874:	f104 0014 	add.w	r0, r4, #20
   1c878:	f010 fae8 	bl	2ce4c <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1c87c:	0743      	lsls	r3, r0, #29
   1c87e:	d503      	bpl.n	1c888 <bt_gatt_unsubscribe+0x84>
		bt_gatt_cancel(conn, params);
   1c880:	4621      	mov	r1, r4
   1c882:	4638      	mov	r0, r7
   1c884:	f010 fec8 	bl	2d618 <bt_gatt_cancel>
	if (!has_subscription) {
   1c888:	f1b8 0f00 	cmp.w	r8, #0
   1c88c:	d018      	beq.n	1c8c0 <bt_gatt_unsubscribe+0xbc>
	return list->head;
   1c88e:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   1c890:	f104 0218 	add.w	r2, r4, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c894:	b153      	cbz	r3, 1c8ac <bt_gatt_unsubscribe+0xa8>
   1c896:	429a      	cmp	r2, r3
   1c898:	d122      	bne.n	1c8e0 <bt_gatt_unsubscribe+0xdc>
	return node->next;
   1c89a:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1c89c:	b9d5      	cbnz	r5, 1c8d4 <bt_gatt_unsubscribe+0xd0>
   1c89e:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   1c8a0:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1c8a2:	428a      	cmp	r2, r1
   1c8a4:	d100      	bne.n	1c8a8 <bt_gatt_unsubscribe+0xa4>
	list->tail = node;
   1c8a6:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   1c8a8:	2300      	movs	r3, #0
   1c8aa:	61a3      	str	r3, [r4, #24]
	if (gatt_sub_is_empty(sub)) {
   1c8ac:	68b3      	ldr	r3, [r6, #8]
   1c8ae:	b913      	cbnz	r3, 1c8b6 <bt_gatt_unsubscribe+0xb2>
		gatt_sub_free(sub);
   1c8b0:	4630      	mov	r0, r6
   1c8b2:	f7fe f943 	bl	1ab3c <gatt_sub_free>
	if (has_subscription) {
   1c8b6:	f1b8 0f00 	cmp.w	r8, #0
   1c8ba:	d114      	bne.n	1c8e6 <bt_gatt_unsubscribe+0xe2>
	return 0;
   1c8bc:	2000      	movs	r0, #0
   1c8be:	e007      	b.n	1c8d0 <bt_gatt_unsubscribe+0xcc>
		params->value = 0x0000;
   1c8c0:	f8a4 8010 	strh.w	r8, [r4, #16]
		err = gatt_write_ccc(conn, params);
   1c8c4:	4621      	mov	r1, r4
   1c8c6:	4638      	mov	r0, r7
   1c8c8:	f7fe fae4 	bl	1ae94 <gatt_write_ccc>
		if (err) {
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	d0de      	beq.n	1c88e <bt_gatt_unsubscribe+0x8a>
}
   1c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c8d4:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c8d6:	68f3      	ldr	r3, [r6, #12]
   1c8d8:	429a      	cmp	r2, r3
	list->tail = node;
   1c8da:	bf08      	it	eq
   1c8dc:	60f5      	streq	r5, [r6, #12]
}
   1c8de:	e7e3      	b.n	1c8a8 <bt_gatt_unsubscribe+0xa4>
	return node->next;
   1c8e0:	461d      	mov	r5, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c8e2:	681b      	ldr	r3, [r3, #0]
   1c8e4:	e7d6      	b.n	1c894 <bt_gatt_unsubscribe+0x90>
		params->notify(conn, params, NULL, 0);
   1c8e6:	2300      	movs	r3, #0
   1c8e8:	6825      	ldr	r5, [r4, #0]
   1c8ea:	461a      	mov	r2, r3
   1c8ec:	4621      	mov	r1, r4
   1c8ee:	4638      	mov	r0, r7
   1c8f0:	47a8      	blx	r5
   1c8f2:	e7e3      	b.n	1c8bc <bt_gatt_unsubscribe+0xb8>
		return -ENOTCONN;
   1c8f4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c8f8:	e7ea      	b.n	1c8d0 <bt_gatt_unsubscribe+0xcc>
		return -EINVAL;
   1c8fa:	f06f 0015 	mvn.w	r0, #21
   1c8fe:	e7e7      	b.n	1c8d0 <bt_gatt_unsubscribe+0xcc>
   1c900:	000329fb 	.word	0x000329fb
   1c904:	0003013d 	.word	0x0003013d

0001c908 <bt_gatt_mult_notification>:
{
   1c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c90c:	b085      	sub	sp, #20
   1c90e:	4606      	mov	r6, r0
   1c910:	460c      	mov	r4, r1
   1c912:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
   1c914:	f7fd ff4e 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   1c918:	4681      	mov	r9, r0
   1c91a:	b1e0      	cbz	r0, 1c956 <bt_gatt_mult_notification+0x4e>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1c91c:	4652      	mov	r2, sl
   1c91e:	4621      	mov	r1, r4
   1c920:	a801      	add	r0, sp, #4
   1c922:	f011 fadf 	bl	2dee4 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1c926:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1c92a:	2b04      	cmp	r3, #4
   1c92c:	d913      	bls.n	1c956 <bt_gatt_mult_notification+0x4e>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c92e:	2104      	movs	r1, #4
   1c930:	eb0d 0001 	add.w	r0, sp, r1
   1c934:	f002 fba2 	bl	1f07c <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1c938:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1c93c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   1c940:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   1c944:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c946:	4605      	mov	r5, r0
		if (len > buf.len) {
   1c948:	d208      	bcs.n	1c95c <bt_gatt_mult_notification+0x54>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1c94a:	481c      	ldr	r0, [pc, #112]	; (1c9bc <bt_gatt_mult_notification+0xb4>)
   1c94c:	4653      	mov	r3, sl
   1c94e:	4642      	mov	r2, r8
   1c950:	2145      	movs	r1, #69	; 0x45
   1c952:	f00e f909 	bl	2ab68 <z_log_minimal_printk>
}
   1c956:	b005      	add	sp, #20
   1c958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1c95c:	f8d9 7008 	ldr.w	r7, [r9, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c960:	b31f      	cbz	r7, 1c9aa <bt_gatt_mult_notification+0xa2>
	return node->next;
   1c962:	683c      	ldr	r4, [r7, #0]
   1c964:	b104      	cbz	r4, 1c968 <bt_gatt_mult_notification+0x60>
   1c966:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   1c968:	f837 3c0c 	ldrh.w	r3, [r7, #-12]
   1c96c:	455b      	cmp	r3, fp
   1c96e:	d119      	bne.n	1c9a4 <bt_gatt_mult_notification+0x9c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c970:	3f18      	subs	r7, #24
   1c972:	e007      	b.n	1c984 <bt_gatt_mult_notification+0x7c>
   1c974:	4627      	mov	r7, r4
   1c976:	69a4      	ldr	r4, [r4, #24]
   1c978:	89bb      	ldrh	r3, [r7, #12]
   1c97a:	b1dc      	cbz	r4, 1c9b4 <bt_gatt_mult_notification+0xac>
			if (handle != params->value_handle) {
   1c97c:	455b      	cmp	r3, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c97e:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   1c982:	d1f7      	bne.n	1c974 <bt_gatt_mult_notification+0x6c>
			if (check_subscribe_security_level(conn, params)) {
   1c984:	7a72      	ldrb	r2, [r6, #9]
   1c986:	7cbb      	ldrb	r3, [r7, #18]
   1c988:	429a      	cmp	r2, r3
   1c98a:	d30b      	bcc.n	1c9a4 <bt_gatt_mult_notification+0x9c>
				if (params->notify(conn, params, nfy->value, len) ==
   1c98c:	f8d7 c000 	ldr.w	ip, [r7]
   1c990:	4643      	mov	r3, r8
   1c992:	1d2a      	adds	r2, r5, #4
   1c994:	4639      	mov	r1, r7
   1c996:	4630      	mov	r0, r6
   1c998:	47e0      	blx	ip
   1c99a:	b918      	cbnz	r0, 1c9a4 <bt_gatt_mult_notification+0x9c>
					bt_gatt_unsubscribe(conn, params);
   1c99c:	4639      	mov	r1, r7
   1c99e:	4630      	mov	r0, r6
   1c9a0:	f7ff ff30 	bl	1c804 <bt_gatt_unsubscribe>
   1c9a4:	4627      	mov	r7, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c9a6:	2c00      	cmp	r4, #0
   1c9a8:	d1e5      	bne.n	1c976 <bt_gatt_mult_notification+0x6e>
		net_buf_simple_pull_mem(&buf, len);
   1c9aa:	4641      	mov	r1, r8
   1c9ac:	a801      	add	r0, sp, #4
   1c9ae:	f002 fb65 	bl	1f07c <net_buf_simple_pull_mem>
   1c9b2:	e7b8      	b.n	1c926 <bt_gatt_mult_notification+0x1e>
			if (handle != params->value_handle) {
   1c9b4:	455b      	cmp	r3, fp
   1c9b6:	d0e5      	beq.n	1c984 <bt_gatt_mult_notification+0x7c>
   1c9b8:	e7f7      	b.n	1c9aa <bt_gatt_mult_notification+0xa2>
   1c9ba:	bf00      	nop
   1c9bc:	00032d2c 	.word	0x00032d2c

0001c9c0 <bt_gatt_connected>:
{
   1c9c0:	b570      	push	{r4, r5, r6, lr}
   1c9c2:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c9c4:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1c9c8:	4604      	mov	r4, r0
	data.conn = conn;
   1c9ca:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1c9cc:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c9ce:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1c9d0:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c9d4:	4631      	mov	r1, r6
   1c9d6:	f00f fa5a 	bl	2be8e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1c9da:	b198      	cbz	r0, 1ca04 <bt_gatt_connected+0x44>
		if (conn->id) {
   1c9dc:	7a22      	ldrb	r2, [r4, #8]
   1c9de:	2a00      	cmp	r2, #0
   1c9e0:	d03f      	beq.n	1ca62 <bt_gatt_connected+0xa2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1c9e2:	ad02      	add	r5, sp, #8
   1c9e4:	2104      	movs	r1, #4
   1c9e6:	4628      	mov	r0, r5
   1c9e8:	f00d fe1a 	bl	2a620 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c9ec:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c9ee:	4a1f      	ldr	r2, [pc, #124]	; (1ca6c <bt_gatt_connected+0xac>)
   1c9f0:	2124      	movs	r1, #36	; 0x24
   1c9f2:	a805      	add	r0, sp, #20
   1c9f4:	4633      	mov	r3, r6
   1c9f6:	f7f8 ff95 	bl	15924 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1c9fa:	aa05      	add	r2, sp, #20
   1c9fc:	491c      	ldr	r1, [pc, #112]	; (1ca70 <bt_gatt_connected+0xb0>)
   1c9fe:	4610      	mov	r0, r2
   1ca00:	f7f6 ffc2 	bl	13988 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ca04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ca08:	4a1a      	ldr	r2, [pc, #104]	; (1ca74 <bt_gatt_connected+0xb4>)
   1ca0a:	ab03      	add	r3, sp, #12
   1ca0c:	2001      	movs	r0, #1
   1ca0e:	f010 fd59 	bl	2d4c4 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1ca12:	4620      	mov	r0, r4
   1ca14:	f00f fb73 	bl	2c0fe <bt_conn_get_security>
   1ca18:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1ca1c:	4288      	cmp	r0, r1
   1ca1e:	d208      	bcs.n	1ca32 <bt_gatt_connected+0x72>
		int err = bt_conn_set_security(conn, data.sec);
   1ca20:	4620      	mov	r0, r4
   1ca22:	f00f fb3c 	bl	2c09e <bt_conn_set_security>
		if (err) {
   1ca26:	4602      	mov	r2, r0
   1ca28:	b118      	cbz	r0, 1ca32 <bt_gatt_connected+0x72>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1ca2a:	4813      	ldr	r0, [pc, #76]	; (1ca78 <bt_gatt_connected+0xb8>)
   1ca2c:	2157      	movs	r1, #87	; 0x57
   1ca2e:	f00e f89b 	bl	2ab68 <z_log_minimal_printk>
	sub = gatt_sub_find(conn);
   1ca32:	4620      	mov	r0, r4
   1ca34:	f7fd febe 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   1ca38:	b1a8      	cbz	r0, 1ca66 <bt_gatt_connected+0xa6>
	return list->head;
   1ca3a:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1ca3c:	b19d      	cbz	r5, 1ca66 <bt_gatt_connected+0xa6>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1ca3e:	7a20      	ldrb	r0, [r4, #8]
   1ca40:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1ca42:	3d18      	subs	r5, #24
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1ca44:	f00f fa23 	bl	2be8e <bt_addr_le_is_bonded>
   1ca48:	b148      	cbz	r0, 1ca5e <bt_gatt_connected+0x9e>
   1ca4a:	f105 0014 	add.w	r0, r5, #20
   1ca4e:	f010 f9fd 	bl	2ce4c <atomic_get>
   1ca52:	0783      	lsls	r3, r0, #30
   1ca54:	d403      	bmi.n	1ca5e <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params);
   1ca56:	4629      	mov	r1, r5
   1ca58:	4620      	mov	r0, r4
   1ca5a:	f7fe fa1b 	bl	1ae94 <gatt_write_ccc>
	return node->next;
   1ca5e:	69ad      	ldr	r5, [r5, #24]
   1ca60:	e7ec      	b.n	1ca3c <bt_gatt_connected+0x7c>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ca62:	9200      	str	r2, [sp, #0]
   1ca64:	e7c3      	b.n	1c9ee <bt_gatt_connected+0x2e>
}
   1ca66:	b00e      	add	sp, #56	; 0x38
   1ca68:	bd70      	pop	{r4, r5, r6, pc}
   1ca6a:	bf00      	nop
   1ca6c:	00032b57 	.word	0x00032b57
   1ca70:	0001b4d1 	.word	0x0001b4d1
   1ca74:	0001b9bd 	.word	0x0001b9bd
   1ca78:	00032d4a 	.word	0x00032d4a

0001ca7c <bt_gatt_att_max_mtu_changed>:
{
   1ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1ca7e:	4b08      	ldr	r3, [pc, #32]	; (1caa0 <bt_gatt_att_max_mtu_changed+0x24>)
   1ca80:	681c      	ldr	r4, [r3, #0]
   1ca82:	4605      	mov	r5, r0
   1ca84:	460e      	mov	r6, r1
   1ca86:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ca88:	b14c      	cbz	r4, 1ca9e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1ca8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ca8e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1ca90:	b11b      	cbz	r3, 1ca9a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1ca92:	463a      	mov	r2, r7
   1ca94:	4631      	mov	r1, r6
   1ca96:	4628      	mov	r0, r5
   1ca98:	4798      	blx	r3
	return node->next;
   1ca9a:	6864      	ldr	r4, [r4, #4]
   1ca9c:	e7f4      	b.n	1ca88 <bt_gatt_att_max_mtu_changed+0xc>
}
   1ca9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1caa0:	200034a0 	.word	0x200034a0

0001caa4 <bt_gatt_encrypt_change>:
{
   1caa4:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1caa6:	4a06      	ldr	r2, [pc, #24]	; (1cac0 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1caa8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1caaa:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1caac:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1caae:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1cab2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cab6:	f010 fd05 	bl	2d4c4 <bt_gatt_foreach_attr>
}
   1caba:	b003      	add	sp, #12
   1cabc:	f85d fb04 	ldr.w	pc, [sp], #4
   1cac0:	0001b9bd 	.word	0x0001b9bd

0001cac4 <bt_gatt_store_ccc>:
{
   1cac4:	b570      	push	{r4, r5, r6, lr}
   1cac6:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1cac8:	2300      	movs	r3, #0
{
   1caca:	4604      	mov	r4, r0
   1cacc:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1cace:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1cad0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1cad4:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1cad6:	4a15      	ldr	r2, [pc, #84]	; (1cb2c <bt_gatt_store_ccc+0x68>)
   1cad8:	ab0d      	add	r3, sp, #52	; 0x34
   1cada:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cade:	2001      	movs	r0, #1
   1cae0:	f010 fcf0 	bl	2d4c4 <bt_gatt_foreach_attr>
	if (id) {
   1cae4:	b1ec      	cbz	r4, 1cb22 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1cae6:	ae03      	add	r6, sp, #12
   1cae8:	4622      	mov	r2, r4
   1caea:	2104      	movs	r1, #4
   1caec:	4630      	mov	r0, r6
   1caee:	f00d fd97 	bl	2a620 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1caf2:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1caf4:	4a0e      	ldr	r2, [pc, #56]	; (1cb30 <bt_gatt_store_ccc+0x6c>)
   1caf6:	462b      	mov	r3, r5
   1caf8:	2124      	movs	r1, #36	; 0x24
   1cafa:	a804      	add	r0, sp, #16
   1cafc:	f7f8 ff12 	bl	15924 <bt_settings_encode_key>
	if (save.count) {
   1cb00:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1cb02:	b182      	cbz	r2, 1cb26 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1cb04:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1cb06:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1cb08:	a804      	add	r0, sp, #16
   1cb0a:	f7f6 fedd 	bl	138c8 <settings_save_one>
	if (err) {
   1cb0e:	4604      	mov	r4, r0
   1cb10:	b120      	cbz	r0, 1cb1c <bt_gatt_store_ccc+0x58>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1cb12:	4602      	mov	r2, r0
   1cb14:	2145      	movs	r1, #69	; 0x45
   1cb16:	4807      	ldr	r0, [pc, #28]	; (1cb34 <bt_gatt_store_ccc+0x70>)
   1cb18:	f00e f826 	bl	2ab68 <z_log_minimal_printk>
}
   1cb1c:	4620      	mov	r0, r4
   1cb1e:	b040      	add	sp, #256	; 0x100
   1cb20:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cb22:	9400      	str	r4, [sp, #0]
   1cb24:	e7e6      	b.n	1caf4 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1cb26:	4611      	mov	r1, r2
   1cb28:	e7ee      	b.n	1cb08 <bt_gatt_store_ccc+0x44>
   1cb2a:	bf00      	nop
   1cb2c:	0001ad4d 	.word	0x0001ad4d
   1cb30:	00032b57 	.word	0x00032b57
   1cb34:	00032d7b 	.word	0x00032d7b

0001cb38 <bt_gatt_identity_resolved>:
{
   1cb38:	b513      	push	{r0, r1, r4, lr}
   1cb3a:	4604      	mov	r4, r0
	struct addr_match user_data = {
   1cb3c:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1cb40:	466b      	mov	r3, sp
   1cb42:	4a08      	ldr	r2, [pc, #32]	; (1cb64 <bt_gatt_identity_resolved+0x2c>)
   1cb44:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb48:	2001      	movs	r0, #1
   1cb4a:	f010 fcbb 	bl	2d4c4 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   1cb4e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1cb52:	7a20      	ldrb	r0, [r4, #8]
   1cb54:	f7ff ffb6 	bl	1cac4 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   1cb58:	4620      	mov	r0, r4
   1cb5a:	f7fe f913 	bl	1ad84 <bt_gatt_store_cf.isra.0>
}
   1cb5e:	b002      	add	sp, #8
   1cb60:	bd10      	pop	{r4, pc}
   1cb62:	bf00      	nop
   1cb64:	0001ad21 	.word	0x0001ad21

0001cb68 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1cb68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cb6c:	4603      	mov	r3, r0
   1cb6e:	4a43      	ldr	r2, [pc, #268]	; (1cc7c <bt_gatt_disconnected+0x114>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1cb70:	4e43      	ldr	r6, [pc, #268]	; (1cc80 <bt_gatt_disconnected+0x118>)
{
   1cb72:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cb74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb78:	2001      	movs	r0, #1
   1cb7a:	f010 fca3 	bl	2d4c4 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1cb7e:	4620      	mov	r0, r4
   1cb80:	f7fb fece 	bl	18920 <bt_conn_index>
   1cb84:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1cb86:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1cb8a:	b120      	cbz	r0, 1cb96 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1cb8c:	f7fb fda2 	bl	186d4 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1cb90:	2300      	movs	r3, #0
   1cb92:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1cb96:	483b      	ldr	r0, [pc, #236]	; (1cc84 <bt_gatt_disconnected+0x11c>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cb98:	f104 0690 	add.w	r6, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1cb9c:	f008 fd48 	bl	25630 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cba0:	7a20      	ldrb	r0, [r4, #8]
   1cba2:	4631      	mov	r1, r6
   1cba4:	f00f f973 	bl	2be8e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1cba8:	b130      	cbz	r0, 1cbb8 <bt_gatt_disconnected+0x50>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1cbaa:	7a20      	ldrb	r0, [r4, #8]
   1cbac:	4631      	mov	r1, r6
   1cbae:	f7ff ff89 	bl	1cac4 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1cbb2:	4620      	mov	r0, r4
   1cbb4:	f7fe f8e6 	bl	1ad84 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cbb8:	7a20      	ldrb	r0, [r4, #8]
   1cbba:	4631      	mov	r1, r6
   1cbbc:	f00f f967 	bl	2be8e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1cbc0:	b150      	cbz	r0, 1cbd8 <bt_gatt_disconnected+0x70>
		struct addr_with_id addr_with_id = {
   1cbc2:	7a23      	ldrb	r3, [r4, #8]
   1cbc4:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cbc8:	4a2f      	ldr	r2, [pc, #188]	; (1cc88 <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   1cbca:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cbcc:	466b      	mov	r3, sp
   1cbce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cbd2:	2001      	movs	r0, #1
   1cbd4:	f010 fc76 	bl	2d4c4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1cbd8:	4620      	mov	r0, r4
   1cbda:	f7fd fdeb 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   1cbde:	4680      	mov	r8, r0
   1cbe0:	b938      	cbnz	r0, 1cbf2 <bt_gatt_disconnected+0x8a>
	cfg = find_cf_cfg(conn);
   1cbe2:	4620      	mov	r0, r4
   1cbe4:	f7fd fd82 	bl	1a6ec <find_cf_cfg>
	if (!cfg) {
   1cbe8:	4605      	mov	r5, r0
   1cbea:	bba0      	cbnz	r0, 1cc56 <bt_gatt_disconnected+0xee>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1cbec:	b002      	add	sp, #8
   1cbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->head;
   1cbf2:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1cbf4:	2d00      	cmp	r5, #0
   1cbf6:	d0f4      	beq.n	1cbe2 <bt_gatt_disconnected+0x7a>
	return node->next;
   1cbf8:	f855 7918 	ldr.w	r7, [r5], #-24
   1cbfc:	b107      	cbz	r7, 1cc00 <bt_gatt_disconnected+0x98>
   1cbfe:	3f18      	subs	r7, #24
{
   1cc00:	f04f 0900 	mov.w	r9, #0
			params->value = 0U;
   1cc04:	46ca      	mov	sl, r9
   1cc06:	e001      	b.n	1cc0c <bt_gatt_disconnected+0xa4>
{
   1cc08:	463d      	mov	r5, r7
   1cc0a:	461f      	mov	r7, r3
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1cc0c:	7a20      	ldrb	r0, [r4, #8]
   1cc0e:	4631      	mov	r1, r6
   1cc10:	f00f f93d 	bl	2be8e <bt_addr_le_is_bonded>
   1cc14:	b970      	cbnz	r0, 1cc34 <bt_gatt_disconnected+0xcc>
			params->value = 0U;
   1cc16:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1cc1a:	462b      	mov	r3, r5
   1cc1c:	464a      	mov	r2, r9
   1cc1e:	4641      	mov	r1, r8
   1cc20:	4620      	mov	r0, r4
   1cc22:	f010 fa1d 	bl	2d060 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1cc26:	2f00      	cmp	r7, #0
   1cc28:	d0db      	beq.n	1cbe2 <bt_gatt_disconnected+0x7a>
   1cc2a:	69bb      	ldr	r3, [r7, #24]
   1cc2c:	2b00      	cmp	r3, #0
   1cc2e:	d0eb      	beq.n	1cc08 <bt_gatt_disconnected+0xa0>
   1cc30:	3b18      	subs	r3, #24
   1cc32:	e7e9      	b.n	1cc08 <bt_gatt_disconnected+0xa0>
   1cc34:	f105 0014 	add.w	r0, r5, #20
   1cc38:	f010 f908 	bl	2ce4c <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1cc3c:	07c3      	lsls	r3, r0, #31
   1cc3e:	d4ea      	bmi.n	1cc16 <bt_gatt_disconnected+0xae>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1cc40:	f898 3001 	ldrb.w	r3, [r8, #1]
   1cc44:	b123      	cbz	r3, 1cc50 <bt_gatt_disconnected+0xe8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1cc46:	4631      	mov	r1, r6
   1cc48:	f108 0001 	add.w	r0, r8, #1
   1cc4c:	f010 f913 	bl	2ce76 <bt_addr_le_copy>
			prev = &params->node;
   1cc50:	f105 0918 	add.w	r9, r5, #24
   1cc54:	e7e7      	b.n	1cc26 <bt_gatt_disconnected+0xbe>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cc56:	7a20      	ldrb	r0, [r4, #8]
   1cc58:	4631      	mov	r1, r6
   1cc5a:	f00f f918 	bl	2be8e <bt_addr_le_is_bonded>
   1cc5e:	b928      	cbnz	r0, 1cc6c <bt_gatt_disconnected+0x104>
		clear_cf_cfg(cfg);
   1cc60:	4628      	mov	r0, r5
}
   1cc62:	b002      	add	sp, #8
   1cc64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		clear_cf_cfg(cfg);
   1cc68:	f7fd bfc8 	b.w	1abfc <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc6c:	4631      	mov	r1, r6
   1cc6e:	1c68      	adds	r0, r5, #1
}
   1cc70:	b002      	add	sp, #8
   1cc72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc76:	f010 b8fe 	b.w	2ce76 <bt_addr_le_copy>
   1cc7a:	bf00      	nop
   1cc7c:	0001aeb9 	.word	0x0001aeb9
   1cc80:	20001f18 	.word	0x20001f18
   1cc84:	20001f20 	.word	0x20001f20
   1cc88:	0001acf9 	.word	0x0001acf9

0001cc8c <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1cc8c:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cc8e:	4b05      	ldr	r3, [pc, #20]	; (1cca4 <smp_find+0x18>)
{
   1cc90:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cc92:	4618      	mov	r0, r3
   1cc94:	f010 fd5f 	bl	2d756 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1cc98:	3b04      	subs	r3, #4
   1cc9a:	2800      	cmp	r0, #0
}
   1cc9c:	bf14      	ite	ne
   1cc9e:	4618      	movne	r0, r3
   1cca0:	2000      	moveq	r0, #0
   1cca2:	bd08      	pop	{r3, pc}
   1cca4:	20002024 	.word	0x20002024

0001cca8 <latch_auth_cb>:
{
   1cca8:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1ccaa:	4a0c      	ldr	r2, [pc, #48]	; (1ccdc <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ccac:	6811      	ldr	r1, [r2, #0]
   1ccae:	4a0c      	ldr	r2, [pc, #48]	; (1cce0 <latch_auth_cb+0x38>)
   1ccb0:	f3bf 8f5b 	dmb	ish
   1ccb4:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1ccb8:	e853 4f00 	ldrex	r4, [r3]
   1ccbc:	4294      	cmp	r4, r2
   1ccbe:	d104      	bne.n	1ccca <latch_auth_cb+0x22>
   1ccc0:	e843 1c00 	strex	ip, r1, [r3]
   1ccc4:	f1bc 0f00 	cmp.w	ip, #0
   1ccc8:	d1f6      	bne.n	1ccb8 <latch_auth_cb+0x10>
   1ccca:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ccce:	f3bf 8f5b 	dmb	ish
   1ccd2:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1ccd6:	f3bf 8f5b 	dmb	ish
}
   1ccda:	bd10      	pop	{r4, pc}
   1ccdc:	2000336c 	.word	0x2000336c
   1cce0:	20002020 	.word	0x20002020

0001cce4 <get_io_capa>:
{
   1cce4:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cce6:	f7ff ffdf 	bl	1cca8 <latch_auth_cb>
	if (!smp_auth_cb) {
   1ccea:	4603      	mov	r3, r0
   1ccec:	b1c8      	cbz	r0, 1cd22 <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ccee:	e9d0 1200 	ldrd	r1, r2, [r0]
   1ccf2:	b921      	cbnz	r1, 1ccfe <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1ccf4:	2a00      	cmp	r2, #0
   1ccf6:	bf0c      	ite	eq
   1ccf8:	2003      	moveq	r0, #3
   1ccfa:	2002      	movne	r0, #2
   1ccfc:	e010      	b.n	1cd20 <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ccfe:	b132      	cbz	r2, 1cd0e <get_io_capa+0x2a>
   1cd00:	6883      	ldr	r3, [r0, #8]
   1cd02:	b913      	cbnz	r3, 1cd0a <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1cd04:	4b09      	ldr	r3, [pc, #36]	; (1cd2c <get_io_capa+0x48>)
   1cd06:	781b      	ldrb	r3, [r3, #0]
   1cd08:	b933      	cbnz	r3, 1cd18 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1cd0a:	2004      	movs	r0, #4
   1cd0c:	e008      	b.n	1cd20 <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1cd0e:	4907      	ldr	r1, [pc, #28]	; (1cd2c <get_io_capa+0x48>)
   1cd10:	7808      	ldrb	r0, [r1, #0]
   1cd12:	b128      	cbz	r0, 1cd20 <get_io_capa+0x3c>
   1cd14:	689b      	ldr	r3, [r3, #8]
   1cd16:	b933      	cbnz	r3, 1cd26 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1cd18:	3a00      	subs	r2, #0
   1cd1a:	bf18      	it	ne
   1cd1c:	2201      	movne	r2, #1
   1cd1e:	0050      	lsls	r0, r2, #1
}
   1cd20:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1cd22:	2003      	movs	r0, #3
   1cd24:	e7fc      	b.n	1cd20 <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1cd26:	2001      	movs	r0, #1
   1cd28:	e7fa      	b.n	1cd20 <get_io_capa+0x3c>
   1cd2a:	bf00      	nop
   1cd2c:	2000441f 	.word	0x2000441f

0001cd30 <smp_chan_get>:
{
   1cd30:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1cd32:	2106      	movs	r1, #6
   1cd34:	f00f faf6 	bl	2c324 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1cd38:	4604      	mov	r4, r0
   1cd3a:	b928      	cbnz	r0, 1cd48 <smp_chan_get+0x18>
		LOG_ERR("Unable to find SMP channel");
   1cd3c:	4804      	ldr	r0, [pc, #16]	; (1cd50 <smp_chan_get+0x20>)
   1cd3e:	2145      	movs	r1, #69	; 0x45
   1cd40:	f00d ff12 	bl	2ab68 <z_log_minimal_printk>
}
   1cd44:	4620      	mov	r0, r4
   1cd46:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1cd48:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1cd4c:	e7fa      	b.n	1cd44 <smp_chan_get+0x14>
   1cd4e:	bf00      	nop
   1cd50:	00032db2 	.word	0x00032db2

0001cd54 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1cd54:	b510      	push	{r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1cd56:	4c09      	ldr	r4, [pc, #36]	; (1cd7c <bt_smp_accept+0x28>)
{
   1cd58:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1cd5a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cd5e:	b928      	cbnz	r0, 1cd6c <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1cd60:	4a07      	ldr	r2, [pc, #28]	; (1cd80 <bt_smp_accept+0x2c>)
   1cd62:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1cd66:	34ec      	adds	r4, #236	; 0xec
   1cd68:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1cd6a:	bd10      	pop	{r4, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1cd6c:	4805      	ldr	r0, [pc, #20]	; (1cd84 <bt_smp_accept+0x30>)
   1cd6e:	2145      	movs	r1, #69	; 0x45
   1cd70:	f00d fefa 	bl	2ab68 <z_log_minimal_printk>
   1cd74:	f06f 000b 	mvn.w	r0, #11
   1cd78:	e7f7      	b.n	1cd6a <bt_smp_accept+0x16>
   1cd7a:	bf00      	nop
   1cd7c:	20002020 	.word	0x20002020
   1cd80:	0002fa64 	.word	0x0002fa64
   1cd84:	00032dd2 	.word	0x00032dd2

0001cd88 <smp_id_add_replace.isra.0>:
static uint8_t smp_id_add_replace(struct bt_smp *smp, struct bt_keys *new_bond)
   1cd88:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1cd8a:	f010 0402 	ands.w	r4, r0, #2
static uint8_t smp_id_add_replace(struct bt_smp *smp, struct bt_keys *new_bond)
   1cd8e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1cd90:	d00a      	beq.n	1cda8 <smp_id_add_replace.isra.0+0x20>
   1cd92:	4913      	ldr	r1, [pc, #76]	; (1cde0 <smp_id_add_replace.isra.0+0x58>)
   1cd94:	4813      	ldr	r0, [pc, #76]	; (1cde4 <smp_id_add_replace.isra.0+0x5c>)
   1cd96:	f640 6263 	movw	r2, #3683	; 0xe63
   1cd9a:	f00d fed7 	bl	2ab4c <assert_print>
   1cd9e:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1cda2:	480f      	ldr	r0, [pc, #60]	; (1cde0 <smp_id_add_replace.isra.0+0x58>)
   1cda4:	f00d fecb 	bl	2ab3e <assert_post_action>
	conflict = bt_id_find_conflict(new_bond);
   1cda8:	4608      	mov	r0, r1
   1cdaa:	f7fa fb27 	bl	173fc <bt_id_find_conflict>
	if (conflict) {
   1cdae:	b130      	cbz	r0, 1cdbe <smp_id_add_replace.isra.0+0x36>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1cdb0:	480d      	ldr	r0, [pc, #52]	; (1cde8 <smp_id_add_replace.isra.0+0x60>)
   1cdb2:	2157      	movs	r1, #87	; 0x57
   1cdb4:	f00d fed8 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cdb8:	2403      	movs	r4, #3
}
   1cdba:	4620      	mov	r0, r4
   1cdbc:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1cdbe:	4628      	mov	r0, r5
   1cdc0:	f7fa fb1c 	bl	173fc <bt_id_find_conflict>
   1cdc4:	b140      	cbz	r0, 1cdd8 <smp_id_add_replace.isra.0+0x50>
   1cdc6:	4906      	ldr	r1, [pc, #24]	; (1cde0 <smp_id_add_replace.isra.0+0x58>)
   1cdc8:	4806      	ldr	r0, [pc, #24]	; (1cde4 <smp_id_add_replace.isra.0+0x5c>)
   1cdca:	f640 627f 	movw	r2, #3711	; 0xe7f
   1cdce:	f00d febd 	bl	2ab4c <assert_print>
   1cdd2:	f640 617f 	movw	r1, #3711	; 0xe7f
   1cdd6:	e7e4      	b.n	1cda2 <smp_id_add_replace.isra.0+0x1a>
	bt_id_add(new_bond);
   1cdd8:	4628      	mov	r0, r5
   1cdda:	f7fa fb1f 	bl	1741c <bt_id_add>
	return 0;
   1cdde:	e7ec      	b.n	1cdba <smp_id_add_replace.isra.0+0x32>
   1cde0:	00032dfc 	.word	0x00032dfc
   1cde4:	0003013d 	.word	0x0003013d
   1cde8:	00032e2b 	.word	0x00032e2b

0001cdec <smp_dhkey_check>:
{
   1cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1cdee:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1cdf2:	78dd      	ldrb	r5, [r3, #3]
{
   1cdf4:	b091      	sub	sp, #68	; 0x44
   1cdf6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1cdf8:	2d00      	cmp	r5, #0
   1cdfa:	d165      	bne.n	1cec8 <smp_dhkey_check+0xdc>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1cdfc:	68cf      	ldr	r7, [r1, #12]
		(void)memset(r, 0, sizeof(r));
   1cdfe:	2210      	movs	r2, #16
   1ce00:	4629      	mov	r1, r5
   1ce02:	a80c      	add	r0, sp, #48	; 0x30
   1ce04:	f00e fe83 	bl	2bb0e <memset>
		switch (smp->method) {
   1ce08:	7a22      	ldrb	r2, [r4, #8]
   1ce0a:	2a05      	cmp	r2, #5
   1ce0c:	d84d      	bhi.n	1ceaa <smp_dhkey_check+0xbe>
   1ce0e:	e8df f002 	tbb	[pc, r2]
   1ce12:	0309      	.short	0x0309
   1ce14:	464c0903 	.word	0x464c0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1ce18:	2204      	movs	r2, #4
   1ce1a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1ce1e:	a80c      	add	r0, sp, #48	; 0x30
   1ce20:	f00e fe6a 	bl	2baf8 <memcpy>
				 &smp->chan.chan.conn->le.resp_addr,
   1ce24:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
				 &smp->chan.chan.conn->le.init_addr, e)) {
   1ce28:	f103 0297 	add.w	r2, r3, #151	; 0x97
				 &smp->chan.chan.conn->le.resp_addr,
   1ce2c:	339e      	adds	r3, #158	; 0x9e
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1ce2e:	ae08      	add	r6, sp, #32
   1ce30:	9301      	str	r3, [sp, #4]
   1ce32:	f104 0311 	add.w	r3, r4, #17
   1ce36:	9202      	str	r2, [sp, #8]
   1ce38:	9300      	str	r3, [sp, #0]
   1ce3a:	9603      	str	r6, [sp, #12]
   1ce3c:	ab0c      	add	r3, sp, #48	; 0x30
   1ce3e:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1ce42:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1ce46:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1ce4a:	f010 fff7 	bl	2de3c <bt_crypto_f6>
   1ce4e:	bb80      	cbnz	r0, 1ceb2 <smp_dhkey_check+0xc6>
		if (memcmp(e, req->e, 16)) {
   1ce50:	4630      	mov	r0, r6
   1ce52:	2210      	movs	r2, #16
   1ce54:	4639      	mov	r1, r7
   1ce56:	f00e fe28 	bl	2baaa <memcmp>
   1ce5a:	4606      	mov	r6, r0
   1ce5c:	bb90      	cbnz	r0, 1cec4 <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce5e:	7d23      	ldrb	r3, [r4, #20]
   1ce60:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   1ce62:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce64:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1ce66:	f04f 0202 	mov.w	r2, #2
   1ce6a:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce6c:	bf28      	it	cs
   1ce6e:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1ce70:	f00e fe4d 	bl	2bb0e <memset>
		(void)memset(rand, 0, sizeof(rand));
   1ce74:	2208      	movs	r2, #8
   1ce76:	4631      	mov	r1, r6
   1ce78:	a806      	add	r0, sp, #24
   1ce7a:	f00e fe48 	bl	2bb0e <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1ce7e:	9700      	str	r7, [sp, #0]
   1ce80:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ce84:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1ce88:	aa05      	add	r2, sp, #20
   1ce8a:	a906      	add	r1, sp, #24
   1ce8c:	f00f f8cc 	bl	2c028 <bt_conn_le_start_encryption>
   1ce90:	2800      	cmp	r0, #0
   1ce92:	da12      	bge.n	1ceba <smp_dhkey_check+0xce>
			LOG_ERR("Failed to start encryption");
   1ce94:	480d      	ldr	r0, [pc, #52]	; (1cecc <smp_dhkey_check+0xe0>)
   1ce96:	2145      	movs	r1, #69	; 0x45
   1ce98:	f00d fe66 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ce9c:	e009      	b.n	1ceb2 <smp_dhkey_check+0xc6>
			if (smp->oobd_local) {
   1ce9e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1cea2:	2900      	cmp	r1, #0
   1cea4:	d0be      	beq.n	1ce24 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1cea6:	2210      	movs	r2, #16
   1cea8:	e7b9      	b.n	1ce1e <smp_dhkey_check+0x32>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ceaa:	4809      	ldr	r0, [pc, #36]	; (1ced0 <smp_dhkey_check+0xe4>)
   1ceac:	2145      	movs	r1, #69	; 0x45
   1ceae:	f00d fe5b 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ceb2:	2508      	movs	r5, #8
}
   1ceb4:	4628      	mov	r0, r5
   1ceb6:	b011      	add	sp, #68	; 0x44
   1ceb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ceba:	2101      	movs	r1, #1
   1cebc:	1d20      	adds	r0, r4, #4
   1cebe:	f010 fcb8 	bl	2d832 <atomic_set_bit>
		return 0;
   1cec2:	e7f7      	b.n	1ceb4 <smp_dhkey_check+0xc8>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1cec4:	250b      	movs	r5, #11
   1cec6:	e7f5      	b.n	1ceb4 <smp_dhkey_check+0xc8>
	return 0;
   1cec8:	2500      	movs	r5, #0
   1ceca:	e7f3      	b.n	1ceb4 <smp_dhkey_check+0xc8>
   1cecc:	00032e8c 	.word	0x00032e8c
   1ced0:	00032e6b 	.word	0x00032e6b

0001ced4 <smp_dhkey_generate>:
{
   1ced4:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ced6:	1d05      	adds	r5, r0, #4
{
   1ced8:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ceda:	2108      	movs	r1, #8
   1cedc:	4628      	mov	r0, r5
   1cede:	f010 fca8 	bl	2d832 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1cee2:	4908      	ldr	r1, [pc, #32]	; (1cf04 <smp_dhkey_generate+0x30>)
   1cee4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1cee8:	f7fb f8a0 	bl	1802c <bt_dh_key_gen>
	if (err) {
   1ceec:	b140      	cbz	r0, 1cf00 <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ceee:	2108      	movs	r1, #8
   1cef0:	4628      	mov	r0, r5
   1cef2:	f010 fc5a 	bl	2d7aa <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1cef6:	4804      	ldr	r0, [pc, #16]	; (1cf08 <smp_dhkey_generate+0x34>)
   1cef8:	2145      	movs	r1, #69	; 0x45
   1cefa:	f00d fe35 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1cefe:	2008      	movs	r0, #8
}
   1cf00:	bd38      	pop	{r3, r4, r5, pc}
   1cf02:	bf00      	nop
   1cf04:	0002dc97 	.word	0x0002dc97
   1cf08:	00032eac 	.word	0x00032eac

0001cf0c <smp_ident_info>:
{
   1cf0c:	b570      	push	{r4, r5, r6, lr}
   1cf0e:	460b      	mov	r3, r1
   1cf10:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf12:	210d      	movs	r1, #13
   1cf14:	3004      	adds	r0, #4
   1cf16:	f010 fc1e 	bl	2d756 <atomic_test_bit>
   1cf1a:	b1c8      	cbz	r0, 1cf50 <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1cf1c:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cf1e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1cf22:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1cf26:	7a19      	ldrb	r1, [r3, #8]
   1cf28:	462a      	mov	r2, r5
   1cf2a:	2002      	movs	r0, #2
   1cf2c:	f001 fc0a 	bl	1e744 <bt_keys_get_type>
		if (!keys) {
   1cf30:	b948      	cbnz	r0, 1cf46 <smp_ident_info+0x3a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1cf32:	4628      	mov	r0, r5
   1cf34:	f7f8 fc18 	bl	15768 <bt_addr_le_str>
   1cf38:	2145      	movs	r1, #69	; 0x45
   1cf3a:	4602      	mov	r2, r0
   1cf3c:	4807      	ldr	r0, [pc, #28]	; (1cf5c <smp_ident_info+0x50>)
   1cf3e:	f00d fe13 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1cf42:	2008      	movs	r0, #8
}
   1cf44:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1cf46:	2210      	movs	r2, #16
   1cf48:	4631      	mov	r1, r6
   1cf4a:	302a      	adds	r0, #42	; 0x2a
   1cf4c:	f00e fdd4 	bl	2baf8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1cf50:	4620      	mov	r0, r4
   1cf52:	2109      	movs	r1, #9
   1cf54:	f010 fc6d 	bl	2d832 <atomic_set_bit>
	return 0;
   1cf58:	2000      	movs	r0, #0
   1cf5a:	e7f3      	b.n	1cf44 <smp_ident_info+0x38>
   1cf5c:	00032eca 	.word	0x00032eca

0001cf60 <smp_encrypt_info>:
{
   1cf60:	b570      	push	{r4, r5, r6, lr}
   1cf62:	460b      	mov	r3, r1
   1cf64:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf66:	210d      	movs	r1, #13
   1cf68:	3004      	adds	r0, #4
   1cf6a:	f010 fbf4 	bl	2d756 <atomic_test_bit>
   1cf6e:	b1c8      	cbz	r0, 1cfa4 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1cf70:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cf72:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cf76:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1cf7a:	7a19      	ldrb	r1, [r3, #8]
   1cf7c:	462a      	mov	r2, r5
   1cf7e:	2004      	movs	r0, #4
   1cf80:	f001 fbe0 	bl	1e744 <bt_keys_get_type>
		if (!keys) {
   1cf84:	b948      	cbnz	r0, 1cf9a <smp_encrypt_info+0x3a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1cf86:	4628      	mov	r0, r5
   1cf88:	f7f8 fbee 	bl	15768 <bt_addr_le_str>
   1cf8c:	2145      	movs	r1, #69	; 0x45
   1cf8e:	4602      	mov	r2, r0
   1cf90:	4807      	ldr	r0, [pc, #28]	; (1cfb0 <smp_encrypt_info+0x50>)
   1cf92:	f00d fde9 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1cf96:	2008      	movs	r0, #8
}
   1cf98:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1cf9a:	2210      	movs	r2, #16
   1cf9c:	4631      	mov	r1, r6
   1cf9e:	301a      	adds	r0, #26
   1cfa0:	f00e fdaa 	bl	2baf8 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1cfa4:	4620      	mov	r0, r4
   1cfa6:	2107      	movs	r1, #7
   1cfa8:	f010 fc43 	bl	2d832 <atomic_set_bit>
	return 0;
   1cfac:	2000      	movs	r0, #0
   1cfae:	e7f3      	b.n	1cf98 <smp_encrypt_info+0x38>
   1cfb0:	00032eca 	.word	0x00032eca

0001cfb4 <bt_smp_distribute_keys>:
{
   1cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1cfb8:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (!keys) {
   1cfbc:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
{
   1cfc0:	b088      	sub	sp, #32
   1cfc2:	4604      	mov	r4, r0
	if (!keys) {
   1cfc4:	b953      	cbnz	r3, 1cfdc <bt_smp_distribute_keys+0x28>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1cfc6:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1cfca:	f7f8 fbcd 	bl	15768 <bt_addr_le_str>
   1cfce:	2145      	movs	r1, #69	; 0x45
   1cfd0:	4602      	mov	r2, r0
   1cfd2:	485b      	ldr	r0, [pc, #364]	; (1d140 <bt_smp_distribute_keys+0x18c>)
   1cfd4:	f00d fdc8 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1cfd8:	2008      	movs	r0, #8
   1cfda:	e01d      	b.n	1d018 <bt_smp_distribute_keys+0x64>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cfdc:	f100 0904 	add.w	r9, r0, #4
   1cfe0:	2105      	movs	r1, #5
   1cfe2:	4648      	mov	r0, r9
   1cfe4:	f010 fbb7 	bl	2d756 <atomic_test_bit>
   1cfe8:	b988      	cbnz	r0, 1d00e <bt_smp_distribute_keys+0x5a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1cfea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1cfee:	07da      	lsls	r2, r3, #31
   1cff0:	d50d      	bpl.n	1d00e <bt_smp_distribute_keys+0x5a>
	struct bt_keys *keys = conn->le.keys;
   1cff2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cff6:	211a      	movs	r1, #26
   1cff8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1cffa:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cffe:	f005 fa0d 	bl	2241c <bt_rand>
   1d002:	4680      	mov	r8, r0
   1d004:	b158      	cbz	r0, 1d01e <bt_smp_distribute_keys+0x6a>
			LOG_ERR("Unable to get random bytes");
   1d006:	484f      	ldr	r0, [pc, #316]	; (1d144 <bt_smp_distribute_keys+0x190>)
   1d008:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1d00a:	f00d fdad 	bl	2ab68 <z_log_minimal_printk>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1d00e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1d012:	079b      	lsls	r3, r3, #30
   1d014:	d45d      	bmi.n	1d0d2 <bt_smp_distribute_keys+0x11e>
	return 0;
   1d016:	2000      	movs	r0, #0
}
   1d018:	b008      	add	sp, #32
   1d01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1d01e:	2106      	movs	r1, #6
   1d020:	4620      	mov	r0, r4
   1d022:	f010 fc1a 	bl	2d85a <smp_create_pdu.constprop.0>
		if (!buf) {
   1d026:	4607      	mov	r7, r0
   1d028:	b910      	cbnz	r0, 1d030 <bt_smp_distribute_keys+0x7c>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1d02a:	4847      	ldr	r0, [pc, #284]	; (1d148 <bt_smp_distribute_keys+0x194>)
   1d02c:	2145      	movs	r1, #69	; 0x45
   1d02e:	e7ec      	b.n	1d00a <bt_smp_distribute_keys+0x56>
   1d030:	2110      	movs	r1, #16
   1d032:	300c      	adds	r0, #12
   1d034:	f002 f83c 	bl	1f0b0 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1d038:	7b2a      	ldrb	r2, [r5, #12]
   1d03a:	a901      	add	r1, sp, #4
   1d03c:	4682      	mov	sl, r0
   1d03e:	f00e fd5b 	bl	2baf8 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1d042:	7b28      	ldrb	r0, [r5, #12]
   1d044:	280f      	cmp	r0, #15
   1d046:	d805      	bhi.n	1d054 <bt_smp_distribute_keys+0xa0>
			(void)memset(info->ltk + keys->enc_size, 0,
   1d048:	f1c0 0210 	rsb	r2, r0, #16
   1d04c:	4641      	mov	r1, r8
   1d04e:	4450      	add	r0, sl
   1d050:	f00e fd5d 	bl	2bb0e <memset>
		smp_send(smp, buf, NULL, NULL);
   1d054:	4639      	mov	r1, r7
   1d056:	2200      	movs	r2, #0
   1d058:	4620      	mov	r0, r4
   1d05a:	f010 fbb5 	bl	2d7c8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1d05e:	2107      	movs	r1, #7
   1d060:	4620      	mov	r0, r4
   1d062:	f010 fbfa 	bl	2d85a <smp_create_pdu.constprop.0>
		if (!buf) {
   1d066:	4607      	mov	r7, r0
   1d068:	b910      	cbnz	r0, 1d070 <bt_smp_distribute_keys+0xbc>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1d06a:	4838      	ldr	r0, [pc, #224]	; (1d14c <bt_smp_distribute_keys+0x198>)
   1d06c:	2145      	movs	r1, #69	; 0x45
   1d06e:	e7cc      	b.n	1d00a <bt_smp_distribute_keys+0x56>
   1d070:	210a      	movs	r1, #10
   1d072:	300c      	adds	r0, #12
   1d074:	f002 f81c 	bl	1f0b0 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1d078:	2208      	movs	r2, #8
   1d07a:	4680      	mov	r8, r0
   1d07c:	a905      	add	r1, sp, #20
   1d07e:	3002      	adds	r0, #2
   1d080:	f00e fd3a 	bl	2baf8 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1d084:	2202      	movs	r2, #2
   1d086:	a907      	add	r1, sp, #28
   1d088:	4640      	mov	r0, r8
   1d08a:	f00e fd35 	bl	2baf8 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1d08e:	4639      	mov	r1, r7
   1d090:	4620      	mov	r0, r4
   1d092:	4a2f      	ldr	r2, [pc, #188]	; (1d150 <bt_smp_distribute_keys+0x19c>)
   1d094:	f010 fb98 	bl	2d7c8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d098:	210d      	movs	r1, #13
   1d09a:	4648      	mov	r0, r9
   1d09c:	f010 fb5b 	bl	2d756 <atomic_test_bit>
   1d0a0:	2800      	cmp	r0, #0
   1d0a2:	d0b4      	beq.n	1d00e <bt_smp_distribute_keys+0x5a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1d0a4:	4628      	mov	r0, r5
   1d0a6:	2101      	movs	r1, #1
   1d0a8:	f001 fb36 	bl	1e718 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1d0ac:	a901      	add	r1, sp, #4
   1d0ae:	2210      	movs	r2, #16
   1d0b0:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1d0b4:	f00e fd20 	bl	2baf8 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1d0b8:	a905      	add	r1, sp, #20
   1d0ba:	2208      	movs	r2, #8
   1d0bc:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1d0c0:	f00e fd1a 	bl	2baf8 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1d0c4:	2202      	movs	r2, #2
   1d0c6:	a907      	add	r1, sp, #28
   1d0c8:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d0cc:	f00e fd14 	bl	2baf8 <memcpy>
   1d0d0:	e79d      	b.n	1d00e <bt_smp_distribute_keys+0x5a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1d0d2:	2108      	movs	r1, #8
   1d0d4:	4620      	mov	r0, r4
   1d0d6:	f010 fbc0 	bl	2d85a <smp_create_pdu.constprop.0>
		if (!buf) {
   1d0da:	4605      	mov	r5, r0
   1d0dc:	b920      	cbnz	r0, 1d0e8 <bt_smp_distribute_keys+0x134>
			LOG_ERR("Unable to allocate Ident Info buffer");
   1d0de:	481d      	ldr	r0, [pc, #116]	; (1d154 <bt_smp_distribute_keys+0x1a0>)
   1d0e0:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1d0e2:	f00d fd41 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d0e6:	e777      	b.n	1cfd8 <bt_smp_distribute_keys+0x24>
   1d0e8:	2110      	movs	r1, #16
   1d0ea:	300c      	adds	r0, #12
   1d0ec:	f001 ffe0 	bl	1f0b0 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1d0f0:	7a31      	ldrb	r1, [r6, #8]
   1d0f2:	4f19      	ldr	r7, [pc, #100]	; (1d158 <bt_smp_distribute_keys+0x1a4>)
   1d0f4:	0109      	lsls	r1, r1, #4
   1d0f6:	f501 71b2 	add.w	r1, r1, #356	; 0x164
   1d0fa:	2210      	movs	r2, #16
   1d0fc:	4439      	add	r1, r7
   1d0fe:	f00e fcfb 	bl	2baf8 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1d102:	4629      	mov	r1, r5
   1d104:	2200      	movs	r2, #0
   1d106:	4620      	mov	r0, r4
   1d108:	f010 fb5e 	bl	2d7c8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1d10c:	2109      	movs	r1, #9
   1d10e:	4620      	mov	r0, r4
   1d110:	f010 fba3 	bl	2d85a <smp_create_pdu.constprop.0>
		if (!buf) {
   1d114:	4605      	mov	r5, r0
   1d116:	b910      	cbnz	r0, 1d11e <bt_smp_distribute_keys+0x16a>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1d118:	4810      	ldr	r0, [pc, #64]	; (1d15c <bt_smp_distribute_keys+0x1a8>)
   1d11a:	2145      	movs	r1, #69	; 0x45
   1d11c:	e7e1      	b.n	1d0e2 <bt_smp_distribute_keys+0x12e>
   1d11e:	2107      	movs	r1, #7
   1d120:	300c      	adds	r0, #12
   1d122:	f001 ffc5 	bl	1f0b0 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1d126:	7a31      	ldrb	r1, [r6, #8]
   1d128:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   1d12c:	4439      	add	r1, r7
   1d12e:	2207      	movs	r2, #7
   1d130:	f00e fce2 	bl	2baf8 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1d134:	4a0a      	ldr	r2, [pc, #40]	; (1d160 <bt_smp_distribute_keys+0x1ac>)
   1d136:	4629      	mov	r1, r5
   1d138:	4620      	mov	r0, r4
   1d13a:	f010 fb45 	bl	2d7c8 <smp_send.constprop.0>
   1d13e:	e76a      	b.n	1d016 <bt_smp_distribute_keys+0x62>
   1d140:	00032ee9 	.word	0x00032ee9
   1d144:	00032f03 	.word	0x00032f03
   1d148:	00032f23 	.word	0x00032f23
   1d14c:	00032f4f 	.word	0x00032f4f
   1d150:	0002dd2d 	.word	0x0002dd2d
   1d154:	00032f7c 	.word	0x00032f7c
   1d158:	20000378 	.word	0x20000378
   1d15c:	00032fa6 	.word	0x00032fa6
   1d160:	0002dd23 	.word	0x0002dd23

0001d164 <smp_send_pairing_req>:
{
   1d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d168:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1d16a:	f7ff fde1 	bl	1cd30 <smp_chan_get>
	if (!smp) {
   1d16e:	4604      	mov	r4, r0
   1d170:	2800      	cmp	r0, #0
   1d172:	f000 80b8 	beq.w	1d2e6 <smp_send_pairing_req+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d176:	1d07      	adds	r7, r0, #4
   1d178:	2104      	movs	r1, #4
   1d17a:	4638      	mov	r0, r7
   1d17c:	f010 faeb 	bl	2d756 <atomic_test_bit>
   1d180:	2800      	cmp	r0, #0
   1d182:	f040 80b3 	bne.w	1d2ec <smp_send_pairing_req+0x188>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d186:	2102      	movs	r1, #2
   1d188:	4638      	mov	r0, r7
   1d18a:	f010 fae4 	bl	2d756 <atomic_test_bit>
   1d18e:	2800      	cmp	r0, #0
   1d190:	f040 80a4 	bne.w	1d2dc <smp_send_pairing_req+0x178>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d194:	2103      	movs	r1, #3
   1d196:	4638      	mov	r0, r7
   1d198:	f010 fadd 	bl	2d756 <atomic_test_bit>
   1d19c:	b118      	cbz	r0, 1d1a6 <smp_send_pairing_req+0x42>
		return -EBUSY;
   1d19e:	f06f 000f 	mvn.w	r0, #15
}
   1d1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d1a6:	2101      	movs	r1, #1
   1d1a8:	4638      	mov	r0, r7
   1d1aa:	f010 fad4 	bl	2d756 <atomic_test_bit>
   1d1ae:	2800      	cmp	r0, #0
   1d1b0:	d1f5      	bne.n	1d19e <smp_send_pairing_req+0x3a>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d1b2:	4620      	mov	r0, r4
   1d1b4:	f7ff fd78 	bl	1cca8 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d1b8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d1bc:	7a9b      	ldrb	r3, [r3, #10]
   1d1be:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d1c0:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1d1c2:	d015      	beq.n	1d1f0 <smp_send_pairing_req+0x8c>
   1d1c4:	d805      	bhi.n	1d1d2 <smp_send_pairing_req+0x6e>
   1d1c6:	3b01      	subs	r3, #1
   1d1c8:	2b01      	cmp	r3, #1
   1d1ca:	d91b      	bls.n	1d204 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   1d1cc:	f06f 0015 	mvn.w	r0, #21
   1d1d0:	e7e7      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d1d2:	2b04      	cmp	r3, #4
   1d1d4:	d1fa      	bne.n	1d1cc <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d1d6:	4620      	mov	r0, r4
   1d1d8:	f7ff fd84 	bl	1cce4 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d1dc:	2803      	cmp	r0, #3
   1d1de:	d104      	bne.n	1d1ea <smp_send_pairing_req+0x86>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d1e0:	2e00      	cmp	r6, #0
   1d1e2:	d0f3      	beq.n	1d1cc <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d1e4:	68f3      	ldr	r3, [r6, #12]
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	d0f0      	beq.n	1d1cc <smp_send_pairing_req+0x68>
   1d1ea:	4b42      	ldr	r3, [pc, #264]	; (1d2f4 <smp_send_pairing_req+0x190>)
   1d1ec:	781b      	ldrb	r3, [r3, #0]
   1d1ee:	e007      	b.n	1d200 <smp_send_pairing_req+0x9c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d1f0:	4620      	mov	r0, r4
   1d1f2:	f7ff fd77 	bl	1cce4 <get_io_capa>
   1d1f6:	2803      	cmp	r0, #3
   1d1f8:	d104      	bne.n	1d204 <smp_send_pairing_req+0xa0>
   1d1fa:	2e00      	cmp	r6, #0
   1d1fc:	d0e6      	beq.n	1d1cc <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1d1fe:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d200:	2b00      	cmp	r3, #0
   1d202:	d0e3      	beq.n	1d1cc <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   1d204:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1d208:	b16b      	cbz	r3, 1d226 <smp_send_pairing_req+0xc2>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d20a:	2100      	movs	r1, #0
   1d20c:	22ec      	movs	r2, #236	; 0xec
   1d20e:	4620      	mov	r0, r4
   1d210:	f00e fc7d 	bl	2bb0e <memset>
	if (bt_rand(smp->prnd, 16)) {
   1d214:	2110      	movs	r1, #16
   1d216:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d21a:	f005 f8ff 	bl	2241c <bt_rand>
   1d21e:	b170      	cbz	r0, 1d23e <smp_send_pairing_req+0xda>
		return -ENOBUFS;
   1d220:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d224:	e7bd      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d226:	7a28      	ldrb	r0, [r5, #8]
   1d228:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1d22c:	f001 f99c 	bl	1e568 <bt_keys_get_addr>
   1d230:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1d234:	2800      	cmp	r0, #0
   1d236:	d1e8      	bne.n	1d20a <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   1d238:	f06f 000b 	mvn.w	r0, #11
   1d23c:	e7b1      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1d23e:	2105      	movs	r1, #5
   1d240:	4620      	mov	r0, r4
   1d242:	f010 faf6 	bl	2d832 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1d246:	f7fa fee1 	bl	1800c <bt_pub_key_get>
   1d24a:	4b2b      	ldr	r3, [pc, #172]	; (1d2f8 <smp_send_pairing_req+0x194>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1d24c:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1d24e:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1d250:	4620      	mov	r0, r4
   1d252:	f010 fb02 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d256:	4680      	mov	r8, r0
   1d258:	2800      	cmp	r0, #0
   1d25a:	d0e1      	beq.n	1d220 <smp_send_pairing_req+0xbc>
   1d25c:	2106      	movs	r1, #6
   1d25e:	300c      	adds	r0, #12
   1d260:	f001 ff26 	bl	1f0b0 <net_buf_simple_add>
	if (sc_supported) {
   1d264:	4b23      	ldr	r3, [pc, #140]	; (1d2f4 <smp_send_pairing_req+0x190>)
   1d266:	781b      	ldrb	r3, [r3, #0]
   1d268:	4605      	mov	r5, r0
		auth &= BT_SMP_AUTH_MASK_SC;
   1d26a:	2b00      	cmp	r3, #0
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d26c:	4620      	mov	r0, r4
		auth &= BT_SMP_AUTH_MASK_SC;
   1d26e:	bf14      	ite	ne
   1d270:	2609      	movne	r6, #9
   1d272:	2601      	moveq	r6, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d274:	f7ff fd36 	bl	1cce4 <get_io_capa>
	if (bondable) {
   1d278:	4b20      	ldr	r3, [pc, #128]	; (1d2fc <smp_send_pairing_req+0x198>)
   1d27a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d27c:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1d27e:	bf18      	it	ne
   1d280:	f046 0604 	orrne.w	r6, r6, #4
	if (bondable) {
   1d284:	b363      	cbz	r3, 1d2e0 <smp_send_pairing_req+0x17c>
		auth |= BT_SMP_AUTH_BONDING;
   1d286:	f046 0601 	orr.w	r6, r6, #1
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1d28a:	70ae      	strb	r6, [r5, #2]
	req->io_capability = get_io_capa(smp);
   1d28c:	4620      	mov	r0, r4
   1d28e:	f7ff fd29 	bl	1cce4 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d292:	4b1b      	ldr	r3, [pc, #108]	; (1d300 <smp_send_pairing_req+0x19c>)
	req->io_capability = get_io_capa(smp);
   1d294:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d296:	781b      	ldrb	r3, [r3, #0]
   1d298:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1d29a:	2310      	movs	r3, #16
   1d29c:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
   1d29e:	2603      	movs	r6, #3
	smp->local_dist = SEND_KEYS;
   1d2a0:	f240 3303 	movw	r3, #771	; 0x303
	req->init_key_dist = SEND_KEYS;
   1d2a4:	712e      	strb	r6, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   1d2a6:	716e      	strb	r6, [r5, #5]
	smp->local_dist = SEND_KEYS;
   1d2a8:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1d2ac:	2301      	movs	r3, #1
   1d2ae:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1d2b0:	2206      	movs	r2, #6
   1d2b2:	4629      	mov	r1, r5
   1d2b4:	f104 000a 	add.w	r0, r4, #10
   1d2b8:	f00e fc1e 	bl	2baf8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d2bc:	2200      	movs	r2, #0
   1d2be:	4641      	mov	r1, r8
   1d2c0:	4620      	mov	r0, r4
   1d2c2:	f010 fa81 	bl	2d7c8 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	2102      	movs	r1, #2
   1d2ca:	f010 fab2 	bl	2d832 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1d2ce:	210b      	movs	r1, #11
   1d2d0:	f010 faaf 	bl	2d832 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1d2d4:	4631      	mov	r1, r6
   1d2d6:	4638      	mov	r0, r7
   1d2d8:	f010 faab 	bl	2d832 <atomic_set_bit>
		return 0;
   1d2dc:	2000      	movs	r0, #0
   1d2de:	e760      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
		auth &= ~BT_SMP_AUTH_BONDING;
   1d2e0:	f006 060c 	and.w	r6, r6, #12
   1d2e4:	e7d1      	b.n	1d28a <smp_send_pairing_req+0x126>
		return -ENOTCONN;
   1d2e6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d2ea:	e75a      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
		return -EIO;
   1d2ec:	f06f 0004 	mvn.w	r0, #4
   1d2f0:	e757      	b.n	1d1a2 <smp_send_pairing_req+0x3e>
   1d2f2:	bf00      	nop
   1d2f4:	2000441f 	.word	0x2000441f
   1d2f8:	200034c8 	.word	0x200034c8
   1d2fc:	20000a34 	.word	0x20000a34
   1d300:	20004420 	.word	0x20004420

0001d304 <smp_security_request>:
{
   1d304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d308:	1d06      	adds	r6, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d30a:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   1d30e:	68cb      	ldr	r3, [r1, #12]
{
   1d310:	4607      	mov	r7, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d312:	2102      	movs	r1, #2
   1d314:	4630      	mov	r0, r6
   1d316:	f010 fa1e 	bl	2d756 <atomic_test_bit>
   1d31a:	2800      	cmp	r0, #0
   1d31c:	d169      	bne.n	1d3f2 <smp_security_request+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d31e:	2103      	movs	r1, #3
   1d320:	4630      	mov	r0, r6
   1d322:	f010 fa18 	bl	2d756 <atomic_test_bit>
   1d326:	2800      	cmp	r0, #0
   1d328:	d163      	bne.n	1d3f2 <smp_security_request+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d32a:	2101      	movs	r1, #1
   1d32c:	4630      	mov	r0, r6
   1d32e:	f010 fa12 	bl	2d756 <atomic_test_bit>
   1d332:	2800      	cmp	r0, #0
   1d334:	d15d      	bne.n	1d3f2 <smp_security_request+0xee>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1d336:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   1d338:	4b2f      	ldr	r3, [pc, #188]	; (1d3f8 <smp_security_request+0xf4>)
   1d33a:	781b      	ldrb	r3, [r3, #0]
   1d33c:	b17b      	cbz	r3, 1d35e <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1d33e:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   1d342:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1d346:	b16b      	cbz	r3, 1d364 <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1d348:	89db      	ldrh	r3, [r3, #14]
   1d34a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1d34e:	b9d3      	cbnz	r3, 1d386 <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   1d350:	4620      	mov	r0, r4
   1d352:	f7ff ff07 	bl	1d164 <smp_send_pairing_req>
   1d356:	2800      	cmp	r0, #0
   1d358:	db43      	blt.n	1d3e2 <smp_security_request+0xde>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1d35a:	210f      	movs	r1, #15
   1d35c:	e046      	b.n	1d3ec <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1d35e:	f005 0507 	and.w	r5, r5, #7
   1d362:	e7ee      	b.n	1d342 <smp_security_request+0x3e>
					     &conn->le.dst);
   1d364:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1d368:	7a21      	ldrb	r1, [r4, #8]
   1d36a:	4642      	mov	r2, r8
   1d36c:	2020      	movs	r0, #32
   1d36e:	f001 f935 	bl	1e5dc <bt_keys_find>
   1d372:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1d376:	b930      	cbnz	r0, 1d386 <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1d378:	7a21      	ldrb	r1, [r4, #8]
   1d37a:	4642      	mov	r2, r8
   1d37c:	2004      	movs	r0, #4
   1d37e:	f001 f92d 	bl	1e5dc <bt_keys_find>
   1d382:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1d386:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1d38a:	2900      	cmp	r1, #0
   1d38c:	d0e0      	beq.n	1d350 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1d38e:	076b      	lsls	r3, r5, #29
   1d390:	d510      	bpl.n	1d3b4 <smp_security_request+0xb0>
   1d392:	7b4b      	ldrb	r3, [r1, #13]
   1d394:	07d8      	lsls	r0, r3, #31
   1d396:	d40d      	bmi.n	1d3b4 <smp_security_request+0xb0>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1d398:	4638      	mov	r0, r7
   1d39a:	f7ff fca3 	bl	1cce4 <get_io_capa>
   1d39e:	2803      	cmp	r0, #3
			LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d3a0:	462a      	mov	r2, r5
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1d3a2:	d002      	beq.n	1d3aa <smp_security_request+0xa6>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d3a4:	4815      	ldr	r0, [pc, #84]	; (1d3fc <smp_security_request+0xf8>)
   1d3a6:	2149      	movs	r1, #73	; 0x49
   1d3a8:	e001      	b.n	1d3ae <smp_security_request+0xaa>
		LOG_WRN("Unsupported auth requirements: 0x%x, repairing", auth);
   1d3aa:	4815      	ldr	r0, [pc, #84]	; (1d400 <smp_security_request+0xfc>)
   1d3ac:	2157      	movs	r1, #87	; 0x57
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d3ae:	f00d fbdb 	bl	2ab68 <z_log_minimal_printk>
		goto pair;
   1d3b2:	e7cd      	b.n	1d350 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   1d3b4:	072a      	lsls	r2, r5, #28
   1d3b6:	d504      	bpl.n	1d3c2 <smp_security_request+0xbe>
   1d3b8:	89cb      	ldrh	r3, [r1, #14]
   1d3ba:	069b      	lsls	r3, r3, #26
   1d3bc:	d401      	bmi.n	1d3c2 <smp_security_request+0xbe>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d3be:	462a      	mov	r2, r5
   1d3c0:	e7f0      	b.n	1d3a4 <smp_security_request+0xa0>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1d3c2:	7b0b      	ldrb	r3, [r1, #12]
   1d3c4:	9300      	str	r3, [sp, #0]
   1d3c6:	f101 0218 	add.w	r2, r1, #24
   1d3ca:	f101 031a 	add.w	r3, r1, #26
   1d3ce:	4620      	mov	r0, r4
   1d3d0:	3110      	adds	r1, #16
   1d3d2:	f00e fe29 	bl	2c028 <bt_conn_le_start_encryption>
   1d3d6:	2800      	cmp	r0, #0
   1d3d8:	da07      	bge.n	1d3ea <smp_security_request+0xe6>
		LOG_ERR("Failed to start encryption");
   1d3da:	480a      	ldr	r0, [pc, #40]	; (1d404 <smp_security_request+0x100>)
   1d3dc:	2145      	movs	r1, #69	; 0x45
   1d3de:	f00d fbc3 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d3e2:	2008      	movs	r0, #8
}
   1d3e4:	b002      	add	sp, #8
   1d3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d3ea:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1d3ec:	4630      	mov	r0, r6
   1d3ee:	f010 fa20 	bl	2d832 <atomic_set_bit>
		return 0;
   1d3f2:	2000      	movs	r0, #0
   1d3f4:	e7f6      	b.n	1d3e4 <smp_security_request+0xe0>
   1d3f6:	bf00      	nop
   1d3f8:	2000441f 	.word	0x2000441f
   1d3fc:	00032fd5 	.word	0x00032fd5
   1d400:	00033001 	.word	0x00033001
   1d404:	00032e8c 	.word	0x00032e8c

0001d408 <smp_send_pairing_confirm>:
{
   1d408:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1d40a:	7a04      	ldrb	r4, [r0, #8]
   1d40c:	2c02      	cmp	r4, #2
{
   1d40e:	4605      	mov	r5, r0
	switch (smp->method) {
   1d410:	d823      	bhi.n	1d45a <smp_send_pairing_confirm+0x52>
   1d412:	b144      	cbz	r4, 1d426 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d414:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1d418:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1d41c:	40dc      	lsrs	r4, r3
   1d41e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1d422:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d426:	2103      	movs	r1, #3
   1d428:	4628      	mov	r0, r5
   1d42a:	f010 fa16 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!buf) {
   1d42e:	4606      	mov	r6, r0
   1d430:	b1d0      	cbz	r0, 1d468 <smp_send_pairing_confirm+0x60>
   1d432:	2110      	movs	r1, #16
   1d434:	300c      	adds	r0, #12
   1d436:	f001 fe3b 	bl	1f0b0 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1d43a:	9000      	str	r0, [sp, #0]
   1d43c:	4812      	ldr	r0, [pc, #72]	; (1d488 <smp_send_pairing_confirm+0x80>)
   1d43e:	4623      	mov	r3, r4
   1d440:	6800      	ldr	r0, [r0, #0]
   1d442:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1d446:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1d44a:	f010 fcd2 	bl	2ddf2 <bt_crypto_f4>
   1d44e:	4604      	mov	r4, r0
   1d450:	b178      	cbz	r0, 1d472 <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   1d452:	4630      	mov	r0, r6
   1d454:	f001 fd26 	bl	1eea4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d458:	e006      	b.n	1d468 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1d45a:	2c03      	cmp	r4, #3
   1d45c:	d007      	beq.n	1d46e <smp_send_pairing_confirm+0x66>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d45e:	480b      	ldr	r0, [pc, #44]	; (1d48c <smp_send_pairing_confirm+0x84>)
   1d460:	4622      	mov	r2, r4
   1d462:	2145      	movs	r1, #69	; 0x45
   1d464:	f00d fb80 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d468:	2008      	movs	r0, #8
}
   1d46a:	b002      	add	sp, #8
   1d46c:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1d46e:	2400      	movs	r4, #0
   1d470:	e7d9      	b.n	1d426 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1d472:	4602      	mov	r2, r0
   1d474:	4631      	mov	r1, r6
   1d476:	4628      	mov	r0, r5
   1d478:	f010 f9a6 	bl	2d7c8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d47c:	1d28      	adds	r0, r5, #4
   1d47e:	4621      	mov	r1, r4
   1d480:	f010 f993 	bl	2d7aa <atomic_clear_bit>
	return 0;
   1d484:	4620      	mov	r0, r4
   1d486:	e7f0      	b.n	1d46a <smp_send_pairing_confirm+0x62>
   1d488:	200034c8 	.word	0x200034c8
   1d48c:	00032e6b 	.word	0x00032e6b

0001d490 <smp_public_key>:
{
   1d490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d492:	460e      	mov	r6, r1
   1d494:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d496:	f7ff fc07 	bl	1cca8 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1d49a:	68f6      	ldr	r6, [r6, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d49c:	f104 0757 	add.w	r7, r4, #87	; 0x57
   1d4a0:	2220      	movs	r2, #32
   1d4a2:	4631      	mov	r1, r6
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d4a4:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d4a6:	4638      	mov	r0, r7
   1d4a8:	f00e fb26 	bl	2baf8 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1d4ac:	2220      	movs	r2, #32
   1d4ae:	18b1      	adds	r1, r6, r2
   1d4b0:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1d4b4:	f00e fb20 	bl	2baf8 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1d4b8:	4638      	mov	r0, r7
   1d4ba:	f7fa fd1f 	bl	17efc <bt_pub_key_is_debug>
   1d4be:	b9b8      	cbnz	r0, 1d4f0 <smp_public_key+0x60>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d4c0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d4c4:	78db      	ldrb	r3, [r3, #3]
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d135      	bne.n	1d536 <smp_public_key+0xa6>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d4ca:	1d26      	adds	r6, r4, #4
   1d4cc:	210e      	movs	r1, #14
   1d4ce:	4630      	mov	r0, r6
   1d4d0:	f010 f941 	bl	2d756 <atomic_test_bit>
   1d4d4:	bb88      	cbnz	r0, 1d53a <smp_public_key+0xaa>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1d4d6:	4b5f      	ldr	r3, [pc, #380]	; (1d654 <smp_public_key+0x1c4>)
   1d4d8:	2220      	movs	r2, #32
   1d4da:	6819      	ldr	r1, [r3, #0]
   1d4dc:	4638      	mov	r0, r7
   1d4de:	f00e fae4 	bl	2baaa <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d4e2:	bb50      	cbnz	r0, 1d53a <smp_public_key+0xaa>
			LOG_WRN("Remote public key rejected");
   1d4e4:	485c      	ldr	r0, [pc, #368]	; (1d658 <smp_public_key+0x1c8>)
   1d4e6:	2157      	movs	r1, #87	; 0x57
   1d4e8:	f00d fb3e 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d4ec:	2008      	movs	r0, #8
   1d4ee:	e020      	b.n	1d532 <smp_public_key+0xa2>
		LOG_INF("Remote is using Debug Public key");
   1d4f0:	485a      	ldr	r0, [pc, #360]	; (1d65c <smp_public_key+0x1cc>)
   1d4f2:	2149      	movs	r1, #73	; 0x49
   1d4f4:	f00d fb38 	bl	2ab68 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1d4f8:	210e      	movs	r1, #14
   1d4fa:	1d20      	adds	r0, r4, #4
   1d4fc:	f010 f999 	bl	2d832 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1d500:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1d504:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1d508:	b933      	cbnz	r3, 1d518 <smp_public_key+0x88>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d50a:	7a30      	ldrb	r0, [r6, #8]
   1d50c:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1d510:	f001 f82a 	bl	1e568 <bt_keys_get_addr>
   1d514:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
	if (!conn->le.keys ||
   1d518:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1d51c:	2b00      	cmp	r3, #0
   1d51e:	d0cf      	beq.n	1d4c0 <smp_public_key+0x30>
   1d520:	89da      	ldrh	r2, [r3, #14]
   1d522:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1d526:	2a00      	cmp	r2, #0
   1d528:	d0ca      	beq.n	1d4c0 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1d52a:	7b5b      	ldrb	r3, [r3, #13]
   1d52c:	0799      	lsls	r1, r3, #30
   1d52e:	d4c7      	bmi.n	1d4c0 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d530:	2003      	movs	r0, #3
}
   1d532:	b003      	add	sp, #12
   1d534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1d536:	2000      	movs	r0, #0
   1d538:	e7fb      	b.n	1d532 <smp_public_key+0xa2>
		switch (smp->method) {
   1d53a:	7a22      	ldrb	r2, [r4, #8]
   1d53c:	2a05      	cmp	r2, #5
   1d53e:	f200 8081 	bhi.w	1d644 <smp_public_key+0x1b4>
   1d542:	e8df f002 	tbb	[pc, r2]
   1d546:	4603      	.short	0x4603
   1d548:	507f0308 	.word	0x507f0308
			atomic_set_bit(smp->allowed_cmds,
   1d54c:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1d54e:	4620      	mov	r0, r4
   1d550:	f010 f96f 	bl	2d832 <atomic_set_bit>
			break;
   1d554:	e02e      	b.n	1d5b4 <smp_public_key+0x124>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d556:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d558:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d55c:	f7ff fba4 	bl	1cca8 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d560:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d562:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d564:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1d568:	f004 ff58 	bl	2241c <bt_rand>
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d1bd      	bne.n	1d4ec <smp_public_key+0x5c>
		smp->passkey %= 1000000;
   1d570:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d574:	4a3a      	ldr	r2, [pc, #232]	; (1d660 <smp_public_key+0x1d0>)
   1d576:	fbb3 f1f2 	udiv	r1, r3, r2
   1d57a:	fb02 3311 	mls	r3, r2, r1, r3
   1d57e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1d582:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d586:	b155      	cbz	r5, 1d59e <smp_public_key+0x10e>
   1d588:	682b      	ldr	r3, [r5, #0]
   1d58a:	b143      	cbz	r3, 1d59e <smp_public_key+0x10e>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d58c:	210b      	movs	r1, #11
   1d58e:	4630      	mov	r0, r6
   1d590:	f010 f94f 	bl	2d832 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1d594:	682b      	ldr	r3, [r5, #0]
   1d596:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1d59a:	4638      	mov	r0, r7
   1d59c:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1d59e:	2103      	movs	r1, #3
   1d5a0:	4620      	mov	r0, r4
   1d5a2:	f010 f946 	bl	2d832 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1d5a6:	210e      	movs	r1, #14
   1d5a8:	f010 f943 	bl	2d832 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1d5ac:	f7ff ff2c 	bl	1d408 <smp_send_pairing_confirm>
			if (err) {
   1d5b0:	2800      	cmp	r0, #0
   1d5b2:	d1be      	bne.n	1d532 <smp_public_key+0xa2>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d5b4:	4630      	mov	r0, r6
   1d5b6:	2107      	movs	r1, #7
   1d5b8:	f010 f93b 	bl	2d832 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1d5bc:	2008      	movs	r0, #8
   1d5be:	f7ff fb65 	bl	1cc8c <smp_find>
   1d5c2:	2800      	cmp	r0, #0
   1d5c4:	d1b7      	bne.n	1d536 <smp_public_key+0xa6>
		return smp_dhkey_generate(smp);
   1d5c6:	4620      	mov	r0, r4
}
   1d5c8:	b003      	add	sp, #12
   1d5ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1d5ce:	f7ff bc81 	b.w	1ced4 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d5d2:	210a      	movs	r1, #10
   1d5d4:	4630      	mov	r0, r6
   1d5d6:	f010 f92c 	bl	2d832 <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1d5da:	686b      	ldr	r3, [r5, #4]
   1d5dc:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d5e0:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1d5e2:	210e      	movs	r1, #14
   1d5e4:	e7b3      	b.n	1d54e <smp_public_key+0xbe>
			if (bt_rand(smp->prnd, 16)) {
   1d5e6:	2110      	movs	r1, #16
   1d5e8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d5ec:	f004 ff16 	bl	2241c <bt_rand>
   1d5f0:	2800      	cmp	r0, #0
   1d5f2:	f47f af7b 	bne.w	1d4ec <smp_public_key+0x5c>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d5f6:	b355      	cbz	r5, 1d64e <smp_public_key+0x1be>
   1d5f8:	68eb      	ldr	r3, [r5, #12]
   1d5fa:	b343      	cbz	r3, 1d64e <smp_public_key+0x1be>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d5fc:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1d600:	4b18      	ldr	r3, [pc, #96]	; (1d664 <smp_public_key+0x1d4>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d602:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1d604:	881b      	ldrh	r3, [r3, #0]
   1d606:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d60a:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d60c:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d60e:	b9b9      	cbnz	r1, 1d640 <smp_public_key+0x1b0>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1d610:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d612:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1d616:	d411      	bmi.n	1d63c <smp_public_key+0x1ac>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1d618:	2b00      	cmp	r3, #0
   1d61a:	bf08      	it	eq
   1d61c:	2003      	moveq	r0, #3
				smp->oobd_local = NULL;
   1d61e:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1d620:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   1d624:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
   1d628:	210c      	movs	r1, #12
   1d62a:	4630      	mov	r0, r6
   1d62c:	f010 f901 	bl	2d832 <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d630:	68eb      	ldr	r3, [r5, #12]
   1d632:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d636:	a901      	add	r1, sp, #4
   1d638:	4798      	blx	r3
			break;
   1d63a:	e7bb      	b.n	1d5b4 <smp_public_key+0x124>
		if (rsp_oob_present) {
   1d63c:	1c58      	adds	r0, r3, #1
   1d63e:	e7ee      	b.n	1d61e <smp_public_key+0x18e>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1d640:	2003      	movs	r0, #3
   1d642:	e7ec      	b.n	1d61e <smp_public_key+0x18e>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d644:	4808      	ldr	r0, [pc, #32]	; (1d668 <smp_public_key+0x1d8>)
   1d646:	2145      	movs	r1, #69	; 0x45
   1d648:	f00d fa8e 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d64c:	e74e      	b.n	1d4ec <smp_public_key+0x5c>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d64e:	2002      	movs	r0, #2
   1d650:	e76f      	b.n	1d532 <smp_public_key+0xa2>
   1d652:	bf00      	nop
   1d654:	200034c8 	.word	0x200034c8
   1d658:	0003305b 	.word	0x0003305b
   1d65c:	00033035 	.word	0x00033035
   1d660:	000f4240 	.word	0x000f4240
   1d664:	0002f5a8 	.word	0x0002f5a8
   1d668:	00032e6b 	.word	0x00032e6b

0001d66c <sc_send_public_key>:
{
   1d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d66e:	210c      	movs	r1, #12
{
   1d670:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d672:	f010 f8f2 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d676:	4604      	mov	r4, r0
   1d678:	b1b0      	cbz	r0, 1d6a8 <sc_send_public_key+0x3c>
   1d67a:	2140      	movs	r1, #64	; 0x40
   1d67c:	300c      	adds	r0, #12
   1d67e:	f001 fd17 	bl	1f0b0 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1d682:	4f0a      	ldr	r7, [pc, #40]	; (1d6ac <sc_send_public_key+0x40>)
   1d684:	2220      	movs	r2, #32
   1d686:	6839      	ldr	r1, [r7, #0]
   1d688:	4606      	mov	r6, r0
   1d68a:	f00e fa35 	bl	2baf8 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1d68e:	6839      	ldr	r1, [r7, #0]
   1d690:	2220      	movs	r2, #32
   1d692:	4411      	add	r1, r2
   1d694:	18b0      	adds	r0, r6, r2
   1d696:	f00e fa2f 	bl	2baf8 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d69a:	4628      	mov	r0, r5
   1d69c:	2200      	movs	r2, #0
   1d69e:	4621      	mov	r1, r4
   1d6a0:	f010 f892 	bl	2d7c8 <smp_send.constprop.0>
	return 0;
   1d6a4:	2000      	movs	r0, #0
}
   1d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d6a8:	2008      	movs	r0, #8
   1d6aa:	e7fc      	b.n	1d6a6 <sc_send_public_key+0x3a>
   1d6ac:	200034c8 	.word	0x200034c8

0001d6b0 <compute_and_send_central_dhcheck>:
{
   1d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6b4:	4604      	mov	r4, r0
   1d6b6:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   1d6b8:	2210      	movs	r2, #16
   1d6ba:	2100      	movs	r1, #0
   1d6bc:	a808      	add	r0, sp, #32
   1d6be:	f00e fa26 	bl	2bb0e <memset>
	switch (smp->method) {
   1d6c2:	7a22      	ldrb	r2, [r4, #8]
   1d6c4:	2a05      	cmp	r2, #5
   1d6c6:	d82c      	bhi.n	1d722 <compute_and_send_central_dhcheck+0x72>
   1d6c8:	e8df f002 	tbb	[pc, r2]
   1d6cc:	09030309 	.word	0x09030309
   1d6d0:	252b      	.short	0x252b
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1d6d2:	2204      	movs	r2, #4
   1d6d4:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d6d8:	a808      	add	r0, sp, #32
   1d6da:	f00e fa0d 	bl	2baf8 <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d6de:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d6e2:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1d6e6:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d6ea:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1d6ee:	f104 0627 	add.w	r6, r4, #39	; 0x27
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d6f2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d6f6:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1d6fa:	9200      	str	r2, [sp, #0]
   1d6fc:	3397      	adds	r3, #151	; 0x97
   1d6fe:	4642      	mov	r2, r8
   1d700:	4631      	mov	r1, r6
   1d702:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1d706:	f001 f94f 	bl	1e9a8 <bt_crypto_f5>
   1d70a:	b190      	cbz	r0, 1d732 <compute_and_send_central_dhcheck+0x82>
		LOG_ERR("Calculate LTK failed");
   1d70c:	4821      	ldr	r0, [pc, #132]	; (1d794 <compute_and_send_central_dhcheck+0xe4>)
   1d70e:	2145      	movs	r1, #69	; 0x45
   1d710:	f00d fa2a 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d714:	e009      	b.n	1d72a <compute_and_send_central_dhcheck+0x7a>
		if (smp->oobd_remote) {
   1d716:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1d71a:	2900      	cmp	r1, #0
   1d71c:	d0df      	beq.n	1d6de <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d71e:	2210      	movs	r2, #16
   1d720:	e7da      	b.n	1d6d8 <compute_and_send_central_dhcheck+0x28>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d722:	481d      	ldr	r0, [pc, #116]	; (1d798 <compute_and_send_central_dhcheck+0xe8>)
   1d724:	2145      	movs	r1, #69	; 0x45
   1d726:	f00d fa1f 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d72a:	2008      	movs	r0, #8
}
   1d72c:	b00c      	add	sp, #48	; 0x30
   1d72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d732:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d736:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1d73a:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1d73c:	9301      	str	r3, [sp, #4]
   1d73e:	af04      	add	r7, sp, #16
   1d740:	f104 030a 	add.w	r3, r4, #10
   1d744:	9202      	str	r2, [sp, #8]
   1d746:	9300      	str	r3, [sp, #0]
   1d748:	4628      	mov	r0, r5
   1d74a:	9703      	str	r7, [sp, #12]
   1d74c:	ab08      	add	r3, sp, #32
   1d74e:	4642      	mov	r2, r8
   1d750:	4631      	mov	r1, r6
   1d752:	f010 fb73 	bl	2de3c <bt_crypto_f6>
   1d756:	4605      	mov	r5, r0
   1d758:	b110      	cbz	r0, 1d760 <compute_and_send_central_dhcheck+0xb0>
		LOG_ERR("Calculate local DHKey check failed");
   1d75a:	4810      	ldr	r0, [pc, #64]	; (1d79c <compute_and_send_central_dhcheck+0xec>)
   1d75c:	2145      	movs	r1, #69	; 0x45
   1d75e:	e7d7      	b.n	1d710 <compute_and_send_central_dhcheck+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1d760:	210d      	movs	r1, #13
   1d762:	4620      	mov	r0, r4
   1d764:	f010 f865 	bl	2d832 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1d768:	210d      	movs	r1, #13
   1d76a:	f010 f876 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!buf) {
   1d76e:	4606      	mov	r6, r0
   1d770:	2800      	cmp	r0, #0
   1d772:	d0da      	beq.n	1d72a <compute_and_send_central_dhcheck+0x7a>
   1d774:	2110      	movs	r1, #16
   1d776:	300c      	adds	r0, #12
   1d778:	f001 fc9a 	bl	1f0b0 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1d77c:	2210      	movs	r2, #16
   1d77e:	4639      	mov	r1, r7
   1d780:	f00e f9ba 	bl	2baf8 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1d784:	4620      	mov	r0, r4
   1d786:	462a      	mov	r2, r5
   1d788:	4631      	mov	r1, r6
   1d78a:	f010 f81d 	bl	2d7c8 <smp_send.constprop.0>
	return 0;
   1d78e:	4628      	mov	r0, r5
   1d790:	e7cc      	b.n	1d72c <compute_and_send_central_dhcheck+0x7c>
   1d792:	bf00      	nop
   1d794:	0003307b 	.word	0x0003307b
   1d798:	00032e6b 	.word	0x00032e6b
   1d79c:	00033095 	.word	0x00033095

0001d7a0 <bt_smp_connected>:
{
   1d7a0:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1d7a2:	490b      	ldr	r1, [pc, #44]	; (1d7d0 <bt_smp_connected+0x30>)
{
   1d7a4:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1d7a6:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1d7aa:	3094      	adds	r0, #148	; 0x94
   1d7ac:	f007 fe50 	bl	25450 <k_work_init_delayable>
	smp_reset(smp);
   1d7b0:	4628      	mov	r0, r5
   1d7b2:	f010 f8a5 	bl	2d900 <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d7b6:	f3bf 8f5b 	dmb	ish
   1d7ba:	4b06      	ldr	r3, [pc, #24]	; (1d7d4 <bt_smp_connected+0x34>)
   1d7bc:	34c4      	adds	r4, #196	; 0xc4
   1d7be:	e854 2f00 	ldrex	r2, [r4]
   1d7c2:	e844 3100 	strex	r1, r3, [r4]
   1d7c6:	2900      	cmp	r1, #0
   1d7c8:	d1f9      	bne.n	1d7be <bt_smp_connected+0x1e>
   1d7ca:	f3bf 8f5b 	dmb	ish
}
   1d7ce:	bd38      	pop	{r3, r4, r5, pc}
   1d7d0:	0001e37d 	.word	0x0001e37d
   1d7d4:	20002020 	.word	0x20002020

0001d7d8 <smp_pairing_rsp>:
{
   1d7d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d7dc:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1d7de:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   1d7e2:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7e4:	f7ff fa60 	bl	1cca8 <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1d7e8:	f8d5 800c 	ldr.w	r8, [r5, #12]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d7ec:	f898 3003 	ldrb.w	r3, [r8, #3]
   1d7f0:	3b07      	subs	r3, #7
   1d7f2:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7f4:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d7f6:	d903      	bls.n	1d800 <smp_pairing_rsp+0x28>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1d7f8:	2006      	movs	r0, #6
}
   1d7fa:	b002      	add	sp, #8
   1d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   1d800:	f898 2004 	ldrb.w	r2, [r8, #4]
   1d804:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1d808:	4013      	ands	r3, r2
   1d80a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1d80e:	f898 2005 	ldrb.w	r2, [r8, #5]
   1d812:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d816:	4013      	ands	r3, r2
   1d818:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1d81c:	2302      	movs	r3, #2
   1d81e:	7423      	strb	r3, [r4, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1d820:	2206      	movs	r2, #6
   1d822:	4641      	mov	r1, r8
   1d824:	f104 0011 	add.w	r0, r4, #17
   1d828:	f00e f966 	bl	2baf8 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d82c:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d830:	071b      	lsls	r3, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d832:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d836:	d506      	bpl.n	1d846 <smp_pairing_rsp+0x6e>
   1d838:	7b23      	ldrb	r3, [r4, #12]
   1d83a:	0718      	lsls	r0, r3, #28
   1d83c:	d503      	bpl.n	1d846 <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d83e:	2105      	movs	r1, #5
   1d840:	4628      	mov	r0, r5
   1d842:	f00f fff6 	bl	2d832 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1d846:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d84a:	0699      	lsls	r1, r3, #26
   1d84c:	d506      	bpl.n	1d85c <smp_pairing_rsp+0x84>
   1d84e:	7b23      	ldrb	r3, [r4, #12]
   1d850:	069a      	lsls	r2, r3, #26
   1d852:	d503      	bpl.n	1d85c <smp_pairing_rsp+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1d854:	2114      	movs	r1, #20
   1d856:	4628      	mov	r0, r5
   1d858:	f00f ffeb 	bl	2d832 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1d85c:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d860:	07db      	lsls	r3, r3, #31
   1d862:	d506      	bpl.n	1d872 <smp_pairing_rsp+0x9a>
   1d864:	7b23      	ldrb	r3, [r4, #12]
   1d866:	07d8      	lsls	r0, r3, #31
   1d868:	d503      	bpl.n	1d872 <smp_pairing_rsp+0x9a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1d86a:	210d      	movs	r1, #13
   1d86c:	4628      	mov	r0, r5
   1d86e:	f00f ffe0 	bl	2d832 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d872:	2105      	movs	r1, #5
   1d874:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1d876:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d87a:	f00f ff6c 	bl	2d756 <atomic_test_bit>
   1d87e:	bb40      	cbnz	r0, 1d8d2 <smp_pairing_rsp+0xfa>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d880:	f1b8 0f04 	cmp.w	r8, #4
   1d884:	d845      	bhi.n	1d912 <smp_pairing_rsp+0x13a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d886:	7ae3      	ldrb	r3, [r4, #11]
   1d888:	7ca2      	ldrb	r2, [r4, #18]
   1d88a:	4013      	ands	r3, r2
   1d88c:	07d9      	lsls	r1, r3, #31
   1d88e:	d43e      	bmi.n	1d90e <smp_pairing_rsp+0x136>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d890:	7b21      	ldrb	r1, [r4, #12]
   1d892:	7ce3      	ldrb	r3, [r4, #19]
   1d894:	4319      	orrs	r1, r3
   1d896:	f011 0104 	ands.w	r1, r1, #4
   1d89a:	d011      	beq.n	1d8c0 <smp_pairing_rsp+0xe8>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1d89c:	4620      	mov	r0, r4
   1d89e:	f7ff fa21 	bl	1cce4 <get_io_capa>
   1d8a2:	4b90      	ldr	r3, [pc, #576]	; (1dae4 <smp_pairing_rsp+0x30c>)
   1d8a4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d8a8:	4498      	add	r8, r3
   1d8aa:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1d8ae:	2904      	cmp	r1, #4
   1d8b0:	d106      	bne.n	1d8c0 <smp_pairing_rsp+0xe8>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d8b2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d8b6:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1d8b8:	2b00      	cmp	r3, #0
   1d8ba:	bf14      	ite	ne
   1d8bc:	2101      	movne	r1, #1
   1d8be:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, rsp->io_capability);
   1d8c0:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1d8c2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   1d8c6:	4620      	mov	r0, r4
   1d8c8:	f00f ff4e 	bl	2d768 <update_keys_check>
   1d8cc:	bb18      	cbnz	r0, 1d916 <smp_pairing_rsp+0x13e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d8ce:	2003      	movs	r0, #3
   1d8d0:	e793      	b.n	1d7fa <smp_pairing_rsp+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1d8d2:	7b23      	ldrb	r3, [r4, #12]
   1d8d4:	7ce0      	ldrb	r0, [r4, #19]
   1d8d6:	ea03 0200 	and.w	r2, r3, r0
   1d8da:	0712      	lsls	r2, r2, #28
   1d8dc:	d506      	bpl.n	1d8ec <smp_pairing_rsp+0x114>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d8de:	7ae2      	ldrb	r2, [r4, #11]
   1d8e0:	f894 c012 	ldrb.w	ip, [r4, #18]
   1d8e4:	ea42 020c 	orr.w	r2, r2, ip
   1d8e8:	07d2      	lsls	r2, r2, #31
   1d8ea:	d4e9      	bmi.n	1d8c0 <smp_pairing_rsp+0xe8>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d8ec:	f1b8 0f04 	cmp.w	r8, #4
   1d8f0:	d80f      	bhi.n	1d912 <smp_pairing_rsp+0x13a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d8f2:	ea43 0100 	orr.w	r1, r3, r0
   1d8f6:	f011 0104 	ands.w	r1, r1, #4
   1d8fa:	d0e1      	beq.n	1d8c0 <smp_pairing_rsp+0xe8>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1d8fc:	4620      	mov	r0, r4
   1d8fe:	f7ff f9f1 	bl	1cce4 <get_io_capa>
   1d902:	4b79      	ldr	r3, [pc, #484]	; (1dae8 <smp_pairing_rsp+0x310>)
   1d904:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d908:	4443      	add	r3, r8
   1d90a:	5c19      	ldrb	r1, [r3, r0]
   1d90c:	e7d8      	b.n	1d8c0 <smp_pairing_rsp+0xe8>
		return LEGACY_OOB;
   1d90e:	2106      	movs	r1, #6
   1d910:	e7d6      	b.n	1d8c0 <smp_pairing_rsp+0xe8>
		return JUST_WORKS;
   1d912:	2100      	movs	r1, #0
   1d914:	e7d4      	b.n	1d8c0 <smp_pairing_rsp+0xe8>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1d916:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d91a:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1d91c:	2b03      	cmp	r3, #3
   1d91e:	d015      	beq.n	1d94c <smp_pairing_rsp+0x174>
   1d920:	d804      	bhi.n	1d92c <smp_pairing_rsp+0x154>
   1d922:	3b01      	subs	r3, #1
   1d924:	2b01      	cmp	r3, #1
   1d926:	d914      	bls.n	1d952 <smp_pairing_rsp+0x17a>
		return BT_SMP_ERR_UNSPECIFIED;
   1d928:	2008      	movs	r0, #8
   1d92a:	e766      	b.n	1d7fa <smp_pairing_rsp+0x22>
	switch (sec) {
   1d92c:	2b04      	cmp	r3, #4
   1d92e:	d1fb      	bne.n	1d928 <smp_pairing_rsp+0x150>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d930:	7d23      	ldrb	r3, [r4, #20]
   1d932:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1d934:	4293      	cmp	r3, r2
   1d936:	bf28      	it	cs
   1d938:	4613      	movcs	r3, r2
   1d93a:	2b10      	cmp	r3, #16
   1d93c:	f47f af5c 	bne.w	1d7f8 <smp_pairing_rsp+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d940:	2105      	movs	r1, #5
   1d942:	4628      	mov	r0, r5
   1d944:	f00f ff07 	bl	2d756 <atomic_test_bit>
   1d948:	2800      	cmp	r0, #0
   1d94a:	d0c0      	beq.n	1d8ce <smp_pairing_rsp+0xf6>
		if (smp->method == JUST_WORKS) {
   1d94c:	7a23      	ldrb	r3, [r4, #8]
   1d94e:	2b00      	cmp	r3, #0
   1d950:	d0bd      	beq.n	1d8ce <smp_pairing_rsp+0xf6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d952:	2105      	movs	r1, #5
   1d954:	4628      	mov	r0, r5
   1d956:	f00f fefe 	bl	2d756 <atomic_test_bit>
   1d95a:	2800      	cmp	r0, #0
   1d95c:	f040 8098 	bne.w	1da90 <smp_pairing_rsp+0x2b8>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d960:	4620      	mov	r0, r4
   1d962:	f7ff f9a1 	bl	1cca8 <latch_auth_cb>
   1d966:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d968:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d96a:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d96e:	f7ff f99b 	bl	1cca8 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d972:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d976:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d978:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d97c:	f000 feac 	bl	1e6d8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d980:	7a22      	ldrb	r2, [r4, #8]
   1d982:	b140      	cbz	r0, 1d996 <smp_pairing_rsp+0x1be>
   1d984:	7b43      	ldrb	r3, [r0, #13]
   1d986:	07db      	lsls	r3, r3, #31
   1d988:	d505      	bpl.n	1d996 <smp_pairing_rsp+0x1be>
   1d98a:	b922      	cbnz	r2, 1d996 <smp_pairing_rsp+0x1be>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1d98c:	4857      	ldr	r0, [pc, #348]	; (1daec <smp_pairing_rsp+0x314>)
   1d98e:	2145      	movs	r1, #69	; 0x45
   1d990:	f00d f8ea 	bl	2ab68 <z_log_minimal_printk>
	if (ret) {
   1d994:	e7c8      	b.n	1d928 <smp_pairing_rsp+0x150>
	switch (smp->method) {
   1d996:	2a06      	cmp	r2, #6
   1d998:	d85d      	bhi.n	1da56 <smp_pairing_rsp+0x27e>
   1d99a:	e8df f002 	tbb	[pc, r2]
   1d99e:	5418      	.short	0x5418
   1d9a0:	5c5c5c2d 	.word	0x5c5c5c2d
   1d9a4:	04          	.byte	0x04
   1d9a5:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d9a6:	2e00      	cmp	r6, #0
   1d9a8:	d05a      	beq.n	1da60 <smp_pairing_rsp+0x288>
   1d9aa:	68f3      	ldr	r3, [r6, #12]
   1d9ac:	2b00      	cmp	r3, #0
   1d9ae:	d057      	beq.n	1da60 <smp_pairing_rsp+0x288>
			struct bt_conn_oob_info info = {
   1d9b0:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d9b2:	210a      	movs	r1, #10
   1d9b4:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1d9b6:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d9ba:	f00f ff3a 	bl	2d832 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d9be:	68f3      	ldr	r3, [r6, #12]
   1d9c0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d9c4:	a901      	add	r1, sp, #4
   1d9c6:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d9c8:	7a23      	ldrb	r3, [r4, #8]
   1d9ca:	2b00      	cmp	r3, #0
   1d9cc:	d14a      	bne.n	1da64 <smp_pairing_rsp+0x28c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d9ce:	210f      	movs	r1, #15
   1d9d0:	4628      	mov	r0, r5
   1d9d2:	f00f fec0 	bl	2d756 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	d044      	beq.n	1da64 <smp_pairing_rsp+0x28c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d9da:	2f00      	cmp	r7, #0
   1d9dc:	d042      	beq.n	1da64 <smp_pairing_rsp+0x28c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d9de:	697b      	ldr	r3, [r7, #20]
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d03f      	beq.n	1da64 <smp_pairing_rsp+0x28c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d9e4:	4628      	mov	r0, r5
   1d9e6:	210a      	movs	r1, #10
   1d9e8:	f00f ff23 	bl	2d832 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d9ec:	697b      	ldr	r3, [r7, #20]
   1d9ee:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1d9f2:	4798      	blx	r3
		return 0;
   1d9f4:	2000      	movs	r0, #0
   1d9f6:	e700      	b.n	1d7fa <smp_pairing_rsp+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d9f8:	2104      	movs	r1, #4
   1d9fa:	eb0d 0001 	add.w	r0, sp, r1
   1d9fe:	f004 fd0d 	bl	2241c <bt_rand>
   1da02:	2800      	cmp	r0, #0
   1da04:	d190      	bne.n	1d928 <smp_pairing_rsp+0x150>
			passkey %= 1000000;
   1da06:	9b01      	ldr	r3, [sp, #4]
   1da08:	4a39      	ldr	r2, [pc, #228]	; (1daf0 <smp_pairing_rsp+0x318>)
   1da0a:	fbb3 f1f2 	udiv	r1, r3, r2
   1da0e:	fb02 3311 	mls	r3, r2, r1, r3
   1da12:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1da14:	b14e      	cbz	r6, 1da2a <smp_pairing_rsp+0x252>
   1da16:	6833      	ldr	r3, [r6, #0]
   1da18:	b13b      	cbz	r3, 1da2a <smp_pairing_rsp+0x252>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1da1a:	210b      	movs	r1, #11
   1da1c:	4628      	mov	r0, r5
   1da1e:	f00f ff08 	bl	2d832 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1da22:	6833      	ldr	r3, [r6, #0]
   1da24:	9901      	ldr	r1, [sp, #4]
   1da26:	4640      	mov	r0, r8
   1da28:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1da2a:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1da2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1da30:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1da34:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1da36:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1da3a:	0a1b      	lsrs	r3, r3, #8
   1da3c:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1da40:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1da44:	e7c0      	b.n	1d9c8 <smp_pairing_rsp+0x1f0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1da46:	4628      	mov	r0, r5
   1da48:	210a      	movs	r1, #10
   1da4a:	f00f fef2 	bl	2d832 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1da4e:	6873      	ldr	r3, [r6, #4]
   1da50:	4640      	mov	r0, r8
   1da52:	4798      	blx	r3
	if (ret) {
   1da54:	e7b8      	b.n	1d9c8 <smp_pairing_rsp+0x1f0>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1da56:	4827      	ldr	r0, [pc, #156]	; (1daf4 <smp_pairing_rsp+0x31c>)
   1da58:	2145      	movs	r1, #69	; 0x45
   1da5a:	f00d f885 	bl	2ab68 <z_log_minimal_printk>
	if (ret) {
   1da5e:	e763      	b.n	1d928 <smp_pairing_rsp+0x150>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1da60:	2002      	movs	r0, #2
   1da62:	e6ca      	b.n	1d7fa <smp_pairing_rsp+0x22>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1da64:	210a      	movs	r1, #10
   1da66:	4628      	mov	r0, r5
   1da68:	f00f fe75 	bl	2d756 <atomic_test_bit>
   1da6c:	b958      	cbnz	r0, 1da86 <smp_pairing_rsp+0x2ae>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1da6e:	4620      	mov	r0, r4
   1da70:	2103      	movs	r1, #3
   1da72:	f00f fede 	bl	2d832 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1da76:	210e      	movs	r1, #14
   1da78:	f00f fedb 	bl	2d832 <atomic_set_bit>
}
   1da7c:	b002      	add	sp, #8
   1da7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   1da82:	f00f bfbf 	b.w	2da04 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1da86:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1da88:	4628      	mov	r0, r5
   1da8a:	f00f fed2 	bl	2d832 <atomic_set_bit>
		return 0;
   1da8e:	e7b1      	b.n	1d9f4 <smp_pairing_rsp+0x21c>
	smp->local_dist &= SEND_KEYS_SC;
   1da90:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1da94:	f423 437d 	bic.w	r3, r3, #64768	; 0xfd00
   1da98:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1da9c:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1daa0:	7a23      	ldrb	r3, [r4, #8]
   1daa2:	b973      	cbnz	r3, 1dac2 <smp_pairing_rsp+0x2ea>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1daa4:	210f      	movs	r1, #15
   1daa6:	4628      	mov	r0, r5
   1daa8:	f00f fe55 	bl	2d756 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1daac:	b148      	cbz	r0, 1dac2 <smp_pairing_rsp+0x2ea>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1daae:	b146      	cbz	r6, 1dac2 <smp_pairing_rsp+0x2ea>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1dab0:	6973      	ldr	r3, [r6, #20]
   1dab2:	b133      	cbz	r3, 1dac2 <smp_pairing_rsp+0x2ea>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dab4:	4628      	mov	r0, r5
   1dab6:	210a      	movs	r1, #10
   1dab8:	f00f febb 	bl	2d832 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1dabc:	6973      	ldr	r3, [r6, #20]
   1dabe:	4638      	mov	r0, r7
   1dac0:	e797      	b.n	1d9f2 <smp_pairing_rsp+0x21a>
	if (!sc_public_key) {
   1dac2:	4b0d      	ldr	r3, [pc, #52]	; (1daf8 <smp_pairing_rsp+0x320>)
   1dac4:	681b      	ldr	r3, [r3, #0]
   1dac6:	b90b      	cbnz	r3, 1dacc <smp_pairing_rsp+0x2f4>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1dac8:	2106      	movs	r1, #6
   1daca:	e7dd      	b.n	1da88 <smp_pairing_rsp+0x2b0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1dacc:	4620      	mov	r0, r4
   1dace:	210c      	movs	r1, #12
   1dad0:	f00f feaf 	bl	2d832 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1dad4:	210b      	movs	r1, #11
   1dad6:	f00f fe68 	bl	2d7aa <atomic_clear_bit>
}
   1dada:	b002      	add	sp, #8
   1dadc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   1dae0:	f7ff bdc4 	b.w	1d66c <sc_send_public_key>
   1dae4:	000332db 	.word	0x000332db
   1dae8:	000332c2 	.word	0x000332c2
   1daec:	000330bd 	.word	0x000330bd
   1daf0:	000f4240 	.word	0x000f4240
   1daf4:	00032e6b 	.word	0x00032e6b
   1daf8:	200034c8 	.word	0x200034c8

0001dafc <smp_pairing_random>:
{
   1dafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db00:	b08c      	sub	sp, #48	; 0x30
   1db02:	4604      	mov	r4, r0
   1db04:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1db06:	f7ff f8cf 	bl	1cca8 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1db0a:	f104 0737 	add.w	r7, r4, #55	; 0x37
   1db0e:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1db10:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1db12:	2210      	movs	r2, #16
   1db14:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1db16:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1db18:	f00d ffee 	bl	2baf8 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1db1c:	2105      	movs	r1, #5
   1db1e:	4630      	mov	r0, r6
   1db20:	f00f fe19 	bl	2d756 <atomic_test_bit>
   1db24:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
   1db28:	2800      	cmp	r0, #0
   1db2a:	d159      	bne.n	1dbe0 <smp_pairing_random+0xe4>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1db2c:	f109 039e 	add.w	r3, r9, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1db30:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1db34:	f10d 0820 	add.w	r8, sp, #32
   1db38:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1db3a:	f109 0397 	add.w	r3, r9, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1db3e:	9300      	str	r3, [sp, #0]
   1db40:	f8cd 8008 	str.w	r8, [sp, #8]
   1db44:	f104 0310 	add.w	r3, r4, #16
   1db48:	f104 0209 	add.w	r2, r4, #9
   1db4c:	4639      	mov	r1, r7
   1db4e:	4650      	mov	r0, sl
   1db50:	f00f fefe 	bl	2d950 <smp_c1>
	if (err) {
   1db54:	2800      	cmp	r0, #0
   1db56:	d137      	bne.n	1dbc8 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1db58:	2210      	movs	r2, #16
   1db5a:	4641      	mov	r1, r8
   1db5c:	f104 0017 	add.w	r0, r4, #23
   1db60:	f00d ffa3 	bl	2baaa <memcmp>
   1db64:	2800      	cmp	r0, #0
   1db66:	d168      	bne.n	1dc3a <smp_pairing_random+0x13e>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1db68:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1db6c:	bb9d      	cbnz	r5, 1dbd6 <smp_pairing_random+0xda>
	memcpy(out, r2, 8);
   1db6e:	2208      	movs	r2, #8
   1db70:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1db74:	4640      	mov	r0, r8
   1db76:	f00d ffbf 	bl	2baf8 <memcpy>
	memcpy(out + 8, r1, 8);
   1db7a:	4639      	mov	r1, r7
   1db7c:	2208      	movs	r2, #8
   1db7e:	a80a      	add	r0, sp, #40	; 0x28
   1db80:	f00d ffba 	bl	2baf8 <memcpy>
	return bt_encrypt_le(k, out, out);
   1db84:	4642      	mov	r2, r8
   1db86:	4641      	mov	r1, r8
   1db88:	4650      	mov	r0, sl
   1db8a:	f010 fe69 	bl	2e860 <bt_encrypt_le>
		if (err) {
   1db8e:	4607      	mov	r7, r0
   1db90:	b9d0      	cbnz	r0, 1dbc8 <smp_pairing_random+0xcc>
		(void)memset(ediv, 0, sizeof(ediv));
   1db92:	4601      	mov	r1, r0
   1db94:	2202      	movs	r2, #2
   1db96:	a805      	add	r0, sp, #20
   1db98:	f00d ffb9 	bl	2bb0e <memset>
		(void)memset(rand, 0, sizeof(rand));
   1db9c:	2208      	movs	r2, #8
   1db9e:	4639      	mov	r1, r7
   1dba0:	a806      	add	r0, sp, #24
   1dba2:	f00d ffb4 	bl	2bb0e <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1dba6:	7d22      	ldrb	r2, [r4, #20]
   1dba8:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1dbaa:	429a      	cmp	r2, r3
   1dbac:	bf94      	ite	ls
   1dbae:	9200      	strls	r2, [sp, #0]
   1dbb0:	9300      	strhi	r3, [sp, #0]
   1dbb2:	a906      	add	r1, sp, #24
   1dbb4:	4643      	mov	r3, r8
   1dbb6:	aa05      	add	r2, sp, #20
   1dbb8:	4648      	mov	r0, r9
   1dbba:	f00e fa35 	bl	2c028 <bt_conn_le_start_encryption>
   1dbbe:	b128      	cbz	r0, 1dbcc <smp_pairing_random+0xd0>
			LOG_ERR("Failed to start encryption");
   1dbc0:	4846      	ldr	r0, [pc, #280]	; (1dcdc <smp_pairing_random+0x1e0>)
   1dbc2:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Calculate confirm failed");
   1dbc4:	f00c ffd0 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1dbc8:	2508      	movs	r5, #8
   1dbca:	e005      	b.n	1dbd8 <smp_pairing_random+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1dbcc:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dbce:	4630      	mov	r0, r6
   1dbd0:	f00f fe2f 	bl	2d832 <atomic_set_bit>
			return 0;
   1dbd4:	e000      	b.n	1dbd8 <smp_pairing_random+0xdc>
	return 0;
   1dbd6:	4605      	mov	r5, r0
}
   1dbd8:	4628      	mov	r0, r5
   1dbda:	b00c      	add	sp, #48	; 0x30
   1dbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1dbe0:	f899 5003 	ldrb.w	r5, [r9, #3]
   1dbe4:	2d00      	cmp	r5, #0
   1dbe6:	d177      	bne.n	1dcd8 <smp_pairing_random+0x1dc>
	switch (smp->method) {
   1dbe8:	7a22      	ldrb	r2, [r4, #8]
   1dbea:	2a05      	cmp	r2, #5
   1dbec:	d862      	bhi.n	1dcb4 <smp_pairing_random+0x1b8>
   1dbee:	e8df f002 	tbb	[pc, r2]
   1dbf2:	031b      	.short	0x031b
   1dbf4:	26611b03 	.word	0x26611b03
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1dbf8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1dbfc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1dc00:	40d3      	lsrs	r3, r2
   1dc02:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1dc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1dc0a:	4935      	ldr	r1, [pc, #212]	; (1dce0 <smp_pairing_random+0x1e4>)
   1dc0c:	f10d 0920 	add.w	r9, sp, #32
   1dc10:	f8cd 9000 	str.w	r9, [sp]
   1dc14:	6809      	ldr	r1, [r1, #0]
   1dc16:	463a      	mov	r2, r7
   1dc18:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1dc1c:	f010 f8e9 	bl	2ddf2 <bt_crypto_f4>
   1dc20:	b120      	cbz	r0, 1dc2c <smp_pairing_random+0x130>
		LOG_ERR("Calculate confirm failed");
   1dc22:	4830      	ldr	r0, [pc, #192]	; (1dce4 <smp_pairing_random+0x1e8>)
   1dc24:	2145      	movs	r1, #69	; 0x45
   1dc26:	e7cd      	b.n	1dbc4 <smp_pairing_random+0xc8>
	switch (smp->method) {
   1dc28:	2300      	movs	r3, #0
   1dc2a:	e7ee      	b.n	1dc0a <smp_pairing_random+0x10e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1dc2c:	2210      	movs	r2, #16
   1dc2e:	4649      	mov	r1, r9
   1dc30:	f104 0017 	add.w	r0, r4, #23
   1dc34:	f00d ff39 	bl	2baaa <memcmp>
   1dc38:	b108      	cbz	r0, 1dc3e <smp_pairing_random+0x142>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1dc3a:	2504      	movs	r5, #4
   1dc3c:	e7cc      	b.n	1dbd8 <smp_pairing_random+0xdc>
		switch (smp->method) {
   1dc3e:	7a22      	ldrb	r2, [r4, #8]
   1dc40:	2a05      	cmp	r2, #5
   1dc42:	d837      	bhi.n	1dcb4 <smp_pairing_random+0x1b8>
   1dc44:	e8df f002 	tbb	[pc, r2]
   1dc48:	031e1e3b 	.word	0x031e1e3b
   1dc4c:	3b36      	.short	0x3b36
			if (bt_crypto_g2(sc_public_key, smp->pkey, smp->prnd, smp->rrnd,
   1dc4e:	ab08      	add	r3, sp, #32
   1dc50:	4823      	ldr	r0, [pc, #140]	; (1dce0 <smp_pairing_random+0x1e4>)
   1dc52:	9300      	str	r3, [sp, #0]
   1dc54:	6800      	ldr	r0, [r0, #0]
   1dc56:	463b      	mov	r3, r7
   1dc58:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1dc5c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1dc60:	f000 ff0a 	bl	1ea78 <bt_crypto_g2>
   1dc64:	2800      	cmp	r0, #0
   1dc66:	d1af      	bne.n	1dbc8 <smp_pairing_random+0xcc>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dc68:	4630      	mov	r0, r6
   1dc6a:	210a      	movs	r1, #10
   1dc6c:	f00f fde1 	bl	2d832 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dc70:	2109      	movs	r1, #9
   1dc72:	f00f fdde 	bl	2d832 <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1dc76:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dc7a:	9908      	ldr	r1, [sp, #32]
   1dc7c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dc80:	4798      	blx	r3
			return 0;
   1dc82:	e7a9      	b.n	1dbd8 <smp_pairing_random+0xdc>
			smp->passkey_round++;
   1dc84:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1dc88:	3301      	adds	r3, #1
   1dc8a:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1dc8c:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1dc8e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1dc92:	d014      	beq.n	1dcbe <smp_pairing_random+0x1c2>
			if (bt_rand(smp->prnd, 16)) {
   1dc94:	2110      	movs	r1, #16
   1dc96:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1dc9a:	f004 fbbf 	bl	2241c <bt_rand>
   1dc9e:	2800      	cmp	r0, #0
   1dca0:	d192      	bne.n	1dbc8 <smp_pairing_random+0xcc>
			atomic_set_bit(smp->allowed_cmds,
   1dca2:	2103      	movs	r1, #3
   1dca4:	4620      	mov	r0, r4
   1dca6:	f00f fdc4 	bl	2d832 <atomic_set_bit>
}
   1dcaa:	b00c      	add	sp, #48	; 0x30
   1dcac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   1dcb0:	f7ff bbaa 	b.w	1d408 <smp_send_pairing_confirm>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dcb4:	480c      	ldr	r0, [pc, #48]	; (1dce8 <smp_pairing_random+0x1ec>)
   1dcb6:	2145      	movs	r1, #69	; 0x45
   1dcb8:	f00c ff56 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1dcbc:	e784      	b.n	1dbc8 <smp_pairing_random+0xcc>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1dcbe:	2107      	movs	r1, #7
   1dcc0:	4630      	mov	r0, r6
   1dcc2:	f00f fd48 	bl	2d756 <atomic_test_bit>
   1dcc6:	b108      	cbz	r0, 1dccc <smp_pairing_random+0x1d0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dcc8:	2109      	movs	r1, #9
   1dcca:	e780      	b.n	1dbce <smp_pairing_random+0xd2>
		return compute_and_send_central_dhcheck(smp);
   1dccc:	4620      	mov	r0, r4
}
   1dcce:	b00c      	add	sp, #48	; 0x30
   1dcd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   1dcd4:	f7ff bcec 	b.w	1d6b0 <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1dcd8:	460d      	mov	r5, r1
   1dcda:	e77d      	b.n	1dbd8 <smp_pairing_random+0xdc>
   1dcdc:	00032e8c 	.word	0x00032e8c
   1dce0:	200034c8 	.word	0x200034c8
   1dce4:	000330ef 	.word	0x000330ef
   1dce8:	00032e6b 	.word	0x00032e6b

0001dcec <smp_pairing_complete>:
{
   1dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcee:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1dcf0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1dcf4:	1d04      	adds	r4, r0, #4
	if (!status) {
   1dcf6:	bb61      	cbnz	r1, 1dd52 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1dcf8:	210d      	movs	r1, #13
   1dcfa:	4620      	mov	r0, r4
   1dcfc:	f00f fd2b 	bl	2d756 <atomic_test_bit>
		if (bond_flag) {
   1dd00:	4607      	mov	r7, r0
   1dd02:	b118      	cbz	r0, 1dd0c <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1dd04:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1dd08:	f000 fdf0 	bl	1e8ec <bt_keys_store>
	return list->head;
   1dd0c:	4b36      	ldr	r3, [pc, #216]	; (1dde8 <smp_pairing_complete+0xfc>)
   1dd0e:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1dd10:	b19b      	cbz	r3, 1dd3a <smp_pairing_complete+0x4e>
	return node->next;
   1dd12:	681c      	ldr	r4, [r3, #0]
   1dd14:	b104      	cbz	r4, 1dd18 <smp_pairing_complete+0x2c>
   1dd16:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1dd18:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1dd1c:	b113      	cbz	r3, 1dd24 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1dd1e:	4639      	mov	r1, r7
   1dd20:	4628      	mov	r0, r5
   1dd22:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1dd24:	b14c      	cbz	r4, 1dd3a <smp_pairing_complete+0x4e>
   1dd26:	4623      	mov	r3, r4
   1dd28:	68e4      	ldr	r4, [r4, #12]
   1dd2a:	681b      	ldr	r3, [r3, #0]
   1dd2c:	b11c      	cbz	r4, 1dd36 <smp_pairing_complete+0x4a>
   1dd2e:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1dd30:	2b00      	cmp	r3, #0
   1dd32:	d1f4      	bne.n	1dd1e <smp_pairing_complete+0x32>
   1dd34:	e7f7      	b.n	1dd26 <smp_pairing_complete+0x3a>
   1dd36:	2b00      	cmp	r3, #0
   1dd38:	d1f1      	bne.n	1dd1e <smp_pairing_complete+0x32>
	smp_reset(smp);
   1dd3a:	4630      	mov	r0, r6
   1dd3c:	f00f fde0 	bl	2d900 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1dd40:	7a6a      	ldrb	r2, [r5, #9]
   1dd42:	7aab      	ldrb	r3, [r5, #10]
   1dd44:	429a      	cmp	r2, r3
   1dd46:	d04d      	beq.n	1dde4 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1dd48:	4628      	mov	r0, r5
}
   1dd4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1dd4e:	f00f bf37 	b.w	2dbc0 <bt_smp_start_security>
	switch (smp_err) {
   1dd52:	3901      	subs	r1, #1
   1dd54:	b2c9      	uxtb	r1, r1
   1dd56:	290e      	cmp	r1, #14
   1dd58:	bf9c      	itt	ls
   1dd5a:	4b24      	ldrls	r3, [pc, #144]	; (1ddec <smp_pairing_complete+0x100>)
   1dd5c:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1dd5e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	if (!status) {
   1dd62:	bf88      	it	hi
   1dd64:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1dd66:	b143      	cbz	r3, 1dd7a <smp_pairing_complete+0x8e>
   1dd68:	7b1b      	ldrb	r3, [r3, #12]
   1dd6a:	bb2b      	cbnz	r3, 1ddb8 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1dd6c:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1dd70:	f000 fd0a 	bl	1e788 <bt_keys_clear>
			conn->le.keys = NULL;
   1dd74:	2300      	movs	r3, #0
   1dd76:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1dd7a:	2102      	movs	r1, #2
   1dd7c:	4620      	mov	r0, r4
   1dd7e:	f00f fcea 	bl	2d756 <atomic_test_bit>
   1dd82:	b940      	cbnz	r0, 1dd96 <smp_pairing_complete+0xaa>
	switch (err) {
   1dd84:	2f07      	cmp	r7, #7
   1dd86:	bf96      	itet	ls
   1dd88:	4b19      	ldrls	r3, [pc, #100]	; (1ddf0 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1dd8a:	211f      	movhi	r1, #31
   1dd8c:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1dd8e:	463a      	mov	r2, r7
   1dd90:	4628      	mov	r0, r5
   1dd92:	f7fa feef 	bl	18b74 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1dd96:	2103      	movs	r1, #3
   1dd98:	4620      	mov	r0, r4
   1dd9a:	f00f fcdc 	bl	2d756 <atomic_test_bit>
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	d0cb      	beq.n	1dd3a <smp_pairing_complete+0x4e>
	return list->head;
   1dda2:	4b11      	ldr	r3, [pc, #68]	; (1dde8 <smp_pairing_complete+0xfc>)
   1dda4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1dda6:	2b00      	cmp	r3, #0
   1dda8:	d0c7      	beq.n	1dd3a <smp_pairing_complete+0x4e>
	return node->next;
   1ddaa:	681c      	ldr	r4, [r3, #0]
   1ddac:	b104      	cbz	r4, 1ddb0 <smp_pairing_complete+0xc4>
   1ddae:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1ddb0:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1ddb4:	b94b      	cbnz	r3, 1ddca <smp_pairing_complete+0xde>
   1ddb6:	e00b      	b.n	1ddd0 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1ddb8:	2102      	movs	r1, #2
   1ddba:	4620      	mov	r0, r4
   1ddbc:	f00f fccb 	bl	2d756 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1ddc0:	2800      	cmp	r0, #0
   1ddc2:	d1d3      	bne.n	1dd6c <smp_pairing_complete+0x80>
   1ddc4:	e7d9      	b.n	1dd7a <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1ddc6:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1ddc8:	b123      	cbz	r3, 1ddd4 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1ddca:	4639      	mov	r1, r7
   1ddcc:	4628      	mov	r0, r5
   1ddce:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1ddd0:	2c00      	cmp	r4, #0
   1ddd2:	d0b2      	beq.n	1dd3a <smp_pairing_complete+0x4e>
   1ddd4:	4623      	mov	r3, r4
   1ddd6:	68e4      	ldr	r4, [r4, #12]
   1ddd8:	685b      	ldr	r3, [r3, #4]
   1ddda:	2c00      	cmp	r4, #0
   1dddc:	d1f3      	bne.n	1ddc6 <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1ddde:	2b00      	cmp	r3, #0
   1dde0:	d1f3      	bne.n	1ddca <smp_pairing_complete+0xde>
   1dde2:	e7aa      	b.n	1dd3a <smp_pairing_complete+0x4e>
}
   1dde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dde6:	bf00      	nop
   1dde8:	20003364 	.word	0x20003364
   1ddec:	000332b3 	.word	0x000332b3
   1ddf0:	000332a2 	.word	0x000332a2

0001ddf4 <smp_error>:
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1ddf4:	1d03      	adds	r3, r0, #4
{
   1ddf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ddf8:	4606      	mov	r6, r0
   1ddfa:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1ddfc:	4618      	mov	r0, r3
   1ddfe:	2102      	movs	r1, #2
   1de00:	f00f fca9 	bl	2d756 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1de04:	4604      	mov	r4, r0
   1de06:	b120      	cbz	r0, 1de12 <smp_error+0x1e>
   1de08:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1de0c:	fab4 f484 	clz	r4, r4
   1de10:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1de12:	2103      	movs	r1, #3
   1de14:	4618      	mov	r0, r3
   1de16:	f00f fc9e 	bl	2d756 <atomic_test_bit>
   1de1a:	b180      	cbz	r0, 1de3e <smp_error+0x4a>
		smp_pairing_complete(smp, reason);
   1de1c:	4639      	mov	r1, r7
   1de1e:	4630      	mov	r0, r6
   1de20:	f7ff ff64 	bl	1dcec <smp_pairing_complete>
	if (remote_already_completed) {
   1de24:	b1c4      	cbz	r4, 1de58 <smp_error+0x64>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1de26:	481a      	ldr	r0, [pc, #104]	; (1de90 <smp_error+0x9c>)
   1de28:	2157      	movs	r1, #87	; 0x57
   1de2a:	f00c fe9d 	bl	2ab68 <z_log_minimal_printk>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1de2e:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1de32:	2105      	movs	r1, #5
   1de34:	f00e f987 	bl	2c146 <bt_conn_disconnect>
		return 0;
   1de38:	2000      	movs	r0, #0
}
   1de3a:	b003      	add	sp, #12
   1de3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1de3e:	2101      	movs	r1, #1
   1de40:	4618      	mov	r0, r3
   1de42:	f00f fc88 	bl	2d756 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1de46:	2800      	cmp	r0, #0
   1de48:	d1e8      	bne.n	1de1c <smp_error+0x28>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1de4a:	210f      	movs	r1, #15
   1de4c:	4618      	mov	r0, r3
   1de4e:	f00f fc82 	bl	2d756 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1de52:	2800      	cmp	r0, #0
   1de54:	d1e2      	bne.n	1de1c <smp_error+0x28>
   1de56:	e7e5      	b.n	1de24 <smp_error+0x30>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1de58:	2105      	movs	r1, #5
   1de5a:	4630      	mov	r0, r6
   1de5c:	f00f fcfd 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!buf) {
   1de60:	4605      	mov	r5, r0
   1de62:	b190      	cbz	r0, 1de8a <smp_error+0x96>
   1de64:	2101      	movs	r1, #1
   1de66:	300c      	adds	r0, #12
   1de68:	f001 f922 	bl	1f0b0 <net_buf_simple_add>
	rsp->reason = reason;
   1de6c:	7007      	strb	r7, [r0, #0]
   1de6e:	9400      	str	r4, [sp, #0]
   1de70:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1de74:	4623      	mov	r3, r4
   1de76:	462a      	mov	r2, r5
   1de78:	2106      	movs	r1, #6
   1de7a:	f00e fa12 	bl	2c2a2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1de7e:	2800      	cmp	r0, #0
   1de80:	d0da      	beq.n	1de38 <smp_error+0x44>
		net_buf_unref(buf);
   1de82:	4628      	mov	r0, r5
   1de84:	f001 f80e 	bl	1eea4 <net_buf_unref>
   1de88:	e7d6      	b.n	1de38 <smp_error+0x44>
		return -ENOBUFS;
   1de8a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1de8e:	e7d4      	b.n	1de3a <smp_error+0x46>
   1de90:	0003310d 	.word	0x0003310d

0001de94 <bt_smp_recv>:
{
   1de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1de96:	8a0b      	ldrh	r3, [r1, #16]
{
   1de98:	4607      	mov	r7, r0
   1de9a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1de9c:	b92b      	cbnz	r3, 1deaa <bt_smp_recv+0x16>
		LOG_ERR("Too small SMP PDU received");
   1de9e:	4828      	ldr	r0, [pc, #160]	; (1df40 <bt_smp_recv+0xac>)
   1dea0:	2145      	movs	r1, #69	; 0x45
   1dea2:	f00c fe61 	bl	2ab68 <z_log_minimal_printk>
}
   1dea6:	2000      	movs	r0, #0
   1dea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1deaa:	2101      	movs	r1, #1
   1deac:	f105 000c 	add.w	r0, r5, #12
   1deb0:	f001 f8e4 	bl	1f07c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1deb4:	2104      	movs	r1, #4
   1deb6:	4606      	mov	r6, r0
   1deb8:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1debc:	f00f fc4b 	bl	2d756 <atomic_test_bit>
   1dec0:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1dec4:	7832      	ldrb	r2, [r6, #0]
   1dec6:	b120      	cbz	r0, 1ded2 <bt_smp_recv+0x3e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1dec8:	481e      	ldr	r0, [pc, #120]	; (1df44 <bt_smp_recv+0xb0>)
   1deca:	2157      	movs	r1, #87	; 0x57
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1decc:	f00c fe4c 	bl	2ab68 <z_log_minimal_printk>
		return 0;
   1ded0:	e7e9      	b.n	1dea6 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1ded2:	2a0e      	cmp	r2, #14
   1ded4:	d902      	bls.n	1dedc <bt_smp_recv+0x48>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1ded6:	481c      	ldr	r0, [pc, #112]	; (1df48 <bt_smp_recv+0xb4>)
   1ded8:	2157      	movs	r1, #87	; 0x57
   1deda:	e7f7      	b.n	1decc <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1dedc:	4f1b      	ldr	r7, [pc, #108]	; (1df4c <bt_smp_recv+0xb8>)
   1dede:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1dee2:	b943      	cbnz	r3, 1def6 <bt_smp_recv+0x62>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1dee4:	2157      	movs	r1, #87	; 0x57
   1dee6:	481a      	ldr	r0, [pc, #104]	; (1df50 <bt_smp_recv+0xbc>)
   1dee8:	f00c fe3e 	bl	2ab68 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1deec:	2107      	movs	r1, #7
		smp_error(smp, err);
   1deee:	4620      	mov	r0, r4
   1def0:	f7ff ff80 	bl	1ddf4 <smp_error>
   1def4:	e7d7      	b.n	1dea6 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1def6:	4611      	mov	r1, r2
   1def8:	4620      	mov	r0, r4
   1defa:	f00f fc84 	bl	2d806 <atomic_test_and_clear_bit>
   1defe:	7833      	ldrb	r3, [r6, #0]
   1df00:	b948      	cbnz	r0, 1df16 <bt_smp_recv+0x82>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1df02:	461a      	mov	r2, r3
   1df04:	4813      	ldr	r0, [pc, #76]	; (1df54 <bt_smp_recv+0xc0>)
   1df06:	2157      	movs	r1, #87	; 0x57
   1df08:	f00c fe2e 	bl	2ab68 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1df0c:	7833      	ldrb	r3, [r6, #0]
   1df0e:	2b05      	cmp	r3, #5
   1df10:	d0c9      	beq.n	1dea6 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1df12:	2108      	movs	r1, #8
   1df14:	e7eb      	b.n	1deee <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1df16:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1df1a:	8a2a      	ldrh	r2, [r5, #16]
   1df1c:	7909      	ldrb	r1, [r1, #4]
   1df1e:	4291      	cmp	r1, r2
   1df20:	d005      	beq.n	1df2e <bt_smp_recv+0x9a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1df22:	2145      	movs	r1, #69	; 0x45
   1df24:	480c      	ldr	r0, [pc, #48]	; (1df58 <bt_smp_recv+0xc4>)
   1df26:	f00c fe1f 	bl	2ab68 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1df2a:	210a      	movs	r1, #10
   1df2c:	e7df      	b.n	1deee <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1df2e:	4629      	mov	r1, r5
   1df30:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1df34:	4620      	mov	r0, r4
   1df36:	4798      	blx	r3
	if (err) {
   1df38:	4601      	mov	r1, r0
   1df3a:	2800      	cmp	r0, #0
   1df3c:	d0b3      	beq.n	1dea6 <bt_smp_recv+0x12>
   1df3e:	e7d6      	b.n	1deee <bt_smp_recv+0x5a>
   1df40:	0003316a 	.word	0x0003316a
   1df44:	0003318a 	.word	0x0003318a
   1df48:	000331c0 	.word	0x000331c0
   1df4c:	0002fa8c 	.word	0x0002fa8c
   1df50:	000331e7 	.word	0x000331e7
   1df54:	00033206 	.word	0x00033206
   1df58:	00032813 	.word	0x00032813

0001df5c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1df5c:	4b17      	ldr	r3, [pc, #92]	; (1dfbc <bt_smp_pkey_ready+0x60>)
{
   1df5e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1df60:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1df62:	b928      	cbnz	r0, 1df70 <bt_smp_pkey_ready+0x14>
}
   1df64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Public key not available");
   1df68:	4815      	ldr	r0, [pc, #84]	; (1dfc0 <bt_smp_pkey_ready+0x64>)
   1df6a:	2157      	movs	r1, #87	; 0x57
   1df6c:	f00c bdfc 	b.w	2ab68 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1df70:	4c14      	ldr	r4, [pc, #80]	; (1dfc4 <bt_smp_pkey_ready+0x68>)
	z_impl_k_sem_give(sem);
   1df72:	4815      	ldr	r0, [pc, #84]	; (1dfc8 <bt_smp_pkey_ready+0x6c>)
   1df74:	f006 fec6 	bl	24d04 <z_impl_k_sem_give>
   1df78:	f3bf 8f5b 	dmb	ish
   1df7c:	6823      	ldr	r3, [r4, #0]
   1df7e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1df82:	065b      	lsls	r3, r3, #25
   1df84:	d518      	bpl.n	1dfb8 <bt_smp_pkey_ready+0x5c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1df86:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1df8a:	78db      	ldrb	r3, [r3, #3]
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1df8c:	3c04      	subs	r4, #4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1df8e:	b99b      	cbnz	r3, 1dfb8 <bt_smp_pkey_ready+0x5c>
			err = sc_send_public_key(smp);
   1df90:	4620      	mov	r0, r4
   1df92:	f7ff fb6b 	bl	1d66c <sc_send_public_key>
			if (err) {
   1df96:	4601      	mov	r1, r0
   1df98:	b110      	cbz	r0, 1dfa0 <bt_smp_pkey_ready+0x44>
				smp_error(smp, err);
   1df9a:	4620      	mov	r0, r4
   1df9c:	f7ff ff2a 	bl	1ddf4 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dfa0:	f3bf 8f5b 	dmb	ish
   1dfa4:	e854 3f00 	ldrex	r3, [r4]
   1dfa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1dfac:	e844 3200 	strex	r2, r3, [r4]
   1dfb0:	2a00      	cmp	r2, #0
   1dfb2:	d1f7      	bne.n	1dfa4 <bt_smp_pkey_ready+0x48>
   1dfb4:	f3bf 8f5b 	dmb	ish
}
   1dfb8:	bd10      	pop	{r4, pc}
   1dfba:	bf00      	nop
   1dfbc:	200034c8 	.word	0x200034c8
   1dfc0:	00033226 	.word	0x00033226
   1dfc4:	20002024 	.word	0x20002024
   1dfc8:	20000b84 	.word	0x20000b84

0001dfcc <smp_ident_addr_info>:
{
   1dfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dfd0:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1dfd4:	68ce      	ldr	r6, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1dfd6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1dfda:	f023 0302 	bic.w	r3, r3, #2
   1dfde:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1dfe2:	7833      	ldrb	r3, [r6, #0]
{
   1dfe4:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1dfe6:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1dfea:	b1bb      	cbz	r3, 1e01c <smp_ident_addr_info+0x50>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1dfec:	79b3      	ldrb	r3, [r6, #6]
   1dfee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dff2:	2bc0      	cmp	r3, #192	; 0xc0
   1dff4:	d012      	beq.n	1e01c <smp_ident_addr_info+0x50>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1dff6:	4630      	mov	r0, r6
   1dff8:	f7f7 fbb6 	bl	15768 <bt_addr_le_str>
   1dffc:	2145      	movs	r1, #69	; 0x45
   1dffe:	4602      	mov	r2, r0
   1e000:	4844      	ldr	r0, [pc, #272]	; (1e114 <smp_ident_addr_info+0x148>)
   1e002:	f00c fdb1 	bl	2ab68 <z_log_minimal_printk>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1e006:	4640      	mov	r0, r8
   1e008:	f7f7 fbae 	bl	15768 <bt_addr_le_str>
   1e00c:	2145      	movs	r1, #69	; 0x45
   1e00e:	4602      	mov	r2, r0
   1e010:	4841      	ldr	r0, [pc, #260]	; (1e118 <smp_ident_addr_info+0x14c>)
   1e012:	f00c fda9 	bl	2ab68 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1e016:	200a      	movs	r0, #10
}
   1e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1e01c:	2207      	movs	r2, #7
   1e01e:	4631      	mov	r1, r6
   1e020:	4640      	mov	r0, r8
   1e022:	f00d fd42 	bl	2baaa <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1e026:	b168      	cbz	r0, 1e044 <smp_ident_addr_info+0x78>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1e028:	7a28      	ldrb	r0, [r5, #8]
   1e02a:	4631      	mov	r1, r6
   1e02c:	f000 fb54 	bl	1e6d8 <bt_keys_find_addr>
		if (keys) {
   1e030:	4607      	mov	r7, r0
   1e032:	b138      	cbz	r0, 1e044 <smp_ident_addr_info+0x78>
			if (!update_keys_check(smp, keys)) {
   1e034:	4601      	mov	r1, r0
   1e036:	4620      	mov	r0, r4
   1e038:	f00f fb96 	bl	2d768 <update_keys_check>
   1e03c:	b338      	cbz	r0, 1e08e <smp_ident_addr_info+0xc2>
			bt_keys_clear(keys);
   1e03e:	4638      	mov	r0, r7
   1e040:	f000 fba2 	bl	1e788 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e044:	210d      	movs	r1, #13
   1e046:	1d20      	adds	r0, r4, #4
   1e048:	f00f fb85 	bl	2d756 <atomic_test_bit>
   1e04c:	b980      	cbnz	r0, 1e070 <smp_ident_addr_info+0xa4>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e04e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e052:	075b      	lsls	r3, r3, #29
   1e054:	d503      	bpl.n	1e05e <smp_ident_addr_info+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e056:	210a      	movs	r1, #10
   1e058:	4620      	mov	r0, r4
   1e05a:	f00f fbea 	bl	2d832 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e05e:	78eb      	ldrb	r3, [r5, #3]
   1e060:	2b00      	cmp	r3, #0
   1e062:	d049      	beq.n	1e0f8 <smp_ident_addr_info+0x12c>
	if (!smp->local_dist && !smp->remote_dist) {
   1e064:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e068:	2900      	cmp	r1, #0
   1e06a:	d04f      	beq.n	1e10c <smp_ident_addr_info+0x140>
	return 0;
   1e06c:	2000      	movs	r0, #0
   1e06e:	e7d3      	b.n	1e018 <smp_ident_addr_info+0x4c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e070:	7a29      	ldrb	r1, [r5, #8]
   1e072:	4642      	mov	r2, r8
   1e074:	2002      	movs	r0, #2
   1e076:	f000 fb65 	bl	1e744 <bt_keys_get_type>
		if (!keys) {
   1e07a:	4607      	mov	r7, r0
   1e07c:	b948      	cbnz	r0, 1e092 <smp_ident_addr_info+0xc6>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e07e:	4640      	mov	r0, r8
   1e080:	f7f7 fb72 	bl	15768 <bt_addr_le_str>
   1e084:	2145      	movs	r1, #69	; 0x45
   1e086:	4602      	mov	r2, r0
   1e088:	4824      	ldr	r0, [pc, #144]	; (1e11c <smp_ident_addr_info+0x150>)
   1e08a:	f00c fd6d 	bl	2ab68 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1e08e:	2008      	movs	r0, #8
   1e090:	e7c2      	b.n	1e018 <smp_ident_addr_info+0x4c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e092:	78eb      	ldrb	r3, [r5, #3]
   1e094:	bb6b      	cbnz	r3, 1e0f2 <smp_ident_addr_info+0x126>
			dst = &conn->le.resp_addr;
   1e096:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e09a:	780b      	ldrb	r3, [r1, #0]
   1e09c:	2b01      	cmp	r3, #1
   1e09e:	d120      	bne.n	1e0e2 <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1e0a0:	798b      	ldrb	r3, [r1, #6]
   1e0a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e0a6:	2b40      	cmp	r3, #64	; 0x40
   1e0a8:	d11b      	bne.n	1e0e2 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1e0aa:	2206      	movs	r2, #6
   1e0ac:	3101      	adds	r1, #1
   1e0ae:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   1e0b2:	f00d fd21 	bl	2baf8 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e0b6:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1e0ba:	b193      	cbz	r3, 1e0e2 <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1e0bc:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1e0c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e0c4:	2bc0      	cmp	r3, #192	; 0xc0
   1e0c6:	d00c      	beq.n	1e0e2 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1e0c8:	2207      	movs	r2, #7
   1e0ca:	4631      	mov	r1, r6
   1e0cc:	1c78      	adds	r0, r7, #1
   1e0ce:	f00d fd13 	bl	2baf8 <memcpy>
   1e0d2:	2207      	movs	r2, #7
   1e0d4:	4631      	mov	r1, r6
   1e0d6:	4640      	mov	r0, r8
   1e0d8:	f00d fd0e 	bl	2baf8 <memcpy>
				bt_conn_identity_resolved(conn);
   1e0dc:	4628      	mov	r0, r5
   1e0de:	f7fa fd0b 	bl	18af8 <bt_conn_identity_resolved>
		err = smp_id_add_replace(smp, keys);
   1e0e2:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   1e0e6:	4639      	mov	r1, r7
   1e0e8:	f7fe fe4e 	bl	1cd88 <smp_id_add_replace.isra.0>
		if (err) {
   1e0ec:	2800      	cmp	r0, #0
   1e0ee:	d0ae      	beq.n	1e04e <smp_ident_addr_info+0x82>
   1e0f0:	e792      	b.n	1e018 <smp_ident_addr_info+0x4c>
			dst = &conn->le.init_addr;
   1e0f2:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1e0f6:	e7d0      	b.n	1e09a <smp_ident_addr_info+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1e0f8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e0fc:	2b00      	cmp	r3, #0
   1e0fe:	d1b1      	bne.n	1e064 <smp_ident_addr_info+0x98>
		err = bt_smp_distribute_keys(smp);
   1e100:	4620      	mov	r0, r4
   1e102:	f7fe ff57 	bl	1cfb4 <bt_smp_distribute_keys>
		if (err) {
   1e106:	2800      	cmp	r0, #0
   1e108:	d0ac      	beq.n	1e064 <smp_ident_addr_info+0x98>
   1e10a:	e785      	b.n	1e018 <smp_ident_addr_info+0x4c>
		smp_pairing_complete(smp, 0);
   1e10c:	4620      	mov	r0, r4
   1e10e:	f7ff fded 	bl	1dcec <smp_pairing_complete>
   1e112:	e7ab      	b.n	1e06c <smp_ident_addr_info+0xa0>
   1e114:	00033244 	.word	0x00033244
   1e118:	0003325d 	.word	0x0003325d
   1e11c:	00032eca 	.word	0x00032eca

0001e120 <smp_check_complete>:
{
   1e120:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1e122:	7883      	ldrb	r3, [r0, #2]
   1e124:	2b01      	cmp	r3, #1
{
   1e126:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   1e128:	d11c      	bne.n	1e164 <smp_check_complete+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1e12a:	2106      	movs	r1, #6
   1e12c:	f00e f8f0 	bl	2c310 <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1e130:	b950      	cbnz	r0, 1e148 <smp_check_complete+0x28>
   1e132:	490d      	ldr	r1, [pc, #52]	; (1e168 <smp_check_complete+0x48>)
   1e134:	480d      	ldr	r0, [pc, #52]	; (1e16c <smp_check_complete+0x4c>)
   1e136:	f240 2265 	movw	r2, #613	; 0x265
   1e13a:	f00c fd07 	bl	2ab4c <assert_print>
   1e13e:	480a      	ldr	r0, [pc, #40]	; (1e168 <smp_check_complete+0x48>)
   1e140:	f240 2165 	movw	r1, #613	; 0x265
   1e144:	f00c fcfb 	bl	2ab3e <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1e148:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1e14c:	ea23 0104 	bic.w	r1, r3, r4
   1e150:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1e154:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1e158:	b921      	cbnz	r1, 1e164 <smp_check_complete+0x44>
}
   1e15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1e15e:	38ec      	subs	r0, #236	; 0xec
   1e160:	f7ff bdc4 	b.w	1dcec <smp_pairing_complete>
}
   1e164:	bd10      	pop	{r4, pc}
   1e166:	bf00      	nop
   1e168:	00032dfc 	.word	0x00032dfc
   1e16c:	0003013d 	.word	0x0003013d

0001e170 <smp_central_ident>:
{
   1e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e174:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e176:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1e17a:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e17c:	210d      	movs	r1, #13
   1e17e:	3004      	adds	r0, #4
   1e180:	f00f fae9 	bl	2d756 <atomic_test_bit>
   1e184:	b1f8      	cbz	r0, 1e1c6 <smp_central_ident+0x56>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e186:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1e18a:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1e18c:	68df      	ldr	r7, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e18e:	4642      	mov	r2, r8
   1e190:	2004      	movs	r0, #4
   1e192:	f000 fad7 	bl	1e744 <bt_keys_get_type>
		if (!keys) {
   1e196:	4605      	mov	r5, r0
   1e198:	b950      	cbnz	r0, 1e1b0 <smp_central_ident+0x40>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e19a:	4640      	mov	r0, r8
   1e19c:	f7f7 fae4 	bl	15768 <bt_addr_le_str>
   1e1a0:	2145      	movs	r1, #69	; 0x45
   1e1a2:	4602      	mov	r2, r0
   1e1a4:	481a      	ldr	r0, [pc, #104]	; (1e210 <smp_central_ident+0xa0>)
   1e1a6:	f00c fcdf 	bl	2ab68 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1e1aa:	2008      	movs	r0, #8
}
   1e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1e1b0:	2202      	movs	r2, #2
   1e1b2:	4639      	mov	r1, r7
   1e1b4:	3018      	adds	r0, #24
   1e1b6:	f00d fc9f 	bl	2baf8 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1e1ba:	2208      	movs	r2, #8
   1e1bc:	1cb9      	adds	r1, r7, #2
   1e1be:	f105 0010 	add.w	r0, r5, #16
   1e1c2:	f00d fc99 	bl	2baf8 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1e1c6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e1ca:	f023 0201 	bic.w	r2, r3, #1
   1e1ce:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e1d2:	079a      	lsls	r2, r3, #30
   1e1d4:	d50a      	bpl.n	1e1ec <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e1d6:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e1d8:	4620      	mov	r0, r4
   1e1da:	f00f fb2a 	bl	2d832 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e1de:	78f3      	ldrb	r3, [r6, #3]
   1e1e0:	b143      	cbz	r3, 1e1f4 <smp_central_ident+0x84>
	if (!smp->local_dist && !smp->remote_dist) {
   1e1e2:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e1e6:	b179      	cbz	r1, 1e208 <smp_central_ident+0x98>
	return 0;
   1e1e8:	2000      	movs	r0, #0
   1e1ea:	e7df      	b.n	1e1ac <smp_central_ident+0x3c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e1ec:	075b      	lsls	r3, r3, #29
   1e1ee:	d5f6      	bpl.n	1e1de <smp_central_ident+0x6e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e1f0:	210a      	movs	r1, #10
   1e1f2:	e7f1      	b.n	1e1d8 <smp_central_ident+0x68>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1e1f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e1f8:	2b00      	cmp	r3, #0
   1e1fa:	d1f2      	bne.n	1e1e2 <smp_central_ident+0x72>
		err = bt_smp_distribute_keys(smp);
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	f7fe fed9 	bl	1cfb4 <bt_smp_distribute_keys>
		if (err) {
   1e202:	2800      	cmp	r0, #0
   1e204:	d0ed      	beq.n	1e1e2 <smp_central_ident+0x72>
   1e206:	e7d1      	b.n	1e1ac <smp_central_ident+0x3c>
		smp_pairing_complete(smp, 0);
   1e208:	4620      	mov	r0, r4
   1e20a:	f7ff fd6f 	bl	1dcec <smp_pairing_complete>
   1e20e:	e7eb      	b.n	1e1e8 <smp_central_ident+0x78>
   1e210:	00032eca 	.word	0x00032eca

0001e214 <smp_pairing_failed>:
{
   1e214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e218:	460e      	mov	r6, r1
   1e21a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e21c:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e220:	f7fe fd42 	bl	1cca8 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1e224:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e226:	2145      	movs	r1, #69	; 0x45
   1e228:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e22a:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e22c:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e22e:	480e      	ldr	r0, [pc, #56]	; (1e268 <smp_pairing_failed+0x54>)
   1e230:	f00c fc9a 	bl	2ab68 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e234:	210a      	movs	r1, #10
   1e236:	4638      	mov	r0, r7
   1e238:	f00f fae5 	bl	2d806 <atomic_test_and_clear_bit>
   1e23c:	b138      	cbz	r0, 1e24e <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e23e:	b96d      	cbnz	r5, 1e25c <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1e240:	4620      	mov	r0, r4
   1e242:	7831      	ldrb	r1, [r6, #0]
   1e244:	f7ff fd52 	bl	1dcec <smp_pairing_complete>
}
   1e248:	2000      	movs	r0, #0
   1e24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1e24e:	210b      	movs	r1, #11
   1e250:	4638      	mov	r0, r7
   1e252:	f00f fad8 	bl	2d806 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e256:	2800      	cmp	r0, #0
   1e258:	d1f1      	bne.n	1e23e <smp_pairing_failed+0x2a>
   1e25a:	e7f1      	b.n	1e240 <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e25c:	692b      	ldr	r3, [r5, #16]
   1e25e:	2b00      	cmp	r3, #0
   1e260:	d0ee      	beq.n	1e240 <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1e262:	4640      	mov	r0, r8
   1e264:	4798      	blx	r3
   1e266:	e7eb      	b.n	1e240 <smp_pairing_failed+0x2c>
   1e268:	0003326a 	.word	0x0003326a

0001e26c <bt_smp_encrypt_change>:
{
   1e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1e270:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e272:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1e276:	4604      	mov	r4, r0
   1e278:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e27a:	4630      	mov	r0, r6
   1e27c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1e27e:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e282:	f00f fac0 	bl	2d806 <atomic_test_and_clear_bit>
   1e286:	2800      	cmp	r0, #0
   1e288:	d06c      	beq.n	1e364 <bt_smp_encrypt_change+0xf8>
	if (hci_status) {
   1e28a:	b1cf      	cbz	r7, 1e2c0 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e28c:	2103      	movs	r1, #3
   1e28e:	4630      	mov	r0, r6
   1e290:	f00f fa61 	bl	2d756 <atomic_test_bit>
   1e294:	2800      	cmp	r0, #0
   1e296:	d065      	beq.n	1e364 <bt_smp_encrypt_change+0xf8>
			uint8_t smp_err = smp_err_get(
   1e298:	4638      	mov	r0, r7
   1e29a:	f7f8 fabd 	bl	16818 <bt_security_err_get>
	switch (auth_err) {
   1e29e:	3801      	subs	r0, #1
   1e2a0:	b2c0      	uxtb	r0, r0
   1e2a2:	2808      	cmp	r0, #8
   1e2a4:	bf9a      	itte	ls
   1e2a6:	4b34      	ldrls	r3, [pc, #208]	; (1e378 <bt_smp_encrypt_change+0x10c>)
   1e2a8:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1e2aa:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e2ac:	2102      	movs	r1, #2
   1e2ae:	4630      	mov	r0, r6
   1e2b0:	f00f fabf 	bl	2d832 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1e2b4:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1e2b6:	4628      	mov	r0, r5
}
   1e2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1e2bc:	f7ff bd16 	b.w	1dcec <smp_pairing_complete>
	if (!conn->encrypt) {
   1e2c0:	f898 300b 	ldrb.w	r3, [r8, #11]
   1e2c4:	2b00      	cmp	r3, #0
   1e2c6:	d04d      	beq.n	1e364 <bt_smp_encrypt_change+0xf8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e2c8:	2103      	movs	r1, #3
   1e2ca:	4630      	mov	r0, r6
   1e2cc:	f00f fa43 	bl	2d756 <atomic_test_bit>
   1e2d0:	b920      	cbnz	r0, 1e2dc <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   1e2d2:	4628      	mov	r0, r5
}
   1e2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1e2d8:	f00f bb12 	b.w	2d900 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e2dc:	2105      	movs	r1, #5
   1e2de:	4630      	mov	r0, r6
   1e2e0:	f00f fa39 	bl	2d756 <atomic_test_bit>
   1e2e4:	b1b8      	cbz	r0, 1e316 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1e2e6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e2ea:	071b      	lsls	r3, r3, #28
   1e2ec:	d507      	bpl.n	1e2fe <bt_smp_encrypt_change+0x92>
   1e2ee:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e2f2:	071f      	lsls	r7, r3, #28
   1e2f4:	d503      	bpl.n	1e2fe <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1e2f6:	2111      	movs	r1, #17
   1e2f8:	4630      	mov	r0, r6
   1e2fa:	f00f fa9a 	bl	2d832 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e2fe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e302:	f023 0308 	bic.w	r3, r3, #8
   1e306:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e30a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e30e:	f023 0308 	bic.w	r3, r3, #8
   1e312:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1e316:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e31a:	07d8      	lsls	r0, r3, #31
   1e31c:	d524      	bpl.n	1e368 <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1e31e:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e320:	4628      	mov	r0, r5
   1e322:	f00f fa86 	bl	2d832 <atomic_set_bit>
	    !(smp->remote_dist & BT_SMP_DIST_ID_KEY)) {
   1e326:	f814 0c03 	ldrb.w	r0, [r4, #-3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e32a:	0783      	lsls	r3, r0, #30
   1e32c:	d408      	bmi.n	1e340 <bt_smp_encrypt_change+0xd4>
		smp_err = smp_id_add_replace(smp, conn->le.keys);
   1e32e:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
   1e332:	f7fe fd29 	bl	1cd88 <smp_id_add_replace.isra.0>
		if (smp_err) {
   1e336:	4601      	mov	r1, r0
   1e338:	b110      	cbz	r0, 1e340 <bt_smp_encrypt_change+0xd4>
			smp_pairing_complete(smp, smp_err);
   1e33a:	4628      	mov	r0, r5
   1e33c:	f7ff fcd6 	bl	1dcec <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e340:	2102      	movs	r1, #2
   1e342:	4630      	mov	r0, r6
   1e344:	f00f fa75 	bl	2d832 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e348:	f898 3003 	ldrb.w	r3, [r8, #3]
   1e34c:	b913      	cbnz	r3, 1e354 <bt_smp_encrypt_change+0xe8>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   1e34e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e352:	b93b      	cbnz	r3, 1e364 <bt_smp_encrypt_change+0xf8>
	if (bt_smp_distribute_keys(smp)) {
   1e354:	4628      	mov	r0, r5
   1e356:	f7fe fe2d 	bl	1cfb4 <bt_smp_distribute_keys>
   1e35a:	b918      	cbnz	r0, 1e364 <bt_smp_encrypt_change+0xf8>
	if (!smp->local_dist && !smp->remote_dist) {
   1e35c:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1e360:	2900      	cmp	r1, #0
   1e362:	d0a8      	beq.n	1e2b6 <bt_smp_encrypt_change+0x4a>
}
   1e364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e368:	0799      	lsls	r1, r3, #30
   1e36a:	d501      	bpl.n	1e370 <bt_smp_encrypt_change+0x104>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e36c:	2108      	movs	r1, #8
   1e36e:	e7d7      	b.n	1e320 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e370:	075a      	lsls	r2, r3, #29
   1e372:	d5d8      	bpl.n	1e326 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e374:	210a      	movs	r1, #10
   1e376:	e7d3      	b.n	1e320 <bt_smp_encrypt_change+0xb4>
   1e378:	000332aa 	.word	0x000332aa

0001e37c <smp_timeout>:
{
   1e37c:	b510      	push	{r4, lr}
	LOG_ERR("SMP Timeout");
   1e37e:	2145      	movs	r1, #69	; 0x45
{
   1e380:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1e382:	4807      	ldr	r0, [pc, #28]	; (1e3a0 <smp_timeout+0x24>)
   1e384:	f00c fbf0 	bl	2ab68 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1e388:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1e38c:	2108      	movs	r1, #8
   1e38e:	f7ff fcad 	bl	1dcec <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e392:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1e396:	2104      	movs	r1, #4
}
   1e398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e39c:	f00f ba49 	b.w	2d832 <atomic_set_bit>
   1e3a0:	00033291 	.word	0x00033291

0001e3a4 <bt_smp_update_keys>:
{
   1e3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3a6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1e3a8:	f7fe fcc2 	bl	1cd30 <smp_chan_get>
	if (!smp) {
   1e3ac:	4605      	mov	r5, r0
   1e3ae:	2800      	cmp	r0, #0
   1e3b0:	f000 8084 	beq.w	1e4bc <bt_smp_update_keys+0x118>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e3b4:	1d06      	adds	r6, r0, #4
   1e3b6:	2103      	movs	r1, #3
   1e3b8:	4630      	mov	r0, r6
   1e3ba:	f00f f9cc 	bl	2d756 <atomic_test_bit>
   1e3be:	2800      	cmp	r0, #0
   1e3c0:	d07c      	beq.n	1e4bc <bt_smp_update_keys+0x118>
	if (conn->le.keys) {
   1e3c2:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e3c6:	b108      	cbz	r0, 1e3cc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1e3c8:	f000 f9de 	bl	1e788 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e3cc:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1e3d0:	7a20      	ldrb	r0, [r4, #8]
   1e3d2:	4639      	mov	r1, r7
   1e3d4:	f000 f8c8 	bl	1e568 <bt_keys_get_addr>
   1e3d8:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1e3dc:	b968      	cbnz	r0, 1e3fa <bt_smp_update_keys+0x56>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e3de:	4638      	mov	r0, r7
   1e3e0:	f7f7 f9c2 	bl	15768 <bt_addr_le_str>
   1e3e4:	2145      	movs	r1, #69	; 0x45
   1e3e6:	4602      	mov	r2, r0
   1e3e8:	4835      	ldr	r0, [pc, #212]	; (1e4c0 <bt_smp_update_keys+0x11c>)
   1e3ea:	f00c fbbd 	bl	2ab68 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e3ee:	4628      	mov	r0, r5
   1e3f0:	2108      	movs	r1, #8
}
   1e3f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e3f6:	f7ff bcfd 	b.w	1ddf4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1e3fa:	210e      	movs	r1, #14
   1e3fc:	4630      	mov	r0, r6
   1e3fe:	f00f f9aa 	bl	2d756 <atomic_test_bit>
   1e402:	b128      	cbz	r0, 1e410 <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1e404:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e408:	7b53      	ldrb	r3, [r2, #13]
   1e40a:	f043 0302 	orr.w	r3, r3, #2
   1e40e:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1e410:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e412:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1e416:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e418:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1e41a:	d83c      	bhi.n	1e496 <bt_smp_update_keys+0xf2>
   1e41c:	2a00      	cmp	r2, #0
   1e41e:	d041      	beq.n	1e4a4 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1e420:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e424:	7b53      	ldrb	r3, [r2, #13]
   1e426:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e42a:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1e42c:	7d2b      	ldrb	r3, [r5, #20]
   1e42e:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e430:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return MIN(req->max_key_size, rsp->max_key_size);
   1e434:	428b      	cmp	r3, r1
   1e436:	bf28      	it	cs
   1e438:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e43a:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e43c:	2105      	movs	r1, #5
   1e43e:	4630      	mov	r0, r6
   1e440:	f00f f989 	bl	2d756 <atomic_test_bit>
   1e444:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1e448:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e44a:	b3a0      	cbz	r0, 1e4b6 <bt_smp_update_keys+0x112>
		conn->le.keys->flags |= BT_KEYS_SC;
   1e44c:	f042 0210 	orr.w	r2, r2, #16
   1e450:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e452:	210d      	movs	r1, #13
   1e454:	4630      	mov	r0, r6
   1e456:	f00f f97e 	bl	2d756 <atomic_test_bit>
   1e45a:	b378      	cbz	r0, 1e4bc <bt_smp_update_keys+0x118>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1e45c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e460:	2120      	movs	r1, #32
   1e462:	f000 f959 	bl	1e718 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1e466:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e46a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1e46e:	2210      	movs	r2, #16
   1e470:	301a      	adds	r0, #26
   1e472:	f00d fb41 	bl	2baf8 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1e476:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e47a:	2208      	movs	r2, #8
   1e47c:	2100      	movs	r1, #0
   1e47e:	3010      	adds	r0, #16
   1e480:	f00d fb45 	bl	2bb0e <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e484:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e488:	2202      	movs	r2, #2
}
   1e48a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e48e:	2100      	movs	r1, #0
   1e490:	3018      	adds	r0, #24
   1e492:	f00d bb3c 	b.w	2bb0e <memset>
	switch (smp->method) {
   1e496:	3a05      	subs	r2, #5
   1e498:	2a01      	cmp	r2, #1
   1e49a:	d803      	bhi.n	1e4a4 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e49c:	f043 0320 	orr.w	r3, r3, #32
   1e4a0:	734b      	strb	r3, [r1, #13]
   1e4a2:	e7bd      	b.n	1e420 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1e4a4:	f023 0320 	bic.w	r3, r3, #32
   1e4a8:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e4aa:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e4ae:	7b53      	ldrb	r3, [r2, #13]
   1e4b0:	f023 0301 	bic.w	r3, r3, #1
   1e4b4:	e7b9      	b.n	1e42a <bt_smp_update_keys+0x86>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1e4b6:	f022 0210 	bic.w	r2, r2, #16
   1e4ba:	735a      	strb	r2, [r3, #13]
}
   1e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4be:	bf00      	nop
   1e4c0:	00032eca 	.word	0x00032eca

0001e4c4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1e4c4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e4c6:	4b07      	ldr	r3, [pc, #28]	; (1e4e4 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1e4c8:	4807      	ldr	r0, [pc, #28]	; (1e4e8 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e4ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1e4ce:	f003 0306 	and.w	r3, r3, #6
   1e4d2:	1f9a      	subs	r2, r3, #6
   1e4d4:	4253      	negs	r3, r2
   1e4d6:	4153      	adcs	r3, r2
   1e4d8:	4a04      	ldr	r2, [pc, #16]	; (1e4ec <bt_smp_init+0x28>)
   1e4da:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1e4dc:	f7f9 fd1a 	bl	17f14 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1e4e0:	2000      	movs	r0, #0
   1e4e2:	bd08      	pop	{r3, pc}
   1e4e4:	20000378 	.word	0x20000378
   1e4e8:	2000082c 	.word	0x2000082c
   1e4ec:	2000441f 	.word	0x2000441f

0001e4f0 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1e4f0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e4f2:	b950      	cbnz	r0, 1e50a <id_add+0x1a>
   1e4f4:	4907      	ldr	r1, [pc, #28]	; (1e514 <id_add+0x24>)
   1e4f6:	4808      	ldr	r0, [pc, #32]	; (1e518 <id_add+0x28>)
   1e4f8:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1e4fc:	f00c fb26 	bl	2ab4c <assert_print>
   1e500:	4804      	ldr	r0, [pc, #16]	; (1e514 <id_add+0x24>)
   1e502:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1e506:	f00c fb1a 	bl	2ab3e <assert_post_action>

	bt_id_add(keys);
}
   1e50a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1e50e:	f7f8 bf85 	b.w	1741c <bt_id_add>
   1e512:	bf00      	nop
   1e514:	000332fb 	.word	0x000332fb
   1e518:	0003013d 	.word	0x0003013d

0001e51c <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1e51c:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e51e:	4c0f      	ldr	r4, [pc, #60]	; (1e55c <bt_keys_get_addr.part.0+0x40>)
   1e520:	f814 3b01 	ldrb.w	r3, [r4], #1
   1e524:	4283      	cmp	r3, r0
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1e526:	4605      	mov	r5, r0
   1e528:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e52a:	d007      	beq.n	1e53c <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1e52c:	490c      	ldr	r1, [pc, #48]	; (1e560 <bt_keys_get_addr.part.0+0x44>)
   1e52e:	480d      	ldr	r0, [pc, #52]	; (1e564 <bt_keys_get_addr.part.0+0x48>)
   1e530:	2207      	movs	r2, #7
   1e532:	f00d faba 	bl	2baaa <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1e536:	b148      	cbz	r0, 1e54c <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1e538:	2000      	movs	r0, #0
}
   1e53a:	bd70      	pop	{r4, r5, r6, pc}
   1e53c:	2207      	movs	r2, #7
   1e53e:	4620      	mov	r0, r4
   1e540:	f00d fab3 	bl	2baaa <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e544:	2800      	cmp	r0, #0
   1e546:	d1f1      	bne.n	1e52c <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1e548:	4804      	ldr	r0, [pc, #16]	; (1e55c <bt_keys_get_addr.part.0+0x40>)
   1e54a:	e7f6      	b.n	1e53a <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1e54c:	f804 5c01 	strb.w	r5, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1e550:	2207      	movs	r2, #7
   1e552:	4631      	mov	r1, r6
   1e554:	4803      	ldr	r0, [pc, #12]	; (1e564 <bt_keys_get_addr.part.0+0x48>)
   1e556:	f00d facf 	bl	2baf8 <memcpy>
		return keys;
   1e55a:	e7f5      	b.n	1e548 <bt_keys_get_addr.part.0+0x2c>
   1e55c:	200034cc 	.word	0x200034cc
   1e560:	000313da 	.word	0x000313da
   1e564:	200034cd 	.word	0x200034cd

0001e568 <bt_keys_get_addr>:
{
   1e568:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1e56a:	b941      	cbnz	r1, 1e57e <bt_keys_get_addr+0x16>
   1e56c:	4906      	ldr	r1, [pc, #24]	; (1e588 <bt_keys_get_addr+0x20>)
   1e56e:	4807      	ldr	r0, [pc, #28]	; (1e58c <bt_keys_get_addr+0x24>)
   1e570:	2259      	movs	r2, #89	; 0x59
   1e572:	f00c faeb 	bl	2ab4c <assert_print>
   1e576:	4804      	ldr	r0, [pc, #16]	; (1e588 <bt_keys_get_addr+0x20>)
   1e578:	2159      	movs	r1, #89	; 0x59
   1e57a:	f00c fae0 	bl	2ab3e <assert_post_action>
}
   1e57e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e582:	f7ff bfcb 	b.w	1e51c <bt_keys_get_addr.part.0>
   1e586:	bf00      	nop
   1e588:	000332fb 	.word	0x000332fb
   1e58c:	0003013d 	.word	0x0003013d

0001e590 <bt_keys_foreach_type>:
{
   1e590:	460b      	mov	r3, r1
   1e592:	b510      	push	{r4, lr}
   1e594:	4611      	mov	r1, r2
   1e596:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1e598:	b95b      	cbnz	r3, 1e5b2 <bt_keys_foreach_type+0x22>
   1e59a:	4908      	ldr	r1, [pc, #32]	; (1e5bc <bt_keys_foreach_type+0x2c>)
   1e59c:	4808      	ldr	r0, [pc, #32]	; (1e5c0 <bt_keys_foreach_type+0x30>)
   1e59e:	22b3      	movs	r2, #179	; 0xb3
   1e5a0:	f00c fad4 	bl	2ab4c <assert_print>
   1e5a4:	4805      	ldr	r0, [pc, #20]	; (1e5bc <bt_keys_foreach_type+0x2c>)
   1e5a6:	21b3      	movs	r1, #179	; 0xb3
   1e5a8:	f00c fac9 	bl	2ab3e <assert_post_action>
}
   1e5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1e5b0:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1e5b2:	4804      	ldr	r0, [pc, #16]	; (1e5c4 <bt_keys_foreach_type+0x34>)
   1e5b4:	89c2      	ldrh	r2, [r0, #14]
   1e5b6:	4222      	tst	r2, r4
   1e5b8:	d1f8      	bne.n	1e5ac <bt_keys_foreach_type+0x1c>
}
   1e5ba:	bd10      	pop	{r4, pc}
   1e5bc:	000332fb 	.word	0x000332fb
   1e5c0:	0003013d 	.word	0x0003013d
   1e5c4:	200034cc 	.word	0x200034cc

0001e5c8 <keys_commit>:

static int keys_commit(void)
{
   1e5c8:	b508      	push	{r3, lr}
	/* We do this in commit() rather than add() since add() may get
	 * called multiple times for the same address, especially if
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
   1e5ca:	4903      	ldr	r1, [pc, #12]	; (1e5d8 <keys_commit+0x10>)
   1e5cc:	2200      	movs	r2, #0
   1e5ce:	203f      	movs	r0, #63	; 0x3f
   1e5d0:	f7ff ffde 	bl	1e590 <bt_keys_foreach_type>
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
	}

	return 0;
}
   1e5d4:	2000      	movs	r0, #0
   1e5d6:	bd08      	pop	{r3, pc}
   1e5d8:	0001e4f1 	.word	0x0001e4f1

0001e5dc <bt_keys_find>:
{
   1e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5de:	4605      	mov	r5, r0
   1e5e0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1e5e2:	4614      	mov	r4, r2
   1e5e4:	b9a2      	cbnz	r2, 1e610 <bt_keys_find+0x34>
   1e5e6:	490f      	ldr	r1, [pc, #60]	; (1e624 <bt_keys_find+0x48>)
   1e5e8:	480f      	ldr	r0, [pc, #60]	; (1e628 <bt_keys_find+0x4c>)
   1e5ea:	22c0      	movs	r2, #192	; 0xc0
   1e5ec:	f00c faae 	bl	2ab4c <assert_print>
   1e5f0:	480c      	ldr	r0, [pc, #48]	; (1e624 <bt_keys_find+0x48>)
   1e5f2:	21c0      	movs	r1, #192	; 0xc0
   1e5f4:	f00c faa3 	bl	2ab3e <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e5f8:	b18a      	cbz	r2, 1e61e <bt_keys_find+0x42>
   1e5fa:	428e      	cmp	r6, r1
   1e5fc:	d10f      	bne.n	1e61e <bt_keys_find+0x42>
	return memcmp(a, b, sizeof(*a));
   1e5fe:	480b      	ldr	r0, [pc, #44]	; (1e62c <bt_keys_find+0x50>)
   1e600:	2207      	movs	r2, #7
   1e602:	4621      	mov	r1, r4
   1e604:	f00d fa51 	bl	2baaa <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e608:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e60a:	b918      	cbnz	r0, 1e614 <bt_keys_find+0x38>
			return &key_pool[i];
   1e60c:	4808      	ldr	r0, [pc, #32]	; (1e630 <bt_keys_find+0x54>)
   1e60e:	e007      	b.n	1e620 <bt_keys_find+0x44>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e610:	4f07      	ldr	r7, [pc, #28]	; (1e630 <bt_keys_find+0x54>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e612:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e614:	89fa      	ldrh	r2, [r7, #14]
   1e616:	7839      	ldrb	r1, [r7, #0]
   1e618:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	d0ec      	beq.n	1e5f8 <bt_keys_find+0x1c>
	return NULL;
   1e61e:	2000      	movs	r0, #0
}
   1e620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e622:	bf00      	nop
   1e624:	000332fb 	.word	0x000332fb
   1e628:	0003013d 	.word	0x0003013d
   1e62c:	200034cd 	.word	0x200034cd
   1e630:	200034cc 	.word	0x200034cc

0001e634 <bt_keys_find_irk>:
{
   1e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e636:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1e638:	460c      	mov	r4, r1
   1e63a:	b941      	cbnz	r1, 1e64e <bt_keys_find_irk+0x1a>
   1e63c:	4921      	ldr	r1, [pc, #132]	; (1e6c4 <bt_keys_find_irk+0x90>)
   1e63e:	4822      	ldr	r0, [pc, #136]	; (1e6c8 <bt_keys_find_irk+0x94>)
   1e640:	22e9      	movs	r2, #233	; 0xe9
   1e642:	f00c fa83 	bl	2ab4c <assert_print>
   1e646:	481f      	ldr	r0, [pc, #124]	; (1e6c4 <bt_keys_find_irk+0x90>)
   1e648:	21e9      	movs	r1, #233	; 0xe9
   1e64a:	f00c fa78 	bl	2ab3e <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e64e:	780b      	ldrb	r3, [r1, #0]
   1e650:	2b01      	cmp	r3, #1
   1e652:	d001      	beq.n	1e658 <bt_keys_find_irk+0x24>
		return NULL;
   1e654:	2000      	movs	r0, #0
}
   1e656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1e658:	798b      	ldrb	r3, [r1, #6]
   1e65a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e65e:	2b40      	cmp	r3, #64	; 0x40
   1e660:	d1f8      	bne.n	1e654 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e662:	4d1a      	ldr	r5, [pc, #104]	; (1e6cc <bt_keys_find_irk+0x98>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e664:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1e666:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1e66a:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1e66c:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e66e:	f002 0202 	and.w	r2, r2, #2
   1e672:	b1c3      	cbz	r3, 1e6a6 <bt_keys_find_irk+0x72>
   1e674:	2300      	movs	r3, #0
   1e676:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1e678:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e67a:	f002 0202 	and.w	r2, r2, #2
   1e67e:	2b00      	cmp	r3, #0
   1e680:	d1e8      	bne.n	1e654 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e682:	2a00      	cmp	r2, #0
   1e684:	d0e6      	beq.n	1e654 <bt_keys_find_irk+0x20>
		if (key_pool[i].id != id) {
   1e686:	42b1      	cmp	r1, r6
   1e688:	d1e4      	bne.n	1e654 <bt_keys_find_irk+0x20>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1e68a:	1c67      	adds	r7, r4, #1
   1e68c:	4810      	ldr	r0, [pc, #64]	; (1e6d0 <bt_keys_find_irk+0x9c>)
   1e68e:	4639      	mov	r1, r7
   1e690:	f00d fa78 	bl	2bb84 <bt_rpa_irk_matches>
   1e694:	2301      	movs	r3, #1
   1e696:	2800      	cmp	r0, #0
   1e698:	d0ed      	beq.n	1e676 <bt_keys_find_irk+0x42>
	memcpy(dst, src, sizeof(*dst));
   1e69a:	2206      	movs	r2, #6
   1e69c:	4639      	mov	r1, r7
   1e69e:	480d      	ldr	r0, [pc, #52]	; (1e6d4 <bt_keys_find_irk+0xa0>)
   1e6a0:	f00d fa2a 	bl	2baf8 <memcpy>
}
   1e6a4:	e00b      	b.n	1e6be <bt_keys_find_irk+0x8a>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e6a6:	2a00      	cmp	r2, #0
   1e6a8:	d0e5      	beq.n	1e676 <bt_keys_find_irk+0x42>
		if (key_pool[i].id == id &&
   1e6aa:	42b0      	cmp	r0, r6
   1e6ac:	d1e3      	bne.n	1e676 <bt_keys_find_irk+0x42>
	return memcmp(a, b, sizeof(*a));
   1e6ae:	2206      	movs	r2, #6
   1e6b0:	4639      	mov	r1, r7
   1e6b2:	1c60      	adds	r0, r4, #1
   1e6b4:	f00d f9f9 	bl	2baaa <memcmp>
   1e6b8:	2301      	movs	r3, #1
   1e6ba:	2800      	cmp	r0, #0
   1e6bc:	d1d5      	bne.n	1e66a <bt_keys_find_irk+0x36>
			return &key_pool[i];
   1e6be:	4803      	ldr	r0, [pc, #12]	; (1e6cc <bt_keys_find_irk+0x98>)
   1e6c0:	e7c9      	b.n	1e656 <bt_keys_find_irk+0x22>
   1e6c2:	bf00      	nop
   1e6c4:	000332fb 	.word	0x000332fb
   1e6c8:	0003013d 	.word	0x0003013d
   1e6cc:	200034cc 	.word	0x200034cc
   1e6d0:	200034f6 	.word	0x200034f6
   1e6d4:	20003506 	.word	0x20003506

0001e6d8 <bt_keys_find_addr>:
{
   1e6d8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1e6da:	b951      	cbnz	r1, 1e6f2 <bt_keys_find_addr+0x1a>
   1e6dc:	490b      	ldr	r1, [pc, #44]	; (1e70c <bt_keys_find_addr+0x34>)
   1e6de:	480c      	ldr	r0, [pc, #48]	; (1e710 <bt_keys_find_addr+0x38>)
   1e6e0:	f44f 728d 	mov.w	r2, #282	; 0x11a
   1e6e4:	f00c fa32 	bl	2ab4c <assert_print>
   1e6e8:	4808      	ldr	r0, [pc, #32]	; (1e70c <bt_keys_find_addr+0x34>)
   1e6ea:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1e6ee:	f00c fa26 	bl	2ab3e <assert_post_action>
		if (key_pool[i].id == id &&
   1e6f2:	4c08      	ldr	r4, [pc, #32]	; (1e714 <bt_keys_find_addr+0x3c>)
   1e6f4:	7823      	ldrb	r3, [r4, #0]
   1e6f6:	4283      	cmp	r3, r0
   1e6f8:	d104      	bne.n	1e704 <bt_keys_find_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
   1e6fa:	2207      	movs	r2, #7
   1e6fc:	1c60      	adds	r0, r4, #1
   1e6fe:	f00d f9d4 	bl	2baaa <memcmp>
   1e702:	b108      	cbz	r0, 1e708 <bt_keys_find_addr+0x30>
	return NULL;
   1e704:	2000      	movs	r0, #0
}
   1e706:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1e708:	4620      	mov	r0, r4
   1e70a:	e7fc      	b.n	1e706 <bt_keys_find_addr+0x2e>
   1e70c:	000332fb 	.word	0x000332fb
   1e710:	0003013d 	.word	0x0003013d
   1e714:	200034cc 	.word	0x200034cc

0001e718 <bt_keys_add_type>:
{
   1e718:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e71a:	b950      	cbnz	r0, 1e732 <bt_keys_add_type+0x1a>
   1e71c:	4907      	ldr	r1, [pc, #28]	; (1e73c <bt_keys_add_type+0x24>)
   1e71e:	4808      	ldr	r0, [pc, #32]	; (1e740 <bt_keys_add_type+0x28>)
   1e720:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e724:	f00c fa12 	bl	2ab4c <assert_print>
   1e728:	4804      	ldr	r0, [pc, #16]	; (1e73c <bt_keys_add_type+0x24>)
   1e72a:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1e72e:	f00c fa06 	bl	2ab3e <assert_post_action>
	keys->keys |= type;
   1e732:	89c3      	ldrh	r3, [r0, #14]
   1e734:	4319      	orrs	r1, r3
   1e736:	81c1      	strh	r1, [r0, #14]
}
   1e738:	bd08      	pop	{r3, pc}
   1e73a:	bf00      	nop
   1e73c:	000332fb 	.word	0x000332fb
   1e740:	0003013d 	.word	0x0003013d

0001e744 <bt_keys_get_type>:
{
   1e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e746:	4606      	mov	r6, r0
   1e748:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1e74a:	4615      	mov	r5, r2
   1e74c:	b942      	cbnz	r2, 1e760 <bt_keys_get_type+0x1c>
   1e74e:	490c      	ldr	r1, [pc, #48]	; (1e780 <bt_keys_get_type+0x3c>)
   1e750:	480c      	ldr	r0, [pc, #48]	; (1e784 <bt_keys_get_type+0x40>)
   1e752:	22d2      	movs	r2, #210	; 0xd2
   1e754:	f00c f9fa 	bl	2ab4c <assert_print>
   1e758:	4809      	ldr	r0, [pc, #36]	; (1e780 <bt_keys_get_type+0x3c>)
   1e75a:	21d2      	movs	r1, #210	; 0xd2
   1e75c:	f00c f9ef 	bl	2ab3e <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1e760:	f7ff ff3c 	bl	1e5dc <bt_keys_find>
	if (keys) {
   1e764:	4604      	mov	r4, r0
   1e766:	b940      	cbnz	r0, 1e77a <bt_keys_get_type+0x36>
	keys = bt_keys_get_addr(id, addr);
   1e768:	4629      	mov	r1, r5
   1e76a:	4638      	mov	r0, r7
   1e76c:	f7ff fefc 	bl	1e568 <bt_keys_get_addr>
	if (!keys) {
   1e770:	4604      	mov	r4, r0
   1e772:	b110      	cbz	r0, 1e77a <bt_keys_get_type+0x36>
	bt_keys_add_type(keys, type);
   1e774:	4631      	mov	r1, r6
   1e776:	f7ff ffcf 	bl	1e718 <bt_keys_add_type>
}
   1e77a:	4620      	mov	r0, r4
   1e77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e77e:	bf00      	nop
   1e780:	000332fb 	.word	0x000332fb
   1e784:	0003013d 	.word	0x0003013d

0001e788 <bt_keys_clear>:
{
   1e788:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e78a:	4604      	mov	r4, r0
{
   1e78c:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1e78e:	b950      	cbnz	r0, 1e7a6 <bt_keys_clear+0x1e>
   1e790:	4916      	ldr	r1, [pc, #88]	; (1e7ec <bt_keys_clear+0x64>)
   1e792:	4817      	ldr	r0, [pc, #92]	; (1e7f0 <bt_keys_clear+0x68>)
   1e794:	f240 1231 	movw	r2, #305	; 0x131
   1e798:	f00c f9d8 	bl	2ab4c <assert_print>
   1e79c:	4813      	ldr	r0, [pc, #76]	; (1e7ec <bt_keys_clear+0x64>)
   1e79e:	f240 1131 	movw	r1, #305	; 0x131
   1e7a2:	f00c f9cc 	bl	2ab3e <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e7a6:	7a03      	ldrb	r3, [r0, #8]
   1e7a8:	075b      	lsls	r3, r3, #29
   1e7aa:	d501      	bpl.n	1e7b0 <bt_keys_clear+0x28>
		bt_id_del(keys);
   1e7ac:	f7f8 fee8 	bl	17580 <bt_id_del>
		if (keys->id) {
   1e7b0:	4625      	mov	r5, r4
   1e7b2:	f815 2b01 	ldrb.w	r2, [r5], #1
   1e7b6:	b1b2      	cbz	r2, 1e7e6 <bt_keys_clear+0x5e>
			u8_to_dec(id, sizeof(id), keys->id);
   1e7b8:	ae02      	add	r6, sp, #8
   1e7ba:	2104      	movs	r1, #4
   1e7bc:	4630      	mov	r0, r6
   1e7be:	f00b ff2f 	bl	2a620 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e7c2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e7c4:	4a0b      	ldr	r2, [pc, #44]	; (1e7f4 <bt_keys_clear+0x6c>)
   1e7c6:	462b      	mov	r3, r5
   1e7c8:	2124      	movs	r1, #36	; 0x24
   1e7ca:	a803      	add	r0, sp, #12
   1e7cc:	f7f7 f8aa 	bl	15924 <bt_settings_encode_key>
		settings_delete(key);
   1e7d0:	a803      	add	r0, sp, #12
   1e7d2:	f00c fc4d 	bl	2b070 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1e7d6:	225c      	movs	r2, #92	; 0x5c
   1e7d8:	2100      	movs	r1, #0
   1e7da:	4620      	mov	r0, r4
}
   1e7dc:	b00c      	add	sp, #48	; 0x30
   1e7de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1e7e2:	f00d b994 	b.w	2bb0e <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e7e6:	9200      	str	r2, [sp, #0]
   1e7e8:	e7ec      	b.n	1e7c4 <bt_keys_clear+0x3c>
   1e7ea:	bf00      	nop
   1e7ec:	000332fb 	.word	0x000332fb
   1e7f0:	0003013d 	.word	0x0003013d
   1e7f4:	000333e3 	.word	0x000333e3

0001e7f8 <keys_set>:
{
   1e7f8:	b570      	push	{r4, r5, r6, lr}
   1e7fa:	4605      	mov	r5, r0
   1e7fc:	b098      	sub	sp, #96	; 0x60
   1e7fe:	4614      	mov	r4, r2
   1e800:	4618      	mov	r0, r3
	if (!name) {
   1e802:	b945      	cbnz	r5, 1e816 <keys_set+0x1e>
		LOG_ERR("Insufficient number of arguments");
   1e804:	4832      	ldr	r0, [pc, #200]	; (1e8d0 <keys_set+0xd8>)
   1e806:	2145      	movs	r1, #69	; 0x45
   1e808:	f00c f9ae 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1e80c:	f06f 0615 	mvn.w	r6, #21
}
   1e810:	4630      	mov	r0, r6
   1e812:	b018      	add	sp, #96	; 0x60
   1e814:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1e816:	2250      	movs	r2, #80	; 0x50
   1e818:	a904      	add	r1, sp, #16
   1e81a:	47a0      	blx	r4
	if (len < 0) {
   1e81c:	1e04      	subs	r4, r0, #0
   1e81e:	da05      	bge.n	1e82c <keys_set+0x34>
		LOG_ERR("Failed to read value (err %zd)", len);
   1e820:	482c      	ldr	r0, [pc, #176]	; (1e8d4 <keys_set+0xdc>)
   1e822:	4622      	mov	r2, r4
   1e824:	2145      	movs	r1, #69	; 0x45
   1e826:	f00c f99f 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1e82a:	e7ef      	b.n	1e80c <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1e82c:	a902      	add	r1, sp, #8
   1e82e:	4628      	mov	r0, r5
   1e830:	f00d f9d2 	bl	2bbd8 <bt_settings_decode_key>
	if (err) {
   1e834:	4606      	mov	r6, r0
   1e836:	b118      	cbz	r0, 1e840 <keys_set+0x48>
		LOG_ERR("Unable to decode address %s", name);
   1e838:	4827      	ldr	r0, [pc, #156]	; (1e8d8 <keys_set+0xe0>)
   1e83a:	462a      	mov	r2, r5
   1e83c:	2145      	movs	r1, #69	; 0x45
   1e83e:	e7f2      	b.n	1e826 <keys_set+0x2e>
	settings_name_next(name, &next);
   1e840:	a901      	add	r1, sp, #4
   1e842:	4628      	mov	r0, r5
   1e844:	f00c fc3c 	bl	2b0c0 <settings_name_next>
	if (!next) {
   1e848:	9801      	ldr	r0, [sp, #4]
   1e84a:	b140      	cbz	r0, 1e85e <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1e84c:	220a      	movs	r2, #10
   1e84e:	4631      	mov	r1, r6
   1e850:	f00d f87a 	bl	2b948 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1e854:	4602      	mov	r2, r0
   1e856:	b110      	cbz	r0, 1e85e <keys_set+0x66>
			LOG_ERR("Invalid local identity %lu", next_id);
   1e858:	4820      	ldr	r0, [pc, #128]	; (1e8dc <keys_set+0xe4>)
   1e85a:	2145      	movs	r1, #69	; 0x45
   1e85c:	e7e3      	b.n	1e826 <keys_set+0x2e>
	if (!len) {
   1e85e:	b99c      	cbnz	r4, 1e888 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1e860:	aa02      	add	r2, sp, #8
   1e862:	4621      	mov	r1, r4
   1e864:	203f      	movs	r0, #63	; 0x3f
   1e866:	f7ff feb9 	bl	1e5dc <bt_keys_find>
		if (keys) {
   1e86a:	b120      	cbz	r0, 1e876 <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1e86c:	225c      	movs	r2, #92	; 0x5c
   1e86e:	4621      	mov	r1, r4
   1e870:	f00d f94d 	bl	2bb0e <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1e874:	e7cc      	b.n	1e810 <keys_set+0x18>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1e876:	a802      	add	r0, sp, #8
   1e878:	f7f6 ff76 	bl	15768 <bt_addr_le_str>
   1e87c:	2157      	movs	r1, #87	; 0x57
   1e87e:	4602      	mov	r2, r0
   1e880:	4817      	ldr	r0, [pc, #92]	; (1e8e0 <keys_set+0xe8>)
   1e882:	f00c f971 	bl	2ab68 <z_log_minimal_printk>
   1e886:	e7c3      	b.n	1e810 <keys_set+0x18>
	__ASSERT_NO_MSG(addr != NULL);
   1e888:	a902      	add	r1, sp, #8
   1e88a:	2000      	movs	r0, #0
   1e88c:	f7ff fe46 	bl	1e51c <bt_keys_get_addr.part.0>
	if (!keys) {
   1e890:	4605      	mov	r5, r0
   1e892:	b950      	cbnz	r0, 1e8aa <keys_set+0xb2>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1e894:	a802      	add	r0, sp, #8
   1e896:	f7f6 ff67 	bl	15768 <bt_addr_le_str>
   1e89a:	2145      	movs	r1, #69	; 0x45
   1e89c:	4602      	mov	r2, r0
   1e89e:	4811      	ldr	r0, [pc, #68]	; (1e8e4 <keys_set+0xec>)
   1e8a0:	f00c f962 	bl	2ab68 <z_log_minimal_printk>
		return -ENOMEM;
   1e8a4:	f06f 060b 	mvn.w	r6, #11
   1e8a8:	e7b2      	b.n	1e810 <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1e8aa:	2c50      	cmp	r4, #80	; 0x50
   1e8ac:	d009      	beq.n	1e8c2 <keys_set+0xca>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1e8ae:	480e      	ldr	r0, [pc, #56]	; (1e8e8 <keys_set+0xf0>)
   1e8b0:	2350      	movs	r3, #80	; 0x50
   1e8b2:	4622      	mov	r2, r4
   1e8b4:	2145      	movs	r1, #69	; 0x45
   1e8b6:	f00c f957 	bl	2ab68 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1e8ba:	4628      	mov	r0, r5
   1e8bc:	f7ff ff64 	bl	1e788 <bt_keys_clear>
			return -EINVAL;
   1e8c0:	e7a4      	b.n	1e80c <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1e8c2:	4622      	mov	r2, r4
   1e8c4:	a904      	add	r1, sp, #16
   1e8c6:	300c      	adds	r0, #12
   1e8c8:	f00d f916 	bl	2baf8 <memcpy>
	return 0;
   1e8cc:	e7a0      	b.n	1e810 <keys_set+0x18>
   1e8ce:	bf00      	nop
   1e8d0:	00031462 	.word	0x00031462
   1e8d4:	0003332b 	.word	0x0003332b
   1e8d8:	0003295a 	.word	0x0003295a
   1e8dc:	0003297b 	.word	0x0003297b
   1e8e0:	0003334f 	.word	0x0003334f
   1e8e4:	00033377 	.word	0x00033377
   1e8e8:	0003339b 	.word	0x0003339b

0001e8ec <bt_keys_store>:
{
   1e8ec:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e8ee:	4604      	mov	r4, r0
{
   1e8f0:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1e8f2:	b950      	cbnz	r0, 1e90a <bt_keys_store+0x1e>
   1e8f4:	4916      	ldr	r1, [pc, #88]	; (1e950 <bt_keys_store+0x64>)
   1e8f6:	4817      	ldr	r0, [pc, #92]	; (1e954 <bt_keys_store+0x68>)
   1e8f8:	f240 1255 	movw	r2, #341	; 0x155
   1e8fc:	f00c f926 	bl	2ab4c <assert_print>
   1e900:	4813      	ldr	r0, [pc, #76]	; (1e950 <bt_keys_store+0x64>)
   1e902:	f240 1155 	movw	r1, #341	; 0x155
   1e906:	f00c f91a 	bl	2ab3e <assert_post_action>
	if (keys->id) {
   1e90a:	4605      	mov	r5, r0
   1e90c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1e910:	b1da      	cbz	r2, 1e94a <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1e912:	ae02      	add	r6, sp, #8
   1e914:	2104      	movs	r1, #4
   1e916:	4630      	mov	r0, r6
   1e918:	f00b fe82 	bl	2a620 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e91c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e91e:	4a0e      	ldr	r2, [pc, #56]	; (1e958 <bt_keys_store+0x6c>)
   1e920:	462b      	mov	r3, r5
   1e922:	2124      	movs	r1, #36	; 0x24
   1e924:	a803      	add	r0, sp, #12
   1e926:	f7f6 fffd 	bl	15924 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1e92a:	f104 010c 	add.w	r1, r4, #12
   1e92e:	2250      	movs	r2, #80	; 0x50
   1e930:	a803      	add	r0, sp, #12
   1e932:	f7f4 ffc9 	bl	138c8 <settings_save_one>
	if (err) {
   1e936:	4604      	mov	r4, r0
   1e938:	b120      	cbz	r0, 1e944 <bt_keys_store+0x58>
		LOG_ERR("Failed to save keys (err %d)", err);
   1e93a:	4602      	mov	r2, r0
   1e93c:	2145      	movs	r1, #69	; 0x45
   1e93e:	4807      	ldr	r0, [pc, #28]	; (1e95c <bt_keys_store+0x70>)
   1e940:	f00c f912 	bl	2ab68 <z_log_minimal_printk>
}
   1e944:	4620      	mov	r0, r4
   1e946:	b00c      	add	sp, #48	; 0x30
   1e948:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e94a:	9200      	str	r2, [sp, #0]
   1e94c:	e7e7      	b.n	1e91e <bt_keys_store+0x32>
   1e94e:	bf00      	nop
   1e950:	000332fb 	.word	0x000332fb
   1e954:	0003013d 	.word	0x0003013d
   1e958:	000333e3 	.word	0x000333e3
   1e95c:	000333be 	.word	0x000333be

0001e960 <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e960:	4288      	cmp	r0, r1
{
   1e962:	b510      	push	{r4, lr}
   1e964:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e968:	d90d      	bls.n	1e986 <sys_memcpy_swap+0x26>
   1e96a:	188c      	adds	r4, r1, r2
   1e96c:	42a0      	cmp	r0, r4
   1e96e:	d20d      	bcs.n	1e98c <sys_memcpy_swap+0x2c>
   1e970:	490b      	ldr	r1, [pc, #44]	; (1e9a0 <sys_memcpy_swap+0x40>)
   1e972:	480c      	ldr	r0, [pc, #48]	; (1e9a4 <sys_memcpy_swap+0x44>)
   1e974:	f240 2215 	movw	r2, #533	; 0x215
   1e978:	f00c f8e8 	bl	2ab4c <assert_print>
   1e97c:	4808      	ldr	r0, [pc, #32]	; (1e9a0 <sys_memcpy_swap+0x40>)
   1e97e:	f240 2115 	movw	r1, #533	; 0x215
   1e982:	f00c f8dc 	bl	2ab3e <assert_post_action>
   1e986:	d0f3      	beq.n	1e970 <sys_memcpy_swap+0x10>
   1e988:	4299      	cmp	r1, r3
   1e98a:	e7f0      	b.n	1e96e <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1e98c:	3a01      	subs	r2, #1
   1e98e:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1e990:	f811 2901 	ldrb.w	r2, [r1], #-1
   1e994:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1e998:	4283      	cmp	r3, r0
   1e99a:	d1f9      	bne.n	1e990 <sys_memcpy_swap+0x30>
}
   1e99c:	bd10      	pop	{r4, pc}
   1e99e:	bf00      	nop
   1e9a0:	000333f0 	.word	0x000333f0
   1e9a4:	0003013d 	.word	0x0003013d

0001e9a8 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1e9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e9ac:	b09a      	sub	sp, #104	; 0x68
   1e9ae:	461d      	mov	r5, r3
   1e9b0:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1e9b4:	4b2e      	ldr	r3, [pc, #184]	; (1ea70 <bt_crypto_f5+0xc8>)
{
   1e9b6:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1e9b8:	aa0c      	add	r2, sp, #48	; 0x30
{
   1e9ba:	4684      	mov	ip, r0
   1e9bc:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1e9be:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1e9c2:	4690      	mov	r8, r2
   1e9c4:	6818      	ldr	r0, [r3, #0]
   1e9c6:	6859      	ldr	r1, [r3, #4]
   1e9c8:	4614      	mov	r4, r2
   1e9ca:	c403      	stmia	r4!, {r0, r1}
   1e9cc:	3308      	adds	r3, #8
   1e9ce:	4573      	cmp	r3, lr
   1e9d0:	4622      	mov	r2, r4
   1e9d2:	d1f7      	bne.n	1e9c4 <bt_crypto_f5+0x1c>
   1e9d4:	6818      	ldr	r0, [r3, #0]
   1e9d6:	791b      	ldrb	r3, [r3, #4]
   1e9d8:	6020      	str	r0, [r4, #0]
   1e9da:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1e9dc:	4661      	mov	r1, ip
   1e9de:	2220      	movs	r2, #32
   1e9e0:	a804      	add	r0, sp, #16
   1e9e2:	f7ff ffbd 	bl	1e960 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1e9e6:	4823      	ldr	r0, [pc, #140]	; (1ea74 <bt_crypto_f5+0xcc>)
   1e9e8:	466b      	mov	r3, sp
   1e9ea:	2220      	movs	r2, #32
   1e9ec:	a904      	add	r1, sp, #16
   1e9ee:	f00f f9e2 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   1e9f2:	4604      	mov	r4, r0
   1e9f4:	bbc0      	cbnz	r0, 1ea68 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1e9f6:	2210      	movs	r2, #16
   1e9f8:	4651      	mov	r1, sl
   1e9fa:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1e9fe:	f7ff ffaf 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1ea02:	2210      	movs	r2, #16
   1ea04:	4631      	mov	r1, r6
   1ea06:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1ea0a:	f7ff ffa9 	bl	1e960 <sys_memcpy_swap>
	m[37] = a1->type;
   1ea0e:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1ea10:	2206      	movs	r2, #6
	m[37] = a1->type;
   1ea12:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ea16:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1ea1a:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1ea1e:	f7ff ff9f 	bl	1e960 <sys_memcpy_swap>
	m[44] = a2->type;
   1ea22:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1ea24:	2206      	movs	r2, #6
	m[44] = a2->type;
   1ea26:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ea2a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1ea2e:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1ea32:	f7ff ff95 	bl	1e960 <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1ea36:	464b      	mov	r3, r9
   1ea38:	2235      	movs	r2, #53	; 0x35
   1ea3a:	4641      	mov	r1, r8
   1ea3c:	4668      	mov	r0, sp
   1ea3e:	f00f f9ba 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   1ea42:	4604      	mov	r4, r0
   1ea44:	b980      	cbnz	r0, 1ea68 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1ea46:	4648      	mov	r0, r9
   1ea48:	f00f f9a7 	bl	2dd9a <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1ea4c:	2301      	movs	r3, #1
   1ea4e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1ea52:	2235      	movs	r2, #53	; 0x35
   1ea54:	463b      	mov	r3, r7
   1ea56:	4641      	mov	r1, r8
   1ea58:	4668      	mov	r0, sp
   1ea5a:	f00f f9ac 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   1ea5e:	4604      	mov	r4, r0
   1ea60:	b910      	cbnz	r0, 1ea68 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1ea62:	4638      	mov	r0, r7
   1ea64:	f00f f999 	bl	2dd9a <sys_mem_swap.constprop.0>

	return 0;
}
   1ea68:	4620      	mov	r0, r4
   1ea6a:	b01a      	add	sp, #104	; 0x68
   1ea6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ea70:	0002f5aa 	.word	0x0002f5aa
   1ea74:	00033422 	.word	0x00033422

0001ea78 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1ea78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea7a:	b099      	sub	sp, #100	; 0x64
   1ea7c:	4614      	mov	r4, r2
   1ea7e:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1ea80:	2220      	movs	r2, #32
   1ea82:	4601      	mov	r1, r0
   1ea84:	a804      	add	r0, sp, #16
{
   1ea86:	461e      	mov	r6, r3
   1ea88:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1ea8a:	f7ff ff69 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ea8e:	2220      	movs	r2, #32
   1ea90:	4639      	mov	r1, r7
   1ea92:	a80c      	add	r0, sp, #48	; 0x30
   1ea94:	f7ff ff64 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1ea98:	2210      	movs	r2, #16
   1ea9a:	4631      	mov	r1, r6
   1ea9c:	a814      	add	r0, sp, #80	; 0x50
   1ea9e:	f7ff ff5f 	bl	1e960 <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1eaa2:	4621      	mov	r1, r4
   1eaa4:	2210      	movs	r2, #16
   1eaa6:	4668      	mov	r0, sp
   1eaa8:	f7ff ff5a 	bl	1e960 <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1eaac:	466b      	mov	r3, sp
   1eaae:	2250      	movs	r2, #80	; 0x50
   1eab0:	a904      	add	r1, sp, #16
   1eab2:	4618      	mov	r0, r3
   1eab4:	f00f f97f 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   1eab8:	4604      	mov	r4, r0
   1eaba:	b960      	cbnz	r0, 1ead6 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1eabc:	2204      	movs	r2, #4
   1eabe:	a903      	add	r1, sp, #12
   1eac0:	4628      	mov	r0, r5
   1eac2:	f00d f819 	bl	2baf8 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1eac6:	682b      	ldr	r3, [r5, #0]
   1eac8:	4a04      	ldr	r2, [pc, #16]	; (1eadc <bt_crypto_g2+0x64>)
   1eaca:	ba1b      	rev	r3, r3
   1eacc:	fbb3 f1f2 	udiv	r1, r3, r2
   1ead0:	fb02 3311 	mls	r3, r2, r1, r3
   1ead4:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1ead6:	4620      	mov	r0, r4
   1ead8:	b019      	add	sp, #100	; 0x64
   1eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eadc:	000f4240 	.word	0x000f4240

0001eae0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1eae0:	4b02      	ldr	r3, [pc, #8]	; (1eaec <net_buf_pool_get+0xc>)
   1eae2:	2234      	movs	r2, #52	; 0x34
   1eae4:	fb02 3000 	mla	r0, r2, r0, r3
   1eae8:	4770      	bx	lr
   1eaea:	bf00      	nop
   1eaec:	20000bd4 	.word	0x20000bd4

0001eaf0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eaf0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1eaf2:	4b07      	ldr	r3, [pc, #28]	; (1eb10 <net_buf_id+0x20>)
   1eaf4:	2134      	movs	r1, #52	; 0x34
   1eaf6:	fb01 3302 	mla	r3, r1, r2, r3
   1eafa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1eafc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1eb00:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1eb02:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1eb04:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1eb08:	fbb0 f0f3 	udiv	r0, r0, r3
   1eb0c:	4770      	bx	lr
   1eb0e:	bf00      	nop
   1eb10:	20000bd4 	.word	0x20000bd4

0001eb14 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1eb14:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb16:	4b0a      	ldr	r3, [pc, #40]	; (1eb40 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eb18:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb1a:	2434      	movs	r4, #52	; 0x34
   1eb1c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1eb20:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eb24:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1eb26:	681a      	ldr	r2, [r3, #0]
   1eb28:	4294      	cmp	r4, r2
   1eb2a:	bf94      	ite	ls
   1eb2c:	600c      	strls	r4, [r1, #0]
   1eb2e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1eb30:	e9d3 5400 	ldrd	r5, r4, [r3]
   1eb34:	f7ff ffdc 	bl	1eaf0 <net_buf_id>
}
   1eb38:	fb05 4000 	mla	r0, r5, r0, r4
   1eb3c:	bd38      	pop	{r3, r4, r5, pc}
   1eb3e:	bf00      	nop
   1eb40:	20000bd4 	.word	0x20000bd4

0001eb44 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb48:	b085      	sub	sp, #20
   1eb4a:	4605      	mov	r5, r0
   1eb4c:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1eb4e:	4610      	mov	r0, r2
   1eb50:	4619      	mov	r1, r3
{
   1eb52:	4691      	mov	r9, r2
   1eb54:	4698      	mov	r8, r3
   1eb56:	4617      	mov	r7, r2
   1eb58:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1eb5a:	f010 f8ea 	bl	2ed32 <sys_clock_timeout_end_calc>
   1eb5e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1eb62:	b93d      	cbnz	r5, 1eb74 <net_buf_alloc_len+0x30>
   1eb64:	495e      	ldr	r1, [pc, #376]	; (1ece0 <net_buf_alloc_len+0x19c>)
   1eb66:	485f      	ldr	r0, [pc, #380]	; (1ece4 <net_buf_alloc_len+0x1a0>)
   1eb68:	22f4      	movs	r2, #244	; 0xf4
   1eb6a:	f00b ffef 	bl	2ab4c <assert_print>
   1eb6e:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1eb70:	485b      	ldr	r0, [pc, #364]	; (1ece0 <net_buf_alloc_len+0x19c>)
   1eb72:	e014      	b.n	1eb9e <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   1eb74:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1eb78:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb7c:	f3ef 8b11 	mrs	fp, BASEPRI
   1eb80:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb88:	4650      	mov	r0, sl
   1eb8a:	f005 fd45 	bl	24618 <z_spin_lock_valid>
   1eb8e:	b940      	cbnz	r0, 1eba2 <net_buf_alloc_len+0x5e>
   1eb90:	4955      	ldr	r1, [pc, #340]	; (1ece8 <net_buf_alloc_len+0x1a4>)
   1eb92:	4854      	ldr	r0, [pc, #336]	; (1ece4 <net_buf_alloc_len+0x1a0>)
   1eb94:	2294      	movs	r2, #148	; 0x94
   1eb96:	f00b ffd9 	bl	2ab4c <assert_print>
   1eb9a:	2194      	movs	r1, #148	; 0x94
   1eb9c:	4852      	ldr	r0, [pc, #328]	; (1ece8 <net_buf_alloc_len+0x1a4>)
   1eb9e:	f00b ffce 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   1eba2:	4650      	mov	r0, sl
   1eba4:	f005 fd56 	bl	24654 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1eba8:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	d06a      	beq.n	1ec84 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   1ebae:	8c2a      	ldrh	r2, [r5, #32]
   1ebb0:	429a      	cmp	r2, r3
   1ebb2:	d947      	bls.n	1ec44 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   1ebb4:	2200      	movs	r2, #0
   1ebb6:	2300      	movs	r3, #0
   1ebb8:	4628      	mov	r0, r5
   1ebba:	f006 f84b 	bl	24c54 <z_impl_k_queue_get>
			if (buf) {
   1ebbe:	4604      	mov	r4, r0
   1ebc0:	2800      	cmp	r0, #0
   1ebc2:	d03f      	beq.n	1ec44 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ebc4:	4650      	mov	r0, sl
   1ebc6:	f005 fd35 	bl	24634 <z_spin_unlock_valid>
   1ebca:	b930      	cbnz	r0, 1ebda <net_buf_alloc_len+0x96>
   1ebcc:	4946      	ldr	r1, [pc, #280]	; (1ece8 <net_buf_alloc_len+0x1a4>)
   1ebce:	4845      	ldr	r0, [pc, #276]	; (1ece4 <net_buf_alloc_len+0x1a0>)
   1ebd0:	22c2      	movs	r2, #194	; 0xc2
   1ebd2:	f00b ffbb 	bl	2ab4c <assert_print>
   1ebd6:	21c2      	movs	r1, #194	; 0xc2
   1ebd8:	e7e0      	b.n	1eb9c <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1ebda:	f38b 8811 	msr	BASEPRI, fp
   1ebde:	f3bf 8f6f 	isb	sy
	if (size) {
   1ebe2:	9d03      	ldr	r5, [sp, #12]
   1ebe4:	2d00      	cmp	r5, #0
   1ebe6:	d06f      	beq.n	1ecc8 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ebe8:	ea58 0309 	orrs.w	r3, r8, r9
   1ebec:	d010      	beq.n	1ec10 <net_buf_alloc_len+0xcc>
   1ebee:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ebf2:	bf08      	it	eq
   1ebf4:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1ebf8:	d00a      	beq.n	1ec10 <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1ebfa:	f008 f88f 	bl	26d1c <sys_clock_tick_get>
   1ebfe:	9b01      	ldr	r3, [sp, #4]
   1ec00:	1a1f      	subs	r7, r3, r0
   1ec02:	9b02      	ldr	r3, [sp, #8]
   1ec04:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1ec08:	2e00      	cmp	r6, #0
   1ec0a:	bfbc      	itt	lt
   1ec0c:	2700      	movlt	r7, #0
   1ec0e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ec10:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ec12:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1ecec <net_buf_alloc_len+0x1a8>
   1ec16:	f04f 0934 	mov.w	r9, #52	; 0x34
   1ec1a:	fb09 8303 	mla	r3, r9, r3, r8
   1ec1e:	463a      	mov	r2, r7
   1ec20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ec22:	681b      	ldr	r3, [r3, #0]
   1ec24:	a903      	add	r1, sp, #12
   1ec26:	f8d3 a000 	ldr.w	sl, [r3]
   1ec2a:	4620      	mov	r0, r4
   1ec2c:	4633      	mov	r3, r6
   1ec2e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1ec30:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1ec32:	2800      	cmp	r0, #0
   1ec34:	d13c      	bne.n	1ecb0 <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   1ec36:	7aa0      	ldrb	r0, [r4, #10]
   1ec38:	4621      	mov	r1, r4
   1ec3a:	fb00 8009 	mla	r0, r0, r9, r8
   1ec3e:	f00f ffbf 	bl	2ebc0 <k_queue_prepend>
}
   1ec42:	e030      	b.n	1eca6 <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   1ec44:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1ec46:	1e63      	subs	r3, r4, #1
   1ec48:	846b      	strh	r3, [r5, #34]	; 0x22
   1ec4a:	4650      	mov	r0, sl
   1ec4c:	f005 fcf2 	bl	24634 <z_spin_unlock_valid>
   1ec50:	2800      	cmp	r0, #0
   1ec52:	d0bb      	beq.n	1ebcc <net_buf_alloc_len+0x88>
   1ec54:	f38b 8811 	msr	BASEPRI, fp
   1ec58:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec5c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ec60:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec62:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ec64:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ec66:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec68:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ec6c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ec70:	4b1e      	ldr	r3, [pc, #120]	; (1ecec <net_buf_alloc_len+0x1a8>)
   1ec72:	4a1f      	ldr	r2, [pc, #124]	; (1ecf0 <net_buf_alloc_len+0x1ac>)
   1ec74:	1aeb      	subs	r3, r5, r3
   1ec76:	109b      	asrs	r3, r3, #2
   1ec78:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ec7a:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ec7c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ec80:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ec82:	e7ae      	b.n	1ebe2 <net_buf_alloc_len+0x9e>
   1ec84:	4650      	mov	r0, sl
   1ec86:	f005 fcd5 	bl	24634 <z_spin_unlock_valid>
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	d09e      	beq.n	1ebcc <net_buf_alloc_len+0x88>
   1ec8e:	f38b 8811 	msr	BASEPRI, fp
   1ec92:	f3bf 8f6f 	isb	sy
   1ec96:	464a      	mov	r2, r9
   1ec98:	4643      	mov	r3, r8
   1ec9a:	4628      	mov	r0, r5
   1ec9c:	f005 ffda 	bl	24c54 <z_impl_k_queue_get>
	if (!buf) {
   1eca0:	4604      	mov	r4, r0
   1eca2:	2800      	cmp	r0, #0
   1eca4:	d19d      	bne.n	1ebe2 <net_buf_alloc_len+0x9e>
		return NULL;
   1eca6:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1eca8:	4620      	mov	r0, r4
   1ecaa:	b005      	add	sp, #20
   1ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ecb0:	9b03      	ldr	r3, [sp, #12]
   1ecb2:	429d      	cmp	r5, r3
   1ecb4:	d909      	bls.n	1ecca <net_buf_alloc_len+0x186>
   1ecb6:	490a      	ldr	r1, [pc, #40]	; (1ece0 <net_buf_alloc_len+0x19c>)
   1ecb8:	480a      	ldr	r0, [pc, #40]	; (1ece4 <net_buf_alloc_len+0x1a0>)
   1ecba:	f240 1255 	movw	r2, #341	; 0x155
   1ecbe:	f00b ff45 	bl	2ab4c <assert_print>
   1ecc2:	f240 1155 	movw	r1, #341	; 0x155
   1ecc6:	e753      	b.n	1eb70 <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1ecc8:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1ecca:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1eccc:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ecce:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ecd0:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ecd2:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ecd4:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1ecd6:	6963      	ldr	r3, [r4, #20]
   1ecd8:	8262      	strh	r2, [r4, #18]
   1ecda:	60e3      	str	r3, [r4, #12]
}
   1ecdc:	e7e4      	b.n	1eca8 <net_buf_alloc_len+0x164>
   1ecde:	bf00      	nop
   1ece0:	0003343c 	.word	0x0003343c
   1ece4:	0003013d 	.word	0x0003013d
   1ece8:	00030879 	.word	0x00030879
   1ecec:	20000bd4 	.word	0x20000bd4
   1ecf0:	c4ec4ec5 	.word	0xc4ec4ec5

0001ecf4 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ecf4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ecf6:	b950      	cbnz	r0, 1ed0e <net_buf_simple_reserve+0x1a>
   1ecf8:	490c      	ldr	r1, [pc, #48]	; (1ed2c <net_buf_simple_reserve+0x38>)
   1ecfa:	480d      	ldr	r0, [pc, #52]	; (1ed30 <net_buf_simple_reserve+0x3c>)
   1ecfc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1ed00:	f00b ff24 	bl	2ab4c <assert_print>
   1ed04:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1ed08:	4808      	ldr	r0, [pc, #32]	; (1ed2c <net_buf_simple_reserve+0x38>)
   1ed0a:	f00b ff18 	bl	2ab3e <assert_post_action>
   1ed0e:	8883      	ldrh	r3, [r0, #4]
   1ed10:	b143      	cbz	r3, 1ed24 <net_buf_simple_reserve+0x30>
   1ed12:	4906      	ldr	r1, [pc, #24]	; (1ed2c <net_buf_simple_reserve+0x38>)
   1ed14:	4806      	ldr	r0, [pc, #24]	; (1ed30 <net_buf_simple_reserve+0x3c>)
   1ed16:	f240 12b9 	movw	r2, #441	; 0x1b9
   1ed1a:	f00b ff17 	bl	2ab4c <assert_print>
   1ed1e:	f240 11b9 	movw	r1, #441	; 0x1b9
   1ed22:	e7f1      	b.n	1ed08 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ed24:	6883      	ldr	r3, [r0, #8]
   1ed26:	440b      	add	r3, r1
   1ed28:	6003      	str	r3, [r0, #0]
}
   1ed2a:	bd08      	pop	{r3, pc}
   1ed2c:	0003343c 	.word	0x0003343c
   1ed30:	0003013d 	.word	0x0003013d

0001ed34 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ed34:	b570      	push	{r4, r5, r6, lr}
   1ed36:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ed38:	4605      	mov	r5, r0
   1ed3a:	b950      	cbnz	r0, 1ed52 <net_buf_slist_put+0x1e>
   1ed3c:	4922      	ldr	r1, [pc, #136]	; (1edc8 <net_buf_slist_put+0x94>)
   1ed3e:	4823      	ldr	r0, [pc, #140]	; (1edcc <net_buf_slist_put+0x98>)
   1ed40:	f240 12c5 	movw	r2, #453	; 0x1c5
   1ed44:	f00b ff02 	bl	2ab4c <assert_print>
   1ed48:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1ed4c:	481e      	ldr	r0, [pc, #120]	; (1edc8 <net_buf_slist_put+0x94>)
   1ed4e:	f00b fef6 	bl	2ab3e <assert_post_action>
   1ed52:	b941      	cbnz	r1, 1ed66 <net_buf_slist_put+0x32>
   1ed54:	491c      	ldr	r1, [pc, #112]	; (1edc8 <net_buf_slist_put+0x94>)
   1ed56:	481d      	ldr	r0, [pc, #116]	; (1edcc <net_buf_slist_put+0x98>)
   1ed58:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1ed5c:	f00b fef6 	bl	2ab4c <assert_print>
   1ed60:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1ed64:	e7f2      	b.n	1ed4c <net_buf_slist_put+0x18>
	__asm__ volatile(
   1ed66:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed6a:	f3ef 8611 	mrs	r6, BASEPRI
   1ed6e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ed76:	4816      	ldr	r0, [pc, #88]	; (1edd0 <net_buf_slist_put+0x9c>)
   1ed78:	f005 fc4e 	bl	24618 <z_spin_lock_valid>
   1ed7c:	b938      	cbnz	r0, 1ed8e <net_buf_slist_put+0x5a>
   1ed7e:	4915      	ldr	r1, [pc, #84]	; (1edd4 <net_buf_slist_put+0xa0>)
   1ed80:	4812      	ldr	r0, [pc, #72]	; (1edcc <net_buf_slist_put+0x98>)
   1ed82:	2294      	movs	r2, #148	; 0x94
   1ed84:	f00b fee2 	bl	2ab4c <assert_print>
   1ed88:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed8a:	4812      	ldr	r0, [pc, #72]	; (1edd4 <net_buf_slist_put+0xa0>)
   1ed8c:	e7df      	b.n	1ed4e <net_buf_slist_put+0x1a>
	z_spin_lock_set_owner(l);
   1ed8e:	4810      	ldr	r0, [pc, #64]	; (1edd0 <net_buf_slist_put+0x9c>)
   1ed90:	f005 fc60 	bl	24654 <z_spin_lock_set_owner>
	parent->next = child;
   1ed94:	2300      	movs	r3, #0
   1ed96:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ed98:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ed9a:	b963      	cbnz	r3, 1edb6 <net_buf_slist_put+0x82>
	list->head = node;
   1ed9c:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eda0:	480b      	ldr	r0, [pc, #44]	; (1edd0 <net_buf_slist_put+0x9c>)
   1eda2:	f005 fc47 	bl	24634 <z_spin_unlock_valid>
   1eda6:	b948      	cbnz	r0, 1edbc <net_buf_slist_put+0x88>
   1eda8:	490a      	ldr	r1, [pc, #40]	; (1edd4 <net_buf_slist_put+0xa0>)
   1edaa:	4808      	ldr	r0, [pc, #32]	; (1edcc <net_buf_slist_put+0x98>)
   1edac:	22c2      	movs	r2, #194	; 0xc2
   1edae:	f00b fecd 	bl	2ab4c <assert_print>
   1edb2:	21c2      	movs	r1, #194	; 0xc2
   1edb4:	e7e9      	b.n	1ed8a <net_buf_slist_put+0x56>
	parent->next = child;
   1edb6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1edb8:	606c      	str	r4, [r5, #4]
}
   1edba:	e7f1      	b.n	1eda0 <net_buf_slist_put+0x6c>
	__asm__ volatile(
   1edbc:	f386 8811 	msr	BASEPRI, r6
   1edc0:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1edc4:	bd70      	pop	{r4, r5, r6, pc}
   1edc6:	bf00      	nop
   1edc8:	0003343c 	.word	0x0003343c
   1edcc:	0003013d 	.word	0x0003013d
   1edd0:	20003528 	.word	0x20003528
   1edd4:	00030879 	.word	0x00030879

0001edd8 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1edd8:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1edda:	4604      	mov	r4, r0
   1eddc:	b950      	cbnz	r0, 1edf4 <net_buf_slist_get+0x1c>
   1edde:	491d      	ldr	r1, [pc, #116]	; (1ee54 <net_buf_slist_get+0x7c>)
   1ede0:	481d      	ldr	r0, [pc, #116]	; (1ee58 <net_buf_slist_get+0x80>)
   1ede2:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1ede6:	f00b feb1 	bl	2ab4c <assert_print>
   1edea:	481a      	ldr	r0, [pc, #104]	; (1ee54 <net_buf_slist_get+0x7c>)
   1edec:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edf0:	f00b fea5 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   1edf4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edf8:	f3ef 8611 	mrs	r6, BASEPRI
   1edfc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ee00:	f3bf 8f6f 	isb	sy
   1ee04:	4815      	ldr	r0, [pc, #84]	; (1ee5c <net_buf_slist_get+0x84>)
   1ee06:	f005 fc07 	bl	24618 <z_spin_lock_valid>
   1ee0a:	b938      	cbnz	r0, 1ee1c <net_buf_slist_get+0x44>
   1ee0c:	4914      	ldr	r1, [pc, #80]	; (1ee60 <net_buf_slist_get+0x88>)
   1ee0e:	4812      	ldr	r0, [pc, #72]	; (1ee58 <net_buf_slist_get+0x80>)
   1ee10:	2294      	movs	r2, #148	; 0x94
   1ee12:	f00b fe9b 	bl	2ab4c <assert_print>
   1ee16:	2194      	movs	r1, #148	; 0x94
   1ee18:	4811      	ldr	r0, [pc, #68]	; (1ee60 <net_buf_slist_get+0x88>)
   1ee1a:	e7e9      	b.n	1edf0 <net_buf_slist_get+0x18>
	z_spin_lock_set_owner(l);
   1ee1c:	480f      	ldr	r0, [pc, #60]	; (1ee5c <net_buf_slist_get+0x84>)
   1ee1e:	f005 fc19 	bl	24654 <z_spin_lock_set_owner>
	return list->head;
   1ee22:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ee24:	b12d      	cbz	r5, 1ee32 <net_buf_slist_get+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee26:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1ee28:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ee2a:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee2c:	4295      	cmp	r5, r2
	list->tail = node;
   1ee2e:	bf08      	it	eq
   1ee30:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ee32:	480a      	ldr	r0, [pc, #40]	; (1ee5c <net_buf_slist_get+0x84>)
   1ee34:	f005 fbfe 	bl	24634 <z_spin_unlock_valid>
   1ee38:	b930      	cbnz	r0, 1ee48 <net_buf_slist_get+0x70>
   1ee3a:	4909      	ldr	r1, [pc, #36]	; (1ee60 <net_buf_slist_get+0x88>)
   1ee3c:	4806      	ldr	r0, [pc, #24]	; (1ee58 <net_buf_slist_get+0x80>)
   1ee3e:	22c2      	movs	r2, #194	; 0xc2
   1ee40:	f00b fe84 	bl	2ab4c <assert_print>
   1ee44:	21c2      	movs	r1, #194	; 0xc2
   1ee46:	e7e7      	b.n	1ee18 <net_buf_slist_get+0x40>
	__asm__ volatile(
   1ee48:	f386 8811 	msr	BASEPRI, r6
   1ee4c:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ee50:	4628      	mov	r0, r5
   1ee52:	bd70      	pop	{r4, r5, r6, pc}
   1ee54:	0003343c 	.word	0x0003343c
   1ee58:	0003013d 	.word	0x0003013d
   1ee5c:	20003528 	.word	0x20003528
   1ee60:	00030879 	.word	0x00030879

0001ee64 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ee64:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1ee66:	b950      	cbnz	r0, 1ee7e <net_buf_put+0x1a>
   1ee68:	490c      	ldr	r1, [pc, #48]	; (1ee9c <net_buf_put+0x38>)
   1ee6a:	480d      	ldr	r0, [pc, #52]	; (1eea0 <net_buf_put+0x3c>)
   1ee6c:	f240 12df 	movw	r2, #479	; 0x1df
   1ee70:	f00b fe6c 	bl	2ab4c <assert_print>
   1ee74:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1ee78:	4808      	ldr	r0, [pc, #32]	; (1ee9c <net_buf_put+0x38>)
   1ee7a:	f00b fe60 	bl	2ab3e <assert_post_action>
   1ee7e:	b941      	cbnz	r1, 1ee92 <net_buf_put+0x2e>
   1ee80:	4906      	ldr	r1, [pc, #24]	; (1ee9c <net_buf_put+0x38>)
   1ee82:	4807      	ldr	r0, [pc, #28]	; (1eea0 <net_buf_put+0x3c>)
   1ee84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ee88:	f00b fe60 	bl	2ab4c <assert_print>
   1ee8c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ee90:	e7f2      	b.n	1ee78 <net_buf_put+0x14>

	k_fifo_put(fifo, buf);
}
   1ee92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1ee96:	f00f be88 	b.w	2ebaa <k_queue_append>
   1ee9a:	bf00      	nop
   1ee9c:	0003343c 	.word	0x0003343c
   1eea0:	0003013d 	.word	0x0003013d

0001eea4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1eea8:	4605      	mov	r5, r0
   1eeaa:	b328      	cbz	r0, 1eef8 <net_buf_unref+0x54>
   1eeac:	4e1b      	ldr	r6, [pc, #108]	; (1ef1c <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1eeae:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1eeb0:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1eeb4:	462c      	mov	r4, r5
   1eeb6:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1eeb8:	7a23      	ldrb	r3, [r4, #8]
   1eeba:	3b01      	subs	r3, #1
   1eebc:	b2db      	uxtb	r3, r3
   1eebe:	7223      	strb	r3, [r4, #8]
   1eec0:	b9c3      	cbnz	r3, 1eef4 <net_buf_unref+0x50>
		if (buf->__buf) {
   1eec2:	6961      	ldr	r1, [r4, #20]
   1eec4:	b159      	cbz	r1, 1eede <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1eec6:	7a63      	ldrb	r3, [r4, #9]
   1eec8:	07db      	lsls	r3, r3, #31
   1eeca:	d407      	bmi.n	1eedc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eecc:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1eece:	fb08 6303 	mla	r3, r8, r3, r6
   1eed2:	4620      	mov	r0, r4
   1eed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eed6:	681b      	ldr	r3, [r3, #0]
   1eed8:	689b      	ldr	r3, [r3, #8]
   1eeda:	4798      	blx	r3
			buf->__buf = NULL;
   1eedc:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1eede:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1eee0:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1eee2:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1eee6:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1eee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1eeea:	b183      	cbz	r3, 1ef0e <net_buf_unref+0x6a>
			pool->destroy(buf);
   1eeec:	4620      	mov	r0, r4
   1eeee:	4798      	blx	r3
	while (buf) {
   1eef0:	2d00      	cmp	r5, #0
   1eef2:	d1df      	bne.n	1eeb4 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1eef8:	4909      	ldr	r1, [pc, #36]	; (1ef20 <net_buf_unref+0x7c>)
   1eefa:	480a      	ldr	r0, [pc, #40]	; (1ef24 <net_buf_unref+0x80>)
   1eefc:	f240 12eb 	movw	r2, #491	; 0x1eb
   1ef00:	f00b fe24 	bl	2ab4c <assert_print>
   1ef04:	4806      	ldr	r0, [pc, #24]	; (1ef20 <net_buf_unref+0x7c>)
   1ef06:	f240 11eb 	movw	r1, #491	; 0x1eb
   1ef0a:	f00b fe18 	bl	2ab3e <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1ef0e:	4621      	mov	r1, r4
   1ef10:	fb00 6008 	mla	r0, r0, r8, r6
   1ef14:	f00f fe54 	bl	2ebc0 <k_queue_prepend>
}
   1ef18:	e7ea      	b.n	1eef0 <net_buf_unref+0x4c>
   1ef1a:	bf00      	nop
   1ef1c:	20000bd4 	.word	0x20000bd4
   1ef20:	0003343c 	.word	0x0003343c
   1ef24:	0003013d 	.word	0x0003013d

0001ef28 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1ef28:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ef2a:	b950      	cbnz	r0, 1ef42 <net_buf_ref+0x1a>
   1ef2c:	4907      	ldr	r1, [pc, #28]	; (1ef4c <net_buf_ref+0x24>)
   1ef2e:	4808      	ldr	r0, [pc, #32]	; (1ef50 <net_buf_ref+0x28>)
   1ef30:	f240 221a 	movw	r2, #538	; 0x21a
   1ef34:	f00b fe0a 	bl	2ab4c <assert_print>
   1ef38:	4804      	ldr	r0, [pc, #16]	; (1ef4c <net_buf_ref+0x24>)
   1ef3a:	f240 211a 	movw	r1, #538	; 0x21a
   1ef3e:	f00b fdfe 	bl	2ab3e <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1ef42:	7a02      	ldrb	r2, [r0, #8]
   1ef44:	3201      	adds	r2, #1
   1ef46:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1ef48:	bd08      	pop	{r3, pc}
   1ef4a:	bf00      	nop
   1ef4c:	0003343c 	.word	0x0003343c
   1ef50:	0003013d 	.word	0x0003013d

0001ef54 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1ef54:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ef56:	4603      	mov	r3, r0
   1ef58:	b950      	cbnz	r0, 1ef70 <net_buf_frag_last+0x1c>
   1ef5a:	4908      	ldr	r1, [pc, #32]	; (1ef7c <net_buf_frag_last+0x28>)
   1ef5c:	4808      	ldr	r0, [pc, #32]	; (1ef80 <net_buf_frag_last+0x2c>)
   1ef5e:	f240 2257 	movw	r2, #599	; 0x257
   1ef62:	f00b fdf3 	bl	2ab4c <assert_print>
   1ef66:	4805      	ldr	r0, [pc, #20]	; (1ef7c <net_buf_frag_last+0x28>)
   1ef68:	f240 2157 	movw	r1, #599	; 0x257
   1ef6c:	f00b fde7 	bl	2ab3e <assert_post_action>

	while (buf->frags) {
   1ef70:	4618      	mov	r0, r3
   1ef72:	685b      	ldr	r3, [r3, #4]
   1ef74:	2b00      	cmp	r3, #0
   1ef76:	d1fb      	bne.n	1ef70 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1ef78:	bd08      	pop	{r3, pc}
   1ef7a:	bf00      	nop
   1ef7c:	0003343c 	.word	0x0003343c
   1ef80:	0003013d 	.word	0x0003013d

0001ef84 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ef84:	b570      	push	{r4, r5, r6, lr}
   1ef86:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1ef88:	4604      	mov	r4, r0
   1ef8a:	b950      	cbnz	r0, 1efa2 <net_buf_frag_insert+0x1e>
   1ef8c:	490e      	ldr	r1, [pc, #56]	; (1efc8 <net_buf_frag_insert+0x44>)
   1ef8e:	480f      	ldr	r0, [pc, #60]	; (1efcc <net_buf_frag_insert+0x48>)
   1ef90:	f240 2262 	movw	r2, #610	; 0x262
   1ef94:	f00b fdda 	bl	2ab4c <assert_print>
   1ef98:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1ef9c:	480a      	ldr	r0, [pc, #40]	; (1efc8 <net_buf_frag_insert+0x44>)
   1ef9e:	f00b fdce 	bl	2ab3e <assert_post_action>
   1efa2:	b941      	cbnz	r1, 1efb6 <net_buf_frag_insert+0x32>
   1efa4:	4908      	ldr	r1, [pc, #32]	; (1efc8 <net_buf_frag_insert+0x44>)
   1efa6:	4809      	ldr	r0, [pc, #36]	; (1efcc <net_buf_frag_insert+0x48>)
   1efa8:	f240 2263 	movw	r2, #611	; 0x263
   1efac:	f00b fdce 	bl	2ab4c <assert_print>
   1efb0:	f240 2163 	movw	r1, #611	; 0x263
   1efb4:	e7f2      	b.n	1ef9c <net_buf_frag_insert+0x18>

	if (parent->frags) {
   1efb6:	6846      	ldr	r6, [r0, #4]
   1efb8:	b11e      	cbz	r6, 1efc2 <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   1efba:	4608      	mov	r0, r1
   1efbc:	f7ff ffca 	bl	1ef54 <net_buf_frag_last>
   1efc0:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1efc2:	6065      	str	r5, [r4, #4]
}
   1efc4:	bd70      	pop	{r4, r5, r6, pc}
   1efc6:	bf00      	nop
   1efc8:	0003343c 	.word	0x0003343c
   1efcc:	0003013d 	.word	0x0003013d

0001efd0 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1efd0:	b538      	push	{r3, r4, r5, lr}
   1efd2:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1efd4:	460c      	mov	r4, r1
   1efd6:	b951      	cbnz	r1, 1efee <net_buf_frag_add+0x1e>
   1efd8:	490b      	ldr	r1, [pc, #44]	; (1f008 <net_buf_frag_add+0x38>)
   1efda:	480c      	ldr	r0, [pc, #48]	; (1f00c <net_buf_frag_add+0x3c>)
   1efdc:	f240 226e 	movw	r2, #622	; 0x26e
   1efe0:	f00b fdb4 	bl	2ab4c <assert_print>
   1efe4:	4808      	ldr	r0, [pc, #32]	; (1f008 <net_buf_frag_add+0x38>)
   1efe6:	f240 216e 	movw	r1, #622	; 0x26e
   1efea:	f00b fda8 	bl	2ab3e <assert_post_action>

	if (!head) {
   1efee:	b920      	cbnz	r0, 1effa <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1eff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1eff4:	4608      	mov	r0, r1
   1eff6:	f7ff bf97 	b.w	1ef28 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1effa:	f7ff ffab 	bl	1ef54 <net_buf_frag_last>
   1effe:	4621      	mov	r1, r4
   1f000:	f7ff ffc0 	bl	1ef84 <net_buf_frag_insert>
}
   1f004:	4628      	mov	r0, r5
   1f006:	bd38      	pop	{r3, r4, r5, pc}
   1f008:	0003343c 	.word	0x0003343c
   1f00c:	0003013d 	.word	0x0003013d

0001f010 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1f010:	b508      	push	{r3, lr}
   1f012:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1f014:	6800      	ldr	r0, [r0, #0]
   1f016:	689a      	ldr	r2, [r3, #8]
   1f018:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1f01a:	4291      	cmp	r1, r2
   1f01c:	d90a      	bls.n	1f034 <net_buf_simple_push+0x24>
   1f01e:	4908      	ldr	r1, [pc, #32]	; (1f040 <net_buf_simple_push+0x30>)
   1f020:	4808      	ldr	r0, [pc, #32]	; (1f044 <net_buf_simple_push+0x34>)
   1f022:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1f026:	f00b fd91 	bl	2ab4c <assert_print>
   1f02a:	4805      	ldr	r0, [pc, #20]	; (1f040 <net_buf_simple_push+0x30>)
   1f02c:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1f030:	f00b fd85 	bl	2ab3e <assert_post_action>
	buf->len += len;
   1f034:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1f036:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1f038:	4411      	add	r1, r2
	buf->data -= len;
   1f03a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1f03c:	8099      	strh	r1, [r3, #4]
}
   1f03e:	bd08      	pop	{r3, pc}
   1f040:	0003343c 	.word	0x0003343c
   1f044:	0003013d 	.word	0x0003013d

0001f048 <net_buf_simple_pull>:
{
   1f048:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1f04a:	8882      	ldrh	r2, [r0, #4]
   1f04c:	428a      	cmp	r2, r1
{
   1f04e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1f050:	d20a      	bcs.n	1f068 <net_buf_simple_pull+0x20>
   1f052:	4908      	ldr	r1, [pc, #32]	; (1f074 <net_buf_simple_pull+0x2c>)
   1f054:	4808      	ldr	r0, [pc, #32]	; (1f078 <net_buf_simple_pull+0x30>)
   1f056:	f240 4252 	movw	r2, #1106	; 0x452
   1f05a:	f00b fd77 	bl	2ab4c <assert_print>
   1f05e:	4805      	ldr	r0, [pc, #20]	; (1f074 <net_buf_simple_pull+0x2c>)
   1f060:	f240 4152 	movw	r1, #1106	; 0x452
   1f064:	f00b fd6b 	bl	2ab3e <assert_post_action>
	buf->len -= len;
   1f068:	1a52      	subs	r2, r2, r1
   1f06a:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f06c:	6800      	ldr	r0, [r0, #0]
   1f06e:	4408      	add	r0, r1
   1f070:	6018      	str	r0, [r3, #0]
}
   1f072:	bd08      	pop	{r3, pc}
   1f074:	0003343c 	.word	0x0003343c
   1f078:	0003013d 	.word	0x0003013d

0001f07c <net_buf_simple_pull_mem>:
{
   1f07c:	b508      	push	{r3, lr}
   1f07e:	4603      	mov	r3, r0
	void *data = buf->data;
   1f080:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1f082:	889a      	ldrh	r2, [r3, #4]
   1f084:	428a      	cmp	r2, r1
   1f086:	d20a      	bcs.n	1f09e <net_buf_simple_pull_mem+0x22>
   1f088:	4907      	ldr	r1, [pc, #28]	; (1f0a8 <net_buf_simple_pull_mem+0x2c>)
   1f08a:	4808      	ldr	r0, [pc, #32]	; (1f0ac <net_buf_simple_pull_mem+0x30>)
   1f08c:	f240 425e 	movw	r2, #1118	; 0x45e
   1f090:	f00b fd5c 	bl	2ab4c <assert_print>
   1f094:	4804      	ldr	r0, [pc, #16]	; (1f0a8 <net_buf_simple_pull_mem+0x2c>)
   1f096:	f240 415e 	movw	r1, #1118	; 0x45e
   1f09a:	f00b fd50 	bl	2ab3e <assert_post_action>
	buf->len -= len;
   1f09e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f0a0:	4401      	add	r1, r0
	buf->len -= len;
   1f0a2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f0a4:	6019      	str	r1, [r3, #0]
}
   1f0a6:	bd08      	pop	{r3, pc}
   1f0a8:	0003343c 	.word	0x0003343c
   1f0ac:	0003013d 	.word	0x0003013d

0001f0b0 <net_buf_simple_add>:
{
   1f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1f0b2:	8885      	ldrh	r5, [r0, #4]
   1f0b4:	6803      	ldr	r3, [r0, #0]
   1f0b6:	460e      	mov	r6, r1
   1f0b8:	4604      	mov	r4, r0
   1f0ba:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1f0bc:	f00e ff2c 	bl	2df18 <net_buf_simple_tailroom>
   1f0c0:	42b0      	cmp	r0, r6
   1f0c2:	d20a      	bcs.n	1f0da <net_buf_simple_add+0x2a>
   1f0c4:	4907      	ldr	r1, [pc, #28]	; (1f0e4 <net_buf_simple_add+0x34>)
   1f0c6:	4808      	ldr	r0, [pc, #32]	; (1f0e8 <net_buf_simple_add+0x38>)
   1f0c8:	f240 3203 	movw	r2, #771	; 0x303
   1f0cc:	f00b fd3e 	bl	2ab4c <assert_print>
   1f0d0:	4804      	ldr	r0, [pc, #16]	; (1f0e4 <net_buf_simple_add+0x34>)
   1f0d2:	f240 3103 	movw	r1, #771	; 0x303
   1f0d6:	f00b fd32 	bl	2ab3e <assert_post_action>
	buf->len += len;
   1f0da:	4435      	add	r5, r6
   1f0dc:	80a5      	strh	r5, [r4, #4]
}
   1f0de:	4638      	mov	r0, r7
   1f0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0e2:	bf00      	nop
   1f0e4:	0003343c 	.word	0x0003343c
   1f0e8:	0003013d 	.word	0x0003013d

0001f0ec <net_buf_append_bytes>:
{
   1f0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0f0:	4606      	mov	r6, r0
   1f0f2:	460c      	mov	r4, r1
   1f0f4:	4615      	mov	r5, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   1f0f6:	f7ff ff2d 	bl	1ef54 <net_buf_frag_last>
	return &_net_buf_pool_list[id];
   1f0fa:	f8df a068 	ldr.w	sl, [pc, #104]	; 1f164 <net_buf_append_bytes+0x78>
	struct net_buf *frag = net_buf_frag_last(buf);
   1f0fe:	4683      	mov	fp, r0
	size_t added_len = 0;
   1f100:	2700      	movs	r7, #0
	return &_net_buf_pool_list[id];
   1f102:	f04f 0934 	mov.w	r9, #52	; 0x34
	return net_buf_simple_tailroom(&buf->b);
   1f106:	f10b 0b0c 	add.w	fp, fp, #12
   1f10a:	4658      	mov	r0, fp
   1f10c:	f00e ff04 	bl	2df18 <net_buf_simple_tailroom>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1f110:	4284      	cmp	r4, r0
   1f112:	bf2c      	ite	cs
   1f114:	fa1f f880 	uxthcs.w	r8, r0
   1f118:	fa1f f884 	uxthcc.w	r8, r4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f11c:	4629      	mov	r1, r5
   1f11e:	4642      	mov	r2, r8
   1f120:	4658      	mov	r0, fp
   1f122:	f00e ff01 	bl	2df28 <net_buf_simple_add_mem>
		if (len == 0) {
   1f126:	ebb4 0408 	subs.w	r4, r4, r8
		added_len += count;
   1f12a:	4447      	add	r7, r8
		value8 += count;
   1f12c:	4445      	add	r5, r8
		if (len == 0) {
   1f12e:	d015      	beq.n	1f15c <net_buf_append_bytes+0x70>
		if (allocate_cb) {
   1f130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f132:	b153      	cbz	r3, 1f14a <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   1f134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f13a:	4798      	blx	r3
			frag = net_buf_alloc_len(pool, len, timeout);
   1f13c:	4683      	mov	fp, r0
		if (!frag) {
   1f13e:	b168      	cbz	r0, 1f15c <net_buf_append_bytes+0x70>
		net_buf_frag_add(buf, frag);
   1f140:	4601      	mov	r1, r0
   1f142:	4630      	mov	r0, r6
   1f144:	f7ff ff44 	bl	1efd0 <net_buf_frag_add>
	do {
   1f148:	e7dd      	b.n	1f106 <net_buf_append_bytes+0x1a>
	return &_net_buf_pool_list[id];
   1f14a:	7ab0      	ldrb	r0, [r6, #10]
			frag = net_buf_alloc_len(pool, len, timeout);
   1f14c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f150:	4621      	mov	r1, r4
   1f152:	fb00 a009 	mla	r0, r0, r9, sl
   1f156:	f7ff fcf5 	bl	1eb44 <net_buf_alloc_len>
   1f15a:	e7ef      	b.n	1f13c <net_buf_append_bytes+0x50>
}
   1f15c:	4638      	mov	r0, r7
   1f15e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f162:	bf00      	nop
   1f164:	20000bd4 	.word	0x20000bd4

0001f168 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1f168:	b508      	push	{r3, lr}
   1f16a:	4804      	ldr	r0, [pc, #16]	; (1f17c <xoshiro128_initialize+0x14>)
   1f16c:	f00f fca5 	bl	2eaba <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1f170:	2800      	cmp	r0, #0
}
   1f172:	bf0c      	ite	eq
   1f174:	f06f 0012 	mvneq.w	r0, #18
   1f178:	2000      	movne	r0, #0
   1f17a:	bd08      	pop	{r3, pc}
   1f17c:	0002f08c 	.word	0x0002f08c

0001f180 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f180:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f182:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f184:	490a      	ldr	r1, [pc, #40]	; (1f1b0 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f186:	4a0b      	ldr	r2, [pc, #44]	; (1f1b4 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1f188:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f18a:	2340      	movs	r3, #64	; 0x40
   1f18c:	9300      	str	r3, [sp, #0]
   1f18e:	1149      	asrs	r1, r1, #5
{
   1f190:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f192:	4623      	mov	r3, r4
   1f194:	4808      	ldr	r0, [pc, #32]	; (1f1b8 <onoff_start+0x38>)
   1f196:	f00e fef6 	bl	2df86 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1f19a:	1e01      	subs	r1, r0, #0
   1f19c:	da05      	bge.n	1f1aa <onoff_start+0x2a>
		notify(mgr, err);
   1f19e:	4628      	mov	r0, r5
   1f1a0:	4623      	mov	r3, r4
	}
}
   1f1a2:	b003      	add	sp, #12
   1f1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1f1a8:	4718      	bx	r3
}
   1f1aa:	b003      	add	sp, #12
   1f1ac:	bd30      	pop	{r4, r5, pc}
   1f1ae:	bf00      	nop
   1f1b0:	20003540 	.word	0x20003540
   1f1b4:	0002dff1 	.word	0x0002dff1
   1f1b8:	0002f014 	.word	0x0002f014

0001f1bc <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1bc:	b2c9      	uxtb	r1, r1
   1f1be:	2901      	cmp	r1, #1
{
   1f1c0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1c2:	d908      	bls.n	1f1d6 <get_status+0x1a>
   1f1c4:	4908      	ldr	r1, [pc, #32]	; (1f1e8 <get_status+0x2c>)
   1f1c6:	4809      	ldr	r0, [pc, #36]	; (1f1ec <get_status+0x30>)
   1f1c8:	227a      	movs	r2, #122	; 0x7a
   1f1ca:	f00b fcbf 	bl	2ab4c <assert_print>
   1f1ce:	4806      	ldr	r0, [pc, #24]	; (1f1e8 <get_status+0x2c>)
   1f1d0:	217a      	movs	r1, #122	; 0x7a
   1f1d2:	f00b fcb4 	bl	2ab3e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f1d6:	6903      	ldr	r3, [r0, #16]
   1f1d8:	220c      	movs	r2, #12
   1f1da:	fb01 3302 	mla	r3, r1, r2, r3
   1f1de:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1f1e0:	f000 0007 	and.w	r0, r0, #7
   1f1e4:	bd08      	pop	{r3, pc}
   1f1e6:	bf00      	nop
   1f1e8:	00033468 	.word	0x00033468
   1f1ec:	0003013d 	.word	0x0003013d

0001f1f0 <stop>:
{
   1f1f0:	b570      	push	{r4, r5, r6, lr}
   1f1f2:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1f4:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1f1f6:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1f8:	d90a      	bls.n	1f210 <stop+0x20>
   1f1fa:	4918      	ldr	r1, [pc, #96]	; (1f25c <stop+0x6c>)
   1f1fc:	4818      	ldr	r0, [pc, #96]	; (1f260 <stop+0x70>)
   1f1fe:	f240 125d 	movw	r2, #349	; 0x15d
   1f202:	f00b fca3 	bl	2ab4c <assert_print>
   1f206:	4815      	ldr	r0, [pc, #84]	; (1f25c <stop+0x6c>)
   1f208:	f240 115d 	movw	r1, #349	; 0x15d
   1f20c:	f00b fc97 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   1f210:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f214:	f3ef 8511 	mrs	r5, BASEPRI
   1f218:	f384 8812 	msr	BASEPRI_MAX, r4
   1f21c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f220:	260c      	movs	r6, #12
   1f222:	fb06 3401 	mla	r4, r6, r1, r3
   1f226:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f228:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1f22c:	d008      	beq.n	1f240 <stop+0x50>
   1f22e:	42a2      	cmp	r2, r4
   1f230:	d006      	beq.n	1f240 <stop+0x50>
	__asm__ volatile(
   1f232:	f385 8811 	msr	BASEPRI, r5
   1f236:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1f23a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f23e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f240:	4371      	muls	r1, r6
   1f242:	440b      	add	r3, r1
   1f244:	2201      	movs	r2, #1
   1f246:	649a      	str	r2, [r3, #72]	; 0x48
   1f248:	f385 8811 	msr	BASEPRI, r5
   1f24c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1f250:	6843      	ldr	r3, [r0, #4]
   1f252:	440b      	add	r3, r1
   1f254:	685b      	ldr	r3, [r3, #4]
   1f256:	4798      	blx	r3
	return 0;
   1f258:	2000      	movs	r0, #0
   1f25a:	e7f0      	b.n	1f23e <stop+0x4e>
   1f25c:	00033468 	.word	0x00033468
   1f260:	0003013d 	.word	0x0003013d

0001f264 <onoff_stop>:
{
   1f264:	b570      	push	{r4, r5, r6, lr}
   1f266:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f268:	4906      	ldr	r1, [pc, #24]	; (1f284 <onoff_stop+0x20>)
   1f26a:	1a41      	subs	r1, r0, r1
{
   1f26c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f26e:	1149      	asrs	r1, r1, #5
   1f270:	4805      	ldr	r0, [pc, #20]	; (1f288 <onoff_stop+0x24>)
   1f272:	2240      	movs	r2, #64	; 0x40
   1f274:	f7ff ffbc 	bl	1f1f0 <stop>
	notify(mgr, res);
   1f278:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f27a:	4601      	mov	r1, r0
	notify(mgr, res);
   1f27c:	4620      	mov	r0, r4
}
   1f27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1f282:	4718      	bx	r3
   1f284:	20003540 	.word	0x20003540
   1f288:	0002f014 	.word	0x0002f014

0001f28c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f28c:	2200      	movs	r2, #0
{
   1f28e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f290:	2101      	movs	r1, #1
{
   1f292:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f294:	4610      	mov	r0, r2
   1f296:	f7f5 fcfb 	bl	14c90 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1f29a:	480f      	ldr	r0, [pc, #60]	; (1f2d8 <clk_init+0x4c>)
   1f29c:	f003 fb34 	bl	22908 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1f2a0:	4b0e      	ldr	r3, [pc, #56]	; (1f2dc <clk_init+0x50>)
   1f2a2:	4298      	cmp	r0, r3
   1f2a4:	d115      	bne.n	1f2d2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1f2a6:	f00f fb3a 	bl	2e91e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1f2aa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f2ac:	490c      	ldr	r1, [pc, #48]	; (1f2e0 <clk_init+0x54>)
   1f2ae:	4630      	mov	r0, r6
   1f2b0:	f00b fbc1 	bl	2aa36 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1f2b4:	2800      	cmp	r0, #0
   1f2b6:	db0b      	blt.n	1f2d0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f2b8:	2501      	movs	r5, #1
   1f2ba:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1f2bc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f2be:	4908      	ldr	r1, [pc, #32]	; (1f2e0 <clk_init+0x54>)
   1f2c0:	f104 0020 	add.w	r0, r4, #32
   1f2c4:	f00b fbb7 	bl	2aa36 <onoff_manager_init>
		if (err < 0) {
   1f2c8:	2800      	cmp	r0, #0
   1f2ca:	db01      	blt.n	1f2d0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f2cc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1f2ce:	2000      	movs	r0, #0
}
   1f2d0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1f2d2:	f06f 0004 	mvn.w	r0, #4
   1f2d6:	e7fb      	b.n	1f2d0 <clk_init+0x44>
   1f2d8:	0001f319 	.word	0x0001f319
   1f2dc:	0bad0000 	.word	0x0bad0000
   1f2e0:	0002fb10 	.word	0x0002fb10

0001f2e4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1f2e4:	b570      	push	{r4, r5, r6, lr}
   1f2e6:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1f2e8:	230c      	movs	r3, #12
   1f2ea:	4809      	ldr	r0, [pc, #36]	; (1f310 <clkstarted_handle.constprop.0+0x2c>)
   1f2ec:	434b      	muls	r3, r1
   1f2ee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1f2f0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1f2f4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1f2f6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1f2f8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1f2fa:	4418      	add	r0, r3
   1f2fc:	f00e fe30 	bl	2df60 <set_on_state>
	if (callback) {
   1f300:	b12d      	cbz	r5, 1f30e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f302:	4632      	mov	r2, r6
   1f304:	462b      	mov	r3, r5
   1f306:	4803      	ldr	r0, [pc, #12]	; (1f314 <clkstarted_handle.constprop.0+0x30>)
}
   1f308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f30c:	4718      	bx	r3
}
   1f30e:	bd70      	pop	{r4, r5, r6, pc}
   1f310:	20003540 	.word	0x20003540
   1f314:	0002f014 	.word	0x0002f014

0001f318 <clock_event_handler>:
	switch (event) {
   1f318:	2801      	cmp	r0, #1
{
   1f31a:	b508      	push	{r3, lr}
	switch (event) {
   1f31c:	d006      	beq.n	1f32c <clock_event_handler+0x14>
   1f31e:	2803      	cmp	r0, #3
   1f320:	d008      	beq.n	1f334 <clock_event_handler+0x1c>
   1f322:	b990      	cbnz	r0, 1f34a <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1f324:	4b0e      	ldr	r3, [pc, #56]	; (1f360 <clock_event_handler+0x48>)
   1f326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f328:	075b      	lsls	r3, r3, #29
   1f32a:	d117      	bne.n	1f35c <clock_event_handler+0x44>
}
   1f32c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1f330:	f7ff bfd8 	b.w	1f2e4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1f334:	490b      	ldr	r1, [pc, #44]	; (1f364 <clock_event_handler+0x4c>)
   1f336:	480c      	ldr	r0, [pc, #48]	; (1f368 <clock_event_handler+0x50>)
   1f338:	f240 226e 	movw	r2, #622	; 0x26e
   1f33c:	f00b fc06 	bl	2ab4c <assert_print>
   1f340:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1f344:	4807      	ldr	r0, [pc, #28]	; (1f364 <clock_event_handler+0x4c>)
   1f346:	f00b fbfa 	bl	2ab3e <assert_post_action>
   1f34a:	4906      	ldr	r1, [pc, #24]	; (1f364 <clock_event_handler+0x4c>)
   1f34c:	4806      	ldr	r0, [pc, #24]	; (1f368 <clock_event_handler+0x50>)
   1f34e:	f240 2272 	movw	r2, #626	; 0x272
   1f352:	f00b fbfb 	bl	2ab4c <assert_print>
   1f356:	f240 2172 	movw	r1, #626	; 0x272
   1f35a:	e7f3      	b.n	1f344 <clock_event_handler+0x2c>
}
   1f35c:	bd08      	pop	{r3, pc}
   1f35e:	bf00      	nop
   1f360:	20003540 	.word	0x20003540
   1f364:	00033468 	.word	0x00033468
   1f368:	0003013d 	.word	0x0003013d

0001f36c <generic_hfclk_start>:
{
   1f36c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f36e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f372:	f3ef 8111 	mrs	r1, BASEPRI
   1f376:	f383 8812 	msr	BASEPRI_MAX, r3
   1f37a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1f37e:	4a12      	ldr	r2, [pc, #72]	; (1f3c8 <generic_hfclk_start+0x5c>)
   1f380:	6813      	ldr	r3, [r2, #0]
   1f382:	f043 0002 	orr.w	r0, r3, #2
   1f386:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1f388:	07da      	lsls	r2, r3, #31
   1f38a:	d408      	bmi.n	1f39e <generic_hfclk_start+0x32>
	__asm__ volatile(
   1f38c:	f381 8811 	msr	BASEPRI, r1
   1f390:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1f394:	2001      	movs	r0, #1
}
   1f396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f39a:	f003 ba7f 	b.w	2289c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f39e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f3a2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f3a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1f3aa:	07d3      	lsls	r3, r2, #31
   1f3ac:	d5ee      	bpl.n	1f38c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1f3ae:	4807      	ldr	r0, [pc, #28]	; (1f3cc <generic_hfclk_start+0x60>)
   1f3b0:	f00e fdd6 	bl	2df60 <set_on_state>
   1f3b4:	f381 8811 	msr	BASEPRI, r1
   1f3b8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1f3bc:	2000      	movs	r0, #0
}
   1f3be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1f3c2:	f7ff bf8f 	b.w	1f2e4 <clkstarted_handle.constprop.0>
   1f3c6:	bf00      	nop
   1f3c8:	20003598 	.word	0x20003598
   1f3cc:	20003588 	.word	0x20003588

0001f3d0 <api_blocking_start>:
{
   1f3d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f3d2:	2200      	movs	r2, #0
   1f3d4:	2301      	movs	r3, #1
   1f3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f3da:	ab04      	add	r3, sp, #16
   1f3dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f3e0:	4a09      	ldr	r2, [pc, #36]	; (1f408 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f3e2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f3e6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f3e8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f3ec:	f00e fdf9 	bl	2dfe2 <api_start>
	if (err < 0) {
   1f3f0:	2800      	cmp	r0, #0
   1f3f2:	db05      	blt.n	1f400 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1f3f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f3f8:	2300      	movs	r3, #0
   1f3fa:	4668      	mov	r0, sp
   1f3fc:	f005 fcbc 	bl	24d78 <z_impl_k_sem_take>
}
   1f400:	b007      	add	sp, #28
   1f402:	f85d fb04 	ldr.w	pc, [sp], #4
   1f406:	bf00      	nop
   1f408:	0002e009 	.word	0x0002e009

0001f40c <generic_hfclk_stop>:
{
   1f40c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f40e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f412:	f3ef 8411 	mrs	r4, BASEPRI
   1f416:	f383 8812 	msr	BASEPRI_MAX, r3
   1f41a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1f41e:	4a07      	ldr	r2, [pc, #28]	; (1f43c <generic_hfclk_stop+0x30>)
   1f420:	6813      	ldr	r3, [r2, #0]
   1f422:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1f426:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1f428:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1f42a:	d402      	bmi.n	1f432 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1f42c:	2001      	movs	r0, #1
   1f42e:	f003 fa55 	bl	228dc <nrfx_clock_stop>
	__asm__ volatile(
   1f432:	f384 8811 	msr	BASEPRI, r4
   1f436:	f3bf 8f6f 	isb	sy
}
   1f43a:	bd10      	pop	{r4, pc}
   1f43c:	20003598 	.word	0x20003598

0001f440 <z_nrf_clock_control_lf_on>:
{
   1f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f444:	4944      	ldr	r1, [pc, #272]	; (1f558 <z_nrf_clock_control_lf_on+0x118>)
   1f446:	f3bf 8f5b 	dmb	ish
   1f44a:	4606      	mov	r6, r0
   1f44c:	2201      	movs	r2, #1
   1f44e:	e851 3f00 	ldrex	r3, [r1]
   1f452:	e841 2000 	strex	r0, r2, [r1]
   1f456:	2800      	cmp	r0, #0
   1f458:	d1f9      	bne.n	1f44e <z_nrf_clock_control_lf_on+0xe>
   1f45a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1f45e:	b99b      	cbnz	r3, 1f488 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1f460:	493e      	ldr	r1, [pc, #248]	; (1f55c <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   1f462:	483f      	ldr	r0, [pc, #252]	; (1f560 <z_nrf_clock_control_lf_on+0x120>)
   1f464:	604b      	str	r3, [r1, #4]
   1f466:	60cb      	str	r3, [r1, #12]
   1f468:	608a      	str	r2, [r1, #8]
   1f46a:	f7f3 f9e5 	bl	12838 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1f46e:	2800      	cmp	r0, #0
   1f470:	da0a      	bge.n	1f488 <z_nrf_clock_control_lf_on+0x48>
   1f472:	493c      	ldr	r1, [pc, #240]	; (1f564 <z_nrf_clock_control_lf_on+0x124>)
   1f474:	483c      	ldr	r0, [pc, #240]	; (1f568 <z_nrf_clock_control_lf_on+0x128>)
   1f476:	f44f 720c 	mov.w	r2, #560	; 0x230
   1f47a:	f00b fb67 	bl	2ab4c <assert_print>
   1f47e:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1f482:	4838      	ldr	r0, [pc, #224]	; (1f564 <z_nrf_clock_control_lf_on+0x124>)
   1f484:	f00b fb5b 	bl	2ab3e <assert_post_action>
	switch (start_mode) {
   1f488:	b376      	cbz	r6, 1f4e8 <z_nrf_clock_control_lf_on+0xa8>
   1f48a:	1e73      	subs	r3, r6, #1
   1f48c:	2b01      	cmp	r3, #1
   1f48e:	d859      	bhi.n	1f544 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1f490:	2e01      	cmp	r6, #1
   1f492:	d107      	bne.n	1f4a4 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1f494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f498:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1f49c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1f4a0:	2b01      	cmp	r3, #1
   1f4a2:	d021      	beq.n	1f4e8 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f4a4:	f00f fb45 	bl	2eb32 <k_is_in_isr>
   1f4a8:	4605      	mov	r5, r0
   1f4aa:	b9f8      	cbnz	r0, 1f4ec <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   1f4ac:	4b2f      	ldr	r3, [pc, #188]	; (1f56c <z_nrf_clock_control_lf_on+0x12c>)
   1f4ae:	781b      	ldrb	r3, [r3, #0]
   1f4b0:	b1e3      	cbz	r3, 1f4ec <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   1f4b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f4b6:	2202      	movs	r2, #2
   1f4b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1f4bc:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f4be:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1f570 <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f4c2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1f4c6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f4ca:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1f4ce:	03d2      	lsls	r2, r2, #15
   1f4d0:	d516      	bpl.n	1f500 <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1f4d2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1f4d6:	2b01      	cmp	r3, #1
   1f4d8:	d001      	beq.n	1f4de <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1f4da:	2e01      	cmp	r6, #1
   1f4dc:	d110      	bne.n	1f500 <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   1f4de:	b35d      	cbz	r5, 1f538 <z_nrf_clock_control_lf_on+0xf8>
   1f4e0:	f387 8811 	msr	BASEPRI, r7
   1f4e4:	f3bf 8f6f 	isb	sy
}
   1f4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f4ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f4f0:	f3ef 8711 	mrs	r7, BASEPRI
   1f4f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4f8:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f4fc:	2501      	movs	r5, #1
   1f4fe:	e7de      	b.n	1f4be <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f500:	b1ad      	cbz	r5, 1f52e <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1f502:	4638      	mov	r0, r7
   1f504:	f7f5 fb5a 	bl	14bbc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1f508:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1f50c:	2b00      	cmp	r3, #0
   1f50e:	d1da      	bne.n	1f4c6 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f510:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1f514:	2a00      	cmp	r2, #0
   1f516:	d0d6      	beq.n	1f4c6 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f518:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1f51c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f520:	2301      	movs	r3, #1
   1f522:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1f526:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f52a:	60a3      	str	r3, [r4, #8]
}
   1f52c:	e7cb      	b.n	1f4c6 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   1f52e:	2100      	movs	r1, #0
   1f530:	2021      	movs	r0, #33	; 0x21
   1f532:	f007 f817 	bl	26564 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f536:	e7e7      	b.n	1f508 <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   1f538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f53c:	2202      	movs	r2, #2
   1f53e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f542:	e7d1      	b.n	1f4e8 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   1f544:	4907      	ldr	r1, [pc, #28]	; (1f564 <z_nrf_clock_control_lf_on+0x124>)
   1f546:	4808      	ldr	r0, [pc, #32]	; (1f568 <z_nrf_clock_control_lf_on+0x128>)
   1f548:	f240 2242 	movw	r2, #578	; 0x242
   1f54c:	f00b fafe 	bl	2ab4c <assert_print>
   1f550:	f240 2142 	movw	r1, #578	; 0x242
   1f554:	e795      	b.n	1f482 <z_nrf_clock_control_lf_on+0x42>
   1f556:	bf00      	nop
   1f558:	2000353c 	.word	0x2000353c
   1f55c:	2000352c 	.word	0x2000352c
   1f560:	20003560 	.word	0x20003560
   1f564:	00033468 	.word	0x00033468
   1f568:	0003013d 	.word	0x0003013d
   1f56c:	20004938 	.word	0x20004938
   1f570:	e000e100 	.word	0xe000e100

0001f574 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1f574:	b508      	push	{r3, lr}
   1f576:	4807      	ldr	r0, [pc, #28]	; (1f594 <uart_console_init+0x20>)
   1f578:	f00f fa9f 	bl	2eaba <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1f57c:	b138      	cbz	r0, 1f58e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1f57e:	4806      	ldr	r0, [pc, #24]	; (1f598 <uart_console_init+0x24>)
   1f580:	f7f6 f87a 	bl	15678 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1f584:	4804      	ldr	r0, [pc, #16]	; (1f598 <uart_console_init+0x24>)
   1f586:	f7f2 fe4d 	bl	12224 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1f58a:	2000      	movs	r0, #0
}
   1f58c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1f58e:	f06f 0012 	mvn.w	r0, #18
   1f592:	e7fb      	b.n	1f58c <uart_console_init+0x18>
   1f594:	0002f0bc 	.word	0x0002f0bc
   1f598:	0001f59d 	.word	0x0001f59d

0001f59c <console_out>:
	if ('\n' == c) {
   1f59c:	280a      	cmp	r0, #10
{
   1f59e:	b538      	push	{r3, r4, r5, lr}
   1f5a0:	4d07      	ldr	r5, [pc, #28]	; (1f5c0 <console_out+0x24>)
   1f5a2:	4604      	mov	r4, r0
	if ('\n' == c) {
   1f5a4:	d104      	bne.n	1f5b0 <console_out+0x14>
	api->poll_out(dev, out_char);
   1f5a6:	68ab      	ldr	r3, [r5, #8]
   1f5a8:	210d      	movs	r1, #13
   1f5aa:	69db      	ldr	r3, [r3, #28]
   1f5ac:	4628      	mov	r0, r5
   1f5ae:	4798      	blx	r3
   1f5b0:	68ab      	ldr	r3, [r5, #8]
   1f5b2:	4803      	ldr	r0, [pc, #12]	; (1f5c0 <console_out+0x24>)
   1f5b4:	69db      	ldr	r3, [r3, #28]
   1f5b6:	b2e1      	uxtb	r1, r4
   1f5b8:	4798      	blx	r3
}
   1f5ba:	4620      	mov	r0, r4
   1f5bc:	bd38      	pop	{r3, r4, r5, pc}
   1f5be:	bf00      	nop
   1f5c0:	0002f0bc 	.word	0x0002f0bc

0001f5c4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1f5c4:	b510      	push	{r4, lr}
	return port->data;
   1f5c6:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1f5c8:	b941      	cbnz	r1, 1f5dc <gpio_nrfx_manage_callback+0x18>
   1f5ca:	491c      	ldr	r1, [pc, #112]	; (1f63c <gpio_nrfx_manage_callback+0x78>)
   1f5cc:	481c      	ldr	r0, [pc, #112]	; (1f640 <gpio_nrfx_manage_callback+0x7c>)
   1f5ce:	222a      	movs	r2, #42	; 0x2a
   1f5d0:	f00b fabc 	bl	2ab4c <assert_print>
   1f5d4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1f5d6:	4819      	ldr	r0, [pc, #100]	; (1f63c <gpio_nrfx_manage_callback+0x78>)
   1f5d8:	f00b fab1 	bl	2ab3e <assert_post_action>
   1f5dc:	6848      	ldr	r0, [r1, #4]
   1f5de:	b930      	cbnz	r0, 1f5ee <gpio_nrfx_manage_callback+0x2a>
   1f5e0:	4916      	ldr	r1, [pc, #88]	; (1f63c <gpio_nrfx_manage_callback+0x78>)
   1f5e2:	4817      	ldr	r0, [pc, #92]	; (1f640 <gpio_nrfx_manage_callback+0x7c>)
   1f5e4:	222b      	movs	r2, #43	; 0x2b
   1f5e6:	f00b fab1 	bl	2ab4c <assert_print>
   1f5ea:	212b      	movs	r1, #43	; 0x2b
   1f5ec:	e7f3      	b.n	1f5d6 <gpio_nrfx_manage_callback+0x12>
	return list->head;
   1f5ee:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1f5f0:	b1f8      	cbz	r0, 1f632 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5f2:	4288      	cmp	r0, r1
   1f5f4:	d119      	bne.n	1f62a <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   1f5f6:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1f5f8:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1f5fa:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f5fc:	42a1      	cmp	r1, r4
   1f5fe:	d100      	bne.n	1f602 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1f600:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f602:	2000      	movs	r0, #0
   1f604:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1f606:	b12a      	cbz	r2, 1f614 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   1f608:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f60a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f60c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f60e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f610:	b902      	cbnz	r2, 1f614 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1f612:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f614:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f616:	e010      	b.n	1f63a <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f618:	4281      	cmp	r1, r0
   1f61a:	d106      	bne.n	1f62a <gpio_nrfx_manage_callback+0x66>
	return node->next;
   1f61c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1f61e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f620:	6898      	ldr	r0, [r3, #8]
   1f622:	4281      	cmp	r1, r0
   1f624:	d1ed      	bne.n	1f602 <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1f626:	609c      	str	r4, [r3, #8]
}
   1f628:	e7eb      	b.n	1f602 <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   1f62a:	4604      	mov	r4, r0
   1f62c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f62e:	2800      	cmp	r0, #0
   1f630:	d1f2      	bne.n	1f618 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1f632:	2a00      	cmp	r2, #0
   1f634:	d1e8      	bne.n	1f608 <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   1f636:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1f63a:	bd10      	pop	{r4, pc}
   1f63c:	000334ce 	.word	0x000334ce
   1f640:	0003013d 	.word	0x0003013d

0001f644 <gpio_nrfx_pin_interrupt_configure>:
{
   1f644:	b530      	push	{r4, r5, lr}
	return port->config;
   1f646:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f648:	7b05      	ldrb	r5, [r0, #12]
   1f64a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f64e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1f652:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f654:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f658:	d105      	bne.n	1f666 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1f65a:	4620      	mov	r0, r4
   1f65c:	f003 fe76 	bl	2334c <nrfx_gpiote_trigger_disable>
		return 0;
   1f660:	2000      	movs	r0, #0
}
   1f662:	b005      	add	sp, #20
   1f664:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f666:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f668:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f66c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f670:	d114      	bne.n	1f69c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1f672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f676:	bf0c      	ite	eq
   1f678:	2304      	moveq	r3, #4
   1f67a:	2305      	movne	r3, #5
   1f67c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f680:	2300      	movs	r3, #0
   1f682:	4619      	mov	r1, r3
   1f684:	aa02      	add	r2, sp, #8
   1f686:	4620      	mov	r0, r4
   1f688:	f003 fc72 	bl	22f70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f68c:	4b2b      	ldr	r3, [pc, #172]	; (1f73c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1f68e:	4298      	cmp	r0, r3
   1f690:	d150      	bne.n	1f734 <gpio_nrfx_pin_interrupt_configure+0xf0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1f692:	2101      	movs	r1, #1
   1f694:	4620      	mov	r0, r4
   1f696:	f003 fdf3 	bl	23280 <nrfx_gpiote_trigger_enable>
	return 0;
   1f69a:	e7e1      	b.n	1f660 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f69c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1f6a0:	d023      	beq.n	1f6ea <gpio_nrfx_pin_interrupt_configure+0xa6>
   1f6a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1f6a6:	bf14      	ite	ne
   1f6a8:	2301      	movne	r3, #1
   1f6aa:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f6ac:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1f6b0:	6883      	ldr	r3, [r0, #8]
   1f6b2:	40cb      	lsrs	r3, r1
   1f6b4:	07d8      	lsls	r0, r3, #31
   1f6b6:	d4e3      	bmi.n	1f680 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1f6b8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1f6bc:	d1e0      	bne.n	1f680 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1f6be:	0962      	lsrs	r2, r4, #5
   1f6c0:	f004 031f 	and.w	r3, r4, #31
   1f6c4:	d013      	beq.n	1f6ee <gpio_nrfx_pin_interrupt_configure+0xaa>
   1f6c6:	2a01      	cmp	r2, #1
   1f6c8:	d104      	bne.n	1f6d4 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1f6ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f6ce:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f6d0:	07d1      	lsls	r1, r2, #31
   1f6d2:	d414      	bmi.n	1f6fe <gpio_nrfx_pin_interrupt_configure+0xba>
   1f6d4:	491a      	ldr	r1, [pc, #104]	; (1f740 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1f6d6:	481b      	ldr	r0, [pc, #108]	; (1f744 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1f6d8:	f240 2247 	movw	r2, #583	; 0x247
   1f6dc:	f00b fa36 	bl	2ab4c <assert_print>
   1f6e0:	4817      	ldr	r0, [pc, #92]	; (1f740 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1f6e2:	f240 2147 	movw	r1, #583	; 0x247
   1f6e6:	f00b fa2a 	bl	2ab3e <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f6ea:	2303      	movs	r3, #3
   1f6ec:	e7de      	b.n	1f6ac <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1f6ee:	f04f 32ff 	mov.w	r2, #4294967295
   1f6f2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f6f4:	07d2      	lsls	r2, r2, #31
   1f6f6:	d5ed      	bpl.n	1f6d4 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1f6f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f6fc:	e000      	b.n	1f700 <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1f6fe:	4a12      	ldr	r2, [pc, #72]	; (1f748 <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f700:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1f708:	07db      	lsls	r3, r3, #31
   1f70a:	d4b9      	bmi.n	1f680 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f70c:	f10d 0507 	add.w	r5, sp, #7
   1f710:	4629      	mov	r1, r5
   1f712:	4620      	mov	r0, r4
   1f714:	f003 fd50 	bl	231b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1f718:	4b0c      	ldr	r3, [pc, #48]	; (1f74c <gpio_nrfx_pin_interrupt_configure+0x108>)
   1f71a:	4298      	cmp	r0, r3
   1f71c:	d001      	beq.n	1f722 <gpio_nrfx_pin_interrupt_configure+0xde>
		trigger_config.p_in_channel = &ch;
   1f71e:	9503      	str	r5, [sp, #12]
   1f720:	e7ae      	b.n	1f680 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1f722:	4628      	mov	r0, r5
   1f724:	f003 fda6 	bl	23274 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1f728:	4b04      	ldr	r3, [pc, #16]	; (1f73c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1f72a:	4298      	cmp	r0, r3
   1f72c:	d0f7      	beq.n	1f71e <gpio_nrfx_pin_interrupt_configure+0xda>
				return -ENOMEM;
   1f72e:	f06f 000b 	mvn.w	r0, #11
   1f732:	e796      	b.n	1f662 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1f734:	f06f 0015 	mvn.w	r0, #21
   1f738:	e793      	b.n	1f662 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1f73a:	bf00      	nop
   1f73c:	0bad0000 	.word	0x0bad0000
   1f740:	0003350a 	.word	0x0003350a
   1f744:	0003013d 	.word	0x0003013d
   1f748:	50000300 	.word	0x50000300
   1f74c:	0bad0004 	.word	0x0bad0004

0001f750 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1f750:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1f752:	f003 fd7f 	bl	23254 <nrfx_gpiote_is_init>
   1f756:	4604      	mov	r4, r0
   1f758:	b968      	cbnz	r0, 1f776 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1f75a:	f003 fd53 	bl	23204 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1f75e:	4b08      	ldr	r3, [pc, #32]	; (1f780 <gpio_nrfx_init+0x30>)
   1f760:	4298      	cmp	r0, r3
   1f762:	d10a      	bne.n	1f77a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1f764:	4807      	ldr	r0, [pc, #28]	; (1f784 <gpio_nrfx_init+0x34>)
   1f766:	4621      	mov	r1, r4
   1f768:	f003 fd20 	bl	231ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1f76c:	4622      	mov	r2, r4
   1f76e:	2105      	movs	r1, #5
   1f770:	2006      	movs	r0, #6
   1f772:	f7f5 fa8d 	bl	14c90 <z_arm_irq_priority_set>
		return 0;
   1f776:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1f778:	bd10      	pop	{r4, pc}
		return -EIO;
   1f77a:	f06f 0004 	mvn.w	r0, #4
   1f77e:	e7fb      	b.n	1f778 <gpio_nrfx_init+0x28>
   1f780:	0bad0000 	.word	0x0bad0000
   1f784:	0001f789 	.word	0x0001f789

0001f788 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f788:	0942      	lsrs	r2, r0, #5
{
   1f78a:	b570      	push	{r4, r5, r6, lr}
   1f78c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f78e:	d002      	beq.n	1f796 <nrfx_gpio_handler+0xe>
   1f790:	2a01      	cmp	r2, #1
   1f792:	d01a      	beq.n	1f7ca <nrfx_gpio_handler+0x42>
}
   1f794:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f796:	4e12      	ldr	r6, [pc, #72]	; (1f7e0 <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1f798:	6932      	ldr	r2, [r6, #16]
   1f79a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f79c:	2900      	cmp	r1, #0
   1f79e:	d0f9      	beq.n	1f794 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1f7a0:	f003 031f 	and.w	r3, r3, #31
   1f7a4:	2501      	movs	r5, #1
	return node->next;
   1f7a6:	680c      	ldr	r4, [r1, #0]
   1f7a8:	409d      	lsls	r5, r3
   1f7aa:	2900      	cmp	r1, #0
   1f7ac:	d0f2      	beq.n	1f794 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1f7ae:	688a      	ldr	r2, [r1, #8]
   1f7b0:	402a      	ands	r2, r5
   1f7b2:	d00e      	beq.n	1f7d2 <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   1f7b4:	684b      	ldr	r3, [r1, #4]
   1f7b6:	b953      	cbnz	r3, 1f7ce <nrfx_gpio_handler+0x46>
   1f7b8:	490a      	ldr	r1, [pc, #40]	; (1f7e4 <nrfx_gpio_handler+0x5c>)
   1f7ba:	480b      	ldr	r0, [pc, #44]	; (1f7e8 <nrfx_gpio_handler+0x60>)
   1f7bc:	224d      	movs	r2, #77	; 0x4d
   1f7be:	f00b f9c5 	bl	2ab4c <assert_print>
   1f7c2:	4808      	ldr	r0, [pc, #32]	; (1f7e4 <nrfx_gpio_handler+0x5c>)
   1f7c4:	214d      	movs	r1, #77	; 0x4d
   1f7c6:	f00b f9ba 	bl	2ab3e <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f7ca:	4e08      	ldr	r6, [pc, #32]	; (1f7ec <nrfx_gpio_handler+0x64>)
   1f7cc:	e7e4      	b.n	1f798 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1f7ce:	4630      	mov	r0, r6
   1f7d0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f7d2:	b11c      	cbz	r4, 1f7dc <nrfx_gpio_handler+0x54>
   1f7d4:	6823      	ldr	r3, [r4, #0]
   1f7d6:	4621      	mov	r1, r4
   1f7d8:	461c      	mov	r4, r3
   1f7da:	e7e6      	b.n	1f7aa <nrfx_gpio_handler+0x22>
   1f7dc:	4623      	mov	r3, r4
   1f7de:	e7fa      	b.n	1f7d6 <nrfx_gpio_handler+0x4e>
   1f7e0:	0002f044 	.word	0x0002f044
   1f7e4:	000334ce 	.word	0x000334ce
   1f7e8:	0003013d 	.word	0x0003013d
   1f7ec:	0002f02c 	.word	0x0002f02c

0001f7f0 <gpio_nrfx_pin_configure>:
{
   1f7f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1f7f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f7f8:	f898 300c 	ldrb.w	r3, [r8, #12]
   1f7fc:	f001 051f 	and.w	r5, r1, #31
   1f800:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1f804:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f806:	4628      	mov	r0, r5
   1f808:	f10d 0103 	add.w	r1, sp, #3
{
   1f80c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f80e:	f003 fcd3 	bl	231b8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1f812:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f816:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1f818:	d114      	bne.n	1f844 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1f81a:	4628      	mov	r0, r5
   1f81c:	f003 fdc0 	bl	233a0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1f820:	4b48      	ldr	r3, [pc, #288]	; (1f944 <gpio_nrfx_pin_configure+0x154>)
   1f822:	429e      	cmp	r6, r3
   1f824:	d16f      	bne.n	1f906 <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   1f826:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1f82a:	f003 fd1d 	bl	23268 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f82e:	42b0      	cmp	r0, r6
   1f830:	d069      	beq.n	1f906 <gpio_nrfx_pin_configure+0x116>
   1f832:	4945      	ldr	r1, [pc, #276]	; (1f948 <gpio_nrfx_pin_configure+0x158>)
   1f834:	4845      	ldr	r0, [pc, #276]	; (1f94c <gpio_nrfx_pin_configure+0x15c>)
   1f836:	226a      	movs	r2, #106	; 0x6a
   1f838:	f00b f988 	bl	2ab4c <assert_print>
   1f83c:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f83e:	4842      	ldr	r0, [pc, #264]	; (1f948 <gpio_nrfx_pin_configure+0x158>)
   1f840:	f00b f97d 	bl	2ab3e <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f844:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f846:	4619      	mov	r1, r3
   1f848:	aa02      	add	r2, sp, #8
   1f84a:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f84c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f850:	f003 fb8e 	bl	22f70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f854:	4b3b      	ldr	r3, [pc, #236]	; (1f944 <gpio_nrfx_pin_configure+0x154>)
   1f856:	4298      	cmp	r0, r3
   1f858:	d004      	beq.n	1f864 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1f85a:	f06f 0015 	mvn.w	r0, #21
}
   1f85e:	b004      	add	sp, #16
   1f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1f864:	4286      	cmp	r6, r0
   1f866:	d10c      	bne.n	1f882 <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   1f868:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1f86c:	f003 fcfc 	bl	23268 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f870:	42b0      	cmp	r0, r6
   1f872:	d006      	beq.n	1f882 <gpio_nrfx_pin_configure+0x92>
   1f874:	4934      	ldr	r1, [pc, #208]	; (1f948 <gpio_nrfx_pin_configure+0x158>)
   1f876:	4835      	ldr	r0, [pc, #212]	; (1f94c <gpio_nrfx_pin_configure+0x15c>)
   1f878:	227c      	movs	r2, #124	; 0x7c
   1f87a:	f00b f967 	bl	2ab4c <assert_print>
   1f87e:	217c      	movs	r1, #124	; 0x7c
   1f880:	e7dd      	b.n	1f83e <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   1f882:	03a6      	lsls	r6, r4, #14
   1f884:	d54e      	bpl.n	1f924 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f886:	f240 3306 	movw	r3, #774	; 0x306
   1f88a:	4023      	ands	r3, r4
   1f88c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1f890:	d019      	beq.n	1f8c6 <gpio_nrfx_pin_configure+0xd6>
   1f892:	d80c      	bhi.n	1f8ae <gpio_nrfx_pin_configure+0xbe>
   1f894:	2b06      	cmp	r3, #6
   1f896:	d017      	beq.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
   1f898:	d804      	bhi.n	1f8a4 <gpio_nrfx_pin_configure+0xb4>
   1f89a:	b1ab      	cbz	r3, 1f8c8 <gpio_nrfx_pin_configure+0xd8>
   1f89c:	2b02      	cmp	r3, #2
   1f89e:	d1dc      	bne.n	1f85a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   1f8a0:	2304      	movs	r3, #4
   1f8a2:	e011      	b.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1f8a8:	d1d7      	bne.n	1f85a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   1f8aa:	2301      	movs	r3, #1
   1f8ac:	e00c      	b.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f8ae:	f240 2202 	movw	r2, #514	; 0x202
   1f8b2:	4293      	cmp	r3, r2
   1f8b4:	d029      	beq.n	1f90a <gpio_nrfx_pin_configure+0x11a>
   1f8b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1f8ba:	d028      	beq.n	1f90e <gpio_nrfx_pin_configure+0x11e>
   1f8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f8c0:	d1cb      	bne.n	1f85a <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   1f8c2:	2302      	movs	r3, #2
   1f8c4:	e000      	b.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   1f8c6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1f8c8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1f8cc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1f8d0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1f8d4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1f8d6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1f8da:	bf54      	ite	pl
   1f8dc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1f8e0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1f8e2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1f8e4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1f8e8:	d513      	bpl.n	1f912 <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1f8ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1f8ee:	2301      	movs	r3, #1
   1f8f0:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1f8f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1f8f6:	2200      	movs	r2, #0
   1f8f8:	a901      	add	r1, sp, #4
   1f8fa:	4628      	mov	r0, r5
   1f8fc:	f003 fbe2 	bl	230c4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1f900:	4b10      	ldr	r3, [pc, #64]	; (1f944 <gpio_nrfx_pin_configure+0x154>)
   1f902:	4298      	cmp	r0, r3
   1f904:	d1a9      	bne.n	1f85a <gpio_nrfx_pin_configure+0x6a>
   1f906:	2000      	movs	r0, #0
   1f908:	e7a9      	b.n	1f85e <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   1f90a:	2305      	movs	r3, #5
   1f90c:	e7dc      	b.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f90e:	2303      	movs	r3, #3
   1f910:	e7da      	b.n	1f8c8 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1f912:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1f914:	bf41      	itttt	mi
   1f916:	2301      	movmi	r3, #1
   1f918:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1f91c:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1f91e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1f922:	e7e8      	b.n	1f8f6 <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   1f924:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f926:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1f92a:	bf54      	ite	pl
   1f92c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1f930:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f932:	461a      	mov	r2, r3
   1f934:	a901      	add	r1, sp, #4
   1f936:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1f938:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f93c:	f003 fb18 	bl	22f70 <nrfx_gpiote_input_configure>
   1f940:	e7de      	b.n	1f900 <gpio_nrfx_pin_configure+0x110>
   1f942:	bf00      	nop
   1f944:	0bad0000 	.word	0x0bad0000
   1f948:	0003353d 	.word	0x0003353d
   1f94c:	0003013d 	.word	0x0003013d

0001f950 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1f950:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1f954:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1f958:	280a      	cmp	r0, #10
   1f95a:	bf9a      	itte	ls
   1f95c:	4b02      	ldrls	r3, [pc, #8]	; (1f968 <qspi_get_zephyr_ret_code+0x18>)
   1f95e:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1f962:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1f966:	4770      	bx	lr
   1f968:	0002ffc8 	.word	0x0002ffc8

0001f96c <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1f96c:	4b02      	ldr	r3, [pc, #8]	; (1f978 <qspi_nor_pages_layout+0xc>)
   1f96e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f970:	2301      	movs	r3, #1
   1f972:	6013      	str	r3, [r2, #0]
}
   1f974:	4770      	bx	lr
   1f976:	bf00      	nop
   1f978:	0002fc00 	.word	0x0002fc00

0001f97c <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1f97c:	4800      	ldr	r0, [pc, #0]	; (1f980 <qspi_flash_get_parameters+0x4>)
   1f97e:	4770      	bx	lr
   1f980:	0002fb94 	.word	0x0002fb94

0001f984 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1f984:	4b05      	ldr	r3, [pc, #20]	; (1f99c <qspi_wait_for_completion.isra.0+0x18>)
   1f986:	4299      	cmp	r1, r3
   1f988:	d106      	bne.n	1f998 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   1f98a:	f04f 32ff 	mov.w	r2, #4294967295
   1f98e:	f04f 33ff 	mov.w	r3, #4294967295
   1f992:	3030      	adds	r0, #48	; 0x30
   1f994:	f005 b9f0 	b.w	24d78 <z_impl_k_sem_take>
}
   1f998:	4770      	bx	lr
   1f99a:	bf00      	nop
   1f99c:	0bad0000 	.word	0x0bad0000

0001f9a0 <qspi_device_init>:
{
   1f9a0:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1f9a2:	6905      	ldr	r5, [r0, #16]
	if (!qspi_initialized) {
   1f9a4:	4e0f      	ldr	r6, [pc, #60]	; (1f9e4 <qspi_device_init+0x44>)
{
   1f9a6:	4604      	mov	r4, r0
	qspi_lock(dev);
   1f9a8:	4628      	mov	r0, r5
   1f9aa:	f00e fb67 	bl	2e07c <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1f9ae:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1f9b2:	f00e fb5b 	bl	2e06c <k_sem_give>
	if (!qspi_initialized) {
   1f9b6:	7833      	ldrb	r3, [r6, #0]
   1f9b8:	b98b      	cbnz	r3, 1f9de <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1f9ba:	462a      	mov	r2, r5
   1f9bc:	490a      	ldr	r1, [pc, #40]	; (1f9e8 <qspi_device_init+0x48>)
   1f9be:	6860      	ldr	r0, [r4, #4]
   1f9c0:	f003 ffa0 	bl	23904 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1f9c4:	f7ff ffc4 	bl	1f950 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1f9c8:	fab0 f380 	clz	r3, r0
   1f9cc:	095b      	lsrs	r3, r3, #5
   1f9ce:	4605      	mov	r5, r0
   1f9d0:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1f9d2:	6920      	ldr	r0, [r4, #16]
   1f9d4:	3018      	adds	r0, #24
   1f9d6:	f00e fb49 	bl	2e06c <k_sem_give>
}
   1f9da:	4628      	mov	r0, r5
   1f9dc:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1f9de:	2500      	movs	r5, #0
   1f9e0:	e7f7      	b.n	1f9d2 <qspi_device_init+0x32>
   1f9e2:	bf00      	nop
   1f9e4:	20004421 	.word	0x20004421
   1f9e8:	0002e071 	.word	0x0002e071

0001f9ec <qspi_send_cmd>:
{
   1f9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
   1f9ee:	684c      	ldr	r4, [r1, #4]
{
   1f9f0:	4605      	mov	r5, r0
   1f9f2:	4617      	mov	r7, r2
	if (cmd->tx_buf) {
   1f9f4:	b1ac      	cbz	r4, 1fa22 <qspi_send_cmd+0x36>
		tx_buf = cmd->tx_buf->buf;
   1f9f6:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1f9fa:	6888      	ldr	r0, [r1, #8]
   1f9fc:	b198      	cbz	r0, 1fa26 <qspi_send_cmd+0x3a>
		rx_len = cmd->rx_buf->len;
   1f9fe:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1fa02:	b188      	cbz	r0, 1fa28 <qspi_send_cmd+0x3c>
   1fa04:	b183      	cbz	r3, 1fa28 <qspi_send_cmd+0x3c>
		if (rx_len != tx_len) {
   1fa06:	4298      	cmp	r0, r3
   1fa08:	d107      	bne.n	1fa1a <qspi_send_cmd+0x2e>
		xfer_len += tx_len;
   1fa0a:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1fa0c:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1fa0e:	780a      	ldrb	r2, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1fa10:	d90d      	bls.n	1fa2e <qspi_send_cmd+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1fa12:	4817      	ldr	r0, [pc, #92]	; (1fa70 <qspi_send_cmd+0x84>)
   1fa14:	2157      	movs	r1, #87	; 0x57
   1fa16:	f00b f8a7 	bl	2ab68 <z_log_minimal_printk>
}
   1fa1a:	f06f 0015 	mvn.w	r0, #21
   1fa1e:	b003      	add	sp, #12
   1fa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1fa22:	4623      	mov	r3, r4
   1fa24:	e7e9      	b.n	1f9fa <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1fa26:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1fa28:	3301      	adds	r3, #1
   1fa2a:	4403      	add	r3, r0
   1fa2c:	e7ee      	b.n	1fa0c <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1fa2e:	f88d 3001 	strb.w	r3, [sp, #1]
   1fa32:	f240 1301 	movw	r3, #257	; 0x101
	qspi_lock(dev);
   1fa36:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1fa38:	f8ad 3002 	strh.w	r3, [sp, #2]
   1fa3c:	2300      	movs	r3, #0
   1fa3e:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa42:	f88d 2000 	strb.w	r2, [sp]
   1fa46:	f88d 7005 	strb.w	r7, [sp, #5]
	qspi_lock(dev);
   1fa4a:	f00e fb17 	bl	2e07c <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1fa4e:	4621      	mov	r1, r4
   1fa50:	4632      	mov	r2, r6
   1fa52:	4668      	mov	r0, sp
   1fa54:	f004 f84a 	bl	23aec <nrfx_qspi_cinstr_xfer>
   1fa58:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1fa5a:	6928      	ldr	r0, [r5, #16]
   1fa5c:	3018      	adds	r0, #24
   1fa5e:	f00e fb05 	bl	2e06c <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1fa62:	4620      	mov	r0, r4
}
   1fa64:	b003      	add	sp, #12
   1fa66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
   1fa6a:	f7ff bf71 	b.w	1f950 <qspi_get_zephyr_ret_code>
   1fa6e:	bf00      	nop
   1fa70:	00033585 	.word	0x00033585

0001fa74 <qspi_device_uninit>:
{
   1fa74:	b538      	push	{r3, r4, r5, lr}
   1fa76:	4604      	mov	r4, r0
	qspi_lock(dev);
   1fa78:	6900      	ldr	r0, [r0, #16]
   1fa7a:	f00e faff 	bl	2e07c <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1fa7e:	6925      	ldr	r5, [r4, #16]
   1fa80:	2200      	movs	r2, #0
   1fa82:	2300      	movs	r3, #0
   1fa84:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1fa88:	f005 f976 	bl	24d78 <z_impl_k_sem_take>
	if (last) {
   1fa8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1fa8e:	b94b      	cbnz	r3, 1faa4 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1fa90:	4d0a      	ldr	r5, [pc, #40]	; (1fabc <qspi_device_uninit+0x48>)
   1fa92:	f004 f887 	bl	23ba4 <nrfx_qspi_mem_busy_check>
   1fa96:	42a8      	cmp	r0, r5
   1fa98:	d10a      	bne.n	1fab0 <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1fa9a:	f004 f8a5 	bl	23be8 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1fa9e:	4b08      	ldr	r3, [pc, #32]	; (1fac0 <qspi_device_uninit+0x4c>)
   1faa0:	2200      	movs	r2, #0
   1faa2:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1faa4:	6920      	ldr	r0, [r4, #16]
}
   1faa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1faaa:	3018      	adds	r0, #24
   1faac:	f00e bade 	b.w	2e06c <k_sem_give>
	return z_impl_k_sleep(timeout);
   1fab0:	2100      	movs	r1, #0
   1fab2:	f240 6067 	movw	r0, #1639	; 0x667
   1fab6:	f006 fd55 	bl	26564 <z_impl_k_sleep>
   1faba:	e7ea      	b.n	1fa92 <qspi_device_uninit+0x1e>
   1fabc:	0bad0000 	.word	0x0bad0000
   1fac0:	20004421 	.word	0x20004421

0001fac4 <qspi_nor_read>:
{
   1fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fac8:	4681      	mov	r9, r0
   1faca:	b085      	sub	sp, #20
   1facc:	460e      	mov	r6, r1
   1face:	461c      	mov	r4, r3
	if (!dest) {
   1fad0:	4690      	mov	r8, r2
   1fad2:	b17a      	cbz	r2, 1faf4 <qspi_nor_read+0x30>
	if (!size) {
   1fad4:	2b00      	cmp	r3, #0
   1fad6:	f000 809c 	beq.w	1fc12 <qspi_nor_read+0x14e>
	if (addr < 0 ||
   1fada:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1fadc:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1fade:	db03      	blt.n	1fae8 <qspi_nor_read+0x24>
   1fae0:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1fae2:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1fae4:	4293      	cmp	r3, r2
   1fae6:	d90b      	bls.n	1fb00 <qspi_nor_read+0x3c>
		LOG_ERR("read error: address or size "
   1fae8:	484b      	ldr	r0, [pc, #300]	; (1fc18 <qspi_nor_read+0x154>)
   1faea:	4623      	mov	r3, r4
   1faec:	4632      	mov	r2, r6
   1faee:	2145      	movs	r1, #69	; 0x45
   1faf0:	f00b f83a 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1faf4:	f06f 0515 	mvn.w	r5, #21
}
   1faf8:	4628      	mov	r0, r5
   1fafa:	b005      	add	sp, #20
   1fafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1fb00:	f7ff ff4e 	bl	1f9a0 <qspi_device_init>
	if (rc != 0) {
   1fb04:	4605      	mov	r5, r0
   1fb06:	2800      	cmp	r0, #0
   1fb08:	d17f      	bne.n	1fc0a <qspi_nor_read+0x146>
	qspi_lock(dev);
   1fb0a:	4275      	negs	r5, r6
   1fb0c:	f005 0503 	and.w	r5, r5, #3
   1fb10:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fb14:	f00e fab2 	bl	2e07c <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1fb18:	42a5      	cmp	r5, r4
   1fb1a:	bf28      	it	cs
   1fb1c:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1fb1e:	f1d8 0300 	rsbs	r3, r8, #0
   1fb22:	f003 0303 	and.w	r3, r3, #3
   1fb26:	f008 0703 	and.w	r7, r8, #3
   1fb2a:	bf58      	it	pl
   1fb2c:	425f      	negpl	r7, r3
   1fb2e:	427f      	negs	r7, r7
   1fb30:	f007 0703 	and.w	r7, r7, #3
   1fb34:	42a7      	cmp	r7, r4
   1fb36:	bf28      	it	cs
   1fb38:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1fb3a:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1fb3c:	1be4      	subs	r4, r4, r7
   1fb3e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1fb42:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1fb46:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1fb48:	bfc8      	it	gt
   1fb4a:	46a2      	movgt	sl, r4
   1fb4c:	f003 0b03 	and.w	fp, r3, #3
   1fb50:	bfc8      	it	gt
   1fb52:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1fb56:	f1ba 0f00 	cmp.w	sl, #0
   1fb5a:	d019      	beq.n	1fb90 <qspi_nor_read+0xcc>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1fb5c:	eb08 0307 	add.w	r3, r8, r7
   1fb60:	1972      	adds	r2, r6, r5
   1fb62:	4651      	mov	r1, sl
   1fb64:	4618      	mov	r0, r3
   1fb66:	9301      	str	r3, [sp, #4]
   1fb68:	f00e ff98 	bl	2ea9c <nrfx_qspi_read>
   1fb6c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fb6e:	4601      	mov	r1, r0
   1fb70:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fb74:	f7ff ff06 	bl	1f984 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fb78:	4a28      	ldr	r2, [pc, #160]	; (1fc1c <qspi_nor_read+0x158>)
   1fb7a:	4294      	cmp	r4, r2
   1fb7c:	d13c      	bne.n	1fbf8 <qspi_nor_read+0x134>
		if (flash_prefix != dest_prefix) {
   1fb7e:	42bd      	cmp	r5, r7
   1fb80:	d006      	beq.n	1fb90 <qspi_nor_read+0xcc>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   1fb82:	9b01      	ldr	r3, [sp, #4]
   1fb84:	4652      	mov	r2, sl
   1fb86:	4619      	mov	r1, r3
   1fb88:	eb08 0005 	add.w	r0, r8, r5
   1fb8c:	f00b ff9d 	bl	2baca <memmove>
	if (flash_prefix != 0) {
   1fb90:	b1bd      	cbz	r5, 1fbc2 <qspi_nor_read+0xfe>
				     (WORD_SIZE - flash_prefix));
   1fb92:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1fb96:	1bf2      	subs	r2, r6, r7
   1fb98:	2104      	movs	r1, #4
   1fb9a:	a802      	add	r0, sp, #8
   1fb9c:	f00e ff7e 	bl	2ea9c <nrfx_qspi_read>
   1fba0:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fba2:	4601      	mov	r1, r0
   1fba4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fba8:	f7ff feec 	bl	1f984 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fbac:	4b1b      	ldr	r3, [pc, #108]	; (1fc1c <qspi_nor_read+0x158>)
   1fbae:	429c      	cmp	r4, r3
   1fbb0:	d122      	bne.n	1fbf8 <qspi_nor_read+0x134>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   1fbb2:	f107 0308 	add.w	r3, r7, #8
   1fbb6:	462a      	mov	r2, r5
   1fbb8:	eb0d 0103 	add.w	r1, sp, r3
   1fbbc:	4640      	mov	r0, r8
   1fbbe:	f00b ff9b 	bl	2baf8 <memcpy>
	if (flash_suffix != 0) {
   1fbc2:	f1bb 0f00 	cmp.w	fp, #0
   1fbc6:	d016      	beq.n	1fbf6 <qspi_nor_read+0x132>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1fbc8:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1fbca:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1fbcc:	4452      	add	r2, sl
   1fbce:	eb0d 0001 	add.w	r0, sp, r1
   1fbd2:	f00e ff63 	bl	2ea9c <nrfx_qspi_read>
   1fbd6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fbd8:	4601      	mov	r1, r0
   1fbda:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fbde:	f7ff fed1 	bl	1f984 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fbe2:	4b0e      	ldr	r3, [pc, #56]	; (1fc1c <qspi_nor_read+0x158>)
   1fbe4:	429c      	cmp	r4, r3
   1fbe6:	d107      	bne.n	1fbf8 <qspi_nor_read+0x134>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1fbe8:	eb0a 0005 	add.w	r0, sl, r5
   1fbec:	465a      	mov	r2, fp
   1fbee:	a902      	add	r1, sp, #8
   1fbf0:	4440      	add	r0, r8
   1fbf2:	f00b ff81 	bl	2baf8 <memcpy>
	return res;
   1fbf6:	4c09      	ldr	r4, [pc, #36]	; (1fc1c <qspi_nor_read+0x158>)
	k_sem_give(&dev_data->sem);
   1fbf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fbfc:	3018      	adds	r0, #24
   1fbfe:	f00e fa35 	bl	2e06c <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1fc02:	4620      	mov	r0, r4
   1fc04:	f7ff fea4 	bl	1f950 <qspi_get_zephyr_ret_code>
   1fc08:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1fc0a:	4648      	mov	r0, r9
   1fc0c:	f7ff ff32 	bl	1fa74 <qspi_device_uninit>
	return rc;
   1fc10:	e772      	b.n	1faf8 <qspi_nor_read+0x34>
		return 0;
   1fc12:	461d      	mov	r5, r3
   1fc14:	e770      	b.n	1faf8 <qspi_nor_read+0x34>
   1fc16:	bf00      	nop
   1fc18:	000335ad 	.word	0x000335ad
   1fc1c:	0bad0000 	.word	0x0bad0000

0001fc20 <qspi_nor_init>:
{
   1fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1fc24:	6843      	ldr	r3, [r0, #4]
   1fc26:	6a1e      	ldr	r6, [r3, #32]
{
   1fc28:	b08a      	sub	sp, #40	; 0x28
   1fc2a:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1fc2c:	aa07      	add	r2, sp, #28
   1fc2e:	2100      	movs	r1, #0
   1fc30:	4630      	mov	r0, r6
   1fc32:	f00e fd09 	bl	2e648 <pinctrl_lookup_state>
	if (ret < 0) {
   1fc36:	1e04      	subs	r4, r0, #0
   1fc38:	db2f      	blt.n	1fc9a <qspi_nor_init+0x7a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1fc3a:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1fc3c:	6832      	ldr	r2, [r6, #0]
   1fc3e:	7919      	ldrb	r1, [r3, #4]
   1fc40:	6818      	ldr	r0, [r3, #0]
   1fc42:	f00e fd14 	bl	2e66e <pinctrl_configure_pins>
	if (ret < 0) {
   1fc46:	1e04      	subs	r4, r0, #0
   1fc48:	db27      	blt.n	1fc9a <qspi_nor_init+0x7a>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1fc4a:	2200      	movs	r2, #0
   1fc4c:	2101      	movs	r1, #1
   1fc4e:	2029      	movs	r0, #41	; 0x29
   1fc50:	f7f5 f81e 	bl	14c90 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1fc54:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1fc56:	692a      	ldr	r2, [r5, #16]
   1fc58:	494b      	ldr	r1, [pc, #300]	; (1fd88 <qspi_nor_init+0x168>)
   1fc5a:	4630      	mov	r0, r6
   1fc5c:	f003 fe52 	bl	23904 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1fc60:	f7ff fe76 	bl	1f950 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1fc64:	1e04      	subs	r4, r0, #0
   1fc66:	db18      	blt.n	1fc9a <qspi_nor_init+0x7a>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1fc68:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1fc6a:	3b02      	subs	r3, #2
   1fc6c:	2b01      	cmp	r3, #1
   1fc6e:	d918      	bls.n	1fca2 <qspi_nor_init+0x82>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1fc70:	f896 800a 	ldrb.w	r8, [r6, #10]
   1fc74:	f1a8 0803 	sub.w	r8, r8, #3
   1fc78:	f1b8 0f01 	cmp.w	r8, #1
   1fc7c:	bf8c      	ite	hi
   1fc7e:	f04f 0800 	movhi.w	r8, #0
   1fc82:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1fc86:	4628      	mov	r0, r5
   1fc88:	f00e fa1a 	bl	2e0c0 <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1fc8c:	1e04      	subs	r4, r0, #0
   1fc8e:	da0b      	bge.n	1fca8 <qspi_nor_init+0x88>
			LOG_ERR("RDSR failed: %d", ret);
   1fc90:	483e      	ldr	r0, [pc, #248]	; (1fd8c <qspi_nor_init+0x16c>)
   1fc92:	4622      	mov	r2, r4
   1fc94:	2145      	movs	r1, #69	; 0x45
   1fc96:	f00a ff67 	bl	2ab68 <z_log_minimal_printk>
}
   1fc9a:	4620      	mov	r0, r4
   1fc9c:	b00a      	add	sp, #40	; 0x28
   1fc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1fca2:	f04f 0801 	mov.w	r8, #1
   1fca6:	e7ee      	b.n	1fc86 <qspi_nor_init+0x66>
		uint8_t sr = (uint8_t)ret;
   1fca8:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1fcaa:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1fcae:	45a0      	cmp	r8, r4
   1fcb0:	ae04      	add	r6, sp, #16
   1fcb2:	af05      	add	r7, sp, #20
   1fcb4:	d028      	beq.n	1fd08 <qspi_nor_init+0xe8>
	uint8_t sr_array[2] = {0};
   1fcb6:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1fcb8:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1fcbc:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fcc0:	a907      	add	r1, sp, #28
		sr_array[0] = sr_val;
   1fcc2:	f88d 2010 	strb.w	r2, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fcc6:	4628      	mov	r0, r5
	const struct qspi_buf sr_buf = {
   1fcc8:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   1fcca:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct qspi_buf sr_buf = {
   1fcce:	9605      	str	r6, [sp, #20]
	struct qspi_cmd cmd = {
   1fcd0:	9309      	str	r3, [sp, #36]	; 0x24
   1fcd2:	f88d 201c 	strb.w	r2, [sp, #28]
   1fcd6:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fcd8:	f7ff fe88 	bl	1f9ec <qspi_send_cmd>
	if (ret == 0) {
   1fcdc:	1e04      	subs	r4, r0, #0
   1fcde:	d00c      	beq.n	1fcfa <qspi_nor_init+0xda>
		if (ret < 0) {
   1fce0:	dadb      	bge.n	1fc9a <qspi_nor_init+0x7a>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1fce2:	492b      	ldr	r1, [pc, #172]	; (1fd90 <qspi_nor_init+0x170>)
   1fce4:	4a2b      	ldr	r2, [pc, #172]	; (1fd94 <qspi_nor_init+0x174>)
   1fce6:	482c      	ldr	r0, [pc, #176]	; (1fd98 <qspi_nor_init+0x178>)
   1fce8:	f1b8 0f00 	cmp.w	r8, #0
   1fcec:	bf08      	it	eq
   1fcee:	460a      	moveq	r2, r1
   1fcf0:	4623      	mov	r3, r4
   1fcf2:	2145      	movs	r1, #69	; 0x45
   1fcf4:	f00a ff38 	bl	2ab68 <z_log_minimal_printk>
	if (ret != 0) {
   1fcf8:	e7cf      	b.n	1fc9a <qspi_nor_init+0x7a>
		ret = qspi_rdsr(dev, 1);
   1fcfa:	4628      	mov	r0, r5
   1fcfc:	f00e f9e0 	bl	2e0c0 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1fd00:	1e04      	subs	r4, r0, #0
   1fd02:	dbee      	blt.n	1fce2 <qspi_nor_init+0xc2>
   1fd04:	07e3      	lsls	r3, r4, #31
   1fd06:	d4f8      	bmi.n	1fcfa <qspi_nor_init+0xda>
	qspi_device_uninit(dev);
   1fd08:	4628      	mov	r0, r5
   1fd0a:	f7ff feb3 	bl	1fa74 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1fd0e:	f04f 0803 	mov.w	r8, #3
   1fd12:	2300      	movs	r3, #0
   1fd14:	e9cd 8306 	strd	r8, r3, [sp, #24]
   1fd18:	9308      	str	r3, [sp, #32]
	int ret = qspi_device_init(dev);
   1fd1a:	4628      	mov	r0, r5
	const struct qspi_cmd cmd = {
   1fd1c:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   1fd1e:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
   1fd20:	f88d 301c 	strb.w	r3, [sp, #28]
   1fd24:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
   1fd26:	f7ff fe3b 	bl	1f9a0 <qspi_device_init>
	if (ret == 0) {
   1fd2a:	4602      	mov	r2, r0
   1fd2c:	b128      	cbz	r0, 1fd3a <qspi_nor_init+0x11a>
	qspi_device_uninit(dev);
   1fd2e:	4628      	mov	r0, r5
   1fd30:	f7ff fea0 	bl	1fa74 <qspi_device_uninit>
		return -ENODEV;
   1fd34:	f06f 0412 	mvn.w	r4, #18
   1fd38:	e7af      	b.n	1fc9a <qspi_nor_init+0x7a>
		ret = qspi_send_cmd(dev, &cmd, false);
   1fd3a:	a907      	add	r1, sp, #28
   1fd3c:	4628      	mov	r0, r5
   1fd3e:	f7ff fe55 	bl	1f9ec <qspi_send_cmd>
   1fd42:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1fd44:	4628      	mov	r0, r5
   1fd46:	f7ff fe95 	bl	1fa74 <qspi_device_uninit>
	if (ret != 0) {
   1fd4a:	2c00      	cmp	r4, #0
   1fd4c:	d1f2      	bne.n	1fd34 <qspi_nor_init+0x114>
	const struct qspi_nor_config *qnc = dev->config;
   1fd4e:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1fd50:	4642      	mov	r2, r8
   1fd52:	4631      	mov	r1, r6
   1fd54:	f105 001c 	add.w	r0, r5, #28
   1fd58:	f00b fea7 	bl	2baaa <memcmp>
   1fd5c:	4604      	mov	r4, r0
   1fd5e:	2800      	cmp	r0, #0
   1fd60:	d09b      	beq.n	1fc9a <qspi_nor_init+0x7a>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1fd62:	7fab      	ldrb	r3, [r5, #30]
   1fd64:	9303      	str	r3, [sp, #12]
   1fd66:	7f6b      	ldrb	r3, [r5, #29]
   1fd68:	9302      	str	r3, [sp, #8]
   1fd6a:	7f2b      	ldrb	r3, [r5, #28]
   1fd6c:	9301      	str	r3, [sp, #4]
   1fd6e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1fd72:	9300      	str	r3, [sp, #0]
   1fd74:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1fd78:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1fd7c:	4807      	ldr	r0, [pc, #28]	; (1fd9c <qspi_nor_init+0x17c>)
   1fd7e:	2145      	movs	r1, #69	; 0x45
   1fd80:	f00a fef2 	bl	2ab68 <z_log_minimal_printk>
		return -ENODEV;
   1fd84:	e7d6      	b.n	1fd34 <qspi_nor_init+0x114>
   1fd86:	bf00      	nop
   1fd88:	0002e071 	.word	0x0002e071
   1fd8c:	00033605 	.word	0x00033605
   1fd90:	000335ff 	.word	0x000335ff
   1fd94:	000335fb 	.word	0x000335fb
   1fd98:	0003361a 	.word	0x0003361a
   1fd9c:	00033630 	.word	0x00033630

0001fda0 <qspi_nor_erase>:
{
   1fda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fda4:	4615      	mov	r5, r2
	if (addr < 0 ||
   1fda6:	1e0a      	subs	r2, r1, #0
	const struct qspi_nor_config *params = dev->config;
   1fda8:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   1fdac:	4606      	mov	r6, r0
	if (addr < 0 ||
   1fdae:	db05      	blt.n	1fdbc <qspi_nor_erase+0x1c>
   1fdb0:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
   1fdb4:	1951      	adds	r1, r2, r5
	if (addr < 0 ||
   1fdb6:	4299      	cmp	r1, r3
	    (addr + size) > params->size) {
   1fdb8:	4690      	mov	r8, r2
	if (addr < 0 ||
   1fdba:	d909      	bls.n	1fdd0 <qspi_nor_erase+0x30>
		LOG_ERR("erase error: address or size "
   1fdbc:	483c      	ldr	r0, [pc, #240]	; (1feb0 <qspi_nor_erase+0x110>)
   1fdbe:	462b      	mov	r3, r5
   1fdc0:	2145      	movs	r1, #69	; 0x45
   1fdc2:	f00a fed1 	bl	2ab68 <z_log_minimal_printk>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1fdc6:	f06f 0415 	mvn.w	r4, #21
}
   1fdca:	4620      	mov	r0, r4
   1fdcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1fdd0:	f3c2 020b 	ubfx	r2, r2, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1fdd4:	2d00      	cmp	r5, #0
   1fdd6:	d0f6      	beq.n	1fdc6 <qspi_nor_erase+0x26>
   1fdd8:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1fddc:	4313      	orrs	r3, r2
   1fdde:	d1f2      	bne.n	1fdc6 <qspi_nor_erase+0x26>
	rv = qspi_device_init(dev);
   1fde0:	f7ff fdde 	bl	1f9a0 <qspi_device_init>
	if (rv != 0) {
   1fde4:	4604      	mov	r4, r0
   1fde6:	bb68      	cbnz	r0, 1fe44 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1fde8:	6930      	ldr	r0, [r6, #16]
   1fdea:	f00e f94e 	bl	2e08a <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1fdee:	4621      	mov	r1, r4
   1fdf0:	4630      	mov	r0, r6
   1fdf2:	f00e f950 	bl	2e096 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1fdf6:	4604      	mov	r4, r0
   1fdf8:	bb08      	cbnz	r0, 1fe3e <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1fdfa:	6930      	ldr	r0, [r6, #16]
		if (res == NRFX_SUCCESS) {
   1fdfc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1feb4 <qspi_nor_erase+0x114>
	qspi_lock(dev);
   1fe00:	f00e f93c 	bl	2e07c <qspi_lock.isra.0>
		if (size == params->size) {
   1fe04:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1fe08:	42ab      	cmp	r3, r5
   1fe0a:	d11f      	bne.n	1fe4c <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1fe0c:	f00e fe49 	bl	2eaa2 <nrfx_qspi_chip_erase>
   1fe10:	46ab      	mov	fp, r5
   1fe12:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1fe14:	6930      	ldr	r0, [r6, #16]
   1fe16:	4639      	mov	r1, r7
   1fe18:	f7ff fdb4 	bl	1f984 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1fe1c:	4557      	cmp	r7, sl
   1fe1e:	d13b      	bne.n	1fe98 <qspi_nor_erase+0xf8>
	while (size > 0) {
   1fe20:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1fe24:	44d8      	add	r8, fp
	while (size > 0) {
   1fe26:	d1ed      	bne.n	1fe04 <qspi_nor_erase+0x64>
	k_sem_give(&dev_data->sem);
   1fe28:	6930      	ldr	r0, [r6, #16]
   1fe2a:	3018      	adds	r0, #24
   1fe2c:	f00e f91e 	bl	2e06c <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1fe30:	2101      	movs	r1, #1
   1fe32:	4630      	mov	r0, r6
   1fe34:	f00e f92f 	bl	2e096 <qspi_nor_write_protection_set>
   1fe38:	2c00      	cmp	r4, #0
   1fe3a:	bf08      	it	eq
   1fe3c:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1fe3e:	6930      	ldr	r0, [r6, #16]
   1fe40:	f00e f914 	bl	2e06c <k_sem_give>
	qspi_device_uninit(dev);
   1fe44:	4630      	mov	r0, r6
   1fe46:	f7ff fe15 	bl	1fa74 <qspi_device_uninit>
	return rv;
   1fe4a:	e7be      	b.n	1fdca <qspi_nor_erase+0x2a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1fe4c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1fe50:	d30a      	bcc.n	1fe68 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1fe52:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1fe56:	b953      	cbnz	r3, 1fe6e <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1fe58:	4641      	mov	r1, r8
   1fe5a:	2001      	movs	r0, #1
   1fe5c:	f003 ff2c 	bl	23cb8 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1fe60:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1fe64:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1fe66:	e7d5      	b.n	1fe14 <qspi_nor_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1fe68:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1fe6c:	d309      	bcc.n	1fe82 <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1fe6e:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1fe72:	b930      	cbnz	r0, 1fe82 <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1fe74:	4641      	mov	r1, r8
   1fe76:	f003 ff1f 	bl	23cb8 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1fe7a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1fe7e:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1fe80:	e7c8      	b.n	1fe14 <qspi_nor_erase+0x74>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1fe82:	480d      	ldr	r0, [pc, #52]	; (1feb8 <qspi_nor_erase+0x118>)
			res = NRFX_ERROR_INVALID_PARAM;
   1fe84:	4f0d      	ldr	r7, [pc, #52]	; (1febc <qspi_nor_erase+0x11c>)
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1fe86:	462b      	mov	r3, r5
   1fe88:	4642      	mov	r2, r8
   1fe8a:	2145      	movs	r1, #69	; 0x45
   1fe8c:	f00a fe6c 	bl	2ab68 <z_log_minimal_printk>
		qspi_wait_for_completion(dev, res);
   1fe90:	490a      	ldr	r1, [pc, #40]	; (1febc <qspi_nor_erase+0x11c>)
   1fe92:	6930      	ldr	r0, [r6, #16]
   1fe94:	f7ff fd76 	bl	1f984 <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1fe98:	4809      	ldr	r0, [pc, #36]	; (1fec0 <qspi_nor_erase+0x120>)
   1fe9a:	462b      	mov	r3, r5
   1fe9c:	4642      	mov	r2, r8
   1fe9e:	2145      	movs	r1, #69	; 0x45
   1fea0:	f00a fe62 	bl	2ab68 <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
   1fea4:	4638      	mov	r0, r7
   1fea6:	f7ff fd53 	bl	1f950 <qspi_get_zephyr_ret_code>
   1feaa:	4604      	mov	r4, r0
			break;
   1feac:	e7bc      	b.n	1fe28 <qspi_nor_erase+0x88>
   1feae:	bf00      	nop
   1feb0:	00033667 	.word	0x00033667
   1feb4:	0bad0000 	.word	0x0bad0000
   1feb8:	000336b6 	.word	0x000336b6
   1febc:	0bad0004 	.word	0x0bad0004
   1fec0:	000336d9 	.word	0x000336d9

0001fec4 <qspi_nor_write>:
{
   1fec4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fec8:	4605      	mov	r5, r0
   1feca:	460f      	mov	r7, r1
   1fecc:	461e      	mov	r6, r3
	if (!src) {
   1fece:	4690      	mov	r8, r2
   1fed0:	b19a      	cbz	r2, 1fefa <qspi_nor_write+0x36>
	if ((size == 0)
   1fed2:	b193      	cbz	r3, 1fefa <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1fed4:	2b04      	cmp	r3, #4
   1fed6:	d901      	bls.n	1fedc <qspi_nor_write+0x18>
   1fed8:	079a      	lsls	r2, r3, #30
   1feda:	d10e      	bne.n	1fefa <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
   1fedc:	07bb      	lsls	r3, r7, #30
   1fede:	d10c      	bne.n	1fefa <qspi_nor_write+0x36>
	if (addr < 0 ||
   1fee0:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1fee2:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1fee4:	db03      	blt.n	1feee <qspi_nor_write+0x2a>
   1fee6:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1fee8:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1feea:	4293      	cmp	r3, r2
   1feec:	d90b      	bls.n	1ff06 <qspi_nor_write+0x42>
		LOG_ERR("write error: address or size "
   1feee:	483f      	ldr	r0, [pc, #252]	; (1ffec <qspi_nor_write+0x128>)
   1fef0:	4633      	mov	r3, r6
   1fef2:	463a      	mov	r2, r7
   1fef4:	2145      	movs	r1, #69	; 0x45
   1fef6:	f00a fe37 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   1fefa:	f06f 0415 	mvn.w	r4, #21
}
   1fefe:	4620      	mov	r0, r4
   1ff00:	b002      	add	sp, #8
   1ff02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1ff06:	4628      	mov	r0, r5
   1ff08:	f7ff fd4a 	bl	1f9a0 <qspi_device_init>
	if (rc != 0) {
   1ff0c:	4604      	mov	r4, r0
   1ff0e:	2800      	cmp	r0, #0
   1ff10:	d163      	bne.n	1ffda <qspi_nor_write+0x116>
	qspi_trans_lock(dev);
   1ff12:	6928      	ldr	r0, [r5, #16]
   1ff14:	f00e f8b9 	bl	2e08a <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1ff18:	4621      	mov	r1, r4
   1ff1a:	4628      	mov	r0, r5
   1ff1c:	f00e f8bb 	bl	2e096 <qspi_nor_write_protection_set>
   1ff20:	4604      	mov	r4, r0
	qspi_lock(dev);
   1ff22:	6928      	ldr	r0, [r5, #16]
   1ff24:	f00e f8aa 	bl	2e07c <qspi_lock.isra.0>
	if (!res) {
   1ff28:	2c00      	cmp	r4, #0
   1ff2a:	d143      	bne.n	1ffb4 <qspi_nor_write+0xf0>
		if (size < 4U) {
   1ff2c:	2e03      	cmp	r6, #3
   1ff2e:	d81e      	bhi.n	1ff6e <qspi_nor_write+0xaa>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1ff30:	2104      	movs	r1, #4
   1ff32:	463a      	mov	r2, r7
   1ff34:	eb0d 0001 	add.w	r0, sp, r1
   1ff38:	f00e fdb0 	bl	2ea9c <nrfx_qspi_read>
   1ff3c:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1ff3e:	4601      	mov	r1, r0
   1ff40:	6928      	ldr	r0, [r5, #16]
   1ff42:	f7ff fd1f 	bl	1f984 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1ff46:	4b2a      	ldr	r3, [pc, #168]	; (1fff0 <qspi_nor_write+0x12c>)
   1ff48:	429c      	cmp	r4, r3
   1ff4a:	d133      	bne.n	1ffb4 <qspi_nor_write+0xf0>
		memcpy(buf, sptr, slen);
   1ff4c:	4632      	mov	r2, r6
   1ff4e:	4641      	mov	r1, r8
   1ff50:	a801      	add	r0, sp, #4
   1ff52:	f00b fdd1 	bl	2baf8 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ff56:	2104      	movs	r1, #4
   1ff58:	463a      	mov	r2, r7
   1ff5a:	eb0d 0001 	add.w	r0, sp, r1
			res = nrfx_qspi_write(src, size, addr);
   1ff5e:	f00e fd9a 	bl	2ea96 <nrfx_qspi_write>
   1ff62:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ff64:	4601      	mov	r1, r0
   1ff66:	6928      	ldr	r0, [r5, #16]
   1ff68:	f7ff fd0c 	bl	1f984 <qspi_wait_for_completion.isra.0>
   1ff6c:	e022      	b.n	1ffb4 <qspi_nor_write+0xf0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ff6e:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1ff72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ff76:	d034      	beq.n	1ffe2 <qspi_nor_write+0x11e>
			if (res == NRFX_SUCCESS) {
   1ff78:	f8df a074 	ldr.w	sl, [pc, #116]	; 1fff0 <qspi_nor_write+0x12c>
			size_t len = MIN(slen, sizeof(buf));
   1ff7c:	2e04      	cmp	r6, #4
   1ff7e:	46b1      	mov	r9, r6
   1ff80:	bf28      	it	cs
   1ff82:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1ff86:	464a      	mov	r2, r9
   1ff88:	4641      	mov	r1, r8
   1ff8a:	a801      	add	r0, sp, #4
   1ff8c:	f00b fdb4 	bl	2baf8 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ff90:	2104      	movs	r1, #4
   1ff92:	463a      	mov	r2, r7
   1ff94:	eb0d 0001 	add.w	r0, sp, r1
   1ff98:	f00e fd7d 	bl	2ea96 <nrfx_qspi_write>
   1ff9c:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ff9e:	4601      	mov	r1, r0
   1ffa0:	6928      	ldr	r0, [r5, #16]
   1ffa2:	f7ff fcef 	bl	1f984 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1ffa6:	4554      	cmp	r4, sl
   1ffa8:	d104      	bne.n	1ffb4 <qspi_nor_write+0xf0>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ffaa:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1ffae:	44c8      	add	r8, r9
				addr += len;
   1ffb0:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ffb2:	d1e3      	bne.n	1ff7c <qspi_nor_write+0xb8>
	k_sem_give(&dev_data->sem);
   1ffb4:	6928      	ldr	r0, [r5, #16]
   1ffb6:	3018      	adds	r0, #24
   1ffb8:	f00e f858 	bl	2e06c <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1ffbc:	2101      	movs	r1, #1
   1ffbe:	4628      	mov	r0, r5
   1ffc0:	f00e f869 	bl	2e096 <qspi_nor_write_protection_set>
   1ffc4:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1ffc6:	6928      	ldr	r0, [r5, #16]
   1ffc8:	f00e f850 	bl	2e06c <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1ffcc:	2c00      	cmp	r4, #0
   1ffce:	bf14      	ite	ne
   1ffd0:	4620      	movne	r0, r4
   1ffd2:	4630      	moveq	r0, r6
   1ffd4:	f7ff fcbc 	bl	1f950 <qspi_get_zephyr_ret_code>
   1ffd8:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1ffda:	4628      	mov	r0, r5
   1ffdc:	f7ff fd4a 	bl	1fa74 <qspi_device_uninit>
	return rc;
   1ffe0:	e78d      	b.n	1fefe <qspi_nor_write+0x3a>
			res = nrfx_qspi_write(src, size, addr);
   1ffe2:	463a      	mov	r2, r7
   1ffe4:	4631      	mov	r1, r6
   1ffe6:	4640      	mov	r0, r8
   1ffe8:	e7b9      	b.n	1ff5e <qspi_nor_write+0x9a>
   1ffea:	bf00      	nop
   1ffec:	000336fc 	.word	0x000336fc
   1fff0:	0bad0000 	.word	0x0bad0000

0001fff4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1fff4:	4b02      	ldr	r3, [pc, #8]	; (20000 <flash_nrf_pages_layout+0xc>)
   1fff6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1fff8:	2301      	movs	r3, #1
   1fffa:	6013      	str	r3, [r2, #0]
}
   1fffc:	4770      	bx	lr
   1fffe:	bf00      	nop
   20000:	200035b4 	.word	0x200035b4

00020004 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   20004:	4800      	ldr	r0, [pc, #0]	; (20008 <flash_nrf_get_parameters+0x4>)
   20006:	4770      	bx	lr
   20008:	0002fc1c 	.word	0x0002fc1c

0002000c <flash_nrf_read>:
{
   2000c:	b570      	push	{r4, r5, r6, lr}
   2000e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   20010:	4628      	mov	r0, r5
   20012:	4619      	mov	r1, r3
{
   20014:	4616      	mov	r6, r2
   20016:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20018:	f00e f86d 	bl	2e0f6 <is_regular_addr_valid>
   2001c:	b940      	cbnz	r0, 20030 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2001e:	4808      	ldr	r0, [pc, #32]	; (20040 <flash_nrf_read+0x34>)
   20020:	4623      	mov	r3, r4
   20022:	462a      	mov	r2, r5
   20024:	2145      	movs	r1, #69	; 0x45
   20026:	f00a fd9f 	bl	2ab68 <z_log_minimal_printk>
   2002a:	f06f 0015 	mvn.w	r0, #21
}
   2002e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   20030:	b124      	cbz	r4, 2003c <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
   20032:	4622      	mov	r2, r4
   20034:	4629      	mov	r1, r5
   20036:	4630      	mov	r0, r6
   20038:	f00b fd5e 	bl	2baf8 <memcpy>
		return 0;
   2003c:	2000      	movs	r0, #0
   2003e:	e7f6      	b.n	2002e <flash_nrf_read+0x22>
   20040:	00033761 	.word	0x00033761

00020044 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   20044:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20046:	2201      	movs	r2, #1
   20048:	4611      	mov	r1, r2
   2004a:	4807      	ldr	r0, [pc, #28]	; (20068 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2004c:	4c07      	ldr	r4, [pc, #28]	; (2006c <nrf_flash_init+0x28>)
   2004e:	f00e fdc1 	bl	2ebd4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   20052:	f002 fcbf 	bl	229d4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20056:	f00e fd0c 	bl	2ea72 <nrfx_nvmc_flash_page_count_get>
   2005a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2005c:	f00e fd05 	bl	2ea6a <nrfx_nvmc_flash_page_size_get>
   20060:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   20062:	2000      	movs	r0, #0
   20064:	bd10      	pop	{r4, pc}
   20066:	bf00      	nop
   20068:	200035bc 	.word	0x200035bc
   2006c:	200035b4 	.word	0x200035b4

00020070 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   20070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20074:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   20078:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   2007c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   20080:	f023 031f 	bic.w	r3, r3, #31
   20084:	430b      	orrs	r3, r1
    pofcon |=
   20086:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   2008a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2008e:	4b02      	ldr	r3, [pc, #8]	; (20098 <restore_pofwarn.part.0+0x28>)
   20090:	2200      	movs	r2, #0
   20092:	701a      	strb	r2, [r3, #0]
	}
}
   20094:	4770      	bx	lr
   20096:	bf00      	nop
   20098:	20004422 	.word	0x20004422

0002009c <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2009c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   200a0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   200a4:	2b08      	cmp	r3, #8
   200a6:	d120      	bne.n	200ea <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   200a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   200ac:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   200b0:	07cb      	lsls	r3, r1, #31
   200b2:	d51a      	bpl.n	200ea <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   200b4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   200b8:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   200bc:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   200c0:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   200c2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   200c6:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   200ca:	b15b      	cbz	r3, 200e4 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   200cc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   200d0:	f023 031f 	bic.w	r3, r3, #31
   200d4:	430b      	orrs	r3, r1
    pofcon |=
   200d6:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   200da:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   200de:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   200e2:	4770      	bx	lr
		pofcon_enabled = enabled;
   200e4:	4b02      	ldr	r3, [pc, #8]	; (200f0 <suspend_pofwarn+0x54>)
   200e6:	2201      	movs	r2, #1
   200e8:	701a      	strb	r2, [r3, #0]
		return 0;
   200ea:	2000      	movs	r0, #0
}
   200ec:	4770      	bx	lr
   200ee:	bf00      	nop
   200f0:	20004422 	.word	0x20004422

000200f4 <erase_op>:
{
   200f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200f6:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   200f8:	f00e fcb7 	bl	2ea6a <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   200fc:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   200fe:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   20100:	b10b      	cbz	r3, 20106 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   20102:	f00e fc11 	bl	2e928 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   20106:	4f13      	ldr	r7, [pc, #76]	; (20154 <erase_op+0x60>)
{
   20108:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   2010a:	f7ff ffc7 	bl	2009c <suspend_pofwarn>
   2010e:	b9e8      	cbnz	r0, 2014c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   20110:	6860      	ldr	r0, [r4, #4]
   20112:	f003 fa55 	bl	235c0 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   20116:	68a3      	ldr	r3, [r4, #8]
   20118:	1b5b      	subs	r3, r3, r5
   2011a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2011c:	6863      	ldr	r3, [r4, #4]
   2011e:	442b      	add	r3, r5
   20120:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   20122:	783b      	ldrb	r3, [r7, #0]
   20124:	b10b      	cbz	r3, 2012a <erase_op+0x36>
   20126:	f7ff ffa3 	bl	20070 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   2012a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2012c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2012e:	b93b      	cbnz	r3, 20140 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   20130:	68a3      	ldr	r3, [r4, #8]
   20132:	2b00      	cmp	r3, #0
   20134:	d1e9      	bne.n	2010a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   20136:	68a0      	ldr	r0, [r4, #8]
   20138:	3800      	subs	r0, #0
   2013a:	bf18      	it	ne
   2013c:	2001      	movne	r0, #1
}
   2013e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   20140:	4630      	mov	r0, r6
   20142:	f002 fcff 	bl	22b44 <nrf_flash_sync_check_time_limit>
   20146:	2800      	cmp	r0, #0
   20148:	d0f2      	beq.n	20130 <erase_op+0x3c>
   2014a:	e7f4      	b.n	20136 <erase_op+0x42>
			return -ECANCELED;
   2014c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   20150:	e7f5      	b.n	2013e <erase_op+0x4a>
   20152:	bf00      	nop
   20154:	20004422 	.word	0x20004422

00020158 <flash_nrf_erase>:
{
   20158:	b5f0      	push	{r4, r5, r6, r7, lr}
   2015a:	b087      	sub	sp, #28
   2015c:	460e      	mov	r6, r1
   2015e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20160:	f00e fc83 	bl	2ea6a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   20164:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20166:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   20168:	4630      	mov	r0, r6
   2016a:	f00d ffc4 	bl	2e0f6 <is_regular_addr_valid>
   2016e:	b358      	cbz	r0, 201c8 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   20170:	fbb6 f3f7 	udiv	r3, r6, r7
   20174:	fb07 6313 	mls	r3, r7, r3, r6
   20178:	b923      	cbnz	r3, 20184 <flash_nrf_erase+0x2c>
   2017a:	fbb5 f4f7 	udiv	r4, r5, r7
   2017e:	fb07 5414 	mls	r4, r7, r4, r5
   20182:	b154      	cbz	r4, 2019a <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   20184:	481f      	ldr	r0, [pc, #124]	; (20204 <flash_nrf_erase+0xac>)
   20186:	462b      	mov	r3, r5
   20188:	4632      	mov	r2, r6
   2018a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2018c:	f00a fcec 	bl	2ab68 <z_log_minimal_printk>
			return -EINVAL;
   20190:	f06f 0415 	mvn.w	r4, #21
}
   20194:	4620      	mov	r0, r4
   20196:	b007      	add	sp, #28
   20198:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   2019a:	42bd      	cmp	r5, r7
   2019c:	d3fa      	bcc.n	20194 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   2019e:	f04f 33ff 	mov.w	r3, #4294967295
   201a2:	f04f 32ff 	mov.w	r2, #4294967295
   201a6:	4818      	ldr	r0, [pc, #96]	; (20208 <flash_nrf_erase+0xb0>)
   201a8:	f004 fde6 	bl	24d78 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   201ac:	f00e fbba 	bl	2e924 <nrf_flash_sync_is_required>
   201b0:	ab02      	add	r3, sp, #8
   201b2:	4601      	mov	r1, r0
   201b4:	b968      	cbnz	r0, 201d2 <flash_nrf_erase+0x7a>
	struct flash_context context = {
   201b6:	2210      	movs	r2, #16
   201b8:	4618      	mov	r0, r3
   201ba:	f00b fca8 	bl	2bb0e <memset>
   201be:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   201c2:	f7ff ff97 	bl	200f4 <erase_op>
   201c6:	e017      	b.n	201f8 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   201c8:	4810      	ldr	r0, [pc, #64]	; (2020c <flash_nrf_erase+0xb4>)
   201ca:	462b      	mov	r3, r5
   201cc:	4632      	mov	r2, r6
   201ce:	2145      	movs	r1, #69	; 0x45
   201d0:	e7dc      	b.n	2018c <flash_nrf_erase+0x34>
	struct flash_context context = {
   201d2:	2210      	movs	r2, #16
   201d4:	4621      	mov	r1, r4
   201d6:	4618      	mov	r0, r3
   201d8:	f00b fc99 	bl	2bb0e <memset>
   201dc:	2201      	movs	r2, #1
   201de:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   201e2:	4a0b      	ldr	r2, [pc, #44]	; (20210 <flash_nrf_erase+0xb8>)
   201e4:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   201e8:	480a      	ldr	r0, [pc, #40]	; (20214 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   201ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   201ee:	f002 fbf9 	bl	229e4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   201f2:	4668      	mov	r0, sp
   201f4:	f002 fbfc 	bl	229f0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   201f8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   201fa:	4803      	ldr	r0, [pc, #12]	; (20208 <flash_nrf_erase+0xb0>)
   201fc:	f004 fd82 	bl	24d04 <z_impl_k_sem_give>
}
   20200:	e7c8      	b.n	20194 <flash_nrf_erase+0x3c>
   20202:	bf00      	nop
   20204:	00033783 	.word	0x00033783
   20208:	200035bc 	.word	0x200035bc
   2020c:	00033761 	.word	0x00033761
   20210:	000200f5 	.word	0x000200f5
   20214:	00015e64 	.word	0x00015e64

00020218 <write_op>:
{
   20218:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   2021a:	7b03      	ldrb	r3, [r0, #12]
{
   2021c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   2021e:	b10b      	cbz	r3, 20224 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   20220:	f00e fb82 	bl	2e928 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   20224:	4e19      	ldr	r6, [pc, #100]	; (2028c <write_op+0x74>)
{
   20226:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   20228:	68a3      	ldr	r3, [r4, #8]
   2022a:	2b03      	cmp	r3, #3
   2022c:	d806      	bhi.n	2023c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2022e:	4a18      	ldr	r2, [pc, #96]	; (20290 <write_op+0x78>)
   20230:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   20234:	07db      	lsls	r3, r3, #31
   20236:	d5fb      	bpl.n	20230 <write_op+0x18>
	return FLASH_OP_DONE;
   20238:	2000      	movs	r0, #0
}
   2023a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   2023c:	f7ff ff2e 	bl	2009c <suspend_pofwarn>
   20240:	bb08      	cbnz	r0, 20286 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   20242:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20244:	6860      	ldr	r0, [r4, #4]
   20246:	6819      	ldr	r1, [r3, #0]
   20248:	f003 f9ee 	bl	23628 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   2024c:	7833      	ldrb	r3, [r6, #0]
   2024e:	b10b      	cbz	r3, 20254 <write_op+0x3c>
   20250:	f7ff ff0e 	bl	20070 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   20254:	6863      	ldr	r3, [r4, #4]
   20256:	3304      	adds	r3, #4
   20258:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   2025a:	6823      	ldr	r3, [r4, #0]
   2025c:	3304      	adds	r3, #4
   2025e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   20260:	68a3      	ldr	r3, [r4, #8]
   20262:	3b04      	subs	r3, #4
   20264:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   20266:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20268:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   2026a:	2b00      	cmp	r3, #0
   2026c:	d0dc      	beq.n	20228 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   2026e:	4628      	mov	r0, r5
   20270:	f002 fc68 	bl	22b44 <nrf_flash_sync_check_time_limit>
   20274:	2800      	cmp	r0, #0
   20276:	d0d7      	beq.n	20228 <write_op+0x10>
   20278:	4a05      	ldr	r2, [pc, #20]	; (20290 <write_op+0x78>)
   2027a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2027e:	07d9      	lsls	r1, r3, #31
   20280:	d5fb      	bpl.n	2027a <write_op+0x62>
				return FLASH_OP_ONGOING;
   20282:	2001      	movs	r0, #1
   20284:	e7d9      	b.n	2023a <write_op+0x22>
			return -ECANCELED;
   20286:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2028a:	e7d6      	b.n	2023a <write_op+0x22>
   2028c:	20004422 	.word	0x20004422
   20290:	4001e000 	.word	0x4001e000

00020294 <flash_nrf_write>:
{
   20294:	b570      	push	{r4, r5, r6, lr}
   20296:	460d      	mov	r5, r1
   20298:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   2029a:	4619      	mov	r1, r3
   2029c:	4628      	mov	r0, r5
{
   2029e:	4616      	mov	r6, r2
   202a0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   202a2:	f00d ff28 	bl	2e0f6 <is_regular_addr_valid>
   202a6:	b950      	cbnz	r0, 202be <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   202a8:	481d      	ldr	r0, [pc, #116]	; (20320 <flash_nrf_write+0x8c>)
   202aa:	4623      	mov	r3, r4
   202ac:	462a      	mov	r2, r5
   202ae:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   202b0:	f00a fc5a 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   202b4:	f06f 0415 	mvn.w	r4, #21
}
   202b8:	4620      	mov	r0, r4
   202ba:	b006      	add	sp, #24
   202bc:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   202be:	ea45 0304 	orr.w	r3, r5, r4
   202c2:	079b      	lsls	r3, r3, #30
   202c4:	d004      	beq.n	202d0 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   202c6:	4817      	ldr	r0, [pc, #92]	; (20324 <flash_nrf_write+0x90>)
   202c8:	4623      	mov	r3, r4
   202ca:	462a      	mov	r2, r5
   202cc:	2145      	movs	r1, #69	; 0x45
   202ce:	e7ef      	b.n	202b0 <flash_nrf_write+0x1c>
	if (!len) {
   202d0:	2c00      	cmp	r4, #0
   202d2:	d0f1      	beq.n	202b8 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   202d4:	f04f 33ff 	mov.w	r3, #4294967295
   202d8:	f04f 32ff 	mov.w	r2, #4294967295
   202dc:	4812      	ldr	r0, [pc, #72]	; (20328 <flash_nrf_write+0x94>)
   202de:	f004 fd4b 	bl	24d78 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   202e2:	f00e fb1f 	bl	2e924 <nrf_flash_sync_is_required>
   202e6:	4603      	mov	r3, r0
	struct flash_context context = {
   202e8:	e9cd 6502 	strd	r6, r5, [sp, #8]
   202ec:	a802      	add	r0, sp, #8
   202ee:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   202f0:	b18b      	cbz	r3, 20316 <flash_nrf_write+0x82>
	struct flash_context context = {
   202f2:	2301      	movs	r3, #1
   202f4:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   202f8:	4b0c      	ldr	r3, [pc, #48]	; (2032c <flash_nrf_write+0x98>)
   202fa:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   202fe:	f641 504c 	movw	r0, #7500	; 0x1d4c
   20302:	f002 fb6f 	bl	229e4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   20306:	4668      	mov	r0, sp
   20308:	f002 fb72 	bl	229f0 <nrf_flash_sync_exe>
	return write_op(&context);
   2030c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2030e:	4806      	ldr	r0, [pc, #24]	; (20328 <flash_nrf_write+0x94>)
   20310:	f004 fcf8 	bl	24d04 <z_impl_k_sem_give>
}
   20314:	e7d0      	b.n	202b8 <flash_nrf_write+0x24>
	struct flash_context context = {
   20316:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   2031a:	f7ff ff7d 	bl	20218 <write_op>
   2031e:	e7f5      	b.n	2030c <flash_nrf_write+0x78>
   20320:	00033761 	.word	0x00033761
   20324:	000337a7 	.word	0x000337a7
   20328:	200035bc 	.word	0x200035bc
   2032c:	00020219 	.word	0x00020219

00020330 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   20330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20332:	461d      	mov	r5, r3
	return config->uarte_regs;
   20334:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   20336:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   20338:	f8d3 c000 	ldr.w	ip, [r3]
{
   2033c:	4606      	mov	r6, r0
   2033e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20342:	f3ef 8711 	mrs	r7, BASEPRI
   20346:	f383 8812 	msr	BASEPRI_MAX, r3
   2034a:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   2034e:	68e3      	ldr	r3, [r4, #12]
   20350:	68d8      	ldr	r0, [r3, #12]
   20352:	b138      	cbz	r0, 20364 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   20354:	f387 8811 	msr	BASEPRI, r7
   20358:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   2035c:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   20360:	b003      	add	sp, #12
   20362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   20364:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   20366:	68e3      	ldr	r3, [r4, #12]
   20368:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2036a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2036e:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   20372:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   20376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2037a:	68e3      	ldr	r3, [r4, #12]
   2037c:	d111      	bne.n	203a2 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   2037e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   20380:	68e3      	ldr	r3, [r4, #12]
   20382:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   20384:	4621      	mov	r1, r4
   20386:	4630      	mov	r0, r6
   20388:	f00e f89c 	bl	2e4c4 <start_tx_locked>
   2038c:	f387 8811 	msr	BASEPRI, r7
   20390:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   20394:	7ae3      	ldrb	r3, [r4, #11]
   20396:	2b01      	cmp	r3, #1
   20398:	d101      	bne.n	2039e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   2039a:	1c6b      	adds	r3, r5, #1
   2039c:	d106      	bne.n	203ac <uarte_nrfx_tx+0x7c>
	return 0;
   2039e:	2000      	movs	r0, #0
   203a0:	e7de      	b.n	20360 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   203a2:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   203a4:	4620      	mov	r0, r4
   203a6:	f00e f807 	bl	2e3b8 <setup_tx_cache>
   203aa:	e7eb      	b.n	20384 <uarte_nrfx_tx+0x54>
   203ac:	480b      	ldr	r0, [pc, #44]	; (203dc <uarte_nrfx_tx+0xac>)
   203ae:	4a0c      	ldr	r2, [pc, #48]	; (203e0 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   203b0:	68e4      	ldr	r4, [r4, #12]
   203b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   203b6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   203ba:	2100      	movs	r1, #0
   203bc:	2300      	movs	r3, #0
   203be:	fbc5 0106 	smlal	r0, r1, r5, r6
   203c2:	f7df fe9d 	bl	100 <__aeabi_uldivmod>
   203c6:	3420      	adds	r4, #32
   203c8:	4602      	mov	r2, r0
   203ca:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   203cc:	2000      	movs	r0, #0
   203ce:	2100      	movs	r1, #0
   203d0:	e9cd 0100 	strd	r0, r1, [sp]
   203d4:	4620      	mov	r0, r4
   203d6:	f006 fd79 	bl	26ecc <z_impl_k_timer_start>
   203da:	e7e0      	b.n	2039e <uarte_nrfx_tx+0x6e>
   203dc:	000f423f 	.word	0x000f423f
   203e0:	000f4240 	.word	0x000f4240

000203e4 <uarte_nrfx_configure>:
{
   203e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   203e6:	794b      	ldrb	r3, [r1, #5]
   203e8:	2b01      	cmp	r3, #1
   203ea:	d026      	beq.n	2043a <uarte_nrfx_configure+0x56>
   203ec:	2b03      	cmp	r3, #3
   203ee:	d121      	bne.n	20434 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   203f0:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   203f2:	798b      	ldrb	r3, [r1, #6]
   203f4:	2b03      	cmp	r3, #3
   203f6:	d11d      	bne.n	20434 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   203f8:	79ce      	ldrb	r6, [r1, #7]
   203fa:	b10e      	cbz	r6, 20400 <uarte_nrfx_configure+0x1c>
   203fc:	2e01      	cmp	r6, #1
   203fe:	d119      	bne.n	20434 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   20400:	790a      	ldrb	r2, [r1, #4]
   20402:	b112      	cbz	r2, 2040a <uarte_nrfx_configure+0x26>
   20404:	2a02      	cmp	r2, #2
   20406:	d115      	bne.n	20434 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20408:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2040a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2040c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   2040e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   20412:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   20414:	d067      	beq.n	204e6 <uarte_nrfx_configure+0x102>
   20416:	d82d      	bhi.n	20474 <uarte_nrfx_configure+0x90>
   20418:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2041c:	d066      	beq.n	204ec <uarte_nrfx_configure+0x108>
   2041e:	d816      	bhi.n	2044e <uarte_nrfx_configure+0x6a>
   20420:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20424:	d064      	beq.n	204f0 <uarte_nrfx_configure+0x10c>
   20426:	d80a      	bhi.n	2043e <uarte_nrfx_configure+0x5a>
   20428:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2042c:	d063      	beq.n	204f6 <uarte_nrfx_configure+0x112>
   2042e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20432:	d063      	beq.n	204fc <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   20434:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20438:	e054      	b.n	204e4 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   2043a:	2500      	movs	r5, #0
   2043c:	e7d9      	b.n	203f2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2043e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20442:	d05e      	beq.n	20502 <uarte_nrfx_configure+0x11e>
   20444:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20448:	d1f4      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2044a:	4b38      	ldr	r3, [pc, #224]	; (2052c <uarte_nrfx_configure+0x148>)
   2044c:	e03c      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2044e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20452:	d059      	beq.n	20508 <uarte_nrfx_configure+0x124>
   20454:	d807      	bhi.n	20466 <uarte_nrfx_configure+0x82>
   20456:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2045a:	d057      	beq.n	2050c <uarte_nrfx_configure+0x128>
   2045c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20460:	d1e8      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20462:	4b33      	ldr	r3, [pc, #204]	; (20530 <uarte_nrfx_configure+0x14c>)
   20464:	e030      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20466:	f647 2412 	movw	r4, #31250	; 0x7a12
   2046a:	42a3      	cmp	r3, r4
   2046c:	d1e2      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2046e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20472:	e029      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20474:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20478:	d04a      	beq.n	20510 <uarte_nrfx_configure+0x12c>
   2047a:	d813      	bhi.n	204a4 <uarte_nrfx_configure+0xc0>
   2047c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20480:	d049      	beq.n	20516 <uarte_nrfx_configure+0x132>
   20482:	d809      	bhi.n	20498 <uarte_nrfx_configure+0xb4>
   20484:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   20488:	42a3      	cmp	r3, r4
   2048a:	d046      	beq.n	2051a <uarte_nrfx_configure+0x136>
   2048c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20490:	d1d0      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20492:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20496:	e017      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20498:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2049c:	d1ca      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2049e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   204a2:	e011      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   204a4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   204a8:	d03a      	beq.n	20520 <uarte_nrfx_configure+0x13c>
   204aa:	d808      	bhi.n	204be <uarte_nrfx_configure+0xda>
   204ac:	4c21      	ldr	r4, [pc, #132]	; (20534 <uarte_nrfx_configure+0x150>)
   204ae:	42a3      	cmp	r3, r4
   204b0:	d039      	beq.n	20526 <uarte_nrfx_configure+0x142>
   204b2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   204b6:	d1bd      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   204b8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   204bc:	e004      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   204be:	4c1e      	ldr	r4, [pc, #120]	; (20538 <uarte_nrfx_configure+0x154>)
   204c0:	42a3      	cmp	r3, r4
   204c2:	d1b7      	bne.n	20434 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   204c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   204c8:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   204ca:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   204ce:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   204d0:	4335      	orrs	r5, r6
   204d2:	681b      	ldr	r3, [r3, #0]
   204d4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   204d6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   204da:	c903      	ldmia	r1, {r0, r1}
   204dc:	1d23      	adds	r3, r4, #4
   204de:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   204e2:	2000      	movs	r0, #0
}
   204e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   204e6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   204ea:	e7ed      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   204ec:	4b13      	ldr	r3, [pc, #76]	; (2053c <uarte_nrfx_configure+0x158>)
   204ee:	e7eb      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   204f0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   204f4:	e7e8      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   204f6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   204fa:	e7e5      	b.n	204c8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   204fc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20500:	e7e2      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20502:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20506:	e7df      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20508:	4b0d      	ldr	r3, [pc, #52]	; (20540 <uarte_nrfx_configure+0x15c>)
   2050a:	e7dd      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2050c:	4b0d      	ldr	r3, [pc, #52]	; (20544 <uarte_nrfx_configure+0x160>)
   2050e:	e7db      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20510:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20514:	e7d8      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20516:	4b0c      	ldr	r3, [pc, #48]	; (20548 <uarte_nrfx_configure+0x164>)
   20518:	e7d6      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2051a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2051e:	e7d3      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20520:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20524:	e7d0      	b.n	204c8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20526:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2052a:	e7cd      	b.n	204c8 <uarte_nrfx_configure+0xe4>
   2052c:	0013b000 	.word	0x0013b000
   20530:	004ea000 	.word	0x004ea000
   20534:	0003d090 	.word	0x0003d090
   20538:	000f4240 	.word	0x000f4240
   2053c:	00275000 	.word	0x00275000
   20540:	0075c000 	.word	0x0075c000
   20544:	003af000 	.word	0x003af000
   20548:	013a9000 	.word	0x013a9000

0002054c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   2054c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   20550:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   20554:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   20556:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2055a:	2100      	movs	r1, #0
   2055c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   20560:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   20562:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
   20566:	4607      	mov	r7, r0
	ret = pinctrl_lookup_state(config, id, &state);
   20568:	aa01      	add	r2, sp, #4
   2056a:	4648      	mov	r0, r9
   2056c:	f00e f86c 	bl	2e648 <pinctrl_lookup_state>
	if (ret < 0) {
   20570:	1e05      	subs	r5, r0, #0
   20572:	db1f      	blt.n	205b4 <uarte_instance_init.constprop.0+0x68>
	return pinctrl_apply_state_direct(config, state);
   20574:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   20576:	f8d9 2000 	ldr.w	r2, [r9]
   2057a:	7919      	ldrb	r1, [r3, #4]
   2057c:	6818      	ldr	r0, [r3, #0]
   2057e:	f00e f876 	bl	2e66e <pinctrl_configure_pins>
	if (err < 0) {
   20582:	1e05      	subs	r5, r0, #0
   20584:	db16      	blt.n	205b4 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   20586:	1d31      	adds	r1, r6, #4
   20588:	4638      	mov	r0, r7
   2058a:	f7ff ff2b 	bl	203e4 <uarte_nrfx_configure>
	if (err) {
   2058e:	4605      	mov	r5, r0
   20590:	b980      	cbnz	r0, 205b4 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20592:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20596:	0799      	lsls	r1, r3, #30
   20598:	d524      	bpl.n	205e4 <uarte_instance_init.constprop.0+0x98>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2059a:	f106 001c 	add.w	r0, r6, #28
   2059e:	f003 f873 	bl	23688 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   205a2:	4b48      	ldr	r3, [pc, #288]	; (206c4 <uarte_instance_init.constprop.0+0x178>)
   205a4:	4298      	cmp	r0, r3
   205a6:	d009      	beq.n	205bc <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
   205a8:	4847      	ldr	r0, [pc, #284]	; (206c8 <uarte_instance_init.constprop.0+0x17c>)
   205aa:	2145      	movs	r1, #69	; 0x45
   205ac:	f00a fadc 	bl	2ab68 <z_log_minimal_printk>
		return -EIO;
   205b0:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   205b4:	4628      	mov	r0, r5
   205b6:	b003      	add	sp, #12
   205b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   205bc:	7f33      	ldrb	r3, [r6, #28]
   205be:	00db      	lsls	r3, r3, #3
   205c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   205c4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   205c8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   205cc:	f504 7190 	add.w	r1, r4, #288	; 0x120
   205d0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   205d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   205d8:	7f32      	ldrb	r2, [r6, #28]
   205da:	2301      	movs	r3, #1
   205dc:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   205de:	4a3b      	ldr	r2, [pc, #236]	; (206cc <uarte_instance_init.constprop.0+0x180>)
   205e0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   205e4:	68f3      	ldr	r3, [r6, #12]
   205e6:	2b00      	cmp	r3, #0
   205e8:	d059      	beq.n	2069e <uarte_instance_init.constprop.0+0x152>
	return config->uarte_regs;
   205ea:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   205ec:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
   205f0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   205f2:	2204      	movs	r2, #4
   205f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   205f8:	f8d9 100c 	ldr.w	r1, [r9, #12]
   205fc:	2201      	movs	r2, #1
   205fe:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   20602:	4933      	ldr	r1, [pc, #204]	; (206d0 <uarte_instance_init.constprop.0+0x184>)
   20604:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20608:	2108      	movs	r1, #8
   2060a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2060e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   20612:	b1a1      	cbz	r1, 2063e <uarte_instance_init.constprop.0+0xf2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20614:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20616:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2061a:	b91a      	cbnz	r2, 20624 <uarte_instance_init.constprop.0+0xd8>
   2061c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   20620:	2a00      	cmp	r2, #0
   20622:	d0f8      	beq.n	20616 <uarte_instance_init.constprop.0+0xca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20624:	2200      	movs	r2, #0
   20626:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   2062a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   2062e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20632:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   20636:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   2063a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2063e:	f8d9 000c 	ldr.w	r0, [r9, #12]
   20642:	4924      	ldr	r1, [pc, #144]	; (206d4 <uarte_instance_init.constprop.0+0x188>)
   20644:	2200      	movs	r2, #0
   20646:	3080      	adds	r0, #128	; 0x80
   20648:	f00e fb95 	bl	2ed76 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2064c:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
   20650:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   20654:	f8d9 000c 	ldr.w	r0, [r9, #12]
   20658:	491f      	ldr	r1, [pc, #124]	; (206d8 <uarte_instance_init.constprop.0+0x18c>)
   2065a:	2200      	movs	r2, #0
   2065c:	3020      	adds	r0, #32
   2065e:	f00e fb8a 	bl	2ed76 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   20662:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20666:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2066a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2066e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20670:	bf5c      	itt	pl
   20672:	f44f 7380 	movpl.w	r3, #256	; 0x100
   20676:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2067a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2067e:	06db      	lsls	r3, r3, #27
   20680:	bf44      	itt	mi
   20682:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   20686:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2068a:	6973      	ldr	r3, [r6, #20]
   2068c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20690:	2300      	movs	r3, #0
   20692:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20696:	2301      	movs	r3, #1
   20698:	60a3      	str	r3, [r4, #8]
   2069a:	60e3      	str	r3, [r4, #12]
	return 0;
   2069c:	e78a      	b.n	205b4 <uarte_instance_init.constprop.0+0x68>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2069e:	2308      	movs	r3, #8
   206a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   206a4:	f898 3008 	ldrb.w	r3, [r8, #8]
   206a8:	2b00      	cmp	r3, #0
   206aa:	d1de      	bne.n	2066a <uarte_instance_init.constprop.0+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   206b0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   206b4:	69b3      	ldr	r3, [r6, #24]
   206b6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   206ba:	2301      	movs	r3, #1
   206bc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   206c0:	6023      	str	r3, [r4, #0]
}
   206c2:	e7d2      	b.n	2066a <uarte_instance_init.constprop.0+0x11e>
   206c4:	0bad0000 	.word	0x0bad0000
   206c8:	000337ee 	.word	0x000337ee
   206cc:	4001f000 	.word	0x4001f000
   206d0:	000a0210 	.word	0x000a0210
   206d4:	0002e537 	.word	0x0002e537
   206d8:	0002e607 	.word	0x0002e607

000206dc <uarte_nrfx_poll_out>:
{
   206dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206e0:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   206e2:	6905      	ldr	r5, [r0, #16]
{
   206e4:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   206e6:	f00e fa24 	bl	2eb32 <k_is_in_isr>
   206ea:	b9b0      	cbnz	r0, 2071a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   206ec:	4b2a      	ldr	r3, [pc, #168]	; (20798 <uarte_nrfx_poll_out+0xbc>)
   206ee:	781b      	ldrb	r3, [r3, #0]
   206f0:	b19b      	cbz	r3, 2071a <uarte_nrfx_poll_out+0x3e>
{
   206f2:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   206f4:	6860      	ldr	r0, [r4, #4]
   206f6:	f00d fed5 	bl	2e4a4 <is_tx_ready.isra.0>
   206fa:	2800      	cmp	r0, #0
   206fc:	d138      	bne.n	20770 <uarte_nrfx_poll_out+0x94>
   206fe:	2001      	movs	r0, #1
   20700:	f00e f91f 	bl	2e942 <nrfx_busy_wait>
   20704:	3f01      	subs	r7, #1
   20706:	d1f5      	bne.n	206f4 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   20708:	2100      	movs	r1, #0
   2070a:	2021      	movs	r0, #33	; 0x21
   2070c:	f005 ff2a 	bl	26564 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20710:	e7ef      	b.n	206f2 <uarte_nrfx_poll_out+0x16>
   20712:	f381 8811 	msr	BASEPRI, r1
   20716:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2071a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2071e:	f3ef 8111 	mrs	r1, BASEPRI
   20722:	f383 8812 	msr	BASEPRI_MAX, r3
   20726:	f3bf 8f6f 	isb	sy
   2072a:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   2072e:	4640      	mov	r0, r8
   20730:	460f      	mov	r7, r1
   20732:	f00d feb7 	bl	2e4a4 <is_tx_ready.isra.0>
   20736:	2800      	cmp	r0, #0
   20738:	d0eb      	beq.n	20712 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   2073a:	68eb      	ldr	r3, [r5, #12]
   2073c:	b15b      	cbz	r3, 20756 <uarte_nrfx_poll_out+0x7a>
   2073e:	68da      	ldr	r2, [r3, #12]
   20740:	b14a      	cbz	r2, 20756 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   20742:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   20746:	2a00      	cmp	r2, #0
   20748:	da05      	bge.n	20756 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   2074a:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   2074e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   20752:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   20756:	696b      	ldr	r3, [r5, #20]
   20758:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   2075a:	6969      	ldr	r1, [r5, #20]
   2075c:	2201      	movs	r2, #1
   2075e:	4620      	mov	r0, r4
   20760:	f00d fd4a 	bl	2e1f8 <tx_start>
	__asm__ volatile(
   20764:	f387 8811 	msr	BASEPRI, r7
   20768:	f3bf 8f6f 	isb	sy
}
   2076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20770:	f04f 0340 	mov.w	r3, #64	; 0x40
   20774:	f3ef 8111 	mrs	r1, BASEPRI
   20778:	f383 8812 	msr	BASEPRI_MAX, r3
   2077c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20780:	6860      	ldr	r0, [r4, #4]
   20782:	460f      	mov	r7, r1
   20784:	f00d fe8e 	bl	2e4a4 <is_tx_ready.isra.0>
   20788:	2800      	cmp	r0, #0
   2078a:	d1e4      	bne.n	20756 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   2078c:	f381 8811 	msr	BASEPRI, r1
   20790:	f3bf 8f6f 	isb	sy
}
   20794:	e7b8      	b.n	20708 <uarte_nrfx_poll_out+0x2c>
   20796:	bf00      	nop
   20798:	20004938 	.word	0x20004938

0002079c <uarte_nrfx_rx_enable>:
{
   2079c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   207a0:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   207a4:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   207a6:	f8da 9000 	ldr.w	r9, [sl]
{
   207aa:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   207ac:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   207b0:	4605      	mov	r5, r0
   207b2:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   207b4:	b152      	cbz	r2, 207cc <uarte_nrfx_rx_enable+0x30>
		__ASSERT(false, "TX only UARTE instance");
   207b6:	4942      	ldr	r1, [pc, #264]	; (208c0 <uarte_nrfx_rx_enable+0x124>)
   207b8:	4842      	ldr	r0, [pc, #264]	; (208c4 <uarte_nrfx_rx_enable+0x128>)
   207ba:	f240 327d 	movw	r2, #893	; 0x37d
   207be:	f00a f9c5 	bl	2ab4c <assert_print>
   207c2:	483f      	ldr	r0, [pc, #252]	; (208c0 <uarte_nrfx_rx_enable+0x124>)
   207c4:	f240 317d 	movw	r1, #893	; 0x37d
   207c8:	f00a f9b9 	bl	2ab3e <assert_post_action>
	if (data->async->rx_enabled) {
   207cc:	68e2      	ldr	r2, [r4, #12]
   207ce:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   207d2:	2900      	cmp	r1, #0
   207d4:	d171      	bne.n	208ba <uarte_nrfx_rx_enable+0x11e>
	data->async->rx_timeout = timeout;
   207d6:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   207d8:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   207dc:	bfc4      	itt	gt
   207de:	2205      	movgt	r2, #5
   207e0:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   207e4:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   207e6:	bfd8      	it	le
   207e8:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   207ea:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   207ec:	68e3      	ldr	r3, [r4, #12]
   207ee:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   207f2:	68e3      	ldr	r3, [r4, #12]
   207f4:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   207f6:	68e2      	ldr	r2, [r4, #12]
   207f8:	2300      	movs	r3, #0
   207fa:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   207fc:	68e2      	ldr	r2, [r4, #12]
   207fe:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   20800:	68e2      	ldr	r2, [r4, #12]
   20802:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20804:	f8da 3004 	ldr.w	r3, [sl, #4]
   20808:	06da      	lsls	r2, r3, #27
   2080a:	d523      	bpl.n	20854 <uarte_nrfx_rx_enable+0xb8>
		if (data->async->rx_flush_cnt) {
   2080c:	68e1      	ldr	r1, [r4, #12]
   2080e:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   20812:	b1fe      	cbz	r6, 20854 <uarte_nrfx_rx_enable+0xb8>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   20814:	42be      	cmp	r6, r7
   20816:	bf28      	it	cs
   20818:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   2081a:	4640      	mov	r0, r8
   2081c:	4632      	mov	r2, r6
   2081e:	31c4      	adds	r1, #196	; 0xc4
   20820:	f00b f96a 	bl	2baf8 <memcpy>
			if (!len) {
   20824:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   20826:	44b0      	add	r8, r6
			if (!len) {
   20828:	d114      	bne.n	20854 <uarte_nrfx_rx_enable+0xb8>
				data->async->rx_flush_cnt -= cpy_len;
   2082a:	68e2      	ldr	r2, [r4, #12]
   2082c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   20830:	1b9b      	subs	r3, r3, r6
   20832:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   20836:	4631      	mov	r1, r6
   20838:	4628      	mov	r0, r5
   2083a:	f00d fd0c 	bl	2e256 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   2083e:	68e1      	ldr	r1, [r4, #12]
   20840:	4628      	mov	r0, r5
   20842:	3158      	adds	r1, #88	; 0x58
   20844:	f00d fd20 	bl	2e288 <rx_buf_release>
				notify_rx_disable(dev);
   20848:	4628      	mov	r0, r5
   2084a:	f00d fd35 	bl	2e2b8 <notify_rx_disable>
	return 0;
   2084e:	2000      	movs	r0, #0
}
   20850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20854:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20856:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2085a:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2085e:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   20862:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   20866:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   2086a:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   2086e:	68e3      	ldr	r3, [r4, #12]
   20870:	2201      	movs	r2, #1
   20872:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20876:	f8da 3004 	ldr.w	r3, [sl, #4]
   2087a:	06db      	lsls	r3, r3, #27
   2087c:	d519      	bpl.n	208b2 <uarte_nrfx_rx_enable+0x116>
	__asm__ volatile(
   2087e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20882:	f3ef 8111 	mrs	r1, BASEPRI
   20886:	f383 8812 	msr	BASEPRI_MAX, r3
   2088a:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2088e:	692b      	ldr	r3, [r5, #16]
   20890:	68db      	ldr	r3, [r3, #12]
   20892:	b12b      	cbz	r3, 208a0 <uarte_nrfx_rx_enable+0x104>
		data->async->low_power_mask |= mask;
   20894:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   20898:	f042 0202 	orr.w	r2, r2, #2
   2089c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   208a0:	686b      	ldr	r3, [r5, #4]
   208a2:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   208a4:	2208      	movs	r2, #8
   208a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   208aa:	f381 8811 	msr	BASEPRI, r1
   208ae:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   208b2:	2301      	movs	r3, #1
   208b4:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   208b8:	e7c9      	b.n	2084e <uarte_nrfx_rx_enable+0xb2>
		return -EBUSY;
   208ba:	f06f 000f 	mvn.w	r0, #15
   208be:	e7c7      	b.n	20850 <uarte_nrfx_rx_enable+0xb4>
   208c0:	00033812 	.word	0x00033812
   208c4:	0003013d 	.word	0x0003013d

000208c8 <uarte_nrfx_isr_async>:
{
   208c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   208cc:	6843      	ldr	r3, [r0, #4]
   208ce:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   208d0:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   208d2:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   208d6:	b088      	sub	sp, #32
   208d8:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   208da:	b169      	cbz	r1, 208f8 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   208dc:	2200      	movs	r2, #0
   208de:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   208e2:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   208e6:	68da      	ldr	r2, [r3, #12]
   208e8:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   208ec:	3301      	adds	r3, #1
   208ee:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   208f2:	b008      	add	sp, #32
   208f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   208f8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   208fc:	b323      	cbz	r3, 20948 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   208fe:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   20902:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   20906:	6843      	ldr	r3, [r0, #4]
   20908:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2090a:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2090e:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   20912:	2214      	movs	r2, #20
   20914:	a803      	add	r0, sp, #12
   20916:	f00b f8fa 	bl	2bb0e <memset>
   2091a:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   2091c:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   2091e:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   20922:	f100 8103 	bmi.w	20b2c <uarte_nrfx_isr_async+0x264>
   20926:	07b3      	lsls	r3, r6, #30
   20928:	f100 8102 	bmi.w	20b30 <uarte_nrfx_isr_async+0x268>
   2092c:	0777      	lsls	r7, r6, #29
   2092e:	f100 8101 	bmi.w	20b34 <uarte_nrfx_isr_async+0x26c>
   20932:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   20936:	4620      	mov	r0, r4
   20938:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   2093a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   2093e:	f00d fc83 	bl	2e248 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   20942:	4620      	mov	r0, r4
   20944:	f00d fd16 	bl	2e374 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20948:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   2094c:	b38b      	cbz	r3, 209b2 <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   2094e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   20952:	06d8      	lsls	r0, r3, #27
   20954:	d52d      	bpl.n	209b2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20956:	f04f 0800 	mov.w	r8, #0
   2095a:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   2095e:	6926      	ldr	r6, [r4, #16]
   20960:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   20964:	6863      	ldr	r3, [r4, #4]
   20966:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   20968:	68f3      	ldr	r3, [r6, #12]
   2096a:	2201      	movs	r2, #1
   2096c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   20970:	68f0      	ldr	r0, [r6, #12]
   20972:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   20974:	f00e fa0b 	bl	2ed8e <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   20978:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   2097a:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   2097e:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   20982:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   20986:	68f2      	ldr	r2, [r6, #12]
   20988:	6e10      	ldr	r0, [r2, #96]	; 0x60
   2098a:	1a1b      	subs	r3, r3, r0
   2098c:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   2098e:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   20990:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   20994:	4408      	add	r0, r1
	if (rx_len > 0) {
   20996:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   20998:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   2099a:	dd02      	ble.n	209a2 <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   2099c:	4620      	mov	r0, r4
   2099e:	f00d fc5a 	bl	2e256 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   209a2:	68f1      	ldr	r1, [r6, #12]
   209a4:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   209a8:	2b00      	cmp	r3, #0
   209aa:	f040 80c5 	bne.w	20b38 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   209ae:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   209b2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   209b6:	b383      	cbz	r3, 20a1a <uarte_nrfx_isr_async+0x152>
   209b8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   209bc:	bb6e      	cbnz	r6, 20a1a <uarte_nrfx_isr_async+0x152>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   209be:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   209c2:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   209c4:	6927      	ldr	r7, [r4, #16]
   209c6:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   209ca:	4631      	mov	r1, r6
   209cc:	a803      	add	r0, sp, #12
   209ce:	f00b f89e 	bl	2bb0e <memset>
   209d2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   209d4:	a903      	add	r1, sp, #12
   209d6:	4620      	mov	r0, r4
	struct uart_event evt = {
   209d8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   209dc:	f00d fc34 	bl	2e248 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   209e0:	68fb      	ldr	r3, [r7, #12]
   209e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   209e4:	1c51      	adds	r1, r2, #1
   209e6:	d018      	beq.n	20a1a <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   209e8:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   209ea:	68ff      	ldr	r7, [r7, #12]
   209ec:	498e      	ldr	r1, [pc, #568]	; (20c28 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   209ee:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   209f0:	4a8e      	ldr	r2, [pc, #568]	; (20c2c <uarte_nrfx_isr_async+0x364>)
   209f2:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   209f6:	468e      	mov	lr, r1
   209f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   209fc:	4631      	mov	r1, r6
   209fe:	fbcc e100 	smlal	lr, r1, ip, r0
   20a02:	2300      	movs	r3, #0
   20a04:	4670      	mov	r0, lr
   20a06:	f7df fb7b 	bl	100 <__aeabi_uldivmod>
   20a0a:	4602      	mov	r2, r0
   20a0c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   20a0e:	e9cd 0100 	strd	r0, r1, [sp]
   20a12:	f107 0080 	add.w	r0, r7, #128	; 0x80
   20a16:	f006 fa59 	bl	26ecc <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a1a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   20a1e:	b333      	cbz	r3, 20a6e <uarte_nrfx_isr_async+0x1a6>
   20a20:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   20a24:	bb1e      	cbnz	r6, 20a6e <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a26:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   20a2a:	6927      	ldr	r7, [r4, #16]
   20a2c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   20a30:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   20a32:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   20a36:	3158      	adds	r1, #88	; 0x58
   20a38:	4620      	mov	r0, r4
   20a3a:	f00d fc25 	bl	2e288 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   20a3e:	68f9      	ldr	r1, [r7, #12]
   20a40:	4620      	mov	r0, r4
   20a42:	3164      	adds	r1, #100	; 0x64
   20a44:	f00d fc20 	bl	2e288 <rx_buf_release>
	if (data->async->rx_enabled) {
   20a48:	68fb      	ldr	r3, [r7, #12]
   20a4a:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   20a4e:	2a00      	cmp	r2, #0
   20a50:	f000 80a3 	beq.w	20b9a <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   20a54:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20a58:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20a5c:	06d8      	lsls	r0, r3, #27
   20a5e:	d503      	bpl.n	20a68 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   20a60:	2102      	movs	r1, #2
   20a62:	4620      	mov	r0, r4
   20a64:	f00d fcf4 	bl	2e450 <async_uart_release>
	notify_rx_disable(dev);
   20a68:	4620      	mov	r0, r4
   20a6a:	f00d fc25 	bl	2e2b8 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a6e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   20a72:	b1db      	cbz	r3, 20aac <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   20a74:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   20a78:	05d9      	lsls	r1, r3, #23
   20a7a:	d517      	bpl.n	20aac <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   20a7c:	6863      	ldr	r3, [r4, #4]
   20a7e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   20a80:	f04f 0140 	mov.w	r1, #64	; 0x40
   20a84:	f3ef 8211 	mrs	r2, BASEPRI
   20a88:	f381 8812 	msr	BASEPRI_MAX, r1
   20a8c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a90:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   20a94:	b131      	cbz	r1, 20aa4 <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20a96:	2100      	movs	r1, #0
   20a98:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   20a9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20aa0:	2101      	movs	r1, #1
   20aa2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   20aa4:	f382 8811 	msr	BASEPRI, r2
   20aa8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20aac:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   20ab0:	2b00      	cmp	r3, #0
   20ab2:	f43f af1e 	beq.w	208f2 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   20ab6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   20aba:	025a      	lsls	r2, r3, #9
   20abc:	f57f af19 	bpl.w	208f2 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   20ac0:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   20ac2:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20ac4:	e9d3 7300 	ldrd	r7, r3, [r3]
   20ac8:	06db      	lsls	r3, r3, #27
   20aca:	d46b      	bmi.n	20ba4 <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   20acc:	68eb      	ldr	r3, [r5, #12]
   20ace:	689b      	ldr	r3, [r3, #8]
   20ad0:	2b00      	cmp	r3, #0
   20ad2:	f43f af0e 	beq.w	208f2 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   20ad6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ada:	f3ef 8211 	mrs	r2, BASEPRI
   20ade:	f383 8812 	msr	BASEPRI_MAX, r3
   20ae2:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   20ae6:	68eb      	ldr	r3, [r5, #12]
   20ae8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   20aec:	2900      	cmp	r1, #0
   20aee:	bfac      	ite	ge
   20af0:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   20af4:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   20af8:	f382 8811 	msr	BASEPRI, r2
   20afc:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   20b00:	68eb      	ldr	r3, [r5, #12]
   20b02:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   20b06:	2a00      	cmp	r2, #0
   20b08:	d059      	beq.n	20bbe <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   20b0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b0e:	f3ef 8611 	mrs	r6, BASEPRI
   20b12:	f383 8812 	msr	BASEPRI_MAX, r3
   20b16:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   20b1a:	4629      	mov	r1, r5
   20b1c:	4620      	mov	r0, r4
   20b1e:	f00d fcd1 	bl	2e4c4 <start_tx_locked>
	__asm__ volatile(
   20b22:	f386 8811 	msr	BASEPRI, r6
   20b26:	f3bf 8f6f 	isb	sy
				return;
   20b2a:	e6e2      	b.n	208f2 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   20b2c:	2601      	movs	r6, #1
   20b2e:	e702      	b.n	20936 <uarte_nrfx_isr_async+0x6e>
   20b30:	2602      	movs	r6, #2
   20b32:	e700      	b.n	20936 <uarte_nrfx_isr_async+0x6e>
   20b34:	2604      	movs	r6, #4
   20b36:	e6fe      	b.n	20936 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   20b38:	3158      	adds	r1, #88	; 0x58
   20b3a:	4620      	mov	r0, r4
   20b3c:	f00d fba4 	bl	2e288 <rx_buf_release>
	__asm__ volatile(
   20b40:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b44:	f3ef 8111 	mrs	r1, BASEPRI
   20b48:	f383 8812 	msr	BASEPRI_MAX, r3
   20b4c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   20b50:	68f3      	ldr	r3, [r6, #12]
   20b52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   20b54:	b1f2      	cbz	r2, 20b94 <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   20b56:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   20b58:	68f3      	ldr	r3, [r6, #12]
   20b5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   20b5c:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   20b5e:	68f2      	ldr	r2, [r6, #12]
   20b60:	2300      	movs	r3, #0
   20b62:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   20b64:	68f2      	ldr	r2, [r6, #12]
   20b66:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   20b68:	68f2      	ldr	r2, [r6, #12]
   20b6a:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   20b70:	b90b      	cbnz	r3, 20b76 <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b72:	2301      	movs	r3, #1
   20b74:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   20b76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   20b7a:	f023 0320 	bic.w	r3, r3, #32
   20b7e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   20b82:	f381 8811 	msr	BASEPRI, r1
   20b86:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   20b8a:	68f3      	ldr	r3, [r6, #12]
   20b8c:	2200      	movs	r2, #0
   20b8e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   20b92:	e70e      	b.n	209b2 <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20b94:	2301      	movs	r3, #1
   20b96:	607b      	str	r3, [r7, #4]
}
   20b98:	e7f3      	b.n	20b82 <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   20b9a:	6860      	ldr	r0, [r4, #4]
   20b9c:	4611      	mov	r1, r2
   20b9e:	f00d fc23 	bl	2e3e8 <rx_flush.isra.0>
   20ba2:	e759      	b.n	20a58 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   20ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   20ba8:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   20bac:	2101      	movs	r1, #1
   20bae:	4620      	mov	r0, r4
   20bb0:	f00d fc4e 	bl	2e450 <async_uart_release>
		if (!data->async->tx_size) {
   20bb4:	68eb      	ldr	r3, [r5, #12]
   20bb6:	68db      	ldr	r3, [r3, #12]
   20bb8:	2b00      	cmp	r3, #0
   20bba:	d187      	bne.n	20acc <uarte_nrfx_isr_async+0x204>
   20bbc:	e699      	b.n	208f2 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   20bbe:	6899      	ldr	r1, [r3, #8]
   20bc0:	691a      	ldr	r2, [r3, #16]
   20bc2:	4291      	cmp	r1, r2
   20bc4:	d00c      	beq.n	20be0 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   20bc6:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   20bc8:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   20bca:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   20bcc:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   20bce:	d128      	bne.n	20c22 <uarte_nrfx_isr_async+0x35a>
			data->async->tx_cache_offset += amount;
   20bd0:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   20bd2:	4628      	mov	r0, r5
   20bd4:	f00d fbf0 	bl	2e3b8 <setup_tx_cache>
   20bd8:	2800      	cmp	r0, #0
   20bda:	d196      	bne.n	20b0a <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   20bdc:	68eb      	ldr	r3, [r5, #12]
   20bde:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   20be0:	68e8      	ldr	r0, [r5, #12]
   20be2:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   20be4:	f00e f8d3 	bl	2ed8e <z_impl_k_timer_stop>
	struct uart_event evt = {
   20be8:	2214      	movs	r2, #20
   20bea:	2100      	movs	r1, #0
   20bec:	a803      	add	r0, sp, #12
   20bee:	f00a ff8e 	bl	2bb0e <memset>
		.data.tx.buf = data->async->tx_buf,
   20bf2:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   20bf4:	689a      	ldr	r2, [r3, #8]
   20bf6:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   20bfa:	68db      	ldr	r3, [r3, #12]
   20bfc:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   20bfe:	bf1c      	itt	ne
   20c00:	2301      	movne	r3, #1
   20c02:	f88d 300c 	strbne.w	r3, [sp, #12]
   20c06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   20c0a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   20c0e:	68ea      	ldr	r2, [r5, #12]
   20c10:	2300      	movs	r3, #0
   20c12:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   20c14:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   20c16:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   20c18:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   20c1a:	4620      	mov	r0, r4
   20c1c:	f00d fb14 	bl	2e248 <user_callback>
   20c20:	e667      	b.n	208f2 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   20c22:	4616      	mov	r6, r2
   20c24:	e7dc      	b.n	20be0 <uarte_nrfx_isr_async+0x318>
   20c26:	bf00      	nop
   20c28:	000f423f 	.word	0x000f423f
   20c2c:	000f4240 	.word	0x000f4240

00020c30 <random_byte_get>:
	__asm__ volatile(
   20c30:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c34:	f3ef 8211 	mrs	r2, BASEPRI
   20c38:	f383 8812 	msr	BASEPRI_MAX, r3
   20c3c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20c40:	4b09      	ldr	r3, [pc, #36]	; (20c68 <random_byte_get+0x38>)
   20c42:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   20c46:	b161      	cbz	r1, 20c62 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20c48:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   20c4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20c4e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   20c52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   20c56:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   20c58:	f382 8811 	msr	BASEPRI, r2
   20c5c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20c60:	4770      	bx	lr
	int retval = -EAGAIN;
   20c62:	f06f 000a 	mvn.w	r0, #10
   20c66:	e7f7      	b.n	20c58 <random_byte_get+0x28>
   20c68:	4000d000 	.word	0x4000d000

00020c6c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c6e:	4603      	mov	r3, r0
   20c70:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   20c72:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   20c74:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   20c78:	f04f 0540 	mov.w	r5, #64	; 0x40
   20c7c:	f3ef 8211 	mrs	r2, BASEPRI
   20c80:	f385 8812 	msr	BASEPRI_MAX, r5
   20c84:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20c88:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   20c8a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   20c8e:	1be4      	subs	r4, r4, r7
   20c90:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   20c94:	42a0      	cmp	r0, r4
		len = available;
   20c96:	bf88      	it	hi
   20c98:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20c9a:	183e      	adds	r6, r7, r0
   20c9c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   20ca0:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   20ca2:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   20ca4:	f382 8811 	msr	BASEPRI, r2
   20ca8:	f3bf 8f6f 	isb	sy
   20cac:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   20cae:	428a      	cmp	r2, r1
   20cb0:	d117      	bne.n	20ce2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20cb2:	4577      	cmp	r7, lr
   20cb4:	d10d      	bne.n	20cd2 <rng_pool_get+0x66>
	__asm__ volatile(
   20cb6:	f04f 0140 	mov.w	r1, #64	; 0x40
   20cba:	f3ef 8211 	mrs	r2, BASEPRI
   20cbe:	f381 8812 	msr	BASEPRI_MAX, r1
   20cc2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20cc6:	7819      	ldrb	r1, [r3, #0]
   20cc8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   20cca:	f382 8811 	msr	BASEPRI, r2
   20cce:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   20cd2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   20cd4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   20cd6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20cd8:	bf22      	ittt	cs
   20cda:	4b06      	ldrcs	r3, [pc, #24]	; (20cf4 <rng_pool_get+0x88>)
   20cdc:	2201      	movcs	r2, #1
   20cde:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   20ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   20ce2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   20ce4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   20ce6:	7976      	ldrb	r6, [r6, #5]
   20ce8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   20cec:	ea05 050c 	and.w	r5, r5, ip
   20cf0:	e7dd      	b.n	20cae <rng_pool_get+0x42>
   20cf2:	bf00      	nop
   20cf4:	4000d000 	.word	0x4000d000

00020cf8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   20cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20cfc:	4d2e      	ldr	r5, [pc, #184]	; (20db8 <entropy_nrf5_get_entropy_isr+0xc0>)
   20cfe:	6900      	ldr	r0, [r0, #16]
   20d00:	42a8      	cmp	r0, r5
{
   20d02:	460e      	mov	r6, r1
   20d04:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20d06:	d00a      	beq.n	20d1e <entropy_nrf5_get_entropy_isr+0x26>
   20d08:	492c      	ldr	r1, [pc, #176]	; (20dbc <entropy_nrf5_get_entropy_isr+0xc4>)
   20d0a:	482d      	ldr	r0, [pc, #180]	; (20dc0 <entropy_nrf5_get_entropy_isr+0xc8>)
   20d0c:	f240 1207 	movw	r2, #263	; 0x107
   20d10:	f009 ff1c 	bl	2ab4c <assert_print>
   20d14:	4829      	ldr	r0, [pc, #164]	; (20dbc <entropy_nrf5_get_entropy_isr+0xc4>)
   20d16:	f240 1107 	movw	r1, #263	; 0x107
   20d1a:	f009 ff10 	bl	2ab3e <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20d1e:	43db      	mvns	r3, r3
   20d20:	f013 0501 	ands.w	r5, r3, #1
   20d24:	d004      	beq.n	20d30 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20d26:	3030      	adds	r0, #48	; 0x30
   20d28:	f7ff ffa0 	bl	20c6c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   20d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   20d30:	b3a2      	cbz	r2, 20d9c <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   20d32:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d36:	f3ef 8811 	mrs	r8, BASEPRI
   20d3a:	f383 8812 	msr	BASEPRI_MAX, r3
   20d3e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20d42:	200d      	movs	r0, #13
   20d44:	f7f3 ff96 	bl	14c74 <arch_irq_is_enabled>
   20d48:	4607      	mov	r7, r0
		irq_disable(IRQN);
   20d4a:	200d      	movs	r0, #13
   20d4c:	f7f3 ff7e 	bl	14c4c <arch_irq_disable>
	__asm__ volatile(
   20d50:	f388 8811 	msr	BASEPRI, r8
   20d54:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20d58:	f8df a068 	ldr.w	sl, [pc, #104]	; 20dc4 <entropy_nrf5_get_entropy_isr+0xcc>
   20d5c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 20dc8 <entropy_nrf5_get_entropy_isr+0xd0>
   20d60:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   20d64:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   20d68:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20d6c:	2301      	movs	r3, #1
   20d6e:	f8ca 3000 	str.w	r3, [sl]
   20d72:	4625      	mov	r5, r4
   20d74:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20d78:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   20d7c:	b183      	cbz	r3, 20da0 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   20d7e:	f7ff ff57 	bl	20c30 <random_byte_get>
			if (byte < 0) {
   20d82:	1e03      	subs	r3, r0, #0
   20d84:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   20d88:	dbf6      	blt.n	20d78 <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   20d8a:	3d01      	subs	r5, #1
   20d8c:	b2ad      	uxth	r5, r5
   20d8e:	5573      	strb	r3, [r6, r5]
		} while (len);
   20d90:	2d00      	cmp	r5, #0
   20d92:	d1f1      	bne.n	20d78 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   20d94:	b117      	cbz	r7, 20d9c <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   20d96:	200d      	movs	r0, #13
   20d98:	f7f3 ff4a 	bl	14c30 <arch_irq_enable>
	return cnt;
   20d9c:	4620      	mov	r0, r4
   20d9e:	e7c5      	b.n	20d2c <entropy_nrf5_get_entropy_isr+0x34>
	__asm__ volatile(
   20da0:	f04f 0340 	mov.w	r3, #64	; 0x40
   20da4:	f3ef 8011 	mrs	r0, BASEPRI
   20da8:	f383 8812 	msr	BASEPRI_MAX, r3
   20dac:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   20db0:	f7f3 ff04 	bl	14bbc <arch_cpu_atomic_idle>
}
   20db4:	e7e0      	b.n	20d78 <entropy_nrf5_get_entropy_isr+0x80>
   20db6:	bf00      	nop
   20db8:	200035d4 	.word	0x200035d4
   20dbc:	00033872 	.word	0x00033872
   20dc0:	0003013d 	.word	0x0003013d
   20dc4:	4000d000 	.word	0x4000d000
   20dc8:	e000e100 	.word	0xe000e100

00020dcc <entropy_nrf5_get_entropy>:
{
   20dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20dd0:	4b18      	ldr	r3, [pc, #96]	; (20e34 <entropy_nrf5_get_entropy+0x68>)
   20dd2:	6907      	ldr	r7, [r0, #16]
   20dd4:	429f      	cmp	r7, r3
{
   20dd6:	460d      	mov	r5, r1
   20dd8:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20dda:	d105      	bne.n	20de8 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20ddc:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   20de0:	b95c      	cbnz	r4, 20dfa <entropy_nrf5_get_entropy+0x2e>
}
   20de2:	4620      	mov	r0, r4
   20de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20de8:	4913      	ldr	r1, [pc, #76]	; (20e38 <entropy_nrf5_get_entropy+0x6c>)
   20dea:	4814      	ldr	r0, [pc, #80]	; (20e3c <entropy_nrf5_get_entropy+0x70>)
   20dec:	22e9      	movs	r2, #233	; 0xe9
   20dee:	f009 fead 	bl	2ab4c <assert_print>
   20df2:	4811      	ldr	r0, [pc, #68]	; (20e38 <entropy_nrf5_get_entropy+0x6c>)
   20df4:	21e9      	movs	r1, #233	; 0xe9
   20df6:	f009 fea2 	bl	2ab3e <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   20dfa:	f04f 33ff 	mov.w	r3, #4294967295
   20dfe:	f04f 32ff 	mov.w	r2, #4294967295
   20e02:	4638      	mov	r0, r7
   20e04:	f003 ffb8 	bl	24d78 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20e08:	4622      	mov	r2, r4
   20e0a:	4629      	mov	r1, r5
   20e0c:	4640      	mov	r0, r8
   20e0e:	f7ff ff2d 	bl	20c6c <rng_pool_get>
   20e12:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   20e14:	4638      	mov	r0, r7
   20e16:	f003 ff75 	bl	24d04 <z_impl_k_sem_give>
		if (bytes == 0U) {
   20e1a:	b93e      	cbnz	r6, 20e2c <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   20e1c:	f04f 32ff 	mov.w	r2, #4294967295
   20e20:	f04f 33ff 	mov.w	r3, #4294967295
   20e24:	4806      	ldr	r0, [pc, #24]	; (20e40 <entropy_nrf5_get_entropy+0x74>)
   20e26:	f003 ffa7 	bl	24d78 <z_impl_k_sem_take>
	while (len) {
   20e2a:	e7e6      	b.n	20dfa <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   20e2c:	1ba4      	subs	r4, r4, r6
   20e2e:	b2a4      	uxth	r4, r4
		buf += bytes;
   20e30:	4435      	add	r5, r6
   20e32:	e7d5      	b.n	20de0 <entropy_nrf5_get_entropy+0x14>
   20e34:	200035d4 	.word	0x200035d4
   20e38:	00033872 	.word	0x00033872
   20e3c:	0003013d 	.word	0x0003013d
   20e40:	200035ec 	.word	0x200035ec

00020e44 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   20e44:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20e46:	4b20      	ldr	r3, [pc, #128]	; (20ec8 <entropy_nrf5_init+0x84>)
   20e48:	6904      	ldr	r4, [r0, #16]
   20e4a:	429c      	cmp	r4, r3
   20e4c:	d00a      	beq.n	20e64 <entropy_nrf5_init+0x20>
   20e4e:	491f      	ldr	r1, [pc, #124]	; (20ecc <entropy_nrf5_init+0x88>)
   20e50:	481f      	ldr	r0, [pc, #124]	; (20ed0 <entropy_nrf5_init+0x8c>)
   20e52:	f240 124b 	movw	r2, #331	; 0x14b
   20e56:	f009 fe79 	bl	2ab4c <assert_print>
   20e5a:	481c      	ldr	r0, [pc, #112]	; (20ecc <entropy_nrf5_init+0x88>)
   20e5c:	f240 114b 	movw	r1, #331	; 0x14b
   20e60:	f009 fe6d 	bl	2ab3e <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20e64:	2201      	movs	r2, #1
   20e66:	4611      	mov	r1, r2
   20e68:	4620      	mov	r0, r4
   20e6a:	f00d feb3 	bl	2ebd4 <z_impl_k_sem_init>
   20e6e:	2201      	movs	r2, #1
   20e70:	2100      	movs	r1, #0
   20e72:	f104 0018 	add.w	r0, r4, #24
   20e76:	f00d fead 	bl	2ebd4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   20e7a:	f240 4307 	movw	r3, #1031	; 0x407
   20e7e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   20e82:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20e86:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   20e88:	230c      	movs	r3, #12
   20e8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   20e8e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   20e90:	4b10      	ldr	r3, [pc, #64]	; (20ed4 <entropy_nrf5_init+0x90>)
   20e92:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   20e96:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   20e9a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   20e9e:	f022 0201 	bic.w	r2, r2, #1
   20ea2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   20ea6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20ea8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   20eac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20eb0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   20eb4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20eb6:	6019      	str	r1, [r3, #0]
   20eb8:	200d      	movs	r0, #13
   20eba:	f7f3 fee9 	bl	14c90 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   20ebe:	200d      	movs	r0, #13
   20ec0:	f7f3 feb6 	bl	14c30 <arch_irq_enable>

	return 0;
}
   20ec4:	4628      	mov	r0, r5
   20ec6:	bd38      	pop	{r3, r4, r5, pc}
   20ec8:	200035d4 	.word	0x200035d4
   20ecc:	00033872 	.word	0x00033872
   20ed0:	0003013d 	.word	0x0003013d
   20ed4:	4000d000 	.word	0x4000d000

00020ed8 <isr>:
{
   20ed8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   20eda:	f7ff fea9 	bl	20c30 <random_byte_get>
	if (byte < 0) {
   20ede:	2800      	cmp	r0, #0
   20ee0:	db20      	blt.n	20f24 <isr+0x4c>
	uint8_t last  = rngp->last;
   20ee2:	4b17      	ldr	r3, [pc, #92]	; (20f40 <isr+0x68>)
   20ee4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   20ee8:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   20eec:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   20ef0:	1b14      	subs	r4, r2, r4
   20ef2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   20ef6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   20ef8:	d10d      	bne.n	20f16 <isr+0x3e>
	uint8_t last  = rngp->last;
   20efa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   20efe:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   20f02:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   20f06:	1b14      	subs	r4, r2, r4
   20f08:	ea31 0404 	bics.w	r4, r1, r4
   20f0c:	d10b      	bne.n	20f26 <isr+0x4e>
   20f0e:	4b0d      	ldr	r3, [pc, #52]	; (20f44 <isr+0x6c>)
   20f10:	2201      	movs	r2, #1
   20f12:	605a      	str	r2, [r3, #4]
}
   20f14:	e00e      	b.n	20f34 <isr+0x5c>
	rngp->buffer[last] = byte;
   20f16:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   20f18:	3201      	adds	r2, #1
   20f1a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   20f1c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20f20:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   20f24:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   20f26:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   20f28:	3201      	adds	r2, #1
   20f2a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   20f2c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   20f30:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   20f34:	4804      	ldr	r0, [pc, #16]	; (20f48 <isr+0x70>)
}
   20f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f3a:	f003 bee3 	b.w	24d04 <z_impl_k_sem_give>
   20f3e:	bf00      	nop
   20f40:	200035d4 	.word	0x200035d4
   20f44:	4000d000 	.word	0x4000d000
   20f48:	200035ec 	.word	0x200035ec

00020f4c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   20f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20f4e:	460f      	mov	r7, r1
   20f50:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   20f52:	b940      	cbnz	r0, 20f66 <entropy_cc3xx_rng_get_entropy+0x1a>
   20f54:	4917      	ldr	r1, [pc, #92]	; (20fb4 <entropy_cc3xx_rng_get_entropy+0x68>)
   20f56:	4818      	ldr	r0, [pc, #96]	; (20fb8 <entropy_cc3xx_rng_get_entropy+0x6c>)
   20f58:	2218      	movs	r2, #24
   20f5a:	f009 fdf7 	bl	2ab4c <assert_print>
   20f5e:	2118      	movs	r1, #24
	__ASSERT_NO_MSG(buffer != NULL);
   20f60:	4814      	ldr	r0, [pc, #80]	; (20fb4 <entropy_cc3xx_rng_get_entropy+0x68>)
   20f62:	f009 fdec 	bl	2ab3e <assert_post_action>
   20f66:	b9e1      	cbnz	r1, 20fa2 <entropy_cc3xx_rng_get_entropy+0x56>
   20f68:	4912      	ldr	r1, [pc, #72]	; (20fb4 <entropy_cc3xx_rng_get_entropy+0x68>)
   20f6a:	4813      	ldr	r0, [pc, #76]	; (20fb8 <entropy_cc3xx_rng_get_entropy+0x6c>)
   20f6c:	2219      	movs	r2, #25
   20f6e:	f009 fded 	bl	2ab4c <assert_print>
   20f72:	2119      	movs	r1, #25
   20f74:	e7f4      	b.n	20f60 <entropy_cc3xx_rng_get_entropy+0x14>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   20f76:	1b33      	subs	r3, r6, r4
   20f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   20f7c:	bf38      	it	cc
   20f7e:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   20f80:	462a      	mov	r2, r5
   20f82:	ab01      	add	r3, sp, #4
   20f84:	1939      	adds	r1, r7, r4
   20f86:	2000      	movs	r0, #0
   20f88:	f006 feca 	bl	27d20 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   20f8c:	b968      	cbnz	r0, 20faa <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   20f8e:	9b01      	ldr	r3, [sp, #4]
   20f90:	429d      	cmp	r5, r3
   20f92:	d10a      	bne.n	20faa <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		offset += chunk_size;
   20f94:	442c      	add	r4, r5
	while (offset < length) {
   20f96:	42a6      	cmp	r6, r4
   20f98:	d8ed      	bhi.n	20f76 <entropy_cc3xx_rng_get_entropy+0x2a>
	}

	if (offset == length) {
   20f9a:	d009      	beq.n	20fb0 <entropy_cc3xx_rng_get_entropy+0x64>
	int err = EINVAL;
   20f9c:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   20f9e:	b003      	add	sp, #12
   20fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   20fa2:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   20fa6:	2400      	movs	r4, #0
   20fa8:	e7f5      	b.n	20f96 <entropy_cc3xx_rng_get_entropy+0x4a>
			return -EINVAL;
   20faa:	f06f 0015 	mvn.w	r0, #21
   20fae:	e7f6      	b.n	20f9e <entropy_cc3xx_rng_get_entropy+0x52>
		err = 0;
   20fb0:	2000      	movs	r0, #0
   20fb2:	e7f4      	b.n	20f9e <entropy_cc3xx_rng_get_entropy+0x52>
   20fb4:	000338c3 	.word	0x000338c3
   20fb8:	0003013d 	.word	0x0003013d

00020fbc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   20fbc:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   20fbe:	490e      	ldr	r1, [pc, #56]	; (20ff8 <sys_clock_timeout_handler+0x3c>)
   20fc0:	e9d1 3400 	ldrd	r3, r4, [r1]
   20fc4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   20fc6:	18c3      	adds	r3, r0, r3
   20fc8:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   20fcc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   20fd0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   20fd4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   20fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   20fdc:	d209      	bcs.n	20ff2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   20fde:	4b07      	ldr	r3, [pc, #28]	; (20ffc <sys_clock_timeout_handler+0x40>)
   20fe0:	681b      	ldr	r3, [r3, #0]
   20fe2:	0a1a      	lsrs	r2, r3, #8
   20fe4:	061b      	lsls	r3, r3, #24
   20fe6:	199c      	adds	r4, r3, r6
   20fe8:	4b05      	ldr	r3, [pc, #20]	; (21000 <sys_clock_timeout_handler+0x44>)
   20fea:	f142 0500 	adc.w	r5, r2, #0
   20fee:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   20ff2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   20ff4:	f005 be04 	b.w	26c00 <sys_clock_announce>
   20ff8:	200021e8 	.word	0x200021e8
   20ffc:	20003630 	.word	0x20003630
   21000:	200021f0 	.word	0x200021f0

00021004 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21004:	4b0d      	ldr	r3, [pc, #52]	; (2103c <z_nrf_rtc_timer_read+0x38>)
   21006:	6818      	ldr	r0, [r3, #0]
   21008:	0a01      	lsrs	r1, r0, #8
   2100a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2100c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   21010:	4b0b      	ldr	r3, [pc, #44]	; (21040 <z_nrf_rtc_timer_read+0x3c>)
   21012:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   21016:	1818      	adds	r0, r3, r0
   21018:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2101c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   21020:	d20a      	bcs.n	21038 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   21022:	4b08      	ldr	r3, [pc, #32]	; (21044 <z_nrf_rtc_timer_read+0x40>)
   21024:	e9d3 2300 	ldrd	r2, r3, [r3]
   21028:	4290      	cmp	r0, r2
   2102a:	eb71 0303 	sbcs.w	r3, r1, r3
   2102e:	d203      	bcs.n	21038 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   21030:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21034:	f141 0100 	adc.w	r1, r1, #0
}
   21038:	4770      	bx	lr
   2103a:	bf00      	nop
   2103c:	20003630 	.word	0x20003630
   21040:	40011000 	.word	0x40011000
   21044:	200021f0 	.word	0x200021f0

00021048 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   21048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   2104c:	4c2b      	ldr	r4, [pc, #172]	; (210fc <rtc_nrf_isr+0xb4>)
   2104e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   21052:	0799      	lsls	r1, r3, #30
   21054:	d50b      	bpl.n	2106e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21056:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   2105a:	b143      	cbz	r3, 2106e <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   2105c:	4a28      	ldr	r2, [pc, #160]	; (21100 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2105e:	2300      	movs	r3, #0
   21060:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   21064:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   21068:	6813      	ldr	r3, [r2, #0]
   2106a:	3301      	adds	r3, #1
   2106c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2106e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21072:	03da      	lsls	r2, r3, #15
   21074:	d523      	bpl.n	210be <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21076:	f3bf 8f5b 	dmb	ish
   2107a:	4b22      	ldr	r3, [pc, #136]	; (21104 <rtc_nrf_isr+0xbc>)
   2107c:	e853 2f00 	ldrex	r2, [r3]
   21080:	f022 0101 	bic.w	r1, r2, #1
   21084:	e843 1000 	strex	r0, r1, [r3]
   21088:	2800      	cmp	r0, #0
   2108a:	d1f7      	bne.n	2107c <rtc_nrf_isr+0x34>
   2108c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   21090:	07d3      	lsls	r3, r2, #31
   21092:	d402      	bmi.n	2109a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21094:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   21098:	b18b      	cbz	r3, 210be <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2109a:	2500      	movs	r5, #0
   2109c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   210a0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   210a4:	f7ff ffae 	bl	21004 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   210a8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   210ac:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   210ae:	4b16      	ldr	r3, [pc, #88]	; (21108 <rtc_nrf_isr+0xc0>)
   210b0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   210b4:	42b0      	cmp	r0, r6
   210b6:	41b9      	sbcs	r1, r7
   210b8:	d204      	bcs.n	210c4 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   210ba:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   210be:	b003      	add	sp, #12
   210c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   210c4:	f04f 38ff 	mov.w	r8, #4294967295
   210c8:	f04f 39ff 	mov.w	r9, #4294967295
   210cc:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   210d0:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   210d4:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   210d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   210da:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   210de:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   210e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   210e6:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   210ea:	2900      	cmp	r1, #0
   210ec:	d0e7      	beq.n	210be <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   210ee:	9000      	str	r0, [sp, #0]
   210f0:	4632      	mov	r2, r6
   210f2:	463b      	mov	r3, r7
   210f4:	4628      	mov	r0, r5
   210f6:	4788      	blx	r1
   210f8:	e7e1      	b.n	210be <rtc_nrf_isr+0x76>
   210fa:	bf00      	nop
   210fc:	40011000 	.word	0x40011000
   21100:	20003630 	.word	0x20003630
   21104:	20003628 	.word	0x20003628
   21108:	200021d8 	.word	0x200021d8

0002110c <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   2110c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21110:	4d4b      	ldr	r5, [pc, #300]	; (21240 <compare_set.constprop.0.isra.0+0x134>)
   21112:	f3bf 8f5b 	dmb	ish
   21116:	4606      	mov	r6, r0
   21118:	460f      	mov	r7, r1
   2111a:	e855 8f00 	ldrex	r8, [r5]
   2111e:	f028 0301 	bic.w	r3, r8, #1
   21122:	e845 3200 	strex	r2, r3, [r5]
   21126:	2a00      	cmp	r2, #0
   21128:	d1f7      	bne.n	2111a <compare_set.constprop.0.isra.0+0xe>
   2112a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   2112e:	4c45      	ldr	r4, [pc, #276]	; (21244 <compare_set.constprop.0.isra.0+0x138>)
   21130:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   21134:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   21138:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2113c:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21140:	f7ff ff60 	bl	21004 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   21144:	42b0      	cmp	r0, r6
   21146:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   2114a:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   2114e:	d240      	bcs.n	211d2 <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   21150:	4b3d      	ldr	r3, [pc, #244]	; (21248 <compare_set.constprop.0.isra.0+0x13c>)
   21152:	1a30      	subs	r0, r6, r0
   21154:	eb67 0101 	sbc.w	r1, r7, r1
   21158:	4298      	cmp	r0, r3
   2115a:	f171 0100 	sbcs.w	r1, r1, #0
   2115e:	d24c      	bcs.n	211fa <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   21160:	4b3a      	ldr	r3, [pc, #232]	; (2124c <compare_set.constprop.0.isra.0+0x140>)
   21162:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21166:	429f      	cmp	r7, r3
   21168:	bf08      	it	eq
   2116a:	4296      	cmpeq	r6, r2
   2116c:	d03e      	beq.n	211ec <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2116e:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   21172:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21176:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   2117a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   2117e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   21182:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 21250 <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
   21186:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   21188:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   2118a:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2118e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21192:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   21196:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   2119a:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   2119e:	ebae 0302 	sub.w	r3, lr, r2
   211a2:	445b      	add	r3, fp
   211a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   211a8:	4553      	cmp	r3, sl
   211aa:	d91f      	bls.n	211ec <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   211ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   211b0:	b15b      	cbz	r3, 211ca <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   211b2:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   211b6:	1a13      	subs	r3, r2, r0
   211b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   211bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   211c0:	d914      	bls.n	211ec <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   211c2:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   211c6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   211ca:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   211ce:	3101      	adds	r1, #1
	for (;;) {
   211d0:	e7dd      	b.n	2118e <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   211d2:	4b20      	ldr	r3, [pc, #128]	; (21254 <compare_set.constprop.0.isra.0+0x148>)
   211d4:	f3bf 8f5b 	dmb	ish
   211d8:	e853 1f00 	ldrex	r1, [r3]
   211dc:	f041 0101 	orr.w	r1, r1, #1
   211e0:	e843 1200 	strex	r2, r1, [r3]
   211e4:	2a00      	cmp	r2, #0
   211e6:	d1f7      	bne.n	211d8 <compare_set.constprop.0.isra.0+0xcc>
   211e8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   211ec:	4b17      	ldr	r3, [pc, #92]	; (2124c <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   211ee:	4a1a      	ldr	r2, [pc, #104]	; (21258 <compare_set.constprop.0.isra.0+0x14c>)
   211f0:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   211f2:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   211f6:	2200      	movs	r2, #0
   211f8:	605a      	str	r2, [r3, #4]
	if (key) {
   211fa:	f1b8 0f00 	cmp.w	r8, #0
   211fe:	d01c      	beq.n	2123a <compare_set.constprop.0.isra.0+0x12e>
   21200:	f3bf 8f5b 	dmb	ish
   21204:	e855 3f00 	ldrex	r3, [r5]
   21208:	f043 0301 	orr.w	r3, r3, #1
   2120c:	e845 3200 	strex	r2, r3, [r5]
   21210:	2a00      	cmp	r2, #0
   21212:	d1f7      	bne.n	21204 <compare_set.constprop.0.isra.0+0xf8>
   21214:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   21218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2121c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21220:	4b0c      	ldr	r3, [pc, #48]	; (21254 <compare_set.constprop.0.isra.0+0x148>)
   21222:	f3bf 8f5b 	dmb	ish
   21226:	681b      	ldr	r3, [r3, #0]
   21228:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2122c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2122e:	bf42      	ittt	mi
   21230:	4b0a      	ldrmi	r3, [pc, #40]	; (2125c <compare_set.constprop.0.isra.0+0x150>)
   21232:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   21236:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   2123a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2123e:	bf00      	nop
   21240:	2000362c 	.word	0x2000362c
   21244:	40011000 	.word	0x40011000
   21248:	00800001 	.word	0x00800001
   2124c:	200021d8 	.word	0x200021d8
   21250:	007ffffd 	.word	0x007ffffd
   21254:	20003628 	.word	0x20003628
   21258:	00020fbd 	.word	0x00020fbd
   2125c:	e000e100 	.word	0xe000e100

00021260 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21260:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21262:	4b16      	ldr	r3, [pc, #88]	; (212bc <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   21264:	4c16      	ldr	r4, [pc, #88]	; (212c0 <sys_clock_driver_init+0x60>)
   21266:	2500      	movs	r5, #0
   21268:	f04f 30ff 	mov.w	r0, #4294967295
   2126c:	f04f 31ff 	mov.w	r1, #4294967295
   21270:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   21274:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2127c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21280:	4b10      	ldr	r3, [pc, #64]	; (212c4 <sys_clock_driver_init+0x64>)
   21282:	2602      	movs	r6, #2
   21284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   21288:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2128c:	2101      	movs	r1, #1
   2128e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21292:	2011      	movs	r0, #17
   21294:	462a      	mov	r2, r5
   21296:	f7f3 fcfb 	bl	14c90 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2129a:	2011      	movs	r0, #17
   2129c:	f7f3 fcc8 	bl	14c30 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   212a0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   212a2:	4a09      	ldr	r2, [pc, #36]	; (212c8 <sys_clock_driver_init+0x68>)
   212a4:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   212a6:	2100      	movs	r1, #0
   212a8:	6023      	str	r3, [r4, #0]
   212aa:	4808      	ldr	r0, [pc, #32]	; (212cc <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   212ac:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   212ae:	f7ff ff2d 	bl	2110c <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   212b2:	4630      	mov	r0, r6
   212b4:	f7fe f8c4 	bl	1f440 <z_nrf_clock_control_lf_on>

	return 0;
}
   212b8:	4628      	mov	r0, r5
   212ba:	bd70      	pop	{r4, r5, r6, pc}
   212bc:	200021d8 	.word	0x200021d8
   212c0:	40011000 	.word	0x40011000
   212c4:	e000e100 	.word	0xe000e100
   212c8:	2000362c 	.word	0x2000362c
   212cc:	007fffff 	.word	0x007fffff

000212d0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   212d0:	1c43      	adds	r3, r0, #1
{
   212d2:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   212d4:	d01d      	beq.n	21312 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   212d6:	2801      	cmp	r0, #1
   212d8:	dd1d      	ble.n	21316 <sys_clock_set_timeout+0x46>
   212da:	4a10      	ldr	r2, [pc, #64]	; (2131c <sys_clock_set_timeout+0x4c>)
   212dc:	4b10      	ldr	r3, [pc, #64]	; (21320 <sys_clock_set_timeout+0x50>)
   212de:	4290      	cmp	r0, r2
   212e0:	bfd4      	ite	le
   212e2:	4604      	movle	r4, r0
   212e4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   212e6:	f7ff fe8d 	bl	21004 <z_nrf_rtc_timer_read>
   212ea:	4a0e      	ldr	r2, [pc, #56]	; (21324 <sys_clock_set_timeout+0x54>)
   212ec:	e9d2 3100 	ldrd	r3, r1, [r2]
   212f0:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   212f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   212f6:	4a0a      	ldr	r2, [pc, #40]	; (21320 <sys_clock_set_timeout+0x50>)
		cyc = 0;
   212f8:	bf28      	it	cs
   212fa:	2400      	movcs	r4, #0
	cyc += unannounced;
   212fc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   212fe:	4294      	cmp	r4, r2
   21300:	bf28      	it	cs
   21302:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   21304:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21306:	f141 0100 	adc.w	r1, r1, #0
}
   2130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2130e:	f7ff befd 	b.w	2110c <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   21312:	4c03      	ldr	r4, [pc, #12]	; (21320 <sys_clock_set_timeout+0x50>)
   21314:	e7e7      	b.n	212e6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   21316:	2401      	movs	r4, #1
   21318:	e7e5      	b.n	212e6 <sys_clock_set_timeout+0x16>
   2131a:	bf00      	nop
   2131c:	007ffffe 	.word	0x007ffffe
   21320:	007fffff 	.word	0x007fffff
   21324:	200021e8 	.word	0x200021e8

00021328 <sys_clock_elapsed>:
{
   21328:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2132a:	f7ff fe6b 	bl	21004 <z_nrf_rtc_timer_read>
   2132e:	4b02      	ldr	r3, [pc, #8]	; (21338 <sys_clock_elapsed+0x10>)
   21330:	681b      	ldr	r3, [r3, #0]
}
   21332:	1ac0      	subs	r0, r0, r3
   21334:	bd08      	pop	{r3, pc}
   21336:	bf00      	nop
   21338:	200021e8 	.word	0x200021e8

0002133c <nrf_gpio_pin_port_decode>:
{
   2133c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2133e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   21340:	095a      	lsrs	r2, r3, #5
   21342:	d00c      	beq.n	2135e <nrf_gpio_pin_port_decode+0x22>
   21344:	2a01      	cmp	r2, #1
   21346:	d013      	beq.n	21370 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21348:	490e      	ldr	r1, [pc, #56]	; (21384 <nrf_gpio_pin_port_decode+0x48>)
   2134a:	480f      	ldr	r0, [pc, #60]	; (21388 <nrf_gpio_pin_port_decode+0x4c>)
   2134c:	f240 2247 	movw	r2, #583	; 0x247
   21350:	f009 fbfc 	bl	2ab4c <assert_print>
   21354:	480b      	ldr	r0, [pc, #44]	; (21384 <nrf_gpio_pin_port_decode+0x48>)
   21356:	f240 2147 	movw	r1, #583	; 0x247
   2135a:	f009 fbf0 	bl	2ab3e <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   2135e:	f04f 32ff 	mov.w	r2, #4294967295
   21362:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21366:	07d9      	lsls	r1, r3, #31
   21368:	d5ee      	bpl.n	21348 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   2136a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   2136e:	e008      	b.n	21382 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   21370:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21374:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21378:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2137a:	07d2      	lsls	r2, r2, #31
   2137c:	d5e4      	bpl.n	21348 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   2137e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   21380:	4802      	ldr	r0, [pc, #8]	; (2138c <nrf_gpio_pin_port_decode+0x50>)
}
   21382:	bd08      	pop	{r3, pc}
   21384:	0003350a 	.word	0x0003350a
   21388:	0003013d 	.word	0x0003013d
   2138c:	50000300 	.word	0x50000300

00021390 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   21390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   21394:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   21398:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   2139c:	6906      	ldr	r6, [r0, #16]
{
   2139e:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   213a0:	d00a      	beq.n	213b8 <z_impl_gpio_pin_configure+0x28>
   213a2:	4935      	ldr	r1, [pc, #212]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   213a4:	4835      	ldr	r0, [pc, #212]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   213a6:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   213aa:	f009 fbcf 	bl	2ab4c <assert_print>
   213ae:	f44f 712d 	mov.w	r1, #692	; 0x2b4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   213b2:	4831      	ldr	r0, [pc, #196]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   213b4:	f009 fbc3 	bl	2ab3e <assert_post_action>
   213b8:	f002 0230 	and.w	r2, r2, #48	; 0x30
   213bc:	2a30      	cmp	r2, #48	; 0x30
   213be:	d108      	bne.n	213d2 <z_impl_gpio_pin_configure+0x42>
   213c0:	492d      	ldr	r1, [pc, #180]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   213c2:	482e      	ldr	r0, [pc, #184]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   213c4:	f240 22b7 	movw	r2, #695	; 0x2b7
   213c8:	f009 fbc0 	bl	2ab4c <assert_print>
   213cc:	f240 21b7 	movw	r1, #695	; 0x2b7
   213d0:	e7ef      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   213d2:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   213d6:	2a02      	cmp	r2, #2
   213d8:	d108      	bne.n	213ec <z_impl_gpio_pin_configure+0x5c>
   213da:	4927      	ldr	r1, [pc, #156]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   213dc:	4827      	ldr	r0, [pc, #156]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   213de:	f240 22bb 	movw	r2, #699	; 0x2bb
   213e2:	f009 fbb3 	bl	2ab4c <assert_print>
   213e6:	f240 21bb 	movw	r1, #699	; 0x2bb
   213ea:	e7e2      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   213ec:	f003 0206 	and.w	r2, r3, #6
   213f0:	2a04      	cmp	r2, #4
   213f2:	d108      	bne.n	21406 <z_impl_gpio_pin_configure+0x76>
   213f4:	4920      	ldr	r1, [pc, #128]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   213f6:	4821      	ldr	r0, [pc, #132]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   213f8:	f240 22bf 	movw	r2, #703	; 0x2bf
   213fc:	f009 fba6 	bl	2ab4c <assert_print>
   21400:	f240 21bf 	movw	r1, #703	; 0x2bf
   21404:	e7d5      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   21406:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   2140a:	d012      	beq.n	21432 <z_impl_gpio_pin_configure+0xa2>
   2140c:	039d      	lsls	r5, r3, #14
   2140e:	d408      	bmi.n	21422 <z_impl_gpio_pin_configure+0x92>
   21410:	4919      	ldr	r1, [pc, #100]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   21412:	481a      	ldr	r0, [pc, #104]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   21414:	f240 22c2 	movw	r2, #706	; 0x2c2
   21418:	f009 fb98 	bl	2ab4c <assert_print>
   2141c:	f240 21c2 	movw	r1, #706	; 0x2c2
   21420:	e7c7      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   21422:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   21426:	d014      	beq.n	21452 <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   21428:	4a15      	ldr	r2, [pc, #84]	; (21480 <z_impl_gpio_pin_configure+0xf0>)
   2142a:	439a      	bics	r2, r3
   2142c:	d101      	bne.n	21432 <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2142e:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   21432:	6824      	ldr	r4, [r4, #0]
   21434:	2501      	movs	r5, #1
   21436:	408d      	lsls	r5, r1
   21438:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2143a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2143e:	d111      	bne.n	21464 <z_impl_gpio_pin_configure+0xd4>
   21440:	490d      	ldr	r1, [pc, #52]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   21442:	480e      	ldr	r0, [pc, #56]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   21444:	f240 22d2 	movw	r2, #722	; 0x2d2
   21448:	f009 fb80 	bl	2ab4c <assert_print>
   2144c:	f240 21d2 	movw	r1, #722	; 0x2d2
   21450:	e7af      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   21452:	4909      	ldr	r1, [pc, #36]	; (21478 <z_impl_gpio_pin_configure+0xe8>)
   21454:	4809      	ldr	r0, [pc, #36]	; (2147c <z_impl_gpio_pin_configure+0xec>)
   21456:	f240 22c6 	movw	r2, #710	; 0x2c6
   2145a:	f009 fb77 	bl	2ab4c <assert_print>
   2145e:	f240 21c6 	movw	r1, #710	; 0x2c6
   21462:	e7a6      	b.n	213b2 <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21464:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   21466:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21468:	bf4c      	ite	mi
   2146a:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2146c:	43ac      	bicpl	r4, r5
   2146e:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   21470:	683b      	ldr	r3, [r7, #0]
}
   21472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   21476:	4718      	bx	r3
   21478:	00033903 	.word	0x00033903
   2147c:	0003013d 	.word	0x0003013d
   21480:	00100001 	.word	0x00100001

00021484 <z_impl_gpio_pin_interrupt_configure>:
{
   21484:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   21486:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   2148a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	__unused const struct gpio_driver_config *const cfg =
   2148e:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	const struct gpio_driver_data *const data =
   21492:	6905      	ldr	r5, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   21494:	d10a      	bne.n	214ac <z_impl_gpio_pin_interrupt_configure+0x28>
   21496:	4920      	ldr	r1, [pc, #128]	; (21518 <z_impl_gpio_pin_interrupt_configure+0x94>)
   21498:	4820      	ldr	r0, [pc, #128]	; (2151c <z_impl_gpio_pin_interrupt_configure+0x98>)
   2149a:	f240 2261 	movw	r2, #609	; 0x261
   2149e:	f009 fb55 	bl	2ab4c <assert_print>
   214a2:	f240 2161 	movw	r1, #609	; 0x261
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   214a6:	481c      	ldr	r0, [pc, #112]	; (21518 <z_impl_gpio_pin_interrupt_configure+0x94>)
   214a8:	f009 fb49 	bl	2ab3e <assert_post_action>
   214ac:	b943      	cbnz	r3, 214c0 <z_impl_gpio_pin_interrupt_configure+0x3c>
   214ae:	491a      	ldr	r1, [pc, #104]	; (21518 <z_impl_gpio_pin_interrupt_configure+0x94>)
   214b0:	481a      	ldr	r0, [pc, #104]	; (2151c <z_impl_gpio_pin_interrupt_configure+0x98>)
   214b2:	f240 2265 	movw	r2, #613	; 0x265
   214b6:	f009 fb49 	bl	2ab4c <assert_print>
   214ba:	f240 2165 	movw	r1, #613	; 0x265
   214be:	e7f2      	b.n	214a6 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   214c0:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   214c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   214c8:	d108      	bne.n	214dc <z_impl_gpio_pin_interrupt_configure+0x58>
   214ca:	4913      	ldr	r1, [pc, #76]	; (21518 <z_impl_gpio_pin_interrupt_configure+0x94>)
   214cc:	4813      	ldr	r0, [pc, #76]	; (2151c <z_impl_gpio_pin_interrupt_configure+0x98>)
   214ce:	f240 226f 	movw	r2, #623	; 0x26f
   214d2:	f009 fb3b 	bl	2ab4c <assert_print>
   214d6:	f240 216f 	movw	r1, #623	; 0x26f
   214da:	e7e4      	b.n	214a6 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   214dc:	6836      	ldr	r6, [r6, #0]
   214de:	2301      	movs	r3, #1
   214e0:	408b      	lsls	r3, r1
   214e2:	4233      	tst	r3, r6
   214e4:	d108      	bne.n	214f8 <z_impl_gpio_pin_interrupt_configure+0x74>
   214e6:	490c      	ldr	r1, [pc, #48]	; (21518 <z_impl_gpio_pin_interrupt_configure+0x94>)
   214e8:	480c      	ldr	r0, [pc, #48]	; (2151c <z_impl_gpio_pin_interrupt_configure+0x98>)
   214ea:	f44f 721d 	mov.w	r2, #628	; 0x274
   214ee:	f009 fb2d 	bl	2ab4c <assert_print>
   214f2:	f44f 711d 	mov.w	r1, #628	; 0x274
   214f6:	e7d6      	b.n	214a6 <z_impl_gpio_pin_interrupt_configure+0x22>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   214f8:	0216      	lsls	r6, r2, #8
   214fa:	d504      	bpl.n	21506 <z_impl_gpio_pin_interrupt_configure+0x82>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   214fc:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   214fe:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   21500:	bf18      	it	ne
   21502:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   21506:	69a4      	ldr	r4, [r4, #24]
   21508:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   2150c:	46a4      	mov	ip, r4
   2150e:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   21512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   21516:	4760      	bx	ip
   21518:	00033903 	.word	0x00033903
   2151c:	0003013d 	.word	0x0003013d

00021520 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   21520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   21524:	2400      	movs	r4, #0
   21526:	4e1c      	ldr	r6, [pc, #112]	; (21598 <get_buttons+0x78>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21528:	4625      	mov	r5, r4
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2152a:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   2152e:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   21530:	7937      	ldrb	r7, [r6, #4]
   21532:	6843      	ldr	r3, [r0, #4]
   21534:	681b      	ldr	r3, [r3, #0]
   21536:	fa08 f707 	lsl.w	r7, r8, r7
   2153a:	421f      	tst	r7, r3
   2153c:	d10a      	bne.n	21554 <get_buttons+0x34>
   2153e:	4917      	ldr	r1, [pc, #92]	; (2159c <get_buttons+0x7c>)
   21540:	4817      	ldr	r0, [pc, #92]	; (215a0 <get_buttons+0x80>)
   21542:	f240 42e4 	movw	r2, #1252	; 0x4e4
   21546:	f009 fb01 	bl	2ab4c <assert_print>
   2154a:	4814      	ldr	r0, [pc, #80]	; (2159c <get_buttons+0x7c>)
   2154c:	f240 41e4 	movw	r1, #1252	; 0x4e4
   21550:	f009 faf5 	bl	2ab3e <assert_post_action>
	const struct gpio_driver_data *const data =
   21554:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   21558:	6883      	ldr	r3, [r0, #8]
   2155a:	a901      	add	r1, sp, #4
   2155c:	685b      	ldr	r3, [r3, #4]
   2155e:	4798      	blx	r3
	if (ret == 0) {
   21560:	2800      	cmp	r0, #0
   21562:	d009      	beq.n	21578 <get_buttons+0x58>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   21564:	db0f      	blt.n	21586 <get_buttons+0x66>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   21566:	fa08 f305 	lsl.w	r3, r8, r5
   2156a:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2156c:	3501      	adds	r5, #1
   2156e:	2d04      	cmp	r5, #4
   21570:	f106 0608 	add.w	r6, r6, #8
   21574:	d1db      	bne.n	2152e <get_buttons+0xe>
   21576:	e00b      	b.n	21590 <get_buttons+0x70>
		*value ^= data->invert;
   21578:	f8d9 2000 	ldr.w	r2, [r9]
   2157c:	9b01      	ldr	r3, [sp, #4]
   2157e:	4053      	eors	r3, r2
		if (val) {
   21580:	423b      	tst	r3, r7
   21582:	d0f3      	beq.n	2156c <get_buttons+0x4c>
   21584:	e7ef      	b.n	21566 <get_buttons+0x46>
			LOG_ERR("Cannot read gpio pin");
   21586:	4807      	ldr	r0, [pc, #28]	; (215a4 <get_buttons+0x84>)
   21588:	2145      	movs	r1, #69	; 0x45
   2158a:	f009 faed 	bl	2ab68 <z_log_minimal_printk>
   2158e:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   21590:	4620      	mov	r0, r4
   21592:	b003      	add	sp, #12
   21594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21598:	0002fcd8 	.word	0x0002fcd8
   2159c:	00033903 	.word	0x00033903
   215a0:	0003013d 	.word	0x0003013d
   215a4:	00033934 	.word	0x00033934

000215a8 <callback_ctrl>:
{
   215a8:	b570      	push	{r4, r5, r6, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   215aa:	2800      	cmp	r0, #0
   215ac:	4c09      	ldr	r4, [pc, #36]	; (215d4 <callback_ctrl+0x2c>)
   215ae:	bf0c      	ite	eq
   215b0:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   215b4:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   215b8:	2500      	movs	r5, #0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   215ba:	6820      	ldr	r0, [r4, #0]
   215bc:	7921      	ldrb	r1, [r4, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   215be:	4632      	mov	r2, r6
   215c0:	3501      	adds	r5, #1
   215c2:	f7ff ff5f 	bl	21484 <z_impl_gpio_pin_interrupt_configure>
   215c6:	2d04      	cmp	r5, #4
   215c8:	d002      	beq.n	215d0 <callback_ctrl+0x28>
   215ca:	3408      	adds	r4, #8
   215cc:	2800      	cmp	r0, #0
   215ce:	d0f4      	beq.n	215ba <callback_ctrl+0x12>
}
   215d0:	bd70      	pop	{r4, r5, r6, pc}
   215d2:	bf00      	nop
   215d4:	0002fcd8 	.word	0x0002fcd8

000215d8 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   215d8:	b510      	push	{r4, lr}
   215da:	f04f 0340 	mov.w	r3, #64	; 0x40
   215de:	f3ef 8411 	mrs	r4, BASEPRI
   215e2:	f383 8812 	msr	BASEPRI_MAX, r3
   215e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   215ea:	481d      	ldr	r0, [pc, #116]	; (21660 <button_pressed+0x88>)
   215ec:	f003 f814 	bl	24618 <z_spin_lock_valid>
   215f0:	b940      	cbnz	r0, 21604 <button_pressed+0x2c>
   215f2:	491c      	ldr	r1, [pc, #112]	; (21664 <button_pressed+0x8c>)
   215f4:	481c      	ldr	r0, [pc, #112]	; (21668 <button_pressed+0x90>)
   215f6:	2294      	movs	r2, #148	; 0x94
   215f8:	f009 faa8 	bl	2ab4c <assert_print>
   215fc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   215fe:	4819      	ldr	r0, [pc, #100]	; (21664 <button_pressed+0x8c>)
   21600:	f009 fa9d 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   21604:	4816      	ldr	r0, [pc, #88]	; (21660 <button_pressed+0x88>)
   21606:	f003 f825 	bl	24654 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   2160a:	2000      	movs	r0, #0
   2160c:	f7ff ffcc 	bl	215a8 <callback_ctrl>

	if (err) {
   21610:	b118      	cbz	r0, 2161a <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   21612:	4816      	ldr	r0, [pc, #88]	; (2166c <button_pressed+0x94>)
   21614:	2145      	movs	r1, #69	; 0x45
   21616:	f009 faa7 	bl	2ab68 <z_log_minimal_printk>
	}

	switch (state) {
   2161a:	4b15      	ldr	r3, [pc, #84]	; (21670 <button_pressed+0x98>)
   2161c:	781a      	ldrb	r2, [r3, #0]
   2161e:	b9b2      	cbnz	r2, 2164e <button_pressed+0x76>
	case STATE_WAITING:
		state = STATE_SCANNING;
   21620:	2201      	movs	r2, #1
   21622:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   21624:	4813      	ldr	r0, [pc, #76]	; (21674 <button_pressed+0x9c>)
   21626:	2221      	movs	r2, #33	; 0x21
   21628:	2300      	movs	r3, #0
   2162a:	f003 fffb 	bl	25624 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2162e:	480c      	ldr	r0, [pc, #48]	; (21660 <button_pressed+0x88>)
   21630:	f003 f800 	bl	24634 <z_spin_unlock_valid>
   21634:	b930      	cbnz	r0, 21644 <button_pressed+0x6c>
   21636:	490b      	ldr	r1, [pc, #44]	; (21664 <button_pressed+0x8c>)
   21638:	480b      	ldr	r0, [pc, #44]	; (21668 <button_pressed+0x90>)
   2163a:	22c2      	movs	r2, #194	; 0xc2
   2163c:	f009 fa86 	bl	2ab4c <assert_print>
   21640:	21c2      	movs	r1, #194	; 0xc2
   21642:	e7dc      	b.n	215fe <button_pressed+0x26>
	__asm__ volatile(
   21644:	f384 8811 	msr	BASEPRI, r4
   21648:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   2164c:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   2164e:	490a      	ldr	r1, [pc, #40]	; (21678 <button_pressed+0xa0>)
   21650:	4805      	ldr	r0, [pc, #20]	; (21668 <button_pressed+0x90>)
   21652:	22ba      	movs	r2, #186	; 0xba
   21654:	f009 fa7a 	bl	2ab4c <assert_print>
   21658:	4807      	ldr	r0, [pc, #28]	; (21678 <button_pressed+0xa0>)
   2165a:	21ba      	movs	r1, #186	; 0xba
   2165c:	e7d0      	b.n	21600 <button_pressed+0x28>
   2165e:	bf00      	nop
   21660:	20003658 	.word	0x20003658
   21664:	00030879 	.word	0x00030879
   21668:	0003013d 	.word	0x0003013d
   2166c:	0003394e 	.word	0x0003394e
   21670:	20004437 	.word	0x20004437
   21674:	200021f8 	.word	0x200021f8
   21678:	0003396c 	.word	0x0003396c

0002167c <buttons_scan_fn>:
{
   2167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   21680:	f7ff ff4e 	bl	21520 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21684:	f3bf 8f5b 	dmb	ish
   21688:	4b3b      	ldr	r3, [pc, #236]	; (21778 <buttons_scan_fn+0xfc>)
   2168a:	4604      	mov	r4, r0
   2168c:	e853 2f00 	ldrex	r2, [r3]
   21690:	e843 4100 	strex	r1, r4, [r3]
   21694:	2900      	cmp	r1, #0
   21696:	d1f9      	bne.n	2168c <buttons_scan_fn+0x10>
   21698:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   2169c:	4b37      	ldr	r3, [pc, #220]	; (2177c <buttons_scan_fn+0x100>)
   2169e:	4f38      	ldr	r7, [pc, #224]	; (21780 <buttons_scan_fn+0x104>)
   216a0:	781a      	ldrb	r2, [r3, #0]
   216a2:	bb32      	cbnz	r2, 216f2 <buttons_scan_fn+0x76>
		if (button_scan != last_button_scan) {
   216a4:	683e      	ldr	r6, [r7, #0]
   216a6:	42a6      	cmp	r6, r4
   216a8:	d019      	beq.n	216de <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
   216aa:	4b36      	ldr	r3, [pc, #216]	; (21784 <buttons_scan_fn+0x108>)
   216ac:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   216ae:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   216b0:	b10b      	cbz	r3, 216b6 <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
   216b2:	4631      	mov	r1, r6
   216b4:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   216b6:	f04f 33ff 	mov.w	r3, #4294967295
   216ba:	4833      	ldr	r0, [pc, #204]	; (21788 <buttons_scan_fn+0x10c>)
   216bc:	f04f 32ff 	mov.w	r2, #4294967295
   216c0:	f003 f91a 	bl	248f8 <z_impl_k_mutex_lock>
	return list->head;
   216c4:	4b31      	ldr	r3, [pc, #196]	; (2178c <buttons_scan_fn+0x110>)
   216c6:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   216c8:	b135      	cbz	r5, 216d8 <buttons_scan_fn+0x5c>
   216ca:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   216cc:	4631      	mov	r1, r6
   216ce:	682b      	ldr	r3, [r5, #0]
   216d0:	4620      	mov	r0, r4
   216d2:	4798      	blx	r3
	return node->next;
   216d4:	686d      	ldr	r5, [r5, #4]
   216d6:	e7f7      	b.n	216c8 <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   216d8:	482b      	ldr	r0, [pc, #172]	; (21788 <buttons_scan_fn+0x10c>)
   216da:	f003 f9c3 	bl	24a64 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   216de:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   216e0:	b154      	cbz	r4, 216f8 <buttons_scan_fn+0x7c>
}
   216e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   216e6:	482a      	ldr	r0, [pc, #168]	; (21790 <buttons_scan_fn+0x114>)
   216e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   216ec:	2300      	movs	r3, #0
   216ee:	f003 bf99 	b.w	25624 <k_work_reschedule>
		initial_run = false;
   216f2:	2200      	movs	r2, #0
   216f4:	701a      	strb	r2, [r3, #0]
   216f6:	e7f2      	b.n	216de <buttons_scan_fn+0x62>
	__asm__ volatile(
   216f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   216fc:	f3ef 8511 	mrs	r5, BASEPRI
   21700:	f383 8812 	msr	BASEPRI_MAX, r3
   21704:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21708:	4822      	ldr	r0, [pc, #136]	; (21794 <buttons_scan_fn+0x118>)
   2170a:	f002 ff85 	bl	24618 <z_spin_lock_valid>
   2170e:	b940      	cbnz	r0, 21722 <buttons_scan_fn+0xa6>
   21710:	4921      	ldr	r1, [pc, #132]	; (21798 <buttons_scan_fn+0x11c>)
   21712:	4822      	ldr	r0, [pc, #136]	; (2179c <buttons_scan_fn+0x120>)
   21714:	2294      	movs	r2, #148	; 0x94
   21716:	f009 fa19 	bl	2ab4c <assert_print>
   2171a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2171c:	481e      	ldr	r0, [pc, #120]	; (21798 <buttons_scan_fn+0x11c>)
   2171e:	f009 fa0e 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   21722:	481c      	ldr	r0, [pc, #112]	; (21794 <buttons_scan_fn+0x118>)
   21724:	f002 ff96 	bl	24654 <z_spin_lock_set_owner>
		switch (state) {
   21728:	4b1d      	ldr	r3, [pc, #116]	; (217a0 <buttons_scan_fn+0x124>)
   2172a:	7818      	ldrb	r0, [r3, #0]
   2172c:	2801      	cmp	r0, #1
   2172e:	d119      	bne.n	21764 <buttons_scan_fn+0xe8>
			state = STATE_WAITING;
   21730:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   21732:	f7ff ff39 	bl	215a8 <callback_ctrl>
   21736:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21738:	4816      	ldr	r0, [pc, #88]	; (21794 <buttons_scan_fn+0x118>)
   2173a:	f002 ff7b 	bl	24634 <z_spin_unlock_valid>
   2173e:	b930      	cbnz	r0, 2174e <buttons_scan_fn+0xd2>
   21740:	4915      	ldr	r1, [pc, #84]	; (21798 <buttons_scan_fn+0x11c>)
   21742:	4816      	ldr	r0, [pc, #88]	; (2179c <buttons_scan_fn+0x120>)
   21744:	22c2      	movs	r2, #194	; 0xc2
   21746:	f009 fa01 	bl	2ab4c <assert_print>
   2174a:	21c2      	movs	r1, #194	; 0xc2
   2174c:	e7e6      	b.n	2171c <buttons_scan_fn+0xa0>
	__asm__ volatile(
   2174e:	f385 8811 	msr	BASEPRI, r5
   21752:	f3bf 8f6f 	isb	sy
		if (err) {
   21756:	b16c      	cbz	r4, 21774 <buttons_scan_fn+0xf8>
}
   21758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   2175c:	4811      	ldr	r0, [pc, #68]	; (217a4 <buttons_scan_fn+0x128>)
   2175e:	2145      	movs	r1, #69	; 0x45
   21760:	f009 ba02 	b.w	2ab68 <z_log_minimal_printk>
			__ASSERT_NO_MSG(false);
   21764:	4910      	ldr	r1, [pc, #64]	; (217a8 <buttons_scan_fn+0x12c>)
   21766:	480d      	ldr	r0, [pc, #52]	; (2179c <buttons_scan_fn+0x120>)
   21768:	228a      	movs	r2, #138	; 0x8a
   2176a:	f009 f9ef 	bl	2ab4c <assert_print>
   2176e:	480e      	ldr	r0, [pc, #56]	; (217a8 <buttons_scan_fn+0x12c>)
   21770:	218a      	movs	r1, #138	; 0x8a
   21772:	e7d4      	b.n	2171e <buttons_scan_fn+0xa2>
}
   21774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21778:	20003668 	.word	0x20003668
   2177c:	20000a35 	.word	0x20000a35
   21780:	20003638 	.word	0x20003638
   21784:	2000366c 	.word	0x2000366c
   21788:	2000363c 	.word	0x2000363c
   2178c:	20003650 	.word	0x20003650
   21790:	200021f8 	.word	0x200021f8
   21794:	20003658 	.word	0x20003658
   21798:	00030879 	.word	0x00030879
   2179c:	0003013d 	.word	0x0003013d
   217a0:	20004437 	.word	0x20004437
   217a4:	000339aa 	.word	0x000339aa
   217a8:	0003396c 	.word	0x0003396c

000217ac <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   217ac:	4b07      	ldr	r3, [pc, #28]	; (217cc <dk_read_buttons+0x20>)
   217ae:	f3bf 8f5b 	dmb	ish
   217b2:	681b      	ldr	r3, [r3, #0]
   217b4:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   217b8:	b100      	cbz	r0, 217bc <dk_read_buttons+0x10>
		*button_state = current_state;
   217ba:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   217bc:	4804      	ldr	r0, [pc, #16]	; (217d0 <dk_read_buttons+0x24>)
   217be:	b111      	cbz	r1, 217c6 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   217c0:	6802      	ldr	r2, [r0, #0]
   217c2:	405a      	eors	r2, r3
   217c4:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   217c6:	6003      	str	r3, [r0, #0]
}
   217c8:	4770      	bx	lr
   217ca:	bf00      	nop
   217cc:	20003668 	.word	0x20003668
   217d0:	20003634 	.word	0x20003634

000217d4 <dk_buttons_init>:
{
   217d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   217d8:	4b3c      	ldr	r3, [pc, #240]	; (218cc <dk_buttons_init+0xf8>)
   217da:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   217dc:	483c      	ldr	r0, [pc, #240]	; (218d0 <dk_buttons_init+0xfc>)
   217de:	4d3d      	ldr	r5, [pc, #244]	; (218d4 <dk_buttons_init+0x100>)
   217e0:	f00d f9c3 	bl	2eb6a <z_impl_k_mutex_init>
   217e4:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   217e6:	f04f 0800 	mov.w	r8, #0
   217ea:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   217ec:	88f2      	ldrh	r2, [r6, #6]
	return gpio_pin_configure(spec->port,
   217ee:	6830      	ldr	r0, [r6, #0]
				  spec->pin,
   217f0:	7931      	ldrb	r1, [r6, #4]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   217f2:	f012 0f01 	tst.w	r2, #1
   217f6:	bf14      	ite	ne
   217f8:	2310      	movne	r3, #16
   217fa:	2320      	moveq	r3, #32
	return gpio_pin_configure(spec->port,
   217fc:	431a      	orrs	r2, r3
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   217fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   21802:	f7ff fdc5 	bl	21390 <z_impl_gpio_pin_configure>
		if (err) {
   21806:	4604      	mov	r4, r0
   21808:	b130      	cbz	r0, 21818 <dk_buttons_init+0x44>
			LOG_ERR("Cannot configure button gpio");
   2180a:	4833      	ldr	r0, [pc, #204]	; (218d8 <dk_buttons_init+0x104>)
   2180c:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Cannot disable callbacks()");
   2180e:	f009 f9ab 	bl	2ab68 <z_log_minimal_printk>
}
   21812:	4620      	mov	r0, r4
   21814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21818:	f108 0801 	add.w	r8, r8, #1
   2181c:	f1b8 0f04 	cmp.w	r8, #4
   21820:	f106 0608 	add.w	r6, r6, #8
   21824:	d1e2      	bne.n	217ec <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
   21826:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21828:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   2182a:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2182e:	6828      	ldr	r0, [r5, #0]
   21830:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   21832:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21836:	f7ff fe25 	bl	21484 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2183a:	4604      	mov	r4, r0
   2183c:	b110      	cbz	r0, 21844 <dk_buttons_init+0x70>
			LOG_ERR("Cannot disable callbacks()");
   2183e:	4827      	ldr	r0, [pc, #156]	; (218dc <dk_buttons_init+0x108>)
   21840:	2145      	movs	r1, #69	; 0x45
   21842:	e7e4      	b.n	2180e <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   21844:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21846:	f108 0801 	add.w	r8, r8, #1
		pin_mask |= BIT(buttons[i].pin);
   2184a:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2184e:	f1b8 0f04 	cmp.w	r8, #4
		pin_mask |= BIT(buttons[i].pin);
   21852:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21856:	f105 0508 	add.w	r5, r5, #8
   2185a:	d1e8      	bne.n	2182e <dk_buttons_init+0x5a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2185c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 218e0 <dk_buttons_init+0x10c>
   21860:	4b20      	ldr	r3, [pc, #128]	; (218e4 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   21862:	e9c8 3601 	strd	r3, r6, [r8, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21866:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   21868:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2186c:	6883      	ldr	r3, [r0, #8]
   2186e:	69db      	ldr	r3, [r3, #28]
   21870:	b13b      	cbz	r3, 21882 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   21872:	2201      	movs	r2, #1
   21874:	4641      	mov	r1, r8
   21876:	4798      	blx	r3
		if (err) {
   21878:	4604      	mov	r4, r0
   2187a:	b128      	cbz	r0, 21888 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   2187c:	481a      	ldr	r0, [pc, #104]	; (218e8 <dk_buttons_init+0x114>)
   2187e:	2145      	movs	r1, #69	; 0x45
   21880:	e7c5      	b.n	2180e <dk_buttons_init+0x3a>
		return -ENOTSUP;
   21882:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21886:	e7f9      	b.n	2187c <dk_buttons_init+0xa8>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21888:	3501      	adds	r5, #1
   2188a:	2d04      	cmp	r5, #4
   2188c:	d1ec      	bne.n	21868 <dk_buttons_init+0x94>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   2188e:	4917      	ldr	r1, [pc, #92]	; (218ec <dk_buttons_init+0x118>)
   21890:	4817      	ldr	r0, [pc, #92]	; (218f0 <dk_buttons_init+0x11c>)
   21892:	f003 fddd 	bl	25450 <k_work_init_delayable>
	state = STATE_SCANNING;
   21896:	4b17      	ldr	r3, [pc, #92]	; (218f4 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   21898:	4815      	ldr	r0, [pc, #84]	; (218f0 <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   2189a:	2201      	movs	r2, #1
   2189c:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   2189e:	2300      	movs	r3, #0
   218a0:	2200      	movs	r2, #0
   218a2:	f003 fe5b 	bl	2555c <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   218a6:	4621      	mov	r1, r4
   218a8:	4620      	mov	r0, r4
   218aa:	f7ff ff7f 	bl	217ac <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   218ae:	f7ff fe37 	bl	21520 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   218b2:	f3bf 8f5b 	dmb	ish
   218b6:	4b10      	ldr	r3, [pc, #64]	; (218f8 <dk_buttons_init+0x124>)
   218b8:	e853 2f00 	ldrex	r2, [r3]
   218bc:	e843 0100 	strex	r1, r0, [r3]
   218c0:	2900      	cmp	r1, #0
   218c2:	d1f9      	bne.n	218b8 <dk_buttons_init+0xe4>
   218c4:	f3bf 8f5b 	dmb	ish
   218c8:	e7a3      	b.n	21812 <dk_buttons_init+0x3e>
   218ca:	bf00      	nop
   218cc:	2000366c 	.word	0x2000366c
   218d0:	2000363c 	.word	0x2000363c
   218d4:	0002fcd8 	.word	0x0002fcd8
   218d8:	000339c7 	.word	0x000339c7
   218dc:	000339e9 	.word	0x000339e9
   218e0:	2000365c 	.word	0x2000365c
   218e4:	000215d9 	.word	0x000215d9
   218e8:	00033a09 	.word	0x00033a09
   218ec:	0002167d 	.word	0x0002167d
   218f0:	200021f8 	.word	0x200021f8
   218f4:	20004437 	.word	0x20004437
   218f8:	20003668 	.word	0x20003668

000218fc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   218fc:	4602      	mov	r2, r0
   218fe:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   21900:	4801      	ldr	r0, [pc, #4]	; (21908 <multithreading_lock_acquire+0xc>)
   21902:	f002 bff9 	b.w	248f8 <z_impl_k_mutex_lock>
   21906:	bf00      	nop
   21908:	20000ad8 	.word	0x20000ad8

0002190c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   2190c:	4801      	ldr	r0, [pc, #4]	; (21914 <multithreading_lock_release+0x8>)
   2190e:	f003 b8a9 	b.w	24a64 <z_impl_k_mutex_unlock>
   21912:	bf00      	nop
   21914:	20000ad8 	.word	0x20000ad8

00021918 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21918:	4803      	ldr	r0, [pc, #12]	; (21928 <k_sys_fatal_error_handler+0x10>)
{
   2191a:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   2191c:	2145      	movs	r1, #69	; 0x45
   2191e:	f009 f923 	bl	2ab68 <z_log_minimal_printk>
		sys_arch_reboot(0);
   21922:	2000      	movs	r0, #0
   21924:	f7f3 fede 	bl	156e4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21928:	00033a36 	.word	0x00033a36

0002192c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   2192c:	b508      	push	{r3, lr}
   2192e:	4602      	mov	r2, r0
   21930:	460b      	mov	r3, r1
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   21932:	4805      	ldr	r0, [pc, #20]	; (21948 <sdc_assertion_handler+0x1c>)
   21934:	2145      	movs	r1, #69	; 0x45
   21936:	f009 f917 	bl	2ab68 <z_log_minimal_printk>
	k_oops();
   2193a:	4040      	eors	r0, r0
   2193c:	f380 8811 	msr	BASEPRI, r0
   21940:	f04f 0003 	mov.w	r0, #3
   21944:	df02      	svc	2
}
   21946:	bd08      	pop	{r3, pc}
   21948:	00033a58 	.word	0x00033a58

0002194c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   2194c:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   2194e:	4921      	ldr	r1, [pc, #132]	; (219d4 <hci_driver_open+0x88>)
   21950:	4821      	ldr	r0, [pc, #132]	; (219d8 <hci_driver_open+0x8c>)
{
   21952:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   21954:	f003 fc66 	bl	25224 <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   21958:	f000 fe96 	bl	22688 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   2195c:	a803      	add	r0, sp, #12
   2195e:	f7de ffa7 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21962:	4a1e      	ldr	r2, [pc, #120]	; (219dc <hci_driver_open+0x90>)
   21964:	481e      	ldr	r0, [pc, #120]	; (219e0 <hci_driver_open+0x94>)
   21966:	2149      	movs	r1, #73	; 0x49
   21968:	f009 f8fe 	bl	2ab68 <z_log_minimal_printk>
   2196c:	2214      	movs	r2, #20
   2196e:	a903      	add	r1, sp, #12
   21970:	2003      	movs	r0, #3
   21972:	f7f1 fbeb 	bl	1314c <z_log_minimal_hexdump_print>
   21976:	481b      	ldr	r0, [pc, #108]	; (219e4 <hci_driver_open+0x98>)
   21978:	f00d f89f 	bl	2eaba <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   2197c:	b940      	cbnz	r0, 21990 <hci_driver_open+0x44>
		LOG_ERR("Entropy source device not ready");
   2197e:	481a      	ldr	r0, [pc, #104]	; (219e8 <hci_driver_open+0x9c>)
   21980:	2145      	movs	r1, #69	; 0x45
   21982:	f009 f8f1 	bl	2ab68 <z_log_minimal_printk>
		return -ENODEV;
   21986:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   2198a:	4620      	mov	r0, r4
   2198c:	b008      	add	sp, #32
   2198e:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   21990:	4a16      	ldr	r2, [pc, #88]	; (219ec <hci_driver_open+0xa0>)
   21992:	ca07      	ldmia	r2, {r0, r1, r2}
   21994:	466b      	mov	r3, sp
   21996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2199a:	4618      	mov	r0, r3
   2199c:	f7df f91e 	bl	bdc <sdc_rand_source_register>
	if (err) {
   219a0:	4602      	mov	r2, r0
   219a2:	b130      	cbz	r0, 219b2 <hci_driver_open+0x66>
		LOG_ERR("Failed to register rand source (%d)", err);
   219a4:	4812      	ldr	r0, [pc, #72]	; (219f0 <hci_driver_open+0xa4>)
   219a6:	2145      	movs	r1, #69	; 0x45
   219a8:	f009 f8de 	bl	2ab68 <z_log_minimal_printk>
		return -EINVAL;
   219ac:	f06f 0415 	mvn.w	r4, #21
   219b0:	e7eb      	b.n	2198a <hci_driver_open+0x3e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   219b2:	f04f 30ff 	mov.w	r0, #4294967295
   219b6:	f04f 31ff 	mov.w	r1, #4294967295
   219ba:	f7ff ff9f 	bl	218fc <multithreading_lock_acquire>
	if (err) {
   219be:	4604      	mov	r4, r0
   219c0:	2800      	cmp	r0, #0
   219c2:	d1e2      	bne.n	2198a <hci_driver_open+0x3e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   219c4:	490b      	ldr	r1, [pc, #44]	; (219f4 <hci_driver_open+0xa8>)
   219c6:	480c      	ldr	r0, [pc, #48]	; (219f8 <hci_driver_open+0xac>)
   219c8:	f7de ffda 	bl	980 <sdc_enable>
	if (err) {
   219cc:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   219ce:	f7ff ff9d 	bl	2190c <multithreading_lock_release>
	return 0;
   219d2:	e7da      	b.n	2198a <hci_driver_open+0x3e>
   219d4:	0002e85d 	.word	0x0002e85d
   219d8:	20003670 	.word	0x20003670
   219dc:	00033a82 	.word	0x00033a82
   219e0:	00033aa9 	.word	0x00033aa9
   219e4:	0002f05c 	.word	0x0002f05c
   219e8:	00033ab1 	.word	0x00033ab1
   219ec:	0002f558 	.word	0x0002f558
   219f0:	00033ad6 	.word	0x00033ad6
   219f4:	20002228 	.word	0x20002228
   219f8:	00021b41 	.word	0x00021b41

000219fc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   219fc:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   219fe:	4829      	ldr	r0, [pc, #164]	; (21aa4 <hci_driver_init+0xa8>)
   21a00:	f7f5 f9ac 	bl	16d5c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   21a04:	4828      	ldr	r0, [pc, #160]	; (21aa8 <hci_driver_init+0xac>)
   21a06:	f7de ffe5 	bl	9d4 <sdc_init>
			err = sdc_support_central();
   21a0a:	f7df f85f 	bl	acc <sdc_support_central>
			if (err) {
   21a0e:	b118      	cbz	r0, 21a18 <hci_driver_init+0x1c>
			return -ENOTSUP;
   21a10:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   21a14:	b002      	add	sp, #8
   21a16:	bd10      	pop	{r4, pc}
			err = sdc_support_dle_central();
   21a18:	f7df f86a 	bl	af0 <sdc_support_dle_central>
			if (err) {
   21a1c:	2800      	cmp	r0, #0
   21a1e:	d1f7      	bne.n	21a10 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   21a20:	f7df f876 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   21a24:	2800      	cmp	r0, #0
   21a26:	d1f3      	bne.n	21a10 <hci_driver_init+0x14>
			err = sdc_support_phy_update_central();
   21a28:	f7df f882 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   21a2c:	4604      	mov	r4, r0
   21a2e:	2800      	cmp	r0, #0
   21a30:	d1ee      	bne.n	21a10 <hci_driver_init+0x14>
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   21a32:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a34:	aa01      	add	r2, sp, #4
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   21a36:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a3a:	f7de ff47 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21a3e:	2800      	cmp	r0, #0
   21a40:	dbe8      	blt.n	21a14 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   21a42:	4b1a      	ldr	r3, [pc, #104]	; (21aac <hci_driver_init+0xb0>)
   21a44:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a46:	aa01      	add	r2, sp, #4
   21a48:	2103      	movs	r1, #3
   21a4a:	4620      	mov	r0, r4
   21a4c:	f7de ff3e 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21a50:	2800      	cmp	r0, #0
   21a52:	dbdf      	blt.n	21a14 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   21a54:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a58:	aa01      	add	r2, sp, #4
   21a5a:	2104      	movs	r1, #4
   21a5c:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   21a5e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a60:	f7de ff34 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21a64:	2800      	cmp	r0, #0
   21a66:	dbd5      	blt.n	21a14 <hci_driver_init+0x18>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21a68:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a6a:	aa01      	add	r2, sp, #4
   21a6c:	2106      	movs	r1, #6
   21a6e:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21a70:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21a74:	f7de ff2a 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   21a78:	2800      	cmp	r0, #0
   21a7a:	dbcb      	blt.n	21a14 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   21a7c:	f240 6271 	movw	r2, #1649	; 0x671
   21a80:	4290      	cmp	r0, r2
   21a82:	dd0d      	ble.n	21aa0 <hci_driver_init+0xa4>
		LOG_ERR("Allocated memory too low: %u < %u",
   21a84:	4603      	mov	r3, r0
   21a86:	2145      	movs	r1, #69	; 0x45
   21a88:	4809      	ldr	r0, [pc, #36]	; (21ab0 <hci_driver_init+0xb4>)
   21a8a:	f009 f86d 	bl	2ab68 <z_log_minimal_printk>
		k_panic();
   21a8e:	4040      	eors	r0, r0
   21a90:	f380 8811 	msr	BASEPRI, r0
   21a94:	f04f 0004 	mov.w	r0, #4
   21a98:	df02      	svc	2
		return -ENOMEM;
   21a9a:	f06f 000b 	mvn.w	r0, #11
   21a9e:	e7b9      	b.n	21a14 <hci_driver_init+0x18>
	return 0;
   21aa0:	4620      	mov	r0, r4
	if (err) {
   21aa2:	e7b7      	b.n	21a14 <hci_driver_init+0x18>
   21aa4:	0002fcf8 	.word	0x0002fcf8
   21aa8:	0002192d 	.word	0x0002192d
   21aac:	02031b1b 	.word	0x02031b1b
   21ab0:	00033aff 	.word	0x00033aff

00021ab4 <rand_prio_low_vector_get_blocking>:
{
   21ab4:	b510      	push	{r4, lr}
   21ab6:	4603      	mov	r3, r0
   21ab8:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   21aba:	480d      	ldr	r0, [pc, #52]	; (21af0 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   21abc:	6881      	ldr	r1, [r0, #8]
   21abe:	680c      	ldr	r4, [r1, #0]
   21ac0:	b944      	cbnz	r4, 21ad4 <rand_prio_low_vector_get_blocking+0x20>
   21ac2:	490c      	ldr	r1, [pc, #48]	; (21af4 <rand_prio_low_vector_get_blocking+0x40>)
   21ac4:	480c      	ldr	r0, [pc, #48]	; (21af8 <rand_prio_low_vector_get_blocking+0x44>)
   21ac6:	224d      	movs	r2, #77	; 0x4d
   21ac8:	f009 f840 	bl	2ab4c <assert_print>
   21acc:	4809      	ldr	r0, [pc, #36]	; (21af4 <rand_prio_low_vector_get_blocking+0x40>)
   21ace:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   21ad0:	f009 f835 	bl	2ab3e <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   21ad4:	4619      	mov	r1, r3
   21ad6:	47a0      	blx	r4
   21ad8:	b148      	cbz	r0, 21aee <rand_prio_low_vector_get_blocking+0x3a>
   21ada:	4908      	ldr	r1, [pc, #32]	; (21afc <rand_prio_low_vector_get_blocking+0x48>)
   21adc:	4806      	ldr	r0, [pc, #24]	; (21af8 <rand_prio_low_vector_get_blocking+0x44>)
   21ade:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
   21ae2:	f009 f833 	bl	2ab4c <assert_print>
   21ae6:	4805      	ldr	r0, [pc, #20]	; (21afc <rand_prio_low_vector_get_blocking+0x48>)
   21ae8:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   21aec:	e7f0      	b.n	21ad0 <rand_prio_low_vector_get_blocking+0x1c>
}
   21aee:	bd10      	pop	{r4, pc}
   21af0:	0002f05c 	.word	0x0002f05c
   21af4:	00033b26 	.word	0x00033b26
   21af8:	0003013d 	.word	0x0003013d
   21afc:	00033b5a 	.word	0x00033b5a

00021b00 <rand_prio_low_vector_get>:
{
   21b00:	b538      	push	{r3, r4, r5, lr}
   21b02:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   21b04:	480b      	ldr	r0, [pc, #44]	; (21b34 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   21b06:	6883      	ldr	r3, [r0, #8]
   21b08:	685d      	ldr	r5, [r3, #4]
   21b0a:	460a      	mov	r2, r1
   21b0c:	b955      	cbnz	r5, 21b24 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   21b0e:	490a      	ldr	r1, [pc, #40]	; (21b38 <rand_prio_low_vector_get+0x38>)
   21b10:	480a      	ldr	r0, [pc, #40]	; (21b3c <rand_prio_low_vector_get+0x3c>)
   21b12:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   21b16:	f009 f819 	bl	2ab4c <assert_print>
   21b1a:	4807      	ldr	r0, [pc, #28]	; (21b38 <rand_prio_low_vector_get+0x38>)
   21b1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   21b20:	f009 f80d 	bl	2ab3e <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   21b24:	2300      	movs	r3, #0
   21b26:	4621      	mov	r1, r4
   21b28:	47a8      	blx	r5
   21b2a:	2800      	cmp	r0, #0
   21b2c:	dbef      	blt.n	21b0e <rand_prio_low_vector_get+0xe>
}
   21b2e:	b2c0      	uxtb	r0, r0
   21b30:	bd38      	pop	{r3, r4, r5, pc}
   21b32:	bf00      	nop
   21b34:	0002f05c 	.word	0x0002f05c
   21b38:	00033b5a 	.word	0x00033b5a
   21b3c:	0003013d 	.word	0x0003013d

00021b40 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   21b40:	4901      	ldr	r1, [pc, #4]	; (21b48 <receive_signal_raise+0x8>)
   21b42:	4802      	ldr	r0, [pc, #8]	; (21b4c <receive_signal_raise+0xc>)
   21b44:	f00d b8a9 	b.w	2ec9a <k_work_submit_to_queue>
   21b48:	20003670 	.word	0x20003670
   21b4c:	20002920 	.word	0x20002920

00021b50 <rand_prio_high_vector_get>:
{
   21b50:	b538      	push	{r3, r4, r5, lr}
   21b52:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   21b54:	480b      	ldr	r0, [pc, #44]	; (21b84 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   21b56:	6883      	ldr	r3, [r0, #8]
   21b58:	685d      	ldr	r5, [r3, #4]
   21b5a:	460a      	mov	r2, r1
   21b5c:	b955      	cbnz	r5, 21b74 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   21b5e:	490a      	ldr	r1, [pc, #40]	; (21b88 <rand_prio_high_vector_get+0x38>)
   21b60:	480a      	ldr	r0, [pc, #40]	; (21b8c <rand_prio_high_vector_get+0x3c>)
   21b62:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
   21b66:	f008 fff1 	bl	2ab4c <assert_print>
   21b6a:	4807      	ldr	r0, [pc, #28]	; (21b88 <rand_prio_high_vector_get+0x38>)
   21b6c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   21b70:	f008 ffe5 	bl	2ab3e <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   21b74:	2300      	movs	r3, #0
   21b76:	4621      	mov	r1, r4
   21b78:	47a8      	blx	r5
   21b7a:	2800      	cmp	r0, #0
   21b7c:	dbef      	blt.n	21b5e <rand_prio_high_vector_get+0xe>
}
   21b7e:	b2c0      	uxtb	r0, r0
   21b80:	bd38      	pop	{r3, r4, r5, pc}
   21b82:	bf00      	nop
   21b84:	0002f05c 	.word	0x0002f05c
   21b88:	00033b5a 	.word	0x00033b5a
   21b8c:	0003013d 	.word	0x0003013d

00021b90 <hci_driver_receive_process>:
{
   21b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21b92:	f04f 30ff 	mov.w	r0, #4294967295
   21b96:	f04f 31ff 	mov.w	r1, #4294967295
   21b9a:	f7ff feaf 	bl	218fc <multithreading_lock_acquire>
	if (!errcode) {
   21b9e:	2800      	cmp	r0, #0
   21ba0:	d155      	bne.n	21c4e <hci_driver_receive_process+0xbe>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   21ba2:	4d2c      	ldr	r5, [pc, #176]	; (21c54 <hci_driver_receive_process+0xc4>)
   21ba4:	f10d 0107 	add.w	r1, sp, #7
   21ba8:	4628      	mov	r0, r5
   21baa:	f000 fbfd 	bl	223a8 <hci_internal_msg_get>
   21bae:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   21bb0:	f7ff feac 	bl	2190c <multithreading_lock_release>
	if (errcode) {
   21bb4:	2c00      	cmp	r4, #0
   21bb6:	d14a      	bne.n	21c4e <hci_driver_receive_process+0xbe>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   21bb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21bbc:	2a04      	cmp	r2, #4
   21bbe:	d12b      	bne.n	21c18 <hci_driver_receive_process+0x88>
	switch (hdr->evt) {
   21bc0:	7828      	ldrb	r0, [r5, #0]
   21bc2:	283e      	cmp	r0, #62	; 0x3e
   21bc4:	d014      	beq.n	21bf0 <hci_driver_receive_process+0x60>
   21bc6:	28ff      	cmp	r0, #255	; 0xff
   21bc8:	d019      	beq.n	21bfe <hci_driver_receive_process+0x6e>
		switch (subevent) {
   21bca:	f04f 32ff 	mov.w	r2, #4294967295
   21bce:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   21bd2:	4621      	mov	r1, r4
   21bd4:	f7f3 ffc6 	bl	15b64 <bt_buf_get_evt>
	if (!evt_buf) {
   21bd8:	4606      	mov	r6, r0
   21bda:	b998      	cbnz	r0, 21c04 <hci_driver_receive_process+0x74>
		if (discardable) {
   21bdc:	b91c      	cbnz	r4, 21be6 <hci_driver_receive_process+0x56>
		LOG_ERR("No event buffer available");
   21bde:	481e      	ldr	r0, [pc, #120]	; (21c58 <hci_driver_receive_process+0xc8>)
   21be0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No data buffer available");
   21be2:	f008 ffc1 	bl	2ab68 <z_log_minimal_printk>
}
   21be6:	b002      	add	sp, #8
   21be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   21bec:	f7ff bfa8 	b.w	21b40 <receive_signal_raise>
		switch (me->subevent) {
   21bf0:	78ab      	ldrb	r3, [r5, #2]
   21bf2:	2b02      	cmp	r3, #2
		switch (subevent) {
   21bf4:	d1e9      	bne.n	21bca <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   21bf6:	2200      	movs	r2, #0
   21bf8:	2300      	movs	r3, #0
			return true;
   21bfa:	2401      	movs	r4, #1
   21bfc:	e7e9      	b.n	21bd2 <hci_driver_receive_process+0x42>
		switch (subevent) {
   21bfe:	78ab      	ldrb	r3, [r5, #2]
   21c00:	2b80      	cmp	r3, #128	; 0x80
   21c02:	e7f7      	b.n	21bf4 <hci_driver_receive_process+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   21c04:	786a      	ldrb	r2, [r5, #1]
   21c06:	4913      	ldr	r1, [pc, #76]	; (21c54 <hci_driver_receive_process+0xc4>)
   21c08:	3202      	adds	r2, #2
   21c0a:	300c      	adds	r0, #12
   21c0c:	f00c f98c 	bl	2df28 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   21c10:	4630      	mov	r0, r6
	bt_recv(data_buf);
   21c12:	f7f5 f87d 	bl	16d10 <bt_recv>
   21c16:	e7e6      	b.n	21be6 <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   21c18:	2a02      	cmp	r2, #2
   21c1a:	d113      	bne.n	21c44 <hci_driver_receive_process+0xb4>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   21c1c:	f04f 32ff 	mov.w	r2, #4294967295
   21c20:	f04f 33ff 	mov.w	r3, #4294967295
   21c24:	2003      	movs	r0, #3
   21c26:	f7f3 ff5f 	bl	15ae8 <bt_buf_get_rx>
	if (!data_buf) {
   21c2a:	4604      	mov	r4, r0
   21c2c:	b910      	cbnz	r0, 21c34 <hci_driver_receive_process+0xa4>
		LOG_ERR("No data buffer available");
   21c2e:	480b      	ldr	r0, [pc, #44]	; (21c5c <hci_driver_receive_process+0xcc>)
   21c30:	2145      	movs	r1, #69	; 0x45
   21c32:	e7d6      	b.n	21be2 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   21c34:	886a      	ldrh	r2, [r5, #2]
   21c36:	4629      	mov	r1, r5
   21c38:	3204      	adds	r2, #4
   21c3a:	300c      	adds	r0, #12
   21c3c:	f00c f974 	bl	2df28 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   21c40:	4620      	mov	r0, r4
   21c42:	e7e6      	b.n	21c12 <hci_driver_receive_process+0x82>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   21c44:	4806      	ldr	r0, [pc, #24]	; (21c60 <hci_driver_receive_process+0xd0>)
   21c46:	2145      	movs	r1, #69	; 0x45
   21c48:	f008 ff8e 	bl	2ab68 <z_log_minimal_printk>
   21c4c:	e7cb      	b.n	21be6 <hci_driver_receive_process+0x56>
}
   21c4e:	b002      	add	sp, #8
   21c50:	bd70      	pop	{r4, r5, r6, pc}
   21c52:	bf00      	nop
   21c54:	20004438 	.word	0x20004438
   21c58:	00033b93 	.word	0x00033b93
   21c5c:	00033bb2 	.word	0x00033bb2
   21c60:	00033bd0 	.word	0x00033bd0

00021c64 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   21c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   21c66:	4cb4      	ldr	r4, [pc, #720]	; (21f38 <hci_internal_cmd_put+0x2d4>)
   21c68:	7823      	ldrb	r3, [r4, #0]
{
   21c6a:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   21c6c:	2b00      	cmp	r3, #0
   21c6e:	f040 8396 	bne.w	2239e <hci_internal_cmd_put+0x73a>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   21c72:	2304      	movs	r3, #4
   21c74:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   21c78:	4bb0      	ldr	r3, [pc, #704]	; (21f3c <hci_internal_cmd_put+0x2d8>)
   21c7a:	8806      	ldrh	r6, [r0, #0]
   21c7c:	681f      	ldr	r7, [r3, #0]
   21c7e:	b1b7      	cbz	r7, 21cae <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   21c80:	f10d 0306 	add.w	r3, sp, #6
   21c84:	f10d 0207 	add.w	r2, sp, #7
   21c88:	1c61      	adds	r1, r4, #1
   21c8a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   21c8c:	2801      	cmp	r0, #1
   21c8e:	d00e      	beq.n	21cae <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   21c90:	f89d 3006 	ldrb.w	r3, [sp, #6]
   21c94:	2b00      	cmp	r3, #0
   21c96:	f040 8208 	bne.w	220aa <hci_internal_cmd_put+0x446>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   21c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   21c9e:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21ca0:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   21ca2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21ca4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   21ca6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21ca8:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   21caa:	71a0      	strb	r0, [r4, #6]
}
   21cac:	e206      	b.n	220bc <hci_internal_cmd_put+0x458>
		switch (BT_OGF(opcode)) {
   21cae:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   21cb2:	ea4f 2396 	mov.w	r3, r6, lsr #10
   21cb6:	d20f      	bcs.n	21cd8 <hci_internal_cmd_put+0x74>
   21cb8:	2b00      	cmp	r3, #0
   21cba:	d057      	beq.n	21d6c <hci_internal_cmd_put+0x108>
   21cbc:	3b01      	subs	r3, #1
   21cbe:	2b07      	cmp	r3, #7
   21cc0:	f200 8356 	bhi.w	22370 <hci_internal_cmd_put+0x70c>
   21cc4:	e8df f013 	tbh	[pc, r3, lsl #1]
   21cc8:	0354000d 	.word	0x0354000d
   21ccc:	0082003e 	.word	0x0082003e
   21cd0:	03540354 	.word	0x03540354
   21cd4:	013e0354 	.word	0x013e0354
   21cd8:	2b3f      	cmp	r3, #63	; 0x3f
   21cda:	f000 82a0 	beq.w	2221e <hci_internal_cmd_put+0x5ba>
	switch (opcode)	{
   21cde:	2001      	movs	r0, #1
   21ce0:	e2e0      	b.n	222a4 <hci_internal_cmd_put+0x640>
	return ((uint16_t)src[1] << 8) | src[0];
   21ce2:	4628      	mov	r0, r5
	switch (opcode)	{
   21ce4:	f240 4206 	movw	r2, #1030	; 0x406
   21ce8:	f930 3b03 	ldrsh.w	r3, [r0], #3
   21cec:	4293      	cmp	r3, r2
   21cee:	d00f      	beq.n	21d10 <hci_internal_cmd_put+0xac>
   21cf0:	f240 421d 	movw	r2, #1053	; 0x41d
   21cf4:	4293      	cmp	r3, r2
   21cf6:	d022      	beq.n	21d3e <hci_internal_cmd_put+0xda>
   21cf8:	2001      	movs	r0, #1
	switch (hci_opcode) {
   21cfa:	f240 4306 	movw	r3, #1030	; 0x406
   21cfe:	429e      	cmp	r6, r3
   21d00:	f000 81d3 	beq.w	220aa <hci_internal_cmd_put+0x446>
   21d04:	f240 431d 	movw	r3, #1053	; 0x41d
   21d08:	429e      	cmp	r6, r3
   21d0a:	f000 81ce 	beq.w	220aa <hci_internal_cmd_put+0x446>
   21d0e:	e042      	b.n	21d96 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   21d10:	f7eb fd3f 	bl	d792 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   21d14:	f242 0332 	movw	r3, #8242	; 0x2032
   21d18:	429e      	cmp	r6, r3
   21d1a:	f240 831f 	bls.w	2235c <hci_internal_cmd_put+0x6f8>
   21d1e:	f242 0385 	movw	r3, #8325	; 0x2085
   21d22:	429e      	cmp	r6, r3
   21d24:	d837      	bhi.n	21d96 <hci_internal_cmd_put+0x132>
   21d26:	f242 036c 	movw	r3, #8300	; 0x206c
   21d2a:	429e      	cmp	r6, r3
   21d2c:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   21d30:	f200 8320 	bhi.w	22374 <hci_internal_cmd_put+0x710>
   21d34:	3b03      	subs	r3, #3
   21d36:	b29b      	uxth	r3, r3
   21d38:	2b01      	cmp	r3, #1
   21d3a:	d82c      	bhi.n	21d96 <hci_internal_cmd_put+0x132>
   21d3c:	e1b5      	b.n	220aa <hci_internal_cmd_put+0x446>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   21d3e:	f7eb fd2a 	bl	d796 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   21d42:	e7e7      	b.n	21d14 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21d44:	4628      	mov	r0, r5
	switch (opcode)	{
   21d46:	f640 4263 	movw	r2, #3171	; 0xc63
   21d4a:	f930 3b03 	ldrsh.w	r3, [r0], #3
   21d4e:	4293      	cmp	r3, r2
   21d50:	d030      	beq.n	21db4 <hci_internal_cmd_put+0x150>
   21d52:	dc0d      	bgt.n	21d70 <hci_internal_cmd_put+0x10c>
   21d54:	f640 4203 	movw	r2, #3075	; 0xc03
   21d58:	4293      	cmp	r3, r2
   21d5a:	d01f      	beq.n	21d9c <hci_internal_cmd_put+0x138>
   21d5c:	f640 422d 	movw	r2, #3117	; 0xc2d
   21d60:	4293      	cmp	r3, r2
   21d62:	d01e      	beq.n	21da2 <hci_internal_cmd_put+0x13e>
   21d64:	f640 4201 	movw	r2, #3073	; 0xc01
   21d68:	4293      	cmp	r3, r2
   21d6a:	d012      	beq.n	21d92 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   21d6c:	2001      	movs	r0, #1
   21d6e:	e19c      	b.n	220aa <hci_internal_cmd_put+0x446>
	switch (opcode)	{
   21d70:	f640 427b 	movw	r2, #3195	; 0xc7b
   21d74:	4293      	cmp	r3, r2
   21d76:	d020      	beq.n	21dba <hci_internal_cmd_put+0x156>
   21d78:	f640 427c 	movw	r2, #3196	; 0xc7c
   21d7c:	4293      	cmp	r3, r2
   21d7e:	d1f5      	bne.n	21d6c <hci_internal_cmd_put+0x108>
		*param_length_out +=
   21d80:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   21d84:	496e      	ldr	r1, [pc, #440]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out +=
   21d86:	3302      	adds	r3, #2
   21d88:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   21d8c:	f7eb fbc9 	bl	d522 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   21d90:	e001      	b.n	21d96 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   21d92:	f7eb fbbc 	bl	d50e <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   21d96:	2801      	cmp	r0, #1
   21d98:	d0e8      	beq.n	21d6c <hci_internal_cmd_put+0x108>
   21d9a:	e77e      	b.n	21c9a <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   21d9c:	f7df f81e 	bl	ddc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   21da0:	e7f9      	b.n	21d96 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   21da2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   21da6:	4966      	ldr	r1, [pc, #408]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   21da8:	3303      	adds	r3, #3
   21daa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   21dae:	f7eb fbac 	bl	d50a <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   21db2:	e7f0      	b.n	21d96 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   21db4:	f7eb fbb0 	bl	d518 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   21db8:	e7ed      	b.n	21d96 <hci_internal_cmd_put+0x132>
		*param_length_out +=
   21dba:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   21dbe:	4960      	ldr	r1, [pc, #384]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out +=
   21dc0:	3304      	adds	r3, #4
   21dc2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   21dc6:	f7eb fb9e 	bl	d506 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   21dca:	e7e4      	b.n	21d96 <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   21dcc:	882b      	ldrh	r3, [r5, #0]
   21dce:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   21dd2:	3b01      	subs	r3, #1
   21dd4:	2b08      	cmp	r3, #8
   21dd6:	d8c9      	bhi.n	21d6c <hci_internal_cmd_put+0x108>
   21dd8:	a201      	add	r2, pc, #4	; (adr r2, 21de0 <hci_internal_cmd_put+0x17c>)
   21dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21dde:	bf00      	nop
   21de0:	00021e05 	.word	0x00021e05
   21de4:	00021e17 	.word	0x00021e17
   21de8:	00021f05 	.word	0x00021f05
   21dec:	00021d6d 	.word	0x00021d6d
   21df0:	00021d6d 	.word	0x00021d6d
   21df4:	00021d6d 	.word	0x00021d6d
   21df8:	00021d6d 	.word	0x00021d6d
   21dfc:	00021d6d 	.word	0x00021d6d
   21e00:	00021f27 	.word	0x00021f27
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   21e04:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   21e08:	484d      	ldr	r0, [pc, #308]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   21e0a:	3308      	adds	r3, #8
   21e0c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   21e10:	f7eb fc78 	bl	d704 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   21e14:	e7bf      	b.n	21d96 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   21e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21e1a:	4849      	ldr	r0, [pc, #292]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   21e1c:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21e1e:	2230      	movs	r2, #48	; 0x30
   21e20:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   21e22:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21e26:	f009 fe72 	bl	2bb0e <memset>
	cmds->hci_disconnect = 1;
   21e2a:	79e3      	ldrb	r3, [r4, #7]
   21e2c:	f043 0320 	orr.w	r3, r3, #32
   21e30:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   21e32:	7a63      	ldrb	r3, [r4, #9]
   21e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21e38:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   21e3a:	7b23      	ldrb	r3, [r4, #12]
   21e3c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21e40:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   21e42:	7c63      	ldrb	r3, [r4, #17]
   21e44:	f043 0304 	orr.w	r3, r3, #4
   21e48:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   21e4a:	7d63      	ldrb	r3, [r4, #21]
   21e4c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   21e50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   21e54:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   21e56:	7da3      	ldrb	r3, [r4, #22]
   21e58:	f043 0302 	orr.w	r3, r3, #2
   21e5c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   21e5e:	7f63      	ldrb	r3, [r4, #29]
   21e60:	f043 0304 	orr.w	r3, r3, #4
   21e64:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   21e66:	f894 3020 	ldrb.w	r3, [r4, #32]
   21e6a:	f023 0317 	bic.w	r3, r3, #23
   21e6e:	f043 0317 	orr.w	r3, r3, #23
   21e72:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   21e76:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   21e7a:	f063 0303 	orn	r3, r3, #3
   21e7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   21e82:	23ff      	movs	r3, #255	; 0xff
   21e84:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   21e88:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   21e8c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   21e90:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   21e94:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   21e98:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   21e9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   21ea0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21ea4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   21ea8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   21eac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21eb0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   21eb4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   21eb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   21ebc:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   21ec0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   21ec4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   21ec8:	f063 0301 	orn	r3, r3, #1
   21ecc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   21ed0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   21ed4:	f043 0301 	orr.w	r3, r3, #1
   21ed8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   21edc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   21ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21ee4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   21ee8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   21eec:	f043 0304 	orr.w	r3, r3, #4
   21ef0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   21ef4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   21ef8:	f043 0304 	orr.w	r3, r3, #4
   21efc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   21f00:	2000      	movs	r0, #0
   21f02:	e6ca      	b.n	21c9a <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   21f04:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21f08:	480d      	ldr	r0, [pc, #52]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   21f0a:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   21f0c:	2208      	movs	r2, #8
   21f0e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   21f10:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21f14:	f009 fdfb 	bl	2bb0e <memset>
	features->bdedr_not_supported = 1;
   21f18:	7ae3      	ldrb	r3, [r4, #11]
   21f1a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   21f1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   21f22:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   21f24:	e7ec      	b.n	21f00 <hci_internal_cmd_put+0x29c>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   21f26:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   21f2a:	4805      	ldr	r0, [pc, #20]	; (21f40 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   21f2c:	3306      	adds	r3, #6
   21f2e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   21f32:	f7eb fbe5 	bl	d700 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   21f36:	e72e      	b.n	21d96 <hci_internal_cmd_put+0x132>
   21f38:	20004481 	.word	0x20004481
   21f3c:	20003680 	.word	0x20003680
   21f40:	20004488 	.word	0x20004488
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21f44:	4628      	mov	r0, r5
	switch (opcode)	{
   21f46:	f830 3b03 	ldrh.w	r3, [r0], #3
   21f4a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   21f4e:	3b01      	subs	r3, #1
   21f50:	2b5d      	cmp	r3, #93	; 0x5d
   21f52:	d85f      	bhi.n	22014 <hci_internal_cmd_put+0x3b0>
   21f54:	e8df f013 	tbh	[pc, r3, lsl #1]
   21f58:	007e0076 	.word	0x007e0076
   21f5c:	005e0087 	.word	0x005e0087
   21f60:	005e00b7 	.word	0x005e00b7
   21f64:	005e005e 	.word	0x005e005e
   21f68:	005e005e 	.word	0x005e005e
   21f6c:	00bd00ba 	.word	0x00bd00ba
   21f70:	00c300c0 	.word	0x00c300c0
   21f74:	00cf00c6 	.word	0x00cf00c6
   21f78:	00d500d2 	.word	0x00d500d2
   21f7c:	00db00d8 	.word	0x00db00d8
   21f80:	00e700de 	.word	0x00e700de
   21f84:	00f300ea 	.word	0x00f300ea
   21f88:	005e00fc 	.word	0x005e00fc
   21f8c:	00ff005e 	.word	0x00ff005e
   21f90:	005e005e 	.word	0x005e005e
   21f94:	005e005e 	.word	0x005e005e
   21f98:	0109005e 	.word	0x0109005e
   21f9c:	011b0112 	.word	0x011b0112
   21fa0:	0121011e 	.word	0x0121011e
   21fa4:	012a0127 	.word	0x012a0127
   21fa8:	0130012d 	.word	0x0130012d
   21fac:	005e005e 	.word	0x005e005e
   21fb0:	013c0139 	.word	0x013c0139
   21fb4:	0148013f 	.word	0x0148013f
   21fb8:	01540151 	.word	0x01540151
   21fbc:	005e005e 	.word	0x005e005e
   21fc0:	005e005e 	.word	0x005e005e
   21fc4:	005e005e 	.word	0x005e005e
   21fc8:	005e005e 	.word	0x005e005e
   21fcc:	005e005e 	.word	0x005e005e
   21fd0:	005e005e 	.word	0x005e005e
   21fd4:	005e005e 	.word	0x005e005e
   21fd8:	005e005e 	.word	0x005e005e
   21fdc:	005e005e 	.word	0x005e005e
   21fe0:	005e005e 	.word	0x005e005e
   21fe4:	005e005e 	.word	0x005e005e
   21fe8:	005e005e 	.word	0x005e005e
   21fec:	005e0157 	.word	0x005e0157
   21ff0:	0160005e 	.word	0x0160005e
   21ff4:	005e005e 	.word	0x005e005e
   21ff8:	005e005e 	.word	0x005e005e
   21ffc:	005e005e 	.word	0x005e005e
   22000:	005e005e 	.word	0x005e005e
   22004:	005e005e 	.word	0x005e005e
   22008:	005e005e 	.word	0x005e005e
   2200c:	005e005e 	.word	0x005e005e
   22010:	0124005e 	.word	0x0124005e
	switch (hci_opcode) {
   22014:	f242 0332 	movw	r3, #8242	; 0x2032
   22018:	429e      	cmp	r6, r3
   2201a:	f43f aea7 	beq.w	21d6c <hci_internal_cmd_put+0x108>
   2201e:	f200 81b8 	bhi.w	22392 <hci_internal_cmd_put+0x72e>
   22022:	f242 0326 	movw	r3, #8230	; 0x2026
   22026:	429e      	cmp	r6, r3
   22028:	f63f aea0 	bhi.w	21d6c <hci_internal_cmd_put+0x108>
   2202c:	2001      	movs	r0, #1
   2202e:	f242 030c 	movw	r3, #8204	; 0x200c
   22032:	429e      	cmp	r6, r3
   22034:	f67f ae61 	bls.w	21cfa <hci_internal_cmd_put+0x96>
   22038:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   2203c:	3b0d      	subs	r3, #13
   2203e:	4aca      	ldr	r2, [pc, #808]	; (22368 <hci_internal_cmd_put+0x704>)
   22040:	b29b      	uxth	r3, r3
   22042:	e19a      	b.n	2237a <hci_internal_cmd_put+0x716>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   22044:	f7eb fb90 	bl	d768 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   22048:	f242 0332 	movw	r3, #8242	; 0x2032
   2204c:	429e      	cmp	r6, r3
   2204e:	f47f ae61 	bne.w	21d14 <hci_internal_cmd_put+0xb0>
   22052:	e02a      	b.n	220aa <hci_internal_cmd_put+0x446>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   22054:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   22058:	48c4      	ldr	r0, [pc, #784]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2205a:	3303      	adds	r3, #3
   2205c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   22060:	f7eb fb66 	bl	d730 <sdc_hci_cmd_le_read_buffer_size>
   22064:	e7f0      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   22066:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2206a:	48c0      	ldr	r0, [pc, #768]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2206c:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   2206e:	2208      	movs	r2, #8
   22070:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   22072:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   22076:	f009 fd4a 	bl	2bb0e <memset>
	features->params.le_encryption = 1;
   2207a:	79e3      	ldrb	r3, [r4, #7]
   2207c:	f063 0302 	orn	r3, r3, #2
   22080:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   22082:	7a23      	ldrb	r3, [r4, #8]
   22084:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   22088:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2208c:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   2208e:	f242 0332 	movw	r3, #8242	; 0x2032
   22092:	429e      	cmp	r6, r3
   22094:	d008      	beq.n	220a8 <hci_internal_cmd_put+0x444>
   22096:	f200 8176 	bhi.w	22386 <hci_internal_cmd_put+0x722>
   2209a:	f242 0326 	movw	r3, #8230	; 0x2026
   2209e:	429e      	cmp	r6, r3
   220a0:	f63f af2e 	bhi.w	21f00 <hci_internal_cmd_put+0x29c>
		return 0;
   220a4:	2000      	movs	r0, #0
   220a6:	e7c2      	b.n	2202e <hci_internal_cmd_put+0x3ca>
   220a8:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   220aa:	230f      	movs	r3, #15
   220ac:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   220ae:	2304      	movs	r3, #4
   220b0:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   220b2:	2301      	movs	r3, #1
	evt_data->status = status_code;
   220b4:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   220b6:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   220b8:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   220bc:	2301      	movs	r3, #1
   220be:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   220c0:	2000      	movs	r0, #0
}
   220c2:	b003      	add	sp, #12
   220c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   220c6:	f7eb fb5a 	bl	d77e <sdc_hci_cmd_le_set_random_address>
   220ca:	e7bd      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   220cc:	f7eb fb5d 	bl	d78a <sdc_hci_cmd_le_set_scan_params>
   220d0:	e7ba      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   220d2:	f7eb fb58 	bl	d786 <sdc_hci_cmd_le_set_scan_enable>
   220d6:	e7b7      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   220d8:	f7eb fb20 	bl	d71c <sdc_hci_cmd_le_create_conn>
   220dc:	e7b4      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_create_conn_cancel();
   220de:	f7eb fb1f 	bl	d720 <sdc_hci_cmd_le_create_conn_cancel>
   220e2:	e7b1      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   220e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   220e8:	48a0      	ldr	r0, [pc, #640]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   220ea:	3301      	adds	r3, #1
   220ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   220f0:	f7eb fb22 	bl	d738 <sdc_hci_cmd_le_read_filter_accept_list_size>
   220f4:	e7a8      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   220f6:	f7eb fb0b 	bl	d710 <sdc_hci_cmd_le_clear_filter_accept_list>
   220fa:	e7a5      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   220fc:	f7eb fb04 	bl	d708 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   22100:	e7a2      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   22102:	f7eb fb27 	bl	d754 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   22106:	e79f      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   22108:	f7eb fb06 	bl	d718 <sdc_hci_cmd_le_conn_update>
   2210c:	e79c      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2210e:	f7eb fb30 	bl	d772 <sdc_hci_cmd_le_set_host_channel_classification>
   22112:	e799      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   22114:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   22118:	4994      	ldr	r1, [pc, #592]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2211a:	3307      	adds	r3, #7
   2211c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   22120:	f7eb fb08 	bl	d734 <sdc_hci_cmd_le_read_channel_map>
   22124:	e790      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   22126:	f7eb fb0d 	bl	d744 <sdc_hci_cmd_le_read_remote_features>
   2212a:	e78d      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2212c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   22130:	498e      	ldr	r1, [pc, #568]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   22132:	3310      	adds	r3, #16
   22134:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   22138:	f7eb faf6 	bl	d728 <sdc_hci_cmd_le_encrypt>
   2213c:	e784      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2213e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   22142:	488a      	ldr	r0, [pc, #552]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   22144:	3308      	adds	r3, #8
   22146:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2214a:	f7eb faef 	bl	d72c <sdc_hci_cmd_le_rand>
   2214e:	e77b      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   22150:	f7eb fae8 	bl	d724 <sdc_hci_cmd_le_enable_encryption>
   22154:	e778      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   22156:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2215a:	3308      	adds	r3, #8
   2215c:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   22160:	2370      	movs	r3, #112	; 0x70
   22162:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   22164:	2340      	movs	r3, #64	; 0x40
   22166:	72e3      	strb	r3, [r4, #11]
   22168:	e791      	b.n	2208e <hci_internal_cmd_put+0x42a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2216a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2216e:	497f      	ldr	r1, [pc, #508]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   22170:	3302      	adds	r3, #2
   22172:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   22176:	f7eb faf3 	bl	d760 <sdc_hci_cmd_le_set_data_length>
   2217a:	e765      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out +=
   2217c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   22180:	487a      	ldr	r0, [pc, #488]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out +=
   22182:	3304      	adds	r3, #4
   22184:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   22188:	f7eb fae0 	bl	d74c <sdc_hci_cmd_le_read_suggested_default_data_length>
   2218c:	e75c      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2218e:	f7eb fafe 	bl	d78e <sdc_hci_cmd_le_write_suggested_default_data_length>
   22192:	e759      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_read_local_p256_public_key();
   22194:	f000 faa8 	bl	226e8 <hci_cmd_le_read_local_p256_public_key>
   22198:	e756      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   2219a:	f00c fb85 	bl	2e8a8 <hci_cmd_le_generate_dhkey>
   2219e:	e753      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   221a0:	f00c fb85 	bl	2e8ae <hci_cmd_le_generate_dhkey_v2>
   221a4:	e750      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   221a6:	f7eb fab1 	bl	d70c <sdc_hci_cmd_le_add_device_to_resolving_list>
   221aa:	e74d      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   221ac:	f7eb fad4 	bl	d758 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   221b0:	e74a      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_clear_resolving_list();
   221b2:	f7eb faaf 	bl	d714 <sdc_hci_cmd_le_clear_resolving_list>
   221b6:	e747      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   221b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   221bc:	486b      	ldr	r0, [pc, #428]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   221be:	3301      	adds	r3, #1
   221c0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   221c4:	f7eb fac0 	bl	d748 <sdc_hci_cmd_le_read_resolving_list_size>
   221c8:	e73e      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   221ca:	f7eb fac7 	bl	d75c <sdc_hci_cmd_le_set_address_resolution_enable>
   221ce:	e73b      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   221d0:	f7eb fad7 	bl	d782 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   221d4:	e738      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   221d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   221da:	4864      	ldr	r0, [pc, #400]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   221dc:	3308      	adds	r3, #8
   221de:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   221e2:	f7eb faab 	bl	d73c <sdc_hci_cmd_le_read_max_data_length>
   221e6:	e72f      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   221e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   221ec:	495f      	ldr	r1, [pc, #380]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   221ee:	3304      	adds	r3, #4
   221f0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   221f4:	f7eb faa4 	bl	d740 <sdc_hci_cmd_le_read_phy>
   221f8:	e726      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   221fa:	f7eb fab3 	bl	d764 <sdc_hci_cmd_le_set_default_phy>
   221fe:	e723      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   22200:	f7eb fab9 	bl	d776 <sdc_hci_cmd_le_set_phy>
   22204:	e720      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   22206:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2220a:	4858      	ldr	r0, [pc, #352]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2220c:	3302      	adds	r3, #2
   2220e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   22212:	f7eb fa9d 	bl	d750 <sdc_hci_cmd_le_read_transmit_power>
   22216:	e717      	b.n	22048 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   22218:	f7eb faaf 	bl	d77a <sdc_hci_cmd_le_set_privacy_mode>
   2221c:	e714      	b.n	22048 <hci_internal_cmd_put+0x3e4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2221e:	4628      	mov	r0, r5
	switch (opcode)	{
   22220:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   22224:	f830 3b03 	ldrh.w	r3, [r0], #3
   22228:	4293      	cmp	r3, r2
   2222a:	d823      	bhi.n	22274 <hci_internal_cmd_put+0x610>
   2222c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   22230:	f67f ad55 	bls.w	21cde <hci_internal_cmd_put+0x7a>
   22234:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   22238:	3b01      	subs	r3, #1
   2223a:	2b0a      	cmp	r3, #10
   2223c:	f63f ad4f 	bhi.w	21cde <hci_internal_cmd_put+0x7a>
   22240:	a201      	add	r2, pc, #4	; (adr r2, 22248 <hci_internal_cmd_put+0x5e4>)
   22242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22246:	bf00      	nop
   22248:	00022295 	.word	0x00022295
   2224c:	000222b1 	.word	0x000222b1
   22250:	00021cdf 	.word	0x00021cdf
   22254:	00021cdf 	.word	0x00021cdf
   22258:	00021cdf 	.word	0x00021cdf
   2225c:	00022305 	.word	0x00022305
   22260:	00021cdf 	.word	0x00021cdf
   22264:	00021cdf 	.word	0x00021cdf
   22268:	000222e1 	.word	0x000222e1
   2226c:	000222f3 	.word	0x000222f3
   22270:	0002230b 	.word	0x0002230b
   22274:	f503 7240 	add.w	r2, r3, #768	; 0x300
   22278:	b292      	uxth	r2, r2
   2227a:	2a05      	cmp	r2, #5
   2227c:	f63f ad2f 	bhi.w	21cde <hci_internal_cmd_put+0x7a>
   22280:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   22284:	3b01      	subs	r3, #1
   22286:	2b04      	cmp	r3, #4
   22288:	d848      	bhi.n	2231c <hci_internal_cmd_put+0x6b8>
   2228a:	e8df f003 	tbb	[pc, r3]
   2228e:	5b58      	.short	0x5b58
   22290:	615e      	.short	0x615e
   22292:	64          	.byte	0x64
   22293:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   22294:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   22298:	4834      	ldr	r0, [pc, #208]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2229a:	330c      	adds	r3, #12
   2229c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   222a0:	f7de fdb0 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   222a4:	f026 0308 	bic.w	r3, r6, #8
   222a8:	f64f 5202 	movw	r2, #64770	; 0xfd02
   222ac:	4293      	cmp	r3, r2
   222ae:	e52c      	b.n	21d0a <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   222b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   222b4:	482d      	ldr	r0, [pc, #180]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   222b6:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   222b8:	2202      	movs	r2, #2
   222ba:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   222bc:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   222c0:	f009 fc25 	bl	2bb0e <memset>
	cmds->read_version_info = 1;
   222c4:	79e3      	ldrb	r3, [r4, #7]
   222c6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   222ca:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   222ce:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   222d0:	7a23      	ldrb	r3, [r4, #8]
   222d2:	f023 0307 	bic.w	r3, r3, #7
   222d6:	f043 0307 	orr.w	r3, r3, #7
   222da:	7223      	strb	r3, [r4, #8]
		return 0;
   222dc:	2000      	movs	r0, #0
   222de:	e7e1      	b.n	222a4 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   222e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   222e4:	4821      	ldr	r0, [pc, #132]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   222e6:	3317      	adds	r3, #23
   222e8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   222ec:	f7eb f9b7 	bl	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   222f0:	e7d8      	b.n	222a4 <hci_internal_cmd_put+0x640>
		*param_length_out +=
   222f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   222f6:	481d      	ldr	r0, [pc, #116]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out +=
   222f8:	3320      	adds	r3, #32
   222fa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   222fe:	f7eb f961 	bl	d5c4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   22302:	e7cf      	b.n	222a4 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   22304:	f7eb f9fa 	bl	d6fc <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   22308:	e7cc      	b.n	222a4 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   2230a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   2230e:	4817      	ldr	r0, [pc, #92]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   22310:	3301      	adds	r3, #1
   22312:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   22316:	f7eb f941 	bl	d59c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   2231a:	e7c3      	b.n	222a4 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2231c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   22320:	4812      	ldr	r0, [pc, #72]	; (2236c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   22322:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   22324:	2202      	movs	r2, #2
   22326:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   22328:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   2232c:	f009 fbef 	bl	2bb0e <memset>
	cmds->read_supported_vs_commands = 1;
   22330:	79e3      	ldrb	r3, [r4, #7]
   22332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22336:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   2233a:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   2233c:	e7ce      	b.n	222dc <hci_internal_cmd_put+0x678>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2233e:	f7eb f926 	bl	d58e <sdc_hci_cmd_vs_llpm_mode_set>
   22342:	e7af      	b.n	222a4 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   22344:	f7eb f8f7 	bl	d536 <sdc_hci_cmd_vs_conn_update>
   22348:	e7ac      	b.n	222a4 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2234a:	f7eb f8ec 	bl	d526 <sdc_hci_cmd_vs_conn_event_extend>
   2234e:	e7a9      	b.n	222a4 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   22350:	f7eb f91f 	bl	d592 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   22354:	e7a6      	b.n	222a4 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   22356:	f7eb f918 	bl	d58a <sdc_hci_cmd_vs_event_length_set>
   2235a:	e7a3      	b.n	222a4 <hci_internal_cmd_put+0x640>
	switch (hci_opcode) {
   2235c:	f242 0326 	movw	r3, #8230	; 0x2026
   22360:	429e      	cmp	r6, r3
   22362:	f67f ae64 	bls.w	2202e <hci_internal_cmd_put+0x3ca>
   22366:	e516      	b.n	21d96 <hci_internal_cmd_put+0x132>
   22368:	03001241 	.word	0x03001241
   2236c:	20004488 	.word	0x20004488
		switch (BT_OGF(opcode)) {
   22370:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   22372:	e510      	b.n	21d96 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   22374:	3b2d      	subs	r3, #45	; 0x2d
   22376:	4a0b      	ldr	r2, [pc, #44]	; (223a4 <hci_internal_cmd_put+0x740>)
   22378:	b29b      	uxth	r3, r3
   2237a:	fa22 f303 	lsr.w	r3, r2, r3
   2237e:	07db      	lsls	r3, r3, #31
   22380:	f57f ad09 	bpl.w	21d96 <hci_internal_cmd_put+0x132>
   22384:	e691      	b.n	220aa <hci_internal_cmd_put+0x446>
   22386:	f242 0385 	movw	r3, #8325	; 0x2085
   2238a:	429e      	cmp	r6, r3
   2238c:	d905      	bls.n	2239a <hci_internal_cmd_put+0x736>
		return 0;
   2238e:	2000      	movs	r0, #0
   22390:	e501      	b.n	21d96 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   22392:	f242 0385 	movw	r3, #8325	; 0x2085
   22396:	2001      	movs	r0, #1
   22398:	e4c3      	b.n	21d22 <hci_internal_cmd_put+0xbe>
		return 0;
   2239a:	2000      	movs	r0, #0
   2239c:	e4c3      	b.n	21d26 <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   2239e:	f04f 30ff 	mov.w	r0, #4294967295
   223a2:	e68e      	b.n	220c2 <hci_internal_cmd_put+0x45e>
   223a4:	01000401 	.word	0x01000401

000223a8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   223a8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   223aa:	4c09      	ldr	r4, [pc, #36]	; (223d0 <hci_internal_msg_get+0x28>)
   223ac:	7823      	ldrb	r3, [r4, #0]
{
   223ae:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   223b0:	b91b      	cbnz	r3, 223ba <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   223b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   223b6:	f7eb b896 	b.w	d4e6 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   223ba:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   223bc:	1c61      	adds	r1, r4, #1
   223be:	3202      	adds	r2, #2
   223c0:	f009 fb9a 	bl	2baf8 <memcpy>
		cmd_complete_or_status.occurred = false;
   223c4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   223c6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   223c8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   223ca:	702b      	strb	r3, [r5, #0]
}
   223cc:	bd38      	pop	{r3, r4, r5, pc}
   223ce:	bf00      	nop
   223d0:	20004481 	.word	0x20004481

000223d4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   223d4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   223d6:	b508      	push	{r3, lr}
   223d8:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   223dc:	d90c      	bls.n	223f8 <sys_memcpy_swap.constprop.0+0x24>
   223de:	4298      	cmp	r0, r3
   223e0:	d20f      	bcs.n	22402 <sys_memcpy_swap.constprop.0+0x2e>
   223e2:	490c      	ldr	r1, [pc, #48]	; (22414 <sys_memcpy_swap.constprop.0+0x40>)
   223e4:	480c      	ldr	r0, [pc, #48]	; (22418 <sys_memcpy_swap.constprop.0+0x44>)
   223e6:	f240 2215 	movw	r2, #533	; 0x215
   223ea:	f008 fbaf 	bl	2ab4c <assert_print>
   223ee:	4809      	ldr	r0, [pc, #36]	; (22414 <sys_memcpy_swap.constprop.0+0x40>)
   223f0:	f240 2115 	movw	r1, #533	; 0x215
   223f4:	f008 fba3 	bl	2ab3e <assert_post_action>
   223f8:	d0f3      	beq.n	223e2 <sys_memcpy_swap.constprop.0+0xe>
   223fa:	f100 0210 	add.w	r2, r0, #16
   223fe:	4291      	cmp	r1, r2
   22400:	e7ee      	b.n	223e0 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   22402:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   22404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22408:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2240c:	428b      	cmp	r3, r1
   2240e:	d1f9      	bne.n	22404 <sys_memcpy_swap.constprop.0+0x30>
}
   22410:	bd08      	pop	{r3, pc}
   22412:	bf00      	nop
   22414:	000333f0 	.word	0x000333f0
   22418:	0003013d 	.word	0x0003013d

0002241c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   2241c:	b570      	push	{r4, r5, r6, lr}
   2241e:	4606      	mov	r6, r0
   22420:	460c      	mov	r4, r1
   22422:	4d0d      	ldr	r5, [pc, #52]	; (22458 <bt_rand+0x3c>)
   22424:	4628      	mov	r0, r5
   22426:	f00c fb48 	bl	2eaba <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   2242a:	b188      	cbz	r0, 22450 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   2242c:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   2242e:	68ab      	ldr	r3, [r5, #8]
   22430:	681b      	ldr	r3, [r3, #0]
   22432:	b943      	cbnz	r3, 22446 <bt_rand+0x2a>
   22434:	4909      	ldr	r1, [pc, #36]	; (2245c <bt_rand+0x40>)
   22436:	480a      	ldr	r0, [pc, #40]	; (22460 <bt_rand+0x44>)
   22438:	224d      	movs	r2, #77	; 0x4d
   2243a:	f008 fb87 	bl	2ab4c <assert_print>
   2243e:	4807      	ldr	r0, [pc, #28]	; (2245c <bt_rand+0x40>)
   22440:	214d      	movs	r1, #77	; 0x4d
   22442:	f008 fb7c 	bl	2ab3e <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   22446:	4631      	mov	r1, r6
   22448:	4628      	mov	r0, r5
}
   2244a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2244e:	4718      	bx	r3
   22450:	f06f 0012 	mvn.w	r0, #18
   22454:	bd70      	pop	{r4, r5, r6, pc}
   22456:	bf00      	nop
   22458:	0002f05c 	.word	0x0002f05c
   2245c:	00033b26 	.word	0x00033b26
   22460:	0003013d 	.word	0x0003013d

00022464 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   22464:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   22466:	b508      	push	{r3, lr}
   22468:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2246c:	d90c      	bls.n	22488 <sys_memcpy_swap.constprop.0+0x24>
   2246e:	4298      	cmp	r0, r3
   22470:	d20f      	bcs.n	22492 <sys_memcpy_swap.constprop.0+0x2e>
   22472:	490c      	ldr	r1, [pc, #48]	; (224a4 <sys_memcpy_swap.constprop.0+0x40>)
   22474:	480c      	ldr	r0, [pc, #48]	; (224a8 <sys_memcpy_swap.constprop.0+0x44>)
   22476:	f240 2215 	movw	r2, #533	; 0x215
   2247a:	f008 fb67 	bl	2ab4c <assert_print>
   2247e:	4809      	ldr	r0, [pc, #36]	; (224a4 <sys_memcpy_swap.constprop.0+0x40>)
   22480:	f240 2115 	movw	r1, #533	; 0x215
   22484:	f008 fb5b 	bl	2ab3e <assert_post_action>
   22488:	d0f3      	beq.n	22472 <sys_memcpy_swap.constprop.0+0xe>
   2248a:	f100 0220 	add.w	r2, r0, #32
   2248e:	4291      	cmp	r1, r2
   22490:	e7ee      	b.n	22470 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   22492:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   22494:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22498:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2249c:	428b      	cmp	r3, r1
   2249e:	d1f9      	bne.n	22494 <sys_memcpy_swap.constprop.0+0x30>
}
   224a0:	bd08      	pop	{r3, pc}
   224a2:	bf00      	nop
   224a4:	000333f0 	.word	0x000333f0
   224a8:	0003013d 	.word	0x0003013d

000224ac <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   224ac:	4b1e      	ldr	r3, [pc, #120]	; (22528 <ecdh_p256_common_secret+0x7c>)
   224ae:	491f      	ldr	r1, [pc, #124]	; (2252c <ecdh_p256_common_secret+0x80>)
   224b0:	f103 0220 	add.w	r2, r3, #32
   224b4:	2800      	cmp	r0, #0
   224b6:	bf08      	it	eq
   224b8:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   224ba:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   224bc:	4610      	mov	r0, r2
   224be:	f005 f855 	bl	2756c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   224c2:	4602      	mov	r2, r0
   224c4:	b348      	cbz	r0, 2251a <ecdh_p256_common_secret+0x6e>
		LOG_ERR("public key is not valid (err %d)", err);
   224c6:	481a      	ldr	r0, [pc, #104]	; (22530 <ecdh_p256_common_secret+0x84>)
   224c8:	2145      	movs	r1, #69	; 0x45
   224ca:	f008 fb4d 	bl	2ab68 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   224ce:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   224d0:	f04f 32ff 	mov.w	r2, #4294967295
   224d4:	f04f 33ff 	mov.w	r3, #4294967295
   224d8:	2001      	movs	r0, #1
   224da:	f7f3 fb05 	bl	15ae8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   224de:	f100 060c 	add.w	r6, r0, #12
   224e2:	2102      	movs	r1, #2
   224e4:	4605      	mov	r5, r0
   224e6:	4630      	mov	r0, r6
   224e8:	f7fc fde2 	bl	1f0b0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   224ec:	233e      	movs	r3, #62	; 0x3e
   224ee:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   224f0:	2322      	movs	r3, #34	; 0x22
   224f2:	7043      	strb	r3, [r0, #1]
   224f4:	2101      	movs	r1, #1
   224f6:	4630      	mov	r0, r6
   224f8:	f7fc fdda 	bl	1f0b0 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   224fc:	2309      	movs	r3, #9
   224fe:	7003      	strb	r3, [r0, #0]
   22500:	2121      	movs	r1, #33	; 0x21
   22502:	4630      	mov	r0, r6
   22504:	f7fc fdd4 	bl	1f0b0 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   22508:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   2250c:	b13c      	cbz	r4, 2251e <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2250e:	2220      	movs	r2, #32
   22510:	21ff      	movs	r1, #255	; 0xff
   22512:	f009 fafc 	bl	2bb0e <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   22516:	4628      	mov	r0, r5
   22518:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2251a:	4604      	mov	r4, r0
   2251c:	e7d8      	b.n	224d0 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   2251e:	4905      	ldr	r1, [pc, #20]	; (22534 <ecdh_p256_common_secret+0x88>)
   22520:	f7ff ffa0 	bl	22464 <sys_memcpy_swap.constprop.0>
   22524:	e7f7      	b.n	22516 <ecdh_p256_common_secret+0x6a>
   22526:	bf00      	nop
   22528:	200044c8 	.word	0x200044c8
   2252c:	00033c8c 	.word	0x00033c8c
   22530:	00033c44 	.word	0x00033c44
   22534:	200044e8 	.word	0x200044e8

00022538 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   22538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2253a:	4c3d      	ldr	r4, [pc, #244]	; (22630 <ecdh_cmd_process+0xf8>)
   2253c:	f3bf 8f5b 	dmb	ish
   22540:	6823      	ldr	r3, [r4, #0]
   22542:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   22546:	2b02      	cmp	r3, #2
   22548:	4627      	mov	r7, r4
   2254a:	d059      	beq.n	22600 <ecdh_cmd_process+0xc8>
   2254c:	2b04      	cmp	r3, #4
   2254e:	d05c      	beq.n	2260a <ecdh_cmd_process+0xd2>
   22550:	2b01      	cmp	r3, #1
   22552:	d15c      	bne.n	2260e <ecdh_cmd_process+0xd6>
		err = bt_rand(ecdh.private_key_be, 32);
   22554:	4c37      	ldr	r4, [pc, #220]	; (22634 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   22556:	4e38      	ldr	r6, [pc, #224]	; (22638 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   22558:	2120      	movs	r1, #32
   2255a:	4620      	mov	r0, r4
   2255c:	f7ff ff5e 	bl	2241c <bt_rand>
		if (err) {
   22560:	2800      	cmp	r0, #0
   22562:	d142      	bne.n	225ea <ecdh_cmd_process+0xb2>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   22564:	2220      	movs	r2, #32
   22566:	4631      	mov	r1, r6
   22568:	4620      	mov	r0, r4
   2256a:	f009 fa9e 	bl	2baaa <memcmp>
   2256e:	2800      	cmp	r0, #0
   22570:	d0f2      	beq.n	22558 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   22572:	4832      	ldr	r0, [pc, #200]	; (2263c <ecdh_cmd_process+0x104>)
   22574:	4621      	mov	r1, r4
   22576:	f004 ffe5 	bl	27544 <ocrypto_ecdh_p256_public_key>
	} while (err);
   2257a:	4605      	mov	r5, r0
   2257c:	2800      	cmp	r0, #0
   2257e:	d1eb      	bne.n	22558 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   22580:	f04f 32ff 	mov.w	r2, #4294967295
   22584:	f04f 33ff 	mov.w	r3, #4294967295
   22588:	2001      	movs	r0, #1
   2258a:	f7f3 faad 	bl	15ae8 <bt_buf_get_rx>
   2258e:	f100 060c 	add.w	r6, r0, #12
   22592:	2102      	movs	r1, #2
   22594:	4604      	mov	r4, r0
   22596:	4630      	mov	r0, r6
   22598:	f7fc fd8a 	bl	1f0b0 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2259c:	233e      	movs	r3, #62	; 0x3e
   2259e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   225a0:	2342      	movs	r3, #66	; 0x42
   225a2:	7043      	strb	r3, [r0, #1]
   225a4:	2101      	movs	r1, #1
   225a6:	4630      	mov	r0, r6
   225a8:	f7fc fd82 	bl	1f0b0 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   225ac:	2308      	movs	r3, #8
   225ae:	7003      	strb	r3, [r0, #0]
   225b0:	2141      	movs	r1, #65	; 0x41
   225b2:	4630      	mov	r0, r6
   225b4:	f7fc fd7c 	bl	1f0b0 <net_buf_simple_add>
   225b8:	4606      	mov	r6, r0
	evt->status = status;
   225ba:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   225be:	b1b5      	cbz	r5, 225ee <ecdh_cmd_process+0xb6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   225c0:	2240      	movs	r2, #64	; 0x40
   225c2:	2100      	movs	r1, #0
   225c4:	f009 faa3 	bl	2bb0e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   225c8:	f3bf 8f5b 	dmb	ish
   225cc:	2300      	movs	r3, #0
   225ce:	e857 2f00 	ldrex	r2, [r7]
   225d2:	e847 3100 	strex	r1, r3, [r7]
   225d6:	2900      	cmp	r1, #0
   225d8:	d1f9      	bne.n	225ce <ecdh_cmd_process+0x96>
   225da:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   225de:	b32c      	cbz	r4, 2262c <ecdh_cmd_process+0xf4>
		bt_recv(buf);
   225e0:	4620      	mov	r0, r4
	}
}
   225e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   225e6:	f7f4 bb93 	b.w	16d10 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   225ea:	251f      	movs	r5, #31
   225ec:	e7c8      	b.n	22580 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   225ee:	4913      	ldr	r1, [pc, #76]	; (2263c <ecdh_cmd_process+0x104>)
   225f0:	f7ff ff38 	bl	22464 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   225f4:	4912      	ldr	r1, [pc, #72]	; (22640 <ecdh_cmd_process+0x108>)
   225f6:	f106 0021 	add.w	r0, r6, #33	; 0x21
   225fa:	f7ff ff33 	bl	22464 <sys_memcpy_swap.constprop.0>
		break;
   225fe:	e7e3      	b.n	225c8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   22600:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   22602:	f7ff ff53 	bl	224ac <ecdh_p256_common_secret>
   22606:	4604      	mov	r4, r0
		break;
   22608:	e7de      	b.n	225c8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   2260a:	2001      	movs	r0, #1
   2260c:	e7f9      	b.n	22602 <ecdh_cmd_process+0xca>
		LOG_WRN("Unknown command");
   2260e:	480d      	ldr	r0, [pc, #52]	; (22644 <ecdh_cmd_process+0x10c>)
   22610:	2157      	movs	r1, #87	; 0x57
   22612:	f008 faa9 	bl	2ab68 <z_log_minimal_printk>
   22616:	f3bf 8f5b 	dmb	ish
   2261a:	2300      	movs	r3, #0
   2261c:	e854 2f00 	ldrex	r2, [r4]
   22620:	e844 3100 	strex	r1, r3, [r4]
   22624:	2900      	cmp	r1, #0
   22626:	d1f9      	bne.n	2261c <ecdh_cmd_process+0xe4>
   22628:	f3bf 8f5b 	dmb	ish
}
   2262c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2262e:	bf00      	nop
   22630:	20003694 	.word	0x20003694
   22634:	200044c8 	.word	0x200044c8
   22638:	00033c8c 	.word	0x00033c8c
   2263c:	200044e8 	.word	0x200044e8
   22640:	20004508 	.word	0x20004508
   22644:	00033c6a 	.word	0x00033c6a

00022648 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   22648:	b510      	push	{r4, lr}
   2264a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   2264c:	2210      	movs	r2, #16
   2264e:	2100      	movs	r1, #0
   22650:	a801      	add	r0, sp, #4
   22652:	f009 fa5c 	bl	2bb0e <memset>
   22656:	4c0b      	ldr	r4, [pc, #44]	; (22684 <ecdh_thread+0x3c>)
   22658:	9405      	str	r4, [sp, #20]
   2265a:	2301      	movs	r3, #1
   2265c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   22660:	f04f 32ff 	mov.w	r2, #4294967295
   22664:	f04f 33ff 	mov.w	r3, #4294967295
   22668:	2101      	movs	r1, #1
   2266a:	a801      	add	r0, sp, #4
   2266c:	f004 fe02 	bl	27274 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   22670:	4620      	mov	r0, r4
   22672:	f00c fc47 	bl	2ef04 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   22676:	9b04      	ldr	r3, [sp, #16]
   22678:	f36f 3394 	bfc	r3, #14, #7
   2267c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   2267e:	f7ff ff5b 	bl	22538 <ecdh_cmd_process>
	while (true) {
   22682:	e7ed      	b.n	22660 <ecdh_thread+0x18>
   22684:	20003684 	.word	0x20003684

00022688 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   22688:	b510      	push	{r4, lr}
   2268a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   2268c:	480e      	ldr	r0, [pc, #56]	; (226c8 <hci_ecdh_init+0x40>)
   2268e:	f00c fc34 	bl	2eefa <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22692:	4c0e      	ldr	r4, [pc, #56]	; (226cc <hci_ecdh_init+0x44>)
   22694:	490e      	ldr	r1, [pc, #56]	; (226d0 <hci_ecdh_init+0x48>)
   22696:	2200      	movs	r2, #0
   22698:	2300      	movs	r3, #0
   2269a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2269e:	2300      	movs	r3, #0
   226a0:	220a      	movs	r2, #10
   226a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   226a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   226aa:	9300      	str	r3, [sp, #0]
   226ac:	f44f 7262 	mov.w	r2, #904	; 0x388
   226b0:	4b08      	ldr	r3, [pc, #32]	; (226d4 <hci_ecdh_init+0x4c>)
   226b2:	4620      	mov	r0, r4
   226b4:	f001 fefa 	bl	244ac <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   226b8:	4907      	ldr	r1, [pc, #28]	; (226d8 <hci_ecdh_init+0x50>)
   226ba:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   226bc:	b008      	add	sp, #32
   226be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   226c2:	f00c ba3c 	b.w	2eb3e <z_impl_k_thread_name_set>
   226c6:	bf00      	nop
   226c8:	20003684 	.word	0x20003684
   226cc:	200028a0 	.word	0x200028a0
   226d0:	20007f00 	.word	0x20007f00
   226d4:	00022649 	.word	0x00022649
   226d8:	00033c7f 	.word	0x00033c7f

000226dc <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   226dc:	4801      	ldr	r0, [pc, #4]	; (226e4 <hci_ecdh_uninit+0x8>)
   226de:	f7f2 bea3 	b.w	15428 <z_impl_k_thread_abort>
   226e2:	bf00      	nop
   226e4:	200028a0 	.word	0x200028a0

000226e8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   226e8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   226ea:	4b0b      	ldr	r3, [pc, #44]	; (22718 <hci_cmd_le_read_local_p256_public_key+0x30>)
   226ec:	f3bf 8f5b 	dmb	ish
   226f0:	2201      	movs	r2, #1
   226f2:	e853 1f00 	ldrex	r1, [r3]
   226f6:	2900      	cmp	r1, #0
   226f8:	d103      	bne.n	22702 <hci_cmd_le_read_local_p256_public_key+0x1a>
   226fa:	e843 2000 	strex	r0, r2, [r3]
   226fe:	2800      	cmp	r0, #0
   22700:	d1f7      	bne.n	226f2 <hci_cmd_le_read_local_p256_public_key+0xa>
   22702:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   22706:	d105      	bne.n	22714 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   22708:	4804      	ldr	r0, [pc, #16]	; (2271c <hci_cmd_le_read_local_p256_public_key+0x34>)
   2270a:	2100      	movs	r1, #0
   2270c:	f004 fe64 	bl	273d8 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   22710:	2000      	movs	r0, #0
}
   22712:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22714:	200c      	movs	r0, #12
   22716:	e7fc      	b.n	22712 <hci_cmd_le_read_local_p256_public_key+0x2a>
   22718:	20003694 	.word	0x20003694
   2271c:	20003684 	.word	0x20003684

00022720 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   22720:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   22722:	2900      	cmp	r1, #0
   22724:	4b11      	ldr	r3, [pc, #68]	; (2276c <cmd_le_generate_dhkey+0x4c>)
   22726:	f3bf 8f5b 	dmb	ish
{
   2272a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2272c:	bf0c      	ite	eq
   2272e:	2202      	moveq	r2, #2
   22730:	2204      	movne	r2, #4
   22732:	e853 1f00 	ldrex	r1, [r3]
   22736:	2900      	cmp	r1, #0
   22738:	d103      	bne.n	22742 <cmd_le_generate_dhkey+0x22>
   2273a:	e843 2000 	strex	r0, r2, [r3]
   2273e:	2800      	cmp	r0, #0
   22740:	d1f7      	bne.n	22732 <cmd_le_generate_dhkey+0x12>
   22742:	f3bf 8f5b 	dmb	ish
   22746:	d10e      	bne.n	22766 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   22748:	4621      	mov	r1, r4
   2274a:	4809      	ldr	r0, [pc, #36]	; (22770 <cmd_le_generate_dhkey+0x50>)
   2274c:	f7ff fe8a 	bl	22464 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   22750:	4808      	ldr	r0, [pc, #32]	; (22774 <cmd_le_generate_dhkey+0x54>)
   22752:	f104 0120 	add.w	r1, r4, #32
   22756:	f7ff fe85 	bl	22464 <sys_memcpy_swap.constprop.0>
   2275a:	4807      	ldr	r0, [pc, #28]	; (22778 <cmd_le_generate_dhkey+0x58>)
   2275c:	2100      	movs	r1, #0
   2275e:	f004 fe3b 	bl	273d8 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   22762:	2000      	movs	r0, #0
}
   22764:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22766:	200c      	movs	r0, #12
   22768:	e7fc      	b.n	22764 <cmd_le_generate_dhkey+0x44>
   2276a:	bf00      	nop
   2276c:	20003694 	.word	0x20003694
   22770:	200044e8 	.word	0x200044e8
   22774:	20004508 	.word	0x20004508
   22778:	20003684 	.word	0x20003684

0002277c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   2277c:	b508      	push	{r3, lr}
   2277e:	4602      	mov	r2, r0
   22780:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   22782:	4805      	ldr	r0, [pc, #20]	; (22798 <m_assert_handler+0x1c>)
   22784:	2145      	movs	r1, #69	; 0x45
   22786:	f008 f9ef 	bl	2ab68 <z_log_minimal_printk>
	k_oops();
   2278a:	4040      	eors	r0, r0
   2278c:	f380 8811 	msr	BASEPRI, r0
   22790:	f04f 0003 	mov.w	r0, #3
   22794:	df02      	svc	2
}
   22796:	bd08      	pop	{r3, pc}
   22798:	00033cb8 	.word	0x00033cb8

0002279c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2279c:	4901      	ldr	r1, [pc, #4]	; (227a4 <mpsl_low_prio_irq_handler+0x8>)
   2279e:	4802      	ldr	r0, [pc, #8]	; (227a8 <mpsl_low_prio_irq_handler+0xc>)
   227a0:	f00c ba7b 	b.w	2ec9a <k_work_submit_to_queue>
   227a4:	200036c8 	.word	0x200036c8
   227a8:	20002920 	.word	0x20002920

000227ac <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   227ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   227ae:	2332      	movs	r3, #50	; 0x32
   227b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   227b4:	4a13      	ldr	r2, [pc, #76]	; (22804 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   227b6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   227b8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   227ba:	2119      	movs	r1, #25
   227bc:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   227be:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   227c2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   227c6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   227ca:	f7ea f861 	bl	c890 <mpsl_init>
	if (err) {
   227ce:	4604      	mov	r4, r0
   227d0:	b9a0      	cbnz	r0, 227fc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   227d2:	480d      	ldr	r0, [pc, #52]	; (22808 <mpsl_lib_init_sys+0x5c>)
   227d4:	4629      	mov	r1, r5
   227d6:	f7ee f9f2 	bl	10bbe <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   227da:	4604      	mov	r4, r0
   227dc:	b970      	cbnz	r0, 227fc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   227de:	4601      	mov	r1, r0
   227e0:	462a      	mov	r2, r5
   227e2:	2008      	movs	r0, #8
   227e4:	f7f2 fa54 	bl	14c90 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   227e8:	462a      	mov	r2, r5
   227ea:	4621      	mov	r1, r4
   227ec:	200b      	movs	r0, #11
   227ee:	f7f2 fa4f 	bl	14c90 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   227f2:	462a      	mov	r2, r5
   227f4:	4621      	mov	r1, r4
   227f6:	4628      	mov	r0, r5
   227f8:	f7f2 fa4a 	bl	14c90 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   227fc:	4620      	mov	r0, r4
   227fe:	b003      	add	sp, #12
   22800:	bd30      	pop	{r4, r5, pc}
   22802:	bf00      	nop
   22804:	0002277d 	.word	0x0002277d
   22808:	20003698 	.word	0x20003698

0002280c <mpsl_low_prio_work_handler>:
{
   2280c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2280e:	f04f 30ff 	mov.w	r0, #4294967295
   22812:	f04f 31ff 	mov.w	r1, #4294967295
   22816:	f7ff f871 	bl	218fc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2281a:	b140      	cbz	r0, 2282e <mpsl_low_prio_work_handler+0x22>
   2281c:	4907      	ldr	r1, [pc, #28]	; (2283c <mpsl_low_prio_work_handler+0x30>)
   2281e:	4808      	ldr	r0, [pc, #32]	; (22840 <mpsl_low_prio_work_handler+0x34>)
   22820:	2247      	movs	r2, #71	; 0x47
   22822:	f008 f993 	bl	2ab4c <assert_print>
   22826:	4805      	ldr	r0, [pc, #20]	; (2283c <mpsl_low_prio_work_handler+0x30>)
   22828:	2147      	movs	r1, #71	; 0x47
   2282a:	f008 f988 	bl	2ab3e <assert_post_action>
	mpsl_low_priority_process();
   2282e:	f7ee fab6 	bl	10d9e <mpsl_low_priority_process>
}
   22832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   22836:	f7ff b869 	b.w	2190c <multithreading_lock_release>
   2283a:	bf00      	nop
   2283c:	00033cd1 	.word	0x00033cd1
   22840:	0003013d 	.word	0x0003013d

00022844 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   22844:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   22846:	4d0d      	ldr	r5, [pc, #52]	; (2287c <mpsl_low_prio_init+0x38>)
   22848:	490d      	ldr	r1, [pc, #52]	; (22880 <mpsl_low_prio_init+0x3c>)
   2284a:	2400      	movs	r4, #0
   2284c:	9400      	str	r4, [sp, #0]
   2284e:	f06f 0309 	mvn.w	r3, #9
   22852:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22856:	4628      	mov	r0, r5
   22858:	f002 fd9a 	bl	25390 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2285c:	4909      	ldr	r1, [pc, #36]	; (22884 <mpsl_low_prio_init+0x40>)
   2285e:	4628      	mov	r0, r5
   22860:	f00c f96d 	bl	2eb3e <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   22864:	4908      	ldr	r1, [pc, #32]	; (22888 <mpsl_low_prio_init+0x44>)
   22866:	4809      	ldr	r0, [pc, #36]	; (2288c <mpsl_low_prio_init+0x48>)
   22868:	f002 fcdc 	bl	25224 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2286c:	4622      	mov	r2, r4
   2286e:	2104      	movs	r1, #4
   22870:	2019      	movs	r0, #25
   22872:	f7f2 fa0d 	bl	14c90 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   22876:	4620      	mov	r0, r4
   22878:	b003      	add	sp, #12
   2287a:	bd30      	pop	{r4, r5, pc}
   2287c:	20002920 	.word	0x20002920
   22880:	20008300 	.word	0x20008300
   22884:	00033cfe 	.word	0x00033cfe
   22888:	0002280d 	.word	0x0002280d
   2288c:	200036c8 	.word	0x200036c8

00022890 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22890:	4b01      	ldr	r3, [pc, #4]	; (22898 <mpsl_hfclk_callback+0x8>)
   22892:	2000      	movs	r0, #0
   22894:	681b      	ldr	r3, [r3, #0]
   22896:	4718      	bx	r3
   22898:	200036d8 	.word	0x200036d8

0002289c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2289c:	b510      	push	{r4, lr}
	switch (domain) {
   2289e:	b130      	cbz	r0, 228ae <nrfx_clock_start+0x12>
   228a0:	2801      	cmp	r0, #1
   228a2:	d10a      	bne.n	228ba <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   228a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   228a8:	4808      	ldr	r0, [pc, #32]	; (228cc <nrfx_clock_start+0x30>)
   228aa:	f7e9 be71 	b.w	c590 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   228ae:	4b08      	ldr	r3, [pc, #32]	; (228d0 <nrfx_clock_start+0x34>)
}
   228b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   228b4:	681b      	ldr	r3, [r3, #0]
   228b6:	2001      	movs	r0, #1
   228b8:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   228ba:	4906      	ldr	r1, [pc, #24]	; (228d4 <nrfx_clock_start+0x38>)
   228bc:	4806      	ldr	r0, [pc, #24]	; (228d8 <nrfx_clock_start+0x3c>)
   228be:	221c      	movs	r2, #28
   228c0:	f008 f944 	bl	2ab4c <assert_print>
   228c4:	4803      	ldr	r0, [pc, #12]	; (228d4 <nrfx_clock_start+0x38>)
   228c6:	211c      	movs	r1, #28
   228c8:	f008 f939 	bl	2ab3e <assert_post_action>
   228cc:	00022891 	.word	0x00022891
   228d0:	200036d8 	.word	0x200036d8
   228d4:	00033d12 	.word	0x00033d12
   228d8:	0003013d 	.word	0x0003013d

000228dc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   228dc:	b508      	push	{r3, lr}
	switch (domain) {
   228de:	b170      	cbz	r0, 228fe <nrfx_clock_stop+0x22>
   228e0:	2801      	cmp	r0, #1
   228e2:	d103      	bne.n	228ec <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   228e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   228e8:	f7e9 be44 	b.w	c574 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   228ec:	4904      	ldr	r1, [pc, #16]	; (22900 <nrfx_clock_stop+0x24>)
   228ee:	4805      	ldr	r0, [pc, #20]	; (22904 <nrfx_clock_stop+0x28>)
   228f0:	222a      	movs	r2, #42	; 0x2a
   228f2:	f008 f92b 	bl	2ab4c <assert_print>
   228f6:	4802      	ldr	r0, [pc, #8]	; (22900 <nrfx_clock_stop+0x24>)
   228f8:	212a      	movs	r1, #42	; 0x2a
   228fa:	f008 f920 	bl	2ab3e <assert_post_action>
}
   228fe:	bd08      	pop	{r3, pc}
   22900:	00033d12 	.word	0x00033d12
   22904:	0003013d 	.word	0x0003013d

00022908 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   22908:	4b01      	ldr	r3, [pc, #4]	; (22910 <nrfx_clock_init+0x8>)
   2290a:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   2290c:	4801      	ldr	r0, [pc, #4]	; (22914 <nrfx_clock_init+0xc>)
   2290e:	4770      	bx	lr
   22910:	200036d8 	.word	0x200036d8
   22914:	0bad0000 	.word	0x0bad0000

00022918 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   22918:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   2291a:	4c28      	ldr	r4, [pc, #160]	; (229bc <timeslot_callback+0xa4>)
   2291c:	7e23      	ldrb	r3, [r4, #24]
   2291e:	4283      	cmp	r3, r0
   22920:	d008      	beq.n	22934 <timeslot_callback+0x1c>
   22922:	4927      	ldr	r1, [pc, #156]	; (229c0 <timeslot_callback+0xa8>)
   22924:	4827      	ldr	r0, [pc, #156]	; (229c4 <timeslot_callback+0xac>)
   22926:	2250      	movs	r2, #80	; 0x50
   22928:	f008 f910 	bl	2ab4c <assert_print>
   2292c:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2292e:	4824      	ldr	r0, [pc, #144]	; (229c0 <timeslot_callback+0xa8>)
   22930:	f008 f905 	bl	2ab3e <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22934:	f3bf 8f5b 	dmb	ish
   22938:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2293a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   2293e:	bb13      	cbnz	r3, 22986 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   22940:	2909      	cmp	r1, #9
   22942:	d834      	bhi.n	229ae <timeslot_callback+0x96>
   22944:	e8df f001 	tbb	[pc, r1]
   22948:	33333305 	.word	0x33333305
   2294c:	1c212133 	.word	0x1c212133
   22950:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   22952:	6a23      	ldr	r3, [r4, #32]
   22954:	e9d3 2000 	ldrd	r2, r0, [r3]
   22958:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2295a:	2801      	cmp	r0, #1
   2295c:	d005      	beq.n	2296a <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   2295e:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   22960:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   22962:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   22966:	4818      	ldr	r0, [pc, #96]	; (229c8 <timeslot_callback+0xb0>)
   22968:	e00e      	b.n	22988 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   2296a:	f247 5330 	movw	r3, #30000	; 0x7530
   2296e:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   22970:	2303      	movs	r3, #3
   22972:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   22976:	4b15      	ldr	r3, [pc, #84]	; (229cc <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   22978:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   2297c:	63a3      	str	r3, [r4, #56]	; 0x38
   2297e:	e7f2      	b.n	22966 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   22980:	480e      	ldr	r0, [pc, #56]	; (229bc <timeslot_callback+0xa4>)
   22982:	f002 f9bf 	bl	24d04 <z_impl_k_sem_give>
		return NULL;
   22986:	2000      	movs	r0, #0
}
   22988:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   2298a:	2300      	movs	r3, #0
   2298c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22990:	490e      	ldr	r1, [pc, #56]	; (229cc <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   22992:	4b0f      	ldr	r3, [pc, #60]	; (229d0 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22994:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   22996:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22998:	f7ee f8b5 	bl	10b06 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2299c:	2800      	cmp	r0, #0
   2299e:	d0f2      	beq.n	22986 <timeslot_callback+0x6e>
   229a0:	4907      	ldr	r1, [pc, #28]	; (229c0 <timeslot_callback+0xa8>)
   229a2:	4808      	ldr	r0, [pc, #32]	; (229c4 <timeslot_callback+0xac>)
   229a4:	2248      	movs	r2, #72	; 0x48
   229a6:	f008 f8d1 	bl	2ab4c <assert_print>
   229aa:	2148      	movs	r1, #72	; 0x48
   229ac:	e7bf      	b.n	2292e <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   229ae:	4904      	ldr	r1, [pc, #16]	; (229c0 <timeslot_callback+0xa8>)
   229b0:	4804      	ldr	r0, [pc, #16]	; (229c4 <timeslot_callback+0xac>)
   229b2:	227c      	movs	r2, #124	; 0x7c
   229b4:	f008 f8ca 	bl	2ab4c <assert_print>
   229b8:	217c      	movs	r1, #124	; 0x7c
   229ba:	e7b8      	b.n	2292e <timeslot_callback+0x16>
   229bc:	200036dc 	.word	0x200036dc
   229c0:	00033d4f 	.word	0x00033d4f
   229c4:	0003013d 	.word	0x0003013d
   229c8:	20003710 	.word	0x20003710
   229cc:	20003700 	.word	0x20003700
   229d0:	0f423fff 	.word	0x0f423fff

000229d4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   229d4:	4802      	ldr	r0, [pc, #8]	; (229e0 <nrf_flash_sync_init+0xc>)
   229d6:	2201      	movs	r2, #1
   229d8:	2100      	movs	r1, #0
   229da:	f00c b8fb 	b.w	2ebd4 <z_impl_k_sem_init>
   229de:	bf00      	nop
   229e0:	200036dc 	.word	0x200036dc

000229e4 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   229e4:	4b01      	ldr	r3, [pc, #4]	; (229ec <nrf_flash_sync_set_context+0x8>)
   229e6:	61d8      	str	r0, [r3, #28]
}
   229e8:	4770      	bx	lr
   229ea:	bf00      	nop
   229ec:	200036dc 	.word	0x200036dc

000229f0 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   229f0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   229f2:	f04f 31ff 	mov.w	r1, #4294967295
{
   229f6:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   229f8:	f04f 30ff 	mov.w	r0, #4294967295
   229fc:	f7fe ff7e 	bl	218fc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   22a00:	4605      	mov	r5, r0
   22a02:	b140      	cbz	r0, 22a16 <nrf_flash_sync_exe+0x26>
   22a04:	4947      	ldr	r1, [pc, #284]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22a06:	4848      	ldr	r0, [pc, #288]	; (22b28 <nrf_flash_sync_exe+0x138>)
   22a08:	2299      	movs	r2, #153	; 0x99
   22a0a:	f008 f89f 	bl	2ab4c <assert_print>
   22a0e:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   22a10:	4844      	ldr	r0, [pc, #272]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22a12:	f008 f894 	bl	2ab3e <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   22a16:	4945      	ldr	r1, [pc, #276]	; (22b2c <nrf_flash_sync_exe+0x13c>)
   22a18:	4845      	ldr	r0, [pc, #276]	; (22b30 <nrf_flash_sync_exe+0x140>)
   22a1a:	f7e6 fb6d 	bl	90f8 <mpsl_timeslot_session_open>
   22a1e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   22a20:	f7fe ff74 	bl	2190c <multithreading_lock_release>
	if (ret < 0) {
   22a24:	2c00      	cmp	r4, #0
   22a26:	da07      	bge.n	22a38 <nrf_flash_sync_exe+0x48>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   22a28:	4842      	ldr	r0, [pc, #264]	; (22b34 <nrf_flash_sync_exe+0x144>)
   22a2a:	4622      	mov	r2, r4
   22a2c:	2145      	movs	r1, #69	; 0x45
   22a2e:	f008 f89b 	bl	2ab68 <z_log_minimal_printk>
		return -ENOMEM;
   22a32:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   22a36:	bd70      	pop	{r4, r5, r6, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22a38:	4c3f      	ldr	r4, [pc, #252]	; (22b38 <nrf_flash_sync_exe+0x148>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   22a3a:	f240 1301 	movw	r3, #257	; 0x101
   22a3e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   22a40:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   22a42:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   22a44:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   22a46:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   22a48:	f247 5330 	movw	r3, #30000	; 0x7530
   22a4c:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   22a4e:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22a52:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   22a56:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22a58:	f104 0640 	add.w	r6, r4, #64	; 0x40
   22a5c:	f3bf 8f5b 	dmb	ish
   22a60:	e856 3f00 	ldrex	r3, [r6]
   22a64:	e846 5200 	strex	r2, r5, [r6]
   22a68:	2a00      	cmp	r2, #0
   22a6a:	d1f9      	bne.n	22a60 <nrf_flash_sync_exe+0x70>
   22a6c:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   22a70:	68a3      	ldr	r3, [r4, #8]
   22a72:	b133      	cbz	r3, 22a82 <nrf_flash_sync_exe+0x92>
   22a74:	492b      	ldr	r1, [pc, #172]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22a76:	482c      	ldr	r0, [pc, #176]	; (22b28 <nrf_flash_sync_exe+0x138>)
   22a78:	22af      	movs	r2, #175	; 0xaf
   22a7a:	f008 f867 	bl	2ab4c <assert_print>
   22a7e:	21af      	movs	r1, #175	; 0xaf
   22a80:	e7c6      	b.n	22a10 <nrf_flash_sync_exe+0x20>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22a82:	f04f 30ff 	mov.w	r0, #4294967295
   22a86:	f04f 31ff 	mov.w	r1, #4294967295
   22a8a:	f7fe ff37 	bl	218fc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   22a8e:	b130      	cbz	r0, 22a9e <nrf_flash_sync_exe+0xae>
   22a90:	4924      	ldr	r1, [pc, #144]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22a92:	4825      	ldr	r0, [pc, #148]	; (22b28 <nrf_flash_sync_exe+0x138>)
   22a94:	22b2      	movs	r2, #178	; 0xb2
   22a96:	f008 f859 	bl	2ab4c <assert_print>
   22a9a:	21b2      	movs	r1, #178	; 0xb2
   22a9c:	e7b8      	b.n	22a10 <nrf_flash_sync_exe+0x20>
	ret = mpsl_timeslot_request(_context.session_id, req);
   22a9e:	7e20      	ldrb	r0, [r4, #24]
   22aa0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   22aa4:	f7ee f82f 	bl	10b06 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   22aa8:	b130      	cbz	r0, 22ab8 <nrf_flash_sync_exe+0xc8>
   22aaa:	491e      	ldr	r1, [pc, #120]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22aac:	481e      	ldr	r0, [pc, #120]	; (22b28 <nrf_flash_sync_exe+0x138>)
   22aae:	22b4      	movs	r2, #180	; 0xb4
   22ab0:	f008 f84c 	bl	2ab4c <assert_print>
   22ab4:	21b4      	movs	r1, #180	; 0xb4
   22ab6:	e7ab      	b.n	22a10 <nrf_flash_sync_exe+0x20>
	MULTITHREADING_LOCK_RELEASE();
   22ab8:	f7fe ff28 	bl	2190c <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   22abc:	4a1f      	ldr	r2, [pc, #124]	; (22b3c <nrf_flash_sync_exe+0x14c>)
   22abe:	2300      	movs	r3, #0
   22ac0:	4620      	mov	r0, r4
   22ac2:	f002 f959 	bl	24d78 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   22ac6:	2800      	cmp	r0, #0
   22ac8:	da0e      	bge.n	22ae8 <nrf_flash_sync_exe+0xf8>
		LOG_ERR("timeout");
   22aca:	481d      	ldr	r0, [pc, #116]	; (22b40 <nrf_flash_sync_exe+0x150>)
   22acc:	2145      	movs	r1, #69	; 0x45
   22ace:	f008 f84b 	bl	2ab68 <z_log_minimal_printk>
   22ad2:	f3bf 8f5b 	dmb	ish
   22ad6:	2301      	movs	r3, #1
   22ad8:	e856 2f00 	ldrex	r2, [r6]
   22adc:	e846 3100 	strex	r1, r3, [r6]
   22ae0:	2900      	cmp	r1, #0
   22ae2:	d1f9      	bne.n	22ad8 <nrf_flash_sync_exe+0xe8>
   22ae4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22ae8:	f04f 30ff 	mov.w	r0, #4294967295
   22aec:	f04f 31ff 	mov.w	r1, #4294967295
   22af0:	f7fe ff04 	bl	218fc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   22af4:	b130      	cbz	r0, 22b04 <nrf_flash_sync_exe+0x114>
   22af6:	490b      	ldr	r1, [pc, #44]	; (22b24 <nrf_flash_sync_exe+0x134>)
   22af8:	480b      	ldr	r0, [pc, #44]	; (22b28 <nrf_flash_sync_exe+0x138>)
   22afa:	22bf      	movs	r2, #191	; 0xbf
   22afc:	f008 f826 	bl	2ab4c <assert_print>
   22b00:	21bf      	movs	r1, #191	; 0xbf
   22b02:	e785      	b.n	22a10 <nrf_flash_sync_exe+0x20>
	mpsl_timeslot_session_close(_context.session_id);
   22b04:	7e20      	ldrb	r0, [r4, #24]
   22b06:	f7ee f839 	bl	10b7c <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   22b0a:	f7fe feff 	bl	2190c <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22b0e:	f3bf 8f5b 	dmb	ish
   22b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22b14:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   22b18:	b113      	cbz	r3, 22b20 <nrf_flash_sync_exe+0x130>
	z_impl_k_sem_reset(sem);
   22b1a:	4807      	ldr	r0, [pc, #28]	; (22b38 <nrf_flash_sync_exe+0x148>)
   22b1c:	f002 f98c 	bl	24e38 <z_impl_k_sem_reset>
	return _context.status;
   22b20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   22b22:	e788      	b.n	22a36 <nrf_flash_sync_exe+0x46>
   22b24:	00033d4f 	.word	0x00033d4f
   22b28:	0003013d 	.word	0x0003013d
   22b2c:	200036f4 	.word	0x200036f4
   22b30:	00022919 	.word	0x00022919
   22b34:	00033d89 	.word	0x00033d89
   22b38:	200036dc 	.word	0x200036dc
   22b3c:	000b7b44 	.word	0x000b7b44
   22b40:	00033db4 	.word	0x00033db4

00022b44 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b44:	4b07      	ldr	r3, [pc, #28]	; (22b64 <nrf_flash_sync_check_time_limit+0x20>)
   22b46:	2201      	movs	r2, #1
   22b48:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   22b4a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   22b4e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   22b52:	4418      	add	r0, r3
   22b54:	4b04      	ldr	r3, [pc, #16]	; (22b68 <nrf_flash_sync_check_time_limit+0x24>)
   22b56:	69db      	ldr	r3, [r3, #28]
}
   22b58:	4298      	cmp	r0, r3
   22b5a:	bf34      	ite	cc
   22b5c:	2000      	movcc	r0, #0
   22b5e:	2001      	movcs	r0, #1
   22b60:	4770      	bx	lr
   22b62:	bf00      	nop
   22b64:	40008000 	.word	0x40008000
   22b68:	200036dc 	.word	0x200036dc

00022b6c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22b70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22b74:	2a08      	cmp	r2, #8
   22b76:	d106      	bne.n	22b86 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22b78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   22b7c:	2b05      	cmp	r3, #5
   22b7e:	d802      	bhi.n	22b86 <nrf52_errata_103+0x1a>
   22b80:	4a02      	ldr	r2, [pc, #8]	; (22b8c <nrf52_errata_103+0x20>)
   22b82:	5cd0      	ldrb	r0, [r2, r3]
   22b84:	4770      	bx	lr
                        return false;
   22b86:	2000      	movs	r0, #0
}
   22b88:	4770      	bx	lr
   22b8a:	bf00      	nop
   22b8c:	00033dd7 	.word	0x00033dd7

00022b90 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22b90:	4a02      	ldr	r2, [pc, #8]	; (22b9c <nvmc_wait+0xc>)
   22b92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   22b96:	2b00      	cmp	r3, #0
   22b98:	d0fb      	beq.n	22b92 <nvmc_wait+0x2>
}
   22b9a:	4770      	bx	lr
   22b9c:	4001e000 	.word	0x4001e000

00022ba0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   22ba0:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22ba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22ba6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22baa:	2a08      	cmp	r2, #8
   22bac:	d14e      	bne.n	22c4c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   22bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22bb2:	2100      	movs	r1, #0
   22bb4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   22bb8:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   22bbc:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   22bc0:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   22bc4:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   22bc8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   22bcc:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   22bd0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   22bd4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   22bd8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   22bdc:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   22be0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   22be4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   22be8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   22bec:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   22bf0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   22bf4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   22bf8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   22bfc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   22c00:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   22c04:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   22c08:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   22c0c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   22c10:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   22c14:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   22c18:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   22c1c:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   22c20:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22c24:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   22c28:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   22c2c:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   22c30:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22c34:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   22c38:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   22c3c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   22c40:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22c44:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   22c48:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   22c4c:	f7ff ff8e 	bl	22b6c <nrf52_errata_103>
   22c50:	b118      	cbz	r0, 22c5a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   22c52:	4b3b      	ldr	r3, [pc, #236]	; (22d40 <SystemInit+0x1a0>)
   22c54:	4a3b      	ldr	r2, [pc, #236]	; (22d44 <SystemInit+0x1a4>)
   22c56:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   22c5a:	f7ff ff87 	bl	22b6c <nrf52_errata_103>
   22c5e:	b118      	cbz	r0, 22c68 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   22c60:	4b39      	ldr	r3, [pc, #228]	; (22d48 <SystemInit+0x1a8>)
   22c62:	22fb      	movs	r2, #251	; 0xfb
   22c64:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   22c68:	f7ff ff80 	bl	22b6c <nrf52_errata_103>
   22c6c:	b170      	cbz	r0, 22c8c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   22c6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22c72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22c76:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   22c7a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   22c7e:	f022 020f 	bic.w	r2, r2, #15
   22c82:	f003 030f 	and.w	r3, r3, #15
   22c86:	4313      	orrs	r3, r2
   22c88:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   22c8c:	f7ff ff6e 	bl	22b6c <nrf52_errata_103>
   22c90:	b120      	cbz	r0, 22c9c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   22c92:	4b2e      	ldr	r3, [pc, #184]	; (22d4c <SystemInit+0x1ac>)
   22c94:	f44f 7200 	mov.w	r2, #512	; 0x200
   22c98:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22ca0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22ca4:	2b08      	cmp	r3, #8
   22ca6:	d11a      	bne.n	22cde <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   22ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22cac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   22cb0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   22cb2:	bf44      	itt	mi
   22cb4:	f06f 0201 	mvnmi.w	r2, #1
   22cb8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22cbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22cc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   22cc4:	2b05      	cmp	r3, #5
   22cc6:	d802      	bhi.n	22cce <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   22cc8:	4a21      	ldr	r2, [pc, #132]	; (22d50 <SystemInit+0x1b0>)
   22cca:	5cd3      	ldrb	r3, [r2, r3]
   22ccc:	b13b      	cbz	r3, 22cde <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   22cce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22cd2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   22cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22cda:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22cde:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22ce2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   22ce6:	2a00      	cmp	r2, #0
   22ce8:	db03      	blt.n	22cf2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   22cea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22cee:	2b00      	cmp	r3, #0
   22cf0:	da22      	bge.n	22d38 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22cf2:	4918      	ldr	r1, [pc, #96]	; (22d54 <SystemInit+0x1b4>)
   22cf4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22cf6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22cfa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22cfe:	2412      	movs	r4, #18
    nvmc_wait();
   22d00:	f7ff ff46 	bl	22b90 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22d04:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   22d08:	f7ff ff42 	bl	22b90 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   22d0c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22d10:	f7ff ff3e 	bl	22b90 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22d14:	2300      	movs	r3, #0
   22d16:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   22d1a:	f7ff ff39 	bl	22b90 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   22d1e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22d22:	490d      	ldr	r1, [pc, #52]	; (22d58 <SystemInit+0x1b8>)
   22d24:	4b0d      	ldr	r3, [pc, #52]	; (22d5c <SystemInit+0x1bc>)
   22d26:	68ca      	ldr	r2, [r1, #12]
   22d28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22d2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22d2e:	60cb      	str	r3, [r1, #12]
   22d30:	f3bf 8f4f 	dsb	sy
    __NOP();
   22d34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22d36:	e7fd      	b.n	22d34 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   22d38:	4b09      	ldr	r3, [pc, #36]	; (22d60 <SystemInit+0x1c0>)
   22d3a:	4a0a      	ldr	r2, [pc, #40]	; (22d64 <SystemInit+0x1c4>)
   22d3c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   22d3e:	bd10      	pop	{r4, pc}
   22d40:	40005000 	.word	0x40005000
   22d44:	00038148 	.word	0x00038148
   22d48:	4000f000 	.word	0x4000f000
   22d4c:	40029000 	.word	0x40029000
   22d50:	00033dd1 	.word	0x00033dd1
   22d54:	4001e000 	.word	0x4001e000
   22d58:	e000ed00 	.word	0xe000ed00
   22d5c:	05fa0004 	.word	0x05fa0004
   22d60:	200008d4 	.word	0x200008d4
   22d64:	03d09000 	.word	0x03d09000

00022d68 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   22d68:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   22d6a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   22d6c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22d6e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   22d72:	fab2 f382 	clz	r3, r2
   22d76:	f1c3 031f 	rsb	r3, r3, #31
   22d7a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   22d7c:	fa05 f403 	lsl.w	r4, r5, r3
   22d80:	ea22 0404 	bic.w	r4, r2, r4
   22d84:	e850 6f00 	ldrex	r6, [r0]
   22d88:	4296      	cmp	r6, r2
   22d8a:	d104      	bne.n	22d96 <nrfx_flag32_alloc+0x2e>
   22d8c:	e840 4c00 	strex	ip, r4, [r0]
   22d90:	f1bc 0f00 	cmp.w	ip, #0
   22d94:	d1f6      	bne.n	22d84 <nrfx_flag32_alloc+0x1c>
   22d96:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22d9a:	d1e7      	bne.n	22d6c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   22d9c:	4801      	ldr	r0, [pc, #4]	; (22da4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   22d9e:	700b      	strb	r3, [r1, #0]
}
   22da0:	bd70      	pop	{r4, r5, r6, pc}
   22da2:	bf00      	nop
   22da4:	0bad0000 	.word	0x0bad0000

00022da8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   22da8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   22daa:	6803      	ldr	r3, [r0, #0]
   22dac:	40cb      	lsrs	r3, r1
   22dae:	07db      	lsls	r3, r3, #31
   22db0:	d414      	bmi.n	22ddc <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   22db2:	2301      	movs	r3, #1
   22db4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   22db6:	6802      	ldr	r2, [r0, #0]
   22db8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   22dbc:	ea43 0102 	orr.w	r1, r3, r2
   22dc0:	e850 4f00 	ldrex	r4, [r0]
   22dc4:	4294      	cmp	r4, r2
   22dc6:	d104      	bne.n	22dd2 <nrfx_flag32_free+0x2a>
   22dc8:	e840 1c00 	strex	ip, r1, [r0]
   22dcc:	f1bc 0f00 	cmp.w	ip, #0
   22dd0:	d1f6      	bne.n	22dc0 <nrfx_flag32_free+0x18>
   22dd2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22dd6:	d1ee      	bne.n	22db6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   22dd8:	4801      	ldr	r0, [pc, #4]	; (22de0 <nrfx_flag32_free+0x38>)
}
   22dda:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22ddc:	4801      	ldr	r0, [pc, #4]	; (22de4 <nrfx_flag32_free+0x3c>)
   22dde:	e7fc      	b.n	22dda <nrfx_flag32_free+0x32>
   22de0:	0bad0000 	.word	0x0bad0000
   22de4:	0bad0004 	.word	0x0bad0004

00022de8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22de8:	4b03      	ldr	r3, [pc, #12]	; (22df8 <pin_in_use_by_te+0x10>)
   22dea:	3008      	adds	r0, #8
   22dec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22df0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   22df4:	4770      	bx	lr
   22df6:	bf00      	nop
   22df8:	200008d8 	.word	0x200008d8

00022dfc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   22dfc:	4b04      	ldr	r3, [pc, #16]	; (22e10 <pin_has_trigger+0x14>)
   22dfe:	3008      	adds	r0, #8
   22e00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22e04:	f010 001c 	ands.w	r0, r0, #28
   22e08:	bf18      	it	ne
   22e0a:	2001      	movne	r0, #1
   22e0c:	4770      	bx	lr
   22e0e:	bf00      	nop
   22e10:	200008d8 	.word	0x200008d8

00022e14 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22e14:	4b03      	ldr	r3, [pc, #12]	; (22e24 <pin_is_output+0x10>)
   22e16:	3008      	adds	r0, #8
   22e18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   22e1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   22e20:	4770      	bx	lr
   22e22:	bf00      	nop
   22e24:	200008d8 	.word	0x200008d8

00022e28 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22e28:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22e2a:	f100 0308 	add.w	r3, r0, #8
   22e2e:	4c0c      	ldr	r4, [pc, #48]	; (22e60 <call_handler+0x38>)
   22e30:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   22e34:	05da      	lsls	r2, r3, #23
{
   22e36:	4605      	mov	r5, r0
   22e38:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22e3a:	d507      	bpl.n	22e4c <call_handler+0x24>
   22e3c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22e40:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22e44:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   22e48:	6852      	ldr	r2, [r2, #4]
   22e4a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   22e4c:	68a3      	ldr	r3, [r4, #8]
   22e4e:	b12b      	cbz	r3, 22e5c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22e50:	68e2      	ldr	r2, [r4, #12]
   22e52:	4631      	mov	r1, r6
   22e54:	4628      	mov	r0, r5
    }
}
   22e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22e5a:	4718      	bx	r3
}
   22e5c:	bd70      	pop	{r4, r5, r6, pc}
   22e5e:	bf00      	nop
   22e60:	200008d8 	.word	0x200008d8

00022e64 <release_handler>:
{
   22e64:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22e66:	4a18      	ldr	r2, [pc, #96]	; (22ec8 <release_handler+0x64>)
   22e68:	3008      	adds	r0, #8
   22e6a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   22e6e:	05d9      	lsls	r1, r3, #23
   22e70:	d51d      	bpl.n	22eae <release_handler+0x4a>
   22e72:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22e76:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22e7a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22e7e:	f102 040e 	add.w	r4, r2, #14
   22e82:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22e84:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   22e88:	f413 7f80 	tst.w	r3, #256	; 0x100
   22e8c:	d003      	beq.n	22e96 <release_handler+0x32>
   22e8e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   22e92:	4299      	cmp	r1, r3
   22e94:	d00b      	beq.n	22eae <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22e96:	3001      	adds	r0, #1
   22e98:	2830      	cmp	r0, #48	; 0x30
   22e9a:	d1f3      	bne.n	22e84 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   22e9c:	2300      	movs	r3, #0
   22e9e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22ea2:	480a      	ldr	r0, [pc, #40]	; (22ecc <release_handler+0x68>)
   22ea4:	f7ff ff80 	bl	22da8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22ea8:	4b09      	ldr	r3, [pc, #36]	; (22ed0 <release_handler+0x6c>)
   22eaa:	4298      	cmp	r0, r3
   22eac:	d100      	bne.n	22eb0 <release_handler+0x4c>
}
   22eae:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22eb0:	4908      	ldr	r1, [pc, #32]	; (22ed4 <release_handler+0x70>)
   22eb2:	4809      	ldr	r0, [pc, #36]	; (22ed8 <release_handler+0x74>)
   22eb4:	f44f 7299 	mov.w	r2, #306	; 0x132
   22eb8:	f007 fe48 	bl	2ab4c <assert_print>
   22ebc:	4805      	ldr	r0, [pc, #20]	; (22ed4 <release_handler+0x70>)
   22ebe:	f44f 7199 	mov.w	r1, #306	; 0x132
   22ec2:	f007 fe3c 	bl	2ab3e <assert_post_action>
   22ec6:	bf00      	nop
   22ec8:	200008d8 	.word	0x200008d8
   22ecc:	2000094c 	.word	0x2000094c
   22ed0:	0bad0000 	.word	0x0bad0000
   22ed4:	00033ddd 	.word	0x00033ddd
   22ed8:	0003013d 	.word	0x0003013d

00022edc <pin_handler_trigger_uninit>:
{
   22edc:	b538      	push	{r3, r4, r5, lr}
   22ede:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   22ee0:	f7ff ff82 	bl	22de8 <pin_in_use_by_te>
   22ee4:	4c09      	ldr	r4, [pc, #36]	; (22f0c <pin_handler_trigger_uninit+0x30>)
   22ee6:	f102 0508 	add.w	r5, r2, #8
   22eea:	b140      	cbz	r0, 22efe <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22eec:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   22ef0:	4907      	ldr	r1, [pc, #28]	; (22f10 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   22ef2:	0b5b      	lsrs	r3, r3, #13
   22ef4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   22ef8:	2000      	movs	r0, #0
   22efa:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   22efe:	4610      	mov	r0, r2
   22f00:	f7ff ffb0 	bl	22e64 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   22f04:	2300      	movs	r3, #0
   22f06:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   22f0a:	bd38      	pop	{r3, r4, r5, pc}
   22f0c:	200008d8 	.word	0x200008d8
   22f10:	40006000 	.word	0x40006000

00022f14 <nrf_gpio_pin_port_decode>:
{
   22f14:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22f16:	6802      	ldr	r2, [r0, #0]
{
   22f18:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22f1a:	4610      	mov	r0, r2
   22f1c:	f00b fd13 	bl	2e946 <nrf_gpio_pin_present_check>
   22f20:	b950      	cbnz	r0, 22f38 <nrf_gpio_pin_port_decode+0x24>
   22f22:	4910      	ldr	r1, [pc, #64]	; (22f64 <nrf_gpio_pin_port_decode+0x50>)
   22f24:	4810      	ldr	r0, [pc, #64]	; (22f68 <nrf_gpio_pin_port_decode+0x54>)
   22f26:	f240 2247 	movw	r2, #583	; 0x247
   22f2a:	f007 fe0f 	bl	2ab4c <assert_print>
   22f2e:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   22f32:	480c      	ldr	r0, [pc, #48]	; (22f64 <nrf_gpio_pin_port_decode+0x50>)
   22f34:	f007 fe03 	bl	2ab3e <assert_post_action>
    *p_pin = pin_number & 0x1F;
   22f38:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f3c:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   22f3e:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f40:	d00a      	beq.n	22f58 <nrf_gpio_pin_port_decode+0x44>
   22f42:	2a01      	cmp	r2, #1
   22f44:	d00b      	beq.n	22f5e <nrf_gpio_pin_port_decode+0x4a>
            NRFX_ASSERT(0);
   22f46:	4907      	ldr	r1, [pc, #28]	; (22f64 <nrf_gpio_pin_port_decode+0x50>)
   22f48:	4807      	ldr	r0, [pc, #28]	; (22f68 <nrf_gpio_pin_port_decode+0x54>)
   22f4a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   22f4e:	f007 fdfd 	bl	2ab4c <assert_print>
   22f52:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22f56:	e7ec      	b.n	22f32 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   22f58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   22f5c:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22f5e:	4803      	ldr	r0, [pc, #12]	; (22f6c <nrf_gpio_pin_port_decode+0x58>)
   22f60:	e7fc      	b.n	22f5c <nrf_gpio_pin_port_decode+0x48>
   22f62:	bf00      	nop
   22f64:	0003350a 	.word	0x0003350a
   22f68:	0003013d 	.word	0x0003013d
   22f6c:	50000300 	.word	0x50000300

00022f70 <nrfx_gpiote_input_configure>:
{
   22f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22f72:	4604      	mov	r4, r0
   22f74:	b085      	sub	sp, #20
   22f76:	4617      	mov	r7, r2
   22f78:	461d      	mov	r5, r3
    if (p_input_config)
   22f7a:	b1d9      	cbz	r1, 22fb4 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   22f7c:	f00b fcf4 	bl	2e968 <pin_is_task_output>
   22f80:	bb00      	cbnz	r0, 22fc4 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22f82:	460b      	mov	r3, r1
   22f84:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22f88:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   22f8c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22f90:	f10d 020f 	add.w	r2, sp, #15
   22f94:	f10d 010e 	add.w	r1, sp, #14
   22f98:	4620      	mov	r0, r4
   22f9a:	f00b fcf0 	bl	2e97e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22f9e:	4a44      	ldr	r2, [pc, #272]	; (230b0 <nrfx_gpiote_input_configure+0x140>)
   22fa0:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   22fa4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22fa8:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22fac:	f043 0301 	orr.w	r3, r3, #1
   22fb0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   22fb4:	b34f      	cbz	r7, 2300a <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   22fb6:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22fb8:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22fba:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   22fbc:	f7ff ff2a 	bl	22e14 <pin_is_output>
   22fc0:	b110      	cbz	r0, 22fc8 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   22fc2:	b1ba      	cbz	r2, 22ff4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   22fc4:	483b      	ldr	r0, [pc, #236]	; (230b4 <nrfx_gpiote_input_configure+0x144>)
   22fc6:	e022      	b.n	2300e <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22fc8:	4b39      	ldr	r3, [pc, #228]	; (230b0 <nrfx_gpiote_input_configure+0x140>)
   22fca:	f104 0c08 	add.w	ip, r4, #8
   22fce:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   22fd2:	f021 0120 	bic.w	r1, r1, #32
   22fd6:	04c9      	lsls	r1, r1, #19
   22fd8:	0cc9      	lsrs	r1, r1, #19
   22fda:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   22fde:	b14a      	cbz	r2, 22ff4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   22fe0:	2e03      	cmp	r6, #3
   22fe2:	d8ef      	bhi.n	22fc4 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22fe4:	687a      	ldr	r2, [r7, #4]
   22fe6:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22fe8:	b99e      	cbnz	r6, 23012 <nrfx_gpiote_input_configure+0xa2>
   22fea:	4b33      	ldr	r3, [pc, #204]	; (230b8 <nrfx_gpiote_input_configure+0x148>)
   22fec:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   22ff0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22ff4:	4a2e      	ldr	r2, [pc, #184]	; (230b0 <nrfx_gpiote_input_configure+0x140>)
   22ff6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22ffa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22ffe:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23002:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   23006:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2300a:	bb3d      	cbnz	r5, 2305c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   2300c:	482b      	ldr	r0, [pc, #172]	; (230bc <nrfx_gpiote_input_configure+0x14c>)
}
   2300e:	b005      	add	sp, #20
   23010:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23012:	00ba      	lsls	r2, r7, #2
   23014:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   23018:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2301c:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   23020:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23024:	f020 0003 	bic.w	r0, r0, #3
   23028:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2302c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   23030:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   23034:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   23038:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2303c:	0220      	lsls	r0, r4, #8
   2303e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23042:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   23046:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   2304a:	ea40 000e 	orr.w	r0, r0, lr
   2304e:	f041 0120 	orr.w	r1, r1, #32
   23052:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   23056:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   2305a:	e7cb      	b.n	22ff4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2305c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   23060:	4620      	mov	r0, r4
   23062:	f7ff feff 	bl	22e64 <release_handler>
    if (!handler)
   23066:	2e00      	cmp	r6, #0
   23068:	d0d0      	beq.n	2300c <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2306a:	4d11      	ldr	r5, [pc, #68]	; (230b0 <nrfx_gpiote_input_configure+0x140>)
   2306c:	e9d5 2300 	ldrd	r2, r3, [r5]
   23070:	4296      	cmp	r6, r2
   23072:	d101      	bne.n	23078 <nrfx_gpiote_input_configure+0x108>
   23074:	429f      	cmp	r7, r3
   23076:	d018      	beq.n	230aa <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   23078:	4811      	ldr	r0, [pc, #68]	; (230c0 <nrfx_gpiote_input_configure+0x150>)
   2307a:	f10d 010f 	add.w	r1, sp, #15
   2307e:	f7ff fe73 	bl	22d68 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   23082:	4b0e      	ldr	r3, [pc, #56]	; (230bc <nrfx_gpiote_input_configure+0x14c>)
   23084:	4298      	cmp	r0, r3
   23086:	d1c2      	bne.n	2300e <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   23088:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   2308c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   23090:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23094:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   23096:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   23098:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   2309c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   230a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   230a4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   230a8:	e7b0      	b.n	2300c <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   230aa:	2200      	movs	r2, #0
   230ac:	e7ee      	b.n	2308c <nrfx_gpiote_input_configure+0x11c>
   230ae:	bf00      	nop
   230b0:	200008d8 	.word	0x200008d8
   230b4:	0bad0004 	.word	0x0bad0004
   230b8:	40006000 	.word	0x40006000
   230bc:	0bad0000 	.word	0x0bad0000
   230c0:	2000094c 	.word	0x2000094c

000230c4 <nrfx_gpiote_output_configure>:
{
   230c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   230c6:	4604      	mov	r4, r0
   230c8:	b085      	sub	sp, #20
   230ca:	4615      	mov	r5, r2
    if (p_config)
   230cc:	b321      	cbz	r1, 23118 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   230ce:	f7ff fea1 	bl	22e14 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   230d2:	b920      	cbnz	r0, 230de <nrfx_gpiote_output_configure+0x1a>
   230d4:	4620      	mov	r0, r4
   230d6:	f7ff fe87 	bl	22de8 <pin_in_use_by_te>
   230da:	2800      	cmp	r0, #0
   230dc:	d15e      	bne.n	2319c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   230de:	4620      	mov	r0, r4
   230e0:	f7ff fe8c 	bl	22dfc <pin_has_trigger>
   230e4:	b110      	cbz	r0, 230ec <nrfx_gpiote_output_configure+0x28>
   230e6:	784b      	ldrb	r3, [r1, #1]
   230e8:	2b01      	cmp	r3, #1
   230ea:	d057      	beq.n	2319c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   230ec:	2301      	movs	r3, #1
   230ee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   230f2:	2300      	movs	r3, #0
   230f4:	e9cd 1300 	strd	r1, r3, [sp]
   230f8:	1c4a      	adds	r2, r1, #1
   230fa:	1c8b      	adds	r3, r1, #2
   230fc:	4620      	mov	r0, r4
   230fe:	f10d 010f 	add.w	r1, sp, #15
   23102:	f00b fc3c 	bl	2e97e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23106:	4a26      	ldr	r2, [pc, #152]	; (231a0 <nrfx_gpiote_output_configure+0xdc>)
   23108:	f104 0108 	add.w	r1, r4, #8
   2310c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23110:	f043 0303 	orr.w	r3, r3, #3
   23114:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   23118:	b915      	cbnz	r5, 23120 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   2311a:	4822      	ldr	r0, [pc, #136]	; (231a4 <nrfx_gpiote_output_configure+0xe0>)
}
   2311c:	b005      	add	sp, #20
   2311e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   23120:	4620      	mov	r0, r4
   23122:	f7ff fe77 	bl	22e14 <pin_is_output>
        if (pin_is_input(pin))
   23126:	b3c8      	cbz	r0, 2319c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   23128:	4e1d      	ldr	r6, [pc, #116]	; (231a0 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   2312a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2312e:	f104 0708 	add.w	r7, r4, #8
   23132:	4661      	mov	r1, ip
   23134:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   23138:	0089      	lsls	r1, r1, #2
   2313a:	f020 0020 	bic.w	r0, r0, #32
   2313e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23142:	04c0      	lsls	r0, r0, #19
   23144:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   23148:	0cc0      	lsrs	r0, r0, #19
   2314a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   2314e:	2300      	movs	r3, #0
   23150:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   23154:	786a      	ldrb	r2, [r5, #1]
   23156:	2a00      	cmp	r2, #0
   23158:	d0df      	beq.n	2311a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2315a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   2315e:	78ad      	ldrb	r5, [r5, #2]
   23160:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   23164:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23168:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2316c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   23170:	0223      	lsls	r3, r4, #8
   23172:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   23176:	0412      	lsls	r2, r2, #16
   23178:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2317c:	ea43 030e 	orr.w	r3, r3, lr
   23180:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   23182:	052a      	lsls	r2, r5, #20
   23184:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23188:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2318c:	4313      	orrs	r3, r2
   2318e:	f040 0020 	orr.w	r0, r0, #32
   23192:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   23196:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   2319a:	e7be      	b.n	2311a <nrfx_gpiote_output_configure+0x56>
{
   2319c:	4802      	ldr	r0, [pc, #8]	; (231a8 <nrfx_gpiote_output_configure+0xe4>)
   2319e:	e7bd      	b.n	2311c <nrfx_gpiote_output_configure+0x58>
   231a0:	200008d8 	.word	0x200008d8
   231a4:	0bad0000 	.word	0x0bad0000
   231a8:	0bad0004 	.word	0x0bad0004

000231ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   231ac:	4b01      	ldr	r3, [pc, #4]	; (231b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   231ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   231b2:	4770      	bx	lr
   231b4:	200008d8 	.word	0x200008d8

000231b8 <nrfx_gpiote_channel_get>:
{
   231b8:	b508      	push	{r3, lr}
   231ba:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   231bc:	b951      	cbnz	r1, 231d4 <nrfx_gpiote_channel_get+0x1c>
   231be:	490c      	ldr	r1, [pc, #48]	; (231f0 <nrfx_gpiote_channel_get+0x38>)
   231c0:	480c      	ldr	r0, [pc, #48]	; (231f4 <nrfx_gpiote_channel_get+0x3c>)
   231c2:	f240 2235 	movw	r2, #565	; 0x235
   231c6:	f007 fcc1 	bl	2ab4c <assert_print>
   231ca:	4809      	ldr	r0, [pc, #36]	; (231f0 <nrfx_gpiote_channel_get+0x38>)
   231cc:	f240 2135 	movw	r1, #565	; 0x235
   231d0:	f007 fcb5 	bl	2ab3e <assert_post_action>
    if (pin_in_use_by_te(pin))
   231d4:	f7ff fe08 	bl	22de8 <pin_in_use_by_te>
   231d8:	b138      	cbz	r0, 231ea <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   231da:	4b07      	ldr	r3, [pc, #28]	; (231f8 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   231dc:	4807      	ldr	r0, [pc, #28]	; (231fc <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   231de:	3208      	adds	r2, #8
   231e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   231e4:	0b5b      	lsrs	r3, r3, #13
   231e6:	700b      	strb	r3, [r1, #0]
}
   231e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   231ea:	4805      	ldr	r0, [pc, #20]	; (23200 <nrfx_gpiote_channel_get+0x48>)
   231ec:	e7fc      	b.n	231e8 <nrfx_gpiote_channel_get+0x30>
   231ee:	bf00      	nop
   231f0:	00033ddd 	.word	0x00033ddd
   231f4:	0003013d 	.word	0x0003013d
   231f8:	200008d8 	.word	0x200008d8
   231fc:	0bad0000 	.word	0x0bad0000
   23200:	0bad0004 	.word	0x0bad0004

00023204 <nrfx_gpiote_init>:
{
   23204:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23206:	4c0f      	ldr	r4, [pc, #60]	; (23244 <nrfx_gpiote_init+0x40>)
   23208:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   2320c:	b9bd      	cbnz	r5, 2323e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2320e:	2260      	movs	r2, #96	; 0x60
   23210:	4629      	mov	r1, r5
   23212:	f104 0010 	add.w	r0, r4, #16
   23216:	f008 fc7a 	bl	2bb0e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2321a:	2006      	movs	r0, #6
   2321c:	f7f1 fd08 	bl	14c30 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23220:	4b09      	ldr	r3, [pc, #36]	; (23248 <nrfx_gpiote_init+0x44>)
    return err_code;
   23222:	480a      	ldr	r0, [pc, #40]	; (2324c <nrfx_gpiote_init+0x48>)
   23224:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   23228:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2322c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23230:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23234:	2301      	movs	r3, #1
   23236:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2323a:	6763      	str	r3, [r4, #116]	; 0x74
}
   2323c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2323e:	4804      	ldr	r0, [pc, #16]	; (23250 <nrfx_gpiote_init+0x4c>)
   23240:	e7fc      	b.n	2323c <nrfx_gpiote_init+0x38>
   23242:	bf00      	nop
   23244:	200008d8 	.word	0x200008d8
   23248:	40006000 	.word	0x40006000
   2324c:	0bad0000 	.word	0x0bad0000
   23250:	0bad0005 	.word	0x0bad0005

00023254 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23254:	4b03      	ldr	r3, [pc, #12]	; (23264 <nrfx_gpiote_is_init+0x10>)
   23256:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2325a:	3800      	subs	r0, #0
   2325c:	bf18      	it	ne
   2325e:	2001      	movne	r0, #1
   23260:	4770      	bx	lr
   23262:	bf00      	nop
   23264:	200008d8 	.word	0x200008d8

00023268 <nrfx_gpiote_channel_free>:
{
   23268:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2326a:	4801      	ldr	r0, [pc, #4]	; (23270 <nrfx_gpiote_channel_free+0x8>)
   2326c:	f7ff bd9c 	b.w	22da8 <nrfx_flag32_free>
   23270:	20000948 	.word	0x20000948

00023274 <nrfx_gpiote_channel_alloc>:
{
   23274:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   23276:	4801      	ldr	r0, [pc, #4]	; (2327c <nrfx_gpiote_channel_alloc+0x8>)
   23278:	f7ff bd76 	b.w	22d68 <nrfx_flag32_alloc>
   2327c:	20000948 	.word	0x20000948

00023280 <nrfx_gpiote_trigger_enable>:
{
   23280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23282:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   23284:	f7ff fdba 	bl	22dfc <pin_has_trigger>
   23288:	b950      	cbnz	r0, 232a0 <nrfx_gpiote_trigger_enable+0x20>
   2328a:	492c      	ldr	r1, [pc, #176]	; (2333c <nrfx_gpiote_trigger_enable+0xbc>)
   2328c:	482c      	ldr	r0, [pc, #176]	; (23340 <nrfx_gpiote_trigger_enable+0xc0>)
   2328e:	f240 32df 	movw	r2, #991	; 0x3df
   23292:	f007 fc5b 	bl	2ab4c <assert_print>
   23296:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   2329a:	4828      	ldr	r0, [pc, #160]	; (2333c <nrfx_gpiote_trigger_enable+0xbc>)
   2329c:	f007 fc4f 	bl	2ab3e <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   232a0:	4620      	mov	r0, r4
   232a2:	f7ff fda1 	bl	22de8 <pin_in_use_by_te>
   232a6:	4a27      	ldr	r2, [pc, #156]	; (23344 <nrfx_gpiote_trigger_enable+0xc4>)
   232a8:	f104 0508 	add.w	r5, r4, #8
   232ac:	b1f8      	cbz	r0, 232ee <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   232ae:	4620      	mov	r0, r4
   232b0:	f7ff fdb0 	bl	22e14 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   232b4:	b9d8      	cbnz	r0, 232ee <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   232b6:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   232ba:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   232bc:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   232be:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   232c2:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   232c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   232ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   232ce:	6020      	str	r0, [r4, #0]
   232d0:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   232d2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   232d6:	f040 0001 	orr.w	r0, r0, #1
   232da:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   232de:	b121      	cbz	r1, 232ea <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   232e0:	2301      	movs	r3, #1
   232e2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   232e4:	4a18      	ldr	r2, [pc, #96]	; (23348 <nrfx_gpiote_trigger_enable+0xc8>)
   232e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   232ea:	b003      	add	sp, #12
   232ec:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   232ee:	b941      	cbnz	r1, 23302 <nrfx_gpiote_trigger_enable+0x82>
   232f0:	4912      	ldr	r1, [pc, #72]	; (2333c <nrfx_gpiote_trigger_enable+0xbc>)
   232f2:	4813      	ldr	r0, [pc, #76]	; (23340 <nrfx_gpiote_trigger_enable+0xc0>)
   232f4:	f240 32ee 	movw	r2, #1006	; 0x3ee
   232f8:	f007 fc28 	bl	2ab4c <assert_print>
   232fc:	f240 31ee 	movw	r1, #1006	; 0x3ee
   23300:	e7cb      	b.n	2329a <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23302:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   23306:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2330a:	2b04      	cmp	r3, #4
   2330c:	d012      	beq.n	23334 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2330e:	2b05      	cmp	r3, #5
   23310:	d012      	beq.n	23338 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23312:	a801      	add	r0, sp, #4
   23314:	9401      	str	r4, [sp, #4]
   23316:	f7ff fdfd 	bl	22f14 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2331a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   2331c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23320:	40d9      	lsrs	r1, r3
   23322:	f001 0101 	and.w	r1, r1, #1
   23326:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23328:	4620      	mov	r0, r4
}
   2332a:	b003      	add	sp, #12
   2332c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23330:	f00b bb72 	b.w	2ea18 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23334:	2103      	movs	r1, #3
   23336:	e7f7      	b.n	23328 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   23338:	2102      	movs	r1, #2
   2333a:	e7f5      	b.n	23328 <nrfx_gpiote_trigger_enable+0xa8>
   2333c:	00033ddd 	.word	0x00033ddd
   23340:	0003013d 	.word	0x0003013d
   23344:	200008d8 	.word	0x200008d8
   23348:	40006000 	.word	0x40006000

0002334c <nrfx_gpiote_trigger_disable>:
{
   2334c:	b508      	push	{r3, lr}
   2334e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23350:	f7ff fd4a 	bl	22de8 <pin_in_use_by_te>
   23354:	b1c8      	cbz	r0, 2338a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   23356:	4610      	mov	r0, r2
   23358:	f7ff fd5c 	bl	22e14 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2335c:	b9a8      	cbnz	r0, 2338a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2335e:	3208      	adds	r2, #8
   23360:	4b0d      	ldr	r3, [pc, #52]	; (23398 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   23362:	490e      	ldr	r1, [pc, #56]	; (2339c <nrfx_gpiote_trigger_disable+0x50>)
   23364:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23368:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2336a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2336c:	409a      	lsls	r2, r3
   2336e:	009b      	lsls	r3, r3, #2
   23370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23374:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   23378:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2337c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23380:	f022 0203 	bic.w	r2, r2, #3
   23384:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23388:	bd08      	pop	{r3, pc}
   2338a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2338e:	2100      	movs	r1, #0
   23390:	4610      	mov	r0, r2
   23392:	f00b bb41 	b.w	2ea18 <nrf_gpio_cfg_sense_set>
   23396:	bf00      	nop
   23398:	200008d8 	.word	0x200008d8
   2339c:	40006000 	.word	0x40006000

000233a0 <nrfx_gpiote_pin_uninit>:
{
   233a0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   233a2:	4b0e      	ldr	r3, [pc, #56]	; (233dc <nrfx_gpiote_pin_uninit+0x3c>)
   233a4:	f100 0208 	add.w	r2, r0, #8
{
   233a8:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   233aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   233ae:	07db      	lsls	r3, r3, #31
   233b0:	d511      	bpl.n	233d6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   233b2:	f7ff ffcb 	bl	2334c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   233b6:	4620      	mov	r0, r4
   233b8:	f7ff fd90 	bl	22edc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   233bc:	a801      	add	r0, sp, #4
   233be:	9401      	str	r4, [sp, #4]
   233c0:	f7ff fda8 	bl	22f14 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   233c4:	9b01      	ldr	r3, [sp, #4]
   233c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   233ca:	2202      	movs	r2, #2
   233cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   233d0:	4803      	ldr	r0, [pc, #12]	; (233e0 <nrfx_gpiote_pin_uninit+0x40>)
}
   233d2:	b002      	add	sp, #8
   233d4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   233d6:	4803      	ldr	r0, [pc, #12]	; (233e4 <nrfx_gpiote_pin_uninit+0x44>)
   233d8:	e7fb      	b.n	233d2 <nrfx_gpiote_pin_uninit+0x32>
   233da:	bf00      	nop
   233dc:	200008d8 	.word	0x200008d8
   233e0:	0bad0000 	.word	0x0bad0000
   233e4:	0bad0004 	.word	0x0bad0004

000233e8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   233e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233ec:	4b69      	ldr	r3, [pc, #420]	; (23594 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   233ee:	486a      	ldr	r0, [pc, #424]	; (23598 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   233f0:	496a      	ldr	r1, [pc, #424]	; (2359c <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   233f2:	2600      	movs	r6, #0
{
   233f4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   233f6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   233f8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233fa:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   233fc:	b135      	cbz	r5, 2340c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   233fe:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   23402:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23404:	bf1e      	ittt	ne
   23406:	601c      	strne	r4, [r3, #0]
   23408:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   2340a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2340c:	3304      	adds	r3, #4
   2340e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   23410:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23414:	d1f1      	bne.n	233fa <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23416:	f8df 9180 	ldr.w	r9, [pc, #384]	; 23598 <nrfx_gpiote_irq_handler+0x1b0>
   2341a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2341e:	2b00      	cmp	r3, #0
   23420:	f000 809b 	beq.w	2355a <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   23424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   23428:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   2342c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   2342e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   23432:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   23436:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   23438:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2343c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   23440:	f10d 0a10 	add.w	sl, sp, #16
   23444:	ea4f 1348 	mov.w	r3, r8, lsl #5
   23448:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2344a:	f04f 0b01 	mov.w	fp, #1
   2344e:	e04b      	b.n	234e8 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   23450:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23452:	4a53      	ldr	r2, [pc, #332]	; (235a0 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   23454:	fa94 f4a4 	rbit	r4, r4
   23458:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   2345c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2345e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23460:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   23464:	f004 0107 	and.w	r1, r4, #7
   23468:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   2346c:	f81a 3000 	ldrb.w	r3, [sl, r0]
   23470:	9403      	str	r4, [sp, #12]
   23472:	fa0b f101 	lsl.w	r1, fp, r1
   23476:	ea23 0301 	bic.w	r3, r3, r1
   2347a:	08ba      	lsrs	r2, r7, #2
   2347c:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23480:	a803      	add	r0, sp, #12
   23482:	9201      	str	r2, [sp, #4]
   23484:	f7ff fd46 	bl	22f14 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23488:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   2348a:	9a01      	ldr	r2, [sp, #4]
   2348c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23490:	f3c7 0582 	ubfx	r5, r7, #2, #3
   23494:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   23498:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2349a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2349c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   234a0:	d52c      	bpl.n	234fc <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   234a2:	4639      	mov	r1, r7
   234a4:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   234a6:	b2dd      	uxtb	r5, r3
   234a8:	f7ff fcbe 	bl	22e28 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   234ac:	a803      	add	r0, sp, #12
   234ae:	9403      	str	r4, [sp, #12]
   234b0:	f7ff fd30 	bl	22f14 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   234b4:	9b03      	ldr	r3, [sp, #12]
   234b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   234ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   234be:	f3c3 4301 	ubfx	r3, r3, #16, #2
   234c2:	429d      	cmp	r5, r3
   234c4:	d107      	bne.n	234d6 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   234c6:	2100      	movs	r1, #0
   234c8:	4620      	mov	r0, r4
   234ca:	f00b faa5 	bl	2ea18 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   234ce:	4629      	mov	r1, r5
   234d0:	4620      	mov	r0, r4
   234d2:	f00b faa1 	bl	2ea18 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   234d6:	a803      	add	r0, sp, #12
   234d8:	9403      	str	r4, [sp, #12]
   234da:	f7ff fd1b 	bl	22f14 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   234de:	9b03      	ldr	r3, [sp, #12]
   234e0:	fa0b f303 	lsl.w	r3, fp, r3
   234e4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   234e8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   234ec:	2c00      	cmp	r4, #0
   234ee:	d1af      	bne.n	23450 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   234f0:	f1b8 0f00 	cmp.w	r8, #0
   234f4:	d11d      	bne.n	23532 <nrfx_gpiote_irq_handler+0x14a>
   234f6:	f04f 0801 	mov.w	r8, #1
   234fa:	e7a3      	b.n	23444 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   234fc:	2b02      	cmp	r3, #2
   234fe:	d10c      	bne.n	2351a <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23500:	2103      	movs	r1, #3
   23502:	4620      	mov	r0, r4
   23504:	f00b fa88 	bl	2ea18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23508:	f005 0305 	and.w	r3, r5, #5
   2350c:	2b01      	cmp	r3, #1
   2350e:	d1e2      	bne.n	234d6 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   23510:	4639      	mov	r1, r7
   23512:	4620      	mov	r0, r4
   23514:	f7ff fc88 	bl	22e28 <call_handler>
   23518:	e7dd      	b.n	234d6 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2351a:	2102      	movs	r1, #2
   2351c:	4620      	mov	r0, r4
   2351e:	9301      	str	r3, [sp, #4]
   23520:	f00b fa7a 	bl	2ea18 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   23524:	2d03      	cmp	r5, #3
   23526:	d0f3      	beq.n	23510 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23528:	9b01      	ldr	r3, [sp, #4]
   2352a:	2b03      	cmp	r3, #3
   2352c:	d1d3      	bne.n	234d6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2352e:	2d02      	cmp	r5, #2
   23530:	e7ed      	b.n	2350e <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   23532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23536:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   2353a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   2353e:	4919      	ldr	r1, [pc, #100]	; (235a4 <nrfx_gpiote_irq_handler+0x1bc>)
   23540:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   23544:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   23546:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   2354a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   2354e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   23550:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   23552:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   23556:	f47f af71 	bne.w	2343c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   2355a:	2401      	movs	r4, #1
    while (mask)
   2355c:	b916      	cbnz	r6, 23564 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2355e:	b007      	add	sp, #28
   23560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   23564:	fa96 f3a6 	rbit	r3, r6
   23568:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2356c:	fa04 f203 	lsl.w	r2, r4, r3
   23570:	009b      	lsls	r3, r3, #2
   23572:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23576:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2357a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2357e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   23582:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23586:	f3c0 2005 	ubfx	r0, r0, #8, #6
   2358a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2358e:	f7ff fc4b 	bl	22e28 <call_handler>
   23592:	e7e3      	b.n	2355c <nrfx_gpiote_irq_handler+0x174>
   23594:	40006100 	.word	0x40006100
   23598:	40006000 	.word	0x40006000
   2359c:	40006120 	.word	0x40006120
   235a0:	200008d8 	.word	0x200008d8
   235a4:	50000300 	.word	0x50000300

000235a8 <nvmc_word_write>:
   235a8:	4a04      	ldr	r2, [pc, #16]	; (235bc <nvmc_word_write+0x14>)
   235aa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   235ae:	07db      	lsls	r3, r3, #31
   235b0:	d5fb      	bpl.n	235aa <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   235b2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   235b4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   235b8:	4770      	bx	lr
   235ba:	bf00      	nop
   235bc:	4001e000 	.word	0x4001e000

000235c0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   235c0:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   235c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   235c6:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   235c8:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   235ca:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   235cc:	4290      	cmp	r0, r2
   235ce:	d207      	bcs.n	235e0 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   235d0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   235d2:	fbb0 f3f2 	udiv	r3, r0, r2
   235d6:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   235da:	b163      	cbz	r3, 235f6 <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   235dc:	480d      	ldr	r0, [pc, #52]	; (23614 <nrfx_nvmc_page_erase+0x54>)
   235de:	e018      	b.n	23612 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   235e0:	490d      	ldr	r1, [pc, #52]	; (23618 <nrfx_nvmc_page_erase+0x58>)
   235e2:	480e      	ldr	r0, [pc, #56]	; (2361c <nrfx_nvmc_page_erase+0x5c>)
   235e4:	f44f 7283 	mov.w	r2, #262	; 0x106
   235e8:	f007 fab0 	bl	2ab4c <assert_print>
   235ec:	480a      	ldr	r0, [pc, #40]	; (23618 <nrfx_nvmc_page_erase+0x58>)
   235ee:	f44f 7183 	mov.w	r1, #262	; 0x106
   235f2:	f007 faa4 	bl	2ab3e <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   235f6:	4b0a      	ldr	r3, [pc, #40]	; (23620 <nrfx_nvmc_page_erase+0x60>)
   235f8:	2202      	movs	r2, #2
   235fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   235fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   23602:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   23606:	07d2      	lsls	r2, r2, #31
   23608:	d5fb      	bpl.n	23602 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   2360a:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   2360c:	4805      	ldr	r0, [pc, #20]	; (23624 <nrfx_nvmc_page_erase+0x64>)
   2360e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   23612:	bd08      	pop	{r3, pc}
   23614:	0bad000a 	.word	0x0bad000a
   23618:	00033e27 	.word	0x00033e27
   2361c:	0003013d 	.word	0x0003013d
   23620:	4001e000 	.word	0x4001e000
   23624:	0bad0000 	.word	0x0bad0000

00023628 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   23628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2362a:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   2362c:	2101      	movs	r1, #1
{
   2362e:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   23630:	f00b fa01 	bl	2ea36 <is_valid_address>
   23634:	b950      	cbnz	r0, 2364c <nrfx_nvmc_word_write+0x24>
   23636:	4911      	ldr	r1, [pc, #68]	; (2367c <nrfx_nvmc_word_write+0x54>)
   23638:	4811      	ldr	r0, [pc, #68]	; (23680 <nrfx_nvmc_word_write+0x58>)
   2363a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   2363e:	f007 fa85 	bl	2ab4c <assert_print>
   23642:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   23646:	480d      	ldr	r0, [pc, #52]	; (2367c <nrfx_nvmc_word_write+0x54>)
   23648:	f007 fa79 	bl	2ab3e <assert_post_action>
   2364c:	f014 0703 	ands.w	r7, r4, #3
   23650:	d008      	beq.n	23664 <nrfx_nvmc_word_write+0x3c>
   23652:	490a      	ldr	r1, [pc, #40]	; (2367c <nrfx_nvmc_word_write+0x54>)
   23654:	480a      	ldr	r0, [pc, #40]	; (23680 <nrfx_nvmc_word_write+0x58>)
   23656:	f240 1295 	movw	r2, #405	; 0x195
   2365a:	f007 fa77 	bl	2ab4c <assert_print>
   2365e:	f240 1195 	movw	r1, #405	; 0x195
   23662:	e7f0      	b.n	23646 <nrfx_nvmc_word_write+0x1e>
   23664:	4e07      	ldr	r6, [pc, #28]	; (23684 <nrfx_nvmc_word_write+0x5c>)
   23666:	2301      	movs	r3, #1
   23668:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2366c:	4629      	mov	r1, r5
   2366e:	4620      	mov	r0, r4
   23670:	f7ff ff9a 	bl	235a8 <nvmc_word_write>
   23674:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   23678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2367a:	bf00      	nop
   2367c:	00033e27 	.word	0x00033e27
   23680:	0003013d 	.word	0x0003013d
   23684:	4001e000 	.word	0x4001e000

00023688 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23688:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2368a:	4801      	ldr	r0, [pc, #4]	; (23690 <nrfx_ppi_channel_alloc+0x8>)
   2368c:	f7ff bb6c 	b.w	22d68 <nrfx_flag32_alloc>
   23690:	20000954 	.word	0x20000954

00023694 <nrf_gpio_pin_port_decode>:
{
   23694:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23696:	6803      	ldr	r3, [r0, #0]
    switch (port)
   23698:	095a      	lsrs	r2, r3, #5
   2369a:	d00c      	beq.n	236b6 <nrf_gpio_pin_port_decode+0x22>
   2369c:	2a01      	cmp	r2, #1
   2369e:	d013      	beq.n	236c8 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   236a0:	490e      	ldr	r1, [pc, #56]	; (236dc <nrf_gpio_pin_port_decode+0x48>)
   236a2:	480f      	ldr	r0, [pc, #60]	; (236e0 <nrf_gpio_pin_port_decode+0x4c>)
   236a4:	f240 2247 	movw	r2, #583	; 0x247
   236a8:	f007 fa50 	bl	2ab4c <assert_print>
   236ac:	480b      	ldr	r0, [pc, #44]	; (236dc <nrf_gpio_pin_port_decode+0x48>)
   236ae:	f240 2147 	movw	r1, #583	; 0x247
   236b2:	f007 fa44 	bl	2ab3e <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   236b6:	f04f 32ff 	mov.w	r2, #4294967295
   236ba:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   236be:	07d9      	lsls	r1, r3, #31
   236c0:	d5ee      	bpl.n	236a0 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   236c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   236c6:	e008      	b.n	236da <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   236c8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   236cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   236d0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   236d2:	07d2      	lsls	r2, r2, #31
   236d4:	d5e4      	bpl.n	236a0 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   236d6:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   236d8:	4802      	ldr	r0, [pc, #8]	; (236e4 <nrf_gpio_pin_port_decode+0x50>)
}
   236da:	bd08      	pop	{r3, pc}
   236dc:	0003350a 	.word	0x0003350a
   236e0:	0003013d 	.word	0x0003013d
   236e4:	50000300 	.word	0x50000300

000236e8 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   236e8:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   236ea:	4d41      	ldr	r5, [pc, #260]	; (237f0 <qspi_xfer+0x108>)
   236ec:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   236f0:	b944      	cbnz	r4, 23704 <qspi_xfer+0x1c>
   236f2:	4940      	ldr	r1, [pc, #256]	; (237f4 <qspi_xfer+0x10c>)
   236f4:	4840      	ldr	r0, [pc, #256]	; (237f8 <qspi_xfer+0x110>)
   236f6:	2268      	movs	r2, #104	; 0x68
   236f8:	f007 fa28 	bl	2ab4c <assert_print>
   236fc:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   236fe:	483d      	ldr	r0, [pc, #244]	; (237f4 <qspi_xfer+0x10c>)
   23700:	f007 fa1d 	bl	2ab3e <assert_post_action>
   23704:	b930      	cbnz	r0, 23714 <qspi_xfer+0x2c>
   23706:	493b      	ldr	r1, [pc, #236]	; (237f4 <qspi_xfer+0x10c>)
   23708:	483b      	ldr	r0, [pc, #236]	; (237f8 <qspi_xfer+0x110>)
   2370a:	2269      	movs	r2, #105	; 0x69
   2370c:	f007 fa1e 	bl	2ab4c <assert_print>
   23710:	2169      	movs	r1, #105	; 0x69
   23712:	e7f4      	b.n	236fe <qspi_xfer+0x16>
   23714:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   23718:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   2371c:	d163      	bne.n	237e6 <qspi_xfer+0xfe>
   2371e:	0786      	lsls	r6, r0, #30
   23720:	d161      	bne.n	237e6 <qspi_xfer+0xfe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   23722:	2c01      	cmp	r4, #1
   23724:	d001      	beq.n	2372a <qspi_xfer+0x42>
   23726:	429c      	cmp	r4, r3
   23728:	d15f      	bne.n	237ea <qspi_xfer+0x102>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   2372a:	682c      	ldr	r4, [r5, #0]
   2372c:	bb04      	cbnz	r4, 23770 <qspi_xfer+0x88>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2372e:	2b02      	cmp	r3, #2
   23730:	4b32      	ldr	r3, [pc, #200]	; (237fc <qspi_xfer+0x114>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   23732:	bf0b      	itete	eq
   23734:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   23738:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2373c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23740:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23744:	bf0b      	itete	eq
   23746:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   2374a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   2374e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   23750:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23752:	2100      	movs	r1, #0
   23754:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23758:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   2375c:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   23760:	2201      	movs	r2, #1
   23762:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23764:	4a25      	ldr	r2, [pc, #148]	; (237fc <qspi_xfer+0x114>)
   23766:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2376a:	2b00      	cmp	r3, #0
   2376c:	d0fb      	beq.n	23766 <qspi_xfer+0x7e>
   2376e:	e00d      	b.n	2378c <qspi_xfer+0xa4>
        if (m_cb.p_buffer_primary)
   23770:	68ae      	ldr	r6, [r5, #8]
   23772:	4c22      	ldr	r4, [pc, #136]	; (237fc <qspi_xfer+0x114>)
   23774:	b166      	cbz	r6, 23790 <qspi_xfer+0xa8>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23776:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   23778:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   2377a:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   2377c:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2377e:	d12b      	bne.n	237d8 <qspi_xfer+0xf0>
    p_reg->WRITE.DST = dest_addr;
   23780:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23784:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   23788:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   2378c:	481c      	ldr	r0, [pc, #112]	; (23800 <qspi_xfer+0x118>)
}
   2378e:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23790:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   23792:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
   23796:	bf0c      	ite	eq
   23798:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
   2379a:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
   2379c:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   2379e:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   237a0:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   237a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
   237a6:	bf0b      	itete	eq
   237a8:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   237ac:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   237b0:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   237b4:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   237b8:	bf0c      	ite	eq
   237ba:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   237be:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237c2:	490e      	ldr	r1, [pc, #56]	; (237fc <qspi_xfer+0x114>)
   237c4:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   237c6:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   237ca:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   237ce:	2201      	movs	r2, #1
   237d0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   237d4:	601a      	str	r2, [r3, #0]
}
   237d6:	e7d9      	b.n	2378c <qspi_xfer+0xa4>
    p_reg->READ.SRC = src_addr;
   237d8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   237dc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   237e0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   237e4:	e7d2      	b.n	2378c <qspi_xfer+0xa4>
        return NRFX_ERROR_INVALID_ADDR;
   237e6:	4807      	ldr	r0, [pc, #28]	; (23804 <qspi_xfer+0x11c>)
   237e8:	e7d1      	b.n	2378e <qspi_xfer+0xa6>
        return NRFX_ERROR_BUSY;
   237ea:	4807      	ldr	r0, [pc, #28]	; (23808 <qspi_xfer+0x120>)
   237ec:	e7cf      	b.n	2378e <qspi_xfer+0xa6>
   237ee:	bf00      	nop
   237f0:	20003720 	.word	0x20003720
   237f4:	00033e6c 	.word	0x00033e6c
   237f8:	0003013d 	.word	0x0003013d
   237fc:	40029000 	.word	0x40029000
   23800:	0bad0000 	.word	0x0bad0000
   23804:	0bad000a 	.word	0x0bad000a
   23808:	0bad000b 	.word	0x0bad000b

0002380c <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   2380c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2380e:	4d07      	ldr	r5, [pc, #28]	; (2382c <qspi_ready_wait+0x20>)
   23810:	2464      	movs	r4, #100	; 0x64
   23812:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   23816:	b933      	cbnz	r3, 23826 <qspi_ready_wait+0x1a>
   23818:	200a      	movs	r0, #10
   2381a:	f00b f892 	bl	2e942 <nrfx_busy_wait>
   2381e:	3c01      	subs	r4, #1
   23820:	d1f7      	bne.n	23812 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   23822:	4803      	ldr	r0, [pc, #12]	; (23830 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   23824:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   23826:	4803      	ldr	r0, [pc, #12]	; (23834 <qspi_ready_wait+0x28>)
   23828:	e7fc      	b.n	23824 <qspi_ready_wait+0x18>
   2382a:	bf00      	nop
   2382c:	40029000 	.word	0x40029000
   23830:	0bad0007 	.word	0x0bad0007
   23834:	0bad0000 	.word	0x0bad0000

00023838 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   23838:	4b08      	ldr	r3, [pc, #32]	; (2385c <qspi_event_xfer_handle.constprop.0+0x24>)
   2383a:	689a      	ldr	r2, [r3, #8]
   2383c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2383e:	691a      	ldr	r2, [r3, #16]
   23840:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   23842:	699a      	ldr	r2, [r3, #24]
   23844:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   23846:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   23848:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   2384a:	b132      	cbz	r2, 2385a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   2384c:	695a      	ldr	r2, [r3, #20]
   2384e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   23850:	69da      	ldr	r2, [r3, #28]
   23852:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   23854:	2200      	movs	r2, #0
   23856:	60da      	str	r2, [r3, #12]
   23858:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   2385a:	4770      	bx	lr
   2385c:	20003720 	.word	0x20003720

00023860 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   23860:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   23862:	4b0e      	ldr	r3, [pc, #56]	; (2389c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   23864:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   23866:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   2386a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   2386e:	2807      	cmp	r0, #7
   23870:	d813      	bhi.n	2389a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   23872:	e8df f000 	tbb	[pc, r0]
   23876:	0f11      	.short	0x0f11
   23878:	080a0b0d 	.word	0x080a0b0d
   2387c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2387e:	0e10      	lsrs	r0, r2, #24
   23880:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   23882:	0c10      	lsrs	r0, r2, #16
   23884:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   23886:	0a10      	lsrs	r0, r2, #8
   23888:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   2388a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   2388c:	0e1a      	lsrs	r2, r3, #24
   2388e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   23890:	0c1a      	lsrs	r2, r3, #16
   23892:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   23894:	0a1a      	lsrs	r2, r3, #8
   23896:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   23898:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   2389a:	bd10      	pop	{r4, pc}
   2389c:	40029000 	.word	0x40029000

000238a0 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   238a0:	3802      	subs	r0, #2
   238a2:	2807      	cmp	r0, #7
   238a4:	d81f      	bhi.n	238e6 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   238a6:	e8df f000 	tbb	[pc, r0]
   238aa:	2729      	.short	0x2729
   238ac:	21231125 	.word	0x21231125
   238b0:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   238b2:	79cb      	ldrb	r3, [r1, #7]
   238b4:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   238b6:	798a      	ldrb	r2, [r1, #6]
   238b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   238bc:	794a      	ldrb	r2, [r1, #5]
   238be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   238c2:	790a      	ldrb	r2, [r1, #4]
   238c4:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   238c6:	4a0e      	ldr	r2, [pc, #56]	; (23900 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   238c8:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   238cc:	78cb      	ldrb	r3, [r1, #3]
   238ce:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   238d0:	788a      	ldrb	r2, [r1, #2]
   238d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   238d6:	784a      	ldrb	r2, [r1, #1]
   238d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   238dc:	780a      	ldrb	r2, [r1, #0]
   238de:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   238e0:	4a07      	ldr	r2, [pc, #28]	; (23900 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   238e2:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   238e6:	4770      	bx	lr
    switch (length)
   238e8:	2300      	movs	r3, #0
   238ea:	e7e4      	b.n	238b6 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   238ec:	2300      	movs	r3, #0
   238ee:	e7e5      	b.n	238bc <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   238f0:	2300      	movs	r3, #0
   238f2:	e7e6      	b.n	238c2 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   238f4:	2300      	movs	r3, #0
   238f6:	e7eb      	b.n	238d0 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   238f8:	2300      	movs	r3, #0
   238fa:	e7ec      	b.n	238d6 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   238fc:	2300      	movs	r3, #0
   238fe:	e7ed      	b.n	238dc <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   23900:	40029000 	.word	0x40029000

00023904 <nrfx_qspi_init>:
{
   23904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23908:	460d      	mov	r5, r1
   2390a:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   2390c:	4604      	mov	r4, r0
   2390e:	b950      	cbnz	r0, 23926 <nrfx_qspi_init+0x22>
   23910:	4970      	ldr	r1, [pc, #448]	; (23ad4 <nrfx_qspi_init+0x1d0>)
   23912:	4871      	ldr	r0, [pc, #452]	; (23ad8 <nrfx_qspi_init+0x1d4>)
   23914:	f44f 7288 	mov.w	r2, #272	; 0x110
   23918:	f007 f918 	bl	2ab4c <assert_print>
   2391c:	486d      	ldr	r0, [pc, #436]	; (23ad4 <nrfx_qspi_init+0x1d0>)
   2391e:	f44f 7188 	mov.w	r1, #272	; 0x110
   23922:	f007 f90c 	bl	2ab3e <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   23926:	4f6d      	ldr	r7, [pc, #436]	; (23adc <nrfx_qspi_init+0x1d8>)
   23928:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   2392c:	2b00      	cmp	r3, #0
   2392e:	f040 80ca 	bne.w	23ac6 <nrfx_qspi_init+0x1c2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   23932:	7cc2      	ldrb	r2, [r0, #19]
   23934:	b11a      	cbz	r2, 2393e <nrfx_qspi_init+0x3a>
   23936:	7d03      	ldrb	r3, [r0, #20]
   23938:	2b00      	cmp	r3, #0
   2393a:	f040 8084 	bne.w	23a46 <nrfx_qspi_init+0x142>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2393e:	7923      	ldrb	r3, [r4, #4]
   23940:	2bff      	cmp	r3, #255	; 0xff
   23942:	f000 80c4 	beq.w	23ace <nrfx_qspi_init+0x1ca>
   23946:	7961      	ldrb	r1, [r4, #5]
   23948:	29ff      	cmp	r1, #255	; 0xff
   2394a:	f000 80c0 	beq.w	23ace <nrfx_qspi_init+0x1ca>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2394e:	79a1      	ldrb	r1, [r4, #6]
   23950:	29ff      	cmp	r1, #255	; 0xff
   23952:	f000 80bc 	beq.w	23ace <nrfx_qspi_init+0x1ca>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   23956:	79e1      	ldrb	r1, [r4, #7]
   23958:	29ff      	cmp	r1, #255	; 0xff
   2395a:	f000 80b8 	beq.w	23ace <nrfx_qspi_init+0x1ca>
    if (!p_config->skip_gpio_cfg)
   2395e:	2a00      	cmp	r2, #0
   23960:	d142      	bne.n	239e8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23962:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   23964:	9301      	str	r3, [sp, #4]
   23966:	f7ff fe95 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2396a:	9b01      	ldr	r3, [sp, #4]
   2396c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23970:	f240 3802 	movw	r8, #770	; 0x302
   23974:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23978:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   2397a:	7963      	ldrb	r3, [r4, #5]
   2397c:	9301      	str	r3, [sp, #4]
   2397e:	f7ff fe89 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23982:	9b01      	ldr	r3, [sp, #4]
   23984:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23988:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2398c:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   2398e:	79a3      	ldrb	r3, [r4, #6]
   23990:	9301      	str	r3, [sp, #4]
   23992:	f7ff fe7f 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23996:	9b01      	ldr	r3, [sp, #4]
   23998:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2399c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   239a0:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   239a2:	79e3      	ldrb	r3, [r4, #7]
   239a4:	9301      	str	r3, [sp, #4]
   239a6:	f7ff fe75 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   239aa:	9b01      	ldr	r3, [sp, #4]
   239ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   239b0:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   239b4:	7a23      	ldrb	r3, [r4, #8]
   239b6:	2bff      	cmp	r3, #255	; 0xff
   239b8:	d008      	beq.n	239cc <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   239ba:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   239bc:	9301      	str	r3, [sp, #4]
   239be:	f7ff fe69 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   239c2:	9b01      	ldr	r3, [sp, #4]
   239c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   239c8:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   239cc:	7a63      	ldrb	r3, [r4, #9]
   239ce:	2bff      	cmp	r3, #255	; 0xff
   239d0:	d00a      	beq.n	239e8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   239d2:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   239d4:	9301      	str	r3, [sp, #4]
   239d6:	f7ff fe5d 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   239da:	9b01      	ldr	r3, [sp, #4]
   239dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   239e0:	f240 3202 	movw	r2, #770	; 0x302
   239e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   239e8:	7d23      	ldrb	r3, [r4, #20]
   239ea:	bb63      	cbnz	r3, 23a46 <nrfx_qspi_init+0x142>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   239ec:	7923      	ldrb	r3, [r4, #4]
   239ee:	2bff      	cmp	r3, #255	; 0xff
   239f0:	bf18      	it	ne
   239f2:	461a      	movne	r2, r3
   239f4:	4b3a      	ldr	r3, [pc, #232]	; (23ae0 <nrfx_qspi_init+0x1dc>)
   239f6:	bf08      	it	eq
   239f8:	f04f 32ff 	moveq.w	r2, #4294967295
   239fc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   23a00:	7962      	ldrb	r2, [r4, #5]
   23a02:	2aff      	cmp	r2, #255	; 0xff
   23a04:	bf08      	it	eq
   23a06:	f04f 32ff 	moveq.w	r2, #4294967295
   23a0a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   23a0e:	79a2      	ldrb	r2, [r4, #6]
   23a10:	2aff      	cmp	r2, #255	; 0xff
   23a12:	bf08      	it	eq
   23a14:	f04f 32ff 	moveq.w	r2, #4294967295
   23a18:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   23a1c:	79e2      	ldrb	r2, [r4, #7]
   23a1e:	2aff      	cmp	r2, #255	; 0xff
   23a20:	bf08      	it	eq
   23a22:	f04f 32ff 	moveq.w	r2, #4294967295
   23a26:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   23a2a:	7a22      	ldrb	r2, [r4, #8]
   23a2c:	2aff      	cmp	r2, #255	; 0xff
   23a2e:	bf08      	it	eq
   23a30:	f04f 32ff 	moveq.w	r2, #4294967295
   23a34:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   23a38:	7a62      	ldrb	r2, [r4, #9]
   23a3a:	2aff      	cmp	r2, #255	; 0xff
   23a3c:	bf08      	it	eq
   23a3e:	f04f 32ff 	moveq.w	r2, #4294967295
   23a42:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
   23a46:	4a26      	ldr	r2, [pc, #152]	; (23ae0 <nrfx_qspi_init+0x1dc>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   23a48:	6823      	ldr	r3, [r4, #0]
   23a4a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   23a4e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   23a50:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   23a52:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   23a54:	019b      	lsls	r3, r3, #6
   23a56:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   23a5a:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   23a5c:	7b61      	ldrb	r1, [r4, #13]
   23a5e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   23a62:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   23a66:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   23a6a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   23a6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   23a70:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   23a74:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   23a76:	7be1      	ldrb	r1, [r4, #15]
   23a78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   23a7c:	7c21      	ldrb	r1, [r4, #16]
   23a7e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   23a82:	7c61      	ldrb	r1, [r4, #17]
   23a84:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   23a88:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   23a8c:	7ce3      	ldrb	r3, [r4, #19]
   23a8e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   23a92:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
   23a94:	e9c7 5600 	strd	r5, r6, [r7]
   23a98:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   23a9c:	b115      	cbz	r5, 23aa4 <nrfx_qspi_init+0x1a0>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   23a9e:	2029      	movs	r0, #41	; 0x29
   23aa0:	f7f1 f8c6 	bl	14c30 <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   23aa4:	4b0e      	ldr	r3, [pc, #56]	; (23ae0 <nrfx_qspi_init+0x1dc>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   23aa6:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   23aa8:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   23aaa:	e9c7 1102 	strd	r1, r1, [r7, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   23aae:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   23ab2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23ab6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23aba:	601a      	str	r2, [r3, #0]
}
   23abc:	b002      	add	sp, #8
   23abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   23ac2:	f7ff bea3 	b.w	2380c <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   23ac6:	4807      	ldr	r0, [pc, #28]	; (23ae4 <nrfx_qspi_init+0x1e0>)
}
   23ac8:	b002      	add	sp, #8
   23aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23ace:	4806      	ldr	r0, [pc, #24]	; (23ae8 <nrfx_qspi_init+0x1e4>)
   23ad0:	e7fa      	b.n	23ac8 <nrfx_qspi_init+0x1c4>
   23ad2:	bf00      	nop
   23ad4:	00033e6c 	.word	0x00033e6c
   23ad8:	0003013d 	.word	0x0003013d
   23adc:	20003720 	.word	0x20003720
   23ae0:	40029000 	.word	0x40029000
   23ae4:	0bad0005 	.word	0x0bad0005
   23ae8:	0bad0004 	.word	0x0bad0004

00023aec <nrfx_qspi_cinstr_xfer>:
{
   23aec:	b570      	push	{r4, r5, r6, lr}
   23aee:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   23af0:	4a25      	ldr	r2, [pc, #148]	; (23b88 <nrfx_qspi_cinstr_xfer+0x9c>)
   23af2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
{
   23af6:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   23af8:	b952      	cbnz	r2, 23b10 <nrfx_qspi_cinstr_xfer+0x24>
   23afa:	4924      	ldr	r1, [pc, #144]	; (23b8c <nrfx_qspi_cinstr_xfer+0xa0>)
   23afc:	4824      	ldr	r0, [pc, #144]	; (23b90 <nrfx_qspi_cinstr_xfer+0xa4>)
   23afe:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   23b02:	f007 f823 	bl	2ab4c <assert_print>
   23b06:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   23b0a:	4820      	ldr	r0, [pc, #128]	; (23b8c <nrfx_qspi_cinstr_xfer+0xa0>)
   23b0c:	f007 f817 	bl	2ab3e <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   23b10:	2a01      	cmp	r2, #1
   23b12:	d136      	bne.n	23b82 <nrfx_qspi_cinstr_xfer+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b14:	4e1f      	ldr	r6, [pc, #124]	; (23b94 <nrfx_qspi_cinstr_xfer+0xa8>)
   23b16:	2200      	movs	r2, #0
   23b18:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   23b1c:	b111      	cbz	r1, 23b24 <nrfx_qspi_cinstr_xfer+0x38>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   23b1e:	7840      	ldrb	r0, [r0, #1]
   23b20:	f7ff febe 	bl	238a0 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   23b24:	2301      	movs	r3, #1
   23b26:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   23b2a:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   23b2c:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   23b2e:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   23b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   23b34:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   23b36:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   23b38:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   23b3a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   23b3e:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   23b40:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   23b44:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   23b46:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   23b4a:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   23b4e:	f7ff fe5d 	bl	2380c <qspi_ready_wait>
   23b52:	4b11      	ldr	r3, [pc, #68]	; (23b98 <nrfx_qspi_cinstr_xfer+0xac>)
   23b54:	4298      	cmp	r0, r3
   23b56:	d10a      	bne.n	23b6e <nrfx_qspi_cinstr_xfer+0x82>
        NRFX_ASSERT(p_config->wipwait);
   23b58:	792b      	ldrb	r3, [r5, #4]
   23b5a:	b98b      	cbnz	r3, 23b80 <nrfx_qspi_cinstr_xfer+0x94>
   23b5c:	490b      	ldr	r1, [pc, #44]	; (23b8c <nrfx_qspi_cinstr_xfer+0xa0>)
   23b5e:	480c      	ldr	r0, [pc, #48]	; (23b90 <nrfx_qspi_cinstr_xfer+0xa4>)
   23b60:	f240 126b 	movw	r2, #363	; 0x16b
   23b64:	f006 fff2 	bl	2ab4c <assert_print>
   23b68:	f240 116b 	movw	r1, #363	; 0x16b
   23b6c:	e7cd      	b.n	23b0a <nrfx_qspi_cinstr_xfer+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23b6e:	2300      	movs	r3, #0
   23b70:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   23b74:	b11c      	cbz	r4, 23b7e <nrfx_qspi_cinstr_xfer+0x92>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   23b76:	7868      	ldrb	r0, [r5, #1]
   23b78:	4621      	mov	r1, r4
   23b7a:	f7ff fe71 	bl	23860 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   23b7e:	4807      	ldr	r0, [pc, #28]	; (23b9c <nrfx_qspi_cinstr_xfer+0xb0>)
}
   23b80:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   23b82:	4807      	ldr	r0, [pc, #28]	; (23ba0 <nrfx_qspi_cinstr_xfer+0xb4>)
   23b84:	e7fc      	b.n	23b80 <nrfx_qspi_cinstr_xfer+0x94>
   23b86:	bf00      	nop
   23b88:	20003720 	.word	0x20003720
   23b8c:	00033e6c 	.word	0x00033e6c
   23b90:	0003013d 	.word	0x0003013d
   23b94:	40029000 	.word	0x40029000
   23b98:	0bad0007 	.word	0x0bad0007
   23b9c:	0bad0000 	.word	0x0bad0000
   23ba0:	0bad000b 	.word	0x0bad000b

00023ba4 <nrfx_qspi_mem_busy_check>:
{
   23ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
   23ba6:	4a0d      	ldr	r2, [pc, #52]	; (23bdc <nrfx_qspi_mem_busy_check+0x38>)
   23ba8:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   23baa:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
   23bae:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   23bb0:	4611      	mov	r1, r2
   23bb2:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
   23bb4:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   23bb8:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   23bbc:	f7ff ff96 	bl	23aec <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   23bc0:	4b07      	ldr	r3, [pc, #28]	; (23be0 <nrfx_qspi_mem_busy_check+0x3c>)
   23bc2:	4298      	cmp	r0, r3
   23bc4:	d106      	bne.n	23bd4 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   23bc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   23bca:	f013 0f01 	tst.w	r3, #1
   23bce:	4b05      	ldr	r3, [pc, #20]	; (23be4 <nrfx_qspi_mem_busy_check+0x40>)
   23bd0:	bf18      	it	ne
   23bd2:	4618      	movne	r0, r3
}
   23bd4:	b005      	add	sp, #20
   23bd6:	f85d fb04 	ldr.w	pc, [sp], #4
   23bda:	bf00      	nop
   23bdc:	01000205 	.word	0x01000205
   23be0:	0bad0000 	.word	0x0bad0000
   23be4:	0bad000b 	.word	0x0bad000b

00023be8 <nrfx_qspi_uninit>:
{
   23be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   23bec:	4e2d      	ldr	r6, [pc, #180]	; (23ca4 <nrfx_qspi_uninit+0xbc>)
   23bee:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   23bf2:	b953      	cbnz	r3, 23c0a <nrfx_qspi_uninit+0x22>
   23bf4:	492c      	ldr	r1, [pc, #176]	; (23ca8 <nrfx_qspi_uninit+0xc0>)
   23bf6:	482d      	ldr	r0, [pc, #180]	; (23cac <nrfx_qspi_uninit+0xc4>)
   23bf8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   23bfc:	f006 ffa6 	bl	2ab4c <assert_print>
   23c00:	4829      	ldr	r0, [pc, #164]	; (23ca8 <nrfx_qspi_uninit+0xc0>)
   23c02:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   23c06:	f006 ff9a 	bl	2ab3e <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   23c0a:	2029      	movs	r0, #41	; 0x29
   23c0c:	f7f1 f81e 	bl	14c4c <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   23c10:	4b27      	ldr	r3, [pc, #156]	; (23cb0 <nrfx_qspi_uninit+0xc8>)
   23c12:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   23c16:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   23c1a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   23c1e:	bf04      	itt	eq
   23c20:	4a24      	ldreq	r2, [pc, #144]	; (23cb4 <nrfx_qspi_uninit+0xcc>)
   23c22:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23c26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   23c2a:	2201      	movs	r2, #1
   23c2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23c30:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   23c32:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   23c36:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   23c38:	bf08      	it	eq
   23c3a:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   23c3c:	4b1c      	ldr	r3, [pc, #112]	; (23cb0 <nrfx_qspi_uninit+0xc8>)
   23c3e:	2200      	movs	r2, #0
   23c40:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   23c48:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   23c4c:	bb22      	cbnz	r2, 23c98 <nrfx_qspi_uninit+0xb0>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   23c4e:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   23c52:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   23c56:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   23c5a:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   23c5e:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   23c62:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   23c66:	b2c0      	uxtb	r0, r0
   23c68:	f00a ff07 	bl	2ea7a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   23c6c:	fa5f f089 	uxtb.w	r0, r9
   23c70:	f00a ff03 	bl	2ea7a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   23c74:	fa5f f088 	uxtb.w	r0, r8
   23c78:	f00a feff 	bl	2ea7a <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   23c7c:	b2f8      	uxtb	r0, r7
   23c7e:	f00a fefc 	bl	2ea7a <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   23c82:	b2e8      	uxtb	r0, r5
   23c84:	28ff      	cmp	r0, #255	; 0xff
   23c86:	b2e4      	uxtb	r4, r4
   23c88:	d001      	beq.n	23c8e <nrfx_qspi_uninit+0xa6>
        nrf_gpio_cfg_default(pins.io2_pin);
   23c8a:	f00a fef6 	bl	2ea7a <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   23c8e:	2cff      	cmp	r4, #255	; 0xff
   23c90:	d002      	beq.n	23c98 <nrfx_qspi_uninit+0xb0>
        nrf_gpio_cfg_default(pins.io3_pin);
   23c92:	4620      	mov	r0, r4
   23c94:	f00a fef1 	bl	2ea7a <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   23c98:	2300      	movs	r3, #0
   23c9a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   23c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23ca2:	bf00      	nop
   23ca4:	20003720 	.word	0x20003720
   23ca8:	00033e6c 	.word	0x00033e6c
   23cac:	0003013d 	.word	0x0003013d
   23cb0:	40029000 	.word	0x40029000
   23cb4:	00030100 	.word	0x00030100

00023cb8 <nrfx_qspi_erase>:
{
   23cb8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   23cba:	4a1a      	ldr	r2, [pc, #104]	; (23d24 <nrfx_qspi_erase+0x6c>)
   23cbc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   23cc0:	b953      	cbnz	r3, 23cd8 <nrfx_qspi_erase+0x20>
   23cc2:	4919      	ldr	r1, [pc, #100]	; (23d28 <nrfx_qspi_erase+0x70>)
   23cc4:	4819      	ldr	r0, [pc, #100]	; (23d2c <nrfx_qspi_erase+0x74>)
   23cc6:	f44f 720a 	mov.w	r2, #552	; 0x228
   23cca:	f006 ff3f 	bl	2ab4c <assert_print>
   23cce:	4816      	ldr	r0, [pc, #88]	; (23d28 <nrfx_qspi_erase+0x70>)
   23cd0:	f44f 710a 	mov.w	r1, #552	; 0x228
   23cd4:	f006 ff33 	bl	2ab3e <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   23cd8:	078c      	lsls	r4, r1, #30
   23cda:	d11e      	bne.n	23d1a <nrfx_qspi_erase+0x62>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   23cdc:	6814      	ldr	r4, [r2, #0]
   23cde:	b10c      	cbz	r4, 23ce4 <nrfx_qspi_erase+0x2c>
   23ce0:	2b01      	cmp	r3, #1
   23ce2:	d11c      	bne.n	23d1e <nrfx_qspi_erase+0x66>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   23ce4:	2304      	movs	r3, #4
   23ce6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   23cea:	4b11      	ldr	r3, [pc, #68]	; (23d30 <nrfx_qspi_erase+0x78>)
   23cec:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cf0:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   23cf2:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cf6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23cfa:	2101      	movs	r1, #1
   23cfc:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   23cfe:	6810      	ldr	r0, [r2, #0]
   23d00:	b940      	cbnz	r0, 23d14 <nrfx_qspi_erase+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d02:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   23d06:	2900      	cmp	r1, #0
   23d08:	d0fb      	beq.n	23d02 <nrfx_qspi_erase+0x4a>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   23d0a:	2301      	movs	r3, #1
   23d0c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   23d10:	4808      	ldr	r0, [pc, #32]	; (23d34 <nrfx_qspi_erase+0x7c>)
}
   23d12:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   23d14:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   23d18:	e7fa      	b.n	23d10 <nrfx_qspi_erase+0x58>
        return NRFX_ERROR_INVALID_ADDR;
   23d1a:	4807      	ldr	r0, [pc, #28]	; (23d38 <nrfx_qspi_erase+0x80>)
   23d1c:	e7f9      	b.n	23d12 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_BUSY;
   23d1e:	4807      	ldr	r0, [pc, #28]	; (23d3c <nrfx_qspi_erase+0x84>)
   23d20:	e7f7      	b.n	23d12 <nrfx_qspi_erase+0x5a>
   23d22:	bf00      	nop
   23d24:	20003720 	.word	0x20003720
   23d28:	00033e6c 	.word	0x00033e6c
   23d2c:	0003013d 	.word	0x0003013d
   23d30:	40029000 	.word	0x40029000
   23d34:	0bad0000 	.word	0x0bad0000
   23d38:	0bad000a 	.word	0x0bad000a
   23d3c:	0bad000b 	.word	0x0bad000b

00023d40 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   23d40:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23d42:	4b17      	ldr	r3, [pc, #92]	; (23da0 <nrfx_qspi_irq_handler+0x60>)
   23d44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   23d48:	b1e2      	cbz	r2, 23d84 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23d4a:	2200      	movs	r2, #0
    switch (m_cb.state)
   23d4c:	4c15      	ldr	r4, [pc, #84]	; (23da4 <nrfx_qspi_irq_handler+0x64>)
   23d4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23d52:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   23d56:	2a03      	cmp	r2, #3
   23d58:	d015      	beq.n	23d86 <nrfx_qspi_irq_handler+0x46>
   23d5a:	2a04      	cmp	r2, #4
   23d5c:	d015      	beq.n	23d8a <nrfx_qspi_irq_handler+0x4a>
   23d5e:	2a02      	cmp	r2, #2
   23d60:	d104      	bne.n	23d6c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   23d62:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   23d64:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   23d68:	f7ff fd66 	bl	23838 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   23d6c:	68a3      	ldr	r3, [r4, #8]
   23d6e:	b913      	cbnz	r3, 23d76 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   23d70:	2301      	movs	r3, #1
   23d72:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   23d76:	e9d4 3100 	ldrd	r3, r1, [r4]
   23d7a:	2000      	movs	r0, #0
   23d7c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   23d7e:	2300      	movs	r3, #0
   23d80:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   23d84:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   23d86:	2302      	movs	r3, #2
   23d88:	e7ec      	b.n	23d64 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   23d8a:	2203      	movs	r2, #3
   23d8c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   23d90:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   23d94:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   23d96:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   23d9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   23d9e:	e7e5      	b.n	23d6c <nrfx_qspi_irq_handler+0x2c>
   23da0:	40029000 	.word	0x40029000
   23da4:	20003720 	.word	0x20003720

00023da8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   23da8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23daa:	4c14      	ldr	r4, [pc, #80]	; (23dfc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   23dac:	4a14      	ldr	r2, [pc, #80]	; (23e00 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   23dae:	4915      	ldr	r1, [pc, #84]	; (23e04 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23db0:	2303      	movs	r3, #3
   23db2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   23db4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23db6:	4b14      	ldr	r3, [pc, #80]	; (23e08 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   23db8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23dba:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   23dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23dc0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   23dc2:	2300      	movs	r3, #0
   23dc4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   23dc6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   23dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   23dca:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   23dcc:	4a0f      	ldr	r2, [pc, #60]	; (23e0c <_DoInit+0x64>)
   23dce:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   23dd0:	2210      	movs	r2, #16
   23dd2:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   23dd4:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   23dd6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   23dd8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   23dda:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   23ddc:	f007 fe2b 	bl	2ba36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   23de0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   23de4:	490a      	ldr	r1, [pc, #40]	; (23e10 <_DoInit+0x68>)
   23de6:	4620      	mov	r0, r4
   23de8:	f007 fe25 	bl	2ba36 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   23dec:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   23df0:	2320      	movs	r3, #32
   23df2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   23df4:	f3bf 8f5f 	dmb	sy
}
   23df8:	bd10      	pop	{r4, pc}
   23dfa:	bf00      	nop
   23dfc:	20003754 	.word	0x20003754
   23e00:	00033ea8 	.word	0x00033ea8
   23e04:	00033eb1 	.word	0x00033eb1
   23e08:	20004538 	.word	0x20004538
   23e0c:	20004528 	.word	0x20004528
   23e10:	00033eb5 	.word	0x00033eb5

00023e14 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   23e14:	4b01      	ldr	r3, [pc, #4]	; (23e1c <z_impl_z_errno+0x8>)
   23e16:	6898      	ldr	r0, [r3, #8]
}
   23e18:	3064      	adds	r0, #100	; 0x64
   23e1a:	4770      	bx	lr
   23e1c:	200037fc 	.word	0x200037fc

00023e20 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23e22:	4604      	mov	r4, r0
   23e24:	460e      	mov	r6, r1
	__asm__ volatile(
   23e26:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e2a:	f3ef 8711 	mrs	r7, BASEPRI
   23e2e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e32:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23e36:	f002 fbc1 	bl	265bc <z_impl_z_current_get>
   23e3a:	2c04      	cmp	r4, #4
   23e3c:	bf96      	itet	ls
   23e3e:	4b1e      	ldrls	r3, [pc, #120]	; (23eb8 <z_fatal_error+0x98>)
   23e40:	4b1e      	ldrhi	r3, [pc, #120]	; (23ebc <z_fatal_error+0x9c>)
   23e42:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23e46:	2200      	movs	r2, #0
   23e48:	4605      	mov	r5, r0
   23e4a:	9200      	str	r2, [sp, #0]
   23e4c:	481c      	ldr	r0, [pc, #112]	; (23ec0 <z_fatal_error+0xa0>)
   23e4e:	4622      	mov	r2, r4
   23e50:	2145      	movs	r1, #69	; 0x45
   23e52:	f006 fe89 	bl	2ab68 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   23e56:	b13e      	cbz	r6, 23e68 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   23e58:	69f3      	ldr	r3, [r6, #28]
   23e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   23e5e:	b11b      	cbz	r3, 23e68 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   23e60:	4818      	ldr	r0, [pc, #96]	; (23ec4 <z_fatal_error+0xa4>)
   23e62:	2145      	movs	r1, #69	; 0x45
   23e64:	f006 fe80 	bl	2ab68 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23e68:	b135      	cbz	r5, 23e78 <z_fatal_error+0x58>
   23e6a:	4628      	mov	r0, r5
   23e6c:	f00a fe6a 	bl	2eb44 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   23e70:	4603      	mov	r3, r0
   23e72:	b108      	cbz	r0, 23e78 <z_fatal_error+0x58>
   23e74:	7802      	ldrb	r2, [r0, #0]
   23e76:	b902      	cbnz	r2, 23e7a <z_fatal_error+0x5a>
		thread_name = "unknown";
   23e78:	4b13      	ldr	r3, [pc, #76]	; (23ec8 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   23e7a:	4814      	ldr	r0, [pc, #80]	; (23ecc <z_fatal_error+0xac>)
   23e7c:	462a      	mov	r2, r5
   23e7e:	2145      	movs	r1, #69	; 0x45
   23e80:	f006 fe72 	bl	2ab68 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   23e84:	4631      	mov	r1, r6
   23e86:	4620      	mov	r0, r4
   23e88:	f7fd fd46 	bl	21918 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   23e8c:	2c04      	cmp	r4, #4
   23e8e:	d108      	bne.n	23ea2 <z_fatal_error+0x82>
   23e90:	490f      	ldr	r1, [pc, #60]	; (23ed0 <z_fatal_error+0xb0>)
   23e92:	4810      	ldr	r0, [pc, #64]	; (23ed4 <z_fatal_error+0xb4>)
   23e94:	2293      	movs	r2, #147	; 0x93
   23e96:	f006 fe59 	bl	2ab4c <assert_print>
   23e9a:	480d      	ldr	r0, [pc, #52]	; (23ed0 <z_fatal_error+0xb0>)
   23e9c:	2193      	movs	r1, #147	; 0x93
   23e9e:	f006 fe4e 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   23ea2:	f387 8811 	msr	BASEPRI, r7
   23ea6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   23eaa:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23eac:	b003      	add	sp, #12
   23eae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23eb2:	f7f1 bab9 	b.w	15428 <z_impl_k_thread_abort>
   23eb6:	bf00      	nop
   23eb8:	0002fd14 	.word	0x0002fd14
   23ebc:	00033ebc 	.word	0x00033ebc
   23ec0:	00033eca 	.word	0x00033eca
   23ec4:	00033ef7 	.word	0x00033ef7
   23ec8:	000315ee 	.word	0x000315ee
   23ecc:	00033f1d 	.word	0x00033f1d
   23ed0:	00033f3a 	.word	0x00033f3a
   23ed4:	0003013d 	.word	0x0003013d

00023ed8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23ed8:	4b0f      	ldr	r3, [pc, #60]	; (23f18 <z_sys_init_run_level+0x40>)
{
   23eda:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23edc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23ee0:	3001      	adds	r0, #1
   23ee2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   23ee6:	42a6      	cmp	r6, r4
   23ee8:	d800      	bhi.n	23eec <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   23eea:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   23eec:	e9d4 3500 	ldrd	r3, r5, [r4]
   23ef0:	4628      	mov	r0, r5
   23ef2:	4798      	blx	r3
		if (dev != NULL) {
   23ef4:	b16d      	cbz	r5, 23f12 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   23ef6:	b138      	cbz	r0, 23f08 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   23ef8:	2800      	cmp	r0, #0
   23efa:	bfb8      	it	lt
   23efc:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   23efe:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   23f00:	28ff      	cmp	r0, #255	; 0xff
   23f02:	bfa8      	it	ge
   23f04:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   23f06:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   23f08:	68ea      	ldr	r2, [r5, #12]
   23f0a:	7853      	ldrb	r3, [r2, #1]
   23f0c:	f043 0301 	orr.w	r3, r3, #1
   23f10:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23f12:	3408      	adds	r4, #8
   23f14:	e7e7      	b.n	23ee6 <z_sys_init_run_level+0xe>
   23f16:	bf00      	nop
   23f18:	0002fd28 	.word	0x0002fd28

00023f1c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   23f1c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   23f1e:	4b0a      	ldr	r3, [pc, #40]	; (23f48 <bg_thread_main+0x2c>)
   23f20:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23f22:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   23f24:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23f26:	f7ff ffd7 	bl	23ed8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   23f2a:	f003 fb05 	bl	27538 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   23f2e:	2004      	movs	r0, #4
   23f30:	f7ff ffd2 	bl	23ed8 <z_sys_init_run_level>

	z_init_static_threads();
   23f34:	f000 faf8 	bl	24528 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   23f38:	f7ee f8c0 	bl	120bc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23f3c:	4a03      	ldr	r2, [pc, #12]	; (23f4c <bg_thread_main+0x30>)
   23f3e:	7b13      	ldrb	r3, [r2, #12]
   23f40:	f023 0301 	bic.w	r3, r3, #1
   23f44:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   23f46:	bd08      	pop	{r3, pc}
   23f48:	20004938 	.word	0x20004938
   23f4c:	20002a40 	.word	0x20002a40

00023f50 <z_bss_zero>:
{
   23f50:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23f52:	4803      	ldr	r0, [pc, #12]	; (23f60 <z_bss_zero+0x10>)
   23f54:	4a03      	ldr	r2, [pc, #12]	; (23f64 <z_bss_zero+0x14>)
   23f56:	2100      	movs	r1, #0
   23f58:	1a12      	subs	r2, r2, r0
   23f5a:	f00a fdb9 	bl	2ead0 <z_early_memset>
}
   23f5e:	bd08      	pop	{r3, pc}
   23f60:	20000d10 	.word	0x20000d10
   23f64:	2000493c 	.word	0x2000493c

00023f68 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   23f68:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   23f6a:	2300      	movs	r3, #0
{
   23f6c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   23f6e:	2201      	movs	r2, #1
   23f70:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   23f74:	4e13      	ldr	r6, [pc, #76]	; (23fc4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23f76:	4d14      	ldr	r5, [pc, #80]	; (23fc8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   23f78:	9301      	str	r3, [sp, #4]
   23f7a:	220f      	movs	r2, #15
   23f7c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   23f80:	4912      	ldr	r1, [pc, #72]	; (23fcc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23f82:	2318      	movs	r3, #24
   23f84:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   23f88:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   23f8c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   23f8e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   23f92:	fb00 1104 	mla	r1, r0, r4, r1
   23f96:	4b0e      	ldr	r3, [pc, #56]	; (23fd0 <z_init_cpu+0x68>)
   23f98:	9500      	str	r5, [sp, #0]
   23f9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   23f9e:	4630      	mov	r0, r6
   23fa0:	f000 fa38 	bl	24414 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23fa4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23fa6:	4a0b      	ldr	r2, [pc, #44]	; (23fd4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23fa8:	60ee      	str	r6, [r5, #12]
   23faa:	f023 0304 	bic.w	r3, r3, #4
   23fae:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23fb0:	f44f 6304 	mov.w	r3, #2112	; 0x840
   23fb4:	fb04 3303 	mla	r3, r4, r3, r3
   23fb8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   23fba:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   23fbc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   23fbe:	b006      	add	sp, #24
   23fc0:	bd70      	pop	{r4, r5, r6, pc}
   23fc2:	bf00      	nop
   23fc4:	200029c0 	.word	0x200029c0
   23fc8:	200037fc 	.word	0x200037fc
   23fcc:	20008f80 	.word	0x20008f80
   23fd0:	00024665 	.word	0x00024665
   23fd4:	20008740 	.word	0x20008740

00023fd8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   23fd8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23fda:	2000      	movs	r0, #0
{
   23fdc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23fde:	f7ff ff7b 	bl	23ed8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   23fe2:	4b2e      	ldr	r3, [pc, #184]	; (2409c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23fe4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   23fe8:	4c2d      	ldr	r4, [pc, #180]	; (240a0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   23fea:	4e2e      	ldr	r6, [pc, #184]	; (240a4 <z_cstart+0xcc>)
   23fec:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23fee:	4f2e      	ldr	r7, [pc, #184]	; (240a8 <z_cstart+0xd0>)
   23ff0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23ff4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   23ff6:	23e0      	movs	r3, #224	; 0xe0
   23ff8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   23ffc:	2500      	movs	r5, #0
   23ffe:	2320      	movs	r3, #32
   24000:	77e3      	strb	r3, [r4, #31]
   24002:	7625      	strb	r5, [r4, #24]
   24004:	7665      	strb	r5, [r4, #25]
   24006:	76a5      	strb	r5, [r4, #26]
   24008:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2400c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2400e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   24012:	6263      	str	r3, [r4, #36]	; 0x24
   24014:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24018:	f7f1 f97a 	bl	15310 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2401c:	f7f0 fdba 	bl	14b94 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   24020:	f04f 33ff 	mov.w	r3, #4294967295
   24024:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24026:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   24028:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2402a:	f7f1 fad9 	bl	155e0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2402e:	f7f1 fa11 	bl	15454 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24032:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   24036:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   24038:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2403c:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   24040:	f003 fa5c 	bl	274fc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   24044:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24046:	f00a fd37 	bl	2eab8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2404a:	2001      	movs	r0, #1
   2404c:	f7ff ff44 	bl	23ed8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24050:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   24052:	4c16      	ldr	r4, [pc, #88]	; (240ac <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   24054:	f7ff ff40 	bl	23ed8 <z_sys_init_run_level>
	z_sched_init();
   24058:	f002 f97a 	bl	26350 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2405c:	4b14      	ldr	r3, [pc, #80]	; (240b0 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   2405e:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24060:	9305      	str	r3, [sp, #20]
   24062:	2301      	movs	r3, #1
   24064:	4913      	ldr	r1, [pc, #76]	; (240b4 <z_cstart+0xdc>)
   24066:	9500      	str	r5, [sp, #0]
   24068:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2406c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   24070:	463b      	mov	r3, r7
   24072:	e9cd 5501 	strd	r5, r5, [sp, #4]
   24076:	4620      	mov	r0, r4
   24078:	f000 f9cc 	bl	24414 <z_setup_new_thread>
   2407c:	7b62      	ldrb	r2, [r4, #13]
   2407e:	4606      	mov	r6, r0
   24080:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   24084:	4620      	mov	r0, r4
   24086:	7362      	strb	r2, [r4, #13]
   24088:	f001 fc66 	bl	25958 <z_ready_thread>
	z_init_cpu(0);
   2408c:	4628      	mov	r0, r5
   2408e:	f7ff ff6b 	bl	23f68 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24092:	463a      	mov	r2, r7
   24094:	4631      	mov	r1, r6
   24096:	4620      	mov	r0, r4
   24098:	f7f0 fed8 	bl	14e4c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2409c:	20008f80 	.word	0x20008f80
   240a0:	e000ed00 	.word	0xe000ed00
   240a4:	200037fc 	.word	0x200037fc
   240a8:	00023f1d 	.word	0x00023f1d
   240ac:	20002a40 	.word	0x20002a40
   240b0:	00033fa6 	.word	0x00033fa6
   240b4:	20009100 	.word	0x20009100

000240b8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   240b8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   240ba:	4c0b      	ldr	r4, [pc, #44]	; (240e8 <statics_init+0x30>)
   240bc:	4d0b      	ldr	r5, [pc, #44]	; (240ec <statics_init+0x34>)
   240be:	42ac      	cmp	r4, r5
   240c0:	d90f      	bls.n	240e2 <statics_init+0x2a>
   240c2:	490b      	ldr	r1, [pc, #44]	; (240f0 <statics_init+0x38>)
   240c4:	480b      	ldr	r0, [pc, #44]	; (240f4 <statics_init+0x3c>)
   240c6:	2218      	movs	r2, #24
   240c8:	f006 fd40 	bl	2ab4c <assert_print>
   240cc:	4808      	ldr	r0, [pc, #32]	; (240f0 <statics_init+0x38>)
   240ce:	2118      	movs	r1, #24
   240d0:	f006 fd35 	bl	2ab3e <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   240d4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   240d8:	4620      	mov	r0, r4
   240da:	f00a fcfd 	bl	2ead8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   240de:	3418      	adds	r4, #24
   240e0:	e7ed      	b.n	240be <statics_init+0x6>
   240e2:	d3f7      	bcc.n	240d4 <statics_init+0x1c>
		}
	}
	return 0;
}
   240e4:	2000      	movs	r0, #0
   240e6:	bd38      	pop	{r3, r4, r5, pc}
   240e8:	20000aac 	.word	0x20000aac
   240ec:	20000ac4 	.word	0x20000ac4
   240f0:	00033fae 	.word	0x00033fae
   240f4:	0003013d 	.word	0x0003013d

000240f8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   240f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240fc:	b085      	sub	sp, #20
   240fe:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   24102:	4680      	mov	r8, r0
   24104:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24106:	4648      	mov	r0, r9
   24108:	4659      	mov	r1, fp
{
   2410a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2410c:	f00a fe11 	bl	2ed32 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24110:	f1bb 3fff 	cmp.w	fp, #4294967295
   24114:	bf08      	it	eq
   24116:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2411a:	4605      	mov	r5, r0
   2411c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2411e:	bf04      	itt	eq
   24120:	f04f 35ff 	moveq.w	r5, #4294967295
   24124:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24128:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   2412c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24130:	f3ef 8411 	mrs	r4, BASEPRI
   24134:	f383 8812 	msr	BASEPRI_MAX, r3
   24138:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2413c:	4630      	mov	r0, r6
   2413e:	f000 fa6b 	bl	24618 <z_spin_lock_valid>
   24142:	b938      	cbnz	r0, 24154 <k_heap_aligned_alloc+0x5c>
   24144:	492c      	ldr	r1, [pc, #176]	; (241f8 <k_heap_aligned_alloc+0x100>)
   24146:	482d      	ldr	r0, [pc, #180]	; (241fc <k_heap_aligned_alloc+0x104>)
   24148:	2294      	movs	r2, #148	; 0x94
   2414a:	f006 fcff 	bl	2ab4c <assert_print>
   2414e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24150:	4829      	ldr	r0, [pc, #164]	; (241f8 <k_heap_aligned_alloc+0x100>)
   24152:	e027      	b.n	241a4 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   24154:	4630      	mov	r0, r6
   24156:	f000 fa7d 	bl	24654 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2415a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2415e:	b113      	cbz	r3, 24166 <k_heap_aligned_alloc+0x6e>
   24160:	ea5b 0909 	orrs.w	r9, fp, r9
   24164:	d117      	bne.n	24196 <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24166:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2416a:	9903      	ldr	r1, [sp, #12]
   2416c:	4652      	mov	r2, sl
   2416e:	4640      	mov	r0, r8
   24170:	f7ee f8b4 	bl	122dc <sys_heap_aligned_alloc>
   24174:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   24176:	f002 fdd1 	bl	26d1c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2417a:	f1b9 0f00 	cmp.w	r9, #0
   2417e:	d013      	beq.n	241a8 <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24180:	4630      	mov	r0, r6
   24182:	f000 fa57 	bl	24634 <z_spin_unlock_valid>
   24186:	bb70      	cbnz	r0, 241e6 <k_heap_aligned_alloc+0xee>
   24188:	491b      	ldr	r1, [pc, #108]	; (241f8 <k_heap_aligned_alloc+0x100>)
   2418a:	481c      	ldr	r0, [pc, #112]	; (241fc <k_heap_aligned_alloc+0x104>)
   2418c:	22c2      	movs	r2, #194	; 0xc2
   2418e:	f006 fcdd 	bl	2ab4c <assert_print>
   24192:	21c2      	movs	r1, #194	; 0xc2
   24194:	e7dc      	b.n	24150 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24196:	491a      	ldr	r1, [pc, #104]	; (24200 <k_heap_aligned_alloc+0x108>)
   24198:	4818      	ldr	r0, [pc, #96]	; (241fc <k_heap_aligned_alloc+0x104>)
   2419a:	224c      	movs	r2, #76	; 0x4c
   2419c:	f006 fcd6 	bl	2ab4c <assert_print>
   241a0:	4817      	ldr	r0, [pc, #92]	; (24200 <k_heap_aligned_alloc+0x108>)
   241a2:	214c      	movs	r1, #76	; 0x4c
   241a4:	f006 fccb 	bl	2ab3e <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   241a8:	1a28      	subs	r0, r5, r0
   241aa:	eb67 0101 	sbc.w	r1, r7, r1
   241ae:	2801      	cmp	r0, #1
   241b0:	f171 0300 	sbcs.w	r3, r1, #0
   241b4:	dbe4      	blt.n	24180 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   241b6:	e9cd 0100 	strd	r0, r1, [sp]
   241ba:	465a      	mov	r2, fp
   241bc:	4621      	mov	r1, r4
   241be:	4630      	mov	r0, r6
   241c0:	f001 fe86 	bl	25ed0 <z_pend_curr>
   241c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   241c8:	f3ef 8411 	mrs	r4, BASEPRI
   241cc:	f383 8812 	msr	BASEPRI_MAX, r3
   241d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   241d4:	4630      	mov	r0, r6
   241d6:	f000 fa1f 	bl	24618 <z_spin_lock_valid>
   241da:	2800      	cmp	r0, #0
   241dc:	d0b2      	beq.n	24144 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   241de:	4630      	mov	r0, r6
   241e0:	f000 fa38 	bl	24654 <z_spin_lock_set_owner>
	return k;
   241e4:	e7c1      	b.n	2416a <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   241e6:	f384 8811 	msr	BASEPRI, r4
   241ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   241ee:	4648      	mov	r0, r9
   241f0:	b005      	add	sp, #20
   241f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241f6:	bf00      	nop
   241f8:	00030879 	.word	0x00030879
   241fc:	0003013d 	.word	0x0003013d
   24200:	00033fae 	.word	0x00033fae

00024204 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24206:	4604      	mov	r4, r0
   24208:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2420a:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   2420e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24212:	f3ef 8711 	mrs	r7, BASEPRI
   24216:	f383 8812 	msr	BASEPRI_MAX, r3
   2421a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2421e:	4628      	mov	r0, r5
   24220:	f000 f9fa 	bl	24618 <z_spin_lock_valid>
   24224:	b940      	cbnz	r0, 24238 <k_heap_free+0x34>
   24226:	4915      	ldr	r1, [pc, #84]	; (2427c <k_heap_free+0x78>)
   24228:	4815      	ldr	r0, [pc, #84]	; (24280 <k_heap_free+0x7c>)
   2422a:	2294      	movs	r2, #148	; 0x94
   2422c:	f006 fc8e 	bl	2ab4c <assert_print>
   24230:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24232:	4812      	ldr	r0, [pc, #72]	; (2427c <k_heap_free+0x78>)
   24234:	f006 fc83 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24238:	4628      	mov	r0, r5
   2423a:	f000 fa0b 	bl	24654 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2423e:	4620      	mov	r0, r4
   24240:	4631      	mov	r1, r6
   24242:	f7ee f819 	bl	12278 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24246:	f104 000c 	add.w	r0, r4, #12
   2424a:	f00a fd58 	bl	2ecfe <z_unpend_all>
   2424e:	b128      	cbz	r0, 2425c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   24250:	4639      	mov	r1, r7
   24252:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24254:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   24258:	f001 bbe6 	b.w	25a28 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2425c:	4628      	mov	r0, r5
   2425e:	f000 f9e9 	bl	24634 <z_spin_unlock_valid>
   24262:	b930      	cbnz	r0, 24272 <k_heap_free+0x6e>
   24264:	4905      	ldr	r1, [pc, #20]	; (2427c <k_heap_free+0x78>)
   24266:	4806      	ldr	r0, [pc, #24]	; (24280 <k_heap_free+0x7c>)
   24268:	22c2      	movs	r2, #194	; 0xc2
   2426a:	f006 fc6f 	bl	2ab4c <assert_print>
   2426e:	21c2      	movs	r1, #194	; 0xc2
   24270:	e7df      	b.n	24232 <k_heap_free+0x2e>
	__asm__ volatile(
   24272:	f387 8811 	msr	BASEPRI, r7
   24276:	f3bf 8f6f 	isb	sy
}
   2427a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2427c:	00030879 	.word	0x00030879
   24280:	0003013d 	.word	0x0003013d

00024284 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   24284:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24286:	4c0b      	ldr	r4, [pc, #44]	; (242b4 <init_mem_slab_module+0x30>)
   24288:	4d0b      	ldr	r5, [pc, #44]	; (242b8 <init_mem_slab_module+0x34>)
	int rc = 0;
   2428a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2428c:	42ac      	cmp	r4, r5
   2428e:	d90f      	bls.n	242b0 <init_mem_slab_module+0x2c>
   24290:	490a      	ldr	r1, [pc, #40]	; (242bc <init_mem_slab_module+0x38>)
   24292:	480b      	ldr	r0, [pc, #44]	; (242c0 <init_mem_slab_module+0x3c>)
   24294:	223d      	movs	r2, #61	; 0x3d
   24296:	f006 fc59 	bl	2ab4c <assert_print>
   2429a:	4808      	ldr	r0, [pc, #32]	; (242bc <init_mem_slab_module+0x38>)
   2429c:	213d      	movs	r1, #61	; 0x3d
   2429e:	f006 fc4e 	bl	2ab3e <assert_post_action>
		rc = create_free_list(slab);
   242a2:	4620      	mov	r0, r4
   242a4:	f00a fc20 	bl	2eae8 <create_free_list>
		if (rc < 0) {
   242a8:	2800      	cmp	r0, #0
   242aa:	db02      	blt.n	242b2 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   242ac:	3420      	adds	r4, #32
   242ae:	e7ed      	b.n	2428c <init_mem_slab_module+0x8>
   242b0:	d3f7      	bcc.n	242a2 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   242b2:	bd38      	pop	{r3, r4, r5, pc}
   242b4:	20000a4c 	.word	0x20000a4c
   242b8:	20000aac 	.word	0x20000aac
   242bc:	00033fd0 	.word	0x00033fd0
   242c0:	0003013d 	.word	0x0003013d

000242c4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   242c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   242c8:	4604      	mov	r4, r0
   242ca:	460d      	mov	r5, r1
   242cc:	4690      	mov	r8, r2
   242ce:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   242d0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   242d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   242d8:	f3ef 8911 	mrs	r9, BASEPRI
   242dc:	f383 8812 	msr	BASEPRI_MAX, r3
   242e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   242e4:	4630      	mov	r0, r6
   242e6:	f000 f997 	bl	24618 <z_spin_lock_valid>
   242ea:	b940      	cbnz	r0, 242fe <k_mem_slab_alloc+0x3a>
   242ec:	491e      	ldr	r1, [pc, #120]	; (24368 <k_mem_slab_alloc+0xa4>)
   242ee:	481f      	ldr	r0, [pc, #124]	; (2436c <k_mem_slab_alloc+0xa8>)
   242f0:	2294      	movs	r2, #148	; 0x94
   242f2:	f006 fc2b 	bl	2ab4c <assert_print>
   242f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242f8:	481b      	ldr	r0, [pc, #108]	; (24368 <k_mem_slab_alloc+0xa4>)
   242fa:	f006 fc20 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   242fe:	4630      	mov	r0, r6
   24300:	f000 f9a8 	bl	24654 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24304:	69a3      	ldr	r3, [r4, #24]
   24306:	b18b      	cbz	r3, 2432c <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   24308:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2430a:	681b      	ldr	r3, [r3, #0]
   2430c:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   2430e:	69e3      	ldr	r3, [r4, #28]
   24310:	3301      	adds	r3, #1
   24312:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24314:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24316:	4630      	mov	r0, r6
   24318:	f000 f98c 	bl	24634 <z_spin_unlock_valid>
   2431c:	b9f0      	cbnz	r0, 2435c <k_mem_slab_alloc+0x98>
   2431e:	4912      	ldr	r1, [pc, #72]	; (24368 <k_mem_slab_alloc+0xa4>)
   24320:	4812      	ldr	r0, [pc, #72]	; (2436c <k_mem_slab_alloc+0xa8>)
   24322:	22c2      	movs	r2, #194	; 0xc2
   24324:	f006 fc12 	bl	2ab4c <assert_print>
   24328:	21c2      	movs	r1, #194	; 0xc2
   2432a:	e7e5      	b.n	242f8 <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   2432c:	ea58 0207 	orrs.w	r2, r8, r7
   24330:	d103      	bne.n	2433a <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   24332:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   24334:	f06f 040b 	mvn.w	r4, #11
   24338:	e7ed      	b.n	24316 <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2433a:	4622      	mov	r2, r4
   2433c:	e9cd 8700 	strd	r8, r7, [sp]
   24340:	4649      	mov	r1, r9
   24342:	4630      	mov	r0, r6
   24344:	f001 fdc4 	bl	25ed0 <z_pend_curr>
		if (result == 0) {
   24348:	4604      	mov	r4, r0
   2434a:	b918      	cbnz	r0, 24354 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   2434c:	4b08      	ldr	r3, [pc, #32]	; (24370 <k_mem_slab_alloc+0xac>)
   2434e:	689b      	ldr	r3, [r3, #8]
   24350:	695b      	ldr	r3, [r3, #20]
   24352:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   24354:	4620      	mov	r0, r4
   24356:	b003      	add	sp, #12
   24358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   2435c:	f389 8811 	msr	BASEPRI, r9
   24360:	f3bf 8f6f 	isb	sy
	return result;
   24364:	e7f6      	b.n	24354 <k_mem_slab_alloc+0x90>
   24366:	bf00      	nop
   24368:	00030879 	.word	0x00030879
   2436c:	0003013d 	.word	0x0003013d
   24370:	200037fc 	.word	0x200037fc

00024374 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24378:	4604      	mov	r4, r0
   2437a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   2437c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24380:	f04f 0340 	mov.w	r3, #64	; 0x40
   24384:	f3ef 8711 	mrs	r7, BASEPRI
   24388:	f383 8812 	msr	BASEPRI_MAX, r3
   2438c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24390:	4630      	mov	r0, r6
   24392:	f000 f941 	bl	24618 <z_spin_lock_valid>
   24396:	b940      	cbnz	r0, 243aa <k_mem_slab_free+0x36>
   24398:	491c      	ldr	r1, [pc, #112]	; (2440c <k_mem_slab_free+0x98>)
   2439a:	481d      	ldr	r0, [pc, #116]	; (24410 <k_mem_slab_free+0x9c>)
   2439c:	2294      	movs	r2, #148	; 0x94
   2439e:	f006 fbd5 	bl	2ab4c <assert_print>
   243a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243a4:	4819      	ldr	r0, [pc, #100]	; (2440c <k_mem_slab_free+0x98>)
   243a6:	f006 fbca 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   243aa:	4630      	mov	r0, r6
   243ac:	f000 f952 	bl	24654 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   243b0:	f8d4 8018 	ldr.w	r8, [r4, #24]
   243b4:	f1b8 0f00 	cmp.w	r8, #0
   243b8:	d10f      	bne.n	243da <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   243ba:	4620      	mov	r0, r4
   243bc:	f001 ff8a 	bl	262d4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   243c0:	b158      	cbz	r0, 243da <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   243c2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   243c4:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   243c6:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   243ca:	f001 fac5 	bl	25958 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   243ce:	4639      	mov	r1, r7
   243d0:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   243d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   243d6:	f001 bb27 	b.w	25a28 <z_reschedule>
	**(char ***) mem = slab->free_list;
   243da:	682b      	ldr	r3, [r5, #0]
   243dc:	69a2      	ldr	r2, [r4, #24]
   243de:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   243e0:	682b      	ldr	r3, [r5, #0]
   243e2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   243e4:	69e3      	ldr	r3, [r4, #28]
   243e6:	3b01      	subs	r3, #1
   243e8:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   243ea:	4630      	mov	r0, r6
   243ec:	f000 f922 	bl	24634 <z_spin_unlock_valid>
   243f0:	b930      	cbnz	r0, 24400 <k_mem_slab_free+0x8c>
   243f2:	4906      	ldr	r1, [pc, #24]	; (2440c <k_mem_slab_free+0x98>)
   243f4:	4806      	ldr	r0, [pc, #24]	; (24410 <k_mem_slab_free+0x9c>)
   243f6:	22c2      	movs	r2, #194	; 0xc2
   243f8:	f006 fba8 	bl	2ab4c <assert_print>
   243fc:	21c2      	movs	r1, #194	; 0xc2
   243fe:	e7d1      	b.n	243a4 <k_mem_slab_free+0x30>
	__asm__ volatile(
   24400:	f387 8811 	msr	BASEPRI, r7
   24404:	f3bf 8f6f 	isb	sy
}
   24408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2440c:	00030879 	.word	0x00030879
   24410:	0003013d 	.word	0x0003013d

00024414 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   24414:	b5f0      	push	{r4, r5, r6, r7, lr}
   24416:	b085      	sub	sp, #20
   24418:	4604      	mov	r4, r0
   2441a:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   2441c:	280f      	cmp	r0, #15
   2441e:	d12e      	bne.n	2447e <z_setup_new_thread+0x6a>
   24420:	4d1e      	ldr	r5, [pc, #120]	; (2449c <z_setup_new_thread+0x88>)
   24422:	42ab      	cmp	r3, r5
   24424:	d12f      	bne.n	24486 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   24426:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2442a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2442e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24430:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24432:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   24434:	2504      	movs	r5, #4
   24436:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24438:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2443c:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   24440:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   24444:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24446:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   24448:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2444a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   2444e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   24450:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   24452:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   24454:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24458:	9202      	str	r2, [sp, #8]
   2445a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2445c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2445e:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24462:	9200      	str	r2, [sp, #0]
   24464:	4620      	mov	r0, r4
   24466:	463a      	mov	r2, r7
   24468:	f7f0 fcbe 	bl	14de8 <arch_new_thread>
	if (!_current) {
   2446c:	4b0c      	ldr	r3, [pc, #48]	; (244a0 <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   2446e:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   24470:	689b      	ldr	r3, [r3, #8]
   24472:	b103      	cbz	r3, 24476 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   24474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   24476:	6763      	str	r3, [r4, #116]	; 0x74
}
   24478:	4638      	mov	r0, r7
   2447a:	b005      	add	sp, #20
   2447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2447e:	f100 0510 	add.w	r5, r0, #16
   24482:	2d1e      	cmp	r5, #30
   24484:	d9cf      	bls.n	24426 <z_setup_new_thread+0x12>
   24486:	4907      	ldr	r1, [pc, #28]	; (244a4 <z_setup_new_thread+0x90>)
   24488:	4807      	ldr	r0, [pc, #28]	; (244a8 <z_setup_new_thread+0x94>)
   2448a:	f44f 7206 	mov.w	r2, #536	; 0x218
   2448e:	f006 fb5d 	bl	2ab4c <assert_print>
   24492:	4804      	ldr	r0, [pc, #16]	; (244a4 <z_setup_new_thread+0x90>)
   24494:	f44f 7106 	mov.w	r1, #536	; 0x218
   24498:	f006 fb51 	bl	2ab3e <assert_post_action>
   2449c:	00024665 	.word	0x00024665
   244a0:	200037fc 	.word	0x200037fc
   244a4:	00033ff5 	.word	0x00033ff5
   244a8:	0003013d 	.word	0x0003013d

000244ac <z_impl_k_thread_create>:
{
   244ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   244ae:	b087      	sub	sp, #28
   244b0:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   244b4:	4604      	mov	r4, r0
   244b6:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   244ba:	b155      	cbz	r5, 244d2 <z_impl_k_thread_create+0x26>
   244bc:	4917      	ldr	r1, [pc, #92]	; (2451c <z_impl_k_thread_create+0x70>)
   244be:	4818      	ldr	r0, [pc, #96]	; (24520 <z_impl_k_thread_create+0x74>)
   244c0:	f240 2287 	movw	r2, #647	; 0x287
   244c4:	f006 fb42 	bl	2ab4c <assert_print>
   244c8:	4814      	ldr	r0, [pc, #80]	; (2451c <z_impl_k_thread_create+0x70>)
   244ca:	f240 2187 	movw	r1, #647	; 0x287
   244ce:	f006 fb36 	bl	2ab3e <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   244d2:	9505      	str	r5, [sp, #20]
   244d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   244d6:	9504      	str	r5, [sp, #16]
   244d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   244da:	9503      	str	r5, [sp, #12]
   244dc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   244de:	9502      	str	r5, [sp, #8]
   244e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   244e2:	9501      	str	r5, [sp, #4]
   244e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   244e6:	9500      	str	r5, [sp, #0]
   244e8:	f7ff ff94 	bl	24414 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   244ec:	f1b6 3fff 	cmp.w	r6, #4294967295
   244f0:	bf08      	it	eq
   244f2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   244f6:	d005      	beq.n	24504 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   244f8:	ea56 0307 	orrs.w	r3, r6, r7
   244fc:	d105      	bne.n	2450a <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   244fe:	4620      	mov	r0, r4
   24500:	f001 fac6 	bl	25a90 <z_sched_start>
}
   24504:	4620      	mov	r0, r4
   24506:	b007      	add	sp, #28
   24508:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2450a:	4906      	ldr	r1, [pc, #24]	; (24524 <z_impl_k_thread_create+0x78>)
   2450c:	463a      	mov	r2, r7
   2450e:	4633      	mov	r3, r6
   24510:	f104 0018 	add.w	r0, r4, #24
   24514:	f002 f9e4 	bl	268e0 <z_add_timeout>
   24518:	e7f4      	b.n	24504 <z_impl_k_thread_create+0x58>
   2451a:	bf00      	nop
   2451c:	00033ff5 	.word	0x00033ff5
   24520:	0003013d 	.word	0x0003013d
   24524:	000261d5 	.word	0x000261d5

00024528 <z_init_static_threads>:
{
   24528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2452c:	4c35      	ldr	r4, [pc, #212]	; (24604 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2452e:	4d36      	ldr	r5, [pc, #216]	; (24608 <z_init_static_threads+0xe0>)
{
   24530:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   24532:	42ac      	cmp	r4, r5
   24534:	4626      	mov	r6, r4
   24536:	d926      	bls.n	24586 <z_init_static_threads+0x5e>
   24538:	4934      	ldr	r1, [pc, #208]	; (2460c <z_init_static_threads+0xe4>)
   2453a:	4835      	ldr	r0, [pc, #212]	; (24610 <z_init_static_threads+0xe8>)
   2453c:	f240 22ee 	movw	r2, #750	; 0x2ee
   24540:	f006 fb04 	bl	2ab4c <assert_print>
   24544:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   24548:	4830      	ldr	r0, [pc, #192]	; (2460c <z_init_static_threads+0xe4>)
   2454a:	f006 faf8 	bl	2ab3e <assert_post_action>
		z_setup_new_thread(
   2454e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24552:	9305      	str	r3, [sp, #20]
   24554:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24558:	9304      	str	r3, [sp, #16]
   2455a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2455e:	9303      	str	r3, [sp, #12]
   24560:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24564:	9302      	str	r3, [sp, #8]
   24566:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2456a:	9301      	str	r3, [sp, #4]
   2456c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24570:	9300      	str	r3, [sp, #0]
   24572:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24576:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2457a:	f7ff ff4b 	bl	24414 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2457e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24582:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   24584:	e7d5      	b.n	24532 <z_init_static_threads+0xa>
   24586:	42ae      	cmp	r6, r5
   24588:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2458c:	d3df      	bcc.n	2454e <z_init_static_threads+0x26>
	k_sched_lock();
   2458e:	f001 fabf 	bl	25b10 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   24592:	4c1c      	ldr	r4, [pc, #112]	; (24604 <z_init_static_threads+0xdc>)
   24594:	f8df 907c 	ldr.w	r9, [pc, #124]	; 24614 <z_init_static_threads+0xec>
   24598:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2459c:	f240 37e7 	movw	r7, #999	; 0x3e7
   245a0:	42ac      	cmp	r4, r5
   245a2:	d928      	bls.n	245f6 <z_init_static_threads+0xce>
   245a4:	4919      	ldr	r1, [pc, #100]	; (2460c <z_init_static_threads+0xe4>)
   245a6:	481a      	ldr	r0, [pc, #104]	; (24610 <z_init_static_threads+0xe8>)
   245a8:	f240 320d 	movw	r2, #781	; 0x30d
   245ac:	f006 face 	bl	2ab4c <assert_print>
   245b0:	f240 310d 	movw	r1, #781	; 0x30d
   245b4:	e7c8      	b.n	24548 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   245b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   245b8:	1c5a      	adds	r2, r3, #1
   245ba:	d00d      	beq.n	245d8 <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   245bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   245c0:	2100      	movs	r1, #0
   245c2:	4638      	mov	r0, r7
   245c4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   245c8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   245cc:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   245d0:	d104      	bne.n	245dc <z_init_static_threads+0xb4>
	z_sched_start(thread);
   245d2:	4640      	mov	r0, r8
   245d4:	f001 fa5c 	bl	25a90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   245d8:	3430      	adds	r4, #48	; 0x30
   245da:	e7e1      	b.n	245a0 <z_init_static_threads+0x78>
   245dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   245e0:	2300      	movs	r3, #0
   245e2:	f7db fd8d 	bl	100 <__aeabi_uldivmod>
   245e6:	4602      	mov	r2, r0
   245e8:	460b      	mov	r3, r1
   245ea:	f108 0018 	add.w	r0, r8, #24
   245ee:	4649      	mov	r1, r9
   245f0:	f002 f976 	bl	268e0 <z_add_timeout>
   245f4:	e7f0      	b.n	245d8 <z_init_static_threads+0xb0>
   245f6:	d3de      	bcc.n	245b6 <z_init_static_threads+0x8e>
}
   245f8:	b007      	add	sp, #28
   245fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   245fe:	f001 bad3 	b.w	25ba8 <k_sched_unlock>
   24602:	bf00      	nop
   24604:	0002f284 	.word	0x0002f284
   24608:	0002f284 	.word	0x0002f284
   2460c:	00033ff5 	.word	0x00033ff5
   24610:	0003013d 	.word	0x0003013d
   24614:	000261d5 	.word	0x000261d5

00024618 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24618:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2461a:	b138      	cbz	r0, 2462c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2461c:	4b04      	ldr	r3, [pc, #16]	; (24630 <z_spin_lock_valid+0x18>)
   2461e:	7d1b      	ldrb	r3, [r3, #20]
   24620:	f000 0003 	and.w	r0, r0, #3
   24624:	1ac0      	subs	r0, r0, r3
   24626:	bf18      	it	ne
   24628:	2001      	movne	r0, #1
   2462a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2462c:	2001      	movs	r0, #1
}
   2462e:	4770      	bx	lr
   24630:	200037fc 	.word	0x200037fc

00024634 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24634:	4a06      	ldr	r2, [pc, #24]	; (24650 <z_spin_unlock_valid+0x1c>)
   24636:	7d11      	ldrb	r1, [r2, #20]
   24638:	6892      	ldr	r2, [r2, #8]
   2463a:	430a      	orrs	r2, r1
   2463c:	6801      	ldr	r1, [r0, #0]
{
   2463e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24640:	4291      	cmp	r1, r2
   24642:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   24646:	bf04      	itt	eq
   24648:	6018      	streq	r0, [r3, #0]
	return true;
   2464a:	2001      	moveq	r0, #1
}
   2464c:	4770      	bx	lr
   2464e:	bf00      	nop
   24650:	200037fc 	.word	0x200037fc

00024654 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24654:	4b02      	ldr	r3, [pc, #8]	; (24660 <z_spin_lock_set_owner+0xc>)
   24656:	7d1a      	ldrb	r2, [r3, #20]
   24658:	689b      	ldr	r3, [r3, #8]
   2465a:	4313      	orrs	r3, r2
   2465c:	6003      	str	r3, [r0, #0]
}
   2465e:	4770      	bx	lr
   24660:	200037fc 	.word	0x200037fc

00024664 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24664:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24666:	4c12      	ldr	r4, [pc, #72]	; (246b0 <idle+0x4c>)
   24668:	68a3      	ldr	r3, [r4, #8]
   2466a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2466e:	2b00      	cmp	r3, #0
   24670:	db10      	blt.n	24694 <idle+0x30>
	return !z_sys_post_kernel;
   24672:	4d10      	ldr	r5, [pc, #64]	; (246b4 <idle+0x50>)
	__asm__ volatile(
   24674:	f04f 0240 	mov.w	r2, #64	; 0x40
   24678:	f3ef 8311 	mrs	r3, BASEPRI
   2467c:	f382 8812 	msr	BASEPRI_MAX, r2
   24680:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24684:	f002 fa4a 	bl	26b1c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24688:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2468a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2468c:	b95b      	cbnz	r3, 246a6 <idle+0x42>
	arch_cpu_idle();
   2468e:	f7f0 fa87 	bl	14ba0 <arch_cpu_idle>
}
   24692:	e7ef      	b.n	24674 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24694:	4908      	ldr	r1, [pc, #32]	; (246b8 <idle+0x54>)
   24696:	4809      	ldr	r0, [pc, #36]	; (246bc <idle+0x58>)
   24698:	2227      	movs	r2, #39	; 0x27
   2469a:	f006 fa57 	bl	2ab4c <assert_print>
   2469e:	4806      	ldr	r0, [pc, #24]	; (246b8 <idle+0x54>)
   246a0:	2127      	movs	r1, #39	; 0x27
   246a2:	f006 fa4c 	bl	2ab3e <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   246a6:	f7ef fbd1 	bl	13e4c <pm_system_suspend>
   246aa:	2800      	cmp	r0, #0
   246ac:	d1e2      	bne.n	24674 <idle+0x10>
   246ae:	e7ee      	b.n	2468e <idle+0x2a>
   246b0:	200037fc 	.word	0x200037fc
   246b4:	20004938 	.word	0x20004938
   246b8:	00034018 	.word	0x00034018
   246bc:	0003013d 	.word	0x0003013d

000246c0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   246c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   246c4:	4604      	mov	r4, r0
   246c6:	4689      	mov	r9, r1
   246c8:	4690      	mov	r8, r2
   246ca:	461d      	mov	r5, r3
   246cc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   246d0:	b15b      	cbz	r3, 246ea <z_impl_k_msgq_put+0x2a>
   246d2:	ea52 0305 	orrs.w	r3, r2, r5
   246d6:	d008      	beq.n	246ea <z_impl_k_msgq_put+0x2a>
   246d8:	493a      	ldr	r1, [pc, #232]	; (247c4 <z_impl_k_msgq_put+0x104>)
   246da:	483b      	ldr	r0, [pc, #236]	; (247c8 <z_impl_k_msgq_put+0x108>)
   246dc:	2276      	movs	r2, #118	; 0x76
   246de:	f006 fa35 	bl	2ab4c <assert_print>
   246e2:	4838      	ldr	r0, [pc, #224]	; (247c4 <z_impl_k_msgq_put+0x104>)
   246e4:	2176      	movs	r1, #118	; 0x76
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246e6:	f006 fa2a 	bl	2ab3e <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   246ea:	f104 0608 	add.w	r6, r4, #8
   246ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   246f2:	f3ef 8711 	mrs	r7, BASEPRI
   246f6:	f383 8812 	msr	BASEPRI_MAX, r3
   246fa:	f3bf 8f6f 	isb	sy
   246fe:	4630      	mov	r0, r6
   24700:	f7ff ff8a 	bl	24618 <z_spin_lock_valid>
   24704:	b938      	cbnz	r0, 24716 <z_impl_k_msgq_put+0x56>
   24706:	4931      	ldr	r1, [pc, #196]	; (247cc <z_impl_k_msgq_put+0x10c>)
   24708:	482f      	ldr	r0, [pc, #188]	; (247c8 <z_impl_k_msgq_put+0x108>)
   2470a:	2294      	movs	r2, #148	; 0x94
   2470c:	f006 fa1e 	bl	2ab4c <assert_print>
   24710:	2194      	movs	r1, #148	; 0x94
   24712:	482e      	ldr	r0, [pc, #184]	; (247cc <z_impl_k_msgq_put+0x10c>)
   24714:	e7e7      	b.n	246e6 <z_impl_k_msgq_put+0x26>
	z_spin_lock_set_owner(l);
   24716:	4630      	mov	r0, r6
   24718:	f7ff ff9c 	bl	24654 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   2471c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2471e:	6923      	ldr	r3, [r4, #16]
   24720:	429a      	cmp	r2, r3
   24722:	d236      	bcs.n	24792 <z_impl_k_msgq_put+0xd2>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   24724:	4620      	mov	r0, r4
   24726:	f001 fdd5 	bl	262d4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   2472a:	68e2      	ldr	r2, [r4, #12]
		if (pending_thread != NULL) {
   2472c:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   2472e:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   24730:	b178      	cbz	r0, 24752 <z_impl_k_msgq_put+0x92>
			(void)memcpy(pending_thread->base.swap_data, data,
   24732:	6940      	ldr	r0, [r0, #20]
   24734:	2400      	movs	r4, #0
   24736:	f007 f9df 	bl	2baf8 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2473a:	4628      	mov	r0, r5
   2473c:	67ec      	str	r4, [r5, #124]	; 0x7c
   2473e:	f001 f90b 	bl	25958 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   24742:	4639      	mov	r1, r7
   24744:	4630      	mov	r0, r6
   24746:	f001 f96f 	bl	25a28 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2474a:	4620      	mov	r0, r4
   2474c:	b003      	add	sp, #12
   2474e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   24752:	6a20      	ldr	r0, [r4, #32]
   24754:	f007 f9d0 	bl	2baf8 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   24758:	6a23      	ldr	r3, [r4, #32]
   2475a:	68e2      	ldr	r2, [r4, #12]
   2475c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2475e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   24760:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   24762:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   24764:	bf04      	itt	eq
   24766:	6963      	ldreq	r3, [r4, #20]
   24768:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2476a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2476c:	3301      	adds	r3, #1
   2476e:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   24770:	f104 0028 	add.w	r0, r4, #40	; 0x28
   24774:	2110      	movs	r1, #16
   24776:	f00a fbb2 	bl	2eede <z_handle_obj_poll_events>
		result = 0;
   2477a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2477c:	4630      	mov	r0, r6
   2477e:	f7ff ff59 	bl	24634 <z_spin_unlock_valid>
   24782:	b9c8      	cbnz	r0, 247b8 <z_impl_k_msgq_put+0xf8>
   24784:	4911      	ldr	r1, [pc, #68]	; (247cc <z_impl_k_msgq_put+0x10c>)
   24786:	4810      	ldr	r0, [pc, #64]	; (247c8 <z_impl_k_msgq_put+0x108>)
   24788:	22c2      	movs	r2, #194	; 0xc2
   2478a:	f006 f9df 	bl	2ab4c <assert_print>
   2478e:	21c2      	movs	r1, #194	; 0xc2
   24790:	e7bf      	b.n	24712 <z_impl_k_msgq_put+0x52>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24792:	ea58 0305 	orrs.w	r3, r8, r5
   24796:	d00c      	beq.n	247b2 <z_impl_k_msgq_put+0xf2>
		_current->base.swap_data = (void *) data;
   24798:	4b0d      	ldr	r3, [pc, #52]	; (247d0 <z_impl_k_msgq_put+0x110>)
   2479a:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2479c:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   2479e:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   247a2:	4639      	mov	r1, r7
   247a4:	e9cd 8500 	strd	r8, r5, [sp]
   247a8:	4630      	mov	r0, r6
   247aa:	f001 fb91 	bl	25ed0 <z_pend_curr>
   247ae:	4604      	mov	r4, r0
		return result;
   247b0:	e7cb      	b.n	2474a <z_impl_k_msgq_put+0x8a>
		result = -ENOMSG;
   247b2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   247b6:	e7e1      	b.n	2477c <z_impl_k_msgq_put+0xbc>
	__asm__ volatile(
   247b8:	f387 8811 	msr	BASEPRI, r7
   247bc:	f3bf 8f6f 	isb	sy
	return result;
   247c0:	e7c3      	b.n	2474a <z_impl_k_msgq_put+0x8a>
   247c2:	bf00      	nop
   247c4:	00034039 	.word	0x00034039
   247c8:	0003013d 	.word	0x0003013d
   247cc:	00030879 	.word	0x00030879
   247d0:	200037fc 	.word	0x200037fc

000247d4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   247d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   247d8:	4604      	mov	r4, r0
   247da:	4688      	mov	r8, r1
   247dc:	4617      	mov	r7, r2
   247de:	461d      	mov	r5, r3
   247e0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   247e4:	b15b      	cbz	r3, 247fe <z_impl_k_msgq_get+0x2a>
   247e6:	ea52 0305 	orrs.w	r3, r2, r5
   247ea:	d008      	beq.n	247fe <z_impl_k_msgq_get+0x2a>
   247ec:	493e      	ldr	r1, [pc, #248]	; (248e8 <z_impl_k_msgq_get+0x114>)
   247ee:	483f      	ldr	r0, [pc, #252]	; (248ec <z_impl_k_msgq_get+0x118>)
   247f0:	22d0      	movs	r2, #208	; 0xd0
   247f2:	f006 f9ab 	bl	2ab4c <assert_print>
   247f6:	483c      	ldr	r0, [pc, #240]	; (248e8 <z_impl_k_msgq_get+0x114>)
   247f8:	21d0      	movs	r1, #208	; 0xd0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247fa:	f006 f9a0 	bl	2ab3e <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   247fe:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   24802:	f04f 0340 	mov.w	r3, #64	; 0x40
   24806:	f3ef 8911 	mrs	r9, BASEPRI
   2480a:	f383 8812 	msr	BASEPRI_MAX, r3
   2480e:	f3bf 8f6f 	isb	sy
   24812:	4630      	mov	r0, r6
   24814:	f7ff ff00 	bl	24618 <z_spin_lock_valid>
   24818:	b938      	cbnz	r0, 2482a <z_impl_k_msgq_get+0x56>
   2481a:	4935      	ldr	r1, [pc, #212]	; (248f0 <z_impl_k_msgq_get+0x11c>)
   2481c:	4833      	ldr	r0, [pc, #204]	; (248ec <z_impl_k_msgq_get+0x118>)
   2481e:	2294      	movs	r2, #148	; 0x94
   24820:	f006 f994 	bl	2ab4c <assert_print>
   24824:	2194      	movs	r1, #148	; 0x94
   24826:	4832      	ldr	r0, [pc, #200]	; (248f0 <z_impl_k_msgq_get+0x11c>)
   24828:	e7e7      	b.n	247fa <z_impl_k_msgq_get+0x26>
	z_spin_lock_set_owner(l);
   2482a:	4630      	mov	r0, r6
   2482c:	f7ff ff12 	bl	24654 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   24830:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24832:	2b00      	cmp	r3, #0
   24834:	d035      	beq.n	248a2 <z_impl_k_msgq_get+0xce>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   24836:	68e2      	ldr	r2, [r4, #12]
   24838:	69e1      	ldr	r1, [r4, #28]
   2483a:	4640      	mov	r0, r8
   2483c:	f007 f95c 	bl	2baf8 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   24840:	69e3      	ldr	r3, [r4, #28]
   24842:	68e2      	ldr	r2, [r4, #12]
   24844:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   24846:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   24848:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   2484a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2484c:	bf04      	itt	eq
   2484e:	6963      	ldreq	r3, [r4, #20]
   24850:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
   24852:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24854:	3b01      	subs	r3, #1
   24856:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   24858:	4620      	mov	r0, r4
   2485a:	f001 fd3b 	bl	262d4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2485e:	4605      	mov	r5, r0
   24860:	2800      	cmp	r0, #0
   24862:	d030      	beq.n	248c6 <z_impl_k_msgq_get+0xf2>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   24864:	6941      	ldr	r1, [r0, #20]
   24866:	68e2      	ldr	r2, [r4, #12]
   24868:	6a20      	ldr	r0, [r4, #32]
   2486a:	f007 f945 	bl	2baf8 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2486e:	6a23      	ldr	r3, [r4, #32]
   24870:	68e2      	ldr	r2, [r4, #12]
   24872:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   24874:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   24876:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   24878:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2487a:	bf04      	itt	eq
   2487c:	6963      	ldreq	r3, [r4, #20]
   2487e:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   24880:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24882:	3301      	adds	r3, #1
   24884:	6263      	str	r3, [r4, #36]	; 0x24
   24886:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   24888:	4628      	mov	r0, r5
   2488a:	67ec      	str	r4, [r5, #124]	; 0x7c
   2488c:	f001 f864 	bl	25958 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   24890:	4649      	mov	r1, r9
   24892:	4630      	mov	r0, r6
   24894:	f001 f8c8 	bl	25a28 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   24898:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2489a:	4628      	mov	r0, r5
   2489c:	b003      	add	sp, #12
   2489e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   248a2:	ea57 0305 	orrs.w	r3, r7, r5
   248a6:	d00c      	beq.n	248c2 <z_impl_k_msgq_get+0xee>
		_current->base.swap_data = data;
   248a8:	4b12      	ldr	r3, [pc, #72]	; (248f4 <z_impl_k_msgq_get+0x120>)
   248aa:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   248ac:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   248ae:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   248b2:	4649      	mov	r1, r9
   248b4:	e9cd 7500 	strd	r7, r5, [sp]
   248b8:	4630      	mov	r0, r6
   248ba:	f001 fb09 	bl	25ed0 <z_pend_curr>
   248be:	4605      	mov	r5, r0
		return result;
   248c0:	e7eb      	b.n	2489a <z_impl_k_msgq_get+0xc6>
		result = -ENOMSG;
   248c2:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   248c6:	4630      	mov	r0, r6
   248c8:	f7ff feb4 	bl	24634 <z_spin_unlock_valid>
   248cc:	b930      	cbnz	r0, 248dc <z_impl_k_msgq_get+0x108>
   248ce:	4908      	ldr	r1, [pc, #32]	; (248f0 <z_impl_k_msgq_get+0x11c>)
   248d0:	4806      	ldr	r0, [pc, #24]	; (248ec <z_impl_k_msgq_get+0x118>)
   248d2:	22c2      	movs	r2, #194	; 0xc2
   248d4:	f006 f93a 	bl	2ab4c <assert_print>
   248d8:	21c2      	movs	r1, #194	; 0xc2
   248da:	e7a4      	b.n	24826 <z_impl_k_msgq_get+0x52>
	__asm__ volatile(
   248dc:	f389 8811 	msr	BASEPRI, r9
   248e0:	f3bf 8f6f 	isb	sy
	return result;
   248e4:	e7d9      	b.n	2489a <z_impl_k_msgq_get+0xc6>
   248e6:	bf00      	nop
   248e8:	00034039 	.word	0x00034039
   248ec:	0003013d 	.word	0x0003013d
   248f0:	00030879 	.word	0x00030879
   248f4:	200037fc 	.word	0x200037fc

000248f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   248f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   248fc:	4604      	mov	r4, r0
   248fe:	4617      	mov	r7, r2
   24900:	461e      	mov	r6, r3
   24902:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24906:	b145      	cbz	r5, 2491a <z_impl_k_mutex_lock+0x22>
   24908:	4951      	ldr	r1, [pc, #324]	; (24a50 <z_impl_k_mutex_lock+0x158>)
   2490a:	4852      	ldr	r0, [pc, #328]	; (24a54 <z_impl_k_mutex_lock+0x15c>)
   2490c:	2265      	movs	r2, #101	; 0x65
   2490e:	f006 f91d 	bl	2ab4c <assert_print>
   24912:	484f      	ldr	r0, [pc, #316]	; (24a50 <z_impl_k_mutex_lock+0x158>)
   24914:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24916:	f006 f912 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   2491a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2491e:	f3ef 8811 	mrs	r8, BASEPRI
   24922:	f383 8812 	msr	BASEPRI_MAX, r3
   24926:	f3bf 8f6f 	isb	sy
   2492a:	484b      	ldr	r0, [pc, #300]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   2492c:	f7ff fe74 	bl	24618 <z_spin_lock_valid>
   24930:	b938      	cbnz	r0, 24942 <z_impl_k_mutex_lock+0x4a>
   24932:	494a      	ldr	r1, [pc, #296]	; (24a5c <z_impl_k_mutex_lock+0x164>)
   24934:	4847      	ldr	r0, [pc, #284]	; (24a54 <z_impl_k_mutex_lock+0x15c>)
   24936:	2294      	movs	r2, #148	; 0x94
   24938:	f006 f908 	bl	2ab4c <assert_print>
   2493c:	2194      	movs	r1, #148	; 0x94
   2493e:	4847      	ldr	r0, [pc, #284]	; (24a5c <z_impl_k_mutex_lock+0x164>)
   24940:	e7e9      	b.n	24916 <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   24942:	4845      	ldr	r0, [pc, #276]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   24944:	f7ff fe86 	bl	24654 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   24948:	68e3      	ldr	r3, [r4, #12]
   2494a:	4a45      	ldr	r2, [pc, #276]	; (24a60 <z_impl_k_mutex_lock+0x168>)
   2494c:	b19b      	cbz	r3, 24976 <z_impl_k_mutex_lock+0x7e>
   2494e:	68a0      	ldr	r0, [r4, #8]
   24950:	6891      	ldr	r1, [r2, #8]
   24952:	4288      	cmp	r0, r1
   24954:	d022      	beq.n	2499c <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   24956:	ea57 0306 	orrs.w	r3, r7, r6
   2495a:	d127      	bne.n	249ac <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2495c:	483e      	ldr	r0, [pc, #248]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   2495e:	f7ff fe69 	bl	24634 <z_spin_unlock_valid>
   24962:	b1a0      	cbz	r0, 2498e <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   24964:	f388 8811 	msr	BASEPRI, r8
   24968:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2496c:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24970:	b002      	add	sp, #8
   24972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   24976:	6891      	ldr	r1, [r2, #8]
   24978:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2497c:	4836      	ldr	r0, [pc, #216]	; (24a58 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2497e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   24980:	3301      	adds	r3, #1
   24982:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   24984:	6893      	ldr	r3, [r2, #8]
   24986:	60a3      	str	r3, [r4, #8]
   24988:	f7ff fe54 	bl	24634 <z_spin_unlock_valid>
   2498c:	b940      	cbnz	r0, 249a0 <z_impl_k_mutex_lock+0xa8>
   2498e:	4933      	ldr	r1, [pc, #204]	; (24a5c <z_impl_k_mutex_lock+0x164>)
   24990:	4830      	ldr	r0, [pc, #192]	; (24a54 <z_impl_k_mutex_lock+0x15c>)
   24992:	22c2      	movs	r2, #194	; 0xc2
   24994:	f006 f8da 	bl	2ab4c <assert_print>
   24998:	21c2      	movs	r1, #194	; 0xc2
   2499a:	e7d0      	b.n	2493e <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   2499c:	6921      	ldr	r1, [r4, #16]
   2499e:	e7ed      	b.n	2497c <z_impl_k_mutex_lock+0x84>
   249a0:	f388 8811 	msr	BASEPRI, r8
   249a4:	f3bf 8f6f 	isb	sy
		return 0;
   249a8:	2000      	movs	r0, #0
   249aa:	e7e1      	b.n	24970 <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   249ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   249b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   249b4:	4299      	cmp	r1, r3
   249b6:	bfa8      	it	ge
   249b8:	4619      	movge	r1, r3
   249ba:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   249be:	4291      	cmp	r1, r2
   249c0:	bfb8      	it	lt
   249c2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   249c4:	428b      	cmp	r3, r1
   249c6:	dd02      	ble.n	249ce <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   249c8:	f00a f8c7 	bl	2eb5a <adjust_owner_prio.isra.0>
   249cc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   249ce:	e9cd 7600 	strd	r7, r6, [sp]
   249d2:	4821      	ldr	r0, [pc, #132]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   249d4:	4622      	mov	r2, r4
   249d6:	4641      	mov	r1, r8
   249d8:	f001 fa7a 	bl	25ed0 <z_pend_curr>
	if (got_mutex == 0) {
   249dc:	2800      	cmp	r0, #0
   249de:	d0e3      	beq.n	249a8 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   249e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   249e4:	f3ef 8611 	mrs	r6, BASEPRI
   249e8:	f383 8812 	msr	BASEPRI_MAX, r3
   249ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   249f0:	4819      	ldr	r0, [pc, #100]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   249f2:	f7ff fe11 	bl	24618 <z_spin_lock_valid>
   249f6:	2800      	cmp	r0, #0
   249f8:	d09b      	beq.n	24932 <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   249fa:	4817      	ldr	r0, [pc, #92]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   249fc:	f7ff fe2a 	bl	24654 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   24a00:	68a0      	ldr	r0, [r4, #8]
   24a02:	b1c0      	cbz	r0, 24a36 <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   24a04:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   24a06:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a08:	429c      	cmp	r4, r3
   24a0a:	d00a      	beq.n	24a22 <z_impl_k_mutex_lock+0x12a>
   24a0c:	b14b      	cbz	r3, 24a22 <z_impl_k_mutex_lock+0x12a>
   24a0e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   24a12:	4299      	cmp	r1, r3
   24a14:	bfa8      	it	ge
   24a16:	4619      	movge	r1, r3
   24a18:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24a1c:	4299      	cmp	r1, r3
   24a1e:	bfb8      	it	lt
   24a20:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   24a22:	f00a f89a 	bl	2eb5a <adjust_owner_prio.isra.0>
   24a26:	b130      	cbz	r0, 24a36 <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   24a28:	480b      	ldr	r0, [pc, #44]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   24a2a:	4631      	mov	r1, r6
   24a2c:	f000 fffc 	bl	25a28 <z_reschedule>
	return -EAGAIN;
   24a30:	f06f 000a 	mvn.w	r0, #10
   24a34:	e79c      	b.n	24970 <z_impl_k_mutex_lock+0x78>
	if (resched) {
   24a36:	2d00      	cmp	r5, #0
   24a38:	d1f6      	bne.n	24a28 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a3a:	4807      	ldr	r0, [pc, #28]	; (24a58 <z_impl_k_mutex_lock+0x160>)
   24a3c:	f7ff fdfa 	bl	24634 <z_spin_unlock_valid>
   24a40:	2800      	cmp	r0, #0
   24a42:	d0a4      	beq.n	2498e <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   24a44:	f386 8811 	msr	BASEPRI, r6
   24a48:	f3bf 8f6f 	isb	sy
   24a4c:	e7f0      	b.n	24a30 <z_impl_k_mutex_lock+0x138>
   24a4e:	bf00      	nop
   24a50:	0003405b 	.word	0x0003405b
   24a54:	0003013d 	.word	0x0003013d
   24a58:	20003824 	.word	0x20003824
   24a5c:	00030879 	.word	0x00030879
   24a60:	200037fc 	.word	0x200037fc

00024a64 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   24a64:	b570      	push	{r4, r5, r6, lr}
   24a66:	4604      	mov	r4, r0
   24a68:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24a6c:	b146      	cbz	r6, 24a80 <z_impl_k_mutex_unlock+0x1c>
   24a6e:	4930      	ldr	r1, [pc, #192]	; (24b30 <z_impl_k_mutex_unlock+0xcc>)
   24a70:	4830      	ldr	r0, [pc, #192]	; (24b34 <z_impl_k_mutex_unlock+0xd0>)
   24a72:	22cd      	movs	r2, #205	; 0xcd
   24a74:	f006 f86a 	bl	2ab4c <assert_print>
   24a78:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24a7a:	482d      	ldr	r0, [pc, #180]	; (24b30 <z_impl_k_mutex_unlock+0xcc>)
   24a7c:	f006 f85f 	bl	2ab3e <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   24a80:	6883      	ldr	r3, [r0, #8]
   24a82:	2b00      	cmp	r3, #0
   24a84:	d04e      	beq.n	24b24 <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   24a86:	4a2c      	ldr	r2, [pc, #176]	; (24b38 <z_impl_k_mutex_unlock+0xd4>)
   24a88:	6892      	ldr	r2, [r2, #8]
   24a8a:	4293      	cmp	r3, r2
   24a8c:	d14d      	bne.n	24b2a <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24a8e:	68c3      	ldr	r3, [r0, #12]
   24a90:	b933      	cbnz	r3, 24aa0 <z_impl_k_mutex_unlock+0x3c>
   24a92:	4927      	ldr	r1, [pc, #156]	; (24b30 <z_impl_k_mutex_unlock+0xcc>)
   24a94:	4827      	ldr	r0, [pc, #156]	; (24b34 <z_impl_k_mutex_unlock+0xd0>)
   24a96:	22e5      	movs	r2, #229	; 0xe5
   24a98:	f006 f858 	bl	2ab4c <assert_print>
   24a9c:	21e5      	movs	r1, #229	; 0xe5
   24a9e:	e7ec      	b.n	24a7a <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24aa0:	2b01      	cmp	r3, #1
   24aa2:	d003      	beq.n	24aac <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   24aa4:	3b01      	subs	r3, #1
   24aa6:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   24aa8:	2000      	movs	r0, #0
}
   24aaa:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   24aac:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ab0:	f3ef 8511 	mrs	r5, BASEPRI
   24ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   24ab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24abc:	481f      	ldr	r0, [pc, #124]	; (24b3c <z_impl_k_mutex_unlock+0xd8>)
   24abe:	f7ff fdab 	bl	24618 <z_spin_lock_valid>
   24ac2:	b938      	cbnz	r0, 24ad4 <z_impl_k_mutex_unlock+0x70>
   24ac4:	491e      	ldr	r1, [pc, #120]	; (24b40 <z_impl_k_mutex_unlock+0xdc>)
   24ac6:	481b      	ldr	r0, [pc, #108]	; (24b34 <z_impl_k_mutex_unlock+0xd0>)
   24ac8:	2294      	movs	r2, #148	; 0x94
   24aca:	f006 f83f 	bl	2ab4c <assert_print>
   24ace:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ad0:	481b      	ldr	r0, [pc, #108]	; (24b40 <z_impl_k_mutex_unlock+0xdc>)
   24ad2:	e7d3      	b.n	24a7c <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   24ad4:	4819      	ldr	r0, [pc, #100]	; (24b3c <z_impl_k_mutex_unlock+0xd8>)
   24ad6:	f7ff fdbd 	bl	24654 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   24ada:	6921      	ldr	r1, [r4, #16]
   24adc:	68a0      	ldr	r0, [r4, #8]
   24ade:	f00a f83c 	bl	2eb5a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   24ae2:	4620      	mov	r0, r4
   24ae4:	f001 fbf6 	bl	262d4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   24ae8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24aea:	b150      	cbz	r0, 24b02 <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   24aec:	f990 200e 	ldrsb.w	r2, [r0, #14]
   24af0:	6122      	str	r2, [r4, #16]
   24af2:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   24af4:	f000 ff30 	bl	25958 <z_ready_thread>
		z_reschedule(&lock, key);
   24af8:	4810      	ldr	r0, [pc, #64]	; (24b3c <z_impl_k_mutex_unlock+0xd8>)
   24afa:	4629      	mov	r1, r5
   24afc:	f000 ff94 	bl	25a28 <z_reschedule>
   24b00:	e7d2      	b.n	24aa8 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   24b02:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b04:	480d      	ldr	r0, [pc, #52]	; (24b3c <z_impl_k_mutex_unlock+0xd8>)
   24b06:	f7ff fd95 	bl	24634 <z_spin_unlock_valid>
   24b0a:	b930      	cbnz	r0, 24b1a <z_impl_k_mutex_unlock+0xb6>
   24b0c:	490c      	ldr	r1, [pc, #48]	; (24b40 <z_impl_k_mutex_unlock+0xdc>)
   24b0e:	4809      	ldr	r0, [pc, #36]	; (24b34 <z_impl_k_mutex_unlock+0xd0>)
   24b10:	22c2      	movs	r2, #194	; 0xc2
   24b12:	f006 f81b 	bl	2ab4c <assert_print>
   24b16:	21c2      	movs	r1, #194	; 0xc2
   24b18:	e7da      	b.n	24ad0 <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   24b1a:	f385 8811 	msr	BASEPRI, r5
   24b1e:	f3bf 8f6f 	isb	sy
   24b22:	e7c1      	b.n	24aa8 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   24b24:	f06f 0015 	mvn.w	r0, #21
   24b28:	e7bf      	b.n	24aaa <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   24b2a:	f04f 30ff 	mov.w	r0, #4294967295
   24b2e:	e7bc      	b.n	24aaa <z_impl_k_mutex_unlock+0x46>
   24b30:	0003405b 	.word	0x0003405b
   24b34:	0003013d 	.word	0x0003013d
   24b38:	200037fc 	.word	0x200037fc
   24b3c:	20003824 	.word	0x20003824
   24b40:	00030879 	.word	0x00030879

00024b44 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   24b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b48:	4604      	mov	r4, r0
   24b4a:	f89d a020 	ldrb.w	sl, [sp, #32]
   24b4e:	460d      	mov	r5, r1
   24b50:	4690      	mov	r8, r2
   24b52:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24b54:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24b58:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b5c:	f3ef 8711 	mrs	r7, BASEPRI
   24b60:	f383 8812 	msr	BASEPRI_MAX, r3
   24b64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b68:	4630      	mov	r0, r6
   24b6a:	f7ff fd55 	bl	24618 <z_spin_lock_valid>
   24b6e:	b940      	cbnz	r0, 24b82 <queue_insert+0x3e>
   24b70:	4936      	ldr	r1, [pc, #216]	; (24c4c <queue_insert+0x108>)
   24b72:	4837      	ldr	r0, [pc, #220]	; (24c50 <queue_insert+0x10c>)
   24b74:	2294      	movs	r2, #148	; 0x94
   24b76:	f005 ffe9 	bl	2ab4c <assert_print>
   24b7a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24b7c:	4833      	ldr	r0, [pc, #204]	; (24c4c <queue_insert+0x108>)
   24b7e:	f005 ffde 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24b82:	4630      	mov	r0, r6
   24b84:	f7ff fd66 	bl	24654 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   24b88:	f1ba 0f00 	cmp.w	sl, #0
   24b8c:	d000      	beq.n	24b90 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   24b8e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24b90:	f104 000c 	add.w	r0, r4, #12
   24b94:	f001 fb9e 	bl	262d4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   24b98:	b158      	cbz	r0, 24bb2 <queue_insert+0x6e>
   24b9a:	2300      	movs	r3, #0
   24b9c:	67c3      	str	r3, [r0, #124]	; 0x7c
   24b9e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   24ba2:	f000 fed9 	bl	25958 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   24ba6:	4630      	mov	r0, r6
   24ba8:	4639      	mov	r1, r7
   24baa:	f000 ff3d 	bl	25a28 <z_reschedule>
		return 0;
   24bae:	2000      	movs	r0, #0
   24bb0:	e017      	b.n	24be2 <queue_insert+0x9e>
	if (alloc) {
   24bb2:	f1b9 0f00 	cmp.w	r9, #0
   24bb6:	d026      	beq.n	24c06 <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   24bb8:	2108      	movs	r1, #8
   24bba:	f002 fca5 	bl	27508 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24bbe:	b990      	cbnz	r0, 24be6 <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bc0:	4630      	mov	r0, r6
   24bc2:	f7ff fd37 	bl	24634 <z_spin_unlock_valid>
   24bc6:	b930      	cbnz	r0, 24bd6 <queue_insert+0x92>
   24bc8:	4920      	ldr	r1, [pc, #128]	; (24c4c <queue_insert+0x108>)
   24bca:	4821      	ldr	r0, [pc, #132]	; (24c50 <queue_insert+0x10c>)
   24bcc:	22c2      	movs	r2, #194	; 0xc2
   24bce:	f005 ffbd 	bl	2ab4c <assert_print>
   24bd2:	21c2      	movs	r1, #194	; 0xc2
   24bd4:	e7d2      	b.n	24b7c <queue_insert+0x38>
	__asm__ volatile(
   24bd6:	f387 8811 	msr	BASEPRI, r7
   24bda:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24bde:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   24be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   24be6:	2201      	movs	r2, #1
		anode->data = data;
   24be8:	f8c0 8004 	str.w	r8, [r0, #4]
   24bec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24bee:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24bf0:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   24bf4:	b95d      	cbnz	r5, 24c0e <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24bf6:	6822      	ldr	r2, [r4, #0]
   24bf8:	430a      	orrs	r2, r1
   24bfa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24bfc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   24bfe:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24c00:	b96a      	cbnz	r2, 24c1e <queue_insert+0xda>
	list->tail = node;
   24c02:	6060      	str	r0, [r4, #4]
}
   24c04:	e00b      	b.n	24c1e <queue_insert+0xda>
	node->next_and_flags = flags;
   24c06:	f8c8 9000 	str.w	r9, [r8]
}
   24c0a:	4640      	mov	r0, r8
   24c0c:	e7ef      	b.n	24bee <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c0e:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24c10:	2a03      	cmp	r2, #3
   24c12:	d810      	bhi.n	24c36 <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24c14:	6001      	str	r1, [r0, #0]
	return list->tail;
   24c16:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24c18:	b939      	cbnz	r1, 24c2a <queue_insert+0xe6>
	list->head = node;
   24c1a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24c1e:	2104      	movs	r1, #4
   24c20:	f104 0014 	add.w	r0, r4, #20
   24c24:	f00a f95b 	bl	2eede <z_handle_obj_poll_events>
   24c28:	e7bd      	b.n	24ba6 <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24c2a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24c2c:	f002 0203 	and.w	r2, r2, #3
   24c30:	4302      	orrs	r2, r0
   24c32:	600a      	str	r2, [r1, #0]
   24c34:	e7e5      	b.n	24c02 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c36:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24c3a:	430a      	orrs	r2, r1
   24c3c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24c3e:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24c40:	f002 0203 	and.w	r2, r2, #3
   24c44:	ea40 0302 	orr.w	r3, r0, r2
   24c48:	602b      	str	r3, [r5, #0]
}
   24c4a:	e7e8      	b.n	24c1e <queue_insert+0xda>
   24c4c:	00030879 	.word	0x00030879
   24c50:	0003013d 	.word	0x0003013d

00024c54 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   24c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c58:	4605      	mov	r5, r0
   24c5a:	4691      	mov	r9, r2
   24c5c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24c5e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24c62:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c66:	f3ef 8811 	mrs	r8, BASEPRI
   24c6a:	f383 8812 	msr	BASEPRI_MAX, r3
   24c6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c72:	4630      	mov	r0, r6
   24c74:	f7ff fcd0 	bl	24618 <z_spin_lock_valid>
   24c78:	b940      	cbnz	r0, 24c8c <z_impl_k_queue_get+0x38>
   24c7a:	491f      	ldr	r1, [pc, #124]	; (24cf8 <z_impl_k_queue_get+0xa4>)
   24c7c:	481f      	ldr	r0, [pc, #124]	; (24cfc <z_impl_k_queue_get+0xa8>)
   24c7e:	2294      	movs	r2, #148	; 0x94
   24c80:	f005 ff64 	bl	2ab4c <assert_print>
   24c84:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c86:	481c      	ldr	r0, [pc, #112]	; (24cf8 <z_impl_k_queue_get+0xa4>)
   24c88:	f005 ff59 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24c8c:	4630      	mov	r0, r6
   24c8e:	f7ff fce1 	bl	24654 <z_spin_lock_set_owner>
	return list->head;
   24c92:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   24c94:	b1bc      	cbz	r4, 24cc6 <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c96:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c98:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c9a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c9e:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   24ca0:	4620      	mov	r0, r4
	list->head = node;
   24ca2:	602b      	str	r3, [r5, #0]
	list->tail = node;
   24ca4:	bf08      	it	eq
   24ca6:	606b      	streq	r3, [r5, #4]
   24ca8:	2101      	movs	r1, #1
   24caa:	f009 ff65 	bl	2eb78 <z_queue_node_peek>
   24cae:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cb0:	4630      	mov	r0, r6
   24cb2:	f7ff fcbf 	bl	24634 <z_spin_unlock_valid>
   24cb6:	b9b0      	cbnz	r0, 24ce6 <z_impl_k_queue_get+0x92>
   24cb8:	490f      	ldr	r1, [pc, #60]	; (24cf8 <z_impl_k_queue_get+0xa4>)
   24cba:	4810      	ldr	r0, [pc, #64]	; (24cfc <z_impl_k_queue_get+0xa8>)
   24cbc:	22c2      	movs	r2, #194	; 0xc2
   24cbe:	f005 ff45 	bl	2ab4c <assert_print>
   24cc2:	21c2      	movs	r1, #194	; 0xc2
   24cc4:	e7df      	b.n	24c86 <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24cc6:	ea59 0307 	orrs.w	r3, r9, r7
   24cca:	d0f1      	beq.n	24cb0 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24ccc:	e9cd 9700 	strd	r9, r7, [sp]
   24cd0:	f105 020c 	add.w	r2, r5, #12
   24cd4:	4641      	mov	r1, r8
   24cd6:	4630      	mov	r0, r6
   24cd8:	f001 f8fa 	bl	25ed0 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   24cdc:	b938      	cbnz	r0, 24cee <z_impl_k_queue_get+0x9a>
   24cde:	4b08      	ldr	r3, [pc, #32]	; (24d00 <z_impl_k_queue_get+0xac>)
   24ce0:	689b      	ldr	r3, [r3, #8]
   24ce2:	695c      	ldr	r4, [r3, #20]
   24ce4:	e003      	b.n	24cee <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   24ce6:	f388 8811 	msr	BASEPRI, r8
   24cea:	f3bf 8f6f 	isb	sy
}
   24cee:	4620      	mov	r0, r4
   24cf0:	b003      	add	sp, #12
   24cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24cf6:	bf00      	nop
   24cf8:	00030879 	.word	0x00030879
   24cfc:	0003013d 	.word	0x0003013d
   24d00:	200037fc 	.word	0x200037fc

00024d04 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24d04:	b538      	push	{r3, r4, r5, lr}
   24d06:	4604      	mov	r4, r0
	__asm__ volatile(
   24d08:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d0c:	f3ef 8511 	mrs	r5, BASEPRI
   24d10:	f383 8812 	msr	BASEPRI_MAX, r3
   24d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d18:	4814      	ldr	r0, [pc, #80]	; (24d6c <z_impl_k_sem_give+0x68>)
   24d1a:	f7ff fc7d 	bl	24618 <z_spin_lock_valid>
   24d1e:	b940      	cbnz	r0, 24d32 <z_impl_k_sem_give+0x2e>
   24d20:	4913      	ldr	r1, [pc, #76]	; (24d70 <z_impl_k_sem_give+0x6c>)
   24d22:	4814      	ldr	r0, [pc, #80]	; (24d74 <z_impl_k_sem_give+0x70>)
   24d24:	2294      	movs	r2, #148	; 0x94
   24d26:	f005 ff11 	bl	2ab4c <assert_print>
   24d2a:	4811      	ldr	r0, [pc, #68]	; (24d70 <z_impl_k_sem_give+0x6c>)
   24d2c:	2194      	movs	r1, #148	; 0x94
   24d2e:	f005 ff06 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24d32:	480e      	ldr	r0, [pc, #56]	; (24d6c <z_impl_k_sem_give+0x68>)
   24d34:	f7ff fc8e 	bl	24654 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24d38:	4620      	mov	r0, r4
   24d3a:	f001 facb 	bl	262d4 <z_unpend_first_thread>

	if (thread != NULL) {
   24d3e:	b148      	cbz	r0, 24d54 <z_impl_k_sem_give+0x50>
   24d40:	2200      	movs	r2, #0
   24d42:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24d44:	f000 fe08 	bl	25958 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24d48:	4629      	mov	r1, r5
   24d4a:	4808      	ldr	r0, [pc, #32]	; (24d6c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   24d50:	f000 be6a 	b.w	25a28 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24d54:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24d58:	429a      	cmp	r2, r3
   24d5a:	bf18      	it	ne
   24d5c:	3301      	addne	r3, #1
   24d5e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24d60:	2102      	movs	r1, #2
   24d62:	f104 0010 	add.w	r0, r4, #16
   24d66:	f00a f8ba 	bl	2eede <z_handle_obj_poll_events>
}
   24d6a:	e7ed      	b.n	24d48 <z_impl_k_sem_give+0x44>
   24d6c:	20003828 	.word	0x20003828
   24d70:	00030879 	.word	0x00030879
   24d74:	0003013d 	.word	0x0003013d

00024d78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24d7a:	4604      	mov	r4, r0
   24d7c:	4616      	mov	r6, r2
   24d7e:	461d      	mov	r5, r3
   24d80:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24d84:	b15b      	cbz	r3, 24d9e <z_impl_k_sem_take+0x26>
   24d86:	ea52 0305 	orrs.w	r3, r2, r5
   24d8a:	d008      	beq.n	24d9e <z_impl_k_sem_take+0x26>
   24d8c:	4926      	ldr	r1, [pc, #152]	; (24e28 <z_impl_k_sem_take+0xb0>)
   24d8e:	4827      	ldr	r0, [pc, #156]	; (24e2c <z_impl_k_sem_take+0xb4>)
   24d90:	2279      	movs	r2, #121	; 0x79
   24d92:	f005 fedb 	bl	2ab4c <assert_print>
   24d96:	4824      	ldr	r0, [pc, #144]	; (24e28 <z_impl_k_sem_take+0xb0>)
   24d98:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d9a:	f005 fed0 	bl	2ab3e <assert_post_action>
   24d9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24da2:	f3ef 8711 	mrs	r7, BASEPRI
   24da6:	f383 8812 	msr	BASEPRI_MAX, r3
   24daa:	f3bf 8f6f 	isb	sy
   24dae:	4820      	ldr	r0, [pc, #128]	; (24e30 <z_impl_k_sem_take+0xb8>)
   24db0:	f7ff fc32 	bl	24618 <z_spin_lock_valid>
   24db4:	b938      	cbnz	r0, 24dc6 <z_impl_k_sem_take+0x4e>
   24db6:	491f      	ldr	r1, [pc, #124]	; (24e34 <z_impl_k_sem_take+0xbc>)
   24db8:	481c      	ldr	r0, [pc, #112]	; (24e2c <z_impl_k_sem_take+0xb4>)
   24dba:	2294      	movs	r2, #148	; 0x94
   24dbc:	f005 fec6 	bl	2ab4c <assert_print>
   24dc0:	2194      	movs	r1, #148	; 0x94
   24dc2:	481c      	ldr	r0, [pc, #112]	; (24e34 <z_impl_k_sem_take+0xbc>)
   24dc4:	e7e9      	b.n	24d9a <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   24dc6:	481a      	ldr	r0, [pc, #104]	; (24e30 <z_impl_k_sem_take+0xb8>)
   24dc8:	f7ff fc44 	bl	24654 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24dcc:	68a3      	ldr	r3, [r4, #8]
   24dce:	b19b      	cbz	r3, 24df8 <z_impl_k_sem_take+0x80>
		sem->count--;
   24dd0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dd2:	4817      	ldr	r0, [pc, #92]	; (24e30 <z_impl_k_sem_take+0xb8>)
   24dd4:	60a3      	str	r3, [r4, #8]
   24dd6:	f7ff fc2d 	bl	24634 <z_spin_unlock_valid>
   24dda:	b930      	cbnz	r0, 24dea <z_impl_k_sem_take+0x72>
   24ddc:	4915      	ldr	r1, [pc, #84]	; (24e34 <z_impl_k_sem_take+0xbc>)
   24dde:	4813      	ldr	r0, [pc, #76]	; (24e2c <z_impl_k_sem_take+0xb4>)
   24de0:	22c2      	movs	r2, #194	; 0xc2
   24de2:	f005 feb3 	bl	2ab4c <assert_print>
   24de6:	21c2      	movs	r1, #194	; 0xc2
   24de8:	e7eb      	b.n	24dc2 <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   24dea:	f387 8811 	msr	BASEPRI, r7
   24dee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   24df2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   24df4:	b003      	add	sp, #12
   24df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24df8:	ea56 0305 	orrs.w	r3, r6, r5
   24dfc:	d10b      	bne.n	24e16 <z_impl_k_sem_take+0x9e>
   24dfe:	480c      	ldr	r0, [pc, #48]	; (24e30 <z_impl_k_sem_take+0xb8>)
   24e00:	f7ff fc18 	bl	24634 <z_spin_unlock_valid>
   24e04:	2800      	cmp	r0, #0
   24e06:	d0e9      	beq.n	24ddc <z_impl_k_sem_take+0x64>
   24e08:	f387 8811 	msr	BASEPRI, r7
   24e0c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24e10:	f06f 000f 	mvn.w	r0, #15
   24e14:	e7ee      	b.n	24df4 <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24e16:	e9cd 6500 	strd	r6, r5, [sp]
   24e1a:	4622      	mov	r2, r4
   24e1c:	4639      	mov	r1, r7
   24e1e:	4804      	ldr	r0, [pc, #16]	; (24e30 <z_impl_k_sem_take+0xb8>)
   24e20:	f001 f856 	bl	25ed0 <z_pend_curr>
	return ret;
   24e24:	e7e6      	b.n	24df4 <z_impl_k_sem_take+0x7c>
   24e26:	bf00      	nop
   24e28:	0003407d 	.word	0x0003407d
   24e2c:	0003013d 	.word	0x0003013d
   24e30:	20003828 	.word	0x20003828
   24e34:	00030879 	.word	0x00030879

00024e38 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   24e38:	b570      	push	{r4, r5, r6, lr}
   24e3a:	4604      	mov	r4, r0
	__asm__ volatile(
   24e3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e40:	f3ef 8511 	mrs	r5, BASEPRI
   24e44:	f383 8812 	msr	BASEPRI_MAX, r3
   24e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24e4c:	4812      	ldr	r0, [pc, #72]	; (24e98 <z_impl_k_sem_reset+0x60>)
   24e4e:	f7ff fbe3 	bl	24618 <z_spin_lock_valid>
   24e52:	b940      	cbnz	r0, 24e66 <z_impl_k_sem_reset+0x2e>
   24e54:	4911      	ldr	r1, [pc, #68]	; (24e9c <z_impl_k_sem_reset+0x64>)
   24e56:	4812      	ldr	r0, [pc, #72]	; (24ea0 <z_impl_k_sem_reset+0x68>)
   24e58:	2294      	movs	r2, #148	; 0x94
   24e5a:	f005 fe77 	bl	2ab4c <assert_print>
   24e5e:	480f      	ldr	r0, [pc, #60]	; (24e9c <z_impl_k_sem_reset+0x64>)
   24e60:	2194      	movs	r1, #148	; 0x94
   24e62:	f005 fe6c 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24e66:	480c      	ldr	r0, [pc, #48]	; (24e98 <z_impl_k_sem_reset+0x60>)
   24e68:	f7ff fbf4 	bl	24654 <z_spin_lock_set_owner>
   24e6c:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   24e70:	4620      	mov	r0, r4
   24e72:	f001 fa2f 	bl	262d4 <z_unpend_first_thread>
		if (thread == NULL) {
   24e76:	b118      	cbz	r0, 24e80 <z_impl_k_sem_reset+0x48>
   24e78:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   24e7a:	f000 fd6d 	bl	25958 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   24e7e:	e7f7      	b.n	24e70 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   24e80:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24e82:	2102      	movs	r1, #2
   24e84:	f104 0010 	add.w	r0, r4, #16
   24e88:	f00a f829 	bl	2eede <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   24e8c:	4629      	mov	r1, r5
   24e8e:	4802      	ldr	r0, [pc, #8]	; (24e98 <z_impl_k_sem_reset+0x60>)
}
   24e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   24e94:	f000 bdc8 	b.w	25a28 <z_reschedule>
   24e98:	20003828 	.word	0x20003828
   24e9c:	00030879 	.word	0x00030879
   24ea0:	0003013d 	.word	0x0003013d

00024ea4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24ea6:	4b09      	ldr	r3, [pc, #36]	; (24ecc <k_sys_work_q_init+0x28>)
   24ea8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24eaa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   24eac:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   24eae:	9300      	str	r3, [sp, #0]
   24eb0:	4907      	ldr	r1, [pc, #28]	; (24ed0 <k_sys_work_q_init+0x2c>)
   24eb2:	4808      	ldr	r0, [pc, #32]	; (24ed4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24eb4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24eb8:	f04f 33ff 	mov.w	r3, #4294967295
   24ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24ec0:	f000 fa66 	bl	25390 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24ec4:	4620      	mov	r0, r4
   24ec6:	b004      	add	sp, #16
   24ec8:	bd10      	pop	{r4, pc}
   24eca:	bf00      	nop
   24ecc:	0003409d 	.word	0x0003409d
   24ed0:	2000b140 	.word	0x2000b140
   24ed4:	20002ac0 	.word	0x20002ac0

00024ed8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24edc:	4e68      	ldr	r6, [pc, #416]	; (25080 <work_queue_main+0x1a8>)
	return list->head;
   24ede:	4f69      	ldr	r7, [pc, #420]	; (25084 <work_queue_main+0x1ac>)
   24ee0:	b085      	sub	sp, #20
   24ee2:	4604      	mov	r4, r0
   24ee4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ee8:	f3ef 8811 	mrs	r8, BASEPRI
   24eec:	f383 8812 	msr	BASEPRI_MAX, r3
   24ef0:	f3bf 8f6f 	isb	sy
   24ef4:	4630      	mov	r0, r6
   24ef6:	f7ff fb8f 	bl	24618 <z_spin_lock_valid>
   24efa:	b940      	cbnz	r0, 24f0e <work_queue_main+0x36>
   24efc:	4962      	ldr	r1, [pc, #392]	; (25088 <work_queue_main+0x1b0>)
   24efe:	4863      	ldr	r0, [pc, #396]	; (2508c <work_queue_main+0x1b4>)
   24f00:	2294      	movs	r2, #148	; 0x94
   24f02:	f005 fe23 	bl	2ab4c <assert_print>
   24f06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f08:	485f      	ldr	r0, [pc, #380]	; (25088 <work_queue_main+0x1b0>)
   24f0a:	f005 fe18 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   24f0e:	4630      	mov	r0, r6
   24f10:	f7ff fba0 	bl	24654 <z_spin_lock_set_owner>
   24f14:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   24f18:	b9a5      	cbnz	r5, 24f44 <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   24f1a:	2102      	movs	r1, #2
   24f1c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   24f20:	f009 fe68 	bl	2ebf4 <flag_test_and_clear>
   24f24:	bb80      	cbnz	r0, 24f88 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24f26:	2300      	movs	r3, #0
   24f28:	9302      	str	r3, [sp, #8]
   24f2a:	f04f 32ff 	mov.w	r2, #4294967295
   24f2e:	f04f 33ff 	mov.w	r3, #4294967295
   24f32:	e9cd 2300 	strd	r2, r3, [sp]
   24f36:	4641      	mov	r1, r8
   24f38:	f104 0288 	add.w	r2, r4, #136	; 0x88
   24f3c:	4630      	mov	r0, r6
   24f3e:	f001 fc31 	bl	267a4 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   24f42:	e7cf      	b.n	24ee4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f44:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   24f48:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   24f4a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f4e:	4295      	cmp	r5, r2
	list->tail = node;
   24f50:	bf08      	it	eq
   24f52:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   24f56:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24f5a:	f043 0302 	orr.w	r3, r3, #2
   24f5e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   24f62:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   24f64:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   24f68:	f023 0304 	bic.w	r3, r3, #4
   24f6c:	f043 0301 	orr.w	r3, r3, #1
   24f70:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f72:	4630      	mov	r0, r6
   24f74:	f7ff fb5e 	bl	24634 <z_spin_unlock_valid>
   24f78:	b980      	cbnz	r0, 24f9c <work_queue_main+0xc4>
   24f7a:	4943      	ldr	r1, [pc, #268]	; (25088 <work_queue_main+0x1b0>)
   24f7c:	4843      	ldr	r0, [pc, #268]	; (2508c <work_queue_main+0x1b4>)
   24f7e:	22c2      	movs	r2, #194	; 0xc2
   24f80:	f005 fde4 	bl	2ab4c <assert_print>
   24f84:	21c2      	movs	r1, #194	; 0xc2
   24f86:	e7bf      	b.n	24f08 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24f88:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24f8c:	2200      	movs	r2, #0
   24f8e:	2101      	movs	r1, #1
   24f90:	4628      	mov	r0, r5
   24f92:	f001 fbbb 	bl	2670c <z_sched_wake>
   24f96:	2800      	cmp	r0, #0
   24f98:	d1f8      	bne.n	24f8c <work_queue_main+0xb4>
   24f9a:	e7c4      	b.n	24f26 <work_queue_main+0x4e>
	__asm__ volatile(
   24f9c:	f388 8811 	msr	BASEPRI, r8
   24fa0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   24fa4:	f1b9 0f00 	cmp.w	r9, #0
   24fa8:	d109      	bne.n	24fbe <work_queue_main+0xe6>
   24faa:	4939      	ldr	r1, [pc, #228]	; (25090 <work_queue_main+0x1b8>)
   24fac:	4837      	ldr	r0, [pc, #220]	; (2508c <work_queue_main+0x1b4>)
   24fae:	f240 229b 	movw	r2, #667	; 0x29b
   24fb2:	f005 fdcb 	bl	2ab4c <assert_print>
   24fb6:	4836      	ldr	r0, [pc, #216]	; (25090 <work_queue_main+0x1b8>)
   24fb8:	f240 219b 	movw	r1, #667	; 0x29b
   24fbc:	e7a5      	b.n	24f0a <work_queue_main+0x32>
		handler(work);
   24fbe:	4628      	mov	r0, r5
   24fc0:	47c8      	blx	r9
	__asm__ volatile(
   24fc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fc6:	f3ef 8a11 	mrs	sl, BASEPRI
   24fca:	f383 8812 	msr	BASEPRI_MAX, r3
   24fce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fd2:	4630      	mov	r0, r6
   24fd4:	f7ff fb20 	bl	24618 <z_spin_lock_valid>
   24fd8:	2800      	cmp	r0, #0
   24fda:	d08f      	beq.n	24efc <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   24fdc:	4630      	mov	r0, r6
   24fde:	f7ff fb39 	bl	24654 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   24fe2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24fe4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24fe6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24fea:	d417      	bmi.n	2501c <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   24fec:	60ea      	str	r2, [r5, #12]
   24fee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24ff2:	f023 0302 	bic.w	r3, r3, #2
   24ff6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ffa:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   24ffc:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25000:	f7ff fb18 	bl	24634 <z_spin_unlock_valid>
   25004:	2800      	cmp	r0, #0
   25006:	d0b8      	beq.n	24f7a <work_queue_main+0xa2>
	__asm__ volatile(
   25008:	f38a 8811 	msr	BASEPRI, sl
   2500c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   25010:	2d00      	cmp	r5, #0
   25012:	f47f af67 	bne.w	24ee4 <work_queue_main+0xc>
	z_impl_k_yield();
   25016:	f001 f9a7 	bl	26368 <z_impl_k_yield>
}
   2501a:	e763      	b.n	24ee4 <work_queue_main+0xc>
	return list->head;
   2501c:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2501e:	f023 0303 	bic.w	r3, r3, #3
   25022:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25024:	2800      	cmp	r0, #0
   25026:	d0e2      	beq.n	24fee <work_queue_main+0x116>
	return node->next;
   25028:	f04f 0800 	mov.w	r8, #0
   2502c:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   25030:	46c3      	mov	fp, r8
   25032:	2800      	cmp	r0, #0
   25034:	d0db      	beq.n	24fee <work_queue_main+0x116>
		if (wc->work == work) {
   25036:	6843      	ldr	r3, [r0, #4]
   25038:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   2503a:	4602      	mov	r2, r0
		if (wc->work == work) {
   2503c:	d10d      	bne.n	2505a <work_queue_main+0x182>
	return node->next;
   2503e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25040:	f1b8 0f00 	cmp.w	r8, #0
   25044:	d112      	bne.n	2506c <work_queue_main+0x194>
   25046:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   25048:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2504a:	4283      	cmp	r3, r0
   2504c:	d100      	bne.n	25050 <work_queue_main+0x178>
	list->tail = node;
   2504e:	607a      	str	r2, [r7, #4]
	parent->next = child;
   25050:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   25054:	f7ff fe56 	bl	24d04 <z_impl_k_sem_give>
}
   25058:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2505a:	f1b9 0f00 	cmp.w	r9, #0
   2505e:	d00d      	beq.n	2507c <work_queue_main+0x1a4>
	return node->next;
   25060:	f8d9 3000 	ldr.w	r3, [r9]
   25064:	4648      	mov	r0, r9
   25066:	4690      	mov	r8, r2
   25068:	4699      	mov	r9, r3
   2506a:	e7e2      	b.n	25032 <work_queue_main+0x15a>
	parent->next = child;
   2506c:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25070:	687b      	ldr	r3, [r7, #4]
   25072:	4283      	cmp	r3, r0
	list->tail = node;
   25074:	bf08      	it	eq
   25076:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   2507a:	e7e9      	b.n	25050 <work_queue_main+0x178>
   2507c:	464b      	mov	r3, r9
   2507e:	e7f1      	b.n	25064 <work_queue_main+0x18c>
   25080:	20003834 	.word	0x20003834
   25084:	2000382c 	.word	0x2000382c
   25088:	00030879 	.word	0x00030879
   2508c:	0003013d 	.word	0x0003013d
   25090:	000340a6 	.word	0x000340a6

00025094 <cancel_sync_locked>:
{
   25094:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25096:	68c3      	ldr	r3, [r0, #12]
   25098:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2509c:	079b      	lsls	r3, r3, #30
{
   2509e:	4605      	mov	r5, r0
   250a0:	460c      	mov	r4, r1
	if (ret) {
   250a2:	d50d      	bpl.n	250c0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   250a4:	2201      	movs	r2, #1
   250a6:	2100      	movs	r1, #0
   250a8:	f104 0008 	add.w	r0, r4, #8
   250ac:	f009 fd92 	bl	2ebd4 <z_impl_k_sem_init>
	parent->next = child;
   250b0:	2300      	movs	r3, #0
   250b2:	6023      	str	r3, [r4, #0]
	return list->tail;
   250b4:	4b05      	ldr	r3, [pc, #20]	; (250cc <cancel_sync_locked+0x38>)
	canceler->work = work;
   250b6:	6065      	str	r5, [r4, #4]
   250b8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   250ba:	b91a      	cbnz	r2, 250c4 <cancel_sync_locked+0x30>
	list->head = node;
   250bc:	e9c3 4400 	strd	r4, r4, [r3]
}
   250c0:	4630      	mov	r0, r6
   250c2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   250c4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   250c6:	605c      	str	r4, [r3, #4]
}
   250c8:	e7fa      	b.n	250c0 <cancel_sync_locked+0x2c>
   250ca:	bf00      	nop
   250cc:	2000382c 	.word	0x2000382c

000250d0 <submit_to_queue_locked>:
{
   250d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   250d2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   250d4:	079a      	lsls	r2, r3, #30
{
   250d6:	4604      	mov	r4, r0
   250d8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   250da:	f3c3 0640 	ubfx	r6, r3, #1, #1
   250de:	d438      	bmi.n	25152 <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   250e0:	075b      	lsls	r3, r3, #29
   250e2:	d424      	bmi.n	2512e <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   250e4:	680b      	ldr	r3, [r1, #0]
   250e6:	b90b      	cbnz	r3, 250ec <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   250e8:	6883      	ldr	r3, [r0, #8]
   250ea:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   250ec:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   250ee:	07dd      	lsls	r5, r3, #31
   250f0:	d520      	bpl.n	25134 <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   250f2:	68a3      	ldr	r3, [r4, #8]
   250f4:	b953      	cbnz	r3, 2510c <submit_to_queue_locked+0x3c>
   250f6:	4928      	ldr	r1, [pc, #160]	; (25198 <submit_to_queue_locked+0xc8>)
   250f8:	4828      	ldr	r0, [pc, #160]	; (2519c <submit_to_queue_locked+0xcc>)
   250fa:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   250fe:	f005 fd25 	bl	2ab4c <assert_print>
   25102:	4825      	ldr	r0, [pc, #148]	; (25198 <submit_to_queue_locked+0xc8>)
   25104:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   25108:	f005 fd19 	bl	2ab3e <assert_post_action>
			*queuep = work->queue;
   2510c:	603b      	str	r3, [r7, #0]
			ret = 2;
   2510e:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   25110:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   25112:	2d00      	cmp	r5, #0
   25114:	d03c      	beq.n	25190 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25116:	4b22      	ldr	r3, [pc, #136]	; (251a0 <submit_to_queue_locked+0xd0>)
   25118:	689b      	ldr	r3, [r3, #8]
   2511a:	42ab      	cmp	r3, r5
   2511c:	d00c      	beq.n	25138 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   2511e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25122:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25124:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25128:	d416      	bmi.n	25158 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   2512a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   2512e:	2300      	movs	r3, #0
   25130:	603b      	str	r3, [r7, #0]
	return ret;
   25132:	e027      	b.n	25184 <submit_to_queue_locked+0xb4>
		ret = 1;
   25134:	2601      	movs	r6, #1
   25136:	e7eb      	b.n	25110 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   25138:	f009 fcfb 	bl	2eb32 <k_is_in_isr>
   2513c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   25140:	2800      	cmp	r0, #0
   25142:	d1ee      	bne.n	25122 <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25144:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25146:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2514a:	d5ee      	bpl.n	2512a <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   2514c:	b152      	cbz	r2, 25164 <submit_to_queue_locked+0x94>
   2514e:	075b      	lsls	r3, r3, #29
   25150:	d408      	bmi.n	25164 <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   25152:	f06f 060f 	mvn.w	r6, #15
   25156:	e7ea      	b.n	2512e <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   25158:	2a00      	cmp	r2, #0
   2515a:	d1fa      	bne.n	25152 <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   2515c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   25160:	2b00      	cmp	r3, #0
   25162:	d1f6      	bne.n	25152 <submit_to_queue_locked+0x82>
	parent->next = child;
   25164:	2300      	movs	r3, #0
   25166:	6023      	str	r3, [r4, #0]
	return list->tail;
   25168:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2516c:	b963      	cbnz	r3, 25188 <submit_to_queue_locked+0xb8>
	list->head = node;
   2516e:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   25172:	4628      	mov	r0, r5
   25174:	f009 fd57 	bl	2ec26 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   25178:	68e3      	ldr	r3, [r4, #12]
   2517a:	f043 0304 	orr.w	r3, r3, #4
   2517e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   25180:	683b      	ldr	r3, [r7, #0]
   25182:	60a3      	str	r3, [r4, #8]
}
   25184:	4630      	mov	r0, r6
   25186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   25188:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2518a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   2518e:	e7f0      	b.n	25172 <submit_to_queue_locked+0xa2>
		return -EINVAL;
   25190:	f06f 0615 	mvn.w	r6, #21
   25194:	e7cb      	b.n	2512e <submit_to_queue_locked+0x5e>
   25196:	bf00      	nop
   25198:	000340a6 	.word	0x000340a6
   2519c:	0003013d 	.word	0x0003013d
   251a0:	200037fc 	.word	0x200037fc

000251a4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   251a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   251a6:	4604      	mov	r4, r0
	__asm__ volatile(
   251a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   251ac:	f3ef 8511 	mrs	r5, BASEPRI
   251b0:	f383 8812 	msr	BASEPRI_MAX, r3
   251b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251b8:	4817      	ldr	r0, [pc, #92]	; (25218 <work_timeout+0x74>)
   251ba:	f7ff fa2d 	bl	24618 <z_spin_lock_valid>
   251be:	b940      	cbnz	r0, 251d2 <work_timeout+0x2e>
   251c0:	4916      	ldr	r1, [pc, #88]	; (2521c <work_timeout+0x78>)
   251c2:	4817      	ldr	r0, [pc, #92]	; (25220 <work_timeout+0x7c>)
   251c4:	2294      	movs	r2, #148	; 0x94
   251c6:	f005 fcc1 	bl	2ab4c <assert_print>
   251ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251cc:	4813      	ldr	r0, [pc, #76]	; (2521c <work_timeout+0x78>)
   251ce:	f005 fcb6 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   251d2:	4811      	ldr	r0, [pc, #68]	; (25218 <work_timeout+0x74>)
   251d4:	f7ff fa3e 	bl	24654 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   251d8:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   251da:	2103      	movs	r1, #3
   251dc:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   251de:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   251e0:	f1a4 0610 	sub.w	r6, r4, #16
   251e4:	f009 fd06 	bl	2ebf4 <flag_test_and_clear>
   251e8:	b128      	cbz	r0, 251f6 <work_timeout+0x52>
		queue = dw->queue;
   251ea:	69a3      	ldr	r3, [r4, #24]
   251ec:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   251ee:	a901      	add	r1, sp, #4
   251f0:	4630      	mov	r0, r6
   251f2:	f7ff ff6d 	bl	250d0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251f6:	4808      	ldr	r0, [pc, #32]	; (25218 <work_timeout+0x74>)
   251f8:	f7ff fa1c 	bl	24634 <z_spin_unlock_valid>
   251fc:	b930      	cbnz	r0, 2520c <work_timeout+0x68>
   251fe:	4907      	ldr	r1, [pc, #28]	; (2521c <work_timeout+0x78>)
   25200:	4807      	ldr	r0, [pc, #28]	; (25220 <work_timeout+0x7c>)
   25202:	22c2      	movs	r2, #194	; 0xc2
   25204:	f005 fca2 	bl	2ab4c <assert_print>
   25208:	21c2      	movs	r1, #194	; 0xc2
   2520a:	e7df      	b.n	251cc <work_timeout+0x28>
	__asm__ volatile(
   2520c:	f385 8811 	msr	BASEPRI, r5
   25210:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   25214:	b002      	add	sp, #8
   25216:	bd70      	pop	{r4, r5, r6, pc}
   25218:	20003834 	.word	0x20003834
   2521c:	00030879 	.word	0x00030879
   25220:	0003013d 	.word	0x0003013d

00025224 <k_work_init>:
{
   25224:	b538      	push	{r3, r4, r5, lr}
   25226:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   25228:	4604      	mov	r4, r0
   2522a:	b940      	cbnz	r0, 2523e <k_work_init+0x1a>
   2522c:	490b      	ldr	r1, [pc, #44]	; (2525c <k_work_init+0x38>)
   2522e:	480c      	ldr	r0, [pc, #48]	; (25260 <k_work_init+0x3c>)
   25230:	2289      	movs	r2, #137	; 0x89
   25232:	f005 fc8b 	bl	2ab4c <assert_print>
   25236:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   25238:	4808      	ldr	r0, [pc, #32]	; (2525c <k_work_init+0x38>)
   2523a:	f005 fc80 	bl	2ab3e <assert_post_action>
   2523e:	b931      	cbnz	r1, 2524e <k_work_init+0x2a>
   25240:	4906      	ldr	r1, [pc, #24]	; (2525c <k_work_init+0x38>)
   25242:	4807      	ldr	r0, [pc, #28]	; (25260 <k_work_init+0x3c>)
   25244:	228a      	movs	r2, #138	; 0x8a
   25246:	f005 fc81 	bl	2ab4c <assert_print>
   2524a:	218a      	movs	r1, #138	; 0x8a
   2524c:	e7f4      	b.n	25238 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2524e:	2210      	movs	r2, #16
   25250:	2100      	movs	r1, #0
   25252:	f006 fc5c 	bl	2bb0e <memset>
   25256:	6065      	str	r5, [r4, #4]
}
   25258:	bd38      	pop	{r3, r4, r5, pc}
   2525a:	bf00      	nop
   2525c:	000340a6 	.word	0x000340a6
   25260:	0003013d 	.word	0x0003013d

00025264 <k_work_busy_get>:
{
   25264:	b538      	push	{r3, r4, r5, lr}
   25266:	4604      	mov	r4, r0
	__asm__ volatile(
   25268:	f04f 0340 	mov.w	r3, #64	; 0x40
   2526c:	f3ef 8511 	mrs	r5, BASEPRI
   25270:	f383 8812 	msr	BASEPRI_MAX, r3
   25274:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25278:	4811      	ldr	r0, [pc, #68]	; (252c0 <k_work_busy_get+0x5c>)
   2527a:	f7ff f9cd 	bl	24618 <z_spin_lock_valid>
   2527e:	b940      	cbnz	r0, 25292 <k_work_busy_get+0x2e>
   25280:	4910      	ldr	r1, [pc, #64]	; (252c4 <k_work_busy_get+0x60>)
   25282:	4811      	ldr	r0, [pc, #68]	; (252c8 <k_work_busy_get+0x64>)
   25284:	2294      	movs	r2, #148	; 0x94
   25286:	f005 fc61 	bl	2ab4c <assert_print>
   2528a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2528c:	480d      	ldr	r0, [pc, #52]	; (252c4 <k_work_busy_get+0x60>)
   2528e:	f005 fc56 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   25292:	480b      	ldr	r0, [pc, #44]	; (252c0 <k_work_busy_get+0x5c>)
   25294:	f7ff f9de 	bl	24654 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   25298:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2529a:	4809      	ldr	r0, [pc, #36]	; (252c0 <k_work_busy_get+0x5c>)
   2529c:	f004 040f 	and.w	r4, r4, #15
   252a0:	f7ff f9c8 	bl	24634 <z_spin_unlock_valid>
   252a4:	b930      	cbnz	r0, 252b4 <k_work_busy_get+0x50>
   252a6:	4907      	ldr	r1, [pc, #28]	; (252c4 <k_work_busy_get+0x60>)
   252a8:	4807      	ldr	r0, [pc, #28]	; (252c8 <k_work_busy_get+0x64>)
   252aa:	22c2      	movs	r2, #194	; 0xc2
   252ac:	f005 fc4e 	bl	2ab4c <assert_print>
   252b0:	21c2      	movs	r1, #194	; 0xc2
   252b2:	e7eb      	b.n	2528c <k_work_busy_get+0x28>
	__asm__ volatile(
   252b4:	f385 8811 	msr	BASEPRI, r5
   252b8:	f3bf 8f6f 	isb	sy
}
   252bc:	4620      	mov	r0, r4
   252be:	bd38      	pop	{r3, r4, r5, pc}
   252c0:	20003834 	.word	0x20003834
   252c4:	00030879 	.word	0x00030879
   252c8:	0003013d 	.word	0x0003013d

000252cc <z_work_submit_to_queue>:
{
   252cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   252ce:	460c      	mov	r4, r1
{
   252d0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   252d2:	b951      	cbnz	r1, 252ea <z_work_submit_to_queue+0x1e>
   252d4:	491c      	ldr	r1, [pc, #112]	; (25348 <z_work_submit_to_queue+0x7c>)
   252d6:	481d      	ldr	r0, [pc, #116]	; (2534c <z_work_submit_to_queue+0x80>)
   252d8:	f44f 72ba 	mov.w	r2, #372	; 0x174
   252dc:	f005 fc36 	bl	2ab4c <assert_print>
   252e0:	4819      	ldr	r0, [pc, #100]	; (25348 <z_work_submit_to_queue+0x7c>)
   252e2:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252e6:	f005 fc2a 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   252ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   252ee:	f3ef 8511 	mrs	r5, BASEPRI
   252f2:	f383 8812 	msr	BASEPRI_MAX, r3
   252f6:	f3bf 8f6f 	isb	sy
   252fa:	4815      	ldr	r0, [pc, #84]	; (25350 <z_work_submit_to_queue+0x84>)
   252fc:	f7ff f98c 	bl	24618 <z_spin_lock_valid>
   25300:	b938      	cbnz	r0, 25312 <z_work_submit_to_queue+0x46>
   25302:	4914      	ldr	r1, [pc, #80]	; (25354 <z_work_submit_to_queue+0x88>)
   25304:	4811      	ldr	r0, [pc, #68]	; (2534c <z_work_submit_to_queue+0x80>)
   25306:	2294      	movs	r2, #148	; 0x94
   25308:	f005 fc20 	bl	2ab4c <assert_print>
   2530c:	2194      	movs	r1, #148	; 0x94
   2530e:	4811      	ldr	r0, [pc, #68]	; (25354 <z_work_submit_to_queue+0x88>)
   25310:	e7e9      	b.n	252e6 <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   25312:	480f      	ldr	r0, [pc, #60]	; (25350 <z_work_submit_to_queue+0x84>)
   25314:	f7ff f99e 	bl	24654 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25318:	4620      	mov	r0, r4
   2531a:	a901      	add	r1, sp, #4
   2531c:	f7ff fed8 	bl	250d0 <submit_to_queue_locked>
   25320:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25322:	480b      	ldr	r0, [pc, #44]	; (25350 <z_work_submit_to_queue+0x84>)
   25324:	f7ff f986 	bl	24634 <z_spin_unlock_valid>
   25328:	b930      	cbnz	r0, 25338 <z_work_submit_to_queue+0x6c>
   2532a:	490a      	ldr	r1, [pc, #40]	; (25354 <z_work_submit_to_queue+0x88>)
   2532c:	4807      	ldr	r0, [pc, #28]	; (2534c <z_work_submit_to_queue+0x80>)
   2532e:	22c2      	movs	r2, #194	; 0xc2
   25330:	f005 fc0c 	bl	2ab4c <assert_print>
   25334:	21c2      	movs	r1, #194	; 0xc2
   25336:	e7ea      	b.n	2530e <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   25338:	f385 8811 	msr	BASEPRI, r5
   2533c:	f3bf 8f6f 	isb	sy
}
   25340:	4620      	mov	r0, r4
   25342:	b003      	add	sp, #12
   25344:	bd30      	pop	{r4, r5, pc}
   25346:	bf00      	nop
   25348:	000340a6 	.word	0x000340a6
   2534c:	0003013d 	.word	0x0003013d
   25350:	20003834 	.word	0x20003834
   25354:	00030879 	.word	0x00030879

00025358 <k_work_submit>:
{
   25358:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2535a:	4801      	ldr	r0, [pc, #4]	; (25360 <k_work_submit+0x8>)
   2535c:	f009 bc9d 	b.w	2ec9a <k_work_submit_to_queue>
   25360:	20002ac0 	.word	0x20002ac0

00025364 <k_work_queue_init>:
{
   25364:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   25366:	b950      	cbnz	r0, 2537e <k_work_queue_init+0x1a>
   25368:	4907      	ldr	r1, [pc, #28]	; (25388 <k_work_queue_init+0x24>)
   2536a:	4808      	ldr	r0, [pc, #32]	; (2538c <k_work_queue_init+0x28>)
   2536c:	f240 22b9 	movw	r2, #697	; 0x2b9
   25370:	f005 fbec 	bl	2ab4c <assert_print>
   25374:	4804      	ldr	r0, [pc, #16]	; (25388 <k_work_queue_init+0x24>)
   25376:	f240 21b9 	movw	r1, #697	; 0x2b9
   2537a:	f005 fbe0 	bl	2ab3e <assert_post_action>
	*queue = (struct k_work_q) {
   2537e:	22a0      	movs	r2, #160	; 0xa0
   25380:	2100      	movs	r1, #0
   25382:	f006 fbc4 	bl	2bb0e <memset>
}
   25386:	bd08      	pop	{r3, pc}
   25388:	000340a6 	.word	0x000340a6
   2538c:	0003013d 	.word	0x0003013d

00025390 <k_work_queue_start>:
{
   25390:	b5f0      	push	{r4, r5, r6, r7, lr}
   25392:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   25394:	4604      	mov	r4, r0
{
   25396:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   25398:	b950      	cbnz	r0, 253b0 <k_work_queue_start+0x20>
   2539a:	492a      	ldr	r1, [pc, #168]	; (25444 <k_work_queue_start+0xb4>)
   2539c:	482a      	ldr	r0, [pc, #168]	; (25448 <k_work_queue_start+0xb8>)
   2539e:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   253a2:	f005 fbd3 	bl	2ab4c <assert_print>
   253a6:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   253aa:	4826      	ldr	r0, [pc, #152]	; (25444 <k_work_queue_start+0xb4>)
   253ac:	f005 fbc7 	bl	2ab3e <assert_post_action>
   253b0:	b941      	cbnz	r1, 253c4 <k_work_queue_start+0x34>
   253b2:	4924      	ldr	r1, [pc, #144]	; (25444 <k_work_queue_start+0xb4>)
   253b4:	4824      	ldr	r0, [pc, #144]	; (25448 <k_work_queue_start+0xb8>)
   253b6:	f240 22c9 	movw	r2, #713	; 0x2c9
   253ba:	f005 fbc7 	bl	2ab4c <assert_print>
   253be:	f240 21c9 	movw	r1, #713	; 0x2c9
   253c2:	e7f2      	b.n	253aa <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   253c4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   253c8:	f010 0001 	ands.w	r0, r0, #1
   253cc:	d008      	beq.n	253e0 <k_work_queue_start+0x50>
   253ce:	491d      	ldr	r1, [pc, #116]	; (25444 <k_work_queue_start+0xb4>)
   253d0:	481d      	ldr	r0, [pc, #116]	; (25448 <k_work_queue_start+0xb8>)
   253d2:	f240 22ca 	movw	r2, #714	; 0x2ca
   253d6:	f005 fbb9 	bl	2ab4c <assert_print>
   253da:	f240 21ca 	movw	r1, #714	; 0x2ca
   253de:	e7e4      	b.n	253aa <k_work_queue_start+0x1a>
	list->tail = NULL;
   253e0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   253e4:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   253e8:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   253ec:	f104 0090 	add.w	r0, r4, #144	; 0x90
   253f0:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   253f4:	b31d      	cbz	r5, 2543e <k_work_queue_start+0xae>
   253f6:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   253f8:	2800      	cmp	r0, #0
   253fa:	f240 1001 	movw	r0, #257	; 0x101
   253fe:	bf08      	it	eq
   25400:	2001      	moveq	r0, #1
	*flagp = flags;
   25402:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   25406:	2000      	movs	r0, #0
   25408:	f04f 36ff 	mov.w	r6, #4294967295
   2540c:	f04f 37ff 	mov.w	r7, #4294967295
   25410:	e9cd 3003 	strd	r3, r0, [sp, #12]
   25414:	e9cd 0001 	strd	r0, r0, [sp, #4]
   25418:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2541c:	4b0b      	ldr	r3, [pc, #44]	; (2544c <k_work_queue_start+0xbc>)
   2541e:	9400      	str	r4, [sp, #0]
   25420:	4620      	mov	r0, r4
   25422:	f7ff f843 	bl	244ac <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25426:	b125      	cbz	r5, 25432 <k_work_queue_start+0xa2>
   25428:	6829      	ldr	r1, [r5, #0]
   2542a:	b111      	cbz	r1, 25432 <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   2542c:	4620      	mov	r0, r4
   2542e:	f009 fb86 	bl	2eb3e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25432:	4620      	mov	r0, r4
}
   25434:	b009      	add	sp, #36	; 0x24
   25436:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2543a:	f009 bb85 	b.w	2eb48 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2543e:	2001      	movs	r0, #1
   25440:	e7df      	b.n	25402 <k_work_queue_start+0x72>
   25442:	bf00      	nop
   25444:	000340a6 	.word	0x000340a6
   25448:	0003013d 	.word	0x0003013d
   2544c:	00024ed9 	.word	0x00024ed9

00025450 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   25450:	b538      	push	{r3, r4, r5, lr}
   25452:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25454:	4604      	mov	r4, r0
   25456:	b950      	cbnz	r0, 2546e <k_work_init_delayable+0x1e>
   25458:	490e      	ldr	r1, [pc, #56]	; (25494 <k_work_init_delayable+0x44>)
   2545a:	480f      	ldr	r0, [pc, #60]	; (25498 <k_work_init_delayable+0x48>)
   2545c:	f44f 7250 	mov.w	r2, #832	; 0x340
   25460:	f005 fb74 	bl	2ab4c <assert_print>
   25464:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   25468:	480a      	ldr	r0, [pc, #40]	; (25494 <k_work_init_delayable+0x44>)
   2546a:	f005 fb68 	bl	2ab3e <assert_post_action>
   2546e:	b941      	cbnz	r1, 25482 <k_work_init_delayable+0x32>
   25470:	4908      	ldr	r1, [pc, #32]	; (25494 <k_work_init_delayable+0x44>)
   25472:	4809      	ldr	r0, [pc, #36]	; (25498 <k_work_init_delayable+0x48>)
   25474:	f240 3241 	movw	r2, #833	; 0x341
   25478:	f005 fb68 	bl	2ab4c <assert_print>
   2547c:	f240 3141 	movw	r1, #833	; 0x341
   25480:	e7f2      	b.n	25468 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   25482:	2230      	movs	r2, #48	; 0x30
   25484:	2100      	movs	r1, #0
   25486:	f006 fb42 	bl	2bb0e <memset>
   2548a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2548e:	6065      	str	r5, [r4, #4]
   25490:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   25492:	bd38      	pop	{r3, r4, r5, pc}
   25494:	000340a6 	.word	0x000340a6
   25498:	0003013d 	.word	0x0003013d

0002549c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   2549c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2549e:	4616      	mov	r6, r2
   254a0:	9001      	str	r0, [sp, #4]
   254a2:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   254a4:	460c      	mov	r4, r1
   254a6:	b951      	cbnz	r1, 254be <k_work_schedule_for_queue+0x22>
   254a8:	4927      	ldr	r1, [pc, #156]	; (25548 <k_work_schedule_for_queue+0xac>)
   254aa:	4828      	ldr	r0, [pc, #160]	; (2554c <k_work_schedule_for_queue+0xb0>)
   254ac:	f240 32b7 	movw	r2, #951	; 0x3b7
   254b0:	f005 fb4c 	bl	2ab4c <assert_print>
   254b4:	4824      	ldr	r0, [pc, #144]	; (25548 <k_work_schedule_for_queue+0xac>)
   254b6:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   254ba:	f005 fb40 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   254be:	f04f 0340 	mov.w	r3, #64	; 0x40
   254c2:	f3ef 8711 	mrs	r7, BASEPRI
   254c6:	f383 8812 	msr	BASEPRI_MAX, r3
   254ca:	f3bf 8f6f 	isb	sy
   254ce:	4820      	ldr	r0, [pc, #128]	; (25550 <k_work_schedule_for_queue+0xb4>)
   254d0:	f7ff f8a2 	bl	24618 <z_spin_lock_valid>
   254d4:	b938      	cbnz	r0, 254e6 <k_work_schedule_for_queue+0x4a>
   254d6:	491f      	ldr	r1, [pc, #124]	; (25554 <k_work_schedule_for_queue+0xb8>)
   254d8:	481c      	ldr	r0, [pc, #112]	; (2554c <k_work_schedule_for_queue+0xb0>)
   254da:	2294      	movs	r2, #148	; 0x94
   254dc:	f005 fb36 	bl	2ab4c <assert_print>
   254e0:	2194      	movs	r1, #148	; 0x94
   254e2:	481c      	ldr	r0, [pc, #112]	; (25554 <k_work_schedule_for_queue+0xb8>)
   254e4:	e7e9      	b.n	254ba <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   254e6:	481a      	ldr	r0, [pc, #104]	; (25550 <k_work_schedule_for_queue+0xb4>)
   254e8:	f7ff f8b4 	bl	24654 <z_spin_lock_set_owner>
	return *flagp;
   254ec:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   254ee:	f013 0f0e 	tst.w	r3, #14
   254f2:	d120      	bne.n	25536 <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   254f4:	ea55 0206 	orrs.w	r2, r5, r6
   254f8:	d10f      	bne.n	2551a <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   254fa:	4620      	mov	r0, r4
   254fc:	a901      	add	r1, sp, #4
   254fe:	f7ff fde7 	bl	250d0 <submit_to_queue_locked>
   25502:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25504:	4812      	ldr	r0, [pc, #72]	; (25550 <k_work_schedule_for_queue+0xb4>)
   25506:	f7ff f895 	bl	24634 <z_spin_unlock_valid>
   2550a:	b9b0      	cbnz	r0, 2553a <k_work_schedule_for_queue+0x9e>
   2550c:	4911      	ldr	r1, [pc, #68]	; (25554 <k_work_schedule_for_queue+0xb8>)
   2550e:	480f      	ldr	r0, [pc, #60]	; (2554c <k_work_schedule_for_queue+0xb0>)
   25510:	22c2      	movs	r2, #194	; 0xc2
   25512:	f005 fb1b 	bl	2ab4c <assert_print>
   25516:	21c2      	movs	r1, #194	; 0xc2
   25518:	e7e3      	b.n	254e2 <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   2551a:	f043 0308 	orr.w	r3, r3, #8
   2551e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   25520:	9b01      	ldr	r3, [sp, #4]
   25522:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25524:	f104 0010 	add.w	r0, r4, #16
   25528:	490b      	ldr	r1, [pc, #44]	; (25558 <k_work_schedule_for_queue+0xbc>)
   2552a:	4632      	mov	r2, r6
   2552c:	462b      	mov	r3, r5
   2552e:	f001 f9d7 	bl	268e0 <z_add_timeout>
	return ret;
   25532:	2401      	movs	r4, #1
   25534:	e7e6      	b.n	25504 <k_work_schedule_for_queue+0x68>
	int ret = 0;
   25536:	2400      	movs	r4, #0
   25538:	e7e4      	b.n	25504 <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   2553a:	f387 8811 	msr	BASEPRI, r7
   2553e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25542:	4620      	mov	r0, r4
   25544:	b003      	add	sp, #12
   25546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25548:	000340a6 	.word	0x000340a6
   2554c:	0003013d 	.word	0x0003013d
   25550:	20003834 	.word	0x20003834
   25554:	00030879 	.word	0x00030879
   25558:	000251a5 	.word	0x000251a5

0002555c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2555c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2555e:	4801      	ldr	r0, [pc, #4]	; (25564 <k_work_schedule+0x8>)
   25560:	f7ff bf9c 	b.w	2549c <k_work_schedule_for_queue>
   25564:	20002ac0 	.word	0x20002ac0

00025568 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2556a:	4616      	mov	r6, r2
   2556c:	9001      	str	r0, [sp, #4]
   2556e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   25570:	460c      	mov	r4, r1
   25572:	b951      	cbnz	r1, 2558a <k_work_reschedule_for_queue+0x22>
   25574:	4926      	ldr	r1, [pc, #152]	; (25610 <k_work_reschedule_for_queue+0xa8>)
   25576:	4827      	ldr	r0, [pc, #156]	; (25614 <k_work_reschedule_for_queue+0xac>)
   25578:	f240 32db 	movw	r2, #987	; 0x3db
   2557c:	f005 fae6 	bl	2ab4c <assert_print>
   25580:	4823      	ldr	r0, [pc, #140]	; (25610 <k_work_reschedule_for_queue+0xa8>)
   25582:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25586:	f005 fada 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   2558a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2558e:	f3ef 8711 	mrs	r7, BASEPRI
   25592:	f383 8812 	msr	BASEPRI_MAX, r3
   25596:	f3bf 8f6f 	isb	sy
   2559a:	481f      	ldr	r0, [pc, #124]	; (25618 <k_work_reschedule_for_queue+0xb0>)
   2559c:	f7ff f83c 	bl	24618 <z_spin_lock_valid>
   255a0:	b938      	cbnz	r0, 255b2 <k_work_reschedule_for_queue+0x4a>
   255a2:	491e      	ldr	r1, [pc, #120]	; (2561c <k_work_reschedule_for_queue+0xb4>)
   255a4:	481b      	ldr	r0, [pc, #108]	; (25614 <k_work_reschedule_for_queue+0xac>)
   255a6:	2294      	movs	r2, #148	; 0x94
   255a8:	f005 fad0 	bl	2ab4c <assert_print>
   255ac:	2194      	movs	r1, #148	; 0x94
   255ae:	481b      	ldr	r0, [pc, #108]	; (2561c <k_work_reschedule_for_queue+0xb4>)
   255b0:	e7e9      	b.n	25586 <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   255b2:	4819      	ldr	r0, [pc, #100]	; (25618 <k_work_reschedule_for_queue+0xb0>)
   255b4:	f7ff f84e 	bl	24654 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   255b8:	4620      	mov	r0, r4
   255ba:	f009 fb26 	bl	2ec0a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   255be:	ea55 0306 	orrs.w	r3, r5, r6
   255c2:	d10f      	bne.n	255e4 <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   255c4:	4620      	mov	r0, r4
   255c6:	a901      	add	r1, sp, #4
   255c8:	f7ff fd82 	bl	250d0 <submit_to_queue_locked>
   255cc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   255ce:	4812      	ldr	r0, [pc, #72]	; (25618 <k_work_reschedule_for_queue+0xb0>)
   255d0:	f7ff f830 	bl	24634 <z_spin_unlock_valid>
   255d4:	b9a8      	cbnz	r0, 25602 <k_work_reschedule_for_queue+0x9a>
   255d6:	4911      	ldr	r1, [pc, #68]	; (2561c <k_work_reschedule_for_queue+0xb4>)
   255d8:	480e      	ldr	r0, [pc, #56]	; (25614 <k_work_reschedule_for_queue+0xac>)
   255da:	22c2      	movs	r2, #194	; 0xc2
   255dc:	f005 fab6 	bl	2ab4c <assert_print>
   255e0:	21c2      	movs	r1, #194	; 0xc2
   255e2:	e7e4      	b.n	255ae <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   255e4:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   255e6:	490e      	ldr	r1, [pc, #56]	; (25620 <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   255e8:	f043 0308 	orr.w	r3, r3, #8
   255ec:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   255ee:	9b01      	ldr	r3, [sp, #4]
   255f0:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   255f2:	f104 0010 	add.w	r0, r4, #16
   255f6:	4632      	mov	r2, r6
   255f8:	462b      	mov	r3, r5
   255fa:	f001 f971 	bl	268e0 <z_add_timeout>
	return ret;
   255fe:	2401      	movs	r4, #1
   25600:	e7e5      	b.n	255ce <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   25602:	f387 8811 	msr	BASEPRI, r7
   25606:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2560a:	4620      	mov	r0, r4
   2560c:	b003      	add	sp, #12
   2560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25610:	000340a6 	.word	0x000340a6
   25614:	0003013d 	.word	0x0003013d
   25618:	20003834 	.word	0x20003834
   2561c:	00030879 	.word	0x00030879
   25620:	000251a5 	.word	0x000251a5

00025624 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   25624:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   25626:	4801      	ldr	r0, [pc, #4]	; (2562c <k_work_reschedule+0x8>)
   25628:	f7ff bf9e 	b.w	25568 <k_work_reschedule_for_queue>
   2562c:	20002ac0 	.word	0x20002ac0

00025630 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   25630:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   25632:	4604      	mov	r4, r0
   25634:	b950      	cbnz	r0, 2564c <k_work_cancel_delayable+0x1c>
   25636:	491d      	ldr	r1, [pc, #116]	; (256ac <k_work_cancel_delayable+0x7c>)
   25638:	481d      	ldr	r0, [pc, #116]	; (256b0 <k_work_cancel_delayable+0x80>)
   2563a:	f240 32fd 	movw	r2, #1021	; 0x3fd
   2563e:	f005 fa85 	bl	2ab4c <assert_print>
   25642:	481a      	ldr	r0, [pc, #104]	; (256ac <k_work_cancel_delayable+0x7c>)
   25644:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25648:	f005 fa79 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   2564c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25650:	f3ef 8511 	mrs	r5, BASEPRI
   25654:	f383 8812 	msr	BASEPRI_MAX, r3
   25658:	f3bf 8f6f 	isb	sy
   2565c:	4815      	ldr	r0, [pc, #84]	; (256b4 <k_work_cancel_delayable+0x84>)
   2565e:	f7fe ffdb 	bl	24618 <z_spin_lock_valid>
   25662:	b938      	cbnz	r0, 25674 <k_work_cancel_delayable+0x44>
   25664:	4914      	ldr	r1, [pc, #80]	; (256b8 <k_work_cancel_delayable+0x88>)
   25666:	4812      	ldr	r0, [pc, #72]	; (256b0 <k_work_cancel_delayable+0x80>)
   25668:	2294      	movs	r2, #148	; 0x94
   2566a:	f005 fa6f 	bl	2ab4c <assert_print>
   2566e:	2194      	movs	r1, #148	; 0x94
   25670:	4811      	ldr	r0, [pc, #68]	; (256b8 <k_work_cancel_delayable+0x88>)
   25672:	e7e9      	b.n	25648 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   25674:	480f      	ldr	r0, [pc, #60]	; (256b4 <k_work_cancel_delayable+0x84>)
   25676:	f7fe ffed 	bl	24654 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   2567a:	4620      	mov	r0, r4
   2567c:	f009 fac5 	bl	2ec0a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25680:	4620      	mov	r0, r4
   25682:	f009 fad7 	bl	2ec34 <cancel_async_locked>
   25686:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25688:	480a      	ldr	r0, [pc, #40]	; (256b4 <k_work_cancel_delayable+0x84>)
   2568a:	f7fe ffd3 	bl	24634 <z_spin_unlock_valid>
   2568e:	b930      	cbnz	r0, 2569e <k_work_cancel_delayable+0x6e>
   25690:	4909      	ldr	r1, [pc, #36]	; (256b8 <k_work_cancel_delayable+0x88>)
   25692:	4807      	ldr	r0, [pc, #28]	; (256b0 <k_work_cancel_delayable+0x80>)
   25694:	22c2      	movs	r2, #194	; 0xc2
   25696:	f005 fa59 	bl	2ab4c <assert_print>
   2569a:	21c2      	movs	r1, #194	; 0xc2
   2569c:	e7e8      	b.n	25670 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   2569e:	f385 8811 	msr	BASEPRI, r5
   256a2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   256a6:	4620      	mov	r0, r4
   256a8:	bd38      	pop	{r3, r4, r5, pc}
   256aa:	bf00      	nop
   256ac:	000340a6 	.word	0x000340a6
   256b0:	0003013d 	.word	0x0003013d
   256b4:	20003834 	.word	0x20003834
   256b8:	00030879 	.word	0x00030879

000256bc <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   256bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256c0:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   256c2:	4605      	mov	r5, r0
   256c4:	b950      	cbnz	r0, 256dc <k_work_cancel_delayable_sync+0x20>
   256c6:	4933      	ldr	r1, [pc, #204]	; (25794 <k_work_cancel_delayable_sync+0xd8>)
   256c8:	4833      	ldr	r0, [pc, #204]	; (25798 <k_work_cancel_delayable_sync+0xdc>)
   256ca:	f240 420e 	movw	r2, #1038	; 0x40e
   256ce:	f005 fa3d 	bl	2ab4c <assert_print>
   256d2:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   256d6:	482f      	ldr	r0, [pc, #188]	; (25794 <k_work_cancel_delayable_sync+0xd8>)
   256d8:	f005 fa31 	bl	2ab3e <assert_post_action>
   256dc:	b941      	cbnz	r1, 256f0 <k_work_cancel_delayable_sync+0x34>
   256de:	492d      	ldr	r1, [pc, #180]	; (25794 <k_work_cancel_delayable_sync+0xd8>)
   256e0:	482d      	ldr	r0, [pc, #180]	; (25798 <k_work_cancel_delayable_sync+0xdc>)
   256e2:	f240 420f 	movw	r2, #1039	; 0x40f
   256e6:	f005 fa31 	bl	2ab4c <assert_print>
   256ea:	f240 410f 	movw	r1, #1039	; 0x40f
   256ee:	e7f2      	b.n	256d6 <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   256f0:	f009 fa1f 	bl	2eb32 <k_is_in_isr>
   256f4:	4604      	mov	r4, r0
   256f6:	b140      	cbz	r0, 2570a <k_work_cancel_delayable_sync+0x4e>
   256f8:	4926      	ldr	r1, [pc, #152]	; (25794 <k_work_cancel_delayable_sync+0xd8>)
   256fa:	4827      	ldr	r0, [pc, #156]	; (25798 <k_work_cancel_delayable_sync+0xdc>)
   256fc:	f44f 6282 	mov.w	r2, #1040	; 0x410
   25700:	f005 fa24 	bl	2ab4c <assert_print>
   25704:	f44f 6182 	mov.w	r1, #1040	; 0x410
   25708:	e7e5      	b.n	256d6 <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   2570a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2570e:	f3ef 8811 	mrs	r8, BASEPRI
   25712:	f383 8812 	msr	BASEPRI_MAX, r3
   25716:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2571a:	4820      	ldr	r0, [pc, #128]	; (2579c <k_work_cancel_delayable_sync+0xe0>)
   2571c:	f7fe ff7c 	bl	24618 <z_spin_lock_valid>
   25720:	b938      	cbnz	r0, 25732 <k_work_cancel_delayable_sync+0x76>
   25722:	491f      	ldr	r1, [pc, #124]	; (257a0 <k_work_cancel_delayable_sync+0xe4>)
   25724:	481c      	ldr	r0, [pc, #112]	; (25798 <k_work_cancel_delayable_sync+0xdc>)
   25726:	2294      	movs	r2, #148	; 0x94
   25728:	f005 fa10 	bl	2ab4c <assert_print>
   2572c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2572e:	481c      	ldr	r0, [pc, #112]	; (257a0 <k_work_cancel_delayable_sync+0xe4>)
   25730:	e7d2      	b.n	256d8 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   25732:	481a      	ldr	r0, [pc, #104]	; (2579c <k_work_cancel_delayable_sync+0xe0>)
   25734:	f7fe ff8e 	bl	24654 <z_spin_lock_set_owner>
	return *flagp;
   25738:	68eb      	ldr	r3, [r5, #12]
   2573a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2573e:	2b00      	cmp	r3, #0
   25740:	bf14      	ite	ne
   25742:	2701      	movne	r7, #1
   25744:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   25746:	d00a      	beq.n	2575e <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   25748:	4628      	mov	r0, r5
   2574a:	f009 fa5e 	bl	2ec0a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2574e:	4628      	mov	r0, r5
   25750:	f009 fa70 	bl	2ec34 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25754:	4631      	mov	r1, r6
   25756:	4628      	mov	r0, r5
   25758:	f7ff fc9c 	bl	25094 <cancel_sync_locked>
   2575c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2575e:	480f      	ldr	r0, [pc, #60]	; (2579c <k_work_cancel_delayable_sync+0xe0>)
   25760:	f7fe ff68 	bl	24634 <z_spin_unlock_valid>
   25764:	b930      	cbnz	r0, 25774 <k_work_cancel_delayable_sync+0xb8>
   25766:	490e      	ldr	r1, [pc, #56]	; (257a0 <k_work_cancel_delayable_sync+0xe4>)
   25768:	480b      	ldr	r0, [pc, #44]	; (25798 <k_work_cancel_delayable_sync+0xdc>)
   2576a:	22c2      	movs	r2, #194	; 0xc2
   2576c:	f005 f9ee 	bl	2ab4c <assert_print>
   25770:	21c2      	movs	r1, #194	; 0xc2
   25772:	e7dc      	b.n	2572e <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   25774:	f388 8811 	msr	BASEPRI, r8
   25778:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2577c:	b13c      	cbz	r4, 2578e <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   2577e:	f04f 32ff 	mov.w	r2, #4294967295
   25782:	f04f 33ff 	mov.w	r3, #4294967295
   25786:	f106 0008 	add.w	r0, r6, #8
   2578a:	f7ff faf5 	bl	24d78 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2578e:	4638      	mov	r0, r7
   25790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25794:	000340a6 	.word	0x000340a6
   25798:	0003013d 	.word	0x0003013d
   2579c:	20003834 	.word	0x20003834
   257a0:	00030879 	.word	0x00030879

000257a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   257a4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   257a6:	4d07      	ldr	r5, [pc, #28]	; (257c4 <z_reset_time_slice+0x20>)
   257a8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   257aa:	b154      	cbz	r4, 257c2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   257ac:	f7fb fdbc 	bl	21328 <sys_clock_elapsed>
   257b0:	4b05      	ldr	r3, [pc, #20]	; (257c8 <z_reset_time_slice+0x24>)
   257b2:	4404      	add	r4, r0
   257b4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   257b6:	6828      	ldr	r0, [r5, #0]
   257b8:	2100      	movs	r1, #0
	}
}
   257ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   257be:	f001 b9e1 	b.w	26b84 <z_set_timeout_expiry>
}
   257c2:	bd38      	pop	{r3, r4, r5, pc}
   257c4:	20003840 	.word	0x20003840
   257c8:	200037fc 	.word	0x200037fc

000257cc <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   257cc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   257ce:	4d12      	ldr	r5, [pc, #72]	; (25818 <update_cache+0x4c>)
   257d0:	462b      	mov	r3, r5
   257d2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   257d6:	429c      	cmp	r4, r3
   257d8:	d000      	beq.n	257dc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   257da:	b904      	cbnz	r4, 257de <update_cache+0x12>
   257dc:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   257de:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   257e0:	b988      	cbnz	r0, 25806 <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   257e2:	b943      	cbnz	r3, 257f6 <update_cache+0x2a>
   257e4:	490d      	ldr	r1, [pc, #52]	; (2581c <update_cache+0x50>)
   257e6:	480e      	ldr	r0, [pc, #56]	; (25820 <update_cache+0x54>)
   257e8:	2289      	movs	r2, #137	; 0x89
   257ea:	f005 f9af 	bl	2ab4c <assert_print>
   257ee:	480b      	ldr	r0, [pc, #44]	; (2581c <update_cache+0x50>)
   257f0:	2189      	movs	r1, #137	; 0x89
   257f2:	f005 f9a4 	bl	2ab3e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   257f6:	7b5a      	ldrb	r2, [r3, #13]
   257f8:	06d2      	lsls	r2, r2, #27
   257fa:	d104      	bne.n	25806 <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   257fc:	69a2      	ldr	r2, [r4, #24]
   257fe:	b912      	cbnz	r2, 25806 <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   25800:	89da      	ldrh	r2, [r3, #14]
   25802:	2a7f      	cmp	r2, #127	; 0x7f
   25804:	d805      	bhi.n	25812 <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   25806:	429c      	cmp	r4, r3
   25808:	d002      	beq.n	25810 <update_cache+0x44>
			z_reset_time_slice(thread);
   2580a:	4620      	mov	r0, r4
   2580c:	f7ff ffca 	bl	257a4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   25810:	4623      	mov	r3, r4
   25812:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   25814:	bd38      	pop	{r3, r4, r5, pc}
   25816:	bf00      	nop
   25818:	200037fc 	.word	0x200037fc
   2581c:	000340c7 	.word	0x000340c7
   25820:	0003013d 	.word	0x0003013d

00025824 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   25824:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25826:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2582a:	7b42      	ldrb	r2, [r0, #13]
   2582c:	2b00      	cmp	r3, #0
   2582e:	db37      	blt.n	258a0 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25830:	06d3      	lsls	r3, r2, #27
   25832:	d135      	bne.n	258a0 <ready_thread+0x7c>
	return node->next != NULL;
   25834:	6983      	ldr	r3, [r0, #24]
   25836:	2b00      	cmp	r3, #0
   25838:	d132      	bne.n	258a0 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   2583a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2583e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25840:	4a18      	ldr	r2, [pc, #96]	; (258a4 <ready_thread+0x80>)
   25842:	4290      	cmp	r0, r2
   25844:	d108      	bne.n	25858 <ready_thread+0x34>
   25846:	4918      	ldr	r1, [pc, #96]	; (258a8 <ready_thread+0x84>)
   25848:	4818      	ldr	r0, [pc, #96]	; (258ac <ready_thread+0x88>)
   2584a:	22ba      	movs	r2, #186	; 0xba
   2584c:	f005 f97e 	bl	2ab4c <assert_print>
   25850:	4815      	ldr	r0, [pc, #84]	; (258a8 <ready_thread+0x84>)
   25852:	21ba      	movs	r1, #186	; 0xba
   25854:	f005 f973 	bl	2ab3e <assert_post_action>
	return list->head == list;
   25858:	4915      	ldr	r1, [pc, #84]	; (258b0 <ready_thread+0x8c>)
   2585a:	460a      	mov	r2, r1
   2585c:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25860:	4294      	cmp	r4, r2
   25862:	bf18      	it	ne
   25864:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   25866:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25868:	b923      	cbnz	r3, 25874 <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   2586a:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   2586e:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25870:	6248      	str	r0, [r1, #36]	; 0x24
}
   25872:	e00c      	b.n	2588e <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   25874:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25878:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2587c:	42b5      	cmp	r5, r6
   2587e:	d00b      	beq.n	25898 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25880:	42ae      	cmp	r6, r5
   25882:	dd09      	ble.n	25898 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25884:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25886:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2588a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2588c:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   2588e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   25892:	2000      	movs	r0, #0
   25894:	f7ff bf9a 	b.w	257cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25898:	42a3      	cmp	r3, r4
   2589a:	d0e6      	beq.n	2586a <ready_thread+0x46>
   2589c:	681b      	ldr	r3, [r3, #0]
   2589e:	e7e3      	b.n	25868 <ready_thread+0x44>
}
   258a0:	bd70      	pop	{r4, r5, r6, pc}
   258a2:	bf00      	nop
   258a4:	200029c0 	.word	0x200029c0
   258a8:	000340c7 	.word	0x000340c7
   258ac:	0003013d 	.word	0x0003013d
   258b0:	200037fc 	.word	0x200037fc

000258b4 <k_sched_time_slice_set>:
{
   258b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258b6:	4604      	mov	r4, r0
   258b8:	460d      	mov	r5, r1
	__asm__ volatile(
   258ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   258be:	f3ef 8711 	mrs	r7, BASEPRI
   258c2:	f383 8812 	msr	BASEPRI_MAX, r3
   258c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258ca:	481d      	ldr	r0, [pc, #116]	; (25940 <k_sched_time_slice_set+0x8c>)
   258cc:	f7fe fea4 	bl	24618 <z_spin_lock_valid>
   258d0:	b940      	cbnz	r0, 258e4 <k_sched_time_slice_set+0x30>
   258d2:	491c      	ldr	r1, [pc, #112]	; (25944 <k_sched_time_slice_set+0x90>)
   258d4:	481c      	ldr	r0, [pc, #112]	; (25948 <k_sched_time_slice_set+0x94>)
   258d6:	2294      	movs	r2, #148	; 0x94
   258d8:	f005 f938 	bl	2ab4c <assert_print>
   258dc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258de:	4819      	ldr	r0, [pc, #100]	; (25944 <k_sched_time_slice_set+0x90>)
   258e0:	f005 f92d 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   258e4:	4816      	ldr	r0, [pc, #88]	; (25940 <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   258e6:	2600      	movs	r6, #0
   258e8:	f7fe feb4 	bl	24654 <z_spin_lock_set_owner>
   258ec:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   258f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   258f4:	4631      	mov	r1, r6
   258f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   258fa:	2300      	movs	r3, #0
   258fc:	fbe4 010c 	umlal	r0, r1, r4, ip
   25900:	f7da fbfe 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   25904:	42b4      	cmp	r4, r6
   25906:	dd02      	ble.n	2590e <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   25908:	2802      	cmp	r0, #2
   2590a:	bfb8      	it	lt
   2590c:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   2590e:	4a0f      	ldr	r2, [pc, #60]	; (2594c <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   25910:	4b0f      	ldr	r3, [pc, #60]	; (25950 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   25912:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   25914:	4a0f      	ldr	r2, [pc, #60]	; (25954 <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   25916:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   25918:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   2591a:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   2591c:	f7ff ff42 	bl	257a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25920:	4807      	ldr	r0, [pc, #28]	; (25940 <k_sched_time_slice_set+0x8c>)
   25922:	f7fe fe87 	bl	24634 <z_spin_unlock_valid>
   25926:	b930      	cbnz	r0, 25936 <k_sched_time_slice_set+0x82>
   25928:	4906      	ldr	r1, [pc, #24]	; (25944 <k_sched_time_slice_set+0x90>)
   2592a:	4807      	ldr	r0, [pc, #28]	; (25948 <k_sched_time_slice_set+0x94>)
   2592c:	22c2      	movs	r2, #194	; 0xc2
   2592e:	f005 f90d 	bl	2ab4c <assert_print>
   25932:	21c2      	movs	r1, #194	; 0xc2
   25934:	e7d3      	b.n	258de <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   25936:	f387 8811 	msr	BASEPRI, r7
   2593a:	f3bf 8f6f 	isb	sy
}
   2593e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25940:	20003844 	.word	0x20003844
   25944:	00030879 	.word	0x00030879
   25948:	0003013d 	.word	0x0003013d
   2594c:	20003840 	.word	0x20003840
   25950:	200037fc 	.word	0x200037fc
   25954:	2000383c 	.word	0x2000383c

00025958 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   25958:	b538      	push	{r3, r4, r5, lr}
   2595a:	4604      	mov	r4, r0
	__asm__ volatile(
   2595c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25960:	f3ef 8511 	mrs	r5, BASEPRI
   25964:	f383 8812 	msr	BASEPRI_MAX, r3
   25968:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2596c:	4811      	ldr	r0, [pc, #68]	; (259b4 <z_ready_thread+0x5c>)
   2596e:	f7fe fe53 	bl	24618 <z_spin_lock_valid>
   25972:	b940      	cbnz	r0, 25986 <z_ready_thread+0x2e>
   25974:	4910      	ldr	r1, [pc, #64]	; (259b8 <z_ready_thread+0x60>)
   25976:	4811      	ldr	r0, [pc, #68]	; (259bc <z_ready_thread+0x64>)
   25978:	2294      	movs	r2, #148	; 0x94
   2597a:	f005 f8e7 	bl	2ab4c <assert_print>
   2597e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25980:	480d      	ldr	r0, [pc, #52]	; (259b8 <z_ready_thread+0x60>)
   25982:	f005 f8dc 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   25986:	480b      	ldr	r0, [pc, #44]	; (259b4 <z_ready_thread+0x5c>)
   25988:	f7fe fe64 	bl	24654 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   2598c:	4620      	mov	r0, r4
   2598e:	f7ff ff49 	bl	25824 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25992:	4808      	ldr	r0, [pc, #32]	; (259b4 <z_ready_thread+0x5c>)
   25994:	f7fe fe4e 	bl	24634 <z_spin_unlock_valid>
   25998:	b930      	cbnz	r0, 259a8 <z_ready_thread+0x50>
   2599a:	4907      	ldr	r1, [pc, #28]	; (259b8 <z_ready_thread+0x60>)
   2599c:	4807      	ldr	r0, [pc, #28]	; (259bc <z_ready_thread+0x64>)
   2599e:	22c2      	movs	r2, #194	; 0xc2
   259a0:	f005 f8d4 	bl	2ab4c <assert_print>
   259a4:	21c2      	movs	r1, #194	; 0xc2
   259a6:	e7eb      	b.n	25980 <z_ready_thread+0x28>
	__asm__ volatile(
   259a8:	f385 8811 	msr	BASEPRI, r5
   259ac:	f3bf 8f6f 	isb	sy
		}
	}
}
   259b0:	bd38      	pop	{r3, r4, r5, pc}
   259b2:	bf00      	nop
   259b4:	20003844 	.word	0x20003844
   259b8:	00030879 	.word	0x00030879
   259bc:	0003013d 	.word	0x0003013d

000259c0 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   259c0:	b538      	push	{r3, r4, r5, lr}
   259c2:	4604      	mov	r4, r0
	__asm__ volatile(
   259c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   259c8:	f3ef 8511 	mrs	r5, BASEPRI
   259cc:	f383 8812 	msr	BASEPRI_MAX, r3
   259d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259d4:	4811      	ldr	r0, [pc, #68]	; (25a1c <z_unpend_thread_no_timeout+0x5c>)
   259d6:	f7fe fe1f 	bl	24618 <z_spin_lock_valid>
   259da:	b940      	cbnz	r0, 259ee <z_unpend_thread_no_timeout+0x2e>
   259dc:	4910      	ldr	r1, [pc, #64]	; (25a20 <z_unpend_thread_no_timeout+0x60>)
   259de:	4811      	ldr	r0, [pc, #68]	; (25a24 <z_unpend_thread_no_timeout+0x64>)
   259e0:	2294      	movs	r2, #148	; 0x94
   259e2:	f005 f8b3 	bl	2ab4c <assert_print>
   259e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259e8:	480d      	ldr	r0, [pc, #52]	; (25a20 <z_unpend_thread_no_timeout+0x60>)
   259ea:	f005 f8a8 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   259ee:	480b      	ldr	r0, [pc, #44]	; (25a1c <z_unpend_thread_no_timeout+0x5c>)
   259f0:	f7fe fe30 	bl	24654 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   259f4:	4620      	mov	r0, r4
   259f6:	f000 fb97 	bl	26128 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259fa:	4808      	ldr	r0, [pc, #32]	; (25a1c <z_unpend_thread_no_timeout+0x5c>)
   259fc:	f7fe fe1a 	bl	24634 <z_spin_unlock_valid>
   25a00:	b930      	cbnz	r0, 25a10 <z_unpend_thread_no_timeout+0x50>
   25a02:	4907      	ldr	r1, [pc, #28]	; (25a20 <z_unpend_thread_no_timeout+0x60>)
   25a04:	4807      	ldr	r0, [pc, #28]	; (25a24 <z_unpend_thread_no_timeout+0x64>)
   25a06:	22c2      	movs	r2, #194	; 0xc2
   25a08:	f005 f8a0 	bl	2ab4c <assert_print>
   25a0c:	21c2      	movs	r1, #194	; 0xc2
   25a0e:	e7eb      	b.n	259e8 <z_unpend_thread_no_timeout+0x28>
	__asm__ volatile(
   25a10:	f385 8811 	msr	BASEPRI, r5
   25a14:	f3bf 8f6f 	isb	sy
	}
}
   25a18:	bd38      	pop	{r3, r4, r5, pc}
   25a1a:	bf00      	nop
   25a1c:	20003844 	.word	0x20003844
   25a20:	00030879 	.word	0x00030879
   25a24:	0003013d 	.word	0x0003013d

00025a28 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   25a28:	b538      	push	{r3, r4, r5, lr}
   25a2a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25a2c:	460c      	mov	r4, r1
   25a2e:	b9c1      	cbnz	r1, 25a62 <z_reschedule+0x3a>
   25a30:	f3ef 8505 	mrs	r5, IPSR
   25a34:	b9ad      	cbnz	r5, 25a62 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   25a36:	4a13      	ldr	r2, [pc, #76]	; (25a84 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   25a38:	69d1      	ldr	r1, [r2, #28]
   25a3a:	6892      	ldr	r2, [r2, #8]
   25a3c:	4291      	cmp	r1, r2
   25a3e:	d010      	beq.n	25a62 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a40:	f7fe fdf8 	bl	24634 <z_spin_unlock_valid>
   25a44:	b940      	cbnz	r0, 25a58 <z_reschedule+0x30>
   25a46:	4910      	ldr	r1, [pc, #64]	; (25a88 <z_reschedule+0x60>)
   25a48:	4810      	ldr	r0, [pc, #64]	; (25a8c <z_reschedule+0x64>)
   25a4a:	22e1      	movs	r2, #225	; 0xe1
   25a4c:	f005 f87e 	bl	2ab4c <assert_print>
   25a50:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a52:	480d      	ldr	r0, [pc, #52]	; (25a88 <z_reschedule+0x60>)
   25a54:	f005 f873 	bl	2ab3e <assert_post_action>
	ret = arch_swap(key);
   25a58:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   25a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25a5e:	f7ef b96f 	b.w	14d40 <arch_swap>
   25a62:	4618      	mov	r0, r3
   25a64:	f7fe fde6 	bl	24634 <z_spin_unlock_valid>
   25a68:	b930      	cbnz	r0, 25a78 <z_reschedule+0x50>
   25a6a:	4907      	ldr	r1, [pc, #28]	; (25a88 <z_reschedule+0x60>)
   25a6c:	4807      	ldr	r0, [pc, #28]	; (25a8c <z_reschedule+0x64>)
   25a6e:	22c2      	movs	r2, #194	; 0xc2
   25a70:	f005 f86c 	bl	2ab4c <assert_print>
   25a74:	21c2      	movs	r1, #194	; 0xc2
   25a76:	e7ec      	b.n	25a52 <z_reschedule+0x2a>
   25a78:	f384 8811 	msr	BASEPRI, r4
   25a7c:	f3bf 8f6f 	isb	sy
   25a80:	bd38      	pop	{r3, r4, r5, pc}
   25a82:	bf00      	nop
   25a84:	200037fc 	.word	0x200037fc
   25a88:	00030879 	.word	0x00030879
   25a8c:	0003013d 	.word	0x0003013d

00025a90 <z_sched_start>:
{
   25a90:	b538      	push	{r3, r4, r5, lr}
   25a92:	4604      	mov	r4, r0
	__asm__ volatile(
   25a94:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a98:	f3ef 8511 	mrs	r5, BASEPRI
   25a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   25aa0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25aa4:	4817      	ldr	r0, [pc, #92]	; (25b04 <z_sched_start+0x74>)
   25aa6:	f7fe fdb7 	bl	24618 <z_spin_lock_valid>
   25aaa:	b940      	cbnz	r0, 25abe <z_sched_start+0x2e>
   25aac:	4916      	ldr	r1, [pc, #88]	; (25b08 <z_sched_start+0x78>)
   25aae:	4817      	ldr	r0, [pc, #92]	; (25b0c <z_sched_start+0x7c>)
   25ab0:	2294      	movs	r2, #148	; 0x94
   25ab2:	f005 f84b 	bl	2ab4c <assert_print>
   25ab6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ab8:	4813      	ldr	r0, [pc, #76]	; (25b08 <z_sched_start+0x78>)
   25aba:	f005 f840 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   25abe:	4811      	ldr	r0, [pc, #68]	; (25b04 <z_sched_start+0x74>)
   25ac0:	f7fe fdc8 	bl	24654 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25ac4:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   25ac6:	075a      	lsls	r2, r3, #29
   25ac8:	d40f      	bmi.n	25aea <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aca:	480e      	ldr	r0, [pc, #56]	; (25b04 <z_sched_start+0x74>)
   25acc:	f7fe fdb2 	bl	24634 <z_spin_unlock_valid>
   25ad0:	b930      	cbnz	r0, 25ae0 <z_sched_start+0x50>
   25ad2:	490d      	ldr	r1, [pc, #52]	; (25b08 <z_sched_start+0x78>)
   25ad4:	480d      	ldr	r0, [pc, #52]	; (25b0c <z_sched_start+0x7c>)
   25ad6:	22c2      	movs	r2, #194	; 0xc2
   25ad8:	f005 f838 	bl	2ab4c <assert_print>
   25adc:	21c2      	movs	r1, #194	; 0xc2
   25ade:	e7eb      	b.n	25ab8 <z_sched_start+0x28>
	__asm__ volatile(
   25ae0:	f385 8811 	msr	BASEPRI, r5
   25ae4:	f3bf 8f6f 	isb	sy
}
   25ae8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25aea:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   25aee:	4620      	mov	r0, r4
   25af0:	7363      	strb	r3, [r4, #13]
   25af2:	f7ff fe97 	bl	25824 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25af6:	4629      	mov	r1, r5
   25af8:	4802      	ldr	r0, [pc, #8]	; (25b04 <z_sched_start+0x74>)
}
   25afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   25afe:	f7ff bf93 	b.w	25a28 <z_reschedule>
   25b02:	bf00      	nop
   25b04:	20003844 	.word	0x20003844
   25b08:	00030879 	.word	0x00030879
   25b0c:	0003013d 	.word	0x0003013d

00025b10 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   25b10:	b510      	push	{r4, lr}
	__asm__ volatile(
   25b12:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b16:	f3ef 8411 	mrs	r4, BASEPRI
   25b1a:	f383 8812 	msr	BASEPRI_MAX, r3
   25b1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b22:	481c      	ldr	r0, [pc, #112]	; (25b94 <k_sched_lock+0x84>)
   25b24:	f7fe fd78 	bl	24618 <z_spin_lock_valid>
   25b28:	b938      	cbnz	r0, 25b3a <k_sched_lock+0x2a>
   25b2a:	491b      	ldr	r1, [pc, #108]	; (25b98 <k_sched_lock+0x88>)
   25b2c:	481b      	ldr	r0, [pc, #108]	; (25b9c <k_sched_lock+0x8c>)
   25b2e:	2294      	movs	r2, #148	; 0x94
   25b30:	f005 f80c 	bl	2ab4c <assert_print>
   25b34:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b36:	4818      	ldr	r0, [pc, #96]	; (25b98 <k_sched_lock+0x88>)
   25b38:	e00c      	b.n	25b54 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   25b3a:	4816      	ldr	r0, [pc, #88]	; (25b94 <k_sched_lock+0x84>)
   25b3c:	f7fe fd8a 	bl	24654 <z_spin_lock_set_owner>
   25b40:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25b44:	b143      	cbz	r3, 25b58 <k_sched_lock+0x48>
   25b46:	4916      	ldr	r1, [pc, #88]	; (25ba0 <k_sched_lock+0x90>)
   25b48:	4814      	ldr	r0, [pc, #80]	; (25b9c <k_sched_lock+0x8c>)
   25b4a:	22fd      	movs	r2, #253	; 0xfd
   25b4c:	f004 fffe 	bl	2ab4c <assert_print>
   25b50:	21fd      	movs	r1, #253	; 0xfd
   25b52:	4813      	ldr	r0, [pc, #76]	; (25ba0 <k_sched_lock+0x90>)
   25b54:	f004 fff3 	bl	2ab3e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   25b58:	4b12      	ldr	r3, [pc, #72]	; (25ba4 <k_sched_lock+0x94>)
   25b5a:	689a      	ldr	r2, [r3, #8]
   25b5c:	7bd3      	ldrb	r3, [r2, #15]
   25b5e:	2b01      	cmp	r3, #1
   25b60:	d106      	bne.n	25b70 <k_sched_lock+0x60>
   25b62:	490f      	ldr	r1, [pc, #60]	; (25ba0 <k_sched_lock+0x90>)
   25b64:	480d      	ldr	r0, [pc, #52]	; (25b9c <k_sched_lock+0x8c>)
   25b66:	22fe      	movs	r2, #254	; 0xfe
   25b68:	f004 fff0 	bl	2ab4c <assert_print>
   25b6c:	21fe      	movs	r1, #254	; 0xfe
   25b6e:	e7f0      	b.n	25b52 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   25b70:	3b01      	subs	r3, #1
   25b72:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b74:	4807      	ldr	r0, [pc, #28]	; (25b94 <k_sched_lock+0x84>)
   25b76:	f7fe fd5d 	bl	24634 <z_spin_unlock_valid>
   25b7a:	b930      	cbnz	r0, 25b8a <k_sched_lock+0x7a>
   25b7c:	4906      	ldr	r1, [pc, #24]	; (25b98 <k_sched_lock+0x88>)
   25b7e:	4807      	ldr	r0, [pc, #28]	; (25b9c <k_sched_lock+0x8c>)
   25b80:	22c2      	movs	r2, #194	; 0xc2
   25b82:	f004 ffe3 	bl	2ab4c <assert_print>
   25b86:	21c2      	movs	r1, #194	; 0xc2
   25b88:	e7d5      	b.n	25b36 <k_sched_lock+0x26>
	__asm__ volatile(
   25b8a:	f384 8811 	msr	BASEPRI, r4
   25b8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   25b92:	bd10      	pop	{r4, pc}
   25b94:	20003844 	.word	0x20003844
   25b98:	00030879 	.word	0x00030879
   25b9c:	0003013d 	.word	0x0003013d
   25ba0:	000340e9 	.word	0x000340e9
   25ba4:	200037fc 	.word	0x200037fc

00025ba8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   25ba8:	b510      	push	{r4, lr}
	__asm__ volatile(
   25baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bae:	f3ef 8411 	mrs	r4, BASEPRI
   25bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   25bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25bba:	4820      	ldr	r0, [pc, #128]	; (25c3c <k_sched_unlock+0x94>)
   25bbc:	f7fe fd2c 	bl	24618 <z_spin_lock_valid>
   25bc0:	b938      	cbnz	r0, 25bd2 <k_sched_unlock+0x2a>
   25bc2:	491f      	ldr	r1, [pc, #124]	; (25c40 <k_sched_unlock+0x98>)
   25bc4:	481f      	ldr	r0, [pc, #124]	; (25c44 <k_sched_unlock+0x9c>)
   25bc6:	2294      	movs	r2, #148	; 0x94
   25bc8:	f004 ffc0 	bl	2ab4c <assert_print>
   25bcc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bce:	481c      	ldr	r0, [pc, #112]	; (25c40 <k_sched_unlock+0x98>)
   25bd0:	e00f      	b.n	25bf2 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   25bd2:	481a      	ldr	r0, [pc, #104]	; (25c3c <k_sched_unlock+0x94>)
   25bd4:	f7fe fd3e 	bl	24654 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   25bd8:	4b1b      	ldr	r3, [pc, #108]	; (25c48 <k_sched_unlock+0xa0>)
   25bda:	689a      	ldr	r2, [r3, #8]
   25bdc:	7bd3      	ldrb	r3, [r2, #15]
   25bde:	b953      	cbnz	r3, 25bf6 <k_sched_unlock+0x4e>
   25be0:	491a      	ldr	r1, [pc, #104]	; (25c4c <k_sched_unlock+0xa4>)
   25be2:	4818      	ldr	r0, [pc, #96]	; (25c44 <k_sched_unlock+0x9c>)
   25be4:	f240 32e7 	movw	r2, #999	; 0x3e7
   25be8:	f004 ffb0 	bl	2ab4c <assert_print>
   25bec:	f240 31e7 	movw	r1, #999	; 0x3e7
   25bf0:	4816      	ldr	r0, [pc, #88]	; (25c4c <k_sched_unlock+0xa4>)
   25bf2:	f004 ffa4 	bl	2ab3e <assert_post_action>
   25bf6:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   25bfa:	b140      	cbz	r0, 25c0e <k_sched_unlock+0x66>
   25bfc:	4913      	ldr	r1, [pc, #76]	; (25c4c <k_sched_unlock+0xa4>)
   25bfe:	4811      	ldr	r0, [pc, #68]	; (25c44 <k_sched_unlock+0x9c>)
   25c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25c04:	f004 ffa2 	bl	2ab4c <assert_print>
   25c08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   25c0c:	e7f0      	b.n	25bf0 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   25c0e:	3301      	adds	r3, #1
   25c10:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25c12:	f7ff fddb 	bl	257cc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c16:	4809      	ldr	r0, [pc, #36]	; (25c3c <k_sched_unlock+0x94>)
   25c18:	f7fe fd0c 	bl	24634 <z_spin_unlock_valid>
   25c1c:	b930      	cbnz	r0, 25c2c <k_sched_unlock+0x84>
   25c1e:	4908      	ldr	r1, [pc, #32]	; (25c40 <k_sched_unlock+0x98>)
   25c20:	4808      	ldr	r0, [pc, #32]	; (25c44 <k_sched_unlock+0x9c>)
   25c22:	22c2      	movs	r2, #194	; 0xc2
   25c24:	f004 ff92 	bl	2ab4c <assert_print>
   25c28:	21c2      	movs	r1, #194	; 0xc2
   25c2a:	e7d0      	b.n	25bce <k_sched_unlock+0x26>
	__asm__ volatile(
   25c2c:	f384 8811 	msr	BASEPRI, r4
   25c30:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   25c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25c38:	f009 b857 	b.w	2ecea <z_reschedule_unlocked>
   25c3c:	20003844 	.word	0x20003844
   25c40:	00030879 	.word	0x00030879
   25c44:	0003013d 	.word	0x0003013d
   25c48:	200037fc 	.word	0x200037fc
   25c4c:	000340c7 	.word	0x000340c7

00025c50 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   25c50:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25c52:	4b0b      	ldr	r3, [pc, #44]	; (25c80 <z_priq_dumb_remove+0x30>)
   25c54:	4299      	cmp	r1, r3
   25c56:	d10a      	bne.n	25c6e <z_priq_dumb_remove+0x1e>
   25c58:	490a      	ldr	r1, [pc, #40]	; (25c84 <z_priq_dumb_remove+0x34>)
   25c5a:	480b      	ldr	r0, [pc, #44]	; (25c88 <z_priq_dumb_remove+0x38>)
   25c5c:	f240 4273 	movw	r2, #1139	; 0x473
   25c60:	f004 ff74 	bl	2ab4c <assert_print>
   25c64:	4807      	ldr	r0, [pc, #28]	; (25c84 <z_priq_dumb_remove+0x34>)
   25c66:	f240 4173 	movw	r1, #1139	; 0x473
   25c6a:	f004 ff68 	bl	2ab3e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   25c6e:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   25c72:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25c74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25c76:	2300      	movs	r3, #0
	node->prev = NULL;
   25c78:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   25c7c:	bd08      	pop	{r3, pc}
   25c7e:	bf00      	nop
   25c80:	200029c0 	.word	0x200029c0
   25c84:	000340c7 	.word	0x000340c7
   25c88:	0003013d 	.word	0x0003013d

00025c8c <move_thread_to_end_of_prio_q>:
{
   25c8c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   25c8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25c92:	7b43      	ldrb	r3, [r0, #13]
   25c94:	2a00      	cmp	r2, #0
{
   25c96:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   25c98:	da06      	bge.n	25ca8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25c9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25ca0:	4601      	mov	r1, r0
   25ca2:	481d      	ldr	r0, [pc, #116]	; (25d18 <move_thread_to_end_of_prio_q+0x8c>)
   25ca4:	f7ff ffd4 	bl	25c50 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25ca8:	7b63      	ldrb	r3, [r4, #13]
   25caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25cae:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25cb0:	4b1a      	ldr	r3, [pc, #104]	; (25d1c <move_thread_to_end_of_prio_q+0x90>)
   25cb2:	429c      	cmp	r4, r3
   25cb4:	d108      	bne.n	25cc8 <move_thread_to_end_of_prio_q+0x3c>
   25cb6:	491a      	ldr	r1, [pc, #104]	; (25d20 <move_thread_to_end_of_prio_q+0x94>)
   25cb8:	481a      	ldr	r0, [pc, #104]	; (25d24 <move_thread_to_end_of_prio_q+0x98>)
   25cba:	22ba      	movs	r2, #186	; 0xba
   25cbc:	f004 ff46 	bl	2ab4c <assert_print>
   25cc0:	4817      	ldr	r0, [pc, #92]	; (25d20 <move_thread_to_end_of_prio_q+0x94>)
   25cc2:	21ba      	movs	r1, #186	; 0xba
   25cc4:	f004 ff3b 	bl	2ab3e <assert_post_action>
	return list->head == list;
   25cc8:	4a17      	ldr	r2, [pc, #92]	; (25d28 <move_thread_to_end_of_prio_q+0x9c>)
   25cca:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   25ccc:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   25cce:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25cd2:	428b      	cmp	r3, r1
   25cd4:	bf08      	it	eq
   25cd6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25cd8:	b923      	cbnz	r3, 25ce4 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   25cda:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   25cde:	6004      	str	r4, [r0, #0]
	list->tail = node;
   25ce0:	6254      	str	r4, [r2, #36]	; 0x24
}
   25ce2:	e00c      	b.n	25cfe <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   25ce4:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25ce8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25cec:	42b5      	cmp	r5, r6
   25cee:	d00e      	beq.n	25d0e <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25cf0:	42ae      	cmp	r6, r5
   25cf2:	dd0c      	ble.n	25d0e <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   25cf4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   25cf6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   25cfa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   25cfc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   25cfe:	6890      	ldr	r0, [r2, #8]
   25d00:	1b03      	subs	r3, r0, r4
   25d02:	4258      	negs	r0, r3
}
   25d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25d08:	4158      	adcs	r0, r3
   25d0a:	f7ff bd5f 	b.w	257cc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25d0e:	4298      	cmp	r0, r3
   25d10:	d0e3      	beq.n	25cda <move_thread_to_end_of_prio_q+0x4e>
   25d12:	681b      	ldr	r3, [r3, #0]
   25d14:	e7e0      	b.n	25cd8 <move_thread_to_end_of_prio_q+0x4c>
   25d16:	bf00      	nop
   25d18:	2000381c 	.word	0x2000381c
   25d1c:	200029c0 	.word	0x200029c0
   25d20:	000340c7 	.word	0x000340c7
   25d24:	0003013d 	.word	0x0003013d
   25d28:	200037fc 	.word	0x200037fc

00025d2c <z_time_slice>:
{
   25d2c:	b570      	push	{r4, r5, r6, lr}
   25d2e:	4605      	mov	r5, r0
	__asm__ volatile(
   25d30:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d34:	f3ef 8611 	mrs	r6, BASEPRI
   25d38:	f383 8812 	msr	BASEPRI_MAX, r3
   25d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d40:	4824      	ldr	r0, [pc, #144]	; (25dd4 <z_time_slice+0xa8>)
   25d42:	f7fe fc69 	bl	24618 <z_spin_lock_valid>
   25d46:	b940      	cbnz	r0, 25d5a <z_time_slice+0x2e>
   25d48:	4923      	ldr	r1, [pc, #140]	; (25dd8 <z_time_slice+0xac>)
   25d4a:	4824      	ldr	r0, [pc, #144]	; (25ddc <z_time_slice+0xb0>)
   25d4c:	2294      	movs	r2, #148	; 0x94
   25d4e:	f004 fefd 	bl	2ab4c <assert_print>
   25d52:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d54:	4820      	ldr	r0, [pc, #128]	; (25dd8 <z_time_slice+0xac>)
   25d56:	f004 fef2 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   25d5a:	481e      	ldr	r0, [pc, #120]	; (25dd4 <z_time_slice+0xa8>)
   25d5c:	f7fe fc7a 	bl	24654 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   25d60:	4b1f      	ldr	r3, [pc, #124]	; (25de0 <z_time_slice+0xb4>)
   25d62:	4a20      	ldr	r2, [pc, #128]	; (25de4 <z_time_slice+0xb8>)
   25d64:	689c      	ldr	r4, [r3, #8]
   25d66:	6811      	ldr	r1, [r2, #0]
   25d68:	428c      	cmp	r4, r1
   25d6a:	d10d      	bne.n	25d88 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   25d6c:	4620      	mov	r0, r4
   25d6e:	f7ff fd19 	bl	257a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d72:	4818      	ldr	r0, [pc, #96]	; (25dd4 <z_time_slice+0xa8>)
   25d74:	f7fe fc5e 	bl	24634 <z_spin_unlock_valid>
   25d78:	bb30      	cbnz	r0, 25dc8 <z_time_slice+0x9c>
   25d7a:	4917      	ldr	r1, [pc, #92]	; (25dd8 <z_time_slice+0xac>)
   25d7c:	4817      	ldr	r0, [pc, #92]	; (25ddc <z_time_slice+0xb0>)
   25d7e:	22c2      	movs	r2, #194	; 0xc2
   25d80:	f004 fee4 	bl	2ab4c <assert_print>
   25d84:	21c2      	movs	r1, #194	; 0xc2
   25d86:	e7e5      	b.n	25d54 <z_time_slice+0x28>
	pending_current = NULL;
   25d88:	2100      	movs	r1, #0
   25d8a:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   25d8c:	4a16      	ldr	r2, [pc, #88]	; (25de8 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   25d8e:	6812      	ldr	r2, [r2, #0]
   25d90:	b1c2      	cbz	r2, 25dc4 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   25d92:	89e2      	ldrh	r2, [r4, #14]
   25d94:	2a7f      	cmp	r2, #127	; 0x7f
   25d96:	d815      	bhi.n	25dc4 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   25d98:	7b62      	ldrb	r2, [r4, #13]
   25d9a:	06d2      	lsls	r2, r2, #27
   25d9c:	d112      	bne.n	25dc4 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25d9e:	4a13      	ldr	r2, [pc, #76]	; (25dec <z_time_slice+0xc0>)
   25da0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   25da4:	6812      	ldr	r2, [r2, #0]
   25da6:	4291      	cmp	r1, r2
   25da8:	db0c      	blt.n	25dc4 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   25daa:	4a11      	ldr	r2, [pc, #68]	; (25df0 <z_time_slice+0xc4>)
   25dac:	4294      	cmp	r4, r2
   25dae:	d009      	beq.n	25dc4 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   25db0:	691a      	ldr	r2, [r3, #16]
   25db2:	42aa      	cmp	r2, r5
   25db4:	dc03      	bgt.n	25dbe <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   25db6:	4620      	mov	r0, r4
   25db8:	f7ff ff68 	bl	25c8c <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   25dbc:	e7d6      	b.n	25d6c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   25dbe:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   25dc0:	611a      	str	r2, [r3, #16]
   25dc2:	e7d6      	b.n	25d72 <z_time_slice+0x46>
   25dc4:	2200      	movs	r2, #0
   25dc6:	e7fb      	b.n	25dc0 <z_time_slice+0x94>
	__asm__ volatile(
   25dc8:	f386 8811 	msr	BASEPRI, r6
   25dcc:	f3bf 8f6f 	isb	sy
}
   25dd0:	bd70      	pop	{r4, r5, r6, pc}
   25dd2:	bf00      	nop
   25dd4:	20003844 	.word	0x20003844
   25dd8:	00030879 	.word	0x00030879
   25ddc:	0003013d 	.word	0x0003013d
   25de0:	200037fc 	.word	0x200037fc
   25de4:	20003838 	.word	0x20003838
   25de8:	20003840 	.word	0x20003840
   25dec:	2000383c 	.word	0x2000383c
   25df0:	200029c0 	.word	0x200029c0

00025df4 <unready_thread>:
{
   25df4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   25df6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   25dfa:	7b43      	ldrb	r3, [r0, #13]
   25dfc:	2a00      	cmp	r2, #0
{
   25dfe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   25e00:	da06      	bge.n	25e10 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25e06:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25e08:	4601      	mov	r1, r0
   25e0a:	4806      	ldr	r0, [pc, #24]	; (25e24 <unready_thread+0x30>)
   25e0c:	f7ff ff20 	bl	25c50 <z_priq_dumb_remove>
	update_cache(thread == _current);
   25e10:	4b05      	ldr	r3, [pc, #20]	; (25e28 <unready_thread+0x34>)
   25e12:	6898      	ldr	r0, [r3, #8]
   25e14:	1b03      	subs	r3, r0, r4
   25e16:	4258      	negs	r0, r3
}
   25e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   25e1c:	4158      	adcs	r0, r3
   25e1e:	f7ff bcd5 	b.w	257cc <update_cache>
   25e22:	bf00      	nop
   25e24:	2000381c 	.word	0x2000381c
   25e28:	200037fc 	.word	0x200037fc

00025e2c <add_to_waitq_locked>:
{
   25e2c:	b538      	push	{r3, r4, r5, lr}
   25e2e:	4604      	mov	r4, r0
   25e30:	460d      	mov	r5, r1
	unready_thread(thread);
   25e32:	f7ff ffdf 	bl	25df4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25e36:	7b63      	ldrb	r3, [r4, #13]
   25e38:	f043 0302 	orr.w	r3, r3, #2
   25e3c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   25e3e:	b345      	cbz	r5, 25e92 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25e40:	4b14      	ldr	r3, [pc, #80]	; (25e94 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   25e42:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25e44:	429c      	cmp	r4, r3
   25e46:	d108      	bne.n	25e5a <add_to_waitq_locked+0x2e>
   25e48:	4913      	ldr	r1, [pc, #76]	; (25e98 <add_to_waitq_locked+0x6c>)
   25e4a:	4814      	ldr	r0, [pc, #80]	; (25e9c <add_to_waitq_locked+0x70>)
   25e4c:	22ba      	movs	r2, #186	; 0xba
   25e4e:	f004 fe7d 	bl	2ab4c <assert_print>
   25e52:	4811      	ldr	r0, [pc, #68]	; (25e98 <add_to_waitq_locked+0x6c>)
   25e54:	21ba      	movs	r1, #186	; 0xba
   25e56:	f004 fe72 	bl	2ab3e <assert_post_action>
	return list->head == list;
   25e5a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e5c:	429d      	cmp	r5, r3
   25e5e:	d109      	bne.n	25e74 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   25e60:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   25e62:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   25e66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25e68:	606c      	str	r4, [r5, #4]
}
   25e6a:	e012      	b.n	25e92 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   25e6c:	686a      	ldr	r2, [r5, #4]
   25e6e:	4293      	cmp	r3, r2
   25e70:	d0f6      	beq.n	25e60 <add_to_waitq_locked+0x34>
   25e72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25e74:	2b00      	cmp	r3, #0
   25e76:	d0f3      	beq.n	25e60 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   25e78:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25e7c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   25e80:	428a      	cmp	r2, r1
   25e82:	d0f3      	beq.n	25e6c <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25e84:	4291      	cmp	r1, r2
   25e86:	ddf1      	ble.n	25e6c <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   25e88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25e8a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25e8e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25e90:	605c      	str	r4, [r3, #4]
}
   25e92:	bd38      	pop	{r3, r4, r5, pc}
   25e94:	200029c0 	.word	0x200029c0
   25e98:	000340c7 	.word	0x000340c7
   25e9c:	0003013d 	.word	0x0003013d

00025ea0 <pend_locked>:
{
   25ea0:	b570      	push	{r4, r5, r6, lr}
   25ea2:	4615      	mov	r5, r2
   25ea4:	461c      	mov	r4, r3
   25ea6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   25ea8:	f7ff ffc0 	bl	25e2c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25eac:	f1b4 3fff 	cmp.w	r4, #4294967295
   25eb0:	bf08      	it	eq
   25eb2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   25eb6:	d008      	beq.n	25eca <pend_locked+0x2a>
   25eb8:	462a      	mov	r2, r5
   25eba:	4623      	mov	r3, r4
   25ebc:	f106 0018 	add.w	r0, r6, #24
   25ec0:	4902      	ldr	r1, [pc, #8]	; (25ecc <pend_locked+0x2c>)
}
   25ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25ec6:	f000 bd0b 	b.w	268e0 <z_add_timeout>
   25eca:	bd70      	pop	{r4, r5, r6, pc}
   25ecc:	000261d5 	.word	0x000261d5

00025ed0 <z_pend_curr>:
{
   25ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   25ed4:	f8df a094 	ldr.w	sl, [pc, #148]	; 25f6c <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   25ed8:	4c25      	ldr	r4, [pc, #148]	; (25f70 <z_pend_curr+0xa0>)
	pending_current = _current;
   25eda:	4b26      	ldr	r3, [pc, #152]	; (25f74 <z_pend_curr+0xa4>)
{
   25edc:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   25ede:	42a0      	cmp	r0, r4
	pending_current = _current;
   25ee0:	f8da 2008 	ldr.w	r2, [sl, #8]
   25ee4:	601a      	str	r2, [r3, #0]
{
   25ee6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   25eea:	4605      	mov	r5, r0
   25eec:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   25eee:	d10a      	bne.n	25f06 <z_pend_curr+0x36>
   25ef0:	4921      	ldr	r1, [pc, #132]	; (25f78 <z_pend_curr+0xa8>)
   25ef2:	4822      	ldr	r0, [pc, #136]	; (25f7c <z_pend_curr+0xac>)
   25ef4:	f240 324e 	movw	r2, #846	; 0x34e
   25ef8:	f004 fe28 	bl	2ab4c <assert_print>
   25efc:	481e      	ldr	r0, [pc, #120]	; (25f78 <z_pend_curr+0xa8>)
   25efe:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f02:	f004 fe1c 	bl	2ab3e <assert_post_action>
	__asm__ volatile(
   25f06:	f04f 0240 	mov.w	r2, #64	; 0x40
   25f0a:	f3ef 8311 	mrs	r3, BASEPRI
   25f0e:	f382 8812 	msr	BASEPRI_MAX, r2
   25f12:	f3bf 8f6f 	isb	sy
   25f16:	4620      	mov	r0, r4
   25f18:	f7fe fb7e 	bl	24618 <z_spin_lock_valid>
   25f1c:	b938      	cbnz	r0, 25f2e <z_pend_curr+0x5e>
   25f1e:	4918      	ldr	r1, [pc, #96]	; (25f80 <z_pend_curr+0xb0>)
   25f20:	4816      	ldr	r0, [pc, #88]	; (25f7c <z_pend_curr+0xac>)
   25f22:	2294      	movs	r2, #148	; 0x94
   25f24:	f004 fe12 	bl	2ab4c <assert_print>
   25f28:	2194      	movs	r1, #148	; 0x94
   25f2a:	4815      	ldr	r0, [pc, #84]	; (25f80 <z_pend_curr+0xb0>)
   25f2c:	e7e9      	b.n	25f02 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   25f2e:	4620      	mov	r0, r4
   25f30:	f7fe fb90 	bl	24654 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   25f34:	f8da 0008 	ldr.w	r0, [sl, #8]
   25f38:	4642      	mov	r2, r8
   25f3a:	464b      	mov	r3, r9
   25f3c:	4639      	mov	r1, r7
   25f3e:	f7ff ffaf 	bl	25ea0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25f42:	4628      	mov	r0, r5
   25f44:	f7fe fb76 	bl	24634 <z_spin_unlock_valid>
   25f48:	b930      	cbnz	r0, 25f58 <z_pend_curr+0x88>
   25f4a:	490d      	ldr	r1, [pc, #52]	; (25f80 <z_pend_curr+0xb0>)
   25f4c:	480b      	ldr	r0, [pc, #44]	; (25f7c <z_pend_curr+0xac>)
   25f4e:	22e1      	movs	r2, #225	; 0xe1
   25f50:	f004 fdfc 	bl	2ab4c <assert_print>
   25f54:	21e1      	movs	r1, #225	; 0xe1
   25f56:	e7e8      	b.n	25f2a <z_pend_curr+0x5a>
   25f58:	4620      	mov	r0, r4
   25f5a:	f7fe fb6b 	bl	24634 <z_spin_unlock_valid>
   25f5e:	2800      	cmp	r0, #0
   25f60:	d0f3      	beq.n	25f4a <z_pend_curr+0x7a>
   25f62:	4630      	mov	r0, r6
}
   25f64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25f68:	f7ee beea 	b.w	14d40 <arch_swap>
   25f6c:	200037fc 	.word	0x200037fc
   25f70:	20003844 	.word	0x20003844
   25f74:	20003838 	.word	0x20003838
   25f78:	000340c7 	.word	0x000340c7
   25f7c:	0003013d 	.word	0x0003013d
   25f80:	00030879 	.word	0x00030879

00025f84 <z_set_prio>:
{
   25f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25f88:	4604      	mov	r4, r0
   25f8a:	460e      	mov	r6, r1
   25f8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f90:	f3ef 8911 	mrs	r9, BASEPRI
   25f94:	f383 8812 	msr	BASEPRI_MAX, r3
   25f98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25f9c:	4831      	ldr	r0, [pc, #196]	; (26064 <z_set_prio+0xe0>)
   25f9e:	f7fe fb3b 	bl	24618 <z_spin_lock_valid>
   25fa2:	4607      	mov	r7, r0
   25fa4:	b938      	cbnz	r0, 25fb6 <z_set_prio+0x32>
   25fa6:	4930      	ldr	r1, [pc, #192]	; (26068 <z_set_prio+0xe4>)
   25fa8:	4830      	ldr	r0, [pc, #192]	; (2606c <z_set_prio+0xe8>)
   25faa:	2294      	movs	r2, #148	; 0x94
   25fac:	f004 fdce 	bl	2ab4c <assert_print>
   25fb0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fb2:	482d      	ldr	r0, [pc, #180]	; (26068 <z_set_prio+0xe4>)
   25fb4:	e020      	b.n	25ff8 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   25fb6:	482b      	ldr	r0, [pc, #172]	; (26064 <z_set_prio+0xe0>)
   25fb8:	f7fe fb4c 	bl	24654 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   25fbc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25fbe:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   25fc0:	b276      	sxtb	r6, r6
   25fc2:	d11b      	bne.n	25ffc <z_set_prio+0x78>
	return node->next != NULL;
   25fc4:	69a5      	ldr	r5, [r4, #24]
   25fc6:	b9cd      	cbnz	r5, 25ffc <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   25fc8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 26070 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25fd0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25fd2:	4621      	mov	r1, r4
   25fd4:	4640      	mov	r0, r8
   25fd6:	f7ff fe3b 	bl	25c50 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25fda:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   25fdc:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25fe2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25fe4:	4b23      	ldr	r3, [pc, #140]	; (26074 <z_set_prio+0xf0>)
   25fe6:	429c      	cmp	r4, r3
   25fe8:	d115      	bne.n	26016 <z_set_prio+0x92>
   25fea:	4923      	ldr	r1, [pc, #140]	; (26078 <z_set_prio+0xf4>)
   25fec:	481f      	ldr	r0, [pc, #124]	; (2606c <z_set_prio+0xe8>)
   25fee:	22ba      	movs	r2, #186	; 0xba
   25ff0:	f004 fdac 	bl	2ab4c <assert_print>
   25ff4:	4820      	ldr	r0, [pc, #128]	; (26078 <z_set_prio+0xf4>)
   25ff6:	21ba      	movs	r1, #186	; 0xba
   25ff8:	f004 fda1 	bl	2ab3e <assert_post_action>
			thread->base.prio = prio;
   25ffc:	73a6      	strb	r6, [r4, #14]
   25ffe:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26000:	4818      	ldr	r0, [pc, #96]	; (26064 <z_set_prio+0xe0>)
   26002:	f7fe fb17 	bl	24634 <z_spin_unlock_valid>
   26006:	bb30      	cbnz	r0, 26056 <z_set_prio+0xd2>
   26008:	4917      	ldr	r1, [pc, #92]	; (26068 <z_set_prio+0xe4>)
   2600a:	4818      	ldr	r0, [pc, #96]	; (2606c <z_set_prio+0xe8>)
   2600c:	22c2      	movs	r2, #194	; 0xc2
   2600e:	f004 fd9d 	bl	2ab4c <assert_print>
   26012:	21c2      	movs	r1, #194	; 0xc2
   26014:	e7cd      	b.n	25fb2 <z_set_prio+0x2e>
	return list->head == list;
   26016:	4643      	mov	r3, r8
   26018:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2601c:	4542      	cmp	r2, r8
   2601e:	bf18      	it	ne
   26020:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   26022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26024:	b925      	cbnz	r5, 26030 <z_set_prio+0xac>
	node->prev = tail;
   26026:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2602a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2602c:	625c      	str	r4, [r3, #36]	; 0x24
}
   2602e:	e00a      	b.n	26046 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   26030:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   26034:	428e      	cmp	r6, r1
   26036:	d00a      	beq.n	2604e <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   26038:	42b1      	cmp	r1, r6
   2603a:	dd08      	ble.n	2604e <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   2603c:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2603e:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   26042:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   26044:	606c      	str	r4, [r5, #4]
			update_cache(1);
   26046:	2001      	movs	r0, #1
   26048:	f7ff fbc0 	bl	257cc <update_cache>
   2604c:	e7d8      	b.n	26000 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   2604e:	42aa      	cmp	r2, r5
   26050:	d0e9      	beq.n	26026 <z_set_prio+0xa2>
   26052:	682d      	ldr	r5, [r5, #0]
   26054:	e7e6      	b.n	26024 <z_set_prio+0xa0>
	__asm__ volatile(
   26056:	f389 8811 	msr	BASEPRI, r9
   2605a:	f3bf 8f6f 	isb	sy
}
   2605e:	4638      	mov	r0, r7
   26060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26064:	20003844 	.word	0x20003844
   26068:	00030879 	.word	0x00030879
   2606c:	0003013d 	.word	0x0003013d
   26070:	2000381c 	.word	0x2000381c
   26074:	200029c0 	.word	0x200029c0
   26078:	000340c7 	.word	0x000340c7

0002607c <z_impl_k_thread_suspend>:
{
   2607c:	b570      	push	{r4, r5, r6, lr}
   2607e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26080:	3018      	adds	r0, #24
   26082:	f000 fcd9 	bl	26a38 <z_abort_timeout>
	__asm__ volatile(
   26086:	f04f 0340 	mov.w	r3, #64	; 0x40
   2608a:	f3ef 8611 	mrs	r6, BASEPRI
   2608e:	f383 8812 	msr	BASEPRI_MAX, r3
   26092:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26096:	481f      	ldr	r0, [pc, #124]	; (26114 <z_impl_k_thread_suspend+0x98>)
   26098:	f7fe fabe 	bl	24618 <z_spin_lock_valid>
   2609c:	b940      	cbnz	r0, 260b0 <z_impl_k_thread_suspend+0x34>
   2609e:	491e      	ldr	r1, [pc, #120]	; (26118 <z_impl_k_thread_suspend+0x9c>)
   260a0:	481e      	ldr	r0, [pc, #120]	; (2611c <z_impl_k_thread_suspend+0xa0>)
   260a2:	2294      	movs	r2, #148	; 0x94
   260a4:	f004 fd52 	bl	2ab4c <assert_print>
   260a8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260aa:	481b      	ldr	r0, [pc, #108]	; (26118 <z_impl_k_thread_suspend+0x9c>)
   260ac:	f004 fd47 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   260b0:	4818      	ldr	r0, [pc, #96]	; (26114 <z_impl_k_thread_suspend+0x98>)
   260b2:	f7fe facf 	bl	24654 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   260b6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   260ba:	7b63      	ldrb	r3, [r4, #13]
   260bc:	2a00      	cmp	r2, #0
   260be:	da06      	bge.n	260ce <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   260c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   260c4:	4816      	ldr	r0, [pc, #88]	; (26120 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   260c6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   260c8:	4621      	mov	r1, r4
   260ca:	f7ff fdc1 	bl	25c50 <z_priq_dumb_remove>
		update_cache(thread == _current);
   260ce:	4d15      	ldr	r5, [pc, #84]	; (26124 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   260d0:	7b63      	ldrb	r3, [r4, #13]
   260d2:	68a8      	ldr	r0, [r5, #8]
   260d4:	f043 0310 	orr.w	r3, r3, #16
   260d8:	7363      	strb	r3, [r4, #13]
   260da:	1b03      	subs	r3, r0, r4
   260dc:	4258      	negs	r0, r3
   260de:	4158      	adcs	r0, r3
   260e0:	f7ff fb74 	bl	257cc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260e4:	480b      	ldr	r0, [pc, #44]	; (26114 <z_impl_k_thread_suspend+0x98>)
   260e6:	f7fe faa5 	bl	24634 <z_spin_unlock_valid>
   260ea:	b930      	cbnz	r0, 260fa <z_impl_k_thread_suspend+0x7e>
   260ec:	490a      	ldr	r1, [pc, #40]	; (26118 <z_impl_k_thread_suspend+0x9c>)
   260ee:	480b      	ldr	r0, [pc, #44]	; (2611c <z_impl_k_thread_suspend+0xa0>)
   260f0:	22c2      	movs	r2, #194	; 0xc2
   260f2:	f004 fd2b 	bl	2ab4c <assert_print>
   260f6:	21c2      	movs	r1, #194	; 0xc2
   260f8:	e7d7      	b.n	260aa <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   260fa:	f386 8811 	msr	BASEPRI, r6
   260fe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26102:	68ab      	ldr	r3, [r5, #8]
   26104:	42a3      	cmp	r3, r4
   26106:	d103      	bne.n	26110 <z_impl_k_thread_suspend+0x94>
}
   26108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2610c:	f008 bded 	b.w	2ecea <z_reschedule_unlocked>
}
   26110:	bd70      	pop	{r4, r5, r6, pc}
   26112:	bf00      	nop
   26114:	20003844 	.word	0x20003844
   26118:	00030879 	.word	0x00030879
   2611c:	0003013d 	.word	0x0003013d
   26120:	2000381c 	.word	0x2000381c
   26124:	200037fc 	.word	0x200037fc

00026128 <unpend_thread_no_timeout>:
{
   26128:	b510      	push	{r4, lr}
   2612a:	4604      	mov	r4, r0
   2612c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2612e:	b950      	cbnz	r0, 26146 <unpend_thread_no_timeout+0x1e>
   26130:	490a      	ldr	r1, [pc, #40]	; (2615c <unpend_thread_no_timeout+0x34>)
   26132:	480b      	ldr	r0, [pc, #44]	; (26160 <unpend_thread_no_timeout+0x38>)
   26134:	f240 22d6 	movw	r2, #726	; 0x2d6
   26138:	f004 fd08 	bl	2ab4c <assert_print>
   2613c:	4807      	ldr	r0, [pc, #28]	; (2615c <unpend_thread_no_timeout+0x34>)
   2613e:	f240 21d6 	movw	r1, #726	; 0x2d6
   26142:	f004 fcfc 	bl	2ab3e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26146:	4621      	mov	r1, r4
   26148:	f7ff fd82 	bl	25c50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2614c:	7b63      	ldrb	r3, [r4, #13]
   2614e:	f023 0302 	bic.w	r3, r3, #2
   26152:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26154:	2300      	movs	r3, #0
   26156:	60a3      	str	r3, [r4, #8]
}
   26158:	bd10      	pop	{r4, pc}
   2615a:	bf00      	nop
   2615c:	000340c7 	.word	0x000340c7
   26160:	0003013d 	.word	0x0003013d

00026164 <z_unpend_thread>:
{
   26164:	b538      	push	{r3, r4, r5, lr}
   26166:	4604      	mov	r4, r0
	__asm__ volatile(
   26168:	f04f 0340 	mov.w	r3, #64	; 0x40
   2616c:	f3ef 8511 	mrs	r5, BASEPRI
   26170:	f383 8812 	msr	BASEPRI_MAX, r3
   26174:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26178:	4813      	ldr	r0, [pc, #76]	; (261c8 <z_unpend_thread+0x64>)
   2617a:	f7fe fa4d 	bl	24618 <z_spin_lock_valid>
   2617e:	b940      	cbnz	r0, 26192 <z_unpend_thread+0x2e>
   26180:	4912      	ldr	r1, [pc, #72]	; (261cc <z_unpend_thread+0x68>)
   26182:	4813      	ldr	r0, [pc, #76]	; (261d0 <z_unpend_thread+0x6c>)
   26184:	2294      	movs	r2, #148	; 0x94
   26186:	f004 fce1 	bl	2ab4c <assert_print>
   2618a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2618c:	480f      	ldr	r0, [pc, #60]	; (261cc <z_unpend_thread+0x68>)
   2618e:	f004 fcd6 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26192:	480d      	ldr	r0, [pc, #52]	; (261c8 <z_unpend_thread+0x64>)
   26194:	f7fe fa5e 	bl	24654 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   26198:	4620      	mov	r0, r4
   2619a:	f7ff ffc5 	bl	26128 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2619e:	480a      	ldr	r0, [pc, #40]	; (261c8 <z_unpend_thread+0x64>)
   261a0:	f7fe fa48 	bl	24634 <z_spin_unlock_valid>
   261a4:	b930      	cbnz	r0, 261b4 <z_unpend_thread+0x50>
   261a6:	4909      	ldr	r1, [pc, #36]	; (261cc <z_unpend_thread+0x68>)
   261a8:	4809      	ldr	r0, [pc, #36]	; (261d0 <z_unpend_thread+0x6c>)
   261aa:	22c2      	movs	r2, #194	; 0xc2
   261ac:	f004 fcce 	bl	2ab4c <assert_print>
   261b0:	21c2      	movs	r1, #194	; 0xc2
   261b2:	e7eb      	b.n	2618c <z_unpend_thread+0x28>
	__asm__ volatile(
   261b4:	f385 8811 	msr	BASEPRI, r5
   261b8:	f3bf 8f6f 	isb	sy
   261bc:	f104 0018 	add.w	r0, r4, #24
}
   261c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   261c4:	f000 bc38 	b.w	26a38 <z_abort_timeout>
   261c8:	20003844 	.word	0x20003844
   261cc:	00030879 	.word	0x00030879
   261d0:	0003013d 	.word	0x0003013d

000261d4 <z_thread_timeout>:
{
   261d4:	b570      	push	{r4, r5, r6, lr}
   261d6:	4604      	mov	r4, r0
	__asm__ volatile(
   261d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   261dc:	f3ef 8611 	mrs	r6, BASEPRI
   261e0:	f383 8812 	msr	BASEPRI_MAX, r3
   261e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261e8:	481a      	ldr	r0, [pc, #104]	; (26254 <z_thread_timeout+0x80>)
   261ea:	f7fe fa15 	bl	24618 <z_spin_lock_valid>
   261ee:	b940      	cbnz	r0, 26202 <z_thread_timeout+0x2e>
   261f0:	4919      	ldr	r1, [pc, #100]	; (26258 <z_thread_timeout+0x84>)
   261f2:	481a      	ldr	r0, [pc, #104]	; (2625c <z_thread_timeout+0x88>)
   261f4:	2294      	movs	r2, #148	; 0x94
   261f6:	f004 fca9 	bl	2ab4c <assert_print>
   261fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261fc:	4816      	ldr	r0, [pc, #88]	; (26258 <z_thread_timeout+0x84>)
   261fe:	f004 fc9e 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26202:	4814      	ldr	r0, [pc, #80]	; (26254 <z_thread_timeout+0x80>)
   26204:	f7fe fa26 	bl	24654 <z_spin_lock_set_owner>
		if (!killed) {
   26208:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2620c:	f013 0f28 	tst.w	r3, #40	; 0x28
   26210:	d110      	bne.n	26234 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   26212:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   26216:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2621a:	b113      	cbz	r3, 26222 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   2621c:	4628      	mov	r0, r5
   2621e:	f7ff ff83 	bl	26128 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26222:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26226:	f023 0314 	bic.w	r3, r3, #20
   2622a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2622e:	4628      	mov	r0, r5
   26230:	f7ff faf8 	bl	25824 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26234:	4807      	ldr	r0, [pc, #28]	; (26254 <z_thread_timeout+0x80>)
   26236:	f7fe f9fd 	bl	24634 <z_spin_unlock_valid>
   2623a:	b930      	cbnz	r0, 2624a <z_thread_timeout+0x76>
   2623c:	4906      	ldr	r1, [pc, #24]	; (26258 <z_thread_timeout+0x84>)
   2623e:	4807      	ldr	r0, [pc, #28]	; (2625c <z_thread_timeout+0x88>)
   26240:	22c2      	movs	r2, #194	; 0xc2
   26242:	f004 fc83 	bl	2ab4c <assert_print>
   26246:	21c2      	movs	r1, #194	; 0xc2
   26248:	e7d8      	b.n	261fc <z_thread_timeout+0x28>
	__asm__ volatile(
   2624a:	f386 8811 	msr	BASEPRI, r6
   2624e:	f3bf 8f6f 	isb	sy
}
   26252:	bd70      	pop	{r4, r5, r6, pc}
   26254:	20003844 	.word	0x20003844
   26258:	00030879 	.word	0x00030879
   2625c:	0003013d 	.word	0x0003013d

00026260 <z_unpend1_no_timeout>:
{
   26260:	b570      	push	{r4, r5, r6, lr}
   26262:	4605      	mov	r5, r0
	__asm__ volatile(
   26264:	f04f 0340 	mov.w	r3, #64	; 0x40
   26268:	f3ef 8611 	mrs	r6, BASEPRI
   2626c:	f383 8812 	msr	BASEPRI_MAX, r3
   26270:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26274:	4814      	ldr	r0, [pc, #80]	; (262c8 <z_unpend1_no_timeout+0x68>)
   26276:	f7fe f9cf 	bl	24618 <z_spin_lock_valid>
   2627a:	b940      	cbnz	r0, 2628e <z_unpend1_no_timeout+0x2e>
   2627c:	4913      	ldr	r1, [pc, #76]	; (262cc <z_unpend1_no_timeout+0x6c>)
   2627e:	4814      	ldr	r0, [pc, #80]	; (262d0 <z_unpend1_no_timeout+0x70>)
   26280:	2294      	movs	r2, #148	; 0x94
   26282:	f004 fc63 	bl	2ab4c <assert_print>
   26286:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26288:	4810      	ldr	r0, [pc, #64]	; (262cc <z_unpend1_no_timeout+0x6c>)
   2628a:	f004 fc58 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   2628e:	480e      	ldr	r0, [pc, #56]	; (262c8 <z_unpend1_no_timeout+0x68>)
   26290:	f7fe f9e0 	bl	24654 <z_spin_lock_set_owner>
	return list->head == list;
   26294:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26296:	42a5      	cmp	r5, r4
   26298:	d00e      	beq.n	262b8 <z_unpend1_no_timeout+0x58>
		if (thread != NULL) {
   2629a:	b114      	cbz	r4, 262a2 <z_unpend1_no_timeout+0x42>
			unpend_thread_no_timeout(thread);
   2629c:	4620      	mov	r0, r4
   2629e:	f7ff ff43 	bl	26128 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262a2:	4809      	ldr	r0, [pc, #36]	; (262c8 <z_unpend1_no_timeout+0x68>)
   262a4:	f7fe f9c6 	bl	24634 <z_spin_unlock_valid>
   262a8:	b940      	cbnz	r0, 262bc <z_unpend1_no_timeout+0x5c>
   262aa:	4908      	ldr	r1, [pc, #32]	; (262cc <z_unpend1_no_timeout+0x6c>)
   262ac:	4808      	ldr	r0, [pc, #32]	; (262d0 <z_unpend1_no_timeout+0x70>)
   262ae:	22c2      	movs	r2, #194	; 0xc2
   262b0:	f004 fc4c 	bl	2ab4c <assert_print>
   262b4:	21c2      	movs	r1, #194	; 0xc2
   262b6:	e7e7      	b.n	26288 <z_unpend1_no_timeout+0x28>
   262b8:	2400      	movs	r4, #0
   262ba:	e7f2      	b.n	262a2 <z_unpend1_no_timeout+0x42>
	__asm__ volatile(
   262bc:	f386 8811 	msr	BASEPRI, r6
   262c0:	f3bf 8f6f 	isb	sy
}
   262c4:	4620      	mov	r0, r4
   262c6:	bd70      	pop	{r4, r5, r6, pc}
   262c8:	20003844 	.word	0x20003844
   262cc:	00030879 	.word	0x00030879
   262d0:	0003013d 	.word	0x0003013d

000262d4 <z_unpend_first_thread>:
{
   262d4:	b570      	push	{r4, r5, r6, lr}
   262d6:	4605      	mov	r5, r0
	__asm__ volatile(
   262d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   262dc:	f3ef 8611 	mrs	r6, BASEPRI
   262e0:	f383 8812 	msr	BASEPRI_MAX, r3
   262e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262e8:	4816      	ldr	r0, [pc, #88]	; (26344 <z_unpend_first_thread+0x70>)
   262ea:	f7fe f995 	bl	24618 <z_spin_lock_valid>
   262ee:	b940      	cbnz	r0, 26302 <z_unpend_first_thread+0x2e>
   262f0:	4915      	ldr	r1, [pc, #84]	; (26348 <z_unpend_first_thread+0x74>)
   262f2:	4816      	ldr	r0, [pc, #88]	; (2634c <z_unpend_first_thread+0x78>)
   262f4:	2294      	movs	r2, #148	; 0x94
   262f6:	f004 fc29 	bl	2ab4c <assert_print>
   262fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262fc:	4812      	ldr	r0, [pc, #72]	; (26348 <z_unpend_first_thread+0x74>)
   262fe:	f004 fc1e 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26302:	4810      	ldr	r0, [pc, #64]	; (26344 <z_unpend_first_thread+0x70>)
   26304:	f7fe f9a6 	bl	24654 <z_spin_lock_set_owner>
	return list->head == list;
   26308:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2630a:	42a5      	cmp	r5, r4
   2630c:	d012      	beq.n	26334 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   2630e:	b134      	cbz	r4, 2631e <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   26310:	4620      	mov	r0, r4
   26312:	f7ff ff09 	bl	26128 <unpend_thread_no_timeout>
   26316:	f104 0018 	add.w	r0, r4, #24
   2631a:	f000 fb8d 	bl	26a38 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2631e:	4809      	ldr	r0, [pc, #36]	; (26344 <z_unpend_first_thread+0x70>)
   26320:	f7fe f988 	bl	24634 <z_spin_unlock_valid>
   26324:	b940      	cbnz	r0, 26338 <z_unpend_first_thread+0x64>
   26326:	4908      	ldr	r1, [pc, #32]	; (26348 <z_unpend_first_thread+0x74>)
   26328:	4808      	ldr	r0, [pc, #32]	; (2634c <z_unpend_first_thread+0x78>)
   2632a:	22c2      	movs	r2, #194	; 0xc2
   2632c:	f004 fc0e 	bl	2ab4c <assert_print>
   26330:	21c2      	movs	r1, #194	; 0xc2
   26332:	e7e3      	b.n	262fc <z_unpend_first_thread+0x28>
   26334:	2400      	movs	r4, #0
   26336:	e7f2      	b.n	2631e <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   26338:	f386 8811 	msr	BASEPRI, r6
   2633c:	f3bf 8f6f 	isb	sy
}
   26340:	4620      	mov	r0, r4
   26342:	bd70      	pop	{r4, r5, r6, pc}
   26344:	20003844 	.word	0x20003844
   26348:	00030879 	.word	0x00030879
   2634c:	0003013d 	.word	0x0003013d

00026350 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   26350:	4b04      	ldr	r3, [pc, #16]	; (26364 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   26352:	2100      	movs	r1, #0
   26354:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   26358:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2635c:	4608      	mov	r0, r1
   2635e:	f7ff baa9 	b.w	258b4 <k_sched_time_slice_set>
   26362:	bf00      	nop
   26364:	200037fc 	.word	0x200037fc

00026368 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   26368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2636a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2636e:	b14b      	cbz	r3, 26384 <z_impl_k_yield+0x1c>
   26370:	4935      	ldr	r1, [pc, #212]	; (26448 <z_impl_k_yield+0xe0>)
   26372:	4836      	ldr	r0, [pc, #216]	; (2644c <z_impl_k_yield+0xe4>)
   26374:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   26378:	f004 fbe8 	bl	2ab4c <assert_print>
   2637c:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26380:	4831      	ldr	r0, [pc, #196]	; (26448 <z_impl_k_yield+0xe0>)
   26382:	e012      	b.n	263aa <z_impl_k_yield+0x42>
	__asm__ volatile(
   26384:	f04f 0340 	mov.w	r3, #64	; 0x40
   26388:	f3ef 8611 	mrs	r6, BASEPRI
   2638c:	f383 8812 	msr	BASEPRI_MAX, r3
   26390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26394:	482e      	ldr	r0, [pc, #184]	; (26450 <z_impl_k_yield+0xe8>)
   26396:	f7fe f93f 	bl	24618 <z_spin_lock_valid>
   2639a:	b940      	cbnz	r0, 263ae <z_impl_k_yield+0x46>
   2639c:	492d      	ldr	r1, [pc, #180]	; (26454 <z_impl_k_yield+0xec>)
   2639e:	482b      	ldr	r0, [pc, #172]	; (2644c <z_impl_k_yield+0xe4>)
   263a0:	2294      	movs	r2, #148	; 0x94
   263a2:	f004 fbd3 	bl	2ab4c <assert_print>
   263a6:	2194      	movs	r1, #148	; 0x94
   263a8:	482a      	ldr	r0, [pc, #168]	; (26454 <z_impl_k_yield+0xec>)
   263aa:	f004 fbc8 	bl	2ab3e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   263ae:	4c2a      	ldr	r4, [pc, #168]	; (26458 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   263b0:	4827      	ldr	r0, [pc, #156]	; (26450 <z_impl_k_yield+0xe8>)
   263b2:	f7fe f94f 	bl	24654 <z_spin_lock_set_owner>
   263b6:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263b8:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   263ba:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   263c2:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   263c4:	4628      	mov	r0, r5
   263c6:	f7ff fc43 	bl	25c50 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   263ca:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   263cc:	7b5a      	ldrb	r2, [r3, #13]
   263ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
   263d2:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   263d4:	4a21      	ldr	r2, [pc, #132]	; (2645c <z_impl_k_yield+0xf4>)
   263d6:	4293      	cmp	r3, r2
   263d8:	d106      	bne.n	263e8 <z_impl_k_yield+0x80>
   263da:	491b      	ldr	r1, [pc, #108]	; (26448 <z_impl_k_yield+0xe0>)
   263dc:	481b      	ldr	r0, [pc, #108]	; (2644c <z_impl_k_yield+0xe4>)
   263de:	22ba      	movs	r2, #186	; 0xba
   263e0:	f004 fbb4 	bl	2ab4c <assert_print>
   263e4:	21ba      	movs	r1, #186	; 0xba
   263e6:	e7cb      	b.n	26380 <z_impl_k_yield+0x18>
	return list->head == list;
   263e8:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   263ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263ec:	42aa      	cmp	r2, r5
   263ee:	bf08      	it	eq
   263f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263f2:	b922      	cbnz	r2, 263fe <z_impl_k_yield+0x96>
	node->prev = tail;
   263f4:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   263f8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   263fa:	6263      	str	r3, [r4, #36]	; 0x24
}
   263fc:	e00c      	b.n	26418 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   263fe:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   26402:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   26406:	42b8      	cmp	r0, r7
   26408:	d014      	beq.n	26434 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2640a:	4287      	cmp	r7, r0
   2640c:	dd12      	ble.n	26434 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   2640e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   26410:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   26414:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   26416:	6053      	str	r3, [r2, #4]
	update_cache(1);
   26418:	2001      	movs	r0, #1
   2641a:	f7ff f9d7 	bl	257cc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2641e:	480c      	ldr	r0, [pc, #48]	; (26450 <z_impl_k_yield+0xe8>)
   26420:	f7fe f908 	bl	24634 <z_spin_unlock_valid>
   26424:	b950      	cbnz	r0, 2643c <z_impl_k_yield+0xd4>
   26426:	490b      	ldr	r1, [pc, #44]	; (26454 <z_impl_k_yield+0xec>)
   26428:	4808      	ldr	r0, [pc, #32]	; (2644c <z_impl_k_yield+0xe4>)
   2642a:	22e1      	movs	r2, #225	; 0xe1
   2642c:	f004 fb8e 	bl	2ab4c <assert_print>
   26430:	21e1      	movs	r1, #225	; 0xe1
   26432:	e7b9      	b.n	263a8 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   26434:	428a      	cmp	r2, r1
   26436:	d0dd      	beq.n	263f4 <z_impl_k_yield+0x8c>
   26438:	6812      	ldr	r2, [r2, #0]
   2643a:	e7da      	b.n	263f2 <z_impl_k_yield+0x8a>
   2643c:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   2643e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   26442:	f7ee bc7d 	b.w	14d40 <arch_swap>
   26446:	bf00      	nop
   26448:	000340c7 	.word	0x000340c7
   2644c:	0003013d 	.word	0x0003013d
   26450:	20003844 	.word	0x20003844
   26454:	00030879 	.word	0x00030879
   26458:	200037fc 	.word	0x200037fc
   2645c:	200029c0 	.word	0x200029c0

00026460 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   26460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26464:	4605      	mov	r5, r0
   26466:	460e      	mov	r6, r1
   26468:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2646c:	b14b      	cbz	r3, 26482 <z_tick_sleep+0x22>
   2646e:	4936      	ldr	r1, [pc, #216]	; (26548 <z_tick_sleep+0xe8>)
   26470:	4836      	ldr	r0, [pc, #216]	; (2654c <z_tick_sleep+0xec>)
   26472:	f240 528c 	movw	r2, #1420	; 0x58c
   26476:	f004 fb69 	bl	2ab4c <assert_print>
   2647a:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   2647e:	4832      	ldr	r0, [pc, #200]	; (26548 <z_tick_sleep+0xe8>)
   26480:	e020      	b.n	264c4 <z_tick_sleep+0x64>
	if (ticks == 0) {
   26482:	ea50 0301 	orrs.w	r3, r0, r1
   26486:	d103      	bne.n	26490 <z_tick_sleep+0x30>
	z_impl_k_yield();
   26488:	f7ff ff6e 	bl	26368 <z_impl_k_yield>
		return 0;
   2648c:	2000      	movs	r0, #0
   2648e:	e058      	b.n	26542 <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   26490:	1c82      	adds	r2, r0, #2
   26492:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26496:	db17      	blt.n	264c8 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   26498:	f008 fc41 	bl	2ed1e <sys_clock_tick_get_32>
   2649c:	182c      	adds	r4, r5, r0
   2649e:	f04f 0340 	mov.w	r3, #64	; 0x40
   264a2:	f3ef 8811 	mrs	r8, BASEPRI
   264a6:	f383 8812 	msr	BASEPRI_MAX, r3
   264aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264ae:	4828      	ldr	r0, [pc, #160]	; (26550 <z_tick_sleep+0xf0>)
   264b0:	f7fe f8b2 	bl	24618 <z_spin_lock_valid>
   264b4:	b960      	cbnz	r0, 264d0 <z_tick_sleep+0x70>
   264b6:	4927      	ldr	r1, [pc, #156]	; (26554 <z_tick_sleep+0xf4>)
   264b8:	4824      	ldr	r0, [pc, #144]	; (2654c <z_tick_sleep+0xec>)
   264ba:	2294      	movs	r2, #148	; 0x94
   264bc:	f004 fb46 	bl	2ab4c <assert_print>
   264c0:	2194      	movs	r1, #148	; 0x94
   264c2:	4824      	ldr	r0, [pc, #144]	; (26554 <z_tick_sleep+0xf4>)
   264c4:	f004 fb3b 	bl	2ab3e <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   264c8:	f06f 0401 	mvn.w	r4, #1
   264cc:	1a24      	subs	r4, r4, r0
   264ce:	e7e6      	b.n	2649e <z_tick_sleep+0x3e>
	pending_current = _current;
   264d0:	4f21      	ldr	r7, [pc, #132]	; (26558 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   264d2:	481f      	ldr	r0, [pc, #124]	; (26550 <z_tick_sleep+0xf0>)
   264d4:	f7fe f8be 	bl	24654 <z_spin_lock_set_owner>
   264d8:	4b20      	ldr	r3, [pc, #128]	; (2655c <z_tick_sleep+0xfc>)
   264da:	68b8      	ldr	r0, [r7, #8]
   264dc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   264de:	f7ff fc89 	bl	25df4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   264e2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   264e4:	491e      	ldr	r1, [pc, #120]	; (26560 <z_tick_sleep+0x100>)
   264e6:	462a      	mov	r2, r5
   264e8:	4633      	mov	r3, r6
   264ea:	3018      	adds	r0, #24
   264ec:	f000 f9f8 	bl	268e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   264f0:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264f2:	4817      	ldr	r0, [pc, #92]	; (26550 <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   264f4:	7b53      	ldrb	r3, [r2, #13]
   264f6:	f043 0310 	orr.w	r3, r3, #16
   264fa:	7353      	strb	r3, [r2, #13]
   264fc:	f7fe f89a 	bl	24634 <z_spin_unlock_valid>
   26500:	b930      	cbnz	r0, 26510 <z_tick_sleep+0xb0>
   26502:	4914      	ldr	r1, [pc, #80]	; (26554 <z_tick_sleep+0xf4>)
   26504:	4811      	ldr	r0, [pc, #68]	; (2654c <z_tick_sleep+0xec>)
   26506:	22e1      	movs	r2, #225	; 0xe1
   26508:	f004 fb20 	bl	2ab4c <assert_print>
   2650c:	21e1      	movs	r1, #225	; 0xe1
   2650e:	e7d8      	b.n	264c2 <z_tick_sleep+0x62>
   26510:	4640      	mov	r0, r8
   26512:	f7ee fc15 	bl	14d40 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   26516:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   26518:	7b5b      	ldrb	r3, [r3, #13]
   2651a:	06db      	lsls	r3, r3, #27
   2651c:	d508      	bpl.n	26530 <z_tick_sleep+0xd0>
   2651e:	490a      	ldr	r1, [pc, #40]	; (26548 <z_tick_sleep+0xe8>)
   26520:	480a      	ldr	r0, [pc, #40]	; (2654c <z_tick_sleep+0xec>)
   26522:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
   26526:	f004 fb11 	bl	2ab4c <assert_print>
   2652a:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   2652e:	e7a6      	b.n	2647e <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   26530:	f008 fbf5 	bl	2ed1e <sys_clock_tick_get_32>
   26534:	1a20      	subs	r0, r4, r0
   26536:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2653a:	2801      	cmp	r0, #1
   2653c:	f173 0300 	sbcs.w	r3, r3, #0
   26540:	dba4      	blt.n	2648c <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   26542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26546:	bf00      	nop
   26548:	000340c7 	.word	0x000340c7
   2654c:	0003013d 	.word	0x0003013d
   26550:	20003844 	.word	0x20003844
   26554:	00030879 	.word	0x00030879
   26558:	200037fc 	.word	0x200037fc
   2655c:	20003838 	.word	0x20003838
   26560:	000261d5 	.word	0x000261d5

00026564 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   26564:	b508      	push	{r3, lr}
   26566:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   2656a:	b153      	cbz	r3, 26582 <z_impl_k_sleep+0x1e>
   2656c:	4910      	ldr	r1, [pc, #64]	; (265b0 <z_impl_k_sleep+0x4c>)
   2656e:	4811      	ldr	r0, [pc, #68]	; (265b4 <z_impl_k_sleep+0x50>)
   26570:	f240 52b7 	movw	r2, #1463	; 0x5b7
   26574:	f004 faea 	bl	2ab4c <assert_print>
   26578:	480d      	ldr	r0, [pc, #52]	; (265b0 <z_impl_k_sleep+0x4c>)
   2657a:	f240 51b7 	movw	r1, #1463	; 0x5b7
   2657e:	f004 fade 	bl	2ab3e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26582:	f1b1 3fff 	cmp.w	r1, #4294967295
   26586:	bf08      	it	eq
   26588:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2658c:	d106      	bne.n	2659c <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   2658e:	4b0a      	ldr	r3, [pc, #40]	; (265b8 <z_impl_k_sleep+0x54>)
   26590:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26592:	f7ff fd73 	bl	2607c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26596:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2659a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2659c:	f7ff ff60 	bl	26460 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   265a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   265a4:	fb80 0303 	smull	r0, r3, r0, r3
   265a8:	0bc0      	lsrs	r0, r0, #15
   265aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   265ae:	e7f4      	b.n	2659a <z_impl_k_sleep+0x36>
   265b0:	000340c7 	.word	0x000340c7
   265b4:	0003013d 	.word	0x0003013d
   265b8:	200037fc 	.word	0x200037fc

000265bc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   265bc:	4b01      	ldr	r3, [pc, #4]	; (265c4 <z_impl_z_current_get+0x8>)
   265be:	6898      	ldr	r0, [r3, #8]
   265c0:	4770      	bx	lr
   265c2:	bf00      	nop
   265c4:	200037fc 	.word	0x200037fc

000265c8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   265c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265cc:	4604      	mov	r4, r0
   265ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   265d2:	f3ef 8611 	mrs	r6, BASEPRI
   265d6:	f383 8812 	msr	BASEPRI_MAX, r3
   265da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   265de:	4845      	ldr	r0, [pc, #276]	; (266f4 <z_thread_abort+0x12c>)
   265e0:	f7fe f81a 	bl	24618 <z_spin_lock_valid>
   265e4:	b940      	cbnz	r0, 265f8 <z_thread_abort+0x30>
   265e6:	4944      	ldr	r1, [pc, #272]	; (266f8 <z_thread_abort+0x130>)
   265e8:	4844      	ldr	r0, [pc, #272]	; (266fc <z_thread_abort+0x134>)
   265ea:	2294      	movs	r2, #148	; 0x94
   265ec:	f004 faae 	bl	2ab4c <assert_print>
   265f0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265f2:	4841      	ldr	r0, [pc, #260]	; (266f8 <z_thread_abort+0x130>)
   265f4:	f004 faa3 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   265f8:	483e      	ldr	r0, [pc, #248]	; (266f4 <z_thread_abort+0x12c>)
   265fa:	f7fe f82b 	bl	24654 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   265fe:	7b23      	ldrb	r3, [r4, #12]
   26600:	07d9      	lsls	r1, r3, #31
   26602:	d518      	bpl.n	26636 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26604:	483b      	ldr	r0, [pc, #236]	; (266f4 <z_thread_abort+0x12c>)
   26606:	f7fe f815 	bl	24634 <z_spin_unlock_valid>
   2660a:	b930      	cbnz	r0, 2661a <z_thread_abort+0x52>
   2660c:	493a      	ldr	r1, [pc, #232]	; (266f8 <z_thread_abort+0x130>)
   2660e:	483b      	ldr	r0, [pc, #236]	; (266fc <z_thread_abort+0x134>)
   26610:	22c2      	movs	r2, #194	; 0xc2
   26612:	f004 fa9b 	bl	2ab4c <assert_print>
   26616:	21c2      	movs	r1, #194	; 0xc2
   26618:	e7eb      	b.n	265f2 <z_thread_abort+0x2a>
	__asm__ volatile(
   2661a:	f386 8811 	msr	BASEPRI, r6
   2661e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   26622:	4937      	ldr	r1, [pc, #220]	; (26700 <z_thread_abort+0x138>)
   26624:	4835      	ldr	r0, [pc, #212]	; (266fc <z_thread_abort+0x134>)
   26626:	f240 62c3 	movw	r2, #1731	; 0x6c3
   2662a:	f004 fa8f 	bl	2ab4c <assert_print>
   2662e:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   26632:	4833      	ldr	r0, [pc, #204]	; (26700 <z_thread_abort+0x138>)
   26634:	e7de      	b.n	265f4 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26636:	7b63      	ldrb	r3, [r4, #13]
   26638:	071a      	lsls	r2, r3, #28
   2663a:	d50a      	bpl.n	26652 <z_thread_abort+0x8a>
   2663c:	482d      	ldr	r0, [pc, #180]	; (266f4 <z_thread_abort+0x12c>)
   2663e:	f7fd fff9 	bl	24634 <z_spin_unlock_valid>
   26642:	2800      	cmp	r0, #0
   26644:	d0e2      	beq.n	2660c <z_thread_abort+0x44>
   26646:	f386 8811 	msr	BASEPRI, r6
   2664a:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26652:	f023 0220 	bic.w	r2, r3, #32
   26656:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2665a:	09d2      	lsrs	r2, r2, #7
   2665c:	d127      	bne.n	266ae <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2665e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   26660:	68a3      	ldr	r3, [r4, #8]
   26662:	b113      	cbz	r3, 2666a <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   26664:	4620      	mov	r0, r4
   26666:	f7ff fd5f 	bl	26128 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2666a:	f104 0018 	add.w	r0, r4, #24
   2666e:	f000 f9e3 	bl	26a38 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   26672:	f104 0758 	add.w	r7, r4, #88	; 0x58
   26676:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   2667a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2667c:	42bd      	cmp	r5, r7
   2667e:	d000      	beq.n	26682 <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26680:	b9fd      	cbnz	r5, 266c2 <z_thread_abort+0xfa>
		update_cache(1);
   26682:	2001      	movs	r0, #1
   26684:	f7ff f8a2 	bl	257cc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   26688:	4b1e      	ldr	r3, [pc, #120]	; (26704 <z_thread_abort+0x13c>)
   2668a:	689b      	ldr	r3, [r3, #8]
   2668c:	42a3      	cmp	r3, r4
   2668e:	d1d5      	bne.n	2663c <z_thread_abort+0x74>
   26690:	f3ef 8305 	mrs	r3, IPSR
   26694:	2b00      	cmp	r3, #0
   26696:	d1d1      	bne.n	2663c <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26698:	4816      	ldr	r0, [pc, #88]	; (266f4 <z_thread_abort+0x12c>)
   2669a:	f7fd ffcb 	bl	24634 <z_spin_unlock_valid>
   2669e:	b9e8      	cbnz	r0, 266dc <z_thread_abort+0x114>
   266a0:	4915      	ldr	r1, [pc, #84]	; (266f8 <z_thread_abort+0x130>)
   266a2:	4816      	ldr	r0, [pc, #88]	; (266fc <z_thread_abort+0x134>)
   266a4:	22e1      	movs	r2, #225	; 0xe1
   266a6:	f004 fa51 	bl	2ab4c <assert_print>
   266aa:	21e1      	movs	r1, #225	; 0xe1
   266ac:	e7a1      	b.n	265f2 <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   266ae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   266b2:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   266b6:	4814      	ldr	r0, [pc, #80]	; (26708 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   266b8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   266ba:	4621      	mov	r1, r4
   266bc:	f7ff fac8 	bl	25c50 <z_priq_dumb_remove>
}
   266c0:	e7ce      	b.n	26660 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   266c2:	4628      	mov	r0, r5
   266c4:	f7ff fd30 	bl	26128 <unpend_thread_no_timeout>
   266c8:	f105 0018 	add.w	r0, r5, #24
   266cc:	f000 f9b4 	bl	26a38 <z_abort_timeout>
   266d0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   266d4:	4628      	mov	r0, r5
   266d6:	f7ff f8a5 	bl	25824 <ready_thread>
   266da:	e7ce      	b.n	2667a <z_thread_abort+0xb2>
   266dc:	4630      	mov	r0, r6
   266de:	f7ee fb2f 	bl	14d40 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   266e2:	4907      	ldr	r1, [pc, #28]	; (26700 <z_thread_abort+0x138>)
   266e4:	4805      	ldr	r0, [pc, #20]	; (266fc <z_thread_abort+0x134>)
   266e6:	f240 62f2 	movw	r2, #1778	; 0x6f2
   266ea:	f004 fa2f 	bl	2ab4c <assert_print>
   266ee:	f240 61f2 	movw	r1, #1778	; 0x6f2
   266f2:	e79e      	b.n	26632 <z_thread_abort+0x6a>
   266f4:	20003844 	.word	0x20003844
   266f8:	00030879 	.word	0x00030879
   266fc:	0003013d 	.word	0x0003013d
   26700:	000340c7 	.word	0x000340c7
   26704:	200037fc 	.word	0x200037fc
   26708:	2000381c 	.word	0x2000381c

0002670c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   2670c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26710:	4606      	mov	r6, r0
   26712:	4688      	mov	r8, r1
   26714:	4617      	mov	r7, r2
	__asm__ volatile(
   26716:	f04f 0340 	mov.w	r3, #64	; 0x40
   2671a:	f3ef 8911 	mrs	r9, BASEPRI
   2671e:	f383 8812 	msr	BASEPRI_MAX, r3
   26722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26726:	481c      	ldr	r0, [pc, #112]	; (26798 <z_sched_wake+0x8c>)
   26728:	f7fd ff76 	bl	24618 <z_spin_lock_valid>
   2672c:	4605      	mov	r5, r0
   2672e:	b940      	cbnz	r0, 26742 <z_sched_wake+0x36>
   26730:	491a      	ldr	r1, [pc, #104]	; (2679c <z_sched_wake+0x90>)
   26732:	481b      	ldr	r0, [pc, #108]	; (267a0 <z_sched_wake+0x94>)
   26734:	2294      	movs	r2, #148	; 0x94
   26736:	f004 fa09 	bl	2ab4c <assert_print>
   2673a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2673c:	4817      	ldr	r0, [pc, #92]	; (2679c <z_sched_wake+0x90>)
   2673e:	f004 f9fe 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26742:	4815      	ldr	r0, [pc, #84]	; (26798 <z_sched_wake+0x8c>)
   26744:	f7fd ff86 	bl	24654 <z_spin_lock_set_owner>
	return list->head == list;
   26748:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2674a:	42a6      	cmp	r6, r4
   2674c:	d018      	beq.n	26780 <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   2674e:	b1cc      	cbz	r4, 26784 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   26750:	4620      	mov	r0, r4
   26752:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   26756:	6167      	str	r7, [r4, #20]
   26758:	f7ff fce6 	bl	26128 <unpend_thread_no_timeout>
   2675c:	f104 0018 	add.w	r0, r4, #24
   26760:	f000 f96a 	bl	26a38 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   26764:	4620      	mov	r0, r4
   26766:	f7ff f85d 	bl	25824 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2676a:	480b      	ldr	r0, [pc, #44]	; (26798 <z_sched_wake+0x8c>)
   2676c:	f7fd ff62 	bl	24634 <z_spin_unlock_valid>
   26770:	b950      	cbnz	r0, 26788 <z_sched_wake+0x7c>
   26772:	490a      	ldr	r1, [pc, #40]	; (2679c <z_sched_wake+0x90>)
   26774:	480a      	ldr	r0, [pc, #40]	; (267a0 <z_sched_wake+0x94>)
   26776:	22c2      	movs	r2, #194	; 0xc2
   26778:	f004 f9e8 	bl	2ab4c <assert_print>
   2677c:	21c2      	movs	r1, #194	; 0xc2
   2677e:	e7dd      	b.n	2673c <z_sched_wake+0x30>
	bool ret = false;
   26780:	2500      	movs	r5, #0
   26782:	e7f2      	b.n	2676a <z_sched_wake+0x5e>
   26784:	4625      	mov	r5, r4
   26786:	e7f0      	b.n	2676a <z_sched_wake+0x5e>
	__asm__ volatile(
   26788:	f389 8811 	msr	BASEPRI, r9
   2678c:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   26790:	4628      	mov	r0, r5
   26792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26796:	bf00      	nop
   26798:	20003844 	.word	0x20003844
   2679c:	00030879 	.word	0x00030879
   267a0:	0003013d 	.word	0x0003013d

000267a4 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   267a4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   267a6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   267aa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   267ac:	e9cd 6700 	strd	r6, r7, [sp]
   267b0:	f7ff fb8e 	bl	25ed0 <z_pend_curr>

	if (data != NULL) {
   267b4:	b11c      	cbz	r4, 267be <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   267b6:	4b03      	ldr	r3, [pc, #12]	; (267c4 <z_sched_wait+0x20>)
   267b8:	689b      	ldr	r3, [r3, #8]
   267ba:	695b      	ldr	r3, [r3, #20]
   267bc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   267be:	b002      	add	sp, #8
   267c0:	bdd0      	pop	{r4, r6, r7, pc}
   267c2:	bf00      	nop
   267c4:	200037fc 	.word	0x200037fc

000267c8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   267c8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   267ca:	4806      	ldr	r0, [pc, #24]	; (267e4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   267cc:	4a06      	ldr	r2, [pc, #24]	; (267e8 <z_data_copy+0x20>)
   267ce:	4907      	ldr	r1, [pc, #28]	; (267ec <z_data_copy+0x24>)
   267d0:	1a12      	subs	r2, r2, r0
   267d2:	f008 f97f 	bl	2ead4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   267d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   267da:	4a05      	ldr	r2, [pc, #20]	; (267f0 <z_data_copy+0x28>)
   267dc:	4905      	ldr	r1, [pc, #20]	; (267f4 <z_data_copy+0x2c>)
   267de:	4806      	ldr	r0, [pc, #24]	; (267f8 <z_data_copy+0x30>)
   267e0:	f008 b978 	b.w	2ead4 <z_early_memcpy>
   267e4:	20000000 	.word	0x20000000
   267e8:	20000d0c 	.word	0x20000d0c
   267ec:	000341ac 	.word	0x000341ac
   267f0:	00000000 	.word	0x00000000
   267f4:	000341ac 	.word	0x000341ac
   267f8:	20000000 	.word	0x20000000

000267fc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   267fc:	4b03      	ldr	r3, [pc, #12]	; (2680c <elapsed+0x10>)
   267fe:	681b      	ldr	r3, [r3, #0]
   26800:	b90b      	cbnz	r3, 26806 <elapsed+0xa>
   26802:	f7fa bd91 	b.w	21328 <sys_clock_elapsed>
}
   26806:	2000      	movs	r0, #0
   26808:	4770      	bx	lr
   2680a:	bf00      	nop
   2680c:	20003848 	.word	0x20003848

00026810 <next_timeout>:

static int32_t next_timeout(void)
{
   26810:	b510      	push	{r4, lr}
	return list->head == list;
   26812:	4b11      	ldr	r3, [pc, #68]	; (26858 <next_timeout+0x48>)
   26814:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26816:	429c      	cmp	r4, r3
   26818:	d10a      	bne.n	26830 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2681a:	f7ff ffef 	bl	267fc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   2681e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   26822:	4b0e      	ldr	r3, [pc, #56]	; (2685c <next_timeout+0x4c>)
   26824:	691b      	ldr	r3, [r3, #16]
   26826:	b113      	cbz	r3, 2682e <next_timeout+0x1e>
   26828:	4298      	cmp	r0, r3
   2682a:	bfa8      	it	ge
   2682c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2682e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   26830:	f7ff ffe4 	bl	267fc <elapsed>
	if ((to == NULL) ||
   26834:	2c00      	cmp	r4, #0
   26836:	d0f2      	beq.n	2681e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   26838:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2683c:	1a1b      	subs	r3, r3, r0
   2683e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   26842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   26846:	f172 0100 	sbcs.w	r1, r2, #0
   2684a:	dae8      	bge.n	2681e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2684c:	2a00      	cmp	r2, #0
   2684e:	bfac      	ite	ge
   26850:	4618      	movge	r0, r3
   26852:	2000      	movlt	r0, #0
   26854:	e7e5      	b.n	26822 <next_timeout+0x12>
   26856:	bf00      	nop
   26858:	20000958 	.word	0x20000958
   2685c:	200037fc 	.word	0x200037fc

00026860 <remove_timeout>:
{
   26860:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26862:	b170      	cbz	r0, 26882 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   26864:	4b0b      	ldr	r3, [pc, #44]	; (26894 <remove_timeout+0x34>)
   26866:	685b      	ldr	r3, [r3, #4]
   26868:	4298      	cmp	r0, r3
   2686a:	d00a      	beq.n	26882 <remove_timeout+0x22>
   2686c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2686e:	b143      	cbz	r3, 26882 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   26870:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   26874:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26878:	1912      	adds	r2, r2, r4
   2687a:	eb41 0105 	adc.w	r1, r1, r5
   2687e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   26882:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26886:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26888:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2688a:	2300      	movs	r3, #0
	node->prev = NULL;
   2688c:	e9c0 3300 	strd	r3, r3, [r0]
}
   26890:	bd30      	pop	{r4, r5, pc}
   26892:	bf00      	nop
   26894:	20000958 	.word	0x20000958

00026898 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   26898:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   2689a:	6804      	ldr	r4, [r0, #0]
   2689c:	b1d4      	cbz	r4, 268d4 <timeout_rem+0x3c>
	return list->head == list;
   2689e:	4a0f      	ldr	r2, [pc, #60]	; (268dc <timeout_rem+0x44>)
   268a0:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   268a2:	6851      	ldr	r1, [r2, #4]
   268a4:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   268a6:	4293      	cmp	r3, r2
   268a8:	bf08      	it	eq
   268aa:	2300      	moveq	r3, #0
	return (node == list->tail) ? NULL : node->next;
   268ac:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   268ae:	b933      	cbnz	r3, 268be <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   268b0:	f7ff ffa4 	bl	267fc <elapsed>
   268b4:	4603      	mov	r3, r0
   268b6:	1a20      	subs	r0, r4, r0
   268b8:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   268bc:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   268be:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   268c2:	18a4      	adds	r4, r4, r2
   268c4:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   268c8:	4283      	cmp	r3, r0
   268ca:	d0f1      	beq.n	268b0 <timeout_rem+0x18>
   268cc:	4299      	cmp	r1, r3
   268ce:	d0ef      	beq.n	268b0 <timeout_rem+0x18>
   268d0:	681b      	ldr	r3, [r3, #0]
   268d2:	e7ec      	b.n	268ae <timeout_rem+0x16>
		return 0;
   268d4:	4620      	mov	r0, r4
   268d6:	4621      	mov	r1, r4
   268d8:	e7f0      	b.n	268bc <timeout_rem+0x24>
   268da:	bf00      	nop
   268dc:	20000958 	.word	0x20000958

000268e0 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   268e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   268e4:	bf08      	it	eq
   268e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   268ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   268ee:	4604      	mov	r4, r0
   268f0:	4692      	mov	sl, r2
   268f2:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   268f4:	f000 8090 	beq.w	26a18 <z_add_timeout+0x138>
	return node->next != NULL;
   268f8:	6806      	ldr	r6, [r0, #0]
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   268fa:	b146      	cbz	r6, 2690e <z_add_timeout+0x2e>
   268fc:	4947      	ldr	r1, [pc, #284]	; (26a1c <z_add_timeout+0x13c>)
   268fe:	4848      	ldr	r0, [pc, #288]	; (26a20 <z_add_timeout+0x140>)
   26900:	2263      	movs	r2, #99	; 0x63
   26902:	f004 f923 	bl	2ab4c <assert_print>
   26906:	4845      	ldr	r0, [pc, #276]	; (26a1c <z_add_timeout+0x13c>)
   26908:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2690a:	f004 f918 	bl	2ab3e <assert_post_action>
	to->fn = fn;
   2690e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   26910:	f04f 0340 	mov.w	r3, #64	; 0x40
   26914:	f3ef 8711 	mrs	r7, BASEPRI
   26918:	f383 8812 	msr	BASEPRI_MAX, r3
   2691c:	f3bf 8f6f 	isb	sy
   26920:	4840      	ldr	r0, [pc, #256]	; (26a24 <z_add_timeout+0x144>)
   26922:	f7fd fe79 	bl	24618 <z_spin_lock_valid>
   26926:	b938      	cbnz	r0, 26938 <z_add_timeout+0x58>
   26928:	493f      	ldr	r1, [pc, #252]	; (26a28 <z_add_timeout+0x148>)
   2692a:	483d      	ldr	r0, [pc, #244]	; (26a20 <z_add_timeout+0x140>)
   2692c:	2294      	movs	r2, #148	; 0x94
   2692e:	f004 f90d 	bl	2ab4c <assert_print>
   26932:	2194      	movs	r1, #148	; 0x94
   26934:	483c      	ldr	r0, [pc, #240]	; (26a28 <z_add_timeout+0x148>)
   26936:	e7e8      	b.n	2690a <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   26938:	483a      	ldr	r0, [pc, #232]	; (26a24 <z_add_timeout+0x144>)
   2693a:	f7fd fe8b 	bl	24654 <z_spin_lock_set_owner>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2693e:	f1ba 3fff 	cmp.w	sl, #4294967295
   26942:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   26946:	da23      	bge.n	26990 <z_add_timeout+0xb0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26948:	4938      	ldr	r1, [pc, #224]	; (26a2c <z_add_timeout+0x14c>)
   2694a:	e9d1 2000 	ldrd	r2, r0, [r1]
   2694e:	f06f 0301 	mvn.w	r3, #1
   26952:	1a9b      	subs	r3, r3, r2
   26954:	f04f 32ff 	mov.w	r2, #4294967295
   26958:	eb62 0000 	sbc.w	r0, r2, r0
   2695c:	ebb3 030a 	subs.w	r3, r3, sl
   26960:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   26964:	2b01      	cmp	r3, #1
   26966:	f170 0200 	sbcs.w	r2, r0, #0
   2696a:	da01      	bge.n	26970 <z_add_timeout+0x90>
   2696c:	2301      	movs	r3, #1
   2696e:	4630      	mov	r0, r6
   26970:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   26974:	4b2e      	ldr	r3, [pc, #184]	; (26a30 <z_add_timeout+0x150>)
   26976:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   26978:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2697c:	429a      	cmp	r2, r3
   2697e:	bf18      	it	ne
   26980:	4616      	movne	r6, r2
		for (t = first(); t != NULL; t = next(t)) {
   26982:	b986      	cbnz	r6, 269a6 <z_add_timeout+0xc6>
	node->prev = tail;
   26984:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   26988:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2698c:	605c      	str	r4, [r3, #4]
}
   2698e:	e01c      	b.n	269ca <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   26990:	f7ff ff34 	bl	267fc <elapsed>
   26994:	f11a 0801 	adds.w	r8, sl, #1
   26998:	f145 0500 	adc.w	r5, r5, #0
   2699c:	eb18 0300 	adds.w	r3, r8, r0
   269a0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   269a4:	e7e4      	b.n	26970 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   269a6:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   269aa:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   269ae:	428a      	cmp	r2, r1
   269b0:	eb70 0e05 	sbcs.w	lr, r0, r5
   269b4:	da23      	bge.n	269fe <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   269b6:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   269b8:	6872      	ldr	r2, [r6, #4]
   269ba:	eb65 0500 	sbc.w	r5, r5, r0
   269be:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   269c2:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   269c6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   269c8:	6074      	str	r4, [r6, #4]
	return list->head == list;
   269ca:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   269cc:	429a      	cmp	r2, r3
   269ce:	d00b      	beq.n	269e8 <z_add_timeout+0x108>
		if (to == first()) {
   269d0:	4294      	cmp	r4, r2
   269d2:	d109      	bne.n	269e8 <z_add_timeout+0x108>
			int32_t next_time = next_timeout();
   269d4:	f7ff ff1c 	bl	26810 <next_timeout>
			if (next_time == 0 ||
   269d8:	b118      	cbz	r0, 269e2 <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   269da:	4b16      	ldr	r3, [pc, #88]	; (26a34 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   269dc:	691b      	ldr	r3, [r3, #16]
   269de:	4283      	cmp	r3, r0
   269e0:	d002      	beq.n	269e8 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   269e2:	2100      	movs	r1, #0
   269e4:	f7fa fc74 	bl	212d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269e8:	480e      	ldr	r0, [pc, #56]	; (26a24 <z_add_timeout+0x144>)
   269ea:	f7fd fe23 	bl	24634 <z_spin_unlock_valid>
   269ee:	b978      	cbnz	r0, 26a10 <z_add_timeout+0x130>
   269f0:	490d      	ldr	r1, [pc, #52]	; (26a28 <z_add_timeout+0x148>)
   269f2:	480b      	ldr	r0, [pc, #44]	; (26a20 <z_add_timeout+0x140>)
   269f4:	22c2      	movs	r2, #194	; 0xc2
   269f6:	f004 f8a9 	bl	2ab4c <assert_print>
   269fa:	21c2      	movs	r1, #194	; 0xc2
   269fc:	e79a      	b.n	26934 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   269fe:	1a52      	subs	r2, r2, r1
   26a00:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   26a04:	4566      	cmp	r6, ip
   26a06:	e9c4 2004 	strd	r2, r0, [r4, #16]
   26a0a:	d0bb      	beq.n	26984 <z_add_timeout+0xa4>
   26a0c:	6836      	ldr	r6, [r6, #0]
   26a0e:	e7b8      	b.n	26982 <z_add_timeout+0xa2>
	__asm__ volatile(
   26a10:	f387 8811 	msr	BASEPRI, r7
   26a14:	f3bf 8f6f 	isb	sy
}
   26a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26a1c:	00034114 	.word	0x00034114
   26a20:	0003013d 	.word	0x0003013d
   26a24:	2000384c 	.word	0x2000384c
   26a28:	00030879 	.word	0x00030879
   26a2c:	20002b60 	.word	0x20002b60
   26a30:	20000958 	.word	0x20000958
   26a34:	200037fc 	.word	0x200037fc

00026a38 <z_abort_timeout>:
{
   26a38:	b538      	push	{r3, r4, r5, lr}
   26a3a:	4604      	mov	r4, r0
	__asm__ volatile(
   26a3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a40:	f3ef 8511 	mrs	r5, BASEPRI
   26a44:	f383 8812 	msr	BASEPRI_MAX, r3
   26a48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a4c:	4814      	ldr	r0, [pc, #80]	; (26aa0 <z_abort_timeout+0x68>)
   26a4e:	f7fd fde3 	bl	24618 <z_spin_lock_valid>
   26a52:	b940      	cbnz	r0, 26a66 <z_abort_timeout+0x2e>
   26a54:	4913      	ldr	r1, [pc, #76]	; (26aa4 <z_abort_timeout+0x6c>)
   26a56:	4814      	ldr	r0, [pc, #80]	; (26aa8 <z_abort_timeout+0x70>)
   26a58:	2294      	movs	r2, #148	; 0x94
   26a5a:	f004 f877 	bl	2ab4c <assert_print>
   26a5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a60:	4810      	ldr	r0, [pc, #64]	; (26aa4 <z_abort_timeout+0x6c>)
   26a62:	f004 f86c 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26a66:	480e      	ldr	r0, [pc, #56]	; (26aa0 <z_abort_timeout+0x68>)
   26a68:	f7fd fdf4 	bl	24654 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   26a6c:	6823      	ldr	r3, [r4, #0]
   26a6e:	b173      	cbz	r3, 26a8e <z_abort_timeout+0x56>
			remove_timeout(to);
   26a70:	4620      	mov	r0, r4
   26a72:	f7ff fef5 	bl	26860 <remove_timeout>
			ret = 0;
   26a76:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a78:	4809      	ldr	r0, [pc, #36]	; (26aa0 <z_abort_timeout+0x68>)
   26a7a:	f7fd fddb 	bl	24634 <z_spin_unlock_valid>
   26a7e:	b948      	cbnz	r0, 26a94 <z_abort_timeout+0x5c>
   26a80:	4908      	ldr	r1, [pc, #32]	; (26aa4 <z_abort_timeout+0x6c>)
   26a82:	4809      	ldr	r0, [pc, #36]	; (26aa8 <z_abort_timeout+0x70>)
   26a84:	22c2      	movs	r2, #194	; 0xc2
   26a86:	f004 f861 	bl	2ab4c <assert_print>
   26a8a:	21c2      	movs	r1, #194	; 0xc2
   26a8c:	e7e8      	b.n	26a60 <z_abort_timeout+0x28>
	int ret = -EINVAL;
   26a8e:	f06f 0415 	mvn.w	r4, #21
   26a92:	e7f1      	b.n	26a78 <z_abort_timeout+0x40>
	__asm__ volatile(
   26a94:	f385 8811 	msr	BASEPRI, r5
   26a98:	f3bf 8f6f 	isb	sy
}
   26a9c:	4620      	mov	r0, r4
   26a9e:	bd38      	pop	{r3, r4, r5, pc}
   26aa0:	2000384c 	.word	0x2000384c
   26aa4:	00030879 	.word	0x00030879
   26aa8:	0003013d 	.word	0x0003013d

00026aac <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   26aac:	b570      	push	{r4, r5, r6, lr}
   26aae:	4604      	mov	r4, r0
	__asm__ volatile(
   26ab0:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ab4:	f3ef 8611 	mrs	r6, BASEPRI
   26ab8:	f383 8812 	msr	BASEPRI_MAX, r3
   26abc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26ac0:	4813      	ldr	r0, [pc, #76]	; (26b10 <z_timeout_remaining+0x64>)
   26ac2:	f7fd fda9 	bl	24618 <z_spin_lock_valid>
   26ac6:	b940      	cbnz	r0, 26ada <z_timeout_remaining+0x2e>
   26ac8:	4912      	ldr	r1, [pc, #72]	; (26b14 <z_timeout_remaining+0x68>)
   26aca:	4813      	ldr	r0, [pc, #76]	; (26b18 <z_timeout_remaining+0x6c>)
   26acc:	2294      	movs	r2, #148	; 0x94
   26ace:	f004 f83d 	bl	2ab4c <assert_print>
   26ad2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ad4:	480f      	ldr	r0, [pc, #60]	; (26b14 <z_timeout_remaining+0x68>)
   26ad6:	f004 f832 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26ada:	480d      	ldr	r0, [pc, #52]	; (26b10 <z_timeout_remaining+0x64>)
   26adc:	f7fd fdba 	bl	24654 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   26ae0:	4620      	mov	r0, r4
   26ae2:	f7ff fed9 	bl	26898 <timeout_rem>
   26ae6:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ae8:	4809      	ldr	r0, [pc, #36]	; (26b10 <z_timeout_remaining+0x64>)
   26aea:	460c      	mov	r4, r1
   26aec:	f7fd fda2 	bl	24634 <z_spin_unlock_valid>
   26af0:	b930      	cbnz	r0, 26b00 <z_timeout_remaining+0x54>
   26af2:	4908      	ldr	r1, [pc, #32]	; (26b14 <z_timeout_remaining+0x68>)
   26af4:	4808      	ldr	r0, [pc, #32]	; (26b18 <z_timeout_remaining+0x6c>)
   26af6:	22c2      	movs	r2, #194	; 0xc2
   26af8:	f004 f828 	bl	2ab4c <assert_print>
   26afc:	21c2      	movs	r1, #194	; 0xc2
   26afe:	e7e9      	b.n	26ad4 <z_timeout_remaining+0x28>
	__asm__ volatile(
   26b00:	f386 8811 	msr	BASEPRI, r6
   26b04:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   26b08:	4628      	mov	r0, r5
   26b0a:	4621      	mov	r1, r4
   26b0c:	bd70      	pop	{r4, r5, r6, pc}
   26b0e:	bf00      	nop
   26b10:	2000384c 	.word	0x2000384c
   26b14:	00030879 	.word	0x00030879
   26b18:	0003013d 	.word	0x0003013d

00026b1c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   26b1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26b1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b22:	f3ef 8511 	mrs	r5, BASEPRI
   26b26:	f383 8812 	msr	BASEPRI_MAX, r3
   26b2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b2e:	4812      	ldr	r0, [pc, #72]	; (26b78 <z_get_next_timeout_expiry+0x5c>)
   26b30:	f7fd fd72 	bl	24618 <z_spin_lock_valid>
   26b34:	b940      	cbnz	r0, 26b48 <z_get_next_timeout_expiry+0x2c>
   26b36:	4911      	ldr	r1, [pc, #68]	; (26b7c <z_get_next_timeout_expiry+0x60>)
   26b38:	4811      	ldr	r0, [pc, #68]	; (26b80 <z_get_next_timeout_expiry+0x64>)
   26b3a:	2294      	movs	r2, #148	; 0x94
   26b3c:	f004 f806 	bl	2ab4c <assert_print>
   26b40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b42:	480e      	ldr	r0, [pc, #56]	; (26b7c <z_get_next_timeout_expiry+0x60>)
   26b44:	f003 fffb 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26b48:	480b      	ldr	r0, [pc, #44]	; (26b78 <z_get_next_timeout_expiry+0x5c>)
   26b4a:	f7fd fd83 	bl	24654 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   26b4e:	f7ff fe5f 	bl	26810 <next_timeout>
   26b52:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b54:	4808      	ldr	r0, [pc, #32]	; (26b78 <z_get_next_timeout_expiry+0x5c>)
   26b56:	f7fd fd6d 	bl	24634 <z_spin_unlock_valid>
   26b5a:	b930      	cbnz	r0, 26b6a <z_get_next_timeout_expiry+0x4e>
   26b5c:	4907      	ldr	r1, [pc, #28]	; (26b7c <z_get_next_timeout_expiry+0x60>)
   26b5e:	4808      	ldr	r0, [pc, #32]	; (26b80 <z_get_next_timeout_expiry+0x64>)
   26b60:	22c2      	movs	r2, #194	; 0xc2
   26b62:	f003 fff3 	bl	2ab4c <assert_print>
   26b66:	21c2      	movs	r1, #194	; 0xc2
   26b68:	e7eb      	b.n	26b42 <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   26b6a:	f385 8811 	msr	BASEPRI, r5
   26b6e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   26b72:	4620      	mov	r0, r4
   26b74:	bd38      	pop	{r3, r4, r5, pc}
   26b76:	bf00      	nop
   26b78:	2000384c 	.word	0x2000384c
   26b7c:	00030879 	.word	0x00030879
   26b80:	0003013d 	.word	0x0003013d

00026b84 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   26b84:	b570      	push	{r4, r5, r6, lr}
   26b86:	4604      	mov	r4, r0
   26b88:	460d      	mov	r5, r1
	__asm__ volatile(
   26b8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b8e:	f3ef 8611 	mrs	r6, BASEPRI
   26b92:	f383 8812 	msr	BASEPRI_MAX, r3
   26b96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b9a:	4816      	ldr	r0, [pc, #88]	; (26bf4 <z_set_timeout_expiry+0x70>)
   26b9c:	f7fd fd3c 	bl	24618 <z_spin_lock_valid>
   26ba0:	b940      	cbnz	r0, 26bb4 <z_set_timeout_expiry+0x30>
   26ba2:	4915      	ldr	r1, [pc, #84]	; (26bf8 <z_set_timeout_expiry+0x74>)
   26ba4:	4815      	ldr	r0, [pc, #84]	; (26bfc <z_set_timeout_expiry+0x78>)
   26ba6:	2294      	movs	r2, #148	; 0x94
   26ba8:	f003 ffd0 	bl	2ab4c <assert_print>
   26bac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bae:	4812      	ldr	r0, [pc, #72]	; (26bf8 <z_set_timeout_expiry+0x74>)
   26bb0:	f003 ffc5 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26bb4:	480f      	ldr	r0, [pc, #60]	; (26bf4 <z_set_timeout_expiry+0x70>)
   26bb6:	f7fd fd4d 	bl	24654 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   26bba:	f7ff fe29 	bl	26810 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   26bbe:	2801      	cmp	r0, #1
   26bc0:	dd07      	ble.n	26bd2 <z_set_timeout_expiry+0x4e>
   26bc2:	42a0      	cmp	r0, r4
   26bc4:	db05      	blt.n	26bd2 <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   26bc6:	42a0      	cmp	r0, r4
   26bc8:	4629      	mov	r1, r5
   26bca:	bfa8      	it	ge
   26bcc:	4620      	movge	r0, r4
   26bce:	f7fa fb7f 	bl	212d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bd2:	4808      	ldr	r0, [pc, #32]	; (26bf4 <z_set_timeout_expiry+0x70>)
   26bd4:	f7fd fd2e 	bl	24634 <z_spin_unlock_valid>
   26bd8:	b930      	cbnz	r0, 26be8 <z_set_timeout_expiry+0x64>
   26bda:	4907      	ldr	r1, [pc, #28]	; (26bf8 <z_set_timeout_expiry+0x74>)
   26bdc:	4807      	ldr	r0, [pc, #28]	; (26bfc <z_set_timeout_expiry+0x78>)
   26bde:	22c2      	movs	r2, #194	; 0xc2
   26be0:	f003 ffb4 	bl	2ab4c <assert_print>
   26be4:	21c2      	movs	r1, #194	; 0xc2
   26be6:	e7e2      	b.n	26bae <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   26be8:	f386 8811 	msr	BASEPRI, r6
   26bec:	f3bf 8f6f 	isb	sy
		}
	}
}
   26bf0:	bd70      	pop	{r4, r5, r6, pc}
   26bf2:	bf00      	nop
   26bf4:	2000384c 	.word	0x2000384c
   26bf8:	00030879 	.word	0x00030879
   26bfc:	0003013d 	.word	0x0003013d

00026c00 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   26c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c04:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   26c06:	f7ff f891 	bl	25d2c <z_time_slice>
	__asm__ volatile(
   26c0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c0e:	f3ef 8711 	mrs	r7, BASEPRI
   26c12:	f383 8812 	msr	BASEPRI_MAX, r3
   26c16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c1a:	483a      	ldr	r0, [pc, #232]	; (26d04 <sys_clock_announce+0x104>)
   26c1c:	f7fd fcfc 	bl	24618 <z_spin_lock_valid>
   26c20:	b940      	cbnz	r0, 26c34 <sys_clock_announce+0x34>
   26c22:	4939      	ldr	r1, [pc, #228]	; (26d08 <sys_clock_announce+0x108>)
   26c24:	4839      	ldr	r0, [pc, #228]	; (26d0c <sys_clock_announce+0x10c>)
   26c26:	2294      	movs	r2, #148	; 0x94
   26c28:	f003 ff90 	bl	2ab4c <assert_print>
   26c2c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c2e:	4836      	ldr	r0, [pc, #216]	; (26d08 <sys_clock_announce+0x108>)
   26c30:	f003 ff85 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26c34:	4833      	ldr	r0, [pc, #204]	; (26d04 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26c36:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 26d10 <sys_clock_announce+0x110>
	return list->head == list;
   26c3a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 26d14 <sys_clock_announce+0x114>
   26c3e:	f7fd fd09 	bl	24654 <z_spin_lock_set_owner>
   26c42:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26c46:	4a34      	ldr	r2, [pc, #208]	; (26d18 <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   26c48:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26c4c:	454d      	cmp	r5, r9
		curr_tick += dt;
   26c4e:	e9d2 3c00 	ldrd	r3, ip, [r2]
   26c52:	ea4f 71e4 	mov.w	r1, r4, asr #31
   26c56:	d00b      	beq.n	26c70 <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26c58:	b155      	cbz	r5, 26c70 <sys_clock_announce+0x70>
   26c5a:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   26c5e:	42b4      	cmp	r4, r6
   26c60:	eb71 0e00 	sbcs.w	lr, r1, r0
   26c64:	da1b      	bge.n	26c9e <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26c66:	1b36      	subs	r6, r6, r4
   26c68:	eb60 0001 	sbc.w	r0, r0, r1
   26c6c:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   26c70:	18e3      	adds	r3, r4, r3
   26c72:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   26c76:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   26c78:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   26c7c:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   26c80:	f7ff fdc6 	bl	26810 <next_timeout>
   26c84:	4621      	mov	r1, r4
   26c86:	f7fa fb23 	bl	212d0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c8a:	481e      	ldr	r0, [pc, #120]	; (26d04 <sys_clock_announce+0x104>)
   26c8c:	f7fd fcd2 	bl	24634 <z_spin_unlock_valid>
   26c90:	b1a8      	cbz	r0, 26cbe <sys_clock_announce+0xbe>
	__asm__ volatile(
   26c92:	f387 8811 	msr	BASEPRI, r7
   26c96:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   26c9e:	18f3      	adds	r3, r6, r3
   26ca0:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   26ca4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   26ca8:	2200      	movs	r2, #0
   26caa:	2300      	movs	r3, #0
		remove_timeout(t);
   26cac:	4628      	mov	r0, r5
		t->dticks = 0;
   26cae:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   26cb2:	f7ff fdd5 	bl	26860 <remove_timeout>
   26cb6:	4813      	ldr	r0, [pc, #76]	; (26d04 <sys_clock_announce+0x104>)
   26cb8:	f7fd fcbc 	bl	24634 <z_spin_unlock_valid>
   26cbc:	b930      	cbnz	r0, 26ccc <sys_clock_announce+0xcc>
   26cbe:	4912      	ldr	r1, [pc, #72]	; (26d08 <sys_clock_announce+0x108>)
   26cc0:	4812      	ldr	r0, [pc, #72]	; (26d0c <sys_clock_announce+0x10c>)
   26cc2:	22c2      	movs	r2, #194	; 0xc2
   26cc4:	f003 ff42 	bl	2ab4c <assert_print>
   26cc8:	21c2      	movs	r1, #194	; 0xc2
   26cca:	e7b0      	b.n	26c2e <sys_clock_announce+0x2e>
   26ccc:	f387 8811 	msr	BASEPRI, r7
   26cd0:	f3bf 8f6f 	isb	sy
		t->fn(t);
   26cd4:	68ab      	ldr	r3, [r5, #8]
   26cd6:	4628      	mov	r0, r5
   26cd8:	4798      	blx	r3
	__asm__ volatile(
   26cda:	f04f 0340 	mov.w	r3, #64	; 0x40
   26cde:	f3ef 8711 	mrs	r7, BASEPRI
   26ce2:	f383 8812 	msr	BASEPRI_MAX, r3
   26ce6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26cea:	4806      	ldr	r0, [pc, #24]	; (26d04 <sys_clock_announce+0x104>)
   26cec:	f7fd fc94 	bl	24618 <z_spin_lock_valid>
   26cf0:	2800      	cmp	r0, #0
   26cf2:	d096      	beq.n	26c22 <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   26cf4:	4803      	ldr	r0, [pc, #12]	; (26d04 <sys_clock_announce+0x104>)
   26cf6:	f7fd fcad 	bl	24654 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   26cfa:	f8d8 4000 	ldr.w	r4, [r8]
   26cfe:	1ba4      	subs	r4, r4, r6
   26d00:	e79f      	b.n	26c42 <sys_clock_announce+0x42>
   26d02:	bf00      	nop
   26d04:	2000384c 	.word	0x2000384c
   26d08:	00030879 	.word	0x00030879
   26d0c:	0003013d 	.word	0x0003013d
   26d10:	20003848 	.word	0x20003848
   26d14:	20000958 	.word	0x20000958
   26d18:	20002b60 	.word	0x20002b60

00026d1c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   26d1c:	b570      	push	{r4, r5, r6, lr}
   26d1e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d22:	f3ef 8611 	mrs	r6, BASEPRI
   26d26:	f383 8812 	msr	BASEPRI_MAX, r3
   26d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d2e:	4815      	ldr	r0, [pc, #84]	; (26d84 <sys_clock_tick_get+0x68>)
   26d30:	f7fd fc72 	bl	24618 <z_spin_lock_valid>
   26d34:	b940      	cbnz	r0, 26d48 <sys_clock_tick_get+0x2c>
   26d36:	4914      	ldr	r1, [pc, #80]	; (26d88 <sys_clock_tick_get+0x6c>)
   26d38:	4814      	ldr	r0, [pc, #80]	; (26d8c <sys_clock_tick_get+0x70>)
   26d3a:	2294      	movs	r2, #148	; 0x94
   26d3c:	f003 ff06 	bl	2ab4c <assert_print>
   26d40:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d42:	4811      	ldr	r0, [pc, #68]	; (26d88 <sys_clock_tick_get+0x6c>)
   26d44:	f003 fefb 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26d48:	480e      	ldr	r0, [pc, #56]	; (26d84 <sys_clock_tick_get+0x68>)
   26d4a:	f7fd fc83 	bl	24654 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   26d4e:	f7ff fd55 	bl	267fc <elapsed>
   26d52:	4a0f      	ldr	r2, [pc, #60]	; (26d90 <sys_clock_tick_get+0x74>)
   26d54:	e9d2 4500 	ldrd	r4, r5, [r2]
   26d58:	1904      	adds	r4, r0, r4
   26d5a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26d5e:	4809      	ldr	r0, [pc, #36]	; (26d84 <sys_clock_tick_get+0x68>)
   26d60:	f7fd fc68 	bl	24634 <z_spin_unlock_valid>
   26d64:	b930      	cbnz	r0, 26d74 <sys_clock_tick_get+0x58>
   26d66:	4908      	ldr	r1, [pc, #32]	; (26d88 <sys_clock_tick_get+0x6c>)
   26d68:	4808      	ldr	r0, [pc, #32]	; (26d8c <sys_clock_tick_get+0x70>)
   26d6a:	22c2      	movs	r2, #194	; 0xc2
   26d6c:	f003 feee 	bl	2ab4c <assert_print>
   26d70:	21c2      	movs	r1, #194	; 0xc2
   26d72:	e7e6      	b.n	26d42 <sys_clock_tick_get+0x26>
	__asm__ volatile(
   26d74:	f386 8811 	msr	BASEPRI, r6
   26d78:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   26d7c:	4620      	mov	r0, r4
   26d7e:	4629      	mov	r1, r5
   26d80:	bd70      	pop	{r4, r5, r6, pc}
   26d82:	bf00      	nop
   26d84:	2000384c 	.word	0x2000384c
   26d88:	00030879 	.word	0x00030879
   26d8c:	0003013d 	.word	0x0003013d
   26d90:	20002b60 	.word	0x20002b60

00026d94 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   26d94:	b570      	push	{r4, r5, r6, lr}
   26d96:	4604      	mov	r4, r0
	__asm__ volatile(
   26d98:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d9c:	f3ef 8511 	mrs	r5, BASEPRI
   26da0:	f383 8812 	msr	BASEPRI_MAX, r3
   26da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26da8:	4844      	ldr	r0, [pc, #272]	; (26ebc <z_timer_expiration_handler+0x128>)
   26daa:	f7fd fc35 	bl	24618 <z_spin_lock_valid>
   26dae:	b940      	cbnz	r0, 26dc2 <z_timer_expiration_handler+0x2e>
   26db0:	4943      	ldr	r1, [pc, #268]	; (26ec0 <z_timer_expiration_handler+0x12c>)
   26db2:	4844      	ldr	r0, [pc, #272]	; (26ec4 <z_timer_expiration_handler+0x130>)
   26db4:	2294      	movs	r2, #148	; 0x94
   26db6:	f003 fec9 	bl	2ab4c <assert_print>
   26dba:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26dbc:	4840      	ldr	r0, [pc, #256]	; (26ec0 <z_timer_expiration_handler+0x12c>)
   26dbe:	f003 febe 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   26dc2:	483e      	ldr	r0, [pc, #248]	; (26ebc <z_timer_expiration_handler+0x128>)
   26dc4:	f7fd fc46 	bl	24654 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   26dc8:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   26dcc:	3301      	adds	r3, #1
   26dce:	f142 0200 	adc.w	r2, r2, #0
   26dd2:	2b02      	cmp	r3, #2
   26dd4:	f172 0200 	sbcs.w	r2, r2, #0
   26dd8:	d322      	bcc.n	26e20 <z_timer_expiration_handler+0x8c>
	return z_impl_k_uptime_ticks();
   26dda:	f007 ffa4 	bl	2ed26 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26dde:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   26de2:	3001      	adds	r0, #1
   26de4:	f141 0100 	adc.w	r1, r1, #0
   26de8:	18c0      	adds	r0, r0, r3
   26dea:	eb41 0102 	adc.w	r1, r1, r2
   26dee:	2801      	cmp	r0, #1
   26df0:	f171 0100 	sbcs.w	r1, r1, #0
   26df4:	db24      	blt.n	26e40 <z_timer_expiration_handler+0xac>
   26df6:	f007 ff96 	bl	2ed26 <z_impl_k_uptime_ticks>
   26dfa:	3001      	adds	r0, #1
   26dfc:	f141 0300 	adc.w	r3, r1, #0
   26e00:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   26e04:	1880      	adds	r0, r0, r2
   26e06:	f06f 0201 	mvn.w	r2, #1
   26e0a:	eb43 0301 	adc.w	r3, r3, r1
   26e0e:	1a12      	subs	r2, r2, r0
   26e10:	f04f 31ff 	mov.w	r1, #4294967295
   26e14:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26e18:	492b      	ldr	r1, [pc, #172]	; (26ec8 <z_timer_expiration_handler+0x134>)
   26e1a:	4620      	mov	r0, r4
   26e1c:	f7ff fd60 	bl	268e0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   26e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26e22:	3301      	adds	r3, #1
   26e24:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   26e26:	6a23      	ldr	r3, [r4, #32]
   26e28:	b333      	cbz	r3, 26e78 <z_timer_expiration_handler+0xe4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e2a:	4824      	ldr	r0, [pc, #144]	; (26ebc <z_timer_expiration_handler+0x128>)
   26e2c:	f7fd fc02 	bl	24634 <z_spin_unlock_valid>
   26e30:	b958      	cbnz	r0, 26e4a <z_timer_expiration_handler+0xb6>
   26e32:	4923      	ldr	r1, [pc, #140]	; (26ec0 <z_timer_expiration_handler+0x12c>)
   26e34:	4823      	ldr	r0, [pc, #140]	; (26ec4 <z_timer_expiration_handler+0x130>)
   26e36:	22c2      	movs	r2, #194	; 0xc2
   26e38:	f003 fe88 	bl	2ab4c <assert_print>
   26e3c:	21c2      	movs	r1, #194	; 0xc2
   26e3e:	e7bd      	b.n	26dbc <z_timer_expiration_handler+0x28>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   26e40:	f06f 0201 	mvn.w	r2, #1
   26e44:	f04f 33ff 	mov.w	r3, #4294967295
   26e48:	e7e6      	b.n	26e18 <z_timer_expiration_handler+0x84>
	__asm__ volatile(
   26e4a:	f385 8811 	msr	BASEPRI, r5
   26e4e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   26e52:	6a23      	ldr	r3, [r4, #32]
   26e54:	4620      	mov	r0, r4
   26e56:	4798      	blx	r3
	__asm__ volatile(
   26e58:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e5c:	f3ef 8511 	mrs	r5, BASEPRI
   26e60:	f383 8812 	msr	BASEPRI_MAX, r3
   26e64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e68:	4814      	ldr	r0, [pc, #80]	; (26ebc <z_timer_expiration_handler+0x128>)
   26e6a:	f7fd fbd5 	bl	24618 <z_spin_lock_valid>
   26e6e:	2800      	cmp	r0, #0
   26e70:	d09e      	beq.n	26db0 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   26e72:	4812      	ldr	r0, [pc, #72]	; (26ebc <z_timer_expiration_handler+0x128>)
   26e74:	f7fd fbee 	bl	24654 <z_spin_lock_set_owner>
	return list->head == list;
   26e78:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26e7c:	42a6      	cmp	r6, r4
   26e7e:	d000      	beq.n	26e82 <z_timer_expiration_handler+0xee>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   26e80:	b94e      	cbnz	r6, 26e96 <z_timer_expiration_handler+0x102>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26e82:	480e      	ldr	r0, [pc, #56]	; (26ebc <z_timer_expiration_handler+0x128>)
   26e84:	f7fd fbd6 	bl	24634 <z_spin_unlock_valid>
   26e88:	2800      	cmp	r0, #0
   26e8a:	d0d2      	beq.n	26e32 <z_timer_expiration_handler+0x9e>
	__asm__ volatile(
   26e8c:	f385 8811 	msr	BASEPRI, r5
   26e90:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   26e94:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   26e96:	4630      	mov	r0, r6
   26e98:	f7fe fd92 	bl	259c0 <z_unpend_thread_no_timeout>
   26e9c:	2300      	movs	r3, #0
   26e9e:	4807      	ldr	r0, [pc, #28]	; (26ebc <z_timer_expiration_handler+0x128>)
   26ea0:	67f3      	str	r3, [r6, #124]	; 0x7c
   26ea2:	f7fd fbc7 	bl	24634 <z_spin_unlock_valid>
   26ea6:	2800      	cmp	r0, #0
   26ea8:	d0c3      	beq.n	26e32 <z_timer_expiration_handler+0x9e>
   26eaa:	f385 8811 	msr	BASEPRI, r5
   26eae:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   26eb2:	4630      	mov	r0, r6
}
   26eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   26eb8:	f7fe bd4e 	b.w	25958 <z_ready_thread>
   26ebc:	20003850 	.word	0x20003850
   26ec0:	00030879 	.word	0x00030879
   26ec4:	0003013d 	.word	0x0003013d
   26ec8:	00026d95 	.word	0x00026d95

00026ecc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   26ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
   26ed4:	bf08      	it	eq
   26ed6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   26eda:	4605      	mov	r5, r0
   26edc:	4614      	mov	r4, r2
   26ede:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   26ee2:	4619      	mov	r1, r3
   26ee4:	4691      	mov	r9, r2
   26ee6:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   26ee8:	d037      	beq.n	26f5a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   26eea:	f1b0 3fff 	cmp.w	r0, #4294967295
   26eee:	bf08      	it	eq
   26ef0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   26ef4:	4637      	mov	r7, r6
   26ef6:	4682      	mov	sl, r0
   26ef8:	d011      	beq.n	26f1e <z_impl_k_timer_start+0x52>
   26efa:	ea50 0306 	orrs.w	r3, r0, r6
   26efe:	d00e      	beq.n	26f1e <z_impl_k_timer_start+0x52>
   26f00:	1c72      	adds	r2, r6, #1
   26f02:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   26f06:	db0a      	blt.n	26f1e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   26f08:	2e02      	cmp	r6, #2
   26f0a:	4684      	mov	ip, r0
   26f0c:	f170 0000 	sbcs.w	r0, r0, #0
   26f10:	bfbc      	itt	lt
   26f12:	2702      	movlt	r7, #2
   26f14:	f04f 0c00 	movlt.w	ip, #0
   26f18:	3f01      	subs	r7, #1
   26f1a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   26f1e:	1c63      	adds	r3, r4, #1
   26f20:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   26f24:	db0a      	blt.n	26f3c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   26f26:	2c01      	cmp	r4, #1
   26f28:	f171 0300 	sbcs.w	r3, r1, #0
   26f2c:	4622      	mov	r2, r4
   26f2e:	bfbc      	itt	lt
   26f30:	2201      	movlt	r2, #1
   26f32:	2100      	movlt	r1, #0
   26f34:	f112 39ff 	adds.w	r9, r2, #4294967295
   26f38:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   26f3c:	4628      	mov	r0, r5
   26f3e:	f7ff fd7b 	bl	26a38 <z_abort_timeout>
	timer->period = period;
   26f42:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   26f46:	2300      	movs	r3, #0
   26f48:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26f4a:	464a      	mov	r2, r9
   26f4c:	4643      	mov	r3, r8
   26f4e:	4628      	mov	r0, r5
   26f50:	4903      	ldr	r1, [pc, #12]	; (26f60 <z_impl_k_timer_start+0x94>)
		     duration);
}
   26f52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   26f56:	f7ff bcc3 	b.w	268e0 <z_add_timeout>
}
   26f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26f5e:	bf00      	nop
   26f60:	00026d95 	.word	0x00026d95

00026f64 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   26f64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   26f68:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f6a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 27100 <register_events+0x19c>
{
   26f6e:	9301      	str	r3, [sp, #4]
   26f70:	460f      	mov	r7, r1
   26f72:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   26f74:	4680      	mov	r8, r0
	int events_registered = 0;
   26f76:	462e      	mov	r6, r5
	event->poller = NULL;
   26f78:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   26f7a:	42bd      	cmp	r5, r7
   26f7c:	db03      	blt.n	26f86 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   26f7e:	4630      	mov	r0, r6
   26f80:	b003      	add	sp, #12
   26f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   26f86:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f8a:	f3ef 8b11 	mrs	fp, BASEPRI
   26f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   26f92:	f3bf 8f6f 	isb	sy
   26f96:	4648      	mov	r0, r9
   26f98:	f7fd fb3e 	bl	24618 <z_spin_lock_valid>
   26f9c:	b938      	cbnz	r0, 26fae <register_events+0x4a>
   26f9e:	4959      	ldr	r1, [pc, #356]	; (27104 <register_events+0x1a0>)
   26fa0:	4859      	ldr	r0, [pc, #356]	; (27108 <register_events+0x1a4>)
   26fa2:	2294      	movs	r2, #148	; 0x94
   26fa4:	f003 fdd2 	bl	2ab4c <assert_print>
   26fa8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26faa:	4856      	ldr	r0, [pc, #344]	; (27104 <register_events+0x1a0>)
   26fac:	e05b      	b.n	27066 <register_events+0x102>
	z_spin_lock_set_owner(l);
   26fae:	4648      	mov	r0, r9
   26fb0:	f7fd fb50 	bl	24654 <z_spin_lock_set_owner>
	switch (event->type) {
   26fb4:	f898 300d 	ldrb.w	r3, [r8, #13]
   26fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26fbc:	2b08      	cmp	r3, #8
   26fbe:	d84b      	bhi.n	27058 <register_events+0xf4>
   26fc0:	e8df f003 	tbb	[pc, r3]
   26fc4:	4a053c29 	.word	0x4a053c29
   26fc8:	4a4a4a25 	.word	0x4a4a4a25
   26fcc:	43          	.byte	0x43
   26fcd:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   26fce:	f8d8 3010 	ldr.w	r3, [r8, #16]
   26fd2:	689b      	ldr	r3, [r3, #8]
   26fd4:	b1fb      	cbz	r3, 27016 <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   26fd6:	2302      	movs	r3, #2
	event->state |= state;
   26fd8:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   26fdc:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   26fe0:	f3c2 3086 	ubfx	r0, r2, #14, #7
   26fe4:	4303      	orrs	r3, r0
   26fe6:	f363 3294 	bfi	r2, r3, #14, #7
   26fea:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   26fee:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26ff2:	4648      	mov	r0, r9
   26ff4:	f7fd fb1e 	bl	24634 <z_spin_unlock_valid>
   26ff8:	f108 0814 	add.w	r8, r8, #20
   26ffc:	2800      	cmp	r0, #0
   26ffe:	d179      	bne.n	270f4 <register_events+0x190>
   27000:	4940      	ldr	r1, [pc, #256]	; (27104 <register_events+0x1a0>)
   27002:	4841      	ldr	r0, [pc, #260]	; (27108 <register_events+0x1a4>)
   27004:	22c2      	movs	r2, #194	; 0xc2
   27006:	f003 fda1 	bl	2ab4c <assert_print>
   2700a:	21c2      	movs	r1, #194	; 0xc2
   2700c:	e7cd      	b.n	26faa <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   2700e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   27012:	681b      	ldr	r3, [r3, #0]
   27014:	bb4b      	cbnz	r3, 2706a <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   27016:	9b01      	ldr	r3, [sp, #4]
   27018:	2b00      	cmp	r3, #0
   2701a:	d1ea      	bne.n	26ff2 <register_events+0x8e>
   2701c:	7823      	ldrb	r3, [r4, #0]
   2701e:	2b00      	cmp	r3, #0
   27020:	d0e7      	beq.n	26ff2 <register_events+0x8e>
	switch (event->type) {
   27022:	f898 300d 	ldrb.w	r3, [r8, #13]
   27026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2702a:	2b08      	cmp	r3, #8
   2702c:	d85b      	bhi.n	270e6 <register_events+0x182>
   2702e:	e8df f003 	tbb	[pc, r3]
   27032:	3f2d      	.short	0x3f2d
   27034:	5a315a1e 	.word	0x5a315a1e
   27038:	5a5a      	.short	0x5a5a
   2703a:	4c          	.byte	0x4c
   2703b:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2703c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   27040:	689b      	ldr	r3, [r3, #8]
   27042:	2b00      	cmp	r3, #0
   27044:	d0e7      	beq.n	27016 <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   27046:	2301      	movs	r3, #1
   27048:	e7c6      	b.n	26fd8 <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   2704a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27050:	2b00      	cmp	r3, #0
   27052:	d0e0      	beq.n	27016 <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27054:	2310      	movs	r3, #16
   27056:	e7bf      	b.n	26fd8 <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   27058:	492c      	ldr	r1, [pc, #176]	; (2710c <register_events+0x1a8>)
   2705a:	482b      	ldr	r0, [pc, #172]	; (27108 <register_events+0x1a4>)
   2705c:	2263      	movs	r2, #99	; 0x63
   2705e:	f003 fd75 	bl	2ab4c <assert_print>
   27062:	2163      	movs	r1, #99	; 0x63
   27064:	4829      	ldr	r0, [pc, #164]	; (2710c <register_events+0x1a8>)
   27066:	f003 fd6a 	bl	2ab3e <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2706a:	2304      	movs	r3, #4
   2706c:	e7b4      	b.n	26fd8 <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2706e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   27072:	b930      	cbnz	r0, 27082 <register_events+0x11e>
   27074:	4925      	ldr	r1, [pc, #148]	; (2710c <register_events+0x1a8>)
   27076:	4824      	ldr	r0, [pc, #144]	; (27108 <register_events+0x1a4>)
   27078:	228d      	movs	r2, #141	; 0x8d
   2707a:	f003 fd67 	bl	2ab4c <assert_print>
   2707e:	218d      	movs	r1, #141	; 0x8d
   27080:	e7f0      	b.n	27064 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   27082:	4622      	mov	r2, r4
   27084:	4641      	mov	r1, r8
   27086:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   27088:	f007 fe9e 	bl	2edc8 <add_event>
	event->poller = poller;
   2708c:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   27090:	3601      	adds	r6, #1
   27092:	e7ae      	b.n	26ff2 <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27094:	f8d8 0010 	ldr.w	r0, [r8, #16]
   27098:	b930      	cbnz	r0, 270a8 <register_events+0x144>
   2709a:	491c      	ldr	r1, [pc, #112]	; (2710c <register_events+0x1a8>)
   2709c:	481a      	ldr	r0, [pc, #104]	; (27108 <register_events+0x1a4>)
   2709e:	2291      	movs	r2, #145	; 0x91
   270a0:	f003 fd54 	bl	2ab4c <assert_print>
   270a4:	2191      	movs	r1, #145	; 0x91
   270a6:	e7dd      	b.n	27064 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   270a8:	4622      	mov	r2, r4
   270aa:	4641      	mov	r1, r8
   270ac:	3014      	adds	r0, #20
   270ae:	e7eb      	b.n	27088 <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   270b0:	f8d8 0010 	ldr.w	r0, [r8, #16]
   270b4:	b930      	cbnz	r0, 270c4 <register_events+0x160>
   270b6:	4915      	ldr	r1, [pc, #84]	; (2710c <register_events+0x1a8>)
   270b8:	4813      	ldr	r0, [pc, #76]	; (27108 <register_events+0x1a4>)
   270ba:	2295      	movs	r2, #149	; 0x95
   270bc:	f003 fd46 	bl	2ab4c <assert_print>
   270c0:	2195      	movs	r1, #149	; 0x95
   270c2:	e7cf      	b.n	27064 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   270c4:	4622      	mov	r2, r4
   270c6:	4641      	mov	r1, r8
   270c8:	e7de      	b.n	27088 <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   270ca:	f8d8 0010 	ldr.w	r0, [r8, #16]
   270ce:	b930      	cbnz	r0, 270de <register_events+0x17a>
   270d0:	490e      	ldr	r1, [pc, #56]	; (2710c <register_events+0x1a8>)
   270d2:	480d      	ldr	r0, [pc, #52]	; (27108 <register_events+0x1a4>)
   270d4:	2299      	movs	r2, #153	; 0x99
   270d6:	f003 fd39 	bl	2ab4c <assert_print>
   270da:	2199      	movs	r1, #153	; 0x99
   270dc:	e7c2      	b.n	27064 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   270de:	4622      	mov	r2, r4
   270e0:	4641      	mov	r1, r8
   270e2:	3028      	adds	r0, #40	; 0x28
   270e4:	e7d0      	b.n	27088 <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   270e6:	4909      	ldr	r1, [pc, #36]	; (2710c <register_events+0x1a8>)
   270e8:	4807      	ldr	r0, [pc, #28]	; (27108 <register_events+0x1a4>)
   270ea:	22a6      	movs	r2, #166	; 0xa6
   270ec:	f003 fd2e 	bl	2ab4c <assert_print>
   270f0:	21a6      	movs	r1, #166	; 0xa6
   270f2:	e7b7      	b.n	27064 <register_events+0x100>
	__asm__ volatile(
   270f4:	f38b 8811 	msr	BASEPRI, fp
   270f8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   270fc:	3501      	adds	r5, #1
   270fe:	e73c      	b.n	26f7a <register_events+0x16>
   27100:	20003854 	.word	0x20003854
   27104:	00030879 	.word	0x00030879
   27108:	0003013d 	.word	0x0003013d
   2710c:	00034138 	.word	0x00034138

00027110 <clear_event_registrations>:
{
   27110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27114:	2314      	movs	r3, #20
   27116:	4f3e      	ldr	r7, [pc, #248]	; (27210 <clear_event_registrations+0x100>)
   27118:	4615      	mov	r5, r2
	while (num_events--) {
   2711a:	460c      	mov	r4, r1
   2711c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   27120:	2600      	movs	r6, #0
	while (num_events--) {
   27122:	b90c      	cbnz	r4, 27128 <clear_event_registrations+0x18>
}
   27124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   27128:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2712c:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   27130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27134:	f1a0 0814 	sub.w	r8, r0, #20
   27138:	2b08      	cmp	r3, #8
   2713a:	d830      	bhi.n	2719e <clear_event_registrations+0x8e>
   2713c:	e8df f003 	tbb	[pc, r3]
   27140:	2f051b3f 	.word	0x2f051b3f
   27144:	2f2f2f11 	.word	0x2f2f2f11
   27148:	25          	.byte	0x25
   27149:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2714a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2714e:	bb6b      	cbnz	r3, 271ac <clear_event_registrations+0x9c>
   27150:	4930      	ldr	r1, [pc, #192]	; (27214 <clear_event_registrations+0x104>)
   27152:	4831      	ldr	r0, [pc, #196]	; (27218 <clear_event_registrations+0x108>)
   27154:	22b6      	movs	r2, #182	; 0xb6
   27156:	f003 fcf9 	bl	2ab4c <assert_print>
   2715a:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2715c:	482d      	ldr	r0, [pc, #180]	; (27214 <clear_event_registrations+0x104>)
   2715e:	f003 fcee 	bl	2ab3e <assert_post_action>
   27162:	f850 3c04 	ldr.w	r3, [r0, #-4]
   27166:	bb0b      	cbnz	r3, 271ac <clear_event_registrations+0x9c>
   27168:	492a      	ldr	r1, [pc, #168]	; (27214 <clear_event_registrations+0x104>)
   2716a:	482b      	ldr	r0, [pc, #172]	; (27218 <clear_event_registrations+0x108>)
   2716c:	22ba      	movs	r2, #186	; 0xba
   2716e:	f003 fced 	bl	2ab4c <assert_print>
   27172:	21ba      	movs	r1, #186	; 0xba
   27174:	e7f2      	b.n	2715c <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27176:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2717a:	b9bb      	cbnz	r3, 271ac <clear_event_registrations+0x9c>
   2717c:	4925      	ldr	r1, [pc, #148]	; (27214 <clear_event_registrations+0x104>)
   2717e:	4826      	ldr	r0, [pc, #152]	; (27218 <clear_event_registrations+0x108>)
   27180:	22be      	movs	r2, #190	; 0xbe
   27182:	f003 fce3 	bl	2ab4c <assert_print>
   27186:	21be      	movs	r1, #190	; 0xbe
   27188:	e7e8      	b.n	2715c <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2718a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2718e:	b96b      	cbnz	r3, 271ac <clear_event_registrations+0x9c>
   27190:	4920      	ldr	r1, [pc, #128]	; (27214 <clear_event_registrations+0x104>)
   27192:	4821      	ldr	r0, [pc, #132]	; (27218 <clear_event_registrations+0x108>)
   27194:	22c2      	movs	r2, #194	; 0xc2
   27196:	f003 fcd9 	bl	2ab4c <assert_print>
   2719a:	21c2      	movs	r1, #194	; 0xc2
   2719c:	e7de      	b.n	2715c <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   2719e:	491d      	ldr	r1, [pc, #116]	; (27214 <clear_event_registrations+0x104>)
   271a0:	481d      	ldr	r0, [pc, #116]	; (27218 <clear_event_registrations+0x108>)
   271a2:	22cf      	movs	r2, #207	; 0xcf
   271a4:	f003 fcd2 	bl	2ab4c <assert_print>
   271a8:	21cf      	movs	r1, #207	; 0xcf
   271aa:	e7d7      	b.n	2715c <clear_event_registrations+0x4c>
	return node->next != NULL;
   271ac:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   271b0:	b12b      	cbz	r3, 271be <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   271b2:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   271b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   271b8:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   271ba:	e940 6605 	strd	r6, r6, [r0, #-20]
   271be:	4638      	mov	r0, r7
   271c0:	f7fd fa38 	bl	24634 <z_spin_unlock_valid>
   271c4:	b938      	cbnz	r0, 271d6 <clear_event_registrations+0xc6>
   271c6:	4915      	ldr	r1, [pc, #84]	; (2721c <clear_event_registrations+0x10c>)
   271c8:	4813      	ldr	r0, [pc, #76]	; (27218 <clear_event_registrations+0x108>)
   271ca:	22c2      	movs	r2, #194	; 0xc2
   271cc:	f003 fcbe 	bl	2ab4c <assert_print>
   271d0:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271d2:	4812      	ldr	r0, [pc, #72]	; (2721c <clear_event_registrations+0x10c>)
   271d4:	e7c3      	b.n	2715e <clear_event_registrations+0x4e>
   271d6:	f385 8811 	msr	BASEPRI, r5
   271da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   271de:	f04f 0340 	mov.w	r3, #64	; 0x40
   271e2:	f3ef 8511 	mrs	r5, BASEPRI
   271e6:	f383 8812 	msr	BASEPRI_MAX, r3
   271ea:	f3bf 8f6f 	isb	sy
   271ee:	4638      	mov	r0, r7
   271f0:	f7fd fa12 	bl	24618 <z_spin_lock_valid>
   271f4:	3c01      	subs	r4, #1
   271f6:	b930      	cbnz	r0, 27206 <clear_event_registrations+0xf6>
   271f8:	4908      	ldr	r1, [pc, #32]	; (2721c <clear_event_registrations+0x10c>)
   271fa:	4807      	ldr	r0, [pc, #28]	; (27218 <clear_event_registrations+0x108>)
   271fc:	2294      	movs	r2, #148	; 0x94
   271fe:	f003 fca5 	bl	2ab4c <assert_print>
   27202:	2194      	movs	r1, #148	; 0x94
   27204:	e7e5      	b.n	271d2 <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   27206:	4638      	mov	r0, r7
   27208:	f7fd fa24 	bl	24654 <z_spin_lock_set_owner>
	return k;
   2720c:	4640      	mov	r0, r8
   2720e:	e788      	b.n	27122 <clear_event_registrations+0x12>
   27210:	20003854 	.word	0x20003854
   27214:	00034138 	.word	0x00034138
   27218:	0003013d 	.word	0x0003013d
   2721c:	00030879 	.word	0x00030879

00027220 <k_poll_event_init>:
{
   27220:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   27222:	b142      	cbz	r2, 27236 <k_poll_event_init+0x16>
   27224:	4911      	ldr	r1, [pc, #68]	; (2726c <k_poll_event_init+0x4c>)
   27226:	4812      	ldr	r0, [pc, #72]	; (27270 <k_poll_event_init+0x50>)
   27228:	222d      	movs	r2, #45	; 0x2d
   2722a:	f003 fc8f 	bl	2ab4c <assert_print>
   2722e:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   27230:	480e      	ldr	r0, [pc, #56]	; (2726c <k_poll_event_init+0x4c>)
   27232:	f003 fc84 	bl	2ab3e <assert_post_action>
   27236:	293f      	cmp	r1, #63	; 0x3f
   27238:	d906      	bls.n	27248 <k_poll_event_init+0x28>
   2723a:	490c      	ldr	r1, [pc, #48]	; (2726c <k_poll_event_init+0x4c>)
   2723c:	480c      	ldr	r0, [pc, #48]	; (27270 <k_poll_event_init+0x50>)
   2723e:	222f      	movs	r2, #47	; 0x2f
   27240:	f003 fc84 	bl	2ab4c <assert_print>
   27244:	212f      	movs	r1, #47	; 0x2f
   27246:	e7f3      	b.n	27230 <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   27248:	b933      	cbnz	r3, 27258 <k_poll_event_init+0x38>
   2724a:	4908      	ldr	r1, [pc, #32]	; (2726c <k_poll_event_init+0x4c>)
   2724c:	4808      	ldr	r0, [pc, #32]	; (27270 <k_poll_event_init+0x50>)
   2724e:	2230      	movs	r2, #48	; 0x30
   27250:	f003 fc7c 	bl	2ab4c <assert_print>
   27254:	2130      	movs	r1, #48	; 0x30
   27256:	e7eb      	b.n	27230 <k_poll_event_init+0x10>
	event->poller = NULL;
   27258:	6082      	str	r2, [r0, #8]
	event->type = type;
   2725a:	0209      	lsls	r1, r1, #8
   2725c:	7b02      	ldrb	r2, [r0, #12]
   2725e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   27262:	4311      	orrs	r1, r2
	event->obj = obj;
   27264:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   27268:	bd08      	pop	{r3, pc}
   2726a:	bf00      	nop
   2726c:	00034138 	.word	0x00034138
   27270:	0003013d 	.word	0x0003013d

00027274 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27278:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2727a:	4b51      	ldr	r3, [pc, #324]	; (273c0 <z_impl_k_poll+0x14c>)
   2727c:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   27280:	2301      	movs	r3, #1
{
   27282:	4617      	mov	r7, r2
   27284:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   27286:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2728a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2728e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   27292:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   27296:	f1bb 0f00 	cmp.w	fp, #0
   2729a:	d00a      	beq.n	272b2 <z_impl_k_poll+0x3e>
   2729c:	4949      	ldr	r1, [pc, #292]	; (273c4 <z_impl_k_poll+0x150>)
   2729e:	484a      	ldr	r0, [pc, #296]	; (273c8 <z_impl_k_poll+0x154>)
   272a0:	f240 122d 	movw	r2, #301	; 0x12d
   272a4:	f003 fc52 	bl	2ab4c <assert_print>
   272a8:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   272ac:	4845      	ldr	r0, [pc, #276]	; (273c4 <z_impl_k_poll+0x150>)
   272ae:	f003 fc46 	bl	2ab3e <assert_post_action>
   272b2:	b940      	cbnz	r0, 272c6 <z_impl_k_poll+0x52>
   272b4:	4943      	ldr	r1, [pc, #268]	; (273c4 <z_impl_k_poll+0x150>)
   272b6:	4844      	ldr	r0, [pc, #272]	; (273c8 <z_impl_k_poll+0x154>)
   272b8:	f44f 7297 	mov.w	r2, #302	; 0x12e
   272bc:	f003 fc46 	bl	2ab4c <assert_print>
   272c0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   272c4:	e7f2      	b.n	272ac <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   272c6:	2900      	cmp	r1, #0
   272c8:	da08      	bge.n	272dc <z_impl_k_poll+0x68>
   272ca:	493e      	ldr	r1, [pc, #248]	; (273c4 <z_impl_k_poll+0x150>)
   272cc:	483e      	ldr	r0, [pc, #248]	; (273c8 <z_impl_k_poll+0x154>)
   272ce:	f240 122f 	movw	r2, #303	; 0x12f
   272d2:	f003 fc3b 	bl	2ab4c <assert_print>
   272d6:	f240 112f 	movw	r1, #303	; 0x12f
   272da:	e7e7      	b.n	272ac <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   272dc:	ea57 0306 	orrs.w	r3, r7, r6
   272e0:	bf0c      	ite	eq
   272e2:	2301      	moveq	r3, #1
   272e4:	2300      	movne	r3, #0
   272e6:	f7ff fe3d 	bl	26f64 <register_events>
   272ea:	4681      	mov	r9, r0
   272ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   272f0:	f3ef 8a11 	mrs	sl, BASEPRI
   272f4:	f383 8812 	msr	BASEPRI_MAX, r3
   272f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272fc:	4833      	ldr	r0, [pc, #204]	; (273cc <z_impl_k_poll+0x158>)
   272fe:	f7fd f98b 	bl	24618 <z_spin_lock_valid>
   27302:	b938      	cbnz	r0, 27314 <z_impl_k_poll+0xa0>
   27304:	4932      	ldr	r1, [pc, #200]	; (273d0 <z_impl_k_poll+0x15c>)
   27306:	4830      	ldr	r0, [pc, #192]	; (273c8 <z_impl_k_poll+0x154>)
   27308:	2294      	movs	r2, #148	; 0x94
   2730a:	f003 fc1f 	bl	2ab4c <assert_print>
   2730e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27310:	482f      	ldr	r0, [pc, #188]	; (273d0 <z_impl_k_poll+0x15c>)
   27312:	e7cc      	b.n	272ae <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   27314:	482d      	ldr	r0, [pc, #180]	; (273cc <z_impl_k_poll+0x158>)
   27316:	f7fd f99d 	bl	24654 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2731a:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2731e:	b9bc      	cbnz	r4, 27350 <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   27320:	4628      	mov	r0, r5
   27322:	4652      	mov	r2, sl
   27324:	4649      	mov	r1, r9
   27326:	f7ff fef3 	bl	27110 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2732a:	4828      	ldr	r0, [pc, #160]	; (273cc <z_impl_k_poll+0x158>)
   2732c:	f7fd f982 	bl	24634 <z_spin_unlock_valid>
   27330:	b930      	cbnz	r0, 27340 <z_impl_k_poll+0xcc>
   27332:	4927      	ldr	r1, [pc, #156]	; (273d0 <z_impl_k_poll+0x15c>)
   27334:	4824      	ldr	r0, [pc, #144]	; (273c8 <z_impl_k_poll+0x154>)
   27336:	22c2      	movs	r2, #194	; 0xc2
   27338:	f003 fc08 	bl	2ab4c <assert_print>
   2733c:	21c2      	movs	r1, #194	; 0xc2
   2733e:	e7e7      	b.n	27310 <z_impl_k_poll+0x9c>
	__asm__ volatile(
   27340:	f38a 8811 	msr	BASEPRI, sl
   27344:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   27348:	4620      	mov	r0, r4
   2734a:	b003      	add	sp, #12
   2734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27350:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   27354:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27358:	d10b      	bne.n	27372 <z_impl_k_poll+0xfe>
   2735a:	481c      	ldr	r0, [pc, #112]	; (273cc <z_impl_k_poll+0x158>)
   2735c:	f7fd f96a 	bl	24634 <z_spin_unlock_valid>
   27360:	2800      	cmp	r0, #0
   27362:	d0e6      	beq.n	27332 <z_impl_k_poll+0xbe>
   27364:	f38a 8811 	msr	BASEPRI, sl
   27368:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2736c:	f06f 040a 	mvn.w	r4, #10
   27370:	e7ea      	b.n	27348 <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   27372:	e9cd 7600 	strd	r7, r6, [sp]
   27376:	4a17      	ldr	r2, [pc, #92]	; (273d4 <z_impl_k_poll+0x160>)
   27378:	4814      	ldr	r0, [pc, #80]	; (273cc <z_impl_k_poll+0x158>)
   2737a:	4651      	mov	r1, sl
   2737c:	f7fe fda8 	bl	25ed0 <z_pend_curr>
   27380:	4604      	mov	r4, r0
	__asm__ volatile(
   27382:	f04f 0340 	mov.w	r3, #64	; 0x40
   27386:	f3ef 8611 	mrs	r6, BASEPRI
   2738a:	f383 8812 	msr	BASEPRI_MAX, r3
   2738e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27392:	480e      	ldr	r0, [pc, #56]	; (273cc <z_impl_k_poll+0x158>)
   27394:	f7fd f940 	bl	24618 <z_spin_lock_valid>
   27398:	2800      	cmp	r0, #0
   2739a:	d0b3      	beq.n	27304 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   2739c:	480b      	ldr	r0, [pc, #44]	; (273cc <z_impl_k_poll+0x158>)
   2739e:	f7fd f959 	bl	24654 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   273a2:	4628      	mov	r0, r5
   273a4:	4632      	mov	r2, r6
   273a6:	4649      	mov	r1, r9
   273a8:	f7ff feb2 	bl	27110 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273ac:	4807      	ldr	r0, [pc, #28]	; (273cc <z_impl_k_poll+0x158>)
   273ae:	f7fd f941 	bl	24634 <z_spin_unlock_valid>
   273b2:	2800      	cmp	r0, #0
   273b4:	d0bd      	beq.n	27332 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   273b6:	f386 8811 	msr	BASEPRI, r6
   273ba:	f3bf 8f6f 	isb	sy
	return swap_rc;
   273be:	e7c3      	b.n	27348 <z_impl_k_poll+0xd4>
   273c0:	200037fc 	.word	0x200037fc
   273c4:	00034138 	.word	0x00034138
   273c8:	0003013d 	.word	0x0003013d
   273cc:	20003854 	.word	0x20003854
   273d0:	00030879 	.word	0x00030879
   273d4:	20000960 	.word	0x20000960

000273d8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   273d8:	b570      	push	{r4, r5, r6, lr}
   273da:	4604      	mov	r4, r0
   273dc:	460d      	mov	r5, r1
	__asm__ volatile(
   273de:	f04f 0340 	mov.w	r3, #64	; 0x40
   273e2:	f3ef 8611 	mrs	r6, BASEPRI
   273e6:	f383 8812 	msr	BASEPRI_MAX, r3
   273ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273ee:	481b      	ldr	r0, [pc, #108]	; (2745c <z_impl_k_poll_signal_raise+0x84>)
   273f0:	f7fd f912 	bl	24618 <z_spin_lock_valid>
   273f4:	b940      	cbnz	r0, 27408 <z_impl_k_poll_signal_raise+0x30>
   273f6:	491a      	ldr	r1, [pc, #104]	; (27460 <z_impl_k_poll_signal_raise+0x88>)
   273f8:	481a      	ldr	r0, [pc, #104]	; (27464 <z_impl_k_poll_signal_raise+0x8c>)
   273fa:	2294      	movs	r2, #148	; 0x94
   273fc:	f003 fba6 	bl	2ab4c <assert_print>
   27400:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27402:	4817      	ldr	r0, [pc, #92]	; (27460 <z_impl_k_poll_signal_raise+0x88>)
   27404:	f003 fb9b 	bl	2ab3e <assert_post_action>
	z_spin_lock_set_owner(l);
   27408:	4814      	ldr	r0, [pc, #80]	; (2745c <z_impl_k_poll_signal_raise+0x84>)
   2740a:	f7fd f923 	bl	24654 <z_spin_lock_set_owner>
	return list->head == list;
   2740e:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   27410:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   27412:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27414:	4284      	cmp	r4, r0
   27416:	60a1      	str	r1, [r4, #8]
   27418:	d10a      	bne.n	27430 <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2741a:	4810      	ldr	r0, [pc, #64]	; (2745c <z_impl_k_poll_signal_raise+0x84>)
   2741c:	f7fd f90a 	bl	24634 <z_spin_unlock_valid>
   27420:	b9b0      	cbnz	r0, 27450 <z_impl_k_poll_signal_raise+0x78>
   27422:	490f      	ldr	r1, [pc, #60]	; (27460 <z_impl_k_poll_signal_raise+0x88>)
   27424:	480f      	ldr	r0, [pc, #60]	; (27464 <z_impl_k_poll_signal_raise+0x8c>)
   27426:	22c2      	movs	r2, #194	; 0xc2
   27428:	f003 fb90 	bl	2ab4c <assert_print>
   2742c:	21c2      	movs	r1, #194	; 0xc2
   2742e:	e7e8      	b.n	27402 <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   27430:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27434:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27436:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27438:	2300      	movs	r3, #0
	node->prev = NULL;
   2743a:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2743e:	f007 fcf4 	bl	2ee2a <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   27442:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27444:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   27446:	4805      	ldr	r0, [pc, #20]	; (2745c <z_impl_k_poll_signal_raise+0x84>)
   27448:	f7fe faee 	bl	25a28 <z_reschedule>
	return rc;
}
   2744c:	4620      	mov	r0, r4
   2744e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   27450:	f386 8811 	msr	BASEPRI, r6
   27454:	f3bf 8f6f 	isb	sy
		return 0;
   27458:	2400      	movs	r4, #0
   2745a:	e7f7      	b.n	2744c <z_impl_k_poll_signal_raise+0x74>
   2745c:	20003854 	.word	0x20003854
   27460:	00030879 	.word	0x00030879
   27464:	0003013d 	.word	0x0003013d

00027468 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   27468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2746a:	3204      	adds	r2, #4
   2746c:	4605      	mov	r5, r0
   2746e:	460c      	mov	r4, r1
   27470:	d217      	bcs.n	274a2 <z_heap_aligned_alloc+0x3a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   27472:	2600      	movs	r6, #0
   27474:	2700      	movs	r7, #0
   27476:	e9cd 6700 	strd	r6, r7, [sp]
   2747a:	f041 0104 	orr.w	r1, r1, #4
   2747e:	f7fc fe3b 	bl	240f8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   27482:	b170      	cbz	r0, 274a2 <z_heap_aligned_alloc+0x3a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   27484:	f840 5b04 	str.w	r5, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   27488:	b164      	cbz	r4, 274a4 <z_heap_aligned_alloc+0x3c>
   2748a:	3c01      	subs	r4, #1
   2748c:	4220      	tst	r0, r4
   2748e:	d009      	beq.n	274a4 <z_heap_aligned_alloc+0x3c>
   27490:	4905      	ldr	r1, [pc, #20]	; (274a8 <z_heap_aligned_alloc+0x40>)
   27492:	4806      	ldr	r0, [pc, #24]	; (274ac <z_heap_aligned_alloc+0x44>)
   27494:	2225      	movs	r2, #37	; 0x25
   27496:	f003 fb59 	bl	2ab4c <assert_print>
   2749a:	4803      	ldr	r0, [pc, #12]	; (274a8 <z_heap_aligned_alloc+0x40>)
   2749c:	2125      	movs	r1, #37	; 0x25
   2749e:	f003 fb4e 	bl	2ab3e <assert_post_action>
		return NULL;
   274a2:	2000      	movs	r0, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   274a4:	b003      	add	sp, #12
   274a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   274a8:	00034159 	.word	0x00034159
   274ac:	0003013d 	.word	0x0003013d

000274b0 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   274b0:	2803      	cmp	r0, #3
{
   274b2:	b508      	push	{r3, lr}
   274b4:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   274b6:	d901      	bls.n	274bc <k_aligned_alloc+0xc>
   274b8:	0783      	lsls	r3, r0, #30
   274ba:	d008      	beq.n	274ce <k_aligned_alloc+0x1e>
   274bc:	490c      	ldr	r1, [pc, #48]	; (274f0 <k_aligned_alloc+0x40>)
   274be:	480d      	ldr	r0, [pc, #52]	; (274f4 <k_aligned_alloc+0x44>)
   274c0:	2242      	movs	r2, #66	; 0x42
   274c2:	f003 fb43 	bl	2ab4c <assert_print>
   274c6:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   274c8:	4809      	ldr	r0, [pc, #36]	; (274f0 <k_aligned_alloc+0x40>)
   274ca:	f003 fb38 	bl	2ab3e <assert_post_action>
   274ce:	1e43      	subs	r3, r0, #1
   274d0:	4203      	tst	r3, r0
   274d2:	d006      	beq.n	274e2 <k_aligned_alloc+0x32>
   274d4:	4906      	ldr	r1, [pc, #24]	; (274f0 <k_aligned_alloc+0x40>)
   274d6:	4807      	ldr	r0, [pc, #28]	; (274f4 <k_aligned_alloc+0x44>)
   274d8:	2246      	movs	r2, #70	; 0x46
   274da:	f003 fb37 	bl	2ab4c <assert_print>
   274de:	2146      	movs	r1, #70	; 0x46
   274e0:	e7f2      	b.n	274c8 <k_aligned_alloc+0x18>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   274e2:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   274e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   274e8:	4803      	ldr	r0, [pc, #12]	; (274f8 <k_aligned_alloc+0x48>)
   274ea:	f7ff bfbd 	b.w	27468 <z_heap_aligned_alloc>
   274ee:	bf00      	nop
   274f0:	00034159 	.word	0x00034159
   274f4:	0003013d 	.word	0x0003013d
   274f8:	20000aac 	.word	0x20000aac

000274fc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   274fc:	4b01      	ldr	r3, [pc, #4]	; (27504 <k_thread_system_pool_assign+0x8>)
   274fe:	6743      	str	r3, [r0, #116]	; 0x74
}
   27500:	4770      	bx	lr
   27502:	bf00      	nop
   27504:	20000aac 	.word	0x20000aac

00027508 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   27508:	b538      	push	{r3, r4, r5, lr}
   2750a:	4604      	mov	r4, r0
   2750c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2750e:	f007 fb10 	bl	2eb32 <k_is_in_isr>
   27512:	b920      	cbnz	r0, 2751e <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   27514:	4b06      	ldr	r3, [pc, #24]	; (27530 <z_thread_aligned_alloc+0x28>)
   27516:	689b      	ldr	r3, [r3, #8]
   27518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2751a:	b90b      	cbnz	r3, 27520 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   2751c:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   2751e:	4b05      	ldr	r3, [pc, #20]	; (27534 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   27520:	462a      	mov	r2, r5
   27522:	4621      	mov	r1, r4
   27524:	4618      	mov	r0, r3
}
   27526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2752a:	f7ff bf9d 	b.w	27468 <z_heap_aligned_alloc>
   2752e:	bf00      	nop
   27530:	200037fc 	.word	0x200037fc
   27534:	20000aac 	.word	0x20000aac

00027538 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   27538:	4801      	ldr	r0, [pc, #4]	; (27540 <boot_banner+0x8>)
   2753a:	f003 b8ff 	b.w	2a73c <printk>
   2753e:	bf00      	nop
   27540:	0003417d 	.word	0x0003417d

00027544 <ocrypto_ecdh_p256_public_key>:
   27544:	b530      	push	{r4, r5, lr}
   27546:	b099      	sub	sp, #100	; 0x64
   27548:	4605      	mov	r5, r0
   2754a:	4668      	mov	r0, sp
   2754c:	f000 f828 	bl	275a0 <ocrypto_sc_p256_from32bytes>
   27550:	4669      	mov	r1, sp
   27552:	4604      	mov	r4, r0
   27554:	a808      	add	r0, sp, #32
   27556:	f000 fa53 	bl	27a00 <ocrypto_curve_p256_scalarmult_base>
   2755a:	a908      	add	r1, sp, #32
   2755c:	4304      	orrs	r4, r0
   2755e:	4628      	mov	r0, r5
   27560:	f000 f98a 	bl	27878 <ocrypto_curve_p256_to64bytes>
   27564:	4620      	mov	r0, r4
   27566:	b019      	add	sp, #100	; 0x64
   27568:	bd30      	pop	{r4, r5, pc}
   2756a:	bf00      	nop

0002756c <ocrypto_ecdh_p256_common_secret>:
   2756c:	b570      	push	{r4, r5, r6, lr}
   2756e:	b098      	sub	sp, #96	; 0x60
   27570:	4605      	mov	r5, r0
   27572:	4668      	mov	r0, sp
   27574:	4616      	mov	r6, r2
   27576:	f000 f813 	bl	275a0 <ocrypto_sc_p256_from32bytes>
   2757a:	4631      	mov	r1, r6
   2757c:	4604      	mov	r4, r0
   2757e:	a808      	add	r0, sp, #32
   27580:	f000 f946 	bl	27810 <ocrypto_curve_p256_from64bytes>
   27584:	a908      	add	r1, sp, #32
   27586:	466a      	mov	r2, sp
   27588:	4304      	orrs	r4, r0
   2758a:	4608      	mov	r0, r1
   2758c:	f000 f982 	bl	27894 <ocrypto_curve_p256_scalarmult>
   27590:	a908      	add	r1, sp, #32
   27592:	4304      	orrs	r4, r0
   27594:	4628      	mov	r0, r5
   27596:	f000 f96d 	bl	27874 <ocrypto_curve_p256_to32bytes>
   2759a:	4620      	mov	r0, r4
   2759c:	b018      	add	sp, #96	; 0x60
   2759e:	bd70      	pop	{r4, r5, r6, pc}

000275a0 <ocrypto_sc_p256_from32bytes>:
   275a0:	b570      	push	{r4, r5, r6, lr}
   275a2:	680b      	ldr	r3, [r1, #0]
   275a4:	4e12      	ldr	r6, [pc, #72]	; (275f0 <ocrypto_sc_p256_from32bytes+0x50>)
   275a6:	ba1b      	rev	r3, r3
   275a8:	61c3      	str	r3, [r0, #28]
   275aa:	684b      	ldr	r3, [r1, #4]
   275ac:	ba1b      	rev	r3, r3
   275ae:	6183      	str	r3, [r0, #24]
   275b0:	688b      	ldr	r3, [r1, #8]
   275b2:	ba1b      	rev	r3, r3
   275b4:	6143      	str	r3, [r0, #20]
   275b6:	68cb      	ldr	r3, [r1, #12]
   275b8:	ba1b      	rev	r3, r3
   275ba:	6103      	str	r3, [r0, #16]
   275bc:	690b      	ldr	r3, [r1, #16]
   275be:	ba1b      	rev	r3, r3
   275c0:	60c3      	str	r3, [r0, #12]
   275c2:	694b      	ldr	r3, [r1, #20]
   275c4:	ba1b      	rev	r3, r3
   275c6:	6083      	str	r3, [r0, #8]
   275c8:	698b      	ldr	r3, [r1, #24]
   275ca:	ba1b      	rev	r3, r3
   275cc:	6043      	str	r3, [r0, #4]
   275ce:	69cb      	ldr	r3, [r1, #28]
   275d0:	ba1b      	rev	r3, r3
   275d2:	4632      	mov	r2, r6
   275d4:	6003      	str	r3, [r0, #0]
   275d6:	4601      	mov	r1, r0
   275d8:	4604      	mov	r4, r0
   275da:	f7d8 fdcb 	bl	174 <ocrypto_bigint_sub256>
   275de:	4631      	mov	r1, r6
   275e0:	4605      	mov	r5, r0
   275e2:	4602      	mov	r2, r0
   275e4:	4620      	mov	r0, r4
   275e6:	f7d8 fde5 	bl	1b4 <ocrypto_bigint_cadd256>
   275ea:	1e68      	subs	r0, r5, #1
   275ec:	bd70      	pop	{r4, r5, r6, pc}
   275ee:	bf00      	nop
   275f0:	0002fd40 	.word	0x0002fd40

000275f4 <p256_zdblu>:
   275f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275f8:	b088      	sub	sp, #32
   275fa:	460c      	mov	r4, r1
   275fc:	4606      	mov	r6, r0
   275fe:	f102 0120 	add.w	r1, r2, #32
   27602:	4668      	mov	r0, sp
   27604:	f106 0720 	add.w	r7, r6, #32
   27608:	4690      	mov	r8, r2
   2760a:	f7d9 f8bd 	bl	788 <ocrypto_mod_p256_sqr>
   2760e:	466a      	mov	r2, sp
   27610:	4669      	mov	r1, sp
   27612:	4668      	mov	r0, sp
   27614:	f7d8 ffca 	bl	5ac <ocrypto_mod_p256_add>
   27618:	4669      	mov	r1, sp
   2761a:	4638      	mov	r0, r7
   2761c:	f7d9 f8b4 	bl	788 <ocrypto_mod_p256_sqr>
   27620:	463a      	mov	r2, r7
   27622:	4639      	mov	r1, r7
   27624:	4638      	mov	r0, r7
   27626:	f104 0520 	add.w	r5, r4, #32
   2762a:	f7d8 ffbf 	bl	5ac <ocrypto_mod_p256_add>
   2762e:	466a      	mov	r2, sp
   27630:	4669      	mov	r1, sp
   27632:	4668      	mov	r0, sp
   27634:	f7d8 ffba 	bl	5ac <ocrypto_mod_p256_add>
   27638:	4641      	mov	r1, r8
   2763a:	4628      	mov	r0, r5
   2763c:	f7d9 f8a4 	bl	788 <ocrypto_mod_p256_sqr>
   27640:	466a      	mov	r2, sp
   27642:	4641      	mov	r1, r8
   27644:	4630      	mov	r0, r6
   27646:	f7d9 f887 	bl	758 <ocrypto_mod_p256_mul>
   2764a:	462a      	mov	r2, r5
   2764c:	4629      	mov	r1, r5
   2764e:	4668      	mov	r0, sp
   27650:	f7d8 ffac 	bl	5ac <ocrypto_mod_p256_add>
   27654:	462a      	mov	r2, r5
   27656:	4669      	mov	r1, sp
   27658:	4668      	mov	r0, sp
   2765a:	f7d8 ffa7 	bl	5ac <ocrypto_mod_p256_add>
   2765e:	4a12      	ldr	r2, [pc, #72]	; (276a8 <p256_zdblu+0xb4>)
   27660:	4669      	mov	r1, sp
   27662:	4668      	mov	r0, sp
   27664:	f7d8 ffa2 	bl	5ac <ocrypto_mod_p256_add>
   27668:	4669      	mov	r1, sp
   2766a:	4620      	mov	r0, r4
   2766c:	f7d9 f88c 	bl	788 <ocrypto_mod_p256_sqr>
   27670:	4632      	mov	r2, r6
   27672:	4621      	mov	r1, r4
   27674:	4620      	mov	r0, r4
   27676:	f7d8 ffd7 	bl	628 <ocrypto_mod_p256_sub>
   2767a:	4632      	mov	r2, r6
   2767c:	4621      	mov	r1, r4
   2767e:	4620      	mov	r0, r4
   27680:	f7d8 ffd2 	bl	628 <ocrypto_mod_p256_sub>
   27684:	4622      	mov	r2, r4
   27686:	4631      	mov	r1, r6
   27688:	4628      	mov	r0, r5
   2768a:	f7d8 ffcd 	bl	628 <ocrypto_mod_p256_sub>
   2768e:	466a      	mov	r2, sp
   27690:	4629      	mov	r1, r5
   27692:	4628      	mov	r0, r5
   27694:	f7d9 f860 	bl	758 <ocrypto_mod_p256_mul>
   27698:	463a      	mov	r2, r7
   2769a:	4629      	mov	r1, r5
   2769c:	4628      	mov	r0, r5
   2769e:	f7d8 ffc3 	bl	628 <ocrypto_mod_p256_sub>
   276a2:	b008      	add	sp, #32
   276a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   276a8:	0002fde0 	.word	0x0002fde0

000276ac <p256_zaddc>:
   276ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   276ae:	b099      	sub	sp, #100	; 0x64
   276b0:	4604      	mov	r4, r0
   276b2:	460d      	mov	r5, r1
   276b4:	460a      	mov	r2, r1
   276b6:	4601      	mov	r1, r0
   276b8:	4668      	mov	r0, sp
   276ba:	f7d8 ffb5 	bl	628 <ocrypto_mod_p256_sub>
   276be:	4669      	mov	r1, sp
   276c0:	4668      	mov	r0, sp
   276c2:	f7d9 f861 	bl	788 <ocrypto_mod_p256_sqr>
   276c6:	466a      	mov	r2, sp
   276c8:	4621      	mov	r1, r4
   276ca:	a808      	add	r0, sp, #32
   276cc:	f105 0620 	add.w	r6, r5, #32
   276d0:	f104 0720 	add.w	r7, r4, #32
   276d4:	f7d9 f840 	bl	758 <ocrypto_mod_p256_mul>
   276d8:	466a      	mov	r2, sp
   276da:	4629      	mov	r1, r5
   276dc:	4668      	mov	r0, sp
   276de:	f7d9 f83b 	bl	758 <ocrypto_mod_p256_mul>
   276e2:	4632      	mov	r2, r6
   276e4:	4639      	mov	r1, r7
   276e6:	a810      	add	r0, sp, #64	; 0x40
   276e8:	f7d8 ff60 	bl	5ac <ocrypto_mod_p256_add>
   276ec:	4632      	mov	r2, r6
   276ee:	4639      	mov	r1, r7
   276f0:	4630      	mov	r0, r6
   276f2:	f7d8 ff99 	bl	628 <ocrypto_mod_p256_sub>
   276f6:	4631      	mov	r1, r6
   276f8:	4628      	mov	r0, r5
   276fa:	f7d9 f845 	bl	788 <ocrypto_mod_p256_sqr>
   276fe:	466a      	mov	r2, sp
   27700:	a908      	add	r1, sp, #32
   27702:	4620      	mov	r0, r4
   27704:	f7d8 ff52 	bl	5ac <ocrypto_mod_p256_add>
   27708:	4622      	mov	r2, r4
   2770a:	4629      	mov	r1, r5
   2770c:	4628      	mov	r0, r5
   2770e:	f7d8 ff8b 	bl	628 <ocrypto_mod_p256_sub>
   27712:	466a      	mov	r2, sp
   27714:	a908      	add	r1, sp, #32
   27716:	4668      	mov	r0, sp
   27718:	f7d8 ff86 	bl	628 <ocrypto_mod_p256_sub>
   2771c:	466a      	mov	r2, sp
   2771e:	4639      	mov	r1, r7
   27720:	4638      	mov	r0, r7
   27722:	f7d9 f819 	bl	758 <ocrypto_mod_p256_mul>
   27726:	462a      	mov	r2, r5
   27728:	a908      	add	r1, sp, #32
   2772a:	4668      	mov	r0, sp
   2772c:	f7d8 ff7c 	bl	628 <ocrypto_mod_p256_sub>
   27730:	466a      	mov	r2, sp
   27732:	4631      	mov	r1, r6
   27734:	4630      	mov	r0, r6
   27736:	f7d9 f80f 	bl	758 <ocrypto_mod_p256_mul>
   2773a:	463a      	mov	r2, r7
   2773c:	4631      	mov	r1, r6
   2773e:	4630      	mov	r0, r6
   27740:	f7d8 ff72 	bl	628 <ocrypto_mod_p256_sub>
   27744:	a910      	add	r1, sp, #64	; 0x40
   27746:	4668      	mov	r0, sp
   27748:	f7d9 f81e 	bl	788 <ocrypto_mod_p256_sqr>
   2774c:	4622      	mov	r2, r4
   2774e:	4669      	mov	r1, sp
   27750:	4620      	mov	r0, r4
   27752:	f7d8 ff69 	bl	628 <ocrypto_mod_p256_sub>
   27756:	a908      	add	r1, sp, #32
   27758:	4622      	mov	r2, r4
   2775a:	4608      	mov	r0, r1
   2775c:	f7d8 ff64 	bl	628 <ocrypto_mod_p256_sub>
   27760:	a910      	add	r1, sp, #64	; 0x40
   27762:	aa08      	add	r2, sp, #32
   27764:	4608      	mov	r0, r1
   27766:	f7d8 fff7 	bl	758 <ocrypto_mod_p256_mul>
   2776a:	463a      	mov	r2, r7
   2776c:	a910      	add	r1, sp, #64	; 0x40
   2776e:	4638      	mov	r0, r7
   27770:	f7d8 ff5a 	bl	628 <ocrypto_mod_p256_sub>
   27774:	b019      	add	sp, #100	; 0x64
   27776:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027778 <p256_zaddu>:
   27778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2777c:	b088      	sub	sp, #32
   2777e:	460c      	mov	r4, r1
   27780:	4605      	mov	r5, r0
   27782:	4690      	mov	r8, r2
   27784:	460a      	mov	r2, r1
   27786:	4601      	mov	r1, r0
   27788:	4668      	mov	r0, sp
   2778a:	f7d8 ff4d 	bl	628 <ocrypto_mod_p256_sub>
   2778e:	4669      	mov	r1, sp
   27790:	4668      	mov	r0, sp
   27792:	f7d8 fff9 	bl	788 <ocrypto_mod_p256_sqr>
   27796:	466a      	mov	r2, sp
   27798:	4629      	mov	r1, r5
   2779a:	4628      	mov	r0, r5
   2779c:	f104 0620 	add.w	r6, r4, #32
   277a0:	f7d8 ffda 	bl	758 <ocrypto_mod_p256_mul>
   277a4:	f105 0720 	add.w	r7, r5, #32
   277a8:	466a      	mov	r2, sp
   277aa:	4621      	mov	r1, r4
   277ac:	4668      	mov	r0, sp
   277ae:	f7d8 ffd3 	bl	758 <ocrypto_mod_p256_mul>
   277b2:	4632      	mov	r2, r6
   277b4:	4639      	mov	r1, r7
   277b6:	4630      	mov	r0, r6
   277b8:	f7d8 ff36 	bl	628 <ocrypto_mod_p256_sub>
   277bc:	4631      	mov	r1, r6
   277be:	4620      	mov	r0, r4
   277c0:	f7d8 ffe2 	bl	788 <ocrypto_mod_p256_sqr>
   277c4:	462a      	mov	r2, r5
   277c6:	4621      	mov	r1, r4
   277c8:	4620      	mov	r0, r4
   277ca:	f7d8 ff2d 	bl	628 <ocrypto_mod_p256_sub>
   277ce:	466a      	mov	r2, sp
   277d0:	4621      	mov	r1, r4
   277d2:	4620      	mov	r0, r4
   277d4:	f7d8 ff28 	bl	628 <ocrypto_mod_p256_sub>
   277d8:	466a      	mov	r2, sp
   277da:	4629      	mov	r1, r5
   277dc:	4640      	mov	r0, r8
   277de:	f7d8 ff23 	bl	628 <ocrypto_mod_p256_sub>
   277e2:	4642      	mov	r2, r8
   277e4:	4639      	mov	r1, r7
   277e6:	4638      	mov	r0, r7
   277e8:	f7d8 ffb6 	bl	758 <ocrypto_mod_p256_mul>
   277ec:	4622      	mov	r2, r4
   277ee:	4629      	mov	r1, r5
   277f0:	4668      	mov	r0, sp
   277f2:	f7d8 ff19 	bl	628 <ocrypto_mod_p256_sub>
   277f6:	466a      	mov	r2, sp
   277f8:	4631      	mov	r1, r6
   277fa:	4630      	mov	r0, r6
   277fc:	f7d8 ffac 	bl	758 <ocrypto_mod_p256_mul>
   27800:	463a      	mov	r2, r7
   27802:	4631      	mov	r1, r6
   27804:	4630      	mov	r0, r6
   27806:	f7d8 ff0f 	bl	628 <ocrypto_mod_p256_sub>
   2780a:	b008      	add	sp, #32
   2780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027810 <ocrypto_curve_p256_from64bytes>:
   27810:	b570      	push	{r4, r5, r6, lr}
   27812:	f100 0620 	add.w	r6, r0, #32
   27816:	b090      	sub	sp, #64	; 0x40
   27818:	460d      	mov	r5, r1
   2781a:	4604      	mov	r4, r0
   2781c:	f000 f914 	bl	27a48 <ocrypto_mod_p256_from_bytes>
   27820:	f105 0120 	add.w	r1, r5, #32
   27824:	4630      	mov	r0, r6
   27826:	f000 f90f 	bl	27a48 <ocrypto_mod_p256_from_bytes>
   2782a:	4621      	mov	r1, r4
   2782c:	a808      	add	r0, sp, #32
   2782e:	f7d8 ffab 	bl	788 <ocrypto_mod_p256_sqr>
   27832:	a908      	add	r1, sp, #32
   27834:	4608      	mov	r0, r1
   27836:	4a0d      	ldr	r2, [pc, #52]	; (2786c <ocrypto_curve_p256_from64bytes+0x5c>)
   27838:	f7d8 feb8 	bl	5ac <ocrypto_mod_p256_add>
   2783c:	a908      	add	r1, sp, #32
   2783e:	4622      	mov	r2, r4
   27840:	4608      	mov	r0, r1
   27842:	f7d8 ff89 	bl	758 <ocrypto_mod_p256_mul>
   27846:	a908      	add	r1, sp, #32
   27848:	4a09      	ldr	r2, [pc, #36]	; (27870 <ocrypto_curve_p256_from64bytes+0x60>)
   2784a:	4608      	mov	r0, r1
   2784c:	f7d8 feae 	bl	5ac <ocrypto_mod_p256_add>
   27850:	4631      	mov	r1, r6
   27852:	4668      	mov	r0, sp
   27854:	f7d8 ff98 	bl	788 <ocrypto_mod_p256_sqr>
   27858:	2220      	movs	r2, #32
   2785a:	4669      	mov	r1, sp
   2785c:	eb0d 0002 	add.w	r0, sp, r2
   27860:	f7d8 fe76 	bl	550 <ocrypto_constant_time_equal>
   27864:	3801      	subs	r0, #1
   27866:	b010      	add	sp, #64	; 0x40
   27868:	bd70      	pop	{r4, r5, r6, pc}
   2786a:	bf00      	nop
   2786c:	0002fde0 	.word	0x0002fde0
   27870:	0002fe00 	.word	0x0002fe00

00027874 <ocrypto_curve_p256_to32bytes>:
   27874:	f000 b902 	b.w	27a7c <ocrypto_mod_p256_to_bytes>

00027878 <ocrypto_curve_p256_to64bytes>:
   27878:	b538      	push	{r3, r4, r5, lr}
   2787a:	4604      	mov	r4, r0
   2787c:	460d      	mov	r5, r1
   2787e:	f000 f8fd 	bl	27a7c <ocrypto_mod_p256_to_bytes>
   27882:	f105 0120 	add.w	r1, r5, #32
   27886:	f104 0020 	add.w	r0, r4, #32
   2788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2788e:	f000 b8f5 	b.w	27a7c <ocrypto_mod_p256_to_bytes>
   27892:	bf00      	nop

00027894 <ocrypto_curve_p256_scalarmult>:
   27894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27898:	4613      	mov	r3, r2
   2789a:	b0b8      	sub	sp, #224	; 0xe0
   2789c:	4a54      	ldr	r2, [pc, #336]	; (279f0 <ocrypto_curve_p256_scalarmult+0x15c>)
   2789e:	4689      	mov	r9, r1
   278a0:	4680      	mov	r8, r0
   278a2:	4619      	mov	r1, r3
   278a4:	a810      	add	r0, sp, #64	; 0x40
   278a6:	f7d8 fc65 	bl	174 <ocrypto_bigint_sub256>
   278aa:	4952      	ldr	r1, [pc, #328]	; (279f4 <ocrypto_curve_p256_scalarmult+0x160>)
   278ac:	4602      	mov	r2, r0
   278ae:	a810      	add	r0, sp, #64	; 0x40
   278b0:	f7d8 fc80 	bl	1b4 <ocrypto_bigint_cadd256>
   278b4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   278b6:	494e      	ldr	r1, [pc, #312]	; (279f0 <ocrypto_curve_p256_scalarmult+0x15c>)
   278b8:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   278bc:	4607      	mov	r7, r0
   278be:	f1c6 0201 	rsb	r2, r6, #1
   278c2:	a810      	add	r0, sp, #64	; 0x40
   278c4:	f7d8 fc76 	bl	1b4 <ocrypto_bigint_cadd256>
   278c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   278ca:	464a      	mov	r2, r9
   278cc:	ea6f 0a03 	mvn.w	sl, r3
   278d0:	a928      	add	r1, sp, #160	; 0xa0
   278d2:	a818      	add	r0, sp, #96	; 0x60
   278d4:	f7ff fe8e 	bl	275f4 <p256_zdblu>
   278d8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   278dc:	a920      	add	r1, sp, #128	; 0x80
   278de:	f1ca 0201 	rsb	r2, sl, #1
   278e2:	4608      	mov	r0, r1
   278e4:	f000 f892 	bl	27a0c <ocrypto_mod_p256_cneg>
   278e8:	f1c7 0701 	rsb	r7, r7, #1
   278ec:	24fe      	movs	r4, #254	; 0xfe
   278ee:	466a      	mov	r2, sp
   278f0:	a918      	add	r1, sp, #96	; 0x60
   278f2:	a828      	add	r0, sp, #160	; 0xa0
   278f4:	f7ff ff40 	bl	27778 <p256_zaddu>
   278f8:	1162      	asrs	r2, r4, #5
   278fa:	ab38      	add	r3, sp, #224	; 0xe0
   278fc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   27900:	f004 011f 	and.w	r1, r4, #31
   27904:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   27908:	40cb      	lsrs	r3, r1
   2790a:	4655      	mov	r5, sl
   2790c:	f003 0a01 	and.w	sl, r3, #1
   27910:	ea8a 0505 	eor.w	r5, sl, r5
   27914:	462a      	mov	r2, r5
   27916:	a928      	add	r1, sp, #160	; 0xa0
   27918:	a818      	add	r0, sp, #96	; 0x60
   2791a:	f7d8 fca7 	bl	26c <ocrypto_bigint_cswap256>
   2791e:	462a      	mov	r2, r5
   27920:	a930      	add	r1, sp, #192	; 0xc0
   27922:	a820      	add	r0, sp, #128	; 0x80
   27924:	f7d8 fca2 	bl	26c <ocrypto_bigint_cswap256>
   27928:	3c01      	subs	r4, #1
   2792a:	a928      	add	r1, sp, #160	; 0xa0
   2792c:	a818      	add	r0, sp, #96	; 0x60
   2792e:	f7ff febd 	bl	276ac <p256_zaddc>
   27932:	1c63      	adds	r3, r4, #1
   27934:	d1db      	bne.n	278ee <ocrypto_curve_p256_scalarmult+0x5a>
   27936:	f1ca 0201 	rsb	r2, sl, #1
   2793a:	a920      	add	r1, sp, #128	; 0x80
   2793c:	a808      	add	r0, sp, #32
   2793e:	f000 f865 	bl	27a0c <ocrypto_mod_p256_cneg>
   27942:	ea86 060a 	eor.w	r6, r6, sl
   27946:	466a      	mov	r2, sp
   27948:	a918      	add	r1, sp, #96	; 0x60
   2794a:	a828      	add	r0, sp, #160	; 0xa0
   2794c:	f7ff ff14 	bl	27778 <p256_zaddu>
   27950:	a928      	add	r1, sp, #160	; 0xa0
   27952:	4632      	mov	r2, r6
   27954:	a818      	add	r0, sp, #96	; 0x60
   27956:	f7d8 fc89 	bl	26c <ocrypto_bigint_cswap256>
   2795a:	4632      	mov	r2, r6
   2795c:	a930      	add	r1, sp, #192	; 0xc0
   2795e:	a820      	add	r0, sp, #128	; 0x80
   27960:	f7d8 fc84 	bl	26c <ocrypto_bigint_cswap256>
   27964:	a908      	add	r1, sp, #32
   27966:	466a      	mov	r2, sp
   27968:	4608      	mov	r0, r1
   2796a:	f7d8 fef5 	bl	758 <ocrypto_mod_p256_mul>
   2796e:	a908      	add	r1, sp, #32
   27970:	4608      	mov	r0, r1
   27972:	f000 f89d 	bl	27ab0 <ocrypto_mod_p256_inv>
   27976:	a908      	add	r1, sp, #32
   27978:	f108 0420 	add.w	r4, r8, #32
   2797c:	f109 0220 	add.w	r2, r9, #32
   27980:	4608      	mov	r0, r1
   27982:	f7d8 fee9 	bl	758 <ocrypto_mod_p256_mul>
   27986:	a920      	add	r1, sp, #128	; 0x80
   27988:	aa08      	add	r2, sp, #32
   2798a:	4620      	mov	r0, r4
   2798c:	f7d8 fee4 	bl	758 <ocrypto_mod_p256_mul>
   27990:	aa08      	add	r2, sp, #32
   27992:	a918      	add	r1, sp, #96	; 0x60
   27994:	4668      	mov	r0, sp
   27996:	f7d8 fedf 	bl	758 <ocrypto_mod_p256_mul>
   2799a:	4669      	mov	r1, sp
   2799c:	4668      	mov	r0, sp
   2799e:	f7d8 fef3 	bl	788 <ocrypto_mod_p256_sqr>
   279a2:	aa18      	add	r2, sp, #96	; 0x60
   279a4:	4669      	mov	r1, sp
   279a6:	a808      	add	r0, sp, #32
   279a8:	f7d8 fed6 	bl	758 <ocrypto_mod_p256_mul>
   279ac:	4621      	mov	r1, r4
   279ae:	4668      	mov	r0, sp
   279b0:	f7d8 feea 	bl	788 <ocrypto_mod_p256_sqr>
   279b4:	aa08      	add	r2, sp, #32
   279b6:	4669      	mov	r1, sp
   279b8:	4610      	mov	r0, r2
   279ba:	f7d8 fe35 	bl	628 <ocrypto_mod_p256_sub>
   279be:	4a0e      	ldr	r2, [pc, #56]	; (279f8 <ocrypto_curve_p256_scalarmult+0x164>)
   279c0:	a908      	add	r1, sp, #32
   279c2:	4668      	mov	r0, sp
   279c4:	f7d8 fe30 	bl	628 <ocrypto_mod_p256_sub>
   279c8:	4620      	mov	r0, r4
   279ca:	2120      	movs	r1, #32
   279cc:	f7d8 fdd4 	bl	578 <ocrypto_constant_time_is_zero>
   279d0:	a908      	add	r1, sp, #32
   279d2:	4243      	negs	r3, r0
   279d4:	4602      	mov	r2, r0
   279d6:	4668      	mov	r0, sp
   279d8:	431f      	orrs	r7, r3
   279da:	f7d8 fc47 	bl	26c <ocrypto_bigint_cswap256>
   279de:	4640      	mov	r0, r8
   279e0:	4a06      	ldr	r2, [pc, #24]	; (279fc <ocrypto_curve_p256_scalarmult+0x168>)
   279e2:	4669      	mov	r1, sp
   279e4:	f7d8 feb8 	bl	758 <ocrypto_mod_p256_mul>
   279e8:	4638      	mov	r0, r7
   279ea:	b038      	add	sp, #224	; 0xe0
   279ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   279f0:	0002fe20 	.word	0x0002fe20
   279f4:	0002fda0 	.word	0x0002fda0
   279f8:	0002fe00 	.word	0x0002fe00
   279fc:	0002fdc0 	.word	0x0002fdc0

00027a00 <ocrypto_curve_p256_scalarmult_base>:
   27a00:	460a      	mov	r2, r1
   27a02:	4901      	ldr	r1, [pc, #4]	; (27a08 <ocrypto_curve_p256_scalarmult_base+0x8>)
   27a04:	f7ff bf46 	b.w	27894 <ocrypto_curve_p256_scalarmult>
   27a08:	0002fd60 	.word	0x0002fd60

00027a0c <ocrypto_mod_p256_cneg>:
   27a0c:	b570      	push	{r4, r5, r6, lr}
   27a0e:	b088      	sub	sp, #32
   27a10:	4604      	mov	r4, r0
   27a12:	460d      	mov	r5, r1
   27a14:	4616      	mov	r6, r2
   27a16:	2100      	movs	r1, #0
   27a18:	2220      	movs	r2, #32
   27a1a:	4668      	mov	r0, sp
   27a1c:	f004 f877 	bl	2bb0e <memset>
   27a20:	2300      	movs	r3, #0
   27a22:	4629      	mov	r1, r5
   27a24:	2220      	movs	r2, #32
   27a26:	4620      	mov	r0, r4
   27a28:	9300      	str	r3, [sp, #0]
   27a2a:	f004 f865 	bl	2baf8 <memcpy>
   27a2e:	462a      	mov	r2, r5
   27a30:	4669      	mov	r1, sp
   27a32:	4668      	mov	r0, sp
   27a34:	f7d8 fdf8 	bl	628 <ocrypto_mod_p256_sub>
   27a38:	4632      	mov	r2, r6
   27a3a:	4669      	mov	r1, sp
   27a3c:	4620      	mov	r0, r4
   27a3e:	f7d8 fc15 	bl	26c <ocrypto_bigint_cswap256>
   27a42:	b008      	add	sp, #32
   27a44:	bd70      	pop	{r4, r5, r6, pc}
   27a46:	bf00      	nop

00027a48 <ocrypto_mod_p256_from_bytes>:
   27a48:	680b      	ldr	r3, [r1, #0]
   27a4a:	ba1b      	rev	r3, r3
   27a4c:	61c3      	str	r3, [r0, #28]
   27a4e:	684b      	ldr	r3, [r1, #4]
   27a50:	ba1b      	rev	r3, r3
   27a52:	6183      	str	r3, [r0, #24]
   27a54:	688b      	ldr	r3, [r1, #8]
   27a56:	ba1b      	rev	r3, r3
   27a58:	6143      	str	r3, [r0, #20]
   27a5a:	68cb      	ldr	r3, [r1, #12]
   27a5c:	ba1b      	rev	r3, r3
   27a5e:	6103      	str	r3, [r0, #16]
   27a60:	690b      	ldr	r3, [r1, #16]
   27a62:	ba1b      	rev	r3, r3
   27a64:	60c3      	str	r3, [r0, #12]
   27a66:	694b      	ldr	r3, [r1, #20]
   27a68:	ba1b      	rev	r3, r3
   27a6a:	6083      	str	r3, [r0, #8]
   27a6c:	698b      	ldr	r3, [r1, #24]
   27a6e:	ba1b      	rev	r3, r3
   27a70:	6043      	str	r3, [r0, #4]
   27a72:	69cb      	ldr	r3, [r1, #28]
   27a74:	ba1b      	rev	r3, r3
   27a76:	6003      	str	r3, [r0, #0]
   27a78:	4770      	bx	lr
   27a7a:	bf00      	nop

00027a7c <ocrypto_mod_p256_to_bytes>:
   27a7c:	69cb      	ldr	r3, [r1, #28]
   27a7e:	ba1b      	rev	r3, r3
   27a80:	6003      	str	r3, [r0, #0]
   27a82:	698b      	ldr	r3, [r1, #24]
   27a84:	ba1b      	rev	r3, r3
   27a86:	6043      	str	r3, [r0, #4]
   27a88:	694b      	ldr	r3, [r1, #20]
   27a8a:	ba1b      	rev	r3, r3
   27a8c:	6083      	str	r3, [r0, #8]
   27a8e:	690b      	ldr	r3, [r1, #16]
   27a90:	ba1b      	rev	r3, r3
   27a92:	60c3      	str	r3, [r0, #12]
   27a94:	68cb      	ldr	r3, [r1, #12]
   27a96:	ba1b      	rev	r3, r3
   27a98:	6103      	str	r3, [r0, #16]
   27a9a:	688b      	ldr	r3, [r1, #8]
   27a9c:	ba1b      	rev	r3, r3
   27a9e:	6143      	str	r3, [r0, #20]
   27aa0:	684b      	ldr	r3, [r1, #4]
   27aa2:	ba1b      	rev	r3, r3
   27aa4:	6183      	str	r3, [r0, #24]
   27aa6:	680b      	ldr	r3, [r1, #0]
   27aa8:	ba1b      	rev	r3, r3
   27aaa:	61c3      	str	r3, [r0, #28]
   27aac:	4770      	bx	lr
   27aae:	bf00      	nop

00027ab0 <ocrypto_mod_p256_inv>:
   27ab0:	b570      	push	{r4, r5, r6, lr}
   27ab2:	b098      	sub	sp, #96	; 0x60
   27ab4:	460d      	mov	r5, r1
   27ab6:	4606      	mov	r6, r0
   27ab8:	a810      	add	r0, sp, #64	; 0x40
   27aba:	f7d8 fe65 	bl	788 <ocrypto_mod_p256_sqr>
   27abe:	462a      	mov	r2, r5
   27ac0:	a910      	add	r1, sp, #64	; 0x40
   27ac2:	4668      	mov	r0, sp
   27ac4:	f7d8 fe48 	bl	758 <ocrypto_mod_p256_mul>
   27ac8:	4669      	mov	r1, sp
   27aca:	a810      	add	r0, sp, #64	; 0x40
   27acc:	f7d8 fe5c 	bl	788 <ocrypto_mod_p256_sqr>
   27ad0:	a910      	add	r1, sp, #64	; 0x40
   27ad2:	4608      	mov	r0, r1
   27ad4:	f7d8 fe58 	bl	788 <ocrypto_mod_p256_sqr>
   27ad8:	466a      	mov	r2, sp
   27ada:	a910      	add	r1, sp, #64	; 0x40
   27adc:	a808      	add	r0, sp, #32
   27ade:	f7d8 fe3b 	bl	758 <ocrypto_mod_p256_mul>
   27ae2:	a908      	add	r1, sp, #32
   27ae4:	a810      	add	r0, sp, #64	; 0x40
   27ae6:	f7d8 fe4f 	bl	788 <ocrypto_mod_p256_sqr>
   27aea:	a910      	add	r1, sp, #64	; 0x40
   27aec:	4608      	mov	r0, r1
   27aee:	f7d8 fe4b 	bl	788 <ocrypto_mod_p256_sqr>
   27af2:	a910      	add	r1, sp, #64	; 0x40
   27af4:	4608      	mov	r0, r1
   27af6:	f7d8 fe47 	bl	788 <ocrypto_mod_p256_sqr>
   27afa:	a910      	add	r1, sp, #64	; 0x40
   27afc:	4608      	mov	r0, r1
   27afe:	f7d8 fe43 	bl	788 <ocrypto_mod_p256_sqr>
   27b02:	a910      	add	r1, sp, #64	; 0x40
   27b04:	aa08      	add	r2, sp, #32
   27b06:	4608      	mov	r0, r1
   27b08:	f7d8 fe26 	bl	758 <ocrypto_mod_p256_mul>
   27b0c:	a910      	add	r1, sp, #64	; 0x40
   27b0e:	4608      	mov	r0, r1
   27b10:	f7d8 fe3a 	bl	788 <ocrypto_mod_p256_sqr>
   27b14:	a910      	add	r1, sp, #64	; 0x40
   27b16:	4608      	mov	r0, r1
   27b18:	f7d8 fe36 	bl	788 <ocrypto_mod_p256_sqr>
   27b1c:	a910      	add	r1, sp, #64	; 0x40
   27b1e:	466a      	mov	r2, sp
   27b20:	a808      	add	r0, sp, #32
   27b22:	f7d8 fe19 	bl	758 <ocrypto_mod_p256_mul>
   27b26:	2405      	movs	r4, #5
   27b28:	a908      	add	r1, sp, #32
   27b2a:	a810      	add	r0, sp, #64	; 0x40
   27b2c:	f7d8 fe2c 	bl	788 <ocrypto_mod_p256_sqr>
   27b30:	a910      	add	r1, sp, #64	; 0x40
   27b32:	4608      	mov	r0, r1
   27b34:	f7d8 fe28 	bl	788 <ocrypto_mod_p256_sqr>
   27b38:	3c01      	subs	r4, #1
   27b3a:	a910      	add	r1, sp, #64	; 0x40
   27b3c:	d1f5      	bne.n	27b2a <ocrypto_mod_p256_inv+0x7a>
   27b3e:	aa08      	add	r2, sp, #32
   27b40:	4608      	mov	r0, r1
   27b42:	f7d8 fe09 	bl	758 <ocrypto_mod_p256_mul>
   27b46:	2405      	movs	r4, #5
   27b48:	a910      	add	r1, sp, #64	; 0x40
   27b4a:	4608      	mov	r0, r1
   27b4c:	f7d8 fe1c 	bl	788 <ocrypto_mod_p256_sqr>
   27b50:	a910      	add	r1, sp, #64	; 0x40
   27b52:	4608      	mov	r0, r1
   27b54:	f7d8 fe18 	bl	788 <ocrypto_mod_p256_sqr>
   27b58:	3c01      	subs	r4, #1
   27b5a:	d1f5      	bne.n	27b48 <ocrypto_mod_p256_inv+0x98>
   27b5c:	a910      	add	r1, sp, #64	; 0x40
   27b5e:	aa08      	add	r2, sp, #32
   27b60:	4608      	mov	r0, r1
   27b62:	f7d8 fdf9 	bl	758 <ocrypto_mod_p256_mul>
   27b66:	a910      	add	r1, sp, #64	; 0x40
   27b68:	a808      	add	r0, sp, #32
   27b6a:	f7d8 fe0d 	bl	788 <ocrypto_mod_p256_sqr>
   27b6e:	a908      	add	r1, sp, #32
   27b70:	4608      	mov	r0, r1
   27b72:	f7d8 fe09 	bl	788 <ocrypto_mod_p256_sqr>
   27b76:	a908      	add	r1, sp, #32
   27b78:	466a      	mov	r2, sp
   27b7a:	4668      	mov	r0, sp
   27b7c:	f7d8 fdec 	bl	758 <ocrypto_mod_p256_mul>
   27b80:	2410      	movs	r4, #16
   27b82:	4669      	mov	r1, sp
   27b84:	a810      	add	r0, sp, #64	; 0x40
   27b86:	f7d8 fdff 	bl	788 <ocrypto_mod_p256_sqr>
   27b8a:	a910      	add	r1, sp, #64	; 0x40
   27b8c:	4608      	mov	r0, r1
   27b8e:	f7d8 fdfb 	bl	788 <ocrypto_mod_p256_sqr>
   27b92:	3c01      	subs	r4, #1
   27b94:	a910      	add	r1, sp, #64	; 0x40
   27b96:	d1f5      	bne.n	27b84 <ocrypto_mod_p256_inv+0xd4>
   27b98:	462a      	mov	r2, r5
   27b9a:	4608      	mov	r0, r1
   27b9c:	f7d8 fddc 	bl	758 <ocrypto_mod_p256_mul>
   27ba0:	2440      	movs	r4, #64	; 0x40
   27ba2:	a910      	add	r1, sp, #64	; 0x40
   27ba4:	4608      	mov	r0, r1
   27ba6:	f7d8 fdef 	bl	788 <ocrypto_mod_p256_sqr>
   27baa:	a910      	add	r1, sp, #64	; 0x40
   27bac:	4608      	mov	r0, r1
   27bae:	f7d8 fdeb 	bl	788 <ocrypto_mod_p256_sqr>
   27bb2:	3c01      	subs	r4, #1
   27bb4:	d1f5      	bne.n	27ba2 <ocrypto_mod_p256_inv+0xf2>
   27bb6:	a910      	add	r1, sp, #64	; 0x40
   27bb8:	466a      	mov	r2, sp
   27bba:	4608      	mov	r0, r1
   27bbc:	f7d8 fdcc 	bl	758 <ocrypto_mod_p256_mul>
   27bc0:	2410      	movs	r4, #16
   27bc2:	a910      	add	r1, sp, #64	; 0x40
   27bc4:	4608      	mov	r0, r1
   27bc6:	f7d8 fddf 	bl	788 <ocrypto_mod_p256_sqr>
   27bca:	a910      	add	r1, sp, #64	; 0x40
   27bcc:	4608      	mov	r0, r1
   27bce:	f7d8 fddb 	bl	788 <ocrypto_mod_p256_sqr>
   27bd2:	3c01      	subs	r4, #1
   27bd4:	d1f5      	bne.n	27bc2 <ocrypto_mod_p256_inv+0x112>
   27bd6:	a910      	add	r1, sp, #64	; 0x40
   27bd8:	466a      	mov	r2, sp
   27bda:	4608      	mov	r0, r1
   27bdc:	f7d8 fdbc 	bl	758 <ocrypto_mod_p256_mul>
   27be0:	2410      	movs	r4, #16
   27be2:	a910      	add	r1, sp, #64	; 0x40
   27be4:	4608      	mov	r0, r1
   27be6:	f7d8 fdcf 	bl	788 <ocrypto_mod_p256_sqr>
   27bea:	a910      	add	r1, sp, #64	; 0x40
   27bec:	4608      	mov	r0, r1
   27bee:	f7d8 fdcb 	bl	788 <ocrypto_mod_p256_sqr>
   27bf2:	3c01      	subs	r4, #1
   27bf4:	d1f5      	bne.n	27be2 <ocrypto_mod_p256_inv+0x132>
   27bf6:	a910      	add	r1, sp, #64	; 0x40
   27bf8:	aa08      	add	r2, sp, #32
   27bfa:	4608      	mov	r0, r1
   27bfc:	f7d8 fdac 	bl	758 <ocrypto_mod_p256_mul>
   27c00:	462a      	mov	r2, r5
   27c02:	a910      	add	r1, sp, #64	; 0x40
   27c04:	4630      	mov	r0, r6
   27c06:	f7d8 fda7 	bl	758 <ocrypto_mod_p256_mul>
   27c0a:	b018      	add	sp, #96	; 0x60
   27c0c:	bd70      	pop	{r4, r5, r6, pc}
   27c0e:	bf00      	nop

00027c10 <nrf_cc3xx_platform_init>:
   27c10:	b510      	push	{r4, lr}
   27c12:	4c0c      	ldr	r4, [pc, #48]	; (27c44 <nrf_cc3xx_platform_init+0x34>)
   27c14:	6823      	ldr	r3, [r4, #0]
   27c16:	b113      	cbz	r3, 27c1e <nrf_cc3xx_platform_init+0xe>
   27c18:	4b0b      	ldr	r3, [pc, #44]	; (27c48 <nrf_cc3xx_platform_init+0x38>)
   27c1a:	681b      	ldr	r3, [r3, #0]
   27c1c:	b92b      	cbnz	r3, 27c2a <nrf_cc3xx_platform_init+0x1a>
   27c1e:	f000 fe99 	bl	28954 <CC_LibInit>
   27c22:	b930      	cbnz	r0, 27c32 <nrf_cc3xx_platform_init+0x22>
   27c24:	4b08      	ldr	r3, [pc, #32]	; (27c48 <nrf_cc3xx_platform_init+0x38>)
   27c26:	2201      	movs	r2, #1
   27c28:	601a      	str	r2, [r3, #0]
   27c2a:	2301      	movs	r3, #1
   27c2c:	6023      	str	r3, [r4, #0]
   27c2e:	2000      	movs	r0, #0
   27c30:	bd10      	pop	{r4, pc}
   27c32:	3801      	subs	r0, #1
   27c34:	2806      	cmp	r0, #6
   27c36:	d901      	bls.n	27c3c <nrf_cc3xx_platform_init+0x2c>
   27c38:	4804      	ldr	r0, [pc, #16]	; (27c4c <nrf_cc3xx_platform_init+0x3c>)
   27c3a:	bd10      	pop	{r4, pc}
   27c3c:	4b04      	ldr	r3, [pc, #16]	; (27c50 <nrf_cc3xx_platform_init+0x40>)
   27c3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   27c42:	bd10      	pop	{r4, pc}
   27c44:	20003858 	.word	0x20003858
   27c48:	2000385c 	.word	0x2000385c
   27c4c:	ffff8ffe 	.word	0xffff8ffe
   27c50:	0002fe40 	.word	0x0002fe40

00027c54 <nrf_cc3xx_platform_abort>:
   27c54:	f3bf 8f4f 	dsb	sy
   27c58:	4905      	ldr	r1, [pc, #20]	; (27c70 <nrf_cc3xx_platform_abort+0x1c>)
   27c5a:	4b06      	ldr	r3, [pc, #24]	; (27c74 <nrf_cc3xx_platform_abort+0x20>)
   27c5c:	68ca      	ldr	r2, [r1, #12]
   27c5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   27c62:	4313      	orrs	r3, r2
   27c64:	60cb      	str	r3, [r1, #12]
   27c66:	f3bf 8f4f 	dsb	sy
   27c6a:	bf00      	nop
   27c6c:	e7fd      	b.n	27c6a <nrf_cc3xx_platform_abort+0x16>
   27c6e:	bf00      	nop
   27c70:	e000ed00 	.word	0xe000ed00
   27c74:	05fa0004 	.word	0x05fa0004

00027c78 <CC_PalAbort>:
   27c78:	b410      	push	{r4}
   27c7a:	4b09      	ldr	r3, [pc, #36]	; (27ca0 <CC_PalAbort+0x28>)
   27c7c:	4909      	ldr	r1, [pc, #36]	; (27ca4 <CC_PalAbort+0x2c>)
   27c7e:	4c0a      	ldr	r4, [pc, #40]	; (27ca8 <CC_PalAbort+0x30>)
   27c80:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   27c84:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27c88:	6849      	ldr	r1, [r1, #4]
   27c8a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   27c8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   27c92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27c96:	2300      	movs	r3, #0
   27c98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   27c9c:	bc10      	pop	{r4}
   27c9e:	4708      	bx	r1
   27ca0:	5002b000 	.word	0x5002b000
   27ca4:	20000968 	.word	0x20000968
   27ca8:	5002a000 	.word	0x5002a000

00027cac <nrf_cc3xx_platform_set_abort>:
   27cac:	e9d0 1200 	ldrd	r1, r2, [r0]
   27cb0:	4b01      	ldr	r3, [pc, #4]	; (27cb8 <nrf_cc3xx_platform_set_abort+0xc>)
   27cb2:	e9c3 1200 	strd	r1, r2, [r3]
   27cb6:	4770      	bx	lr
   27cb8:	20000968 	.word	0x20000968

00027cbc <nrf_cc3xx_platform_ctr_drbg_init>:
   27cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27cc0:	4c14      	ldr	r4, [pc, #80]	; (27d14 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   27cc2:	4e15      	ldr	r6, [pc, #84]	; (27d18 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   27cc4:	2800      	cmp	r0, #0
   27cc6:	bf18      	it	ne
   27cc8:	4604      	movne	r4, r0
   27cca:	b083      	sub	sp, #12
   27ccc:	6823      	ldr	r3, [r4, #0]
   27cce:	42b3      	cmp	r3, r6
   27cd0:	d01c      	beq.n	27d0c <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   27cd2:	460d      	mov	r5, r1
   27cd4:	4620      	mov	r0, r4
   27cd6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   27cda:	f104 0904 	add.w	r9, r4, #4
   27cde:	4617      	mov	r7, r2
   27ce0:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   27ce4:	f000 f8e8 	bl	27eb8 <mbedtls_platform_zeroize>
   27ce8:	4648      	mov	r0, r9
   27cea:	f000 fd1d 	bl	28728 <cc_mbedtls_entropy_init>
   27cee:	4640      	mov	r0, r8
   27cf0:	f000 fb4a 	bl	28388 <cc_mbedtls_ctr_drbg_init>
   27cf4:	4909      	ldr	r1, [pc, #36]	; (27d1c <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   27cf6:	9700      	str	r7, [sp, #0]
   27cf8:	462b      	mov	r3, r5
   27cfa:	464a      	mov	r2, r9
   27cfc:	4640      	mov	r0, r8
   27cfe:	f000 fb59 	bl	283b4 <cc_mbedtls_ctr_drbg_seed>
   27d02:	b900      	cbnz	r0, 27d06 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   27d04:	6026      	str	r6, [r4, #0]
   27d06:	b003      	add	sp, #12
   27d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27d0c:	2000      	movs	r0, #0
   27d0e:	b003      	add	sp, #12
   27d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27d14:	20003860 	.word	0x20003860
   27d18:	5ac9bca5 	.word	0x5ac9bca5
   27d1c:	000287b1 	.word	0x000287b1

00027d20 <nrf_cc3xx_platform_ctr_drbg_get>:
   27d20:	b570      	push	{r4, r5, r6, lr}
   27d22:	4d0d      	ldr	r5, [pc, #52]	; (27d58 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   27d24:	2800      	cmp	r0, #0
   27d26:	bf18      	it	ne
   27d28:	4605      	movne	r5, r0
   27d2a:	461e      	mov	r6, r3
   27d2c:	6828      	ldr	r0, [r5, #0]
   27d2e:	4b0b      	ldr	r3, [pc, #44]	; (27d5c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   27d30:	4298      	cmp	r0, r3
   27d32:	b082      	sub	sp, #8
   27d34:	d10d      	bne.n	27d52 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   27d36:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   27d3a:	2500      	movs	r5, #0
   27d3c:	9500      	str	r5, [sp, #0]
   27d3e:	462b      	mov	r3, r5
   27d40:	4614      	mov	r4, r2
   27d42:	f000 fb85 	bl	28450 <cc_mbedtls_ctr_drbg_random_with_add>
   27d46:	2800      	cmp	r0, #0
   27d48:	bf18      	it	ne
   27d4a:	462c      	movne	r4, r5
   27d4c:	6034      	str	r4, [r6, #0]
   27d4e:	b002      	add	sp, #8
   27d50:	bd70      	pop	{r4, r5, r6, pc}
   27d52:	4803      	ldr	r0, [pc, #12]	; (27d60 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   27d54:	e7fb      	b.n	27d4e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   27d56:	bf00      	nop
   27d58:	20003860 	.word	0x20003860
   27d5c:	5ac9bca5 	.word	0x5ac9bca5
   27d60:	ffff8fe8 	.word	0xffff8fe8

00027d64 <mutex_free>:
   27d64:	b510      	push	{r4, lr}
   27d66:	4604      	mov	r4, r0
   27d68:	b150      	cbz	r0, 27d80 <mutex_free+0x1c>
   27d6a:	6863      	ldr	r3, [r4, #4]
   27d6c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27d70:	d005      	beq.n	27d7e <mutex_free+0x1a>
   27d72:	4a06      	ldr	r2, [pc, #24]	; (27d8c <mutex_free+0x28>)
   27d74:	4293      	cmp	r3, r2
   27d76:	d002      	beq.n	27d7e <mutex_free+0x1a>
   27d78:	2300      	movs	r3, #0
   27d7a:	6023      	str	r3, [r4, #0]
   27d7c:	6062      	str	r2, [r4, #4]
   27d7e:	bd10      	pop	{r4, pc}
   27d80:	4b03      	ldr	r3, [pc, #12]	; (27d90 <mutex_free+0x2c>)
   27d82:	4804      	ldr	r0, [pc, #16]	; (27d94 <mutex_free+0x30>)
   27d84:	685b      	ldr	r3, [r3, #4]
   27d86:	4798      	blx	r3
   27d88:	e7ef      	b.n	27d6a <mutex_free+0x6>
   27d8a:	bf00      	nop
   27d8c:	a95c5f2c 	.word	0xa95c5f2c
   27d90:	20000968 	.word	0x20000968
   27d94:	0002fe5c 	.word	0x0002fe5c

00027d98 <mutex_lock>:
   27d98:	b1c8      	cbz	r0, 27dce <mutex_lock+0x36>
   27d9a:	6843      	ldr	r3, [r0, #4]
   27d9c:	4a0d      	ldr	r2, [pc, #52]	; (27dd4 <mutex_lock+0x3c>)
   27d9e:	4293      	cmp	r3, r2
   27da0:	d013      	beq.n	27dca <mutex_lock+0x32>
   27da2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27da6:	d00e      	beq.n	27dc6 <mutex_lock+0x2e>
   27da8:	2301      	movs	r3, #1
   27daa:	e850 2f00 	ldrex	r2, [r0]
   27dae:	4619      	mov	r1, r3
   27db0:	e840 1c00 	strex	ip, r1, [r0]
   27db4:	f09c 0f00 	teq	ip, #0
   27db8:	d1f7      	bne.n	27daa <mutex_lock+0x12>
   27dba:	2a01      	cmp	r2, #1
   27dbc:	d0f5      	beq.n	27daa <mutex_lock+0x12>
   27dbe:	f3bf 8f5f 	dmb	sy
   27dc2:	2000      	movs	r0, #0
   27dc4:	4770      	bx	lr
   27dc6:	4804      	ldr	r0, [pc, #16]	; (27dd8 <mutex_lock+0x40>)
   27dc8:	4770      	bx	lr
   27dca:	4804      	ldr	r0, [pc, #16]	; (27ddc <mutex_lock+0x44>)
   27dcc:	4770      	bx	lr
   27dce:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27dd2:	4770      	bx	lr
   27dd4:	a95c5f2c 	.word	0xa95c5f2c
   27dd8:	ffff8fe9 	.word	0xffff8fe9
   27ddc:	ffff8fea 	.word	0xffff8fea

00027de0 <mutex_unlock>:
   27de0:	b180      	cbz	r0, 27e04 <mutex_unlock+0x24>
   27de2:	6843      	ldr	r3, [r0, #4]
   27de4:	4a09      	ldr	r2, [pc, #36]	; (27e0c <mutex_unlock+0x2c>)
   27de6:	4293      	cmp	r3, r2
   27de8:	d00a      	beq.n	27e00 <mutex_unlock+0x20>
   27dea:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27dee:	d005      	beq.n	27dfc <mutex_unlock+0x1c>
   27df0:	f3bf 8f5f 	dmb	sy
   27df4:	2300      	movs	r3, #0
   27df6:	6003      	str	r3, [r0, #0]
   27df8:	4618      	mov	r0, r3
   27dfa:	4770      	bx	lr
   27dfc:	4804      	ldr	r0, [pc, #16]	; (27e10 <mutex_unlock+0x30>)
   27dfe:	4770      	bx	lr
   27e00:	4804      	ldr	r0, [pc, #16]	; (27e14 <mutex_unlock+0x34>)
   27e02:	4770      	bx	lr
   27e04:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27e08:	4770      	bx	lr
   27e0a:	bf00      	nop
   27e0c:	a95c5f2c 	.word	0xa95c5f2c
   27e10:	ffff8fe9 	.word	0xffff8fe9
   27e14:	ffff8fea 	.word	0xffff8fea

00027e18 <mutex_init>:
   27e18:	b510      	push	{r4, lr}
   27e1a:	4604      	mov	r4, r0
   27e1c:	b120      	cbz	r0, 27e28 <mutex_init+0x10>
   27e1e:	4b04      	ldr	r3, [pc, #16]	; (27e30 <mutex_init+0x18>)
   27e20:	6063      	str	r3, [r4, #4]
   27e22:	2200      	movs	r2, #0
   27e24:	6022      	str	r2, [r4, #0]
   27e26:	bd10      	pop	{r4, pc}
   27e28:	4802      	ldr	r0, [pc, #8]	; (27e34 <mutex_init+0x1c>)
   27e2a:	f7ff ff25 	bl	27c78 <CC_PalAbort>
   27e2e:	e7f6      	b.n	27e1e <mutex_init+0x6>
   27e30:	3a00003a 	.word	0x3a00003a
   27e34:	0002fe84 	.word	0x0002fe84

00027e38 <nrf_cc3xx_platform_set_mutexes>:
   27e38:	b570      	push	{r4, r5, r6, lr}
   27e3a:	e9d0 2300 	ldrd	r2, r3, [r0]
   27e3e:	4c15      	ldr	r4, [pc, #84]	; (27e94 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   27e40:	4d15      	ldr	r5, [pc, #84]	; (27e98 <nrf_cc3xx_platform_set_mutexes+0x60>)
   27e42:	6063      	str	r3, [r4, #4]
   27e44:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   27e48:	e9c4 3002 	strd	r3, r0, [r4, #8]
   27e4c:	6022      	str	r2, [r4, #0]
   27e4e:	4b13      	ldr	r3, [pc, #76]	; (27e9c <nrf_cc3xx_platform_set_mutexes+0x64>)
   27e50:	6808      	ldr	r0, [r1, #0]
   27e52:	6018      	str	r0, [r3, #0]
   27e54:	6848      	ldr	r0, [r1, #4]
   27e56:	6058      	str	r0, [r3, #4]
   27e58:	6888      	ldr	r0, [r1, #8]
   27e5a:	6098      	str	r0, [r3, #8]
   27e5c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   27e60:	60d8      	str	r0, [r3, #12]
   27e62:	6119      	str	r1, [r3, #16]
   27e64:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   27e68:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27e6c:	d010      	beq.n	27e90 <nrf_cc3xx_platform_set_mutexes+0x58>
   27e6e:	490c      	ldr	r1, [pc, #48]	; (27ea0 <nrf_cc3xx_platform_set_mutexes+0x68>)
   27e70:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   27e74:	2300      	movs	r3, #0
   27e76:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   27e7a:	f505 708a 	add.w	r0, r5, #276	; 0x114
   27e7e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   27e82:	4790      	blx	r2
   27e84:	6823      	ldr	r3, [r4, #0]
   27e86:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   27e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27e8e:	4718      	bx	r3
   27e90:	bd70      	pop	{r4, r5, r6, pc}
   27e92:	bf00      	nop
   27e94:	20000978 	.word	0x20000978
   27e98:	20003860 	.word	0x20003860
   27e9c:	20000988 	.word	0x20000988
   27ea0:	a95c5f2c 	.word	0xa95c5f2c

00027ea4 <mbedtls_zeroize_internal>:
   27ea4:	b138      	cbz	r0, 27eb6 <mbedtls_zeroize_internal+0x12>
   27ea6:	b131      	cbz	r1, 27eb6 <mbedtls_zeroize_internal+0x12>
   27ea8:	4401      	add	r1, r0
   27eaa:	2200      	movs	r2, #0
   27eac:	4603      	mov	r3, r0
   27eae:	3001      	adds	r0, #1
   27eb0:	4281      	cmp	r1, r0
   27eb2:	701a      	strb	r2, [r3, #0]
   27eb4:	d1fa      	bne.n	27eac <mbedtls_zeroize_internal+0x8>
   27eb6:	4770      	bx	lr

00027eb8 <mbedtls_platform_zeroize>:
   27eb8:	b138      	cbz	r0, 27eca <mbedtls_platform_zeroize+0x12>
   27eba:	b131      	cbz	r1, 27eca <mbedtls_platform_zeroize+0x12>
   27ebc:	4401      	add	r1, r0
   27ebe:	2200      	movs	r2, #0
   27ec0:	4603      	mov	r3, r0
   27ec2:	3001      	adds	r0, #1
   27ec4:	4288      	cmp	r0, r1
   27ec6:	701a      	strb	r2, [r3, #0]
   27ec8:	d1fa      	bne.n	27ec0 <mbedtls_platform_zeroize+0x8>
   27eca:	4770      	bx	lr

00027ecc <block_cipher_df>:
   27ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ed0:	b0b7      	sub	sp, #220	; 0xdc
   27ed2:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   27ed6:	9005      	str	r0, [sp, #20]
   27ed8:	f200 8147 	bhi.w	2816a <block_cipher_df+0x29e>
   27edc:	4614      	mov	r4, r2
   27ede:	460d      	mov	r5, r1
   27ee0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   27ee4:	2100      	movs	r1, #0
   27ee6:	48a2      	ldr	r0, [pc, #648]	; (28170 <block_cipher_df+0x2a4>)
   27ee8:	f003 fe11 	bl	2bb0e <memset>
   27eec:	a819      	add	r0, sp, #100	; 0x64
   27eee:	f001 f9cf 	bl	29290 <cc_mbedtls_aes_init>
   27ef2:	489f      	ldr	r0, [pc, #636]	; (28170 <block_cipher_df+0x2a4>)
   27ef4:	2300      	movs	r3, #0
   27ef6:	8203      	strh	r3, [r0, #16]
   27ef8:	ba63      	rev16	r3, r4
   27efa:	8243      	strh	r3, [r0, #18]
   27efc:	2320      	movs	r3, #32
   27efe:	4629      	mov	r1, r5
   27f00:	75c3      	strb	r3, [r0, #23]
   27f02:	4605      	mov	r5, r0
   27f04:	4622      	mov	r2, r4
   27f06:	3018      	adds	r0, #24
   27f08:	f003 fdf6 	bl	2baf8 <memcpy>
   27f0c:	462b      	mov	r3, r5
   27f0e:	4423      	add	r3, r4
   27f10:	2280      	movs	r2, #128	; 0x80
   27f12:	761a      	strb	r2, [r3, #24]
   27f14:	4b97      	ldr	r3, [pc, #604]	; (28174 <block_cipher_df+0x2a8>)
   27f16:	930d      	str	r3, [sp, #52]	; 0x34
   27f18:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27f1c:	930e      	str	r3, [sp, #56]	; 0x38
   27f1e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27f22:	930f      	str	r3, [sp, #60]	; 0x3c
   27f24:	a90d      	add	r1, sp, #52	; 0x34
   27f26:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27f2a:	a819      	add	r0, sp, #100	; 0x64
   27f2c:	9310      	str	r3, [sp, #64]	; 0x40
   27f2e:	f001 f9c5 	bl	292bc <cc_mbedtls_aes_setkey_enc>
   27f32:	4605      	mov	r5, r0
   27f34:	2800      	cmp	r0, #0
   27f36:	f040 80f4 	bne.w	28122 <block_cipher_df+0x256>
   27f3a:	f104 0319 	add.w	r3, r4, #25
   27f3e:	9306      	str	r3, [sp, #24]
   27f40:	f10d 0820 	add.w	r8, sp, #32
   27f44:	ab11      	add	r3, sp, #68	; 0x44
   27f46:	9304      	str	r3, [sp, #16]
   27f48:	9307      	str	r3, [sp, #28]
   27f4a:	46c1      	mov	r9, r8
   27f4c:	2210      	movs	r2, #16
   27f4e:	2100      	movs	r1, #0
   27f50:	4648      	mov	r0, r9
   27f52:	f003 fddc 	bl	2bb0e <memset>
   27f56:	f8df a220 	ldr.w	sl, [pc, #544]	; 28178 <block_cipher_df+0x2ac>
   27f5a:	9b06      	ldr	r3, [sp, #24]
   27f5c:	9300      	str	r3, [sp, #0]
   27f5e:	f8cd 900c 	str.w	r9, [sp, #12]
   27f62:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   27f66:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   27f6a:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   27f6e:	f89d 5020 	ldrb.w	r5, [sp, #32]
   27f72:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   27f76:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   27f7a:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   27f7e:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   27f82:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   27f86:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   27f8a:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   27f8e:	406a      	eors	r2, r5
   27f90:	ea8e 0e00 	eor.w	lr, lr, r0
   27f94:	9d00      	ldr	r5, [sp, #0]
   27f96:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   27f9a:	9202      	str	r2, [sp, #8]
   27f9c:	ea8c 0c03 	eor.w	ip, ip, r3
   27fa0:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   27fa4:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   27fa8:	2d10      	cmp	r5, #16
   27faa:	ea80 0003 	eor.w	r0, r0, r3
   27fae:	462b      	mov	r3, r5
   27fb0:	bf8c      	ite	hi
   27fb2:	3b10      	subhi	r3, #16
   27fb4:	1b6b      	subls	r3, r5, r5
   27fb6:	9300      	str	r3, [sp, #0]
   27fb8:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   27fbc:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   27fc0:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   27fc4:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   27fc8:	4061      	eors	r1, r4
   27fca:	405f      	eors	r7, r3
   27fcc:	2400      	movs	r4, #0
   27fce:	406a      	eors	r2, r5
   27fd0:	ea8b 0b06 	eor.w	fp, fp, r6
   27fd4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   27fd8:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   27fdc:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   27fe0:	9601      	str	r6, [sp, #4]
   27fe2:	4626      	mov	r6, r4
   27fe4:	406b      	eors	r3, r5
   27fe6:	f36b 0607 	bfi	r6, fp, #0, #8
   27fea:	4625      	mov	r5, r4
   27fec:	f367 260f 	bfi	r6, r7, #8, #8
   27ff0:	462f      	mov	r7, r5
   27ff2:	f361 0707 	bfi	r7, r1, #0, #8
   27ff6:	9902      	ldr	r1, [sp, #8]
   27ff8:	f361 0507 	bfi	r5, r1, #0, #8
   27ffc:	f362 250f 	bfi	r5, r2, #8, #8
   28000:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   28004:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   28008:	f363 270f 	bfi	r7, r3, #8, #8
   2800c:	ea82 0909 	eor.w	r9, r2, r9
   28010:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   28014:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   28018:	ea83 0808 	eor.w	r8, r3, r8
   2801c:	404a      	eors	r2, r1
   2801e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   28022:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   28026:	f36e 0407 	bfi	r4, lr, #0, #8
   2802a:	404b      	eors	r3, r1
   2802c:	f368 4717 	bfi	r7, r8, #16, #8
   28030:	f36c 240f 	bfi	r4, ip, #8, #8
   28034:	f363 671f 	bfi	r7, r3, #24, #8
   28038:	9b03      	ldr	r3, [sp, #12]
   2803a:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   2803e:	f8dd e004 	ldr.w	lr, [sp, #4]
   28042:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   28046:	ea8c 0c0e 	eor.w	ip, ip, lr
   2804a:	f36c 4617 	bfi	r6, ip, #16, #8
   2804e:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   28052:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   28056:	ea8c 0c08 	eor.w	ip, ip, r8
   2805a:	f36c 661f 	bfi	r6, ip, #24, #8
   2805e:	f369 4517 	bfi	r5, r9, #16, #8
   28062:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   28066:	960b      	str	r6, [sp, #44]	; 0x2c
   28068:	f362 651f 	bfi	r5, r2, #24, #8
   2806c:	f360 4417 	bfi	r4, r0, #16, #8
   28070:	9508      	str	r5, [sp, #32]
   28072:	ea8c 050e 	eor.w	r5, ip, lr
   28076:	f365 641f 	bfi	r4, r5, #24, #8
   2807a:	461a      	mov	r2, r3
   2807c:	2101      	movs	r1, #1
   2807e:	a819      	add	r0, sp, #100	; 0x64
   28080:	f10a 0a10 	add.w	sl, sl, #16
   28084:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   28088:	f001 f932 	bl	292f0 <cc_mbedtls_aes_crypt_ecb>
   2808c:	2800      	cmp	r0, #0
   2808e:	d168      	bne.n	28162 <block_cipher_df+0x296>
   28090:	9b00      	ldr	r3, [sp, #0]
   28092:	2b00      	cmp	r3, #0
   28094:	f47f af65 	bne.w	27f62 <block_cipher_df+0x96>
   28098:	9c07      	ldr	r4, [sp, #28]
   2809a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2809e:	4620      	mov	r0, r4
   280a0:	2210      	movs	r2, #16
   280a2:	3410      	adds	r4, #16
   280a4:	4649      	mov	r1, r9
   280a6:	9407      	str	r4, [sp, #28]
   280a8:	f003 fd26 	bl	2baf8 <memcpy>
   280ac:	4a30      	ldr	r2, [pc, #192]	; (28170 <block_cipher_df+0x2a4>)
   280ae:	78d3      	ldrb	r3, [r2, #3]
   280b0:	3301      	adds	r3, #1
   280b2:	70d3      	strb	r3, [r2, #3]
   280b4:	ab19      	add	r3, sp, #100	; 0x64
   280b6:	429c      	cmp	r4, r3
   280b8:	f47f af48 	bne.w	27f4c <block_cipher_df+0x80>
   280bc:	9904      	ldr	r1, [sp, #16]
   280be:	2280      	movs	r2, #128	; 0x80
   280c0:	4618      	mov	r0, r3
   280c2:	f001 f8fb 	bl	292bc <cc_mbedtls_aes_setkey_enc>
   280c6:	46c8      	mov	r8, r9
   280c8:	4605      	mov	r5, r0
   280ca:	bb70      	cbnz	r0, 2812a <block_cipher_df+0x25e>
   280cc:	9c05      	ldr	r4, [sp, #20]
   280ce:	f104 0620 	add.w	r6, r4, #32
   280d2:	ab15      	add	r3, sp, #84	; 0x54
   280d4:	461a      	mov	r2, r3
   280d6:	2101      	movs	r1, #1
   280d8:	a819      	add	r0, sp, #100	; 0x64
   280da:	f001 f909 	bl	292f0 <cc_mbedtls_aes_crypt_ecb>
   280de:	2210      	movs	r2, #16
   280e0:	4605      	mov	r5, r0
   280e2:	bb10      	cbnz	r0, 2812a <block_cipher_df+0x25e>
   280e4:	4620      	mov	r0, r4
   280e6:	a915      	add	r1, sp, #84	; 0x54
   280e8:	3410      	adds	r4, #16
   280ea:	f003 fd05 	bl	2baf8 <memcpy>
   280ee:	42b4      	cmp	r4, r6
   280f0:	d1ef      	bne.n	280d2 <block_cipher_df+0x206>
   280f2:	a819      	add	r0, sp, #100	; 0x64
   280f4:	f001 f8dc 	bl	292b0 <cc_mbedtls_aes_free>
   280f8:	481d      	ldr	r0, [pc, #116]	; (28170 <block_cipher_df+0x2a4>)
   280fa:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   280fe:	f7ff fedb 	bl	27eb8 <mbedtls_platform_zeroize>
   28102:	9804      	ldr	r0, [sp, #16]
   28104:	2120      	movs	r1, #32
   28106:	f7ff fed7 	bl	27eb8 <mbedtls_platform_zeroize>
   2810a:	a80d      	add	r0, sp, #52	; 0x34
   2810c:	2110      	movs	r1, #16
   2810e:	f7ff fed3 	bl	27eb8 <mbedtls_platform_zeroize>
   28112:	4640      	mov	r0, r8
   28114:	2110      	movs	r1, #16
   28116:	f7ff fecf 	bl	27eb8 <mbedtls_platform_zeroize>
   2811a:	4628      	mov	r0, r5
   2811c:	b037      	add	sp, #220	; 0xdc
   2811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28122:	ab11      	add	r3, sp, #68	; 0x44
   28124:	9304      	str	r3, [sp, #16]
   28126:	f10d 0820 	add.w	r8, sp, #32
   2812a:	a819      	add	r0, sp, #100	; 0x64
   2812c:	f001 f8c0 	bl	292b0 <cc_mbedtls_aes_free>
   28130:	480f      	ldr	r0, [pc, #60]	; (28170 <block_cipher_df+0x2a4>)
   28132:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   28136:	f7ff febf 	bl	27eb8 <mbedtls_platform_zeroize>
   2813a:	9804      	ldr	r0, [sp, #16]
   2813c:	2120      	movs	r1, #32
   2813e:	f7ff febb 	bl	27eb8 <mbedtls_platform_zeroize>
   28142:	a80d      	add	r0, sp, #52	; 0x34
   28144:	2110      	movs	r1, #16
   28146:	f7ff feb7 	bl	27eb8 <mbedtls_platform_zeroize>
   2814a:	4640      	mov	r0, r8
   2814c:	2110      	movs	r1, #16
   2814e:	f7ff feb3 	bl	27eb8 <mbedtls_platform_zeroize>
   28152:	9805      	ldr	r0, [sp, #20]
   28154:	2120      	movs	r1, #32
   28156:	f7ff feaf 	bl	27eb8 <mbedtls_platform_zeroize>
   2815a:	4628      	mov	r0, r5
   2815c:	b037      	add	sp, #220	; 0xdc
   2815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28162:	f8dd 800c 	ldr.w	r8, [sp, #12]
   28166:	4605      	mov	r5, r0
   28168:	e7df      	b.n	2812a <block_cipher_df+0x25e>
   2816a:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2816e:	e7f4      	b.n	2815a <block_cipher_df+0x28e>
   28170:	20003a30 	.word	0x20003a30
   28174:	03020100 	.word	0x03020100
   28178:	20003a40 	.word	0x20003a40

0002817c <ctr_drbg_update_internal>:
   2817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28180:	b088      	sub	sp, #32
   28182:	4604      	mov	r4, r0
   28184:	460d      	mov	r5, r1
   28186:	2220      	movs	r2, #32
   28188:	2100      	movs	r1, #0
   2818a:	4668      	mov	r0, sp
   2818c:	f003 fcbf 	bl	2bb0e <memset>
   28190:	f104 0620 	add.w	r6, r4, #32
   28194:	466f      	mov	r7, sp
   28196:	7be2      	ldrb	r2, [r4, #15]
   28198:	3201      	adds	r2, #1
   2819a:	b2d2      	uxtb	r2, r2
   2819c:	73e2      	strb	r2, [r4, #15]
   2819e:	2a00      	cmp	r2, #0
   281a0:	d14d      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281a2:	7ba2      	ldrb	r2, [r4, #14]
   281a4:	3201      	adds	r2, #1
   281a6:	b2d2      	uxtb	r2, r2
   281a8:	73a2      	strb	r2, [r4, #14]
   281aa:	2a00      	cmp	r2, #0
   281ac:	d147      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281ae:	7b63      	ldrb	r3, [r4, #13]
   281b0:	3301      	adds	r3, #1
   281b2:	b2db      	uxtb	r3, r3
   281b4:	7363      	strb	r3, [r4, #13]
   281b6:	2b00      	cmp	r3, #0
   281b8:	d141      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281ba:	7b23      	ldrb	r3, [r4, #12]
   281bc:	3301      	adds	r3, #1
   281be:	b2db      	uxtb	r3, r3
   281c0:	7323      	strb	r3, [r4, #12]
   281c2:	2b00      	cmp	r3, #0
   281c4:	d13b      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281c6:	7ae3      	ldrb	r3, [r4, #11]
   281c8:	3301      	adds	r3, #1
   281ca:	b2db      	uxtb	r3, r3
   281cc:	72e3      	strb	r3, [r4, #11]
   281ce:	2b00      	cmp	r3, #0
   281d0:	d135      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281d2:	7aa3      	ldrb	r3, [r4, #10]
   281d4:	3301      	adds	r3, #1
   281d6:	b2db      	uxtb	r3, r3
   281d8:	72a3      	strb	r3, [r4, #10]
   281da:	2b00      	cmp	r3, #0
   281dc:	d12f      	bne.n	2823e <ctr_drbg_update_internal+0xc2>
   281de:	7a63      	ldrb	r3, [r4, #9]
   281e0:	3301      	adds	r3, #1
   281e2:	b2db      	uxtb	r3, r3
   281e4:	7263      	strb	r3, [r4, #9]
   281e6:	bb53      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   281e8:	7a23      	ldrb	r3, [r4, #8]
   281ea:	3301      	adds	r3, #1
   281ec:	b2db      	uxtb	r3, r3
   281ee:	7223      	strb	r3, [r4, #8]
   281f0:	bb2b      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   281f2:	79e3      	ldrb	r3, [r4, #7]
   281f4:	3301      	adds	r3, #1
   281f6:	b2db      	uxtb	r3, r3
   281f8:	71e3      	strb	r3, [r4, #7]
   281fa:	bb03      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   281fc:	79a3      	ldrb	r3, [r4, #6]
   281fe:	3301      	adds	r3, #1
   28200:	b2db      	uxtb	r3, r3
   28202:	71a3      	strb	r3, [r4, #6]
   28204:	b9db      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   28206:	7963      	ldrb	r3, [r4, #5]
   28208:	3301      	adds	r3, #1
   2820a:	b2db      	uxtb	r3, r3
   2820c:	7163      	strb	r3, [r4, #5]
   2820e:	b9b3      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   28210:	7923      	ldrb	r3, [r4, #4]
   28212:	3301      	adds	r3, #1
   28214:	b2db      	uxtb	r3, r3
   28216:	7123      	strb	r3, [r4, #4]
   28218:	b98b      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   2821a:	78e3      	ldrb	r3, [r4, #3]
   2821c:	3301      	adds	r3, #1
   2821e:	b2db      	uxtb	r3, r3
   28220:	70e3      	strb	r3, [r4, #3]
   28222:	b963      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   28224:	78a3      	ldrb	r3, [r4, #2]
   28226:	3301      	adds	r3, #1
   28228:	b2db      	uxtb	r3, r3
   2822a:	70a3      	strb	r3, [r4, #2]
   2822c:	b93b      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   2822e:	7863      	ldrb	r3, [r4, #1]
   28230:	3301      	adds	r3, #1
   28232:	b2db      	uxtb	r3, r3
   28234:	7063      	strb	r3, [r4, #1]
   28236:	b913      	cbnz	r3, 2823e <ctr_drbg_update_internal+0xc2>
   28238:	7823      	ldrb	r3, [r4, #0]
   2823a:	3301      	adds	r3, #1
   2823c:	7023      	strb	r3, [r4, #0]
   2823e:	463b      	mov	r3, r7
   28240:	4622      	mov	r2, r4
   28242:	2101      	movs	r1, #1
   28244:	4630      	mov	r0, r6
   28246:	f001 f853 	bl	292f0 <cc_mbedtls_aes_crypt_ecb>
   2824a:	4680      	mov	r8, r0
   2824c:	bb50      	cbnz	r0, 282a4 <ctr_drbg_update_internal+0x128>
   2824e:	3710      	adds	r7, #16
   28250:	ab08      	add	r3, sp, #32
   28252:	429f      	cmp	r7, r3
   28254:	d19f      	bne.n	28196 <ctr_drbg_update_internal+0x1a>
   28256:	9a00      	ldr	r2, [sp, #0]
   28258:	682b      	ldr	r3, [r5, #0]
   2825a:	9906      	ldr	r1, [sp, #24]
   2825c:	4053      	eors	r3, r2
   2825e:	9300      	str	r3, [sp, #0]
   28260:	9a01      	ldr	r2, [sp, #4]
   28262:	686b      	ldr	r3, [r5, #4]
   28264:	4053      	eors	r3, r2
   28266:	9301      	str	r3, [sp, #4]
   28268:	9a02      	ldr	r2, [sp, #8]
   2826a:	68ab      	ldr	r3, [r5, #8]
   2826c:	4053      	eors	r3, r2
   2826e:	9302      	str	r3, [sp, #8]
   28270:	9a03      	ldr	r2, [sp, #12]
   28272:	68eb      	ldr	r3, [r5, #12]
   28274:	4053      	eors	r3, r2
   28276:	9303      	str	r3, [sp, #12]
   28278:	9a04      	ldr	r2, [sp, #16]
   2827a:	692b      	ldr	r3, [r5, #16]
   2827c:	4053      	eors	r3, r2
   2827e:	9304      	str	r3, [sp, #16]
   28280:	9a05      	ldr	r2, [sp, #20]
   28282:	696b      	ldr	r3, [r5, #20]
   28284:	4053      	eors	r3, r2
   28286:	69aa      	ldr	r2, [r5, #24]
   28288:	9305      	str	r3, [sp, #20]
   2828a:	404a      	eors	r2, r1
   2828c:	69eb      	ldr	r3, [r5, #28]
   2828e:	9206      	str	r2, [sp, #24]
   28290:	9a07      	ldr	r2, [sp, #28]
   28292:	4630      	mov	r0, r6
   28294:	4053      	eors	r3, r2
   28296:	4669      	mov	r1, sp
   28298:	2280      	movs	r2, #128	; 0x80
   2829a:	9307      	str	r3, [sp, #28]
   2829c:	f001 f80e 	bl	292bc <cc_mbedtls_aes_setkey_enc>
   282a0:	4680      	mov	r8, r0
   282a2:	b138      	cbz	r0, 282b4 <ctr_drbg_update_internal+0x138>
   282a4:	4668      	mov	r0, sp
   282a6:	2120      	movs	r1, #32
   282a8:	f7ff fe06 	bl	27eb8 <mbedtls_platform_zeroize>
   282ac:	4640      	mov	r0, r8
   282ae:	b008      	add	sp, #32
   282b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   282b4:	2210      	movs	r2, #16
   282b6:	eb0d 0102 	add.w	r1, sp, r2
   282ba:	4620      	mov	r0, r4
   282bc:	f003 fc1c 	bl	2baf8 <memcpy>
   282c0:	e7f0      	b.n	282a4 <ctr_drbg_update_internal+0x128>
   282c2:	bf00      	nop

000282c4 <mbedtls_ctr_drbg_reseed_internal>:
   282c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   282c8:	4604      	mov	r4, r0
   282ca:	6980      	ldr	r0, [r0, #24]
   282cc:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   282d0:	d852      	bhi.n	28378 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   282d2:	461d      	mov	r5, r3
   282d4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   282d8:	42ab      	cmp	r3, r5
   282da:	d34d      	bcc.n	28378 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   282dc:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   282e0:	1a18      	subs	r0, r3, r0
   282e2:	4290      	cmp	r0, r2
   282e4:	4616      	mov	r6, r2
   282e6:	d347      	bcc.n	28378 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   282e8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 28384 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   282ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
   282f0:	460f      	mov	r7, r1
   282f2:	4648      	mov	r0, r9
   282f4:	2100      	movs	r1, #0
   282f6:	f003 fc0a 	bl	2bb0e <memset>
   282fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   282fe:	69a2      	ldr	r2, [r4, #24]
   28300:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   28304:	4649      	mov	r1, r9
   28306:	4798      	blx	r3
   28308:	2800      	cmp	r0, #0
   2830a:	d138      	bne.n	2837e <mbedtls_ctr_drbg_reseed_internal+0xba>
   2830c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   28310:	b13d      	cbz	r5, 28322 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   28312:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   28316:	462a      	mov	r2, r5
   28318:	eb09 0108 	add.w	r1, r9, r8
   2831c:	4798      	blx	r3
   2831e:	bb70      	cbnz	r0, 2837e <mbedtls_ctr_drbg_reseed_internal+0xba>
   28320:	44a8      	add	r8, r5
   28322:	b107      	cbz	r7, 28326 <mbedtls_ctr_drbg_reseed_internal+0x62>
   28324:	b9c6      	cbnz	r6, 28358 <mbedtls_ctr_drbg_reseed_internal+0x94>
   28326:	4917      	ldr	r1, [pc, #92]	; (28384 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28328:	4642      	mov	r2, r8
   2832a:	4608      	mov	r0, r1
   2832c:	f7ff fdce 	bl	27ecc <block_cipher_df>
   28330:	4605      	mov	r5, r0
   28332:	b138      	cbz	r0, 28344 <mbedtls_ctr_drbg_reseed_internal+0x80>
   28334:	4813      	ldr	r0, [pc, #76]	; (28384 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28336:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2833a:	f7ff fdbd 	bl	27eb8 <mbedtls_platform_zeroize>
   2833e:	4628      	mov	r0, r5
   28340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   28344:	490f      	ldr	r1, [pc, #60]	; (28384 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28346:	4620      	mov	r0, r4
   28348:	f7ff ff18 	bl	2817c <ctr_drbg_update_internal>
   2834c:	4605      	mov	r5, r0
   2834e:	2800      	cmp	r0, #0
   28350:	d1f0      	bne.n	28334 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28352:	2301      	movs	r3, #1
   28354:	6123      	str	r3, [r4, #16]
   28356:	e7ed      	b.n	28334 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28358:	eb09 0008 	add.w	r0, r9, r8
   2835c:	4639      	mov	r1, r7
   2835e:	4632      	mov	r2, r6
   28360:	f003 fbca 	bl	2baf8 <memcpy>
   28364:	4907      	ldr	r1, [pc, #28]	; (28384 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   28366:	44b0      	add	r8, r6
   28368:	4642      	mov	r2, r8
   2836a:	4608      	mov	r0, r1
   2836c:	f7ff fdae 	bl	27ecc <block_cipher_df>
   28370:	4605      	mov	r5, r0
   28372:	2800      	cmp	r0, #0
   28374:	d1de      	bne.n	28334 <mbedtls_ctr_drbg_reseed_internal+0x70>
   28376:	e7e5      	b.n	28344 <mbedtls_ctr_drbg_reseed_internal+0x80>
   28378:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2837c:	e7df      	b.n	2833e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2837e:	f06f 0533 	mvn.w	r5, #51	; 0x33
   28382:	e7dc      	b.n	2833e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   28384:	20003bd0 	.word	0x20003bd0

00028388 <cc_mbedtls_ctr_drbg_init>:
   28388:	b510      	push	{r4, lr}
   2838a:	22a4      	movs	r2, #164	; 0xa4
   2838c:	4604      	mov	r4, r0
   2838e:	2100      	movs	r1, #0
   28390:	f003 fbbd 	bl	2bb0e <memset>
   28394:	4b06      	ldr	r3, [pc, #24]	; (283b0 <cc_mbedtls_ctr_drbg_init+0x28>)
   28396:	f04f 31ff 	mov.w	r1, #4294967295
   2839a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2839e:	6121      	str	r1, [r4, #16]
   283a0:	61e2      	str	r2, [r4, #28]
   283a2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   283a6:	681b      	ldr	r3, [r3, #0]
   283a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   283ac:	4718      	bx	r3
   283ae:	bf00      	nop
   283b0:	200009cc 	.word	0x200009cc

000283b4 <cc_mbedtls_ctr_drbg_seed>:
   283b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   283b8:	b085      	sub	sp, #20
   283ba:	4605      	mov	r5, r0
   283bc:	460f      	mov	r7, r1
   283be:	4616      	mov	r6, r2
   283c0:	2100      	movs	r1, #0
   283c2:	2210      	movs	r2, #16
   283c4:	4668      	mov	r0, sp
   283c6:	4699      	mov	r9, r3
   283c8:	f003 fba1 	bl	2bb0e <memset>
   283cc:	4b1e      	ldr	r3, [pc, #120]	; (28448 <cc_mbedtls_ctr_drbg_seed+0x94>)
   283ce:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   283d2:	681b      	ldr	r3, [r3, #0]
   283d4:	4640      	mov	r0, r8
   283d6:	4798      	blx	r3
   283d8:	b120      	cbz	r0, 283e4 <cc_mbedtls_ctr_drbg_seed+0x30>
   283da:	4604      	mov	r4, r0
   283dc:	4620      	mov	r0, r4
   283de:	b005      	add	sp, #20
   283e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   283e4:	f105 0420 	add.w	r4, r5, #32
   283e8:	4620      	mov	r0, r4
   283ea:	f000 ff51 	bl	29290 <cc_mbedtls_aes_init>
   283ee:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   283f2:	69ae      	ldr	r6, [r5, #24]
   283f4:	692b      	ldr	r3, [r5, #16]
   283f6:	b9ee      	cbnz	r6, 28434 <cc_mbedtls_ctr_drbg_seed+0x80>
   283f8:	2220      	movs	r2, #32
   283fa:	2b00      	cmp	r3, #0
   283fc:	61aa      	str	r2, [r5, #24]
   283fe:	db20      	blt.n	28442 <cc_mbedtls_ctr_drbg_seed+0x8e>
   28400:	461e      	mov	r6, r3
   28402:	4620      	mov	r0, r4
   28404:	4669      	mov	r1, sp
   28406:	2280      	movs	r2, #128	; 0x80
   28408:	f000 ff58 	bl	292bc <cc_mbedtls_aes_setkey_enc>
   2840c:	4604      	mov	r4, r0
   2840e:	b930      	cbnz	r0, 2841e <cc_mbedtls_ctr_drbg_seed+0x6a>
   28410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   28412:	4633      	mov	r3, r6
   28414:	4649      	mov	r1, r9
   28416:	4628      	mov	r0, r5
   28418:	f7ff ff54 	bl	282c4 <mbedtls_ctr_drbg_reseed_internal>
   2841c:	4604      	mov	r4, r0
   2841e:	4b0b      	ldr	r3, [pc, #44]	; (2844c <cc_mbedtls_ctr_drbg_seed+0x98>)
   28420:	4640      	mov	r0, r8
   28422:	681b      	ldr	r3, [r3, #0]
   28424:	4798      	blx	r3
   28426:	2800      	cmp	r0, #0
   28428:	bf18      	it	ne
   2842a:	4604      	movne	r4, r0
   2842c:	4620      	mov	r0, r4
   2842e:	b005      	add	sp, #20
   28430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28434:	2b00      	cmp	r3, #0
   28436:	dae3      	bge.n	28400 <cc_mbedtls_ctr_drbg_seed+0x4c>
   28438:	2e17      	cmp	r6, #23
   2843a:	d802      	bhi.n	28442 <cc_mbedtls_ctr_drbg_seed+0x8e>
   2843c:	3601      	adds	r6, #1
   2843e:	0876      	lsrs	r6, r6, #1
   28440:	e7df      	b.n	28402 <cc_mbedtls_ctr_drbg_seed+0x4e>
   28442:	2600      	movs	r6, #0
   28444:	e7dd      	b.n	28402 <cc_mbedtls_ctr_drbg_seed+0x4e>
   28446:	bf00      	nop
   28448:	200009d0 	.word	0x200009d0
   2844c:	200009d4 	.word	0x200009d4

00028450 <cc_mbedtls_ctr_drbg_random_with_add>:
   28450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28454:	b08d      	sub	sp, #52	; 0x34
   28456:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2845a:	9f16      	ldr	r7, [sp, #88]	; 0x58
   2845c:	f200 80e3 	bhi.w	28626 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   28460:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   28464:	f200 80dc 	bhi.w	28620 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   28468:	4604      	mov	r4, r0
   2846a:	4615      	mov	r5, r2
   2846c:	460e      	mov	r6, r1
   2846e:	2220      	movs	r2, #32
   28470:	2100      	movs	r1, #0
   28472:	a804      	add	r0, sp, #16
   28474:	4698      	mov	r8, r3
   28476:	f003 fb4a 	bl	2bb0e <memset>
   2847a:	4b6c      	ldr	r3, [pc, #432]	; (2862c <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   2847c:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   28480:	681b      	ldr	r3, [r3, #0]
   28482:	4648      	mov	r0, r9
   28484:	4798      	blx	r3
   28486:	4683      	mov	fp, r0
   28488:	2800      	cmp	r0, #0
   2848a:	f040 8092 	bne.w	285b2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2848e:	6922      	ldr	r2, [r4, #16]
   28490:	69e3      	ldr	r3, [r4, #28]
   28492:	429a      	cmp	r2, r3
   28494:	f300 8091 	bgt.w	285ba <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   28498:	6963      	ldr	r3, [r4, #20]
   2849a:	2b00      	cmp	r3, #0
   2849c:	f040 808d 	bne.w	285ba <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   284a0:	2f00      	cmp	r7, #0
   284a2:	f040 80a9 	bne.w	285f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   284a6:	f8df a188 	ldr.w	sl, [pc, #392]	; 28630 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   284aa:	466f      	mov	r7, sp
   284ac:	2d00      	cmp	r5, #0
   284ae:	f000 8098 	beq.w	285e2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   284b2:	f104 0820 	add.w	r8, r4, #32
   284b6:	466f      	mov	r7, sp
   284b8:	e00e      	b.n	284d8 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   284ba:	2d10      	cmp	r5, #16
   284bc:	46ab      	mov	fp, r5
   284be:	bf28      	it	cs
   284c0:	f04f 0b10 	movcs.w	fp, #16
   284c4:	4630      	mov	r0, r6
   284c6:	465a      	mov	r2, fp
   284c8:	4639      	mov	r1, r7
   284ca:	f003 fb15 	bl	2baf8 <memcpy>
   284ce:	ebb5 050b 	subs.w	r5, r5, fp
   284d2:	445e      	add	r6, fp
   284d4:	f000 8085 	beq.w	285e2 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   284d8:	7be3      	ldrb	r3, [r4, #15]
   284da:	3301      	adds	r3, #1
   284dc:	b2db      	uxtb	r3, r3
   284de:	73e3      	strb	r3, [r4, #15]
   284e0:	2b00      	cmp	r3, #0
   284e2:	d14d      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   284e4:	7ba3      	ldrb	r3, [r4, #14]
   284e6:	3301      	adds	r3, #1
   284e8:	b2db      	uxtb	r3, r3
   284ea:	73a3      	strb	r3, [r4, #14]
   284ec:	2b00      	cmp	r3, #0
   284ee:	d147      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   284f0:	7b63      	ldrb	r3, [r4, #13]
   284f2:	3301      	adds	r3, #1
   284f4:	b2db      	uxtb	r3, r3
   284f6:	7363      	strb	r3, [r4, #13]
   284f8:	2b00      	cmp	r3, #0
   284fa:	d141      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   284fc:	7b23      	ldrb	r3, [r4, #12]
   284fe:	3301      	adds	r3, #1
   28500:	b2db      	uxtb	r3, r3
   28502:	7323      	strb	r3, [r4, #12]
   28504:	2b00      	cmp	r3, #0
   28506:	d13b      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28508:	7ae3      	ldrb	r3, [r4, #11]
   2850a:	3301      	adds	r3, #1
   2850c:	b2db      	uxtb	r3, r3
   2850e:	72e3      	strb	r3, [r4, #11]
   28510:	2b00      	cmp	r3, #0
   28512:	d135      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28514:	7aa3      	ldrb	r3, [r4, #10]
   28516:	3301      	adds	r3, #1
   28518:	b2db      	uxtb	r3, r3
   2851a:	72a3      	strb	r3, [r4, #10]
   2851c:	2b00      	cmp	r3, #0
   2851e:	d12f      	bne.n	28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28520:	7a63      	ldrb	r3, [r4, #9]
   28522:	3301      	adds	r3, #1
   28524:	b2db      	uxtb	r3, r3
   28526:	7263      	strb	r3, [r4, #9]
   28528:	bb53      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2852a:	7a23      	ldrb	r3, [r4, #8]
   2852c:	3301      	adds	r3, #1
   2852e:	b2db      	uxtb	r3, r3
   28530:	7223      	strb	r3, [r4, #8]
   28532:	bb2b      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28534:	79e3      	ldrb	r3, [r4, #7]
   28536:	3301      	adds	r3, #1
   28538:	b2db      	uxtb	r3, r3
   2853a:	71e3      	strb	r3, [r4, #7]
   2853c:	bb03      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2853e:	79a3      	ldrb	r3, [r4, #6]
   28540:	3301      	adds	r3, #1
   28542:	b2db      	uxtb	r3, r3
   28544:	71a3      	strb	r3, [r4, #6]
   28546:	b9db      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28548:	7963      	ldrb	r3, [r4, #5]
   2854a:	3301      	adds	r3, #1
   2854c:	b2db      	uxtb	r3, r3
   2854e:	7163      	strb	r3, [r4, #5]
   28550:	b9b3      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28552:	7923      	ldrb	r3, [r4, #4]
   28554:	3301      	adds	r3, #1
   28556:	b2db      	uxtb	r3, r3
   28558:	7123      	strb	r3, [r4, #4]
   2855a:	b98b      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2855c:	78e3      	ldrb	r3, [r4, #3]
   2855e:	3301      	adds	r3, #1
   28560:	b2db      	uxtb	r3, r3
   28562:	70e3      	strb	r3, [r4, #3]
   28564:	b963      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28566:	78a3      	ldrb	r3, [r4, #2]
   28568:	3301      	adds	r3, #1
   2856a:	b2db      	uxtb	r3, r3
   2856c:	70a3      	strb	r3, [r4, #2]
   2856e:	b93b      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   28570:	7863      	ldrb	r3, [r4, #1]
   28572:	3301      	adds	r3, #1
   28574:	b2db      	uxtb	r3, r3
   28576:	7063      	strb	r3, [r4, #1]
   28578:	b913      	cbnz	r3, 28580 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   2857a:	7823      	ldrb	r3, [r4, #0]
   2857c:	3301      	adds	r3, #1
   2857e:	7023      	strb	r3, [r4, #0]
   28580:	463b      	mov	r3, r7
   28582:	4622      	mov	r2, r4
   28584:	2101      	movs	r1, #1
   28586:	4640      	mov	r0, r8
   28588:	f000 feb2 	bl	292f0 <cc_mbedtls_aes_crypt_ecb>
   2858c:	4683      	mov	fp, r0
   2858e:	2800      	cmp	r0, #0
   28590:	d093      	beq.n	284ba <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   28592:	f8da 3000 	ldr.w	r3, [sl]
   28596:	4648      	mov	r0, r9
   28598:	4798      	blx	r3
   2859a:	2120      	movs	r1, #32
   2859c:	4603      	mov	r3, r0
   2859e:	a804      	add	r0, sp, #16
   285a0:	2b00      	cmp	r3, #0
   285a2:	bf18      	it	ne
   285a4:	469b      	movne	fp, r3
   285a6:	f7ff fc87 	bl	27eb8 <mbedtls_platform_zeroize>
   285aa:	2110      	movs	r1, #16
   285ac:	4638      	mov	r0, r7
   285ae:	f7ff fc83 	bl	27eb8 <mbedtls_platform_zeroize>
   285b2:	4658      	mov	r0, fp
   285b4:	b00d      	add	sp, #52	; 0x34
   285b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285ba:	463a      	mov	r2, r7
   285bc:	4641      	mov	r1, r8
   285be:	2300      	movs	r3, #0
   285c0:	4620      	mov	r0, r4
   285c2:	f7ff fe7f 	bl	282c4 <mbedtls_ctr_drbg_reseed_internal>
   285c6:	f8df a068 	ldr.w	sl, [pc, #104]	; 28630 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   285ca:	2800      	cmp	r0, #0
   285cc:	f43f af6d 	beq.w	284aa <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   285d0:	f8da 3000 	ldr.w	r3, [sl]
   285d4:	4648      	mov	r0, r9
   285d6:	4798      	blx	r3
   285d8:	4683      	mov	fp, r0
   285da:	2800      	cmp	r0, #0
   285dc:	f43f af65 	beq.w	284aa <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   285e0:	e7e7      	b.n	285b2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   285e2:	a904      	add	r1, sp, #16
   285e4:	4620      	mov	r0, r4
   285e6:	f7ff fdc9 	bl	2817c <ctr_drbg_update_internal>
   285ea:	4683      	mov	fp, r0
   285ec:	2800      	cmp	r0, #0
   285ee:	d1d0      	bne.n	28592 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   285f0:	6923      	ldr	r3, [r4, #16]
   285f2:	3301      	adds	r3, #1
   285f4:	6123      	str	r3, [r4, #16]
   285f6:	e7cc      	b.n	28592 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   285f8:	463a      	mov	r2, r7
   285fa:	4641      	mov	r1, r8
   285fc:	a804      	add	r0, sp, #16
   285fe:	f7ff fc65 	bl	27ecc <block_cipher_df>
   28602:	4683      	mov	fp, r0
   28604:	b118      	cbz	r0, 2860e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   28606:	f8df a028 	ldr.w	sl, [pc, #40]	; 28630 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   2860a:	466f      	mov	r7, sp
   2860c:	e7c1      	b.n	28592 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   2860e:	a904      	add	r1, sp, #16
   28610:	4620      	mov	r0, r4
   28612:	f7ff fdb3 	bl	2817c <ctr_drbg_update_internal>
   28616:	4683      	mov	fp, r0
   28618:	2800      	cmp	r0, #0
   2861a:	f43f af44 	beq.w	284a6 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   2861e:	e7f2      	b.n	28606 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   28620:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   28624:	e7c5      	b.n	285b2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   28626:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   2862a:	e7c2      	b.n	285b2 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2862c:	200009d0 	.word	0x200009d0
   28630:	200009d4 	.word	0x200009d4

00028634 <entropy_update>:
   28634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28638:	2b20      	cmp	r3, #32
   2863a:	b08b      	sub	sp, #44	; 0x2c
   2863c:	461d      	mov	r5, r3
   2863e:	4606      	mov	r6, r0
   28640:	4688      	mov	r8, r1
   28642:	4691      	mov	r9, r2
   28644:	d826      	bhi.n	28694 <entropy_update+0x60>
   28646:	b2db      	uxtb	r3, r3
   28648:	af02      	add	r7, sp, #8
   2864a:	f88d 8004 	strb.w	r8, [sp, #4]
   2864e:	46b0      	mov	r8, r6
   28650:	f88d 3005 	strb.w	r3, [sp, #5]
   28654:	f858 1b04 	ldr.w	r1, [r8], #4
   28658:	b921      	cbnz	r1, 28664 <entropy_update+0x30>
   2865a:	4640      	mov	r0, r8
   2865c:	f000 fe8c 	bl	29378 <cc_mbedtls_sha256_starts>
   28660:	4604      	mov	r4, r0
   28662:	b940      	cbnz	r0, 28676 <entropy_update+0x42>
   28664:	2301      	movs	r3, #1
   28666:	6033      	str	r3, [r6, #0]
   28668:	2202      	movs	r2, #2
   2866a:	a901      	add	r1, sp, #4
   2866c:	4640      	mov	r0, r8
   2866e:	f000 fe97 	bl	293a0 <cc_mbedtls_sha256_update>
   28672:	4604      	mov	r4, r0
   28674:	b138      	cbz	r0, 28686 <entropy_update+0x52>
   28676:	4638      	mov	r0, r7
   28678:	2120      	movs	r1, #32
   2867a:	f7ff fc1d 	bl	27eb8 <mbedtls_platform_zeroize>
   2867e:	4620      	mov	r0, r4
   28680:	b00b      	add	sp, #44	; 0x2c
   28682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28686:	462a      	mov	r2, r5
   28688:	4649      	mov	r1, r9
   2868a:	4640      	mov	r0, r8
   2868c:	f000 fe88 	bl	293a0 <cc_mbedtls_sha256_update>
   28690:	4604      	mov	r4, r0
   28692:	e7f0      	b.n	28676 <entropy_update+0x42>
   28694:	af02      	add	r7, sp, #8
   28696:	4619      	mov	r1, r3
   28698:	4610      	mov	r0, r2
   2869a:	2300      	movs	r3, #0
   2869c:	463a      	mov	r2, r7
   2869e:	f001 f807 	bl	296b0 <cc_mbedtls_sha256>
   286a2:	4604      	mov	r4, r0
   286a4:	2800      	cmp	r0, #0
   286a6:	d1e6      	bne.n	28676 <entropy_update+0x42>
   286a8:	2320      	movs	r3, #32
   286aa:	46b9      	mov	r9, r7
   286ac:	461d      	mov	r5, r3
   286ae:	e7cc      	b.n	2864a <entropy_update+0x16>

000286b0 <entropy_gather_internal.part.0>:
   286b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   286b2:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   286b6:	b0a7      	sub	sp, #156	; 0x9c
   286b8:	2b00      	cmp	r3, #0
   286ba:	bfd8      	it	le
   286bc:	ae02      	addle	r6, sp, #8
   286be:	dd2c      	ble.n	2871a <entropy_gather_internal.part.0+0x6a>
   286c0:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   286c4:	4605      	mov	r5, r0
   286c6:	2300      	movs	r3, #0
   286c8:	ae02      	add	r6, sp, #8
   286ca:	9301      	str	r3, [sp, #4]
   286cc:	f1a4 0701 	sub.w	r7, r4, #1
   286d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   286d4:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   286d8:	ab01      	add	r3, sp, #4
   286da:	2290      	movs	r2, #144	; 0x90
   286dc:	4631      	mov	r1, r6
   286de:	47a0      	blx	r4
   286e0:	fab7 f787 	clz	r7, r7
   286e4:	097f      	lsrs	r7, r7, #5
   286e6:	4604      	mov	r4, r0
   286e8:	b910      	cbnz	r0, 286f0 <entropy_gather_internal.part.0+0x40>
   286ea:	9b01      	ldr	r3, [sp, #4]
   286ec:	b93b      	cbnz	r3, 286fe <entropy_gather_internal.part.0+0x4e>
   286ee:	b1a7      	cbz	r7, 2871a <entropy_gather_internal.part.0+0x6a>
   286f0:	4630      	mov	r0, r6
   286f2:	2190      	movs	r1, #144	; 0x90
   286f4:	f7ff fbe0 	bl	27eb8 <mbedtls_platform_zeroize>
   286f8:	4620      	mov	r0, r4
   286fa:	b027      	add	sp, #156	; 0x9c
   286fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   286fe:	4601      	mov	r1, r0
   28700:	4632      	mov	r2, r6
   28702:	4628      	mov	r0, r5
   28704:	f7ff ff96 	bl	28634 <entropy_update>
   28708:	b950      	cbnz	r0, 28720 <entropy_gather_internal.part.0+0x70>
   2870a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   2870e:	9a01      	ldr	r2, [sp, #4]
   28710:	4413      	add	r3, r2
   28712:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   28716:	2f00      	cmp	r7, #0
   28718:	d1ea      	bne.n	286f0 <entropy_gather_internal.part.0+0x40>
   2871a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2871e:	e7e7      	b.n	286f0 <entropy_gather_internal.part.0+0x40>
   28720:	4604      	mov	r4, r0
   28722:	4620      	mov	r0, r4
   28724:	b027      	add	sp, #156	; 0x9c
   28726:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028728 <cc_mbedtls_entropy_init>:
   28728:	b570      	push	{r4, r5, r6, lr}
   2872a:	2500      	movs	r5, #0
   2872c:	4604      	mov	r4, r0
   2872e:	f504 7688 	add.w	r6, r4, #272	; 0x110
   28732:	2214      	movs	r2, #20
   28734:	4629      	mov	r1, r5
   28736:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   2873a:	30fc      	adds	r0, #252	; 0xfc
   2873c:	f003 f9e7 	bl	2bb0e <memset>
   28740:	2208      	movs	r2, #8
   28742:	4629      	mov	r1, r5
   28744:	4630      	mov	r0, r6
   28746:	f003 f9e2 	bl	2bb0e <memset>
   2874a:	4b15      	ldr	r3, [pc, #84]	; (287a0 <cc_mbedtls_entropy_init+0x78>)
   2874c:	4630      	mov	r0, r6
   2874e:	681b      	ldr	r3, [r3, #0]
   28750:	4798      	blx	r3
   28752:	4620      	mov	r0, r4
   28754:	f840 5b04 	str.w	r5, [r0], #4
   28758:	f000 fdf4 	bl	29344 <cc_mbedtls_sha256_init>
   2875c:	4b11      	ldr	r3, [pc, #68]	; (287a4 <cc_mbedtls_entropy_init+0x7c>)
   2875e:	4630      	mov	r0, r6
   28760:	681b      	ldr	r3, [r3, #0]
   28762:	4798      	blx	r3
   28764:	b9d8      	cbnz	r0, 2879e <cc_mbedtls_entropy_init+0x76>
   28766:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2876a:	42ab      	cmp	r3, r5
   2876c:	dc11      	bgt.n	28792 <cc_mbedtls_entropy_init+0x6a>
   2876e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   28772:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   28776:	2120      	movs	r1, #32
   28778:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   2877c:	2101      	movs	r1, #1
   2877e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   28782:	3301      	adds	r3, #1
   28784:	4908      	ldr	r1, [pc, #32]	; (287a8 <cc_mbedtls_entropy_init+0x80>)
   28786:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   2878a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   2878e:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   28792:	4b06      	ldr	r3, [pc, #24]	; (287ac <cc_mbedtls_entropy_init+0x84>)
   28794:	4630      	mov	r0, r6
   28796:	681b      	ldr	r3, [r3, #0]
   28798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2879c:	4718      	bx	r3
   2879e:	bd70      	pop	{r4, r5, r6, pc}
   287a0:	200009cc 	.word	0x200009cc
   287a4:	200009d0 	.word	0x200009d0
   287a8:	00029195 	.word	0x00029195
   287ac:	200009d4 	.word	0x200009d4

000287b0 <cc_mbedtls_entropy_func>:
   287b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   287b4:	2a20      	cmp	r2, #32
   287b6:	b088      	sub	sp, #32
   287b8:	d876      	bhi.n	288a8 <cc_mbedtls_entropy_func+0xf8>
   287ba:	4b3d      	ldr	r3, [pc, #244]	; (288b0 <cc_mbedtls_entropy_func+0x100>)
   287bc:	f500 7988 	add.w	r9, r0, #272	; 0x110
   287c0:	681b      	ldr	r3, [r3, #0]
   287c2:	4604      	mov	r4, r0
   287c4:	4648      	mov	r0, r9
   287c6:	4617      	mov	r7, r2
   287c8:	4688      	mov	r8, r1
   287ca:	4798      	blx	r3
   287cc:	4605      	mov	r5, r0
   287ce:	bba0      	cbnz	r0, 2883a <cc_mbedtls_entropy_func+0x8a>
   287d0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   287d4:	f240 1601 	movw	r6, #257	; 0x101
   287d8:	e001      	b.n	287de <cc_mbedtls_entropy_func+0x2e>
   287da:	3e01      	subs	r6, #1
   287dc:	d060      	beq.n	288a0 <cc_mbedtls_entropy_func+0xf0>
   287de:	4620      	mov	r0, r4
   287e0:	b37b      	cbz	r3, 28842 <cc_mbedtls_entropy_func+0x92>
   287e2:	f7ff ff65 	bl	286b0 <entropy_gather_internal.part.0>
   287e6:	4605      	mov	r5, r0
   287e8:	bb68      	cbnz	r0, 28846 <cc_mbedtls_entropy_func+0x96>
   287ea:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   287ee:	2b00      	cmp	r3, #0
   287f0:	ddf3      	ble.n	287da <cc_mbedtls_entropy_func+0x2a>
   287f2:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   287f6:	4290      	cmp	r0, r2
   287f8:	d3ef      	bcc.n	287da <cc_mbedtls_entropy_func+0x2a>
   287fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   287fe:	2a01      	cmp	r2, #1
   28800:	d1eb      	bne.n	287da <cc_mbedtls_entropy_func+0x2a>
   28802:	281f      	cmp	r0, #31
   28804:	d9e9      	bls.n	287da <cc_mbedtls_entropy_func+0x2a>
   28806:	466e      	mov	r6, sp
   28808:	4629      	mov	r1, r5
   2880a:	2220      	movs	r2, #32
   2880c:	4630      	mov	r0, r6
   2880e:	f104 0a04 	add.w	sl, r4, #4
   28812:	f003 f97c 	bl	2bb0e <memset>
   28816:	4631      	mov	r1, r6
   28818:	4650      	mov	r0, sl
   2881a:	f000 fdeb 	bl	293f4 <cc_mbedtls_sha256_finish>
   2881e:	4605      	mov	r5, r0
   28820:	b198      	cbz	r0, 2884a <cc_mbedtls_entropy_func+0x9a>
   28822:	2120      	movs	r1, #32
   28824:	4630      	mov	r0, r6
   28826:	f7ff fb47 	bl	27eb8 <mbedtls_platform_zeroize>
   2882a:	4b22      	ldr	r3, [pc, #136]	; (288b4 <cc_mbedtls_entropy_func+0x104>)
   2882c:	4648      	mov	r0, r9
   2882e:	681b      	ldr	r3, [r3, #0]
   28830:	4798      	blx	r3
   28832:	2800      	cmp	r0, #0
   28834:	bf18      	it	ne
   28836:	f06f 051d 	mvnne.w	r5, #29
   2883a:	4628      	mov	r0, r5
   2883c:	b008      	add	sp, #32
   2883e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28842:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   28846:	466e      	mov	r6, sp
   28848:	e7eb      	b.n	28822 <cc_mbedtls_entropy_func+0x72>
   2884a:	4650      	mov	r0, sl
   2884c:	f000 fd8e 	bl	2936c <cc_mbedtls_sha256_free>
   28850:	4650      	mov	r0, sl
   28852:	f000 fd77 	bl	29344 <cc_mbedtls_sha256_init>
   28856:	4629      	mov	r1, r5
   28858:	4650      	mov	r0, sl
   2885a:	f000 fd8d 	bl	29378 <cc_mbedtls_sha256_starts>
   2885e:	4605      	mov	r5, r0
   28860:	2800      	cmp	r0, #0
   28862:	d1de      	bne.n	28822 <cc_mbedtls_entropy_func+0x72>
   28864:	4650      	mov	r0, sl
   28866:	2220      	movs	r2, #32
   28868:	4631      	mov	r1, r6
   2886a:	f000 fd99 	bl	293a0 <cc_mbedtls_sha256_update>
   2886e:	4605      	mov	r5, r0
   28870:	2800      	cmp	r0, #0
   28872:	d1d6      	bne.n	28822 <cc_mbedtls_entropy_func+0x72>
   28874:	4603      	mov	r3, r0
   28876:	4632      	mov	r2, r6
   28878:	2120      	movs	r1, #32
   2887a:	4630      	mov	r0, r6
   2887c:	f000 ff18 	bl	296b0 <cc_mbedtls_sha256>
   28880:	4605      	mov	r5, r0
   28882:	2800      	cmp	r0, #0
   28884:	d1cd      	bne.n	28822 <cc_mbedtls_entropy_func+0x72>
   28886:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   2888a:	2b00      	cmp	r3, #0
   2888c:	bfc4      	itt	gt
   2888e:	2300      	movgt	r3, #0
   28890:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   28894:	463a      	mov	r2, r7
   28896:	4640      	mov	r0, r8
   28898:	4631      	mov	r1, r6
   2889a:	f003 f92d 	bl	2baf8 <memcpy>
   2889e:	e7c0      	b.n	28822 <cc_mbedtls_entropy_func+0x72>
   288a0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   288a4:	466e      	mov	r6, sp
   288a6:	e7bc      	b.n	28822 <cc_mbedtls_entropy_func+0x72>
   288a8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   288ac:	e7c5      	b.n	2883a <cc_mbedtls_entropy_func+0x8a>
   288ae:	bf00      	nop
   288b0:	200009d0 	.word	0x200009d0
   288b4:	200009d4 	.word	0x200009d4

000288b8 <RndStartupTest.constprop.0>:
   288b8:	b530      	push	{r4, r5, lr}
   288ba:	b08d      	sub	sp, #52	; 0x34
   288bc:	2100      	movs	r1, #0
   288be:	2228      	movs	r2, #40	; 0x28
   288c0:	a802      	add	r0, sp, #8
   288c2:	9101      	str	r1, [sp, #4]
   288c4:	f003 f923 	bl	2bb0e <memset>
   288c8:	a802      	add	r0, sp, #8
   288ca:	f000 ff19 	bl	29700 <RNG_PLAT_SetUserRngParameters>
   288ce:	4604      	mov	r4, r0
   288d0:	b110      	cbz	r0, 288d8 <RndStartupTest.constprop.0+0x20>
   288d2:	4620      	mov	r0, r4
   288d4:	b00d      	add	sp, #52	; 0x34
   288d6:	bd30      	pop	{r4, r5, pc}
   288d8:	4d18      	ldr	r5, [pc, #96]	; (2893c <RndStartupTest.constprop.0+0x84>)
   288da:	f04f 31ff 	mov.w	r1, #4294967295
   288de:	6828      	ldr	r0, [r5, #0]
   288e0:	f000 f946 	bl	28b70 <CC_PalMutexLock>
   288e4:	4604      	mov	r4, r0
   288e6:	b9c0      	cbnz	r0, 2891a <RndStartupTest.constprop.0+0x62>
   288e8:	2000      	movs	r0, #0
   288ea:	f000 f971 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   288ee:	bb00      	cbnz	r0, 28932 <RndStartupTest.constprop.0+0x7a>
   288f0:	4a13      	ldr	r2, [pc, #76]	; (28940 <RndStartupTest.constprop.0+0x88>)
   288f2:	a902      	add	r1, sp, #8
   288f4:	a801      	add	r0, sp, #4
   288f6:	f000 fc3f 	bl	29178 <LLF_RND_RunTrngStartupTest>
   288fa:	4604      	mov	r4, r0
   288fc:	2001      	movs	r0, #1
   288fe:	f000 f967 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   28902:	b990      	cbnz	r0, 2892a <RndStartupTest.constprop.0+0x72>
   28904:	6828      	ldr	r0, [r5, #0]
   28906:	f000 f93b 	bl	28b80 <CC_PalMutexUnlock>
   2890a:	2800      	cmp	r0, #0
   2890c:	d0e1      	beq.n	288d2 <RndStartupTest.constprop.0+0x1a>
   2890e:	480d      	ldr	r0, [pc, #52]	; (28944 <RndStartupTest.constprop.0+0x8c>)
   28910:	f7ff f9b2 	bl	27c78 <CC_PalAbort>
   28914:	4620      	mov	r0, r4
   28916:	b00d      	add	sp, #52	; 0x34
   28918:	bd30      	pop	{r4, r5, pc}
   2891a:	480b      	ldr	r0, [pc, #44]	; (28948 <RndStartupTest.constprop.0+0x90>)
   2891c:	f7ff f9ac 	bl	27c78 <CC_PalAbort>
   28920:	2c01      	cmp	r4, #1
   28922:	bf08      	it	eq
   28924:	2405      	moveq	r4, #5
   28926:	d0ed      	beq.n	28904 <RndStartupTest.constprop.0+0x4c>
   28928:	e7de      	b.n	288e8 <RndStartupTest.constprop.0+0x30>
   2892a:	4808      	ldr	r0, [pc, #32]	; (2894c <RndStartupTest.constprop.0+0x94>)
   2892c:	f7ff f9a4 	bl	27c78 <CC_PalAbort>
   28930:	e7e8      	b.n	28904 <RndStartupTest.constprop.0+0x4c>
   28932:	4807      	ldr	r0, [pc, #28]	; (28950 <RndStartupTest.constprop.0+0x98>)
   28934:	f7ff f9a0 	bl	27c78 <CC_PalAbort>
   28938:	e7da      	b.n	288f0 <RndStartupTest.constprop.0+0x38>
   2893a:	bf00      	nop
   2893c:	200009c8 	.word	0x200009c8
   28940:	20003dbc 	.word	0x20003dbc
   28944:	0002ff00 	.word	0x0002ff00
   28948:	0002fea8 	.word	0x0002fea8
   2894c:	0002fee0 	.word	0x0002fee0
   28950:	0002fec0 	.word	0x0002fec0

00028954 <CC_LibInit>:
   28954:	b530      	push	{r4, r5, lr}
   28956:	b083      	sub	sp, #12
   28958:	f000 f85c 	bl	28a14 <CC_HalInit>
   2895c:	b128      	cbz	r0, 2896a <CC_LibInit+0x16>
   2895e:	f000 f8ab 	bl	28ab8 <CC_PalTerminate>
   28962:	2403      	movs	r4, #3
   28964:	4620      	mov	r0, r4
   28966:	b003      	add	sp, #12
   28968:	bd30      	pop	{r4, r5, pc}
   2896a:	f000 f877 	bl	28a5c <CC_PalInit>
   2896e:	b9d8      	cbnz	r0, 289a8 <CC_LibInit+0x54>
   28970:	f000 f92e 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   28974:	b9e0      	cbnz	r0, 289b0 <CC_LibInit+0x5c>
   28976:	4c22      	ldr	r4, [pc, #136]	; (28a00 <CC_LibInit+0xac>)
   28978:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   2897c:	0e1b      	lsrs	r3, r3, #24
   2897e:	2bf0      	cmp	r3, #240	; 0xf0
   28980:	d10a      	bne.n	28998 <CC_LibInit+0x44>
   28982:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   28986:	4b1f      	ldr	r3, [pc, #124]	; (28a04 <CC_LibInit+0xb0>)
   28988:	429a      	cmp	r2, r3
   2898a:	d031      	beq.n	289f0 <CC_LibInit+0x9c>
   2898c:	f000 f844 	bl	28a18 <CC_HalTerminate>
   28990:	2407      	movs	r4, #7
   28992:	f000 f891 	bl	28ab8 <CC_PalTerminate>
   28996:	e7e5      	b.n	28964 <CC_LibInit+0x10>
   28998:	f000 f83e 	bl	28a18 <CC_HalTerminate>
   2899c:	f000 f88c 	bl	28ab8 <CC_PalTerminate>
   289a0:	2406      	movs	r4, #6
   289a2:	4620      	mov	r0, r4
   289a4:	b003      	add	sp, #12
   289a6:	bd30      	pop	{r4, r5, pc}
   289a8:	2404      	movs	r4, #4
   289aa:	4620      	mov	r0, r4
   289ac:	b003      	add	sp, #12
   289ae:	bd30      	pop	{r4, r5, pc}
   289b0:	f000 f832 	bl	28a18 <CC_HalTerminate>
   289b4:	f000 f880 	bl	28ab8 <CC_PalTerminate>
   289b8:	f7ff ff7e 	bl	288b8 <RndStartupTest.constprop.0>
   289bc:	4604      	mov	r4, r0
   289be:	b998      	cbnz	r0, 289e8 <CC_LibInit+0x94>
   289c0:	4d11      	ldr	r5, [pc, #68]	; (28a08 <CC_LibInit+0xb4>)
   289c2:	682b      	ldr	r3, [r5, #0]
   289c4:	2b00      	cmp	r3, #0
   289c6:	d1cd      	bne.n	28964 <CC_LibInit+0x10>
   289c8:	4602      	mov	r2, r0
   289ca:	4601      	mov	r1, r0
   289cc:	f7ff f976 	bl	27cbc <nrf_cc3xx_platform_ctr_drbg_init>
   289d0:	b950      	cbnz	r0, 289e8 <CC_LibInit+0x94>
   289d2:	490e      	ldr	r1, [pc, #56]	; (28a0c <CC_LibInit+0xb8>)
   289d4:	ab01      	add	r3, sp, #4
   289d6:	2268      	movs	r2, #104	; 0x68
   289d8:	f7ff f9a2 	bl	27d20 <nrf_cc3xx_platform_ctr_drbg_get>
   289dc:	b920      	cbnz	r0, 289e8 <CC_LibInit+0x94>
   289de:	4b0c      	ldr	r3, [pc, #48]	; (28a10 <CC_LibInit+0xbc>)
   289e0:	602b      	str	r3, [r5, #0]
   289e2:	4620      	mov	r0, r4
   289e4:	b003      	add	sp, #12
   289e6:	bd30      	pop	{r4, r5, pc}
   289e8:	2405      	movs	r4, #5
   289ea:	4620      	mov	r0, r4
   289ec:	b003      	add	sp, #12
   289ee:	bd30      	pop	{r4, r5, pc}
   289f0:	2001      	movs	r0, #1
   289f2:	f000 f8ed 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   289f6:	2800      	cmp	r0, #0
   289f8:	d1da      	bne.n	289b0 <CC_LibInit+0x5c>
   289fa:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   289fe:	e7db      	b.n	289b8 <CC_LibInit+0x64>
   28a00:	5002b000 	.word	0x5002b000
   28a04:	20e00000 	.word	0x20e00000
   28a08:	20003db8 	.word	0x20003db8
   28a0c:	20003d50 	.word	0x20003d50
   28a10:	5a5aea5a 	.word	0x5a5aea5a

00028a14 <CC_HalInit>:
   28a14:	2000      	movs	r0, #0
   28a16:	4770      	bx	lr

00028a18 <CC_HalTerminate>:
   28a18:	2000      	movs	r0, #0
   28a1a:	4770      	bx	lr

00028a1c <CC_HalClearInterruptBit>:
   28a1c:	0543      	lsls	r3, r0, #21
   28a1e:	d504      	bpl.n	28a2a <CC_HalClearInterruptBit+0xe>
   28a20:	4b04      	ldr	r3, [pc, #16]	; (28a34 <CC_HalClearInterruptBit+0x18>)
   28a22:	f04f 32ff 	mov.w	r2, #4294967295
   28a26:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   28a2a:	4b02      	ldr	r3, [pc, #8]	; (28a34 <CC_HalClearInterruptBit+0x18>)
   28a2c:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   28a30:	4770      	bx	lr
   28a32:	bf00      	nop
   28a34:	5002b000 	.word	0x5002b000

00028a38 <CC_HalMaskInterrupt>:
   28a38:	4b01      	ldr	r3, [pc, #4]	; (28a40 <CC_HalMaskInterrupt+0x8>)
   28a3a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   28a3e:	4770      	bx	lr
   28a40:	5002b000 	.word	0x5002b000

00028a44 <CC_HalWaitInterrupt>:
   28a44:	b108      	cbz	r0, 28a4a <CC_HalWaitInterrupt+0x6>
   28a46:	f000 b86b 	b.w	28b20 <CC_PalWaitInterrupt>
   28a4a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   28a4e:	4770      	bx	lr

00028a50 <CC_HalWaitInterruptRND>:
   28a50:	b108      	cbz	r0, 28a56 <CC_HalWaitInterruptRND+0x6>
   28a52:	f000 b84f 	b.w	28af4 <CC_PalWaitInterruptRND>
   28a56:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   28a5a:	4770      	bx	lr

00028a5c <CC_PalInit>:
   28a5c:	b510      	push	{r4, lr}
   28a5e:	4811      	ldr	r0, [pc, #68]	; (28aa4 <CC_PalInit+0x48>)
   28a60:	f000 f872 	bl	28b48 <CC_PalMutexCreate>
   28a64:	b100      	cbz	r0, 28a68 <CC_PalInit+0xc>
   28a66:	bd10      	pop	{r4, pc}
   28a68:	480f      	ldr	r0, [pc, #60]	; (28aa8 <CC_PalInit+0x4c>)
   28a6a:	f000 f86d 	bl	28b48 <CC_PalMutexCreate>
   28a6e:	2800      	cmp	r0, #0
   28a70:	d1f9      	bne.n	28a66 <CC_PalInit+0xa>
   28a72:	4c0e      	ldr	r4, [pc, #56]	; (28aac <CC_PalInit+0x50>)
   28a74:	4620      	mov	r0, r4
   28a76:	f000 f867 	bl	28b48 <CC_PalMutexCreate>
   28a7a:	2800      	cmp	r0, #0
   28a7c:	d1f3      	bne.n	28a66 <CC_PalInit+0xa>
   28a7e:	4b0c      	ldr	r3, [pc, #48]	; (28ab0 <CC_PalInit+0x54>)
   28a80:	480c      	ldr	r0, [pc, #48]	; (28ab4 <CC_PalInit+0x58>)
   28a82:	601c      	str	r4, [r3, #0]
   28a84:	f000 f860 	bl	28b48 <CC_PalMutexCreate>
   28a88:	4601      	mov	r1, r0
   28a8a:	2800      	cmp	r0, #0
   28a8c:	d1eb      	bne.n	28a66 <CC_PalInit+0xa>
   28a8e:	f000 f82d 	bl	28aec <CC_PalDmaInit>
   28a92:	4604      	mov	r4, r0
   28a94:	b108      	cbz	r0, 28a9a <CC_PalInit+0x3e>
   28a96:	4620      	mov	r0, r4
   28a98:	bd10      	pop	{r4, pc}
   28a9a:	f000 f87b 	bl	28b94 <CC_PalPowerSaveModeInit>
   28a9e:	4620      	mov	r0, r4
   28aa0:	e7fa      	b.n	28a98 <CC_PalInit+0x3c>
   28aa2:	bf00      	nop
   28aa4:	200009c4 	.word	0x200009c4
   28aa8:	200009b8 	.word	0x200009b8
   28aac:	200009c0 	.word	0x200009c0
   28ab0:	200009c8 	.word	0x200009c8
   28ab4:	200009bc 	.word	0x200009bc

00028ab8 <CC_PalTerminate>:
   28ab8:	b508      	push	{r3, lr}
   28aba:	4808      	ldr	r0, [pc, #32]	; (28adc <CC_PalTerminate+0x24>)
   28abc:	f000 f84e 	bl	28b5c <CC_PalMutexDestroy>
   28ac0:	4807      	ldr	r0, [pc, #28]	; (28ae0 <CC_PalTerminate+0x28>)
   28ac2:	f000 f84b 	bl	28b5c <CC_PalMutexDestroy>
   28ac6:	4807      	ldr	r0, [pc, #28]	; (28ae4 <CC_PalTerminate+0x2c>)
   28ac8:	f000 f848 	bl	28b5c <CC_PalMutexDestroy>
   28acc:	4806      	ldr	r0, [pc, #24]	; (28ae8 <CC_PalTerminate+0x30>)
   28ace:	f000 f845 	bl	28b5c <CC_PalMutexDestroy>
   28ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28ad6:	f000 b80b 	b.w	28af0 <CC_PalDmaTerminate>
   28ada:	bf00      	nop
   28adc:	200009c4 	.word	0x200009c4
   28ae0:	200009b8 	.word	0x200009b8
   28ae4:	200009c0 	.word	0x200009c0
   28ae8:	200009bc 	.word	0x200009bc

00028aec <CC_PalDmaInit>:
   28aec:	2000      	movs	r0, #0
   28aee:	4770      	bx	lr

00028af0 <CC_PalDmaTerminate>:
   28af0:	4770      	bx	lr
   28af2:	bf00      	nop

00028af4 <CC_PalWaitInterruptRND>:
   28af4:	b410      	push	{r4}
   28af6:	4c09      	ldr	r4, [pc, #36]	; (28b1c <CC_PalWaitInterruptRND+0x28>)
   28af8:	4602      	mov	r2, r0
   28afa:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   28afe:	4213      	tst	r3, r2
   28b00:	d0fb      	beq.n	28afa <CC_PalWaitInterruptRND+0x6>
   28b02:	b121      	cbz	r1, 28b0e <CC_PalWaitInterruptRND+0x1a>
   28b04:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   28b08:	600b      	str	r3, [r1, #0]
   28b0a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   28b0e:	4b03      	ldr	r3, [pc, #12]	; (28b1c <CC_PalWaitInterruptRND+0x28>)
   28b10:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   28b14:	2000      	movs	r0, #0
   28b16:	bc10      	pop	{r4}
   28b18:	4770      	bx	lr
   28b1a:	bf00      	nop
   28b1c:	5002b000 	.word	0x5002b000

00028b20 <CC_PalWaitInterrupt>:
   28b20:	4a04      	ldr	r2, [pc, #16]	; (28b34 <CC_PalWaitInterrupt+0x14>)
   28b22:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   28b26:	4218      	tst	r0, r3
   28b28:	d0fb      	beq.n	28b22 <CC_PalWaitInterrupt+0x2>
   28b2a:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   28b2e:	2000      	movs	r0, #0
   28b30:	4770      	bx	lr
   28b32:	bf00      	nop
   28b34:	5002b000 	.word	0x5002b000

00028b38 <CC_PalMemCopyPlat>:
   28b38:	f002 bfc7 	b.w	2baca <memmove>

00028b3c <CC_PalMemSetPlat>:
   28b3c:	f002 bfe7 	b.w	2bb0e <memset>

00028b40 <CC_PalMemSetZeroPlat>:
   28b40:	460a      	mov	r2, r1
   28b42:	2100      	movs	r1, #0
   28b44:	f002 bfe3 	b.w	2bb0e <memset>

00028b48 <CC_PalMutexCreate>:
   28b48:	b508      	push	{r3, lr}
   28b4a:	4b03      	ldr	r3, [pc, #12]	; (28b58 <CC_PalMutexCreate+0x10>)
   28b4c:	6802      	ldr	r2, [r0, #0]
   28b4e:	681b      	ldr	r3, [r3, #0]
   28b50:	6810      	ldr	r0, [r2, #0]
   28b52:	4798      	blx	r3
   28b54:	2000      	movs	r0, #0
   28b56:	bd08      	pop	{r3, pc}
   28b58:	20000978 	.word	0x20000978

00028b5c <CC_PalMutexDestroy>:
   28b5c:	b508      	push	{r3, lr}
   28b5e:	4b03      	ldr	r3, [pc, #12]	; (28b6c <CC_PalMutexDestroy+0x10>)
   28b60:	6802      	ldr	r2, [r0, #0]
   28b62:	685b      	ldr	r3, [r3, #4]
   28b64:	6810      	ldr	r0, [r2, #0]
   28b66:	4798      	blx	r3
   28b68:	2000      	movs	r0, #0
   28b6a:	bd08      	pop	{r3, pc}
   28b6c:	20000978 	.word	0x20000978

00028b70 <CC_PalMutexLock>:
   28b70:	4b02      	ldr	r3, [pc, #8]	; (28b7c <CC_PalMutexLock+0xc>)
   28b72:	6802      	ldr	r2, [r0, #0]
   28b74:	689b      	ldr	r3, [r3, #8]
   28b76:	6810      	ldr	r0, [r2, #0]
   28b78:	4718      	bx	r3
   28b7a:	bf00      	nop
   28b7c:	20000978 	.word	0x20000978

00028b80 <CC_PalMutexUnlock>:
   28b80:	b508      	push	{r3, lr}
   28b82:	4b03      	ldr	r3, [pc, #12]	; (28b90 <CC_PalMutexUnlock+0x10>)
   28b84:	6802      	ldr	r2, [r0, #0]
   28b86:	68db      	ldr	r3, [r3, #12]
   28b88:	6810      	ldr	r0, [r2, #0]
   28b8a:	4798      	blx	r3
   28b8c:	2000      	movs	r0, #0
   28b8e:	bd08      	pop	{r3, pc}
   28b90:	20000978 	.word	0x20000978

00028b94 <CC_PalPowerSaveModeInit>:
   28b94:	b570      	push	{r4, r5, r6, lr}
   28b96:	4c09      	ldr	r4, [pc, #36]	; (28bbc <CC_PalPowerSaveModeInit+0x28>)
   28b98:	4d09      	ldr	r5, [pc, #36]	; (28bc0 <CC_PalPowerSaveModeInit+0x2c>)
   28b9a:	6920      	ldr	r0, [r4, #16]
   28b9c:	68ab      	ldr	r3, [r5, #8]
   28b9e:	4798      	blx	r3
   28ba0:	b118      	cbz	r0, 28baa <CC_PalPowerSaveModeInit+0x16>
   28ba2:	4b08      	ldr	r3, [pc, #32]	; (28bc4 <CC_PalPowerSaveModeInit+0x30>)
   28ba4:	4808      	ldr	r0, [pc, #32]	; (28bc8 <CC_PalPowerSaveModeInit+0x34>)
   28ba6:	685b      	ldr	r3, [r3, #4]
   28ba8:	4798      	blx	r3
   28baa:	4a08      	ldr	r2, [pc, #32]	; (28bcc <CC_PalPowerSaveModeInit+0x38>)
   28bac:	68eb      	ldr	r3, [r5, #12]
   28bae:	6920      	ldr	r0, [r4, #16]
   28bb0:	2100      	movs	r1, #0
   28bb2:	6011      	str	r1, [r2, #0]
   28bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28bb8:	4718      	bx	r3
   28bba:	bf00      	nop
   28bbc:	20000988 	.word	0x20000988
   28bc0:	20000978 	.word	0x20000978
   28bc4:	20000968 	.word	0x20000968
   28bc8:	0002ff18 	.word	0x0002ff18
   28bcc:	20003fdc 	.word	0x20003fdc

00028bd0 <CC_PalPowerSaveModeSelect>:
   28bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28bd2:	4d1a      	ldr	r5, [pc, #104]	; (28c3c <CC_PalPowerSaveModeSelect+0x6c>)
   28bd4:	4e1a      	ldr	r6, [pc, #104]	; (28c40 <CC_PalPowerSaveModeSelect+0x70>)
   28bd6:	4604      	mov	r4, r0
   28bd8:	68b2      	ldr	r2, [r6, #8]
   28bda:	6928      	ldr	r0, [r5, #16]
   28bdc:	4790      	blx	r2
   28bde:	b9e8      	cbnz	r0, 28c1c <CC_PalPowerSaveModeSelect+0x4c>
   28be0:	4f18      	ldr	r7, [pc, #96]	; (28c44 <CC_PalPowerSaveModeSelect+0x74>)
   28be2:	683b      	ldr	r3, [r7, #0]
   28be4:	b14c      	cbz	r4, 28bfa <CC_PalPowerSaveModeSelect+0x2a>
   28be6:	b1a3      	cbz	r3, 28c12 <CC_PalPowerSaveModeSelect+0x42>
   28be8:	2b01      	cmp	r3, #1
   28bea:	d019      	beq.n	28c20 <CC_PalPowerSaveModeSelect+0x50>
   28bec:	3b01      	subs	r3, #1
   28bee:	603b      	str	r3, [r7, #0]
   28bf0:	6928      	ldr	r0, [r5, #16]
   28bf2:	68f3      	ldr	r3, [r6, #12]
   28bf4:	4798      	blx	r3
   28bf6:	2000      	movs	r0, #0
   28bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28bfa:	b943      	cbnz	r3, 28c0e <CC_PalPowerSaveModeSelect+0x3e>
   28bfc:	4a12      	ldr	r2, [pc, #72]	; (28c48 <CC_PalPowerSaveModeSelect+0x78>)
   28bfe:	2101      	movs	r1, #1
   28c00:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   28c04:	4911      	ldr	r1, [pc, #68]	; (28c4c <CC_PalPowerSaveModeSelect+0x7c>)
   28c06:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   28c0a:	2a00      	cmp	r2, #0
   28c0c:	d1fb      	bne.n	28c06 <CC_PalPowerSaveModeSelect+0x36>
   28c0e:	3301      	adds	r3, #1
   28c10:	603b      	str	r3, [r7, #0]
   28c12:	68f3      	ldr	r3, [r6, #12]
   28c14:	6928      	ldr	r0, [r5, #16]
   28c16:	4798      	blx	r3
   28c18:	2000      	movs	r0, #0
   28c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28c1c:	480c      	ldr	r0, [pc, #48]	; (28c50 <CC_PalPowerSaveModeSelect+0x80>)
   28c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28c20:	4a0a      	ldr	r2, [pc, #40]	; (28c4c <CC_PalPowerSaveModeSelect+0x7c>)
   28c22:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28c26:	2b00      	cmp	r3, #0
   28c28:	d1fb      	bne.n	28c22 <CC_PalPowerSaveModeSelect+0x52>
   28c2a:	4a07      	ldr	r2, [pc, #28]	; (28c48 <CC_PalPowerSaveModeSelect+0x78>)
   28c2c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   28c30:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   28c34:	f7ff ff00 	bl	28a38 <CC_HalMaskInterrupt>
   28c38:	683b      	ldr	r3, [r7, #0]
   28c3a:	e7d7      	b.n	28bec <CC_PalPowerSaveModeSelect+0x1c>
   28c3c:	20000988 	.word	0x20000988
   28c40:	20000978 	.word	0x20000978
   28c44:	20003fdc 	.word	0x20003fdc
   28c48:	5002a000 	.word	0x5002a000
   28c4c:	5002b000 	.word	0x5002b000
   28c50:	ffff8fe9 	.word	0xffff8fe9

00028c54 <mutex_init>:
   28c54:	4b01      	ldr	r3, [pc, #4]	; (28c5c <mutex_init+0x8>)
   28c56:	681b      	ldr	r3, [r3, #0]
   28c58:	4718      	bx	r3
   28c5a:	bf00      	nop
   28c5c:	20000978 	.word	0x20000978

00028c60 <mutex_lock>:
   28c60:	4b01      	ldr	r3, [pc, #4]	; (28c68 <mutex_lock+0x8>)
   28c62:	689b      	ldr	r3, [r3, #8]
   28c64:	4718      	bx	r3
   28c66:	bf00      	nop
   28c68:	20000978 	.word	0x20000978

00028c6c <mutex_unlock>:
   28c6c:	4b01      	ldr	r3, [pc, #4]	; (28c74 <mutex_unlock+0x8>)
   28c6e:	68db      	ldr	r3, [r3, #12]
   28c70:	4718      	bx	r3
   28c72:	bf00      	nop
   28c74:	20000978 	.word	0x20000978

00028c78 <startTrngHW>:
   28c78:	2800      	cmp	r0, #0
   28c7a:	f000 8084 	beq.w	28d86 <startTrngHW+0x10e>
   28c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28c82:	460c      	mov	r4, r1
   28c84:	b083      	sub	sp, #12
   28c86:	2900      	cmp	r1, #0
   28c88:	d078      	beq.n	28d7c <startTrngHW+0x104>
   28c8a:	461d      	mov	r5, r3
   28c8c:	2b00      	cmp	r3, #0
   28c8e:	d075      	beq.n	28d7c <startTrngHW+0x104>
   28c90:	4607      	mov	r7, r0
   28c92:	b11a      	cbz	r2, 28c9c <startTrngHW+0x24>
   28c94:	2201      	movs	r2, #1
   28c96:	2300      	movs	r3, #0
   28c98:	602a      	str	r2, [r5, #0]
   28c9a:	6003      	str	r3, [r0, #0]
   28c9c:	682b      	ldr	r3, [r5, #0]
   28c9e:	2b00      	cmp	r3, #0
   28ca0:	d067      	beq.n	28d72 <startTrngHW+0xfa>
   28ca2:	4629      	mov	r1, r5
   28ca4:	4620      	mov	r0, r4
   28ca6:	f000 fde9 	bl	2987c <LLF_RND_GetFastestRosc>
   28caa:	4603      	mov	r3, r0
   28cac:	2800      	cmp	r0, #0
   28cae:	d161      	bne.n	28d74 <startTrngHW+0xfc>
   28cb0:	6828      	ldr	r0, [r5, #0]
   28cb2:	4621      	mov	r1, r4
   28cb4:	f000 fdc4 	bl	29840 <LLF_RND_GetRoscSampleCnt>
   28cb8:	4603      	mov	r3, r0
   28cba:	2800      	cmp	r0, #0
   28cbc:	d15a      	bne.n	28d74 <startTrngHW+0xfc>
   28cbe:	682a      	ldr	r2, [r5, #0]
   28cc0:	2a08      	cmp	r2, #8
   28cc2:	d072      	beq.n	28daa <startTrngHW+0x132>
   28cc4:	2a04      	cmp	r2, #4
   28cc6:	d073      	beq.n	28db0 <startTrngHW+0x138>
   28cc8:	f1a2 0802 	sub.w	r8, r2, #2
   28ccc:	fab8 f888 	clz	r8, r8
   28cd0:	ea4f 1858 	mov.w	r8, r8, lsr #5
   28cd4:	4e38      	ldr	r6, [pc, #224]	; (28db8 <startTrngHW+0x140>)
   28cd6:	2001      	movs	r0, #1
   28cd8:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   28cdc:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   28ce0:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   28ce4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   28ce6:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   28cea:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   28cee:	428a      	cmp	r2, r1
   28cf0:	d1f6      	bne.n	28ce0 <startTrngHW+0x68>
   28cf2:	f04f 0900 	mov.w	r9, #0
   28cf6:	9301      	str	r3, [sp, #4]
   28cf8:	f04f 30ff 	mov.w	r0, #4294967295
   28cfc:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   28d00:	f7ff fe8c 	bl	28a1c <CC_HalClearInterruptBit>
   28d04:	f06f 021b 	mvn.w	r2, #27
   28d08:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   28d0c:	4648      	mov	r0, r9
   28d0e:	f7ff fe93 	bl	28a38 <CC_HalMaskInterrupt>
   28d12:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   28d16:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   28d1a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28d1e:	f7ff fe8b 	bl	28a38 <CC_HalMaskInterrupt>
   28d22:	220a      	movs	r2, #10
   28d24:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   28d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28d2a:	2b01      	cmp	r3, #1
   28d2c:	9b01      	ldr	r3, [sp, #4]
   28d2e:	d02d      	beq.n	28d8c <startTrngHW+0x114>
   28d30:	6922      	ldr	r2, [r4, #16]
   28d32:	4922      	ldr	r1, [pc, #136]	; (28dbc <startTrngHW+0x144>)
   28d34:	fba1 1202 	umull	r1, r2, r1, r2
   28d38:	0912      	lsrs	r2, r2, #4
   28d3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28d3c:	fb01 f202 	mul.w	r2, r1, r2
   28d40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   28d44:	491c      	ldr	r1, [pc, #112]	; (28db8 <startTrngHW+0x140>)
   28d46:	03d2      	lsls	r2, r2, #15
   28d48:	0992      	lsrs	r2, r2, #6
   28d4a:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   28d4e:	2201      	movs	r2, #1
   28d50:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   28d54:	683a      	ldr	r2, [r7, #0]
   28d56:	6829      	ldr	r1, [r5, #0]
   28d58:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   28d5c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   28d60:	603a      	str	r2, [r7, #0]
   28d62:	6829      	ldr	r1, [r5, #0]
   28d64:	4618      	mov	r0, r3
   28d66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28d6a:	603a      	str	r2, [r7, #0]
   28d6c:	b003      	add	sp, #12
   28d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d72:	4b13      	ldr	r3, [pc, #76]	; (28dc0 <startTrngHW+0x148>)
   28d74:	4618      	mov	r0, r3
   28d76:	b003      	add	sp, #12
   28d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d7c:	4b11      	ldr	r3, [pc, #68]	; (28dc4 <startTrngHW+0x14c>)
   28d7e:	4618      	mov	r0, r3
   28d80:	b003      	add	sp, #12
   28d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28d86:	4b0f      	ldr	r3, [pc, #60]	; (28dc4 <startTrngHW+0x14c>)
   28d88:	4618      	mov	r0, r3
   28d8a:	4770      	bx	lr
   28d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   28d90:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   28d94:	3101      	adds	r1, #1
   28d96:	d006      	beq.n	28da6 <startTrngHW+0x12e>
   28d98:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   28d9c:	4907      	ldr	r1, [pc, #28]	; (28dbc <startTrngHW+0x144>)
   28d9e:	fba1 1202 	umull	r1, r2, r1, r2
   28da2:	0912      	lsrs	r2, r2, #4
   28da4:	e7c9      	b.n	28d3a <startTrngHW+0xc2>
   28da6:	2216      	movs	r2, #22
   28da8:	e7c7      	b.n	28d3a <startTrngHW+0xc2>
   28daa:	f04f 0803 	mov.w	r8, #3
   28dae:	e791      	b.n	28cd4 <startTrngHW+0x5c>
   28db0:	f04f 0802 	mov.w	r8, #2
   28db4:	e78e      	b.n	28cd4 <startTrngHW+0x5c>
   28db6:	bf00      	nop
   28db8:	5002b000 	.word	0x5002b000
   28dbc:	aaaaaaab 	.word	0xaaaaaaab
   28dc0:	00f10c31 	.word	0x00f10c31
   28dc4:	00f10c35 	.word	0x00f10c35

00028dc8 <LLF_RND_RepetitionCounterTest.part.0>:
   28dc8:	b570      	push	{r4, r5, r6, lr}
   28dca:	00c9      	lsls	r1, r1, #3
   28dcc:	2400      	movs	r4, #0
   28dce:	1e4e      	subs	r6, r1, #1
   28dd0:	f04f 0c01 	mov.w	ip, #1
   28dd4:	4625      	mov	r5, r4
   28dd6:	46a6      	mov	lr, r4
   28dd8:	e008      	b.n	28dec <LLF_RND_RepetitionCounterTest.part.0+0x24>
   28dda:	459e      	cmp	lr, r3
   28ddc:	d015      	beq.n	28e0a <LLF_RND_RepetitionCounterTest.part.0+0x42>
   28dde:	2501      	movs	r5, #1
   28de0:	45b4      	cmp	ip, r6
   28de2:	d817      	bhi.n	28e14 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   28de4:	3401      	adds	r4, #1
   28de6:	f10c 0c01 	add.w	ip, ip, #1
   28dea:	469e      	mov	lr, r3
   28dec:	0963      	lsrs	r3, r4, #5
   28dee:	f004 011f 	and.w	r1, r4, #31
   28df2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   28df6:	291f      	cmp	r1, #31
   28df8:	fa23 f301 	lsr.w	r3, r3, r1
   28dfc:	bf18      	it	ne
   28dfe:	f003 0301 	andne.w	r3, r3, #1
   28e02:	2c00      	cmp	r4, #0
   28e04:	d1e9      	bne.n	28dda <LLF_RND_RepetitionCounterTest.part.0+0x12>
   28e06:	2501      	movs	r5, #1
   28e08:	e7ec      	b.n	28de4 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   28e0a:	3501      	adds	r5, #1
   28e0c:	4295      	cmp	r5, r2
   28e0e:	d1e7      	bne.n	28de0 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   28e10:	4801      	ldr	r0, [pc, #4]	; (28e18 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   28e12:	bd70      	pop	{r4, r5, r6, pc}
   28e14:	2000      	movs	r0, #0
   28e16:	bd70      	pop	{r4, r5, r6, pc}
   28e18:	00f10c36 	.word	0x00f10c36

00028e1c <LLF_RND_AdaptiveProportionTest>:
   28e1c:	2800      	cmp	r0, #0
   28e1e:	d03f      	beq.n	28ea0 <LLF_RND_AdaptiveProportionTest+0x84>
   28e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28e24:	1e4c      	subs	r4, r1, #1
   28e26:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   28e2a:	d228      	bcs.n	28e7e <LLF_RND_AdaptiveProportionTest+0x62>
   28e2c:	b33b      	cbz	r3, 28e7e <LLF_RND_AdaptiveProportionTest+0x62>
   28e2e:	b332      	cbz	r2, 28e7e <LLF_RND_AdaptiveProportionTest+0x62>
   28e30:	f04f 0e00 	mov.w	lr, #0
   28e34:	00cf      	lsls	r7, r1, #3
   28e36:	4676      	mov	r6, lr
   28e38:	4675      	mov	r5, lr
   28e3a:	4674      	mov	r4, lr
   28e3c:	f103 38ff 	add.w	r8, r3, #4294967295
   28e40:	0961      	lsrs	r1, r4, #5
   28e42:	f004 0c1f 	and.w	ip, r4, #31
   28e46:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   28e4a:	f1bc 0f1f 	cmp.w	ip, #31
   28e4e:	fa21 f10c 	lsr.w	r1, r1, ip
   28e52:	bf18      	it	ne
   28e54:	f001 0101 	andne.w	r1, r1, #1
   28e58:	b1a4      	cbz	r4, 28e84 <LLF_RND_AdaptiveProportionTest+0x68>
   28e5a:	42ab      	cmp	r3, r5
   28e5c:	d018      	beq.n	28e90 <LLF_RND_AdaptiveProportionTest+0x74>
   28e5e:	428e      	cmp	r6, r1
   28e60:	bf08      	it	eq
   28e62:	f10e 0e01 	addeq.w	lr, lr, #1
   28e66:	45a8      	cmp	r8, r5
   28e68:	d015      	beq.n	28e96 <LLF_RND_AdaptiveProportionTest+0x7a>
   28e6a:	3501      	adds	r5, #1
   28e6c:	4631      	mov	r1, r6
   28e6e:	3401      	adds	r4, #1
   28e70:	42bc      	cmp	r4, r7
   28e72:	d001      	beq.n	28e78 <LLF_RND_AdaptiveProportionTest+0x5c>
   28e74:	460e      	mov	r6, r1
   28e76:	e7e3      	b.n	28e40 <LLF_RND_AdaptiveProportionTest+0x24>
   28e78:	2000      	movs	r0, #0
   28e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28e7e:	4809      	ldr	r0, [pc, #36]	; (28ea4 <LLF_RND_AdaptiveProportionTest+0x88>)
   28e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28e84:	f04f 0e01 	mov.w	lr, #1
   28e88:	4674      	mov	r4, lr
   28e8a:	4675      	mov	r5, lr
   28e8c:	460e      	mov	r6, r1
   28e8e:	e7d7      	b.n	28e40 <LLF_RND_AdaptiveProportionTest+0x24>
   28e90:	2501      	movs	r5, #1
   28e92:	46ae      	mov	lr, r5
   28e94:	e7eb      	b.n	28e6e <LLF_RND_AdaptiveProportionTest+0x52>
   28e96:	4572      	cmp	r2, lr
   28e98:	d3f1      	bcc.n	28e7e <LLF_RND_AdaptiveProportionTest+0x62>
   28e9a:	4631      	mov	r1, r6
   28e9c:	461d      	mov	r5, r3
   28e9e:	e7e6      	b.n	28e6e <LLF_RND_AdaptiveProportionTest+0x52>
   28ea0:	4800      	ldr	r0, [pc, #0]	; (28ea4 <LLF_RND_AdaptiveProportionTest+0x88>)
   28ea2:	4770      	bx	lr
   28ea4:	00f10c37 	.word	0x00f10c37

00028ea8 <getTrngSource>:
   28ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28eac:	b091      	sub	sp, #68	; 0x44
   28eae:	460d      	mov	r5, r1
   28eb0:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   28eb4:	4681      	mov	r9, r0
   28eb6:	2900      	cmp	r1, #0
   28eb8:	d14c      	bne.n	28f54 <getTrngSource+0xac>
   28eba:	6928      	ldr	r0, [r5, #16]
   28ebc:	9006      	str	r0, [sp, #24]
   28ebe:	981a      	ldr	r0, [sp, #104]	; 0x68
   28ec0:	601c      	str	r4, [r3, #0]
   28ec2:	2300      	movs	r3, #0
   28ec4:	6003      	str	r3, [r0, #0]
   28ec6:	2a00      	cmp	r2, #0
   28ec8:	f000 8124 	beq.w	29114 <getTrngSource+0x26c>
   28ecc:	4b9d      	ldr	r3, [pc, #628]	; (29144 <getTrngSource+0x29c>)
   28ece:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28ed0:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   28ed4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   28ed8:	429a      	cmp	r2, r3
   28eda:	d147      	bne.n	28f6c <getTrngSource+0xc4>
   28edc:	290a      	cmp	r1, #10
   28ede:	d145      	bne.n	28f6c <getTrngSource+0xc4>
   28ee0:	f899 3003 	ldrb.w	r3, [r9, #3]
   28ee4:	9308      	str	r3, [sp, #32]
   28ee6:	f104 0308 	add.w	r3, r4, #8
   28eea:	9a06      	ldr	r2, [sp, #24]
   28eec:	9307      	str	r3, [sp, #28]
   28eee:	4b96      	ldr	r3, [pc, #600]	; (29148 <getTrngSource+0x2a0>)
   28ef0:	4c94      	ldr	r4, [pc, #592]	; (29144 <getTrngSource+0x29c>)
   28ef2:	fba3 1302 	umull	r1, r3, r3, r2
   28ef6:	089b      	lsrs	r3, r3, #2
   28ef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28efc:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   28f00:	9303      	str	r3, [sp, #12]
   28f02:	2304      	movs	r3, #4
   28f04:	9305      	str	r3, [sp, #20]
   28f06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28f08:	9e06      	ldr	r6, [sp, #24]
   28f0a:	601e      	str	r6, [r3, #0]
   28f0c:	2e00      	cmp	r6, #0
   28f0e:	d033      	beq.n	28f78 <getTrngSource+0xd0>
   28f10:	f8dd 801c 	ldr.w	r8, [sp, #28]
   28f14:	2700      	movs	r7, #0
   28f16:	f04f 0a01 	mov.w	sl, #1
   28f1a:	f000 fcbf 	bl	2989c <LLF_RND_TurnOffTrng>
   28f1e:	2300      	movs	r3, #0
   28f20:	9309      	str	r3, [sp, #36]	; 0x24
   28f22:	f1b9 0f00 	cmp.w	r9, #0
   28f26:	f000 80df 	beq.w	290e8 <getTrngSource+0x240>
   28f2a:	2d00      	cmp	r5, #0
   28f2c:	f000 80dc 	beq.w	290e8 <getTrngSource+0x240>
   28f30:	9b08      	ldr	r3, [sp, #32]
   28f32:	b1eb      	cbz	r3, 28f70 <getTrngSource+0xc8>
   28f34:	a908      	add	r1, sp, #32
   28f36:	4628      	mov	r0, r5
   28f38:	f000 fca0 	bl	2987c <LLF_RND_GetFastestRosc>
   28f3c:	2800      	cmp	r0, #0
   28f3e:	d03e      	beq.n	28fbe <getTrngSource+0x116>
   28f40:	4b82      	ldr	r3, [pc, #520]	; (2914c <getTrngSource+0x2a4>)
   28f42:	4298      	cmp	r0, r3
   28f44:	d118      	bne.n	28f78 <getTrngSource+0xd0>
   28f46:	9003      	str	r0, [sp, #12]
   28f48:	f000 fca8 	bl	2989c <LLF_RND_TurnOffTrng>
   28f4c:	9803      	ldr	r0, [sp, #12]
   28f4e:	b011      	add	sp, #68	; 0x44
   28f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   28f58:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   28f5c:	3601      	adds	r6, #1
   28f5e:	bf14      	ite	ne
   28f60:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   28f64:	f44f 7004 	moveq.w	r0, #528	; 0x210
   28f68:	9006      	str	r0, [sp, #24]
   28f6a:	e7a8      	b.n	28ebe <getTrngSource+0x16>
   28f6c:	4878      	ldr	r0, [pc, #480]	; (29150 <getTrngSource+0x2a8>)
   28f6e:	e7ea      	b.n	28f46 <getTrngSource+0x9e>
   28f70:	4878      	ldr	r0, [pc, #480]	; (29154 <getTrngSource+0x2ac>)
   28f72:	4b76      	ldr	r3, [pc, #472]	; (2914c <getTrngSource+0x2a4>)
   28f74:	4298      	cmp	r0, r3
   28f76:	d0e6      	beq.n	28f46 <getTrngSource+0x9e>
   28f78:	9b08      	ldr	r3, [sp, #32]
   28f7a:	2b08      	cmp	r3, #8
   28f7c:	f000 80c8 	beq.w	29110 <getTrngSource+0x268>
   28f80:	005b      	lsls	r3, r3, #1
   28f82:	2200      	movs	r2, #0
   28f84:	9308      	str	r3, [sp, #32]
   28f86:	9200      	str	r2, [sp, #0]
   28f88:	ab08      	add	r3, sp, #32
   28f8a:	4629      	mov	r1, r5
   28f8c:	4648      	mov	r0, r9
   28f8e:	f7ff fe73 	bl	28c78 <startTrngHW>
   28f92:	4b70      	ldr	r3, [pc, #448]	; (29154 <getTrngSource+0x2ac>)
   28f94:	4298      	cmp	r0, r3
   28f96:	f000 80b7 	beq.w	29108 <getTrngSource+0x260>
   28f9a:	2800      	cmp	r0, #0
   28f9c:	d1d3      	bne.n	28f46 <getTrngSource+0x9e>
   28f9e:	f8d9 2000 	ldr.w	r2, [r9]
   28fa2:	0a13      	lsrs	r3, r2, #8
   28fa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   28fa8:	4313      	orrs	r3, r2
   28faa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   28fae:	f8c9 3000 	str.w	r3, [r9]
   28fb2:	9b05      	ldr	r3, [sp, #20]
   28fb4:	3b01      	subs	r3, #1
   28fb6:	9305      	str	r3, [sp, #20]
   28fb8:	d1a5      	bne.n	28f06 <getTrngSource+0x5e>
   28fba:	2000      	movs	r0, #0
   28fbc:	e7c3      	b.n	28f46 <getTrngSource+0x9e>
   28fbe:	9808      	ldr	r0, [sp, #32]
   28fc0:	4629      	mov	r1, r5
   28fc2:	f000 fc3d 	bl	29840 <LLF_RND_GetRoscSampleCnt>
   28fc6:	2800      	cmp	r0, #0
   28fc8:	d1ba      	bne.n	28f40 <getTrngSource+0x98>
   28fca:	9b08      	ldr	r3, [sp, #32]
   28fcc:	2b08      	cmp	r3, #8
   28fce:	f000 8095 	beq.w	290fc <getTrngSource+0x254>
   28fd2:	2b04      	cmp	r3, #4
   28fd4:	f000 8095 	beq.w	29102 <getTrngSource+0x25a>
   28fd8:	f1a3 0302 	sub.w	r3, r3, #2
   28fdc:	fab3 f383 	clz	r3, r3
   28fe0:	095b      	lsrs	r3, r3, #5
   28fe2:	9304      	str	r3, [sp, #16]
   28fe4:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   28fe8:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   28fec:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   28ff0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   28ff2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   28ff6:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   28ffa:	4293      	cmp	r3, r2
   28ffc:	d1f6      	bne.n	28fec <getTrngSource+0x144>
   28ffe:	f04f 0b00 	mov.w	fp, #0
   29002:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   29006:	f04f 30ff 	mov.w	r0, #4294967295
   2900a:	f7ff fd07 	bl	28a1c <CC_HalClearInterruptBit>
   2900e:	f06f 031b 	mvn.w	r3, #27
   29012:	4658      	mov	r0, fp
   29014:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   29018:	f7ff fd0e 	bl	28a38 <CC_HalMaskInterrupt>
   2901c:	9b04      	ldr	r3, [sp, #16]
   2901e:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   29022:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   29026:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2902a:	f7ff fd05 	bl	28a38 <CC_HalMaskInterrupt>
   2902e:	230a      	movs	r3, #10
   29030:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   29034:	692b      	ldr	r3, [r5, #16]
   29036:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   2903a:	fbab 2303 	umull	r2, r3, fp, r3
   2903e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   29040:	091b      	lsrs	r3, r3, #4
   29042:	fb02 f303 	mul.w	r3, r2, r3
   29046:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2904a:	03db      	lsls	r3, r3, #15
   2904c:	099b      	lsrs	r3, r3, #6
   2904e:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   29052:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   29056:	9908      	ldr	r1, [sp, #32]
   29058:	f8d9 2000 	ldr.w	r2, [r9]
   2905c:	020b      	lsls	r3, r1, #8
   2905e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   29062:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   29066:	4313      	orrs	r3, r2
   29068:	f8c9 3000 	str.w	r3, [r9]
   2906c:	a809      	add	r0, sp, #36	; 0x24
   2906e:	f000 fbd7 	bl	29820 <LLF_RND_WaitRngInterrupt>
   29072:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29074:	f003 031a 	and.w	r3, r3, #26
   29078:	4303      	orrs	r3, r0
   2907a:	f47f af7d 	bne.w	28f78 <getTrngSource+0xd0>
   2907e:	fbab 3b06 	umull	r3, fp, fp, r6
   29082:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   29086:	930a      	str	r3, [sp, #40]	; 0x28
   29088:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   2908c:	930b      	str	r3, [sp, #44]	; 0x2c
   2908e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   29092:	930c      	str	r3, [sp, #48]	; 0x30
   29094:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   29098:	930d      	str	r3, [sp, #52]	; 0x34
   2909a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2909e:	930e      	str	r3, [sp, #56]	; 0x38
   290a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   290a4:	930f      	str	r3, [sp, #60]	; 0x3c
   290a6:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   290aa:	d101      	bne.n	290b0 <getTrngSource+0x208>
   290ac:	9b03      	ldr	r3, [sp, #12]
   290ae:	b9eb      	cbnz	r3, 290ec <getTrngSource+0x244>
   290b0:	4640      	mov	r0, r8
   290b2:	2218      	movs	r2, #24
   290b4:	a90a      	add	r1, sp, #40	; 0x28
   290b6:	3e18      	subs	r6, #24
   290b8:	f108 0818 	add.w	r8, r8, #24
   290bc:	f7ff fd3c 	bl	28b38 <CC_PalMemCopyPlat>
   290c0:	3701      	adds	r7, #1
   290c2:	2e00      	cmp	r6, #0
   290c4:	f47f af29 	bne.w	28f1a <getTrngSource+0x72>
   290c8:	9b06      	ldr	r3, [sp, #24]
   290ca:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   290ce:	d836      	bhi.n	2913e <getTrngSource+0x296>
   290d0:	9e07      	ldr	r6, [sp, #28]
   290d2:	696a      	ldr	r2, [r5, #20]
   290d4:	4619      	mov	r1, r3
   290d6:	4630      	mov	r0, r6
   290d8:	461f      	mov	r7, r3
   290da:	f7ff fe75 	bl	28dc8 <LLF_RND_RepetitionCounterTest.part.0>
   290de:	b320      	cbz	r0, 2912a <getTrngSource+0x282>
   290e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   290e2:	2300      	movs	r3, #0
   290e4:	6013      	str	r3, [r2, #0]
   290e6:	e72b      	b.n	28f40 <getTrngSource+0x98>
   290e8:	481b      	ldr	r0, [pc, #108]	; (29158 <getTrngSource+0x2b0>)
   290ea:	e729      	b.n	28f40 <getTrngSource+0x98>
   290ec:	4640      	mov	r0, r8
   290ee:	461a      	mov	r2, r3
   290f0:	a90a      	add	r1, sp, #40	; 0x28
   290f2:	1af6      	subs	r6, r6, r3
   290f4:	4498      	add	r8, r3
   290f6:	f7ff fd1f 	bl	28b38 <CC_PalMemCopyPlat>
   290fa:	e7e1      	b.n	290c0 <getTrngSource+0x218>
   290fc:	2303      	movs	r3, #3
   290fe:	9304      	str	r3, [sp, #16]
   29100:	e770      	b.n	28fe4 <getTrngSource+0x13c>
   29102:	2302      	movs	r3, #2
   29104:	9304      	str	r3, [sp, #16]
   29106:	e76d      	b.n	28fe4 <getTrngSource+0x13c>
   29108:	6a2b      	ldr	r3, [r5, #32]
   2910a:	2b00      	cmp	r3, #0
   2910c:	f43f af1b 	beq.w	28f46 <getTrngSource+0x9e>
   29110:	4812      	ldr	r0, [pc, #72]	; (2915c <getTrngSource+0x2b4>)
   29112:	e718      	b.n	28f46 <getTrngSource+0x9e>
   29114:	9100      	str	r1, [sp, #0]
   29116:	ab08      	add	r3, sp, #32
   29118:	2201      	movs	r2, #1
   2911a:	4629      	mov	r1, r5
   2911c:	4648      	mov	r0, r9
   2911e:	f7ff fdab 	bl	28c78 <startTrngHW>
   29122:	2800      	cmp	r0, #0
   29124:	f43f aedf 	beq.w	28ee6 <getTrngSource+0x3e>
   29128:	e70d      	b.n	28f46 <getTrngSource+0x9e>
   2912a:	69aa      	ldr	r2, [r5, #24]
   2912c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   29130:	4639      	mov	r1, r7
   29132:	4630      	mov	r0, r6
   29134:	f7ff fe72 	bl	28e1c <LLF_RND_AdaptiveProportionTest>
   29138:	2800      	cmp	r0, #0
   2913a:	d1d1      	bne.n	290e0 <getTrngSource+0x238>
   2913c:	e73d      	b.n	28fba <getTrngSource+0x112>
   2913e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   29140:	601e      	str	r6, [r3, #0]
   29142:	e719      	b.n	28f78 <getTrngSource+0xd0>
   29144:	5002b000 	.word	0x5002b000
   29148:	aaaaaaab 	.word	0xaaaaaaab
   2914c:	00f10c02 	.word	0x00f10c02
   29150:	00f10c30 	.word	0x00f10c30
   29154:	00f10c31 	.word	0x00f10c31
   29158:	00f10c35 	.word	0x00f10c35
   2915c:	00f10c32 	.word	0x00f10c32

00029160 <LLF_RND_GetTrngSource>:
   29160:	b410      	push	{r4}
   29162:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   29166:	9401      	str	r4, [sp, #4]
   29168:	9c03      	ldr	r4, [sp, #12]
   2916a:	9402      	str	r4, [sp, #8]
   2916c:	2400      	movs	r4, #0
   2916e:	9403      	str	r4, [sp, #12]
   29170:	bc10      	pop	{r4}
   29172:	f7ff be99 	b.w	28ea8 <getTrngSource>
   29176:	bf00      	nop

00029178 <LLF_RND_RunTrngStartupTest>:
   29178:	b510      	push	{r4, lr}
   2917a:	b086      	sub	sp, #24
   2917c:	ab05      	add	r3, sp, #20
   2917e:	2401      	movs	r4, #1
   29180:	e9cd 2401 	strd	r2, r4, [sp, #4]
   29184:	9300      	str	r3, [sp, #0]
   29186:	2200      	movs	r2, #0
   29188:	ab04      	add	r3, sp, #16
   2918a:	f7ff fe8d 	bl	28ea8 <getTrngSource>
   2918e:	b006      	add	sp, #24
   29190:	bd10      	pop	{r4, pc}
   29192:	bf00      	nop

00029194 <mbedtls_hardware_poll>:
   29194:	b5f0      	push	{r4, r5, r6, r7, lr}
   29196:	b089      	sub	sp, #36	; 0x24
   29198:	9205      	str	r2, [sp, #20]
   2919a:	2900      	cmp	r1, #0
   2919c:	d064      	beq.n	29268 <mbedtls_hardware_poll+0xd4>
   2919e:	461c      	mov	r4, r3
   291a0:	2b00      	cmp	r3, #0
   291a2:	d061      	beq.n	29268 <mbedtls_hardware_poll+0xd4>
   291a4:	4615      	mov	r5, r2
   291a6:	2a00      	cmp	r2, #0
   291a8:	d05e      	beq.n	29268 <mbedtls_hardware_poll+0xd4>
   291aa:	4f31      	ldr	r7, [pc, #196]	; (29270 <mbedtls_hardware_poll+0xdc>)
   291ac:	460e      	mov	r6, r1
   291ae:	6838      	ldr	r0, [r7, #0]
   291b0:	f04f 31ff 	mov.w	r1, #4294967295
   291b4:	f7ff fcdc 	bl	28b70 <CC_PalMutexLock>
   291b8:	2800      	cmp	r0, #0
   291ba:	d14b      	bne.n	29254 <mbedtls_hardware_poll+0xc0>
   291bc:	2000      	movs	r0, #0
   291be:	f7ff fd07 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   291c2:	2800      	cmp	r0, #0
   291c4:	d142      	bne.n	2924c <mbedtls_hardware_poll+0xb8>
   291c6:	482b      	ldr	r0, [pc, #172]	; (29274 <mbedtls_hardware_poll+0xe0>)
   291c8:	f000 fa9a 	bl	29700 <RNG_PLAT_SetUserRngParameters>
   291cc:	b1d8      	cbz	r0, 29206 <mbedtls_hardware_poll+0x72>
   291ce:	2001      	movs	r0, #1
   291d0:	f04f 36ff 	mov.w	r6, #4294967295
   291d4:	f7ff fcfc 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   291d8:	2800      	cmp	r0, #0
   291da:	d133      	bne.n	29244 <mbedtls_hardware_poll+0xb0>
   291dc:	4826      	ldr	r0, [pc, #152]	; (29278 <mbedtls_hardware_poll+0xe4>)
   291de:	f44f 7108 	mov.w	r1, #544	; 0x220
   291e2:	f7fe fe5f 	bl	27ea4 <mbedtls_zeroize_internal>
   291e6:	4825      	ldr	r0, [pc, #148]	; (2927c <mbedtls_hardware_poll+0xe8>)
   291e8:	2104      	movs	r1, #4
   291ea:	f7fe fe5b 	bl	27ea4 <mbedtls_zeroize_internal>
   291ee:	4821      	ldr	r0, [pc, #132]	; (29274 <mbedtls_hardware_poll+0xe0>)
   291f0:	2128      	movs	r1, #40	; 0x28
   291f2:	f7fe fe57 	bl	27ea4 <mbedtls_zeroize_internal>
   291f6:	6838      	ldr	r0, [r7, #0]
   291f8:	f7ff fcc2 	bl	28b80 <CC_PalMutexUnlock>
   291fc:	2800      	cmp	r0, #0
   291fe:	d12d      	bne.n	2925c <mbedtls_hardware_poll+0xc8>
   29200:	4630      	mov	r0, r6
   29202:	b009      	add	sp, #36	; 0x24
   29204:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29206:	4b1c      	ldr	r3, [pc, #112]	; (29278 <mbedtls_hardware_poll+0xe4>)
   29208:	9302      	str	r3, [sp, #8]
   2920a:	ab07      	add	r3, sp, #28
   2920c:	9003      	str	r0, [sp, #12]
   2920e:	4602      	mov	r2, r0
   29210:	9300      	str	r3, [sp, #0]
   29212:	4918      	ldr	r1, [pc, #96]	; (29274 <mbedtls_hardware_poll+0xe0>)
   29214:	4819      	ldr	r0, [pc, #100]	; (2927c <mbedtls_hardware_poll+0xe8>)
   29216:	9401      	str	r4, [sp, #4]
   29218:	ab05      	add	r3, sp, #20
   2921a:	f7ff ffa1 	bl	29160 <LLF_RND_GetTrngSource>
   2921e:	4603      	mov	r3, r0
   29220:	2800      	cmp	r0, #0
   29222:	d1d4      	bne.n	291ce <mbedtls_hardware_poll+0x3a>
   29224:	6822      	ldr	r2, [r4, #0]
   29226:	42aa      	cmp	r2, r5
   29228:	d3d1      	bcc.n	291ce <mbedtls_hardware_poll+0x3a>
   2922a:	9907      	ldr	r1, [sp, #28]
   2922c:	4630      	mov	r0, r6
   2922e:	3108      	adds	r1, #8
   29230:	462a      	mov	r2, r5
   29232:	461e      	mov	r6, r3
   29234:	f7ff fc80 	bl	28b38 <CC_PalMemCopyPlat>
   29238:	6025      	str	r5, [r4, #0]
   2923a:	2001      	movs	r0, #1
   2923c:	f7ff fcc8 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29240:	2800      	cmp	r0, #0
   29242:	d0cb      	beq.n	291dc <mbedtls_hardware_poll+0x48>
   29244:	480e      	ldr	r0, [pc, #56]	; (29280 <mbedtls_hardware_poll+0xec>)
   29246:	f7fe fd17 	bl	27c78 <CC_PalAbort>
   2924a:	e7c7      	b.n	291dc <mbedtls_hardware_poll+0x48>
   2924c:	480d      	ldr	r0, [pc, #52]	; (29284 <mbedtls_hardware_poll+0xf0>)
   2924e:	f7fe fd13 	bl	27c78 <CC_PalAbort>
   29252:	e7b8      	b.n	291c6 <mbedtls_hardware_poll+0x32>
   29254:	480c      	ldr	r0, [pc, #48]	; (29288 <mbedtls_hardware_poll+0xf4>)
   29256:	f7fe fd0f 	bl	27c78 <CC_PalAbort>
   2925a:	e7af      	b.n	291bc <mbedtls_hardware_poll+0x28>
   2925c:	480b      	ldr	r0, [pc, #44]	; (2928c <mbedtls_hardware_poll+0xf8>)
   2925e:	f7fe fd0b 	bl	27c78 <CC_PalAbort>
   29262:	4630      	mov	r0, r6
   29264:	b009      	add	sp, #36	; 0x24
   29266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29268:	f04f 36ff 	mov.w	r6, #4294967295
   2926c:	e7c8      	b.n	29200 <mbedtls_hardware_poll+0x6c>
   2926e:	bf00      	nop
   29270:	200009c8 	.word	0x200009c8
   29274:	20004204 	.word	0x20004204
   29278:	20003fe4 	.word	0x20003fe4
   2927c:	20003fe0 	.word	0x20003fe0
   29280:	0002fee0 	.word	0x0002fee0
   29284:	0002fec0 	.word	0x0002fec0
   29288:	0002fea8 	.word	0x0002fea8
   2928c:	0002ff38 	.word	0x0002ff38

00029290 <cc_mbedtls_aes_init>:
   29290:	b510      	push	{r4, lr}
   29292:	4604      	mov	r4, r0
   29294:	b130      	cbz	r0, 292a4 <cc_mbedtls_aes_init+0x14>
   29296:	2200      	movs	r2, #0
   29298:	2301      	movs	r3, #1
   2929a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2929e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   292a2:	bd10      	pop	{r4, pc}
   292a4:	4801      	ldr	r0, [pc, #4]	; (292ac <cc_mbedtls_aes_init+0x1c>)
   292a6:	f7fe fce7 	bl	27c78 <CC_PalAbort>
   292aa:	e7f4      	b.n	29296 <cc_mbedtls_aes_init+0x6>
   292ac:	0002ff50 	.word	0x0002ff50

000292b0 <cc_mbedtls_aes_free>:
   292b0:	b118      	cbz	r0, 292ba <cc_mbedtls_aes_free+0xa>
   292b2:	2274      	movs	r2, #116	; 0x74
   292b4:	2100      	movs	r1, #0
   292b6:	f7ff bc41 	b.w	28b3c <CC_PalMemSetPlat>
   292ba:	4770      	bx	lr

000292bc <cc_mbedtls_aes_setkey_enc>:
   292bc:	b190      	cbz	r0, 292e4 <cc_mbedtls_aes_setkey_enc+0x28>
   292be:	b1a1      	cbz	r1, 292ea <cc_mbedtls_aes_setkey_enc+0x2e>
   292c0:	b510      	push	{r4, lr}
   292c2:	2a80      	cmp	r2, #128	; 0x80
   292c4:	f04f 0400 	mov.w	r4, #0
   292c8:	6384      	str	r4, [r0, #56]	; 0x38
   292ca:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   292ce:	d106      	bne.n	292de <cc_mbedtls_aes_setkey_enc+0x22>
   292d0:	2210      	movs	r2, #16
   292d2:	6304      	str	r4, [r0, #48]	; 0x30
   292d4:	4410      	add	r0, r2
   292d6:	f7ff fc2f 	bl	28b38 <CC_PalMemCopyPlat>
   292da:	4620      	mov	r0, r4
   292dc:	bd10      	pop	{r4, pc}
   292de:	f06f 001f 	mvn.w	r0, #31
   292e2:	bd10      	pop	{r4, pc}
   292e4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   292e8:	4770      	bx	lr
   292ea:	f06f 001f 	mvn.w	r0, #31
   292ee:	4770      	bx	lr

000292f0 <cc_mbedtls_aes_crypt_ecb>:
   292f0:	b328      	cbz	r0, 2933e <cc_mbedtls_aes_crypt_ecb+0x4e>
   292f2:	b322      	cbz	r2, 2933e <cc_mbedtls_aes_crypt_ecb+0x4e>
   292f4:	b31b      	cbz	r3, 2933e <cc_mbedtls_aes_crypt_ecb+0x4e>
   292f6:	2901      	cmp	r1, #1
   292f8:	d821      	bhi.n	2933e <cc_mbedtls_aes_crypt_ecb+0x4e>
   292fa:	b570      	push	{r4, r5, r6, lr}
   292fc:	4604      	mov	r4, r0
   292fe:	6b81      	ldr	r1, [r0, #56]	; 0x38
   29300:	b086      	sub	sp, #24
   29302:	d017      	beq.n	29334 <cc_mbedtls_aes_crypt_ecb+0x44>
   29304:	2901      	cmp	r1, #1
   29306:	d117      	bne.n	29338 <cc_mbedtls_aes_crypt_ecb+0x48>
   29308:	2510      	movs	r5, #16
   2930a:	2100      	movs	r1, #0
   2930c:	eb0d 0605 	add.w	r6, sp, r5
   29310:	6361      	str	r1, [r4, #52]	; 0x34
   29312:	4610      	mov	r0, r2
   29314:	9500      	str	r5, [sp, #0]
   29316:	9601      	str	r6, [sp, #4]
   29318:	aa02      	add	r2, sp, #8
   2931a:	4629      	mov	r1, r5
   2931c:	f000 faca 	bl	298b4 <SetDataBuffersInfo>
   29320:	b950      	cbnz	r0, 29338 <cc_mbedtls_aes_crypt_ecb+0x48>
   29322:	462b      	mov	r3, r5
   29324:	4632      	mov	r2, r6
   29326:	a902      	add	r1, sp, #8
   29328:	4620      	mov	r0, r4
   2932a:	f000 fd4b 	bl	29dc4 <ProcessAesDrv>
   2932e:	b918      	cbnz	r0, 29338 <cc_mbedtls_aes_crypt_ecb+0x48>
   29330:	b006      	add	sp, #24
   29332:	bd70      	pop	{r4, r5, r6, pc}
   29334:	2900      	cmp	r1, #0
   29336:	d0e7      	beq.n	29308 <cc_mbedtls_aes_crypt_ecb+0x18>
   29338:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2933c:	e7f8      	b.n	29330 <cc_mbedtls_aes_crypt_ecb+0x40>
   2933e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   29342:	4770      	bx	lr

00029344 <cc_mbedtls_sha256_init>:
   29344:	b510      	push	{r4, lr}
   29346:	4604      	mov	r4, r0
   29348:	b128      	cbz	r0, 29356 <cc_mbedtls_sha256_init+0x12>
   2934a:	4620      	mov	r0, r4
   2934c:	21f4      	movs	r1, #244	; 0xf4
   2934e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29352:	f7ff bbf5 	b.w	28b40 <CC_PalMemSetZeroPlat>
   29356:	4804      	ldr	r0, [pc, #16]	; (29368 <cc_mbedtls_sha256_init+0x24>)
   29358:	f7fe fc8e 	bl	27c78 <CC_PalAbort>
   2935c:	4620      	mov	r0, r4
   2935e:	21f4      	movs	r1, #244	; 0xf4
   29360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29364:	f7ff bbec 	b.w	28b40 <CC_PalMemSetZeroPlat>
   29368:	0002ff64 	.word	0x0002ff64

0002936c <cc_mbedtls_sha256_free>:
   2936c:	b110      	cbz	r0, 29374 <cc_mbedtls_sha256_free+0x8>
   2936e:	21f4      	movs	r1, #244	; 0xf4
   29370:	f7fe bd98 	b.w	27ea4 <mbedtls_zeroize_internal>
   29374:	4770      	bx	lr
   29376:	bf00      	nop

00029378 <cc_mbedtls_sha256_starts>:
   29378:	b508      	push	{r3, lr}
   2937a:	b161      	cbz	r1, 29396 <cc_mbedtls_sha256_starts+0x1e>
   2937c:	2901      	cmp	r1, #1
   2937e:	d107      	bne.n	29390 <cc_mbedtls_sha256_starts+0x18>
   29380:	2102      	movs	r1, #2
   29382:	f000 f85b 	bl	2943c <mbedtls_sha_starts_internal>
   29386:	2800      	cmp	r0, #0
   29388:	bf18      	it	ne
   2938a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2938e:	bd08      	pop	{r3, pc}
   29390:	f06f 0036 	mvn.w	r0, #54	; 0x36
   29394:	bd08      	pop	{r3, pc}
   29396:	2101      	movs	r1, #1
   29398:	f000 f850 	bl	2943c <mbedtls_sha_starts_internal>
   2939c:	e7f3      	b.n	29386 <cc_mbedtls_sha256_starts+0xe>
   2939e:	bf00      	nop

000293a0 <cc_mbedtls_sha256_update>:
   293a0:	b530      	push	{r4, r5, lr}
   293a2:	4605      	mov	r5, r0
   293a4:	1888      	adds	r0, r1, r2
   293a6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   293aa:	b0a1      	sub	sp, #132	; 0x84
   293ac:	460b      	mov	r3, r1
   293ae:	4614      	mov	r4, r2
   293b0:	d801      	bhi.n	293b6 <cc_mbedtls_sha256_update+0x16>
   293b2:	2a80      	cmp	r2, #128	; 0x80
   293b4:	d90c      	bls.n	293d0 <cc_mbedtls_sha256_update+0x30>
   293b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   293ba:	d917      	bls.n	293ec <cc_mbedtls_sha256_update+0x4c>
   293bc:	4622      	mov	r2, r4
   293be:	4619      	mov	r1, r3
   293c0:	4628      	mov	r0, r5
   293c2:	f000 f87d 	bl	294c0 <mbedtls_sha_update_internal>
   293c6:	4604      	mov	r4, r0
   293c8:	b984      	cbnz	r4, 293ec <cc_mbedtls_sha256_update+0x4c>
   293ca:	4620      	mov	r0, r4
   293cc:	b021      	add	sp, #132	; 0x84
   293ce:	bd30      	pop	{r4, r5, pc}
   293d0:	4668      	mov	r0, sp
   293d2:	f7ff fbb1 	bl	28b38 <CC_PalMemCopyPlat>
   293d6:	4622      	mov	r2, r4
   293d8:	4669      	mov	r1, sp
   293da:	4628      	mov	r0, r5
   293dc:	f000 f870 	bl	294c0 <mbedtls_sha_update_internal>
   293e0:	2180      	movs	r1, #128	; 0x80
   293e2:	4604      	mov	r4, r0
   293e4:	4668      	mov	r0, sp
   293e6:	f7ff fbab 	bl	28b40 <CC_PalMemSetZeroPlat>
   293ea:	e7ed      	b.n	293c8 <cc_mbedtls_sha256_update+0x28>
   293ec:	f06f 0436 	mvn.w	r4, #54	; 0x36
   293f0:	e7eb      	b.n	293ca <cc_mbedtls_sha256_update+0x2a>
   293f2:	bf00      	nop

000293f4 <cc_mbedtls_sha256_finish>:
   293f4:	b570      	push	{r4, r5, r6, lr}
   293f6:	b1e8      	cbz	r0, 29434 <cc_mbedtls_sha256_finish+0x40>
   293f8:	460e      	mov	r6, r1
   293fa:	b1d9      	cbz	r1, 29434 <cc_mbedtls_sha256_finish+0x40>
   293fc:	4604      	mov	r4, r0
   293fe:	f000 f831 	bl	29464 <mbedtls_sha_finish_internal>
   29402:	4605      	mov	r5, r0
   29404:	b9b0      	cbnz	r0, 29434 <cc_mbedtls_sha256_finish+0x40>
   29406:	6823      	ldr	r3, [r4, #0]
   29408:	2b01      	cmp	r3, #1
   2940a:	d00b      	beq.n	29424 <cc_mbedtls_sha256_finish+0x30>
   2940c:	2b02      	cmp	r3, #2
   2940e:	d001      	beq.n	29414 <cc_mbedtls_sha256_finish+0x20>
   29410:	4628      	mov	r0, r5
   29412:	bd70      	pop	{r4, r5, r6, pc}
   29414:	221c      	movs	r2, #28
   29416:	f104 0108 	add.w	r1, r4, #8
   2941a:	4630      	mov	r0, r6
   2941c:	f7ff fb8c 	bl	28b38 <CC_PalMemCopyPlat>
   29420:	4628      	mov	r0, r5
   29422:	bd70      	pop	{r4, r5, r6, pc}
   29424:	2220      	movs	r2, #32
   29426:	f104 0108 	add.w	r1, r4, #8
   2942a:	4630      	mov	r0, r6
   2942c:	f7ff fb84 	bl	28b38 <CC_PalMemCopyPlat>
   29430:	4628      	mov	r0, r5
   29432:	bd70      	pop	{r4, r5, r6, pc}
   29434:	f06f 0536 	mvn.w	r5, #54	; 0x36
   29438:	e7ea      	b.n	29410 <cc_mbedtls_sha256_finish+0x1c>
   2943a:	bf00      	nop

0002943c <mbedtls_sha_starts_internal>:
   2943c:	b178      	cbz	r0, 2945e <mbedtls_sha_starts_internal+0x22>
   2943e:	b538      	push	{r3, r4, r5, lr}
   29440:	4604      	mov	r4, r0
   29442:	460d      	mov	r5, r1
   29444:	21f0      	movs	r1, #240	; 0xf0
   29446:	f7ff fb7b 	bl	28b40 <CC_PalMemSetZeroPlat>
   2944a:	2340      	movs	r3, #64	; 0x40
   2944c:	6025      	str	r5, [r4, #0]
   2944e:	65e3      	str	r3, [r4, #92]	; 0x5c
   29450:	4620      	mov	r0, r4
   29452:	f000 fa63 	bl	2991c <InitHashDrv>
   29456:	3800      	subs	r0, #0
   29458:	bf18      	it	ne
   2945a:	2001      	movne	r0, #1
   2945c:	bd38      	pop	{r3, r4, r5, pc}
   2945e:	2001      	movs	r0, #1
   29460:	4770      	bx	lr
   29462:	bf00      	nop

00029464 <mbedtls_sha_finish_internal>:
   29464:	b570      	push	{r4, r5, r6, lr}
   29466:	6e05      	ldr	r5, [r0, #96]	; 0x60
   29468:	b0a4      	sub	sp, #144	; 0x90
   2946a:	4604      	mov	r4, r0
   2946c:	ae04      	add	r6, sp, #16
   2946e:	b9e5      	cbnz	r5, 294aa <mbedtls_sha_finish_internal+0x46>
   29470:	2201      	movs	r2, #1
   29472:	2300      	movs	r3, #0
   29474:	6062      	str	r2, [r4, #4]
   29476:	4630      	mov	r0, r6
   29478:	e9cd 3300 	strd	r3, r3, [sp]
   2947c:	aa02      	add	r2, sp, #8
   2947e:	4629      	mov	r1, r5
   29480:	f000 fa18 	bl	298b4 <SetDataBuffersInfo>
   29484:	b110      	cbz	r0, 2948c <mbedtls_sha_finish_internal+0x28>
   29486:	2001      	movs	r0, #1
   29488:	b024      	add	sp, #144	; 0x90
   2948a:	bd70      	pop	{r4, r5, r6, pc}
   2948c:	462a      	mov	r2, r5
   2948e:	a902      	add	r1, sp, #8
   29490:	4620      	mov	r0, r4
   29492:	f000 fa6d 	bl	29970 <ProcessHashDrv>
   29496:	2800      	cmp	r0, #0
   29498:	d1f5      	bne.n	29486 <mbedtls_sha_finish_internal+0x22>
   2949a:	4620      	mov	r0, r4
   2949c:	f000 fb7e 	bl	29b9c <FinishHashDrv>
   294a0:	2800      	cmp	r0, #0
   294a2:	d1f0      	bne.n	29486 <mbedtls_sha_finish_internal+0x22>
   294a4:	6620      	str	r0, [r4, #96]	; 0x60
   294a6:	b024      	add	sp, #144	; 0x90
   294a8:	bd70      	pop	{r4, r5, r6, pc}
   294aa:	2d80      	cmp	r5, #128	; 0x80
   294ac:	462a      	mov	r2, r5
   294ae:	f100 0164 	add.w	r1, r0, #100	; 0x64
   294b2:	bf28      	it	cs
   294b4:	2280      	movcs	r2, #128	; 0x80
   294b6:	4630      	mov	r0, r6
   294b8:	f7ff fb3e 	bl	28b38 <CC_PalMemCopyPlat>
   294bc:	6e25      	ldr	r5, [r4, #96]	; 0x60
   294be:	e7d7      	b.n	29470 <mbedtls_sha_finish_internal+0xc>

000294c0 <mbedtls_sha_update_internal>:
   294c0:	2800      	cmp	r0, #0
   294c2:	f000 80cd 	beq.w	29660 <mbedtls_sha_update_internal+0x1a0>
   294c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   294ca:	4615      	mov	r5, r2
   294cc:	b0a5      	sub	sp, #148	; 0x94
   294ce:	2a00      	cmp	r2, #0
   294d0:	f000 80b4 	beq.w	2963c <mbedtls_sha_update_internal+0x17c>
   294d4:	460f      	mov	r7, r1
   294d6:	2900      	cmp	r1, #0
   294d8:	f000 80ac 	beq.w	29634 <mbedtls_sha_update_internal+0x174>
   294dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   294e0:	4606      	mov	r6, r0
   294e2:	6e00      	ldr	r0, [r0, #96]	; 0x60
   294e4:	d37d      	bcc.n	295e2 <mbedtls_sha_update_internal+0x122>
   294e6:	f64f 78ff 	movw	r8, #65535	; 0xffff
   294ea:	f106 0964 	add.w	r9, r6, #100	; 0x64
   294ee:	e014      	b.n	2951a <mbedtls_sha_update_internal+0x5a>
   294f0:	4283      	cmp	r3, r0
   294f2:	46ba      	mov	sl, r7
   294f4:	f64f 74ff 	movw	r4, #65535	; 0xffff
   294f8:	d029      	beq.n	2954e <mbedtls_sha_update_internal+0x8e>
   294fa:	fbb4 fbf3 	udiv	fp, r4, r3
   294fe:	fb03 fb0b 	mul.w	fp, r3, fp
   29502:	f1bb 0f00 	cmp.w	fp, #0
   29506:	d144      	bne.n	29592 <mbedtls_sha_update_internal+0xd2>
   29508:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   2950c:	4447      	add	r7, r8
   2950e:	3dff      	subs	r5, #255	; 0xff
   29510:	2c00      	cmp	r4, #0
   29512:	d159      	bne.n	295c8 <mbedtls_sha_update_internal+0x108>
   29514:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   29518:	d363      	bcc.n	295e2 <mbedtls_sha_update_internal+0x122>
   2951a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2951c:	1a1c      	subs	r4, r3, r0
   2951e:	fbb4 f2f3 	udiv	r2, r4, r3
   29522:	fb03 4412 	mls	r4, r3, r2, r4
   29526:	2c00      	cmp	r4, #0
   29528:	d0e2      	beq.n	294f0 <mbedtls_sha_update_internal+0x30>
   2952a:	4544      	cmp	r4, r8
   2952c:	bf28      	it	cs
   2952e:	4644      	movcs	r4, r8
   29530:	4622      	mov	r2, r4
   29532:	4448      	add	r0, r9
   29534:	4639      	mov	r1, r7
   29536:	f7ff faff 	bl	28b38 <CC_PalMemCopyPlat>
   2953a:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2953c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   2953e:	4420      	add	r0, r4
   29540:	4283      	cmp	r3, r0
   29542:	eb07 0a04 	add.w	sl, r7, r4
   29546:	6630      	str	r0, [r6, #96]	; 0x60
   29548:	eba8 0404 	sub.w	r4, r8, r4
   2954c:	d1d5      	bne.n	294fa <mbedtls_sha_update_internal+0x3a>
   2954e:	2b80      	cmp	r3, #128	; 0x80
   29550:	bf28      	it	cs
   29552:	2380      	movcs	r3, #128	; 0x80
   29554:	461a      	mov	r2, r3
   29556:	4649      	mov	r1, r9
   29558:	a804      	add	r0, sp, #16
   2955a:	f7ff faed 	bl	28b38 <CC_PalMemCopyPlat>
   2955e:	2300      	movs	r3, #0
   29560:	e9cd 3300 	strd	r3, r3, [sp]
   29564:	aa02      	add	r2, sp, #8
   29566:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   29568:	a804      	add	r0, sp, #16
   2956a:	f000 f9a3 	bl	298b4 <SetDataBuffersInfo>
   2956e:	2800      	cmp	r0, #0
   29570:	d160      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   29572:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   29574:	a902      	add	r1, sp, #8
   29576:	4630      	mov	r0, r6
   29578:	f000 f9fa 	bl	29970 <ProcessHashDrv>
   2957c:	2800      	cmp	r0, #0
   2957e:	d159      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   29580:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   29582:	fbb4 fbf3 	udiv	fp, r4, r3
   29586:	fb03 fb0b 	mul.w	fp, r3, fp
   2958a:	6630      	str	r0, [r6, #96]	; 0x60
   2958c:	f1bb 0f00 	cmp.w	fp, #0
   29590:	d0ba      	beq.n	29508 <mbedtls_sha_update_internal+0x48>
   29592:	2300      	movs	r3, #0
   29594:	e9cd 3300 	strd	r3, r3, [sp]
   29598:	aa02      	add	r2, sp, #8
   2959a:	4659      	mov	r1, fp
   2959c:	4650      	mov	r0, sl
   2959e:	f000 f989 	bl	298b4 <SetDataBuffersInfo>
   295a2:	2800      	cmp	r0, #0
   295a4:	d146      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   295a6:	a902      	add	r1, sp, #8
   295a8:	465a      	mov	r2, fp
   295aa:	4630      	mov	r0, r6
   295ac:	f000 f9e0 	bl	29970 <ProcessHashDrv>
   295b0:	2800      	cmp	r0, #0
   295b2:	d13f      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   295b4:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   295b8:	eba4 040b 	sub.w	r4, r4, fp
   295bc:	6e30      	ldr	r0, [r6, #96]	; 0x60
   295be:	44da      	add	sl, fp
   295c0:	4447      	add	r7, r8
   295c2:	3dff      	subs	r5, #255	; 0xff
   295c4:	2c00      	cmp	r4, #0
   295c6:	d0a5      	beq.n	29514 <mbedtls_sha_update_internal+0x54>
   295c8:	3019      	adds	r0, #25
   295ca:	4651      	mov	r1, sl
   295cc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   295d0:	4622      	mov	r2, r4
   295d2:	f7ff fab1 	bl	28b38 <CC_PalMemCopyPlat>
   295d6:	6e30      	ldr	r0, [r6, #96]	; 0x60
   295d8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   295dc:	4420      	add	r0, r4
   295de:	6630      	str	r0, [r6, #96]	; 0x60
   295e0:	d29b      	bcs.n	2951a <mbedtls_sha_update_internal+0x5a>
   295e2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   295e4:	1a14      	subs	r4, r2, r0
   295e6:	fbb4 f3f2 	udiv	r3, r4, r2
   295ea:	fb02 4413 	mls	r4, r2, r3, r4
   295ee:	42ac      	cmp	r4, r5
   295f0:	bf28      	it	cs
   295f2:	462c      	movcs	r4, r5
   295f4:	bb34      	cbnz	r4, 29644 <mbedtls_sha_update_internal+0x184>
   295f6:	4290      	cmp	r0, r2
   295f8:	d034      	beq.n	29664 <mbedtls_sha_update_internal+0x1a4>
   295fa:	fbb5 f4f2 	udiv	r4, r5, r2
   295fe:	fb02 f404 	mul.w	r4, r2, r4
   29602:	b96c      	cbnz	r4, 29620 <mbedtls_sha_update_internal+0x160>
   29604:	b1d5      	cbz	r5, 2963c <mbedtls_sha_update_internal+0x17c>
   29606:	6e33      	ldr	r3, [r6, #96]	; 0x60
   29608:	3319      	adds	r3, #25
   2960a:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   2960e:	462a      	mov	r2, r5
   29610:	4639      	mov	r1, r7
   29612:	f7ff fa91 	bl	28b38 <CC_PalMemCopyPlat>
   29616:	6e33      	ldr	r3, [r6, #96]	; 0x60
   29618:	442b      	add	r3, r5
   2961a:	2000      	movs	r0, #0
   2961c:	6633      	str	r3, [r6, #96]	; 0x60
   2961e:	e00a      	b.n	29636 <mbedtls_sha_update_internal+0x176>
   29620:	2300      	movs	r3, #0
   29622:	e9cd 3300 	strd	r3, r3, [sp]
   29626:	aa02      	add	r2, sp, #8
   29628:	4621      	mov	r1, r4
   2962a:	4638      	mov	r0, r7
   2962c:	f000 f942 	bl	298b4 <SetDataBuffersInfo>
   29630:	2800      	cmp	r0, #0
   29632:	d033      	beq.n	2969c <mbedtls_sha_update_internal+0x1dc>
   29634:	2001      	movs	r0, #1
   29636:	b025      	add	sp, #148	; 0x94
   29638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2963c:	4628      	mov	r0, r5
   2963e:	b025      	add	sp, #148	; 0x94
   29640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29644:	f106 0364 	add.w	r3, r6, #100	; 0x64
   29648:	4639      	mov	r1, r7
   2964a:	4622      	mov	r2, r4
   2964c:	4418      	add	r0, r3
   2964e:	f7ff fa73 	bl	28b38 <CC_PalMemCopyPlat>
   29652:	6e30      	ldr	r0, [r6, #96]	; 0x60
   29654:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   29656:	4420      	add	r0, r4
   29658:	1b2d      	subs	r5, r5, r4
   2965a:	4427      	add	r7, r4
   2965c:	6630      	str	r0, [r6, #96]	; 0x60
   2965e:	e7ca      	b.n	295f6 <mbedtls_sha_update_internal+0x136>
   29660:	2001      	movs	r0, #1
   29662:	4770      	bx	lr
   29664:	2a80      	cmp	r2, #128	; 0x80
   29666:	bf28      	it	cs
   29668:	2280      	movcs	r2, #128	; 0x80
   2966a:	f106 0164 	add.w	r1, r6, #100	; 0x64
   2966e:	a804      	add	r0, sp, #16
   29670:	f7ff fa62 	bl	28b38 <CC_PalMemCopyPlat>
   29674:	2300      	movs	r3, #0
   29676:	e9cd 3300 	strd	r3, r3, [sp]
   2967a:	a804      	add	r0, sp, #16
   2967c:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   2967e:	aa02      	add	r2, sp, #8
   29680:	f000 f918 	bl	298b4 <SetDataBuffersInfo>
   29684:	2800      	cmp	r0, #0
   29686:	d1d5      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   29688:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   2968a:	a902      	add	r1, sp, #8
   2968c:	4630      	mov	r0, r6
   2968e:	f000 f96f 	bl	29970 <ProcessHashDrv>
   29692:	2800      	cmp	r0, #0
   29694:	d1ce      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   29696:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   29698:	6630      	str	r0, [r6, #96]	; 0x60
   2969a:	e7ae      	b.n	295fa <mbedtls_sha_update_internal+0x13a>
   2969c:	a902      	add	r1, sp, #8
   2969e:	4622      	mov	r2, r4
   296a0:	4630      	mov	r0, r6
   296a2:	f000 f965 	bl	29970 <ProcessHashDrv>
   296a6:	2800      	cmp	r0, #0
   296a8:	d1c4      	bne.n	29634 <mbedtls_sha_update_internal+0x174>
   296aa:	4427      	add	r7, r4
   296ac:	1b2d      	subs	r5, r5, r4
   296ae:	e7a9      	b.n	29604 <mbedtls_sha_update_internal+0x144>

000296b0 <cc_mbedtls_sha256>:
   296b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   296b2:	461c      	mov	r4, r3
   296b4:	4605      	mov	r5, r0
   296b6:	4811      	ldr	r0, [pc, #68]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296b8:	460e      	mov	r6, r1
   296ba:	4617      	mov	r7, r2
   296bc:	f7ff fe42 	bl	29344 <cc_mbedtls_sha256_init>
   296c0:	4621      	mov	r1, r4
   296c2:	480e      	ldr	r0, [pc, #56]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296c4:	f7ff fe58 	bl	29378 <cc_mbedtls_sha256_starts>
   296c8:	4604      	mov	r4, r0
   296ca:	b120      	cbz	r0, 296d6 <cc_mbedtls_sha256+0x26>
   296cc:	480b      	ldr	r0, [pc, #44]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296ce:	f7ff fe4d 	bl	2936c <cc_mbedtls_sha256_free>
   296d2:	4620      	mov	r0, r4
   296d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   296d6:	4809      	ldr	r0, [pc, #36]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296d8:	4632      	mov	r2, r6
   296da:	4629      	mov	r1, r5
   296dc:	f7ff fe60 	bl	293a0 <cc_mbedtls_sha256_update>
   296e0:	4604      	mov	r4, r0
   296e2:	2800      	cmp	r0, #0
   296e4:	d1f2      	bne.n	296cc <cc_mbedtls_sha256+0x1c>
   296e6:	4639      	mov	r1, r7
   296e8:	4804      	ldr	r0, [pc, #16]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296ea:	f7ff fe83 	bl	293f4 <cc_mbedtls_sha256_finish>
   296ee:	4604      	mov	r4, r0
   296f0:	4802      	ldr	r0, [pc, #8]	; (296fc <cc_mbedtls_sha256+0x4c>)
   296f2:	f7ff fe3b 	bl	2936c <cc_mbedtls_sha256_free>
   296f6:	4620      	mov	r0, r4
   296f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   296fa:	bf00      	nop
   296fc:	2000422c 	.word	0x2000422c

00029700 <RNG_PLAT_SetUserRngParameters>:
   29700:	b530      	push	{r4, r5, lr}
   29702:	b083      	sub	sp, #12
   29704:	231c      	movs	r3, #28
   29706:	a901      	add	r1, sp, #4
   29708:	4604      	mov	r4, r0
   2970a:	9301      	str	r3, [sp, #4]
   2970c:	f000 f834 	bl	29778 <CC_PalTrngParamGet>
   29710:	4605      	mov	r5, r0
   29712:	b938      	cbnz	r0, 29724 <RNG_PLAT_SetUserRngParameters+0x24>
   29714:	9b01      	ldr	r3, [sp, #4]
   29716:	2b1c      	cmp	r3, #28
   29718:	d007      	beq.n	2972a <RNG_PLAT_SetUserRngParameters+0x2a>
   2971a:	4d15      	ldr	r5, [pc, #84]	; (29770 <RNG_PLAT_SetUserRngParameters+0x70>)
   2971c:	211c      	movs	r1, #28
   2971e:	4620      	mov	r0, r4
   29720:	f7ff fa0e 	bl	28b40 <CC_PalMemSetZeroPlat>
   29724:	4628      	mov	r0, r5
   29726:	b003      	add	sp, #12
   29728:	bd30      	pop	{r4, r5, pc}
   2972a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2972e:	2101      	movs	r1, #1
   29730:	3b00      	subs	r3, #0
   29732:	61e1      	str	r1, [r4, #28]
   29734:	bf18      	it	ne
   29736:	2301      	movne	r3, #1
   29738:	b10a      	cbz	r2, 2973e <RNG_PLAT_SetUserRngParameters+0x3e>
   2973a:	f043 0302 	orr.w	r3, r3, #2
   2973e:	68a2      	ldr	r2, [r4, #8]
   29740:	b932      	cbnz	r2, 29750 <RNG_PLAT_SetUserRngParameters+0x50>
   29742:	68e2      	ldr	r2, [r4, #12]
   29744:	b942      	cbnz	r2, 29758 <RNG_PLAT_SetUserRngParameters+0x58>
   29746:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2974a:	b97b      	cbnz	r3, 2976c <RNG_PLAT_SetUserRngParameters+0x6c>
   2974c:	4d09      	ldr	r5, [pc, #36]	; (29774 <RNG_PLAT_SetUserRngParameters+0x74>)
   2974e:	e7e5      	b.n	2971c <RNG_PLAT_SetUserRngParameters+0x1c>
   29750:	68e2      	ldr	r2, [r4, #12]
   29752:	f043 0304 	orr.w	r3, r3, #4
   29756:	b13a      	cbz	r2, 29768 <RNG_PLAT_SetUserRngParameters+0x68>
   29758:	f043 0308 	orr.w	r3, r3, #8
   2975c:	2200      	movs	r2, #0
   2975e:	4628      	mov	r0, r5
   29760:	e9c4 3208 	strd	r3, r2, [r4, #32]
   29764:	b003      	add	sp, #12
   29766:	bd30      	pop	{r4, r5, pc}
   29768:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2976c:	4615      	mov	r5, r2
   2976e:	e7d9      	b.n	29724 <RNG_PLAT_SetUserRngParameters+0x24>
   29770:	00f00c37 	.word	0x00f00c37
   29774:	00f00c0e 	.word	0x00f00c0e

00029778 <CC_PalTrngParamGet>:
   29778:	b118      	cbz	r0, 29782 <CC_PalTrngParamGet+0xa>
   2977a:	b111      	cbz	r1, 29782 <CC_PalTrngParamGet+0xa>
   2977c:	680b      	ldr	r3, [r1, #0]
   2977e:	2b1c      	cmp	r3, #28
   29780:	d001      	beq.n	29786 <CC_PalTrngParamGet+0xe>
   29782:	2001      	movs	r0, #1
   29784:	4770      	bx	lr
   29786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2978a:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2978e:	3201      	adds	r2, #1
   29790:	bf14      	ite	ne
   29792:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   29796:	f241 225c 	movweq	r2, #4700	; 0x125c
   2979a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2979e:	6002      	str	r2, [r0, #0]
   297a0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   297a4:	3201      	adds	r2, #1
   297a6:	bf14      	ite	ne
   297a8:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   297ac:	f641 1264 	movweq	r2, #6500	; 0x1964
   297b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   297b4:	6042      	str	r2, [r0, #4]
   297b6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   297ba:	3201      	adds	r2, #1
   297bc:	bf14      	ite	ne
   297be:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   297c2:	f640 62d8 	movweq	r2, #3800	; 0xed8
   297c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   297ca:	6082      	str	r2, [r0, #8]
   297cc:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   297d0:	3201      	adds	r2, #1
   297d2:	bf14      	ite	ne
   297d4:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   297d8:	f241 3288 	movweq	r2, #5000	; 0x1388
   297dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   297e0:	60c2      	str	r2, [r0, #12]
   297e2:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   297e6:	3201      	adds	r2, #1
   297e8:	bf14      	ite	ne
   297ea:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   297ee:	2290      	moveq	r2, #144	; 0x90
   297f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   297f4:	6102      	str	r2, [r0, #16]
   297f6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   297fa:	3201      	adds	r2, #1
   297fc:	bf14      	ite	ne
   297fe:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   29802:	2251      	moveq	r2, #81	; 0x51
   29804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29808:	6142      	str	r2, [r0, #20]
   2980a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2980e:	3201      	adds	r2, #1
   29810:	bf14      	ite	ne
   29812:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   29816:	f240 3337 	movweq	r3, #823	; 0x337
   2981a:	6183      	str	r3, [r0, #24]
   2981c:	2000      	movs	r0, #0
   2981e:	4770      	bx	lr

00029820 <LLF_RND_WaitRngInterrupt>:
   29820:	b508      	push	{r3, lr}
   29822:	4601      	mov	r1, r0
   29824:	f44f 6080 	mov.w	r0, #1024	; 0x400
   29828:	f7ff f912 	bl	28a50 <CC_HalWaitInterruptRND>
   2982c:	4b03      	ldr	r3, [pc, #12]	; (2983c <LLF_RND_WaitRngInterrupt+0x1c>)
   2982e:	2200      	movs	r2, #0
   29830:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   29834:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   29838:	bd08      	pop	{r3, pc}
   2983a:	bf00      	nop
   2983c:	5002b000 	.word	0x5002b000

00029840 <LLF_RND_GetRoscSampleCnt>:
   29840:	3801      	subs	r0, #1
   29842:	2807      	cmp	r0, #7
   29844:	d805      	bhi.n	29852 <LLF_RND_GetRoscSampleCnt+0x12>
   29846:	e8df f000 	tbb	[pc, r0]
   2984a:	0e12      	.short	0x0e12
   2984c:	04040a04 	.word	0x04040a04
   29850:	0604      	.short	0x0604
   29852:	4809      	ldr	r0, [pc, #36]	; (29878 <LLF_RND_GetRoscSampleCnt+0x38>)
   29854:	4770      	bx	lr
   29856:	68cb      	ldr	r3, [r1, #12]
   29858:	624b      	str	r3, [r1, #36]	; 0x24
   2985a:	2000      	movs	r0, #0
   2985c:	4770      	bx	lr
   2985e:	688b      	ldr	r3, [r1, #8]
   29860:	624b      	str	r3, [r1, #36]	; 0x24
   29862:	2000      	movs	r0, #0
   29864:	4770      	bx	lr
   29866:	684b      	ldr	r3, [r1, #4]
   29868:	624b      	str	r3, [r1, #36]	; 0x24
   2986a:	2000      	movs	r0, #0
   2986c:	4770      	bx	lr
   2986e:	680b      	ldr	r3, [r1, #0]
   29870:	624b      	str	r3, [r1, #36]	; 0x24
   29872:	2000      	movs	r0, #0
   29874:	4770      	bx	lr
   29876:	bf00      	nop
   29878:	00f10c31 	.word	0x00f10c31

0002987c <LLF_RND_GetFastestRosc>:
   2987c:	680b      	ldr	r3, [r1, #0]
   2987e:	e002      	b.n	29886 <LLF_RND_GetFastestRosc+0xa>
   29880:	2b08      	cmp	r3, #8
   29882:	600b      	str	r3, [r1, #0]
   29884:	d806      	bhi.n	29894 <LLF_RND_GetFastestRosc+0x18>
   29886:	6a02      	ldr	r2, [r0, #32]
   29888:	4213      	tst	r3, r2
   2988a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2988e:	d0f7      	beq.n	29880 <LLF_RND_GetFastestRosc+0x4>
   29890:	2000      	movs	r0, #0
   29892:	4770      	bx	lr
   29894:	4800      	ldr	r0, [pc, #0]	; (29898 <LLF_RND_GetFastestRosc+0x1c>)
   29896:	4770      	bx	lr
   29898:	00f10c31 	.word	0x00f10c31

0002989c <LLF_RND_TurnOffTrng>:
   2989c:	4b04      	ldr	r3, [pc, #16]	; (298b0 <LLF_RND_TurnOffTrng+0x14>)
   2989e:	2200      	movs	r2, #0
   298a0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   298a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   298a8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   298ac:	f7ff b8b6 	b.w	28a1c <CC_HalClearInterruptBit>
   298b0:	5002b000 	.word	0x5002b000

000298b4 <SetDataBuffersInfo>:
   298b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   298b6:	b083      	sub	sp, #12
   298b8:	461d      	mov	r5, r3
   298ba:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   298be:	f04f 0300 	mov.w	r3, #0
   298c2:	f88d 3007 	strb.w	r3, [sp, #7]
   298c6:	d324      	bcc.n	29912 <SetDataBuffersInfo+0x5e>
   298c8:	468c      	mov	ip, r1
   298ca:	4484      	add	ip, r0
   298cc:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   298d0:	4604      	mov	r4, r0
   298d2:	d81e      	bhi.n	29912 <SetDataBuffersInfo+0x5e>
   298d4:	4617      	mov	r7, r2
   298d6:	f10d 0307 	add.w	r3, sp, #7
   298da:	2201      	movs	r2, #1
   298dc:	f000 fe68 	bl	2a5b0 <CC_PalDataBufferAttrGet>
   298e0:	4606      	mov	r6, r0
   298e2:	b9b0      	cbnz	r0, 29912 <SetDataBuffersInfo+0x5e>
   298e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   298e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   298ea:	603c      	str	r4, [r7, #0]
   298ec:	713b      	strb	r3, [r7, #4]
   298ee:	b192      	cbz	r2, 29916 <SetDataBuffersInfo+0x62>
   298f0:	b14d      	cbz	r5, 29906 <SetDataBuffersInfo+0x52>
   298f2:	4602      	mov	r2, r0
   298f4:	9908      	ldr	r1, [sp, #32]
   298f6:	f10d 0307 	add.w	r3, sp, #7
   298fa:	4628      	mov	r0, r5
   298fc:	f000 fe58 	bl	2a5b0 <CC_PalDataBufferAttrGet>
   29900:	b938      	cbnz	r0, 29912 <SetDataBuffersInfo+0x5e>
   29902:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29906:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29908:	4630      	mov	r0, r6
   2990a:	6015      	str	r5, [r2, #0]
   2990c:	7113      	strb	r3, [r2, #4]
   2990e:	b003      	add	sp, #12
   29910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29912:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   29916:	4630      	mov	r0, r6
   29918:	b003      	add	sp, #12
   2991a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002991c <InitHashDrv>:
   2991c:	b1e8      	cbz	r0, 2995a <InitHashDrv+0x3e>
   2991e:	b510      	push	{r4, lr}
   29920:	6804      	ldr	r4, [r0, #0]
   29922:	2c01      	cmp	r4, #1
   29924:	d004      	beq.n	29930 <InitHashDrv+0x14>
   29926:	2c02      	cmp	r4, #2
   29928:	d010      	beq.n	2994c <InitHashDrv+0x30>
   2992a:	b144      	cbz	r4, 2993e <InitHashDrv+0x22>
   2992c:	480c      	ldr	r0, [pc, #48]	; (29960 <InitHashDrv+0x44>)
   2992e:	bd10      	pop	{r4, pc}
   29930:	490c      	ldr	r1, [pc, #48]	; (29964 <InitHashDrv+0x48>)
   29932:	2220      	movs	r2, #32
   29934:	3008      	adds	r0, #8
   29936:	f7ff f8ff 	bl	28b38 <CC_PalMemCopyPlat>
   2993a:	2000      	movs	r0, #0
   2993c:	bd10      	pop	{r4, pc}
   2993e:	490a      	ldr	r1, [pc, #40]	; (29968 <InitHashDrv+0x4c>)
   29940:	2214      	movs	r2, #20
   29942:	3008      	adds	r0, #8
   29944:	f7ff f8f8 	bl	28b38 <CC_PalMemCopyPlat>
   29948:	4620      	mov	r0, r4
   2994a:	bd10      	pop	{r4, pc}
   2994c:	4907      	ldr	r1, [pc, #28]	; (2996c <InitHashDrv+0x50>)
   2994e:	2220      	movs	r2, #32
   29950:	3008      	adds	r0, #8
   29952:	f7ff f8f1 	bl	28b38 <CC_PalMemCopyPlat>
   29956:	2000      	movs	r0, #0
   29958:	bd10      	pop	{r4, pc}
   2995a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2995e:	4770      	bx	lr
   29960:	00f30001 	.word	0x00f30001
   29964:	0002ffa8 	.word	0x0002ffa8
   29968:	0002ff74 	.word	0x0002ff74
   2996c:	0002ff88 	.word	0x0002ff88

00029970 <ProcessHashDrv>:
   29970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29974:	2900      	cmp	r1, #0
   29976:	f000 80f9 	beq.w	29b6c <ProcessHashDrv+0x1fc>
   2997a:	4604      	mov	r4, r0
   2997c:	2800      	cmp	r0, #0
   2997e:	f000 80f9 	beq.w	29b74 <ProcessHashDrv+0x204>
   29982:	6803      	ldr	r3, [r0, #0]
   29984:	4690      	mov	r8, r2
   29986:	460f      	mov	r7, r1
   29988:	2b00      	cmp	r3, #0
   2998a:	f000 80c3 	beq.w	29b14 <ProcessHashDrv+0x1a4>
   2998e:	3b01      	subs	r3, #1
   29990:	2b01      	cmp	r3, #1
   29992:	f200 80d7 	bhi.w	29b44 <ProcessHashDrv+0x1d4>
   29996:	4879      	ldr	r0, [pc, #484]	; (29b7c <ProcessHashDrv+0x20c>)
   29998:	f04f 31ff 	mov.w	r1, #4294967295
   2999c:	f04f 0902 	mov.w	r9, #2
   299a0:	f7ff f8e6 	bl	28b70 <CC_PalMutexLock>
   299a4:	2800      	cmp	r0, #0
   299a6:	f040 80bf 	bne.w	29b28 <ProcessHashDrv+0x1b8>
   299aa:	2000      	movs	r0, #0
   299ac:	f7ff f910 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   299b0:	4606      	mov	r6, r0
   299b2:	2800      	cmp	r0, #0
   299b4:	f040 80c2 	bne.w	29b3c <ProcessHashDrv+0x1cc>
   299b8:	4a71      	ldr	r2, [pc, #452]	; (29b80 <ProcessHashDrv+0x210>)
   299ba:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   299be:	2b00      	cmp	r3, #0
   299c0:	d1fb      	bne.n	299ba <ProcessHashDrv+0x4a>
   299c2:	4d6f      	ldr	r5, [pc, #444]	; (29b80 <ProcessHashDrv+0x210>)
   299c4:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   299c8:	2b00      	cmp	r3, #0
   299ca:	d1fb      	bne.n	299c4 <ProcessHashDrv+0x54>
   299cc:	f04f 30ff 	mov.w	r0, #4294967295
   299d0:	f7ff f824 	bl	28a1c <CC_HalClearInterruptBit>
   299d4:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   299d8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   299dc:	f7ff f82c 	bl	28a38 <CC_HalMaskInterrupt>
   299e0:	2301      	movs	r3, #1
   299e2:	2207      	movs	r2, #7
   299e4:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   299e8:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   299ec:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   299f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   299f2:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   299f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   299f8:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   299fc:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   29a00:	6823      	ldr	r3, [r4, #0]
   29a02:	b15b      	cbz	r3, 29a1c <ProcessHashDrv+0xac>
   29a04:	3b01      	subs	r3, #1
   29a06:	2b01      	cmp	r3, #1
   29a08:	d818      	bhi.n	29a3c <ProcessHashDrv+0xcc>
   29a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29a0c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   29a10:	6a23      	ldr	r3, [r4, #32]
   29a12:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   29a16:	69e3      	ldr	r3, [r4, #28]
   29a18:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   29a1c:	4b58      	ldr	r3, [pc, #352]	; (29b80 <ProcessHashDrv+0x210>)
   29a1e:	69a2      	ldr	r2, [r4, #24]
   29a20:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   29a24:	6962      	ldr	r2, [r4, #20]
   29a26:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   29a2a:	6922      	ldr	r2, [r4, #16]
   29a2c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   29a30:	68e2      	ldr	r2, [r4, #12]
   29a32:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   29a36:	68a2      	ldr	r2, [r4, #8]
   29a38:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   29a3c:	4a50      	ldr	r2, [pc, #320]	; (29b80 <ProcessHashDrv+0x210>)
   29a3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29a42:	2b00      	cmp	r3, #0
   29a44:	d1fb      	bne.n	29a3e <ProcessHashDrv+0xce>
   29a46:	f1b8 0f00 	cmp.w	r8, #0
   29a4a:	d05f      	beq.n	29b0c <ProcessHashDrv+0x19c>
   29a4c:	6863      	ldr	r3, [r4, #4]
   29a4e:	2b01      	cmp	r3, #1
   29a50:	bf08      	it	eq
   29a52:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   29a56:	4b4a      	ldr	r3, [pc, #296]	; (29b80 <ProcessHashDrv+0x210>)
   29a58:	683a      	ldr	r2, [r7, #0]
   29a5a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   29a5e:	2040      	movs	r0, #64	; 0x40
   29a60:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   29a64:	f7fe ffee 	bl	28a44 <CC_HalWaitInterrupt>
   29a68:	4606      	mov	r6, r0
   29a6a:	4a45      	ldr	r2, [pc, #276]	; (29b80 <ProcessHashDrv+0x210>)
   29a6c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29a70:	2b00      	cmp	r3, #0
   29a72:	d1fb      	bne.n	29a6c <ProcessHashDrv+0xfc>
   29a74:	4a42      	ldr	r2, [pc, #264]	; (29b80 <ProcessHashDrv+0x210>)
   29a76:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   29a7a:	2b00      	cmp	r3, #0
   29a7c:	d1fb      	bne.n	29a76 <ProcessHashDrv+0x106>
   29a7e:	6823      	ldr	r3, [r4, #0]
   29a80:	b15b      	cbz	r3, 29a9a <ProcessHashDrv+0x12a>
   29a82:	3b01      	subs	r3, #1
   29a84:	2b01      	cmp	r3, #1
   29a86:	d818      	bhi.n	29aba <ProcessHashDrv+0x14a>
   29a88:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   29a8c:	6263      	str	r3, [r4, #36]	; 0x24
   29a8e:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   29a92:	6223      	str	r3, [r4, #32]
   29a94:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   29a98:	61e3      	str	r3, [r4, #28]
   29a9a:	4b39      	ldr	r3, [pc, #228]	; (29b80 <ProcessHashDrv+0x210>)
   29a9c:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   29aa0:	61a2      	str	r2, [r4, #24]
   29aa2:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   29aa6:	6162      	str	r2, [r4, #20]
   29aa8:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   29aac:	6122      	str	r2, [r4, #16]
   29aae:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   29ab2:	60e2      	str	r2, [r4, #12]
   29ab4:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   29ab8:	60a3      	str	r3, [r4, #8]
   29aba:	4a31      	ldr	r2, [pc, #196]	; (29b80 <ProcessHashDrv+0x210>)
   29abc:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   29ac0:	64a1      	str	r1, [r4, #72]	; 0x48
   29ac2:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   29ac6:	64e1      	str	r1, [r4, #76]	; 0x4c
   29ac8:	2300      	movs	r3, #0
   29aca:	2101      	movs	r1, #1
   29acc:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   29ad0:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   29ad4:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29ad8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29adc:	2b00      	cmp	r3, #0
   29ade:	d1fb      	bne.n	29ad8 <ProcessHashDrv+0x168>
   29ae0:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   29ae4:	2e00      	cmp	r6, #0
   29ae6:	d13b      	bne.n	29b60 <ProcessHashDrv+0x1f0>
   29ae8:	4b25      	ldr	r3, [pc, #148]	; (29b80 <ProcessHashDrv+0x210>)
   29aea:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   29aee:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   29af2:	f7fe ffa1 	bl	28a38 <CC_HalMaskInterrupt>
   29af6:	2001      	movs	r0, #1
   29af8:	f7ff f86a 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29afc:	bb60      	cbnz	r0, 29b58 <ProcessHashDrv+0x1e8>
   29afe:	481f      	ldr	r0, [pc, #124]	; (29b7c <ProcessHashDrv+0x20c>)
   29b00:	f7ff f83e 	bl	28b80 <CC_PalMutexUnlock>
   29b04:	bb10      	cbnz	r0, 29b4c <ProcessHashDrv+0x1dc>
   29b06:	4630      	mov	r0, r6
   29b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b0c:	2304      	movs	r3, #4
   29b0e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   29b12:	e7aa      	b.n	29a6a <ProcessHashDrv+0xfa>
   29b14:	4819      	ldr	r0, [pc, #100]	; (29b7c <ProcessHashDrv+0x20c>)
   29b16:	f04f 31ff 	mov.w	r1, #4294967295
   29b1a:	f04f 0901 	mov.w	r9, #1
   29b1e:	f7ff f827 	bl	28b70 <CC_PalMutexLock>
   29b22:	2800      	cmp	r0, #0
   29b24:	f43f af41 	beq.w	299aa <ProcessHashDrv+0x3a>
   29b28:	4816      	ldr	r0, [pc, #88]	; (29b84 <ProcessHashDrv+0x214>)
   29b2a:	f7fe f8a5 	bl	27c78 <CC_PalAbort>
   29b2e:	2000      	movs	r0, #0
   29b30:	f7ff f84e 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29b34:	4606      	mov	r6, r0
   29b36:	2800      	cmp	r0, #0
   29b38:	f43f af3e 	beq.w	299b8 <ProcessHashDrv+0x48>
   29b3c:	4812      	ldr	r0, [pc, #72]	; (29b88 <ProcessHashDrv+0x218>)
   29b3e:	f7fe f89b 	bl	27c78 <CC_PalAbort>
   29b42:	e739      	b.n	299b8 <ProcessHashDrv+0x48>
   29b44:	4e11      	ldr	r6, [pc, #68]	; (29b8c <ProcessHashDrv+0x21c>)
   29b46:	4630      	mov	r0, r6
   29b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b4c:	4810      	ldr	r0, [pc, #64]	; (29b90 <ProcessHashDrv+0x220>)
   29b4e:	f7fe f893 	bl	27c78 <CC_PalAbort>
   29b52:	4630      	mov	r0, r6
   29b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b58:	480e      	ldr	r0, [pc, #56]	; (29b94 <ProcessHashDrv+0x224>)
   29b5a:	f7fe f88d 	bl	27c78 <CC_PalAbort>
   29b5e:	e7ce      	b.n	29afe <ProcessHashDrv+0x18e>
   29b60:	2110      	movs	r1, #16
   29b62:	f104 0008 	add.w	r0, r4, #8
   29b66:	f7fe ffeb 	bl	28b40 <CC_PalMemSetZeroPlat>
   29b6a:	e7bd      	b.n	29ae8 <ProcessHashDrv+0x178>
   29b6c:	4e0a      	ldr	r6, [pc, #40]	; (29b98 <ProcessHashDrv+0x228>)
   29b6e:	4630      	mov	r0, r6
   29b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b74:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   29b78:	e7c5      	b.n	29b06 <ProcessHashDrv+0x196>
   29b7a:	bf00      	nop
   29b7c:	200009c4 	.word	0x200009c4
   29b80:	5002b000 	.word	0x5002b000
   29b84:	0002fea8 	.word	0x0002fea8
   29b88:	0002fec0 	.word	0x0002fec0
   29b8c:	00f30001 	.word	0x00f30001
   29b90:	0002ff00 	.word	0x0002ff00
   29b94:	0002fee0 	.word	0x0002fee0
   29b98:	00f30003 	.word	0x00f30003

00029b9c <FinishHashDrv>:
   29b9c:	b398      	cbz	r0, 29c06 <FinishHashDrv+0x6a>
   29b9e:	b470      	push	{r4, r5, r6}
   29ba0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   29ba4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   29ba8:	ba26      	rev	r6, r4
   29baa:	ba0d      	rev	r5, r1
   29bac:	ba14      	rev	r4, r2
   29bae:	ba19      	rev	r1, r3
   29bb0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   29bb4:	ba12      	rev	r2, r2
   29bb6:	e9c0 4104 	strd	r4, r1, [r0, #16]
   29bba:	6182      	str	r2, [r0, #24]
   29bbc:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   29bc0:	e9c0 6502 	strd	r6, r5, [r0, #8]
   29bc4:	ba1b      	rev	r3, r3
   29bc6:	ba25      	rev	r5, r4
   29bc8:	e9c0 3507 	strd	r3, r5, [r0, #28]
   29bcc:	ba14      	rev	r4, r2
   29bce:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   29bd2:	6a81      	ldr	r1, [r0, #40]	; 0x28
   29bd4:	ba12      	rev	r2, r2
   29bd6:	ba09      	rev	r1, r1
   29bd8:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   29bdc:	62c2      	str	r2, [r0, #44]	; 0x2c
   29bde:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   29be2:	ba1b      	rev	r3, r3
   29be4:	ba25      	rev	r5, r4
   29be6:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   29bea:	ba14      	rev	r4, r2
   29bec:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   29bf0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   29bf2:	ba12      	rev	r2, r2
   29bf4:	ba09      	rev	r1, r1
   29bf6:	ba1b      	rev	r3, r3
   29bf8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   29bfc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   29c00:	2000      	movs	r0, #0
   29c02:	bc70      	pop	{r4, r5, r6}
   29c04:	4770      	bx	lr
   29c06:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   29c0a:	4770      	bx	lr

00029c0c <LoadAesKey>:
   29c0c:	2800      	cmp	r0, #0
   29c0e:	d046      	beq.n	29c9e <LoadAesKey+0x92>
   29c10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   29c14:	2b00      	cmp	r3, #0
   29c16:	d033      	beq.n	29c80 <LoadAesKey+0x74>
   29c18:	2b03      	cmp	r3, #3
   29c1a:	b510      	push	{r4, lr}
   29c1c:	d013      	beq.n	29c46 <LoadAesKey+0x3a>
   29c1e:	4821      	ldr	r0, [pc, #132]	; (29ca4 <LoadAesKey+0x98>)
   29c20:	4c21      	ldr	r4, [pc, #132]	; (29ca8 <LoadAesKey+0x9c>)
   29c22:	6822      	ldr	r2, [r4, #0]
   29c24:	4b21      	ldr	r3, [pc, #132]	; (29cac <LoadAesKey+0xa0>)
   29c26:	6812      	ldr	r2, [r2, #0]
   29c28:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   29c2c:	6822      	ldr	r2, [r4, #0]
   29c2e:	6852      	ldr	r2, [r2, #4]
   29c30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29c34:	6822      	ldr	r2, [r4, #0]
   29c36:	6892      	ldr	r2, [r2, #8]
   29c38:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   29c3c:	6822      	ldr	r2, [r4, #0]
   29c3e:	68d2      	ldr	r2, [r2, #12]
   29c40:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29c44:	bd10      	pop	{r4, pc}
   29c46:	6b01      	ldr	r1, [r0, #48]	; 0x30
   29c48:	6c00      	ldr	r0, [r0, #64]	; 0x40
   29c4a:	4c17      	ldr	r4, [pc, #92]	; (29ca8 <LoadAesKey+0x9c>)
   29c4c:	f000 fbac 	bl	2a3a8 <kmu_validate_kdr_slot_and_size>
   29c50:	2800      	cmp	r0, #0
   29c52:	d1e6      	bne.n	29c22 <LoadAesKey+0x16>
   29c54:	6822      	ldr	r2, [r4, #0]
   29c56:	4b15      	ldr	r3, [pc, #84]	; (29cac <LoadAesKey+0xa0>)
   29c58:	6812      	ldr	r2, [r2, #0]
   29c5a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   29c5e:	6822      	ldr	r2, [r4, #0]
   29c60:	6852      	ldr	r2, [r2, #4]
   29c62:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29c66:	6822      	ldr	r2, [r4, #0]
   29c68:	6892      	ldr	r2, [r2, #8]
   29c6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   29c6e:	6822      	ldr	r2, [r4, #0]
   29c70:	68d2      	ldr	r2, [r2, #12]
   29c72:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29c76:	f000 fba3 	bl	2a3c0 <kmu_use_kdr_key>
   29c7a:	2800      	cmp	r0, #0
   29c7c:	d1d1      	bne.n	29c22 <LoadAesKey+0x16>
   29c7e:	bd10      	pop	{r4, pc}
   29c80:	4a0a      	ldr	r2, [pc, #40]	; (29cac <LoadAesKey+0xa0>)
   29c82:	6901      	ldr	r1, [r0, #16]
   29c84:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   29c88:	6941      	ldr	r1, [r0, #20]
   29c8a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   29c8e:	6981      	ldr	r1, [r0, #24]
   29c90:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   29c94:	69c1      	ldr	r1, [r0, #28]
   29c96:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   29c9a:	4618      	mov	r0, r3
   29c9c:	4770      	bx	lr
   29c9e:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   29ca2:	4770      	bx	lr
   29ca4:	00f10009 	.word	0x00f10009
   29ca8:	200009b4 	.word	0x200009b4
   29cac:	5002b000 	.word	0x5002b000

00029cb0 <InitAes.part.0>:
   29cb0:	4a37      	ldr	r2, [pc, #220]	; (29d90 <InitAes.part.0+0xe0>)
   29cb2:	b538      	push	{r3, r4, r5, lr}
   29cb4:	4604      	mov	r4, r0
   29cb6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29cba:	2b00      	cmp	r3, #0
   29cbc:	d1fb      	bne.n	29cb6 <InitAes.part.0+0x6>
   29cbe:	4a34      	ldr	r2, [pc, #208]	; (29d90 <InitAes.part.0+0xe0>)
   29cc0:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29cc4:	2b00      	cmp	r3, #0
   29cc6:	d1fb      	bne.n	29cc0 <InitAes.part.0+0x10>
   29cc8:	4a31      	ldr	r2, [pc, #196]	; (29d90 <InitAes.part.0+0xe0>)
   29cca:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   29cce:	2b00      	cmp	r3, #0
   29cd0:	d1fb      	bne.n	29cca <InitAes.part.0+0x1a>
   29cd2:	4a2f      	ldr	r2, [pc, #188]	; (29d90 <InitAes.part.0+0xe0>)
   29cd4:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   29cd8:	2b00      	cmp	r3, #0
   29cda:	d1fb      	bne.n	29cd4 <InitAes.part.0+0x24>
   29cdc:	4a2c      	ldr	r2, [pc, #176]	; (29d90 <InitAes.part.0+0xe0>)
   29cde:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   29ce2:	2b00      	cmp	r3, #0
   29ce4:	d1fb      	bne.n	29cde <InitAes.part.0+0x2e>
   29ce6:	4d2a      	ldr	r5, [pc, #168]	; (29d90 <InitAes.part.0+0xe0>)
   29ce8:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   29cec:	2b00      	cmp	r3, #0
   29cee:	d1fb      	bne.n	29ce8 <InitAes.part.0+0x38>
   29cf0:	f04f 30ff 	mov.w	r0, #4294967295
   29cf4:	f7fe fe92 	bl	28a1c <CC_HalClearInterruptBit>
   29cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29cfa:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   29cfe:	f023 0304 	bic.w	r3, r3, #4
   29d02:	2b03      	cmp	r3, #3
   29d04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29d06:	d039      	beq.n	29d7c <InitAes.part.0+0xcc>
   29d08:	2b01      	cmp	r3, #1
   29d0a:	bf0c      	ite	eq
   29d0c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   29d10:	f020 0020 	bicne.w	r0, r0, #32
   29d14:	f7fe fe90 	bl	28a38 <CC_HalMaskInterrupt>
   29d18:	4a1d      	ldr	r2, [pc, #116]	; (29d90 <InitAes.part.0+0xe0>)
   29d1a:	2301      	movs	r3, #1
   29d1c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   29d20:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29d24:	2b00      	cmp	r3, #0
   29d26:	d1fb      	bne.n	29d20 <InitAes.part.0+0x70>
   29d28:	4a19      	ldr	r2, [pc, #100]	; (29d90 <InitAes.part.0+0xe0>)
   29d2a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29d2e:	2b00      	cmp	r3, #0
   29d30:	d1fb      	bne.n	29d2a <InitAes.part.0+0x7a>
   29d32:	4917      	ldr	r1, [pc, #92]	; (29d90 <InitAes.part.0+0xe0>)
   29d34:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   29d38:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   29d3c:	2b00      	cmp	r3, #0
   29d3e:	d1fb      	bne.n	29d38 <InitAes.part.0+0x88>
   29d40:	4a13      	ldr	r2, [pc, #76]	; (29d90 <InitAes.part.0+0xe0>)
   29d42:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29d46:	2b00      	cmp	r3, #0
   29d48:	d1fb      	bne.n	29d42 <InitAes.part.0+0x92>
   29d4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29d4c:	f022 0104 	bic.w	r1, r2, #4
   29d50:	2903      	cmp	r1, #3
   29d52:	bf18      	it	ne
   29d54:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   29d56:	490e      	ldr	r1, [pc, #56]	; (29d90 <InitAes.part.0+0xe0>)
   29d58:	ea4f 0282 	mov.w	r2, r2, lsl #2
   29d5c:	bf18      	it	ne
   29d5e:	f003 0301 	andne.w	r3, r3, #1
   29d62:	f002 021c 	and.w	r2, r2, #28
   29d66:	4313      	orrs	r3, r2
   29d68:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   29d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29d6e:	2b07      	cmp	r3, #7
   29d70:	bf04      	itt	eq
   29d72:	2301      	moveq	r3, #1
   29d74:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   29d78:	2000      	movs	r0, #0
   29d7a:	bd38      	pop	{r3, r4, r5, pc}
   29d7c:	2b01      	cmp	r3, #1
   29d7e:	bf0c      	ite	eq
   29d80:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   29d84:	f020 0010 	bicne.w	r0, r0, #16
   29d88:	f7fe fe56 	bl	28a38 <CC_HalMaskInterrupt>
   29d8c:	e7c4      	b.n	29d18 <InitAes.part.0+0x68>
   29d8e:	bf00      	nop
   29d90:	5002b000 	.word	0x5002b000

00029d94 <write_invalid_key>:
   29d94:	4a09      	ldr	r2, [pc, #36]	; (29dbc <write_invalid_key+0x28>)
   29d96:	4b0a      	ldr	r3, [pc, #40]	; (29dc0 <write_invalid_key+0x2c>)
   29d98:	6811      	ldr	r1, [r2, #0]
   29d9a:	6809      	ldr	r1, [r1, #0]
   29d9c:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   29da0:	6811      	ldr	r1, [r2, #0]
   29da2:	6849      	ldr	r1, [r1, #4]
   29da4:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   29da8:	6811      	ldr	r1, [r2, #0]
   29daa:	6889      	ldr	r1, [r1, #8]
   29dac:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   29db0:	6812      	ldr	r2, [r2, #0]
   29db2:	68d2      	ldr	r2, [r2, #12]
   29db4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29db8:	4770      	bx	lr
   29dba:	bf00      	nop
   29dbc:	200009b4 	.word	0x200009b4
   29dc0:	5002b000 	.word	0x5002b000

00029dc4 <ProcessAesDrv>:
   29dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29dc8:	b085      	sub	sp, #20
   29dca:	2900      	cmp	r1, #0
   29dcc:	f000 80a3 	beq.w	29f16 <ProcessAesDrv+0x152>
   29dd0:	4690      	mov	r8, r2
   29dd2:	2a00      	cmp	r2, #0
   29dd4:	f000 809f 	beq.w	29f16 <ProcessAesDrv+0x152>
   29dd8:	4605      	mov	r5, r0
   29dda:	2800      	cmp	r0, #0
   29ddc:	f000 813c 	beq.w	2a058 <ProcessAesDrv+0x294>
   29de0:	4699      	mov	r9, r3
   29de2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29de4:	460e      	mov	r6, r1
   29de6:	2b00      	cmp	r3, #0
   29de8:	d151      	bne.n	29e8e <ProcessAesDrv+0xca>
   29dea:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   29dee:	d253      	bcs.n	29e98 <ProcessAesDrv+0xd4>
   29df0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   29df4:	2b04      	cmp	r3, #4
   29df6:	f000 8112 	beq.w	2a01e <ProcessAesDrv+0x25a>
   29dfa:	2700      	movs	r7, #0
   29dfc:	48a6      	ldr	r0, [pc, #664]	; (2a098 <ProcessAesDrv+0x2d4>)
   29dfe:	f04f 31ff 	mov.w	r1, #4294967295
   29e02:	f7fe feb5 	bl	28b70 <CC_PalMutexLock>
   29e06:	2800      	cmp	r0, #0
   29e08:	f040 80e8 	bne.w	29fdc <ProcessAesDrv+0x218>
   29e0c:	2000      	movs	r0, #0
   29e0e:	f7fe fedf 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29e12:	2800      	cmp	r0, #0
   29e14:	f040 80eb 	bne.w	29fee <ProcessAesDrv+0x22a>
   29e18:	48a0      	ldr	r0, [pc, #640]	; (2a09c <ProcessAesDrv+0x2d8>)
   29e1a:	2301      	movs	r3, #1
   29e1c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   29e20:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   29e24:	2c00      	cmp	r4, #0
   29e26:	d1fb      	bne.n	29e20 <ProcessAesDrv+0x5c>
   29e28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29e2a:	2b03      	cmp	r3, #3
   29e2c:	dc39      	bgt.n	29ea2 <ProcessAesDrv+0xde>
   29e2e:	2b00      	cmp	r3, #0
   29e30:	da3a      	bge.n	29ea8 <ProcessAesDrv+0xe4>
   29e32:	4c9b      	ldr	r4, [pc, #620]	; (2a0a0 <ProcessAesDrv+0x2dc>)
   29e34:	4a99      	ldr	r2, [pc, #612]	; (2a09c <ProcessAesDrv+0x2d8>)
   29e36:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29e3a:	2b00      	cmp	r3, #0
   29e3c:	d1fb      	bne.n	29e36 <ProcessAesDrv+0x72>
   29e3e:	2f00      	cmp	r7, #0
   29e40:	f040 80e4 	bne.w	2a00c <ProcessAesDrv+0x248>
   29e44:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29e46:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29e48:	f023 0304 	bic.w	r3, r3, #4
   29e4c:	2b03      	cmp	r3, #3
   29e4e:	4b93      	ldr	r3, [pc, #588]	; (2a09c <ProcessAesDrv+0x2d8>)
   29e50:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   29e54:	d056      	beq.n	29f04 <ProcessAesDrv+0x140>
   29e56:	2a01      	cmp	r2, #1
   29e58:	bf0c      	ite	eq
   29e5a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   29e5e:	f040 0020 	orrne.w	r0, r0, #32
   29e62:	f7fe fde9 	bl	28a38 <CC_HalMaskInterrupt>
   29e66:	4b8d      	ldr	r3, [pc, #564]	; (2a09c <ProcessAesDrv+0x2d8>)
   29e68:	2200      	movs	r2, #0
   29e6a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   29e6e:	2001      	movs	r0, #1
   29e70:	f7fe feae 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29e74:	2800      	cmp	r0, #0
   29e76:	f040 80c5 	bne.w	2a004 <ProcessAesDrv+0x240>
   29e7a:	4887      	ldr	r0, [pc, #540]	; (2a098 <ProcessAesDrv+0x2d4>)
   29e7c:	f7fe fe80 	bl	28b80 <CC_PalMutexUnlock>
   29e80:	2800      	cmp	r0, #0
   29e82:	f040 80b8 	bne.w	29ff6 <ProcessAesDrv+0x232>
   29e86:	4620      	mov	r0, r4
   29e88:	b005      	add	sp, #20
   29e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e8e:	2b01      	cmp	r3, #1
   29e90:	d1ae      	bne.n	29df0 <ProcessAesDrv+0x2c>
   29e92:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   29e96:	d3ab      	bcc.n	29df0 <ProcessAesDrv+0x2c>
   29e98:	4c82      	ldr	r4, [pc, #520]	; (2a0a4 <ProcessAesDrv+0x2e0>)
   29e9a:	4620      	mov	r0, r4
   29e9c:	b005      	add	sp, #20
   29e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ea2:	3b06      	subs	r3, #6
   29ea4:	2b01      	cmp	r3, #1
   29ea6:	d8c4      	bhi.n	29e32 <ProcessAesDrv+0x6e>
   29ea8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   29eaa:	2b01      	cmp	r3, #1
   29eac:	f200 80d2 	bhi.w	2a054 <ProcessAesDrv+0x290>
   29eb0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29eb2:	2b01      	cmp	r3, #1
   29eb4:	d834      	bhi.n	29f20 <ProcessAesDrv+0x15c>
   29eb6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29eb8:	2b01      	cmp	r3, #1
   29eba:	f200 8122 	bhi.w	2a102 <ProcessAesDrv+0x33e>
   29ebe:	4628      	mov	r0, r5
   29ec0:	f7ff fef6 	bl	29cb0 <InitAes.part.0>
   29ec4:	4604      	mov	r4, r0
   29ec6:	2800      	cmp	r0, #0
   29ec8:	d1b4      	bne.n	29e34 <ProcessAesDrv+0x70>
   29eca:	4628      	mov	r0, r5
   29ecc:	f7ff fe9e 	bl	29c0c <LoadAesKey>
   29ed0:	4604      	mov	r4, r0
   29ed2:	2800      	cmp	r0, #0
   29ed4:	d1ae      	bne.n	29e34 <ProcessAesDrv+0x70>
   29ed6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29ed8:	2b07      	cmp	r3, #7
   29eda:	d8aa      	bhi.n	29e32 <ProcessAesDrv+0x6e>
   29edc:	a201      	add	r2, pc, #4	; (adr r2, 29ee4 <ProcessAesDrv+0x120>)
   29ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   29ee2:	bf00      	nop
   29ee4:	00029f41 	.word	0x00029f41
   29ee8:	00029f25 	.word	0x00029f25
   29eec:	0002a0c9 	.word	0x0002a0c9
   29ef0:	00029f25 	.word	0x00029f25
   29ef4:	00029e33 	.word	0x00029e33
   29ef8:	00029e33 	.word	0x00029e33
   29efc:	0002a0c9 	.word	0x0002a0c9
   29f00:	00029f25 	.word	0x00029f25
   29f04:	2a01      	cmp	r2, #1
   29f06:	bf0c      	ite	eq
   29f08:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   29f0c:	f040 0010 	orrne.w	r0, r0, #16
   29f10:	f7fe fd92 	bl	28a38 <CC_HalMaskInterrupt>
   29f14:	e7a7      	b.n	29e66 <ProcessAesDrv+0xa2>
   29f16:	4c64      	ldr	r4, [pc, #400]	; (2a0a8 <ProcessAesDrv+0x2e4>)
   29f18:	4620      	mov	r0, r4
   29f1a:	b005      	add	sp, #20
   29f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f20:	4c62      	ldr	r4, [pc, #392]	; (2a0ac <ProcessAesDrv+0x2e8>)
   29f22:	e787      	b.n	29e34 <ProcessAesDrv+0x70>
   29f24:	4b5d      	ldr	r3, [pc, #372]	; (2a09c <ProcessAesDrv+0x2d8>)
   29f26:	682a      	ldr	r2, [r5, #0]
   29f28:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   29f2c:	686a      	ldr	r2, [r5, #4]
   29f2e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   29f32:	68aa      	ldr	r2, [r5, #8]
   29f34:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   29f38:	68ea      	ldr	r2, [r5, #12]
   29f3a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   29f3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29f40:	6832      	ldr	r2, [r6, #0]
   29f42:	f023 0304 	bic.w	r3, r3, #4
   29f46:	2b03      	cmp	r3, #3
   29f48:	d00d      	beq.n	29f66 <ProcessAesDrv+0x1a2>
   29f4a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29f4c:	f8d8 1000 	ldr.w	r1, [r8]
   29f50:	2b01      	cmp	r3, #1
   29f52:	4b52      	ldr	r3, [pc, #328]	; (2a09c <ProcessAesDrv+0x2d8>)
   29f54:	bf0b      	itete	eq
   29f56:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   29f5a:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   29f5e:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   29f62:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   29f66:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29f68:	2b01      	cmp	r3, #1
   29f6a:	4b4c      	ldr	r3, [pc, #304]	; (2a09c <ProcessAesDrv+0x2d8>)
   29f6c:	bf0b      	itete	eq
   29f6e:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   29f72:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   29f76:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   29f7a:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   29f7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29f80:	f023 0304 	bic.w	r3, r3, #4
   29f84:	2b03      	cmp	r3, #3
   29f86:	d06a      	beq.n	2a05e <ProcessAesDrv+0x29a>
   29f88:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29f8a:	2b01      	cmp	r3, #1
   29f8c:	bf0c      	ite	eq
   29f8e:	2080      	moveq	r0, #128	; 0x80
   29f90:	2020      	movne	r0, #32
   29f92:	f7fe fd57 	bl	28a44 <CC_HalWaitInterrupt>
   29f96:	4604      	mov	r4, r0
   29f98:	2800      	cmp	r0, #0
   29f9a:	f47f af4b 	bne.w	29e34 <ProcessAesDrv+0x70>
   29f9e:	4b3f      	ldr	r3, [pc, #252]	; (2a09c <ProcessAesDrv+0x2d8>)
   29fa0:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   29fa4:	2c00      	cmp	r4, #0
   29fa6:	d1fb      	bne.n	29fa0 <ProcessAesDrv+0x1dc>
   29fa8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29faa:	3b01      	subs	r3, #1
   29fac:	2b06      	cmp	r3, #6
   29fae:	d812      	bhi.n	29fd6 <ProcessAesDrv+0x212>
   29fb0:	e8df f003 	tbb	[pc, r3]
   29fb4:	11049904 	.word	0x11049904
   29fb8:	9911      	.short	0x9911
   29fba:	04          	.byte	0x04
   29fbb:	00          	.byte	0x00
   29fbc:	4b37      	ldr	r3, [pc, #220]	; (2a09c <ProcessAesDrv+0x2d8>)
   29fbe:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   29fc2:	602a      	str	r2, [r5, #0]
   29fc4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   29fc8:	606a      	str	r2, [r5, #4]
   29fca:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   29fce:	60aa      	str	r2, [r5, #8]
   29fd0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   29fd4:	60eb      	str	r3, [r5, #12]
   29fd6:	2301      	movs	r3, #1
   29fd8:	65ab      	str	r3, [r5, #88]	; 0x58
   29fda:	e72b      	b.n	29e34 <ProcessAesDrv+0x70>
   29fdc:	4834      	ldr	r0, [pc, #208]	; (2a0b0 <ProcessAesDrv+0x2ec>)
   29fde:	f7fd fe4b 	bl	27c78 <CC_PalAbort>
   29fe2:	2000      	movs	r0, #0
   29fe4:	f7fe fdf4 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   29fe8:	2800      	cmp	r0, #0
   29fea:	f43f af15 	beq.w	29e18 <ProcessAesDrv+0x54>
   29fee:	4831      	ldr	r0, [pc, #196]	; (2a0b4 <ProcessAesDrv+0x2f0>)
   29ff0:	f7fd fe42 	bl	27c78 <CC_PalAbort>
   29ff4:	e710      	b.n	29e18 <ProcessAesDrv+0x54>
   29ff6:	4830      	ldr	r0, [pc, #192]	; (2a0b8 <ProcessAesDrv+0x2f4>)
   29ff8:	f7fd fe3e 	bl	27c78 <CC_PalAbort>
   29ffc:	4620      	mov	r0, r4
   29ffe:	b005      	add	sp, #20
   2a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a004:	482d      	ldr	r0, [pc, #180]	; (2a0bc <ProcessAesDrv+0x2f8>)
   2a006:	f7fd fe37 	bl	27c78 <CC_PalAbort>
   2a00a:	e736      	b.n	29e7a <ProcessAesDrv+0xb6>
   2a00c:	2304      	movs	r3, #4
   2a00e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2a012:	2120      	movs	r1, #32
   2a014:	f105 0010 	add.w	r0, r5, #16
   2a018:	f7fe fd92 	bl	28b40 <CC_PalMemSetZeroPlat>
   2a01c:	e712      	b.n	29e44 <ProcessAesDrv+0x80>
   2a01e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2a020:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2a022:	f000 f9b5 	bl	2a390 <kmu_validate_slot_and_size>
   2a026:	b998      	cbnz	r0, 2a050 <ProcessAesDrv+0x28c>
   2a028:	4f25      	ldr	r7, [pc, #148]	; (2a0c0 <ProcessAesDrv+0x2fc>)
   2a02a:	4c1c      	ldr	r4, [pc, #112]	; (2a09c <ProcessAesDrv+0x2d8>)
   2a02c:	683b      	ldr	r3, [r7, #0]
   2a02e:	681b      	ldr	r3, [r3, #0]
   2a030:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2a034:	683b      	ldr	r3, [r7, #0]
   2a036:	685b      	ldr	r3, [r3, #4]
   2a038:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2a03c:	683b      	ldr	r3, [r7, #0]
   2a03e:	689b      	ldr	r3, [r3, #8]
   2a040:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2a044:	683b      	ldr	r3, [r7, #0]
   2a046:	68db      	ldr	r3, [r3, #12]
   2a048:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2a04c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2a04e:	b161      	cbz	r1, 2a06a <ProcessAesDrv+0x2a6>
   2a050:	2701      	movs	r7, #1
   2a052:	e6d3      	b.n	29dfc <ProcessAesDrv+0x38>
   2a054:	4c1b      	ldr	r4, [pc, #108]	; (2a0c4 <ProcessAesDrv+0x300>)
   2a056:	e6ed      	b.n	29e34 <ProcessAesDrv+0x70>
   2a058:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   2a05c:	e713      	b.n	29e86 <ProcessAesDrv+0xc2>
   2a05e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2a060:	2b01      	cmp	r3, #1
   2a062:	bf0c      	ite	eq
   2a064:	2040      	moveq	r0, #64	; 0x40
   2a066:	2010      	movne	r0, #16
   2a068:	e793      	b.n	29f92 <ProcessAesDrv+0x1ce>
   2a06a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   2a06c:	9301      	str	r3, [sp, #4]
   2a06e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2a070:	9300      	str	r3, [sp, #0]
   2a072:	f105 0a10 	add.w	sl, r5, #16
   2a076:	f04f 0b10 	mov.w	fp, #16
   2a07a:	f8cd a008 	str.w	sl, [sp, #8]
   2a07e:	f8cd b00c 	str.w	fp, [sp, #12]
   2a082:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   2a086:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2a088:	f000 f9a4 	bl	2a3d4 <kmu_derive_cmac>
   2a08c:	2800      	cmp	r0, #0
   2a08e:	d13a      	bne.n	2a106 <ProcessAesDrv+0x342>
   2a090:	2300      	movs	r3, #0
   2a092:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2a096:	e7db      	b.n	2a050 <ProcessAesDrv+0x28c>
   2a098:	200009c4 	.word	0x200009c4
   2a09c:	5002b000 	.word	0x5002b000
   2a0a0:	00f10001 	.word	0x00f10001
   2a0a4:	00f10005 	.word	0x00f10005
   2a0a8:	00f1000b 	.word	0x00f1000b
   2a0ac:	00f10003 	.word	0x00f10003
   2a0b0:	0002fea8 	.word	0x0002fea8
   2a0b4:	0002fec0 	.word	0x0002fec0
   2a0b8:	0002ff00 	.word	0x0002ff00
   2a0bc:	0002fee0 	.word	0x0002fee0
   2a0c0:	200009b4 	.word	0x200009b4
   2a0c4:	00f10002 	.word	0x00f10002
   2a0c8:	4b19      	ldr	r3, [pc, #100]	; (2a130 <ProcessAesDrv+0x36c>)
   2a0ca:	682a      	ldr	r2, [r5, #0]
   2a0cc:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2a0d0:	686a      	ldr	r2, [r5, #4]
   2a0d2:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2a0d6:	68aa      	ldr	r2, [r5, #8]
   2a0d8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2a0dc:	68ea      	ldr	r2, [r5, #12]
   2a0de:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2a0e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a0e4:	e72c      	b.n	29f40 <ProcessAesDrv+0x17c>
   2a0e6:	4b12      	ldr	r3, [pc, #72]	; (2a130 <ProcessAesDrv+0x36c>)
   2a0e8:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   2a0ec:	602a      	str	r2, [r5, #0]
   2a0ee:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2a0f2:	606a      	str	r2, [r5, #4]
   2a0f4:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2a0f8:	60aa      	str	r2, [r5, #8]
   2a0fa:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2a0fe:	60eb      	str	r3, [r5, #12]
   2a100:	e769      	b.n	29fd6 <ProcessAesDrv+0x212>
   2a102:	4c0c      	ldr	r4, [pc, #48]	; (2a134 <ProcessAesDrv+0x370>)
   2a104:	e696      	b.n	29e34 <ProcessAesDrv+0x70>
   2a106:	683b      	ldr	r3, [r7, #0]
   2a108:	681b      	ldr	r3, [r3, #0]
   2a10a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2a10e:	683b      	ldr	r3, [r7, #0]
   2a110:	685b      	ldr	r3, [r3, #4]
   2a112:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   2a116:	683b      	ldr	r3, [r7, #0]
   2a118:	689b      	ldr	r3, [r3, #8]
   2a11a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2a11e:	683b      	ldr	r3, [r7, #0]
   2a120:	68db      	ldr	r3, [r3, #12]
   2a122:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   2a126:	4659      	mov	r1, fp
   2a128:	4650      	mov	r0, sl
   2a12a:	f7fe fd09 	bl	28b40 <CC_PalMemSetZeroPlat>
   2a12e:	e7af      	b.n	2a090 <ProcessAesDrv+0x2cc>
   2a130:	5002b000 	.word	0x5002b000
   2a134:	00f10004 	.word	0x00f10004

0002a138 <FinishAesDrv>:
   2a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a13c:	b301      	cbz	r1, 2a180 <FinishAesDrv+0x48>
   2a13e:	b1fa      	cbz	r2, 2a180 <FinishAesDrv+0x48>
   2a140:	4604      	mov	r4, r0
   2a142:	2800      	cmp	r0, #0
   2a144:	d07c      	beq.n	2a240 <FinishAesDrv+0x108>
   2a146:	461d      	mov	r5, r3
   2a148:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2a14a:	2b07      	cmp	r3, #7
   2a14c:	460e      	mov	r6, r1
   2a14e:	d01b      	beq.n	2a188 <FinishAesDrv+0x50>
   2a150:	b95d      	cbnz	r5, 2a16a <FinishAesDrv+0x32>
   2a152:	2b03      	cmp	r3, #3
   2a154:	d110      	bne.n	2a178 <FinishAesDrv+0x40>
   2a156:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2a158:	b973      	cbnz	r3, 2a178 <FinishAesDrv+0x40>
   2a15a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2a15e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2a162:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2a166:	600b      	str	r3, [r1, #0]
   2a168:	2510      	movs	r5, #16
   2a16a:	462b      	mov	r3, r5
   2a16c:	4631      	mov	r1, r6
   2a16e:	4620      	mov	r0, r4
   2a170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2a174:	f7ff be26 	b.w	29dc4 <ProcessAesDrv>
   2a178:	462f      	mov	r7, r5
   2a17a:	4638      	mov	r0, r7
   2a17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a180:	4f77      	ldr	r7, [pc, #476]	; (2a360 <FinishAesDrv+0x228>)
   2a182:	4638      	mov	r0, r7
   2a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a188:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2a18a:	2b00      	cmp	r3, #0
   2a18c:	d15b      	bne.n	2a246 <FinishAesDrv+0x10e>
   2a18e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2a192:	d25d      	bcs.n	2a250 <FinishAesDrv+0x118>
   2a194:	b915      	cbnz	r5, 2a19c <FinishAesDrv+0x64>
   2a196:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2a198:	2b00      	cmp	r3, #0
   2a19a:	d159      	bne.n	2a250 <FinishAesDrv+0x118>
   2a19c:	4871      	ldr	r0, [pc, #452]	; (2a364 <FinishAesDrv+0x22c>)
   2a19e:	f04f 31ff 	mov.w	r1, #4294967295
   2a1a2:	f7fe fce5 	bl	28b70 <CC_PalMutexLock>
   2a1a6:	2800      	cmp	r0, #0
   2a1a8:	f040 80b8 	bne.w	2a31c <FinishAesDrv+0x1e4>
   2a1ac:	2000      	movs	r0, #0
   2a1ae:	f7fe fd0f 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   2a1b2:	2800      	cmp	r0, #0
   2a1b4:	f040 80ae 	bne.w	2a314 <FinishAesDrv+0x1dc>
   2a1b8:	4a6b      	ldr	r2, [pc, #428]	; (2a368 <FinishAesDrv+0x230>)
   2a1ba:	2301      	movs	r3, #1
   2a1bc:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2a1c0:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2a1c4:	2b00      	cmp	r3, #0
   2a1c6:	d1fb      	bne.n	2a1c0 <FinishAesDrv+0x88>
   2a1c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a1ca:	2b03      	cmp	r3, #3
   2a1cc:	dd20      	ble.n	2a210 <FinishAesDrv+0xd8>
   2a1ce:	3b06      	subs	r3, #6
   2a1d0:	2b01      	cmp	r3, #1
   2a1d2:	d81f      	bhi.n	2a214 <FinishAesDrv+0xdc>
   2a1d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2a1d6:	2b01      	cmp	r3, #1
   2a1d8:	d83c      	bhi.n	2a254 <FinishAesDrv+0x11c>
   2a1da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a1dc:	2b01      	cmp	r3, #1
   2a1de:	f200 80a5 	bhi.w	2a32c <FinishAesDrv+0x1f4>
   2a1e2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2a1e4:	2b01      	cmp	r3, #1
   2a1e6:	f200 80a3 	bhi.w	2a330 <FinishAesDrv+0x1f8>
   2a1ea:	4620      	mov	r0, r4
   2a1ec:	f7ff fd60 	bl	29cb0 <InitAes.part.0>
   2a1f0:	4607      	mov	r7, r0
   2a1f2:	b980      	cbnz	r0, 2a216 <FinishAesDrv+0xde>
   2a1f4:	4620      	mov	r0, r4
   2a1f6:	f7ff fd09 	bl	29c0c <LoadAesKey>
   2a1fa:	4607      	mov	r7, r0
   2a1fc:	b958      	cbnz	r0, 2a216 <FinishAesDrv+0xde>
   2a1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a200:	2b07      	cmp	r3, #7
   2a202:	d807      	bhi.n	2a214 <FinishAesDrv+0xdc>
   2a204:	e8df f003 	tbb	[pc, r3]
   2a208:	285c2835 	.word	0x285c2835
   2a20c:	285c0606 	.word	0x285c0606
   2a210:	2b00      	cmp	r3, #0
   2a212:	dadf      	bge.n	2a1d4 <FinishAesDrv+0x9c>
   2a214:	4f55      	ldr	r7, [pc, #340]	; (2a36c <FinishAesDrv+0x234>)
   2a216:	4a54      	ldr	r2, [pc, #336]	; (2a368 <FinishAesDrv+0x230>)
   2a218:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2a21c:	2b00      	cmp	r3, #0
   2a21e:	d1fb      	bne.n	2a218 <FinishAesDrv+0xe0>
   2a220:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2a224:	2001      	movs	r0, #1
   2a226:	f7fe fcd3 	bl	28bd0 <CC_PalPowerSaveModeSelect>
   2a22a:	2800      	cmp	r0, #0
   2a22c:	d17a      	bne.n	2a324 <FinishAesDrv+0x1ec>
   2a22e:	484d      	ldr	r0, [pc, #308]	; (2a364 <FinishAesDrv+0x22c>)
   2a230:	f7fe fca6 	bl	28b80 <CC_PalMutexUnlock>
   2a234:	2800      	cmp	r0, #0
   2a236:	d0a0      	beq.n	2a17a <FinishAesDrv+0x42>
   2a238:	484d      	ldr	r0, [pc, #308]	; (2a370 <FinishAesDrv+0x238>)
   2a23a:	f7fd fd1d 	bl	27c78 <CC_PalAbort>
   2a23e:	e79c      	b.n	2a17a <FinishAesDrv+0x42>
   2a240:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2a244:	e799      	b.n	2a17a <FinishAesDrv+0x42>
   2a246:	2b01      	cmp	r3, #1
   2a248:	d1a4      	bne.n	2a194 <FinishAesDrv+0x5c>
   2a24a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2a24e:	d3a1      	bcc.n	2a194 <FinishAesDrv+0x5c>
   2a250:	4f48      	ldr	r7, [pc, #288]	; (2a374 <FinishAesDrv+0x23c>)
   2a252:	e792      	b.n	2a17a <FinishAesDrv+0x42>
   2a254:	4f48      	ldr	r7, [pc, #288]	; (2a378 <FinishAesDrv+0x240>)
   2a256:	e7de      	b.n	2a216 <FinishAesDrv+0xde>
   2a258:	4b43      	ldr	r3, [pc, #268]	; (2a368 <FinishAesDrv+0x230>)
   2a25a:	6822      	ldr	r2, [r4, #0]
   2a25c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2a260:	6862      	ldr	r2, [r4, #4]
   2a262:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2a266:	68a2      	ldr	r2, [r4, #8]
   2a268:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2a26c:	68e2      	ldr	r2, [r4, #12]
   2a26e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2a272:	4b3d      	ldr	r3, [pc, #244]	; (2a368 <FinishAesDrv+0x230>)
   2a274:	2201      	movs	r2, #1
   2a276:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   2a27a:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   2a27e:	2d00      	cmp	r5, #0
   2a280:	d158      	bne.n	2a334 <FinishAesDrv+0x1fc>
   2a282:	6da1      	ldr	r1, [r4, #88]	; 0x58
   2a284:	b909      	cbnz	r1, 2a28a <FinishAesDrv+0x152>
   2a286:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   2a28a:	4b37      	ldr	r3, [pc, #220]	; (2a368 <FinishAesDrv+0x230>)
   2a28c:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   2a290:	2f00      	cmp	r7, #0
   2a292:	d1fb      	bne.n	2a28c <FinishAesDrv+0x154>
   2a294:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2a296:	3b01      	subs	r3, #1
   2a298:	2b06      	cmp	r3, #6
   2a29a:	d8bc      	bhi.n	2a216 <FinishAesDrv+0xde>
   2a29c:	a201      	add	r2, pc, #4	; (adr r2, 2a2a4 <FinishAesDrv+0x16c>)
   2a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2a2a2:	bf00      	nop
   2a2a4:	0002a2dd 	.word	0x0002a2dd
   2a2a8:	0002a2f9 	.word	0x0002a2f9
   2a2ac:	0002a2dd 	.word	0x0002a2dd
   2a2b0:	0002a217 	.word	0x0002a217
   2a2b4:	0002a217 	.word	0x0002a217
   2a2b8:	0002a2f9 	.word	0x0002a2f9
   2a2bc:	0002a2dd 	.word	0x0002a2dd
   2a2c0:	4b29      	ldr	r3, [pc, #164]	; (2a368 <FinishAesDrv+0x230>)
   2a2c2:	6822      	ldr	r2, [r4, #0]
   2a2c4:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2a2c8:	6862      	ldr	r2, [r4, #4]
   2a2ca:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   2a2ce:	68a2      	ldr	r2, [r4, #8]
   2a2d0:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2a2d4:	68e2      	ldr	r2, [r4, #12]
   2a2d6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   2a2da:	e7ca      	b.n	2a272 <FinishAesDrv+0x13a>
   2a2dc:	4b22      	ldr	r3, [pc, #136]	; (2a368 <FinishAesDrv+0x230>)
   2a2de:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2a2e2:	6022      	str	r2, [r4, #0]
   2a2e4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   2a2e8:	6062      	str	r2, [r4, #4]
   2a2ea:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2a2ee:	60a2      	str	r2, [r4, #8]
   2a2f0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   2a2f4:	60e3      	str	r3, [r4, #12]
   2a2f6:	e78e      	b.n	2a216 <FinishAesDrv+0xde>
   2a2f8:	4b1b      	ldr	r3, [pc, #108]	; (2a368 <FinishAesDrv+0x230>)
   2a2fa:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   2a2fe:	6022      	str	r2, [r4, #0]
   2a300:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   2a304:	6062      	str	r2, [r4, #4]
   2a306:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2a30a:	60a2      	str	r2, [r4, #8]
   2a30c:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2a310:	60e3      	str	r3, [r4, #12]
   2a312:	e780      	b.n	2a216 <FinishAesDrv+0xde>
   2a314:	4819      	ldr	r0, [pc, #100]	; (2a37c <FinishAesDrv+0x244>)
   2a316:	f7fd fcaf 	bl	27c78 <CC_PalAbort>
   2a31a:	e74d      	b.n	2a1b8 <FinishAesDrv+0x80>
   2a31c:	4818      	ldr	r0, [pc, #96]	; (2a380 <FinishAesDrv+0x248>)
   2a31e:	f7fd fcab 	bl	27c78 <CC_PalAbort>
   2a322:	e743      	b.n	2a1ac <FinishAesDrv+0x74>
   2a324:	4817      	ldr	r0, [pc, #92]	; (2a384 <FinishAesDrv+0x24c>)
   2a326:	f7fd fca7 	bl	27c78 <CC_PalAbort>
   2a32a:	e780      	b.n	2a22e <FinishAesDrv+0xf6>
   2a32c:	4f16      	ldr	r7, [pc, #88]	; (2a388 <FinishAesDrv+0x250>)
   2a32e:	e772      	b.n	2a216 <FinishAesDrv+0xde>
   2a330:	4f16      	ldr	r7, [pc, #88]	; (2a38c <FinishAesDrv+0x254>)
   2a332:	e770      	b.n	2a216 <FinishAesDrv+0xde>
   2a334:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   2a336:	6832      	ldr	r2, [r6, #0]
   2a338:	2901      	cmp	r1, #1
   2a33a:	d00a      	beq.n	2a352 <FinishAesDrv+0x21a>
   2a33c:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   2a340:	2010      	movs	r0, #16
   2a342:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2a346:	f7fe fb7d 	bl	28a44 <CC_HalWaitInterrupt>
   2a34a:	4607      	mov	r7, r0
   2a34c:	2800      	cmp	r0, #0
   2a34e:	d09c      	beq.n	2a28a <FinishAesDrv+0x152>
   2a350:	e761      	b.n	2a216 <FinishAesDrv+0xde>
   2a352:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2a356:	2040      	movs	r0, #64	; 0x40
   2a358:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   2a35c:	e7f3      	b.n	2a346 <FinishAesDrv+0x20e>
   2a35e:	bf00      	nop
   2a360:	00f1000b 	.word	0x00f1000b
   2a364:	200009c4 	.word	0x200009c4
   2a368:	5002b000 	.word	0x5002b000
   2a36c:	00f10001 	.word	0x00f10001
   2a370:	0002ff00 	.word	0x0002ff00
   2a374:	00f10005 	.word	0x00f10005
   2a378:	00f10002 	.word	0x00f10002
   2a37c:	0002fec0 	.word	0x0002fec0
   2a380:	0002fea8 	.word	0x0002fea8
   2a384:	0002fee0 	.word	0x0002fee0
   2a388:	00f10003 	.word	0x00f10003
   2a38c:	00f10004 	.word	0x00f10004

0002a390 <kmu_validate_slot_and_size>:
   2a390:	b921      	cbnz	r1, 2a39c <kmu_validate_slot_and_size+0xc>
   2a392:	4b03      	ldr	r3, [pc, #12]	; (2a3a0 <kmu_validate_slot_and_size+0x10>)
   2a394:	2800      	cmp	r0, #0
   2a396:	bf18      	it	ne
   2a398:	4618      	movne	r0, r3
   2a39a:	4770      	bx	lr
   2a39c:	4801      	ldr	r0, [pc, #4]	; (2a3a4 <kmu_validate_slot_and_size+0x14>)
   2a39e:	4770      	bx	lr
   2a3a0:	00f70001 	.word	0x00f70001
   2a3a4:	00f70003 	.word	0x00f70003

0002a3a8 <kmu_validate_kdr_slot_and_size>:
   2a3a8:	b921      	cbnz	r1, 2a3b4 <kmu_validate_kdr_slot_and_size+0xc>
   2a3aa:	4b03      	ldr	r3, [pc, #12]	; (2a3b8 <kmu_validate_kdr_slot_and_size+0x10>)
   2a3ac:	2800      	cmp	r0, #0
   2a3ae:	bf18      	it	ne
   2a3b0:	4618      	movne	r0, r3
   2a3b2:	4770      	bx	lr
   2a3b4:	4801      	ldr	r0, [pc, #4]	; (2a3bc <kmu_validate_kdr_slot_and_size+0x14>)
   2a3b6:	4770      	bx	lr
   2a3b8:	00f70001 	.word	0x00f70001
   2a3bc:	00f70003 	.word	0x00f70003

0002a3c0 <kmu_use_kdr_key>:
   2a3c0:	4b03      	ldr	r3, [pc, #12]	; (2a3d0 <kmu_use_kdr_key+0x10>)
   2a3c2:	2000      	movs	r0, #0
   2a3c4:	2201      	movs	r2, #1
   2a3c6:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   2a3ca:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   2a3ce:	4770      	bx	lr
   2a3d0:	5002b000 	.word	0x5002b000

0002a3d4 <kmu_derive_cmac>:
   2a3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a3d8:	b0cc      	sub	sp, #304	; 0x130
   2a3da:	2400      	movs	r4, #0
   2a3dc:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   2a3de:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   2a3e2:	4682      	mov	sl, r0
   2a3e4:	4689      	mov	r9, r1
   2a3e6:	4616      	mov	r6, r2
   2a3e8:	4621      	mov	r1, r4
   2a3ea:	2274      	movs	r2, #116	; 0x74
   2a3ec:	a80e      	add	r0, sp, #56	; 0x38
   2a3ee:	461f      	mov	r7, r3
   2a3f0:	f001 fb8d 	bl	2bb0e <memset>
   2a3f4:	2280      	movs	r2, #128	; 0x80
   2a3f6:	4621      	mov	r1, r4
   2a3f8:	a82c      	add	r0, sp, #176	; 0xb0
   2a3fa:	942b      	str	r4, [sp, #172]	; 0xac
   2a3fc:	f001 fb87 	bl	2bb0e <memset>
   2a400:	2384      	movs	r3, #132	; 0x84
   2a402:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2a406:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2a40a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2a40e:	9305      	str	r3, [sp, #20]
   2a410:	d863      	bhi.n	2a4da <kmu_derive_cmac+0x106>
   2a412:	f7ff fcbf 	bl	29d94 <write_invalid_key>
   2a416:	ab05      	add	r3, sp, #20
   2a418:	4630      	mov	r0, r6
   2a41a:	ae2b      	add	r6, sp, #172	; 0xac
   2a41c:	9301      	str	r3, [sp, #4]
   2a41e:	9502      	str	r5, [sp, #8]
   2a420:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   2a424:	4639      	mov	r1, r7
   2a426:	9600      	str	r6, [sp, #0]
   2a428:	f000 f862 	bl	2a4f0 <UtilCmacBuildDataForDerivation>
   2a42c:	2800      	cmp	r0, #0
   2a42e:	d14f      	bne.n	2a4d0 <kmu_derive_cmac+0xfc>
   2a430:	2303      	movs	r3, #3
   2a432:	f88d 3013 	strb.w	r3, [sp, #19]
   2a436:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2a43a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2a43e:	2307      	movs	r3, #7
   2a440:	2200      	movs	r2, #0
   2a442:	901c      	str	r0, [sp, #112]	; 0x70
   2a444:	2110      	movs	r1, #16
   2a446:	a80e      	add	r0, sp, #56	; 0x38
   2a448:	931b      	str	r3, [sp, #108]	; 0x6c
   2a44a:	2401      	movs	r4, #1
   2a44c:	2301      	movs	r3, #1
   2a44e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2a452:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   2a456:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   2a45a:	9426      	str	r4, [sp, #152]	; 0x98
   2a45c:	f10d 0920 	add.w	r9, sp, #32
   2a460:	f7fe fb6e 	bl	28b40 <CC_PalMemSetZeroPlat>
   2a464:	2210      	movs	r2, #16
   2a466:	9200      	str	r2, [sp, #0]
   2a468:	9905      	ldr	r1, [sp, #20]
   2a46a:	f8cd 9004 	str.w	r9, [sp, #4]
   2a46e:	ab0a      	add	r3, sp, #40	; 0x28
   2a470:	4630      	mov	r0, r6
   2a472:	aa06      	add	r2, sp, #24
   2a474:	f7ff fa1e 	bl	298b4 <SetDataBuffersInfo>
   2a478:	4607      	mov	r7, r0
   2a47a:	b170      	cbz	r0, 2a49a <kmu_derive_cmac+0xc6>
   2a47c:	e01d      	b.n	2a4ba <kmu_derive_cmac+0xe6>
   2a47e:	a90e      	add	r1, sp, #56	; 0x38
   2a480:	eb08 0007 	add.w	r0, r8, r7
   2a484:	f7fe fb58 	bl	28b38 <CC_PalMemCopyPlat>
   2a488:	2110      	movs	r1, #16
   2a48a:	a80e      	add	r0, sp, #56	; 0x38
   2a48c:	f7fe fb58 	bl	28b40 <CC_PalMemSetZeroPlat>
   2a490:	3401      	adds	r4, #1
   2a492:	1bad      	subs	r5, r5, r6
   2a494:	4437      	add	r7, r6
   2a496:	b2e4      	uxtb	r4, r4
   2a498:	d024      	beq.n	2a4e4 <kmu_derive_cmac+0x110>
   2a49a:	2d10      	cmp	r5, #16
   2a49c:	464a      	mov	r2, r9
   2a49e:	9b05      	ldr	r3, [sp, #20]
   2a4a0:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2a4a4:	a906      	add	r1, sp, #24
   2a4a6:	a80e      	add	r0, sp, #56	; 0x38
   2a4a8:	462e      	mov	r6, r5
   2a4aa:	bf28      	it	cs
   2a4ac:	2610      	movcs	r6, #16
   2a4ae:	f7ff fe43 	bl	2a138 <FinishAesDrv>
   2a4b2:	4632      	mov	r2, r6
   2a4b4:	2800      	cmp	r0, #0
   2a4b6:	d0e2      	beq.n	2a47e <kmu_derive_cmac+0xaa>
   2a4b8:	4607      	mov	r7, r0
   2a4ba:	a80e      	add	r0, sp, #56	; 0x38
   2a4bc:	2274      	movs	r2, #116	; 0x74
   2a4be:	2100      	movs	r1, #0
   2a4c0:	f7fe fb3c 	bl	28b3c <CC_PalMemSetPlat>
   2a4c4:	f7ff fc66 	bl	29d94 <write_invalid_key>
   2a4c8:	4638      	mov	r0, r7
   2a4ca:	b04c      	add	sp, #304	; 0x130
   2a4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a4d0:	4f05      	ldr	r7, [pc, #20]	; (2a4e8 <kmu_derive_cmac+0x114>)
   2a4d2:	4638      	mov	r0, r7
   2a4d4:	b04c      	add	sp, #304	; 0x130
   2a4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a4da:	4f04      	ldr	r7, [pc, #16]	; (2a4ec <kmu_derive_cmac+0x118>)
   2a4dc:	4638      	mov	r0, r7
   2a4de:	b04c      	add	sp, #304	; 0x130
   2a4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a4e4:	462f      	mov	r7, r5
   2a4e6:	e7e8      	b.n	2a4ba <kmu_derive_cmac+0xe6>
   2a4e8:	00f1000e 	.word	0x00f1000e
   2a4ec:	00f1000f 	.word	0x00f1000f

0002a4f0 <UtilCmacBuildDataForDerivation>:
   2a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a4f4:	b082      	sub	sp, #8
   2a4f6:	461e      	mov	r6, r3
   2a4f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2a4fa:	2300      	movs	r3, #0
   2a4fc:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   2a500:	9301      	str	r3, [sp, #4]
   2a502:	d83e      	bhi.n	2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a504:	00e4      	lsls	r4, r4, #3
   2a506:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   2a50a:	4617      	mov	r7, r2
   2a50c:	f101 32ff 	add.w	r2, r1, #4294967295
   2a510:	bf34      	ite	cc
   2a512:	2303      	movcc	r3, #3
   2a514:	2304      	movcs	r3, #4
   2a516:	2a3f      	cmp	r2, #63	; 0x3f
   2a518:	460d      	mov	r5, r1
   2a51a:	9300      	str	r3, [sp, #0]
   2a51c:	d831      	bhi.n	2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a51e:	b380      	cbz	r0, 2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a520:	b116      	cbz	r6, 2a528 <UtilCmacBuildDataForDerivation+0x38>
   2a522:	b377      	cbz	r7, 2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a524:	2e40      	cmp	r6, #64	; 0x40
   2a526:	d82c      	bhi.n	2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a528:	9a08      	ldr	r2, [sp, #32]
   2a52a:	b352      	cbz	r2, 2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a52e:	6811      	ldr	r1, [r2, #0]
   2a530:	b339      	cbz	r1, 2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a532:	19aa      	adds	r2, r5, r6
   2a534:	4413      	add	r3, r2
   2a536:	4299      	cmp	r1, r3
   2a538:	d323      	bcc.n	2a582 <UtilCmacBuildDataForDerivation+0x92>
   2a53a:	9b08      	ldr	r3, [sp, #32]
   2a53c:	4601      	mov	r1, r0
   2a53e:	462a      	mov	r2, r5
   2a540:	1c58      	adds	r0, r3, #1
   2a542:	f7fe faf9 	bl	28b38 <CC_PalMemCopyPlat>
   2a546:	9b08      	ldr	r3, [sp, #32]
   2a548:	f105 0802 	add.w	r8, r5, #2
   2a54c:	441d      	add	r5, r3
   2a54e:	2300      	movs	r3, #0
   2a550:	706b      	strb	r3, [r5, #1]
   2a552:	bb0e      	cbnz	r6, 2a598 <UtilCmacBuildDataForDerivation+0xa8>
   2a554:	9b08      	ldr	r3, [sp, #32]
   2a556:	9400      	str	r4, [sp, #0]
   2a558:	2cff      	cmp	r4, #255	; 0xff
   2a55a:	eb03 0008 	add.w	r0, r3, r8
   2a55e:	d914      	bls.n	2a58a <UtilCmacBuildDataForDerivation+0x9a>
   2a560:	0223      	lsls	r3, r4, #8
   2a562:	b29b      	uxth	r3, r3
   2a564:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   2a568:	2202      	movs	r2, #2
   2a56a:	a901      	add	r1, sp, #4
   2a56c:	9401      	str	r4, [sp, #4]
   2a56e:	f7fe fae3 	bl	28b38 <CC_PalMemCopyPlat>
   2a572:	f108 0302 	add.w	r3, r8, #2
   2a576:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a578:	2000      	movs	r0, #0
   2a57a:	6013      	str	r3, [r2, #0]
   2a57c:	b002      	add	sp, #8
   2a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a582:	480a      	ldr	r0, [pc, #40]	; (2a5ac <UtilCmacBuildDataForDerivation+0xbc>)
   2a584:	b002      	add	sp, #8
   2a586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a58a:	2201      	movs	r2, #1
   2a58c:	4669      	mov	r1, sp
   2a58e:	f7fe fad3 	bl	28b38 <CC_PalMemCopyPlat>
   2a592:	f108 0301 	add.w	r3, r8, #1
   2a596:	e7ee      	b.n	2a576 <UtilCmacBuildDataForDerivation+0x86>
   2a598:	9b08      	ldr	r3, [sp, #32]
   2a59a:	4632      	mov	r2, r6
   2a59c:	eb03 0008 	add.w	r0, r3, r8
   2a5a0:	4639      	mov	r1, r7
   2a5a2:	f7fe fac9 	bl	28b38 <CC_PalMemCopyPlat>
   2a5a6:	44b0      	add	r8, r6
   2a5a8:	e7d4      	b.n	2a554 <UtilCmacBuildDataForDerivation+0x64>
   2a5aa:	bf00      	nop
   2a5ac:	80000006 	.word	0x80000006

0002a5b0 <CC_PalDataBufferAttrGet>:
   2a5b0:	2000      	movs	r0, #0
   2a5b2:	7018      	strb	r0, [r3, #0]
   2a5b4:	4770      	bx	lr
   2a5b6:	bf00      	nop

0002a5b8 <led_write_cb>:
}
   2a5b8:	4770      	bx	lr

0002a5ba <bt_joybus_conn>:
}
   2a5ba:	6800      	ldr	r0, [r0, #0]
   2a5bc:	4770      	bx	lr

0002a5be <input_rsp_start_periodic_read>:
{
   2a5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!joy || !func || !interval) {
   2a5c0:	4606      	mov	r6, r0
   2a5c2:	b338      	cbz	r0, 2a614 <input_rsp_start_periodic_read+0x56>
   2a5c4:	b332      	cbz	r2, 2a614 <input_rsp_start_periodic_read+0x56>
   2a5c6:	b329      	cbz	r1, 2a614 <input_rsp_start_periodic_read+0x56>
	if (bt_joy_input_rsp_notify_supported(joy)) {
   2a5c8:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
   2a5cc:	bb2c      	cbnz	r4, 2a61a <input_rsp_start_periodic_read+0x5c>
	joy->input_rsp_read_cb = func;
   2a5ce:	67c2      	str	r2, [r0, #124]	; 0x7c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a5d0:	f100 0370 	add.w	r3, r0, #112	; 0x70
   2a5d4:	f3bf 8f5b 	dmb	ish
   2a5d8:	e853 2f00 	ldrex	r2, [r3]
   2a5dc:	e843 1000 	strex	r0, r1, [r3]
   2a5e0:	2800      	cmp	r0, #0
   2a5e2:	d1f9      	bne.n	2a5d8 <input_rsp_start_periodic_read+0x1a>
   2a5e4:	f3bf 8f5b 	dmb	ish
	k_work_schedule(&joy->input_rsp_periodic_read.read_work, K_MSEC(interval));
   2a5e8:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
   2a5ec:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2a5f0:	f240 30e7 	movw	r0, #999	; 0x3e7
   2a5f4:	4621      	mov	r1, r4
   2a5f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a5fa:	2300      	movs	r3, #0
   2a5fc:	fbc5 0107 	smlal	r0, r1, r5, r7
   2a600:	f7d5 fd7e 	bl	100 <__aeabi_uldivmod>
   2a604:	4602      	mov	r2, r0
   2a606:	460b      	mov	r3, r1
   2a608:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2a60c:	f7fa ffa6 	bl	2555c <k_work_schedule>
	return 0;
   2a610:	4620      	mov	r0, r4
}
   2a612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   2a614:	f06f 0015 	mvn.w	r0, #21
   2a618:	e7fb      	b.n	2a612 <input_rsp_start_periodic_read+0x54>
		return -ENOTSUP;
   2a61a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a61e:	e7f8      	b.n	2a612 <input_rsp_start_periodic_read+0x54>

0002a620 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2a620:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2a622:	2364      	movs	r3, #100	; 0x64
{
   2a624:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2a626:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2a628:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2a62a:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   2a62c:	b969      	cbnz	r1, 2a64a <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   2a62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2a630:	429a      	cmp	r2, r3
   2a632:	fbb2 f4f3 	udiv	r4, r2, r3
   2a636:	d20c      	bcs.n	2a652 <u8_to_dec+0x32>
   2a638:	2b01      	cmp	r3, #1
   2a63a:	d00a      	beq.n	2a652 <u8_to_dec+0x32>
   2a63c:	b948      	cbnz	r0, 2a652 <u8_to_dec+0x32>
		value -= digit * divisor;
   2a63e:	fb03 2214 	mls	r2, r3, r4, r2
   2a642:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a644:	240a      	movs	r4, #10
   2a646:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   2a64a:	3e01      	subs	r6, #1
   2a64c:	d1f0      	bne.n	2a630 <u8_to_dec+0x10>
		*buf = '\0';
   2a64e:	702e      	strb	r6, [r5, #0]
	return num_digits;
   2a650:	e7ed      	b.n	2a62e <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   2a652:	3430      	adds	r4, #48	; 0x30
   2a654:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2a658:	fbb2 f4f3 	udiv	r4, r2, r3
   2a65c:	3901      	subs	r1, #1
   2a65e:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   2a662:	3001      	adds	r0, #1
		divisor /= 10;
   2a664:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2a668:	b2c9      	uxtb	r1, r1
			num_digits++;
   2a66a:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   2a66c:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2a66e:	b2db      	uxtb	r3, r3
   2a670:	e7dc      	b.n	2a62c <u8_to_dec+0xc>

0002a672 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2a672:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a676:	b2db      	uxtb	r3, r3
   2a678:	2b09      	cmp	r3, #9
   2a67a:	d802      	bhi.n	2a682 <char2hex+0x10>
		*x = c - '0';
   2a67c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2a67e:	2000      	movs	r0, #0
   2a680:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2a682:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2a686:	2b05      	cmp	r3, #5
   2a688:	d802      	bhi.n	2a690 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2a68a:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2a68c:	b2c3      	uxtb	r3, r0
   2a68e:	e7f5      	b.n	2a67c <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   2a690:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2a694:	2b05      	cmp	r3, #5
   2a696:	d801      	bhi.n	2a69c <char2hex+0x2a>
		*x = c - 'A' + 10;
   2a698:	3837      	subs	r0, #55	; 0x37
   2a69a:	e7f7      	b.n	2a68c <char2hex+0x1a>
		return -EINVAL;
   2a69c:	f06f 0015 	mvn.w	r0, #21
}
   2a6a0:	4770      	bx	lr

0002a6a2 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2a6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a6a4:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2a6a6:	f001 0001 	and.w	r0, r1, #1
   2a6aa:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   2a6ae:	429e      	cmp	r6, r3
   2a6b0:	ea4f 0751 	mov.w	r7, r1, lsr #1
   2a6b4:	d903      	bls.n	2a6be <hex2bin+0x1c>
		return 0;
   2a6b6:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2a6b8:	4630      	mov	r0, r6
   2a6ba:	b003      	add	sp, #12
   2a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2a6be:	b158      	cbz	r0, 2a6d8 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2a6c0:	7828      	ldrb	r0, [r5, #0]
   2a6c2:	f10d 0107 	add.w	r1, sp, #7
   2a6c6:	f7ff ffd4 	bl	2a672 <char2hex>
   2a6ca:	2800      	cmp	r0, #0
   2a6cc:	dbf3      	blt.n	2a6b6 <hex2bin+0x14>
		buf[0] = dec;
   2a6ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a6d2:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2a6d6:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a6d8:	3501      	adds	r5, #1
   2a6da:	4417      	add	r7, r2
   2a6dc:	42ba      	cmp	r2, r7
   2a6de:	d0eb      	beq.n	2a6b8 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2a6e0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2a6e4:	f10d 0107 	add.w	r1, sp, #7
   2a6e8:	f7ff ffc3 	bl	2a672 <char2hex>
   2a6ec:	2800      	cmp	r0, #0
   2a6ee:	dbe2      	blt.n	2a6b6 <hex2bin+0x14>
		buf[i] = dec << 4;
   2a6f0:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2a6f4:	0124      	lsls	r4, r4, #4
   2a6f6:	b2e4      	uxtb	r4, r4
   2a6f8:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2a6fa:	f815 0b02 	ldrb.w	r0, [r5], #2
   2a6fe:	f7ff ffb8 	bl	2a672 <char2hex>
   2a702:	2800      	cmp	r0, #0
   2a704:	dbd7      	blt.n	2a6b6 <hex2bin+0x14>
		buf[i] += dec;
   2a706:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a70a:	441c      	add	r4, r3
   2a70c:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2a710:	e7e4      	b.n	2a6dc <hex2bin+0x3a>

0002a712 <arch_printk_char_out>:
}
   2a712:	2000      	movs	r0, #0
   2a714:	4770      	bx	lr

0002a716 <str_out>:
{
   2a716:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a718:	688a      	ldr	r2, [r1, #8]
   2a71a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2a71c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2a71e:	b114      	cbz	r4, 2a726 <str_out+0x10>
   2a720:	684b      	ldr	r3, [r1, #4]
   2a722:	4293      	cmp	r3, r2
   2a724:	dc01      	bgt.n	2a72a <str_out+0x14>
		ctx->count++;
   2a726:	608d      	str	r5, [r1, #8]
}
   2a728:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2a72a:	3b01      	subs	r3, #1
   2a72c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2a72e:	bf08      	it	eq
   2a730:	2200      	moveq	r2, #0
   2a732:	608d      	str	r5, [r1, #8]
   2a734:	bf0c      	ite	eq
   2a736:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2a738:	54a0      	strbne	r0, [r4, r2]
   2a73a:	e7f5      	b.n	2a728 <str_out+0x12>

0002a73c <printk>:
{
   2a73c:	b40f      	push	{r0, r1, r2, r3}
   2a73e:	b507      	push	{r0, r1, r2, lr}
   2a740:	a904      	add	r1, sp, #16
   2a742:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a746:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a748:	f7e7 fd72 	bl	12230 <vprintk>
}
   2a74c:	b003      	add	sp, #12
   2a74e:	f85d eb04 	ldr.w	lr, [sp], #4
   2a752:	b004      	add	sp, #16
   2a754:	4770      	bx	lr

0002a756 <snprintk>:
{
   2a756:	b40c      	push	{r2, r3}
   2a758:	b507      	push	{r0, r1, r2, lr}
   2a75a:	ab04      	add	r3, sp, #16
   2a75c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2a760:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2a762:	f7e7 fd73 	bl	1224c <vsnprintk>
}
   2a766:	b003      	add	sp, #12
   2a768:	f85d eb04 	ldr.w	lr, [sp], #4
   2a76c:	b002      	add	sp, #8
   2a76e:	4770      	bx	lr

0002a770 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2a770:	4604      	mov	r4, r0
   2a772:	b508      	push	{r3, lr}
   2a774:	4608      	mov	r0, r1
   2a776:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2a778:	461a      	mov	r2, r3
   2a77a:	47a0      	blx	r4
	return z_impl_z_current_get();
   2a77c:	f7fb ff1e 	bl	265bc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2a780:	f7ea fe52 	bl	15428 <z_impl_k_thread_abort>

0002a784 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2a784:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2a788:	8840      	ldrh	r0, [r0, #2]
}
   2a78a:	0840      	lsrs	r0, r0, #1
   2a78c:	4770      	bx	lr

0002a78e <free_list_add>:
{
   2a78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a790:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a792:	f7ff fff7 	bl	2a784 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a796:	fab0 f080 	clz	r0, r0
   2a79a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2a79e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2a7a2:	00ca      	lsls	r2, r1, #3
   2a7a4:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2a7a8:	1d17      	adds	r7, r2, #4
{
   2a7aa:	460c      	mov	r4, r1
   2a7ac:	3206      	adds	r2, #6
   2a7ae:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2a7b0:	b956      	cbnz	r6, 2a7c8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2a7b2:	2101      	movs	r1, #1
   2a7b4:	fa01 f000 	lsl.w	r0, r1, r0
   2a7b8:	68d9      	ldr	r1, [r3, #12]
   2a7ba:	4301      	orrs	r1, r0
   2a7bc:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2a7be:	f8cc 4010 	str.w	r4, [ip, #16]
   2a7c2:	53dd      	strh	r5, [r3, r7]
   2a7c4:	529d      	strh	r5, [r3, r2]
}
   2a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2a7c8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2a7ca:	3104      	adds	r1, #4
   2a7cc:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2a7ce:	53d8      	strh	r0, [r3, r7]
   2a7d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a7d4:	529e      	strh	r6, [r3, r2]
   2a7d6:	80c5      	strh	r5, [r0, #6]
   2a7d8:	525d      	strh	r5, [r3, r1]
   2a7da:	e7f4      	b.n	2a7c6 <free_list_add+0x38>

0002a7dc <free_list_remove_bidx>:
{
   2a7dc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2a7de:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2a7e2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2a7e4:	4299      	cmp	r1, r3
   2a7e6:	f102 0104 	add.w	r1, r2, #4
   2a7ea:	d10a      	bne.n	2a802 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2a7ec:	2301      	movs	r3, #1
   2a7ee:	fa03 f202 	lsl.w	r2, r3, r2
   2a7f2:	68c3      	ldr	r3, [r0, #12]
   2a7f4:	ea23 0302 	bic.w	r3, r3, r2
   2a7f8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2a7fa:	2300      	movs	r3, #0
   2a7fc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2a800:	bd10      	pop	{r4, pc}
   2a802:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2a804:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2a808:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2a80c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a810:	80cb      	strh	r3, [r1, #6]
   2a812:	8082      	strh	r2, [r0, #4]
}
   2a814:	e7f4      	b.n	2a800 <free_list_remove_bidx+0x24>

0002a816 <free_list_remove>:
{
   2a816:	b508      	push	{r3, lr}
   2a818:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2a81a:	f7ff ffb3 	bl	2a784 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2a81e:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2a822:	f1c2 021f 	rsb	r2, r2, #31
   2a826:	4618      	mov	r0, r3
}
   2a828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   2a82c:	f7ff bfd6 	b.w	2a7dc <free_list_remove_bidx>

0002a830 <alloc_chunk>:
{
   2a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a834:	fab1 f581 	clz	r5, r1
   2a838:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2a83c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   2a840:	4603      	mov	r3, r0
	if (b->next) {
   2a842:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2a846:	460e      	mov	r6, r1
	if (b->next) {
   2a848:	b1c2      	cbz	r2, 2a87c <alloc_chunk+0x4c>
   2a84a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2a84c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   2a850:	4618      	mov	r0, r3
   2a852:	4621      	mov	r1, r4
   2a854:	f7ff ff96 	bl	2a784 <chunk_size>
   2a858:	42b0      	cmp	r0, r6
   2a85a:	d306      	bcc.n	2a86a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2a85c:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2a85e:	4618      	mov	r0, r3
   2a860:	f7ff ffbc 	bl	2a7dc <free_list_remove_bidx>
}
   2a864:	4620      	mov	r0, r4
   2a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2a86a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2a86e:	3f01      	subs	r7, #1
   2a870:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2a872:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2a876:	d001      	beq.n	2a87c <alloc_chunk+0x4c>
   2a878:	4282      	cmp	r2, r0
   2a87a:	d1e7      	bne.n	2a84c <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2a87c:	f1c5 0220 	rsb	r2, r5, #32
   2a880:	f04f 34ff 	mov.w	r4, #4294967295
   2a884:	4094      	lsls	r4, r2
   2a886:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   2a888:	4014      	ands	r4, r2
   2a88a:	d0eb      	beq.n	2a864 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2a88c:	fa94 f2a4 	rbit	r2, r4
   2a890:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2a894:	1d11      	adds	r1, r2, #4
   2a896:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   2a89a:	4621      	mov	r1, r4
   2a89c:	e7df      	b.n	2a85e <alloc_chunk+0x2e>

0002a89e <merge_chunks>:
{
   2a89e:	b538      	push	{r3, r4, r5, lr}
   2a8a0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a8a2:	f7ff ff6f 	bl	2a784 <chunk_size>
{
   2a8a6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2a8a8:	4604      	mov	r4, r0
   2a8aa:	4611      	mov	r1, r2
   2a8ac:	4618      	mov	r0, r3
   2a8ae:	f7ff ff69 	bl	2a784 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2a8b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2a8b6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a8b8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2a8ba:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2a8bc:	4618      	mov	r0, r3
   2a8be:	f7ff ff61 	bl	2a784 <chunk_size>
	void *cmem = &buf[c];
   2a8c2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a8c4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2a8c8:	bd38      	pop	{r3, r4, r5, pc}

0002a8ca <split_chunks>:
{
   2a8ca:	b538      	push	{r3, r4, r5, lr}
   2a8cc:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2a8ce:	f7ff ff59 	bl	2a784 <chunk_size>
{
   2a8d2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2a8d4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2a8d6:	1a51      	subs	r1, r2, r1
   2a8d8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2a8dc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a8de:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2a8e0:	8060      	strh	r0, [r4, #2]
   2a8e2:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2a8e6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2a8e8:	8044      	strh	r4, [r0, #2]
   2a8ea:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2a8ee:	4618      	mov	r0, r3
   2a8f0:	4611      	mov	r1, r2
   2a8f2:	f7ff ff47 	bl	2a784 <chunk_size>
	void *cmem = &buf[c];
   2a8f6:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2a8f8:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2a8fc:	bd38      	pop	{r3, r4, r5, pc}

0002a8fe <free_chunk>:
{
   2a8fe:	b538      	push	{r3, r4, r5, lr}
   2a900:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2a902:	f7ff ff3f 	bl	2a784 <chunk_size>
   2a906:	460c      	mov	r4, r1
   2a908:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2a90a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a90e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2a910:	07da      	lsls	r2, r3, #31
   2a912:	d40a      	bmi.n	2a92a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2a914:	4628      	mov	r0, r5
   2a916:	f7ff ff7e 	bl	2a816 <free_list_remove>
	return c + chunk_size(h, c);
   2a91a:	4621      	mov	r1, r4
   2a91c:	4628      	mov	r0, r5
   2a91e:	f7ff ff31 	bl	2a784 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2a922:	1822      	adds	r2, r4, r0
   2a924:	4628      	mov	r0, r5
   2a926:	f7ff ffba 	bl	2a89e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2a92a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a92e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2a930:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2a934:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2a936:	07db      	lsls	r3, r3, #31
   2a938:	d40c      	bmi.n	2a954 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2a93a:	4628      	mov	r0, r5
   2a93c:	f7ff ff6b 	bl	2a816 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2a940:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2a944:	4622      	mov	r2, r4
   2a946:	1a61      	subs	r1, r4, r1
   2a948:	4628      	mov	r0, r5
   2a94a:	f7ff ffa8 	bl	2a89e <merge_chunks>
   2a94e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2a952:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2a954:	4621      	mov	r1, r4
   2a956:	4628      	mov	r0, r5
}
   2a958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2a95c:	f7ff bf17 	b.w	2a78e <free_list_add>

0002a960 <sys_heap_alloc>:
{
   2a960:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2a962:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a964:	b909      	cbnz	r1, 2a96a <sys_heap_alloc+0xa>
		return NULL;
   2a966:	2000      	movs	r0, #0
}
   2a968:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2a96a:	68ab      	ldr	r3, [r5, #8]
   2a96c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2a970:	d9f9      	bls.n	2a966 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2a972:	310b      	adds	r1, #11
   2a974:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2a976:	4621      	mov	r1, r4
   2a978:	4628      	mov	r0, r5
   2a97a:	f7ff ff59 	bl	2a830 <alloc_chunk>
	if (c == 0U) {
   2a97e:	4606      	mov	r6, r0
   2a980:	2800      	cmp	r0, #0
   2a982:	d0f0      	beq.n	2a966 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2a984:	4601      	mov	r1, r0
   2a986:	4628      	mov	r0, r5
   2a988:	f7ff fefc 	bl	2a784 <chunk_size>
   2a98c:	42a0      	cmp	r0, r4
   2a98e:	d907      	bls.n	2a9a0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2a990:	1932      	adds	r2, r6, r4
   2a992:	4628      	mov	r0, r5
   2a994:	f7ff ff99 	bl	2a8ca <split_chunks>
		free_list_add(h, c + chunk_sz);
   2a998:	4611      	mov	r1, r2
   2a99a:	4628      	mov	r0, r5
   2a99c:	f7ff fef7 	bl	2a78e <free_list_add>
	void *cmem = &buf[c];
   2a9a0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2a9a4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2a9a6:	8853      	ldrh	r3, [r2, #2]
   2a9a8:	f043 0301 	orr.w	r3, r3, #1
   2a9ac:	8053      	strh	r3, [r2, #2]
   2a9ae:	3004      	adds	r0, #4
	return mem;
   2a9b0:	e7da      	b.n	2a968 <sys_heap_alloc+0x8>

0002a9b2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a9b2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2a9b4:	f013 0307 	ands.w	r3, r3, #7
   2a9b8:	d105      	bne.n	2a9c6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2a9ba:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2a9bc:	2b00      	cmp	r3, #0
   2a9be:	bf0c      	ite	eq
   2a9c0:	2000      	moveq	r0, #0
   2a9c2:	2003      	movne	r0, #3
   2a9c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2a9c6:	2b02      	cmp	r3, #2
   2a9c8:	d105      	bne.n	2a9d6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2a9ca:	8bc0      	ldrh	r0, [r0, #30]
   2a9cc:	fab0 f080 	clz	r0, r0
   2a9d0:	0940      	lsrs	r0, r0, #5
   2a9d2:	0080      	lsls	r0, r0, #2
   2a9d4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2a9d6:	2b01      	cmp	r3, #1
   2a9d8:	d105      	bne.n	2a9e6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2a9da:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2a9dc:	2b00      	cmp	r3, #0
   2a9de:	bf0c      	ite	eq
   2a9e0:	2000      	moveq	r0, #0
   2a9e2:	2005      	movne	r0, #5
   2a9e4:	4770      	bx	lr
	int evt = EVT_NOP;
   2a9e6:	2000      	movs	r0, #0
}
   2a9e8:	4770      	bx	lr

0002a9ea <validate_args>:
{
   2a9ea:	b510      	push	{r4, lr}
   2a9ec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2a9ee:	b100      	cbz	r0, 2a9f2 <validate_args+0x8>
   2a9f0:	b911      	cbnz	r1, 2a9f8 <validate_args+0xe>
		return -EINVAL;
   2a9f2:	f06f 0015 	mvn.w	r0, #21
}
   2a9f6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2a9f8:	1d08      	adds	r0, r1, #4
   2a9fa:	f000 f82f 	bl	2aa5c <sys_notify_validate>
	if ((rv == 0)
   2a9fe:	2800      	cmp	r0, #0
   2aa00:	d1f9      	bne.n	2a9f6 <validate_args+0xc>
	    && ((cli->notify.flags
   2aa02:	68a3      	ldr	r3, [r4, #8]
   2aa04:	2b03      	cmp	r3, #3
   2aa06:	d9f6      	bls.n	2a9f6 <validate_args+0xc>
   2aa08:	e7f3      	b.n	2a9f2 <validate_args+0x8>

0002aa0a <notify_one>:
{
   2aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa0e:	460d      	mov	r5, r1
   2aa10:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2aa12:	4619      	mov	r1, r3
   2aa14:	1d28      	adds	r0, r5, #4
{
   2aa16:	4690      	mov	r8, r2
   2aa18:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2aa1a:	f7e7 ff8f 	bl	1293c <sys_notify_finalize>
	if (cb) {
   2aa1e:	4604      	mov	r4, r0
   2aa20:	b138      	cbz	r0, 2aa32 <notify_one+0x28>
		cb(mgr, cli, state, res);
   2aa22:	4633      	mov	r3, r6
   2aa24:	4642      	mov	r2, r8
   2aa26:	4629      	mov	r1, r5
   2aa28:	4638      	mov	r0, r7
   2aa2a:	46a4      	mov	ip, r4
}
   2aa2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2aa30:	4760      	bx	ip
}
   2aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa36 <onoff_manager_init>:
{
   2aa36:	b538      	push	{r3, r4, r5, lr}
   2aa38:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2aa3a:	4605      	mov	r5, r0
   2aa3c:	b158      	cbz	r0, 2aa56 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2aa3e:	b151      	cbz	r1, 2aa56 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2aa40:	680b      	ldr	r3, [r1, #0]
   2aa42:	b143      	cbz	r3, 2aa56 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2aa44:	684b      	ldr	r3, [r1, #4]
   2aa46:	b133      	cbz	r3, 2aa56 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2aa48:	2220      	movs	r2, #32
   2aa4a:	2100      	movs	r1, #0
   2aa4c:	f001 f85f 	bl	2bb0e <memset>
   2aa50:	612c      	str	r4, [r5, #16]
	return 0;
   2aa52:	2000      	movs	r0, #0
}
   2aa54:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2aa56:	f06f 0015 	mvn.w	r0, #21
   2aa5a:	e7fb      	b.n	2aa54 <onoff_manager_init+0x1e>

0002aa5c <sys_notify_validate>:
	if (notify == NULL) {
   2aa5c:	4603      	mov	r3, r0
   2aa5e:	b140      	cbz	r0, 2aa72 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2aa60:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2aa62:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2aa66:	2a02      	cmp	r2, #2
   2aa68:	d006      	beq.n	2aa78 <sys_notify_validate+0x1c>
   2aa6a:	2a03      	cmp	r2, #3
   2aa6c:	d004      	beq.n	2aa78 <sys_notify_validate+0x1c>
   2aa6e:	2a01      	cmp	r2, #1
   2aa70:	d005      	beq.n	2aa7e <sys_notify_validate+0x22>
   2aa72:	f06f 0015 	mvn.w	r0, #21
}
   2aa76:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2aa78:	681a      	ldr	r2, [r3, #0]
   2aa7a:	2a00      	cmp	r2, #0
   2aa7c:	d0f9      	beq.n	2aa72 <sys_notify_validate+0x16>
		notify->result = 0;
   2aa7e:	2000      	movs	r0, #0
   2aa80:	6098      	str	r0, [r3, #8]
   2aa82:	4770      	bx	lr

0002aa84 <encode_uint>:
{
   2aa84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa88:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   2aa8a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2aa8c:	2b6f      	cmp	r3, #111	; 0x6f
{
   2aa8e:	4680      	mov	r8, r0
   2aa90:	460f      	mov	r7, r1
   2aa92:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2aa94:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2aa98:	d029      	beq.n	2aaee <encode_uint+0x6a>
   2aa9a:	d824      	bhi.n	2aae6 <encode_uint+0x62>
		return 10;
   2aa9c:	2b58      	cmp	r3, #88	; 0x58
   2aa9e:	bf0c      	ite	eq
   2aaa0:	2610      	moveq	r6, #16
   2aaa2:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2aaa4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   2aaa8:	4632      	mov	r2, r6
   2aaaa:	2300      	movs	r3, #0
   2aaac:	4640      	mov	r0, r8
   2aaae:	4639      	mov	r1, r7
   2aab0:	f7d5 fb26 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2aab4:	2a09      	cmp	r2, #9
   2aab6:	b2d4      	uxtb	r4, r2
   2aab8:	d81e      	bhi.n	2aaf8 <encode_uint+0x74>
   2aaba:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2aabc:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2aabe:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2aac0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2aac4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2aac8:	d301      	bcc.n	2aace <encode_uint+0x4a>
   2aaca:	45d1      	cmp	r9, sl
   2aacc:	d811      	bhi.n	2aaf2 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2aace:	782b      	ldrb	r3, [r5, #0]
   2aad0:	069b      	lsls	r3, r3, #26
   2aad2:	d505      	bpl.n	2aae0 <encode_uint+0x5c>
		if (radix == 8) {
   2aad4:	2e08      	cmp	r6, #8
   2aad6:	d115      	bne.n	2ab04 <encode_uint+0x80>
			conv->altform_0 = true;
   2aad8:	78ab      	ldrb	r3, [r5, #2]
   2aada:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2aade:	70ab      	strb	r3, [r5, #2]
}
   2aae0:	4648      	mov	r0, r9
   2aae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2aae6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2aaea:	2b70      	cmp	r3, #112	; 0x70
   2aaec:	e7d7      	b.n	2aa9e <encode_uint+0x1a>
	switch (specifier) {
   2aaee:	2608      	movs	r6, #8
   2aaf0:	e7d8      	b.n	2aaa4 <encode_uint+0x20>
		value /= radix;
   2aaf2:	4680      	mov	r8, r0
   2aaf4:	460f      	mov	r7, r1
   2aaf6:	e7d7      	b.n	2aaa8 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2aaf8:	f1bb 0f19 	cmp.w	fp, #25
   2aafc:	bf94      	ite	ls
   2aafe:	3437      	addls	r4, #55	; 0x37
   2ab00:	3457      	addhi	r4, #87	; 0x57
   2ab02:	e7db      	b.n	2aabc <encode_uint+0x38>
		} else if (radix == 16) {
   2ab04:	2e10      	cmp	r6, #16
   2ab06:	d1eb      	bne.n	2aae0 <encode_uint+0x5c>
			conv->altform_0c = true;
   2ab08:	78ab      	ldrb	r3, [r5, #2]
   2ab0a:	f043 0310 	orr.w	r3, r3, #16
   2ab0e:	e7e6      	b.n	2aade <encode_uint+0x5a>

0002ab10 <outs>:
{
   2ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ab14:	4607      	mov	r7, r0
   2ab16:	4688      	mov	r8, r1
   2ab18:	4615      	mov	r5, r2
   2ab1a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ab1c:	4614      	mov	r4, r2
   2ab1e:	42b4      	cmp	r4, r6
   2ab20:	d305      	bcc.n	2ab2e <outs+0x1e>
   2ab22:	b10e      	cbz	r6, 2ab28 <outs+0x18>
	return (int)count;
   2ab24:	1b60      	subs	r0, r4, r5
   2ab26:	e008      	b.n	2ab3a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2ab28:	7823      	ldrb	r3, [r4, #0]
   2ab2a:	2b00      	cmp	r3, #0
   2ab2c:	d0fa      	beq.n	2ab24 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2ab2e:	f814 0b01 	ldrb.w	r0, [r4], #1
   2ab32:	4641      	mov	r1, r8
   2ab34:	47b8      	blx	r7
		if (rc < 0) {
   2ab36:	2800      	cmp	r0, #0
   2ab38:	daf1      	bge.n	2ab1e <outs+0xe>
}
   2ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ab3e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2ab3e:	4040      	eors	r0, r0
   2ab40:	f380 8811 	msr	BASEPRI, r0
   2ab44:	f04f 0004 	mov.w	r0, #4
   2ab48:	df02      	svc	2
}
   2ab4a:	4770      	bx	lr

0002ab4c <assert_print>:

void assert_print(const char *fmt, ...)
{
   2ab4c:	b40f      	push	{r0, r1, r2, r3}
   2ab4e:	b507      	push	{r0, r1, r2, lr}
   2ab50:	a904      	add	r1, sp, #16
   2ab52:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2ab56:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2ab58:	f7e7 fb6a 	bl	12230 <vprintk>

	va_end(ap);
}
   2ab5c:	b003      	add	sp, #12
   2ab5e:	f85d eb04 	ldr.w	lr, [sp], #4
   2ab62:	b004      	add	sp, #16
   2ab64:	4770      	bx	lr

0002ab66 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2ab66:	4770      	bx	lr

0002ab68 <z_log_minimal_printk>:
{
   2ab68:	b40f      	push	{r0, r1, r2, r3}
   2ab6a:	b507      	push	{r0, r1, r2, lr}
   2ab6c:	a904      	add	r1, sp, #16
   2ab6e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2ab72:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2ab74:	f7e7 fb5c 	bl	12230 <vprintk>
}
   2ab78:	b003      	add	sp, #12
   2ab7a:	f85d eb04 	ldr.w	lr, [sp], #4
   2ab7e:	b004      	add	sp, #16
   2ab80:	4770      	bx	lr

0002ab82 <nvs_flash_rd>:
{
   2ab82:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2ab84:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ab86:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2ab88:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ab8a:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2ab8c:	fa16 f181 	uxtah	r1, r6, r1
   2ab90:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2ab94:	6884      	ldr	r4, [r0, #8]
   2ab96:	6824      	ldr	r4, [r4, #0]
   2ab98:	46a4      	mov	ip, r4
}
   2ab9a:	bc70      	pop	{r4, r5, r6}
   2ab9c:	4760      	bx	ip

0002ab9e <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2ab9e:	680b      	ldr	r3, [r1, #0]
   2aba0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2aba4:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2aba6:	89c0      	ldrh	r0, [r0, #14]
   2aba8:	0c1a      	lsrs	r2, r3, #16
   2abaa:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2abae:	bf04      	itt	eq
   2abb0:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2abb4:	600b      	streq	r3, [r1, #0]
}
   2abb6:	4770      	bx	lr

0002abb8 <nvs_flash_block_cmp>:
{
   2abb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2abbc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2abbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2abc0:	681d      	ldr	r5, [r3, #0]
   2abc2:	426d      	negs	r5, r5
{
   2abc4:	b089      	sub	sp, #36	; 0x24
   2abc6:	4681      	mov	r9, r0
   2abc8:	460e      	mov	r6, r1
   2abca:	4617      	mov	r7, r2
	block_size =
   2abcc:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2abd0:	b91c      	cbnz	r4, 2abda <nvs_flash_block_cmp+0x22>
	return 0;
   2abd2:	4620      	mov	r0, r4
}
   2abd4:	b009      	add	sp, #36	; 0x24
   2abd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2abda:	42ac      	cmp	r4, r5
   2abdc:	46a0      	mov	r8, r4
   2abde:	bf28      	it	cs
   2abe0:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2abe2:	4643      	mov	r3, r8
   2abe4:	466a      	mov	r2, sp
   2abe6:	4631      	mov	r1, r6
   2abe8:	4648      	mov	r0, r9
   2abea:	f7ff ffca 	bl	2ab82 <nvs_flash_rd>
		if (rc) {
   2abee:	2800      	cmp	r0, #0
   2abf0:	d1f0      	bne.n	2abd4 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2abf2:	4642      	mov	r2, r8
   2abf4:	4669      	mov	r1, sp
   2abf6:	4638      	mov	r0, r7
   2abf8:	f000 ff57 	bl	2baaa <memcmp>
		if (rc) {
   2abfc:	b920      	cbnz	r0, 2ac08 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2abfe:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2ac02:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2ac04:	4447      	add	r7, r8
   2ac06:	e7e3      	b.n	2abd0 <nvs_flash_block_cmp+0x18>
			return 1;
   2ac08:	2001      	movs	r0, #1
   2ac0a:	e7e3      	b.n	2abd4 <nvs_flash_block_cmp+0x1c>

0002ac0c <nvs_flash_cmp_const>:
{
   2ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac10:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2ac12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ac14:	681d      	ldr	r5, [r3, #0]
   2ac16:	426d      	negs	r5, r5
{
   2ac18:	b088      	sub	sp, #32
	block_size =
   2ac1a:	f005 0520 	and.w	r5, r5, #32
{
   2ac1e:	4607      	mov	r7, r0
   2ac20:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2ac22:	4668      	mov	r0, sp
{
   2ac24:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2ac26:	462a      	mov	r2, r5
   2ac28:	f000 ff71 	bl	2bb0e <memset>
	while (len) {
   2ac2c:	b91c      	cbnz	r4, 2ac36 <nvs_flash_cmp_const+0x2a>
	return 0;
   2ac2e:	4620      	mov	r0, r4
}
   2ac30:	b008      	add	sp, #32
   2ac32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2ac36:	42ac      	cmp	r4, r5
   2ac38:	46a0      	mov	r8, r4
   2ac3a:	bf28      	it	cs
   2ac3c:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2ac3e:	4643      	mov	r3, r8
   2ac40:	466a      	mov	r2, sp
   2ac42:	4631      	mov	r1, r6
   2ac44:	4638      	mov	r0, r7
   2ac46:	f7ff ffb7 	bl	2abb8 <nvs_flash_block_cmp>
		if (rc) {
   2ac4a:	2800      	cmp	r0, #0
   2ac4c:	d1f0      	bne.n	2ac30 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2ac4e:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2ac52:	4446      	add	r6, r8
   2ac54:	e7ea      	b.n	2ac2c <nvs_flash_cmp_const+0x20>

0002ac56 <nvs_flash_erase_sector>:
{
   2ac56:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac58:	8982      	ldrh	r2, [r0, #12]
   2ac5a:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2ac5c:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac5e:	0c09      	lsrs	r1, r1, #16
{
   2ac60:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2ac62:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2ac64:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2ac66:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2ac6a:	6883      	ldr	r3, [r0, #8]
   2ac6c:	689b      	ldr	r3, [r3, #8]
   2ac6e:	4798      	blx	r3
	if (rc) {
   2ac70:	b950      	cbnz	r0, 2ac88 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2ac72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2ac74:	89a3      	ldrh	r3, [r4, #12]
   2ac76:	7912      	ldrb	r2, [r2, #4]
   2ac78:	4629      	mov	r1, r5
   2ac7a:	4620      	mov	r0, r4
   2ac7c:	f7ff ffc6 	bl	2ac0c <nvs_flash_cmp_const>
		rc = -ENXIO;
   2ac80:	2800      	cmp	r0, #0
   2ac82:	bf18      	it	ne
   2ac84:	f06f 0005 	mvnne.w	r0, #5
}
   2ac88:	bd38      	pop	{r3, r4, r5, pc}

0002ac8a <nvs_ate_crc8_update>:
{
   2ac8a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ac8c:	4601      	mov	r1, r0
{
   2ac8e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2ac90:	2207      	movs	r2, #7
   2ac92:	20ff      	movs	r0, #255	; 0xff
   2ac94:	f7e7 fe7c 	bl	12990 <crc8_ccitt>
	entry->crc8 = crc8;
   2ac98:	71e0      	strb	r0, [r4, #7]
}
   2ac9a:	bd10      	pop	{r4, pc}

0002ac9c <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2ac9c:	7803      	ldrb	r3, [r0, #0]
   2ac9e:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2aca0:	bf81      	itttt	hi
   2aca2:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2aca6:	18c9      	addhi	r1, r1, r3
   2aca8:	425b      	neghi	r3, r3
   2acaa:	4019      	andhi	r1, r3
}
   2acac:	4608      	mov	r0, r1
   2acae:	4770      	bx	lr

0002acb0 <nvs_ate_valid>:
{
   2acb0:	b570      	push	{r4, r5, r6, lr}
   2acb2:	460c      	mov	r4, r1
   2acb4:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acb6:	2108      	movs	r1, #8
   2acb8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2acba:	f7ff ffef 	bl	2ac9c <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2acbe:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acc0:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2acc2:	4621      	mov	r1, r4
   2acc4:	20ff      	movs	r0, #255	; 0xff
   2acc6:	f7e7 fe63 	bl	12990 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2acca:	79e3      	ldrb	r3, [r4, #7]
   2accc:	4283      	cmp	r3, r0
   2acce:	d107      	bne.n	2ace0 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2acd0:	89aa      	ldrh	r2, [r5, #12]
   2acd2:	8863      	ldrh	r3, [r4, #2]
   2acd4:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2acd6:	4283      	cmp	r3, r0
   2acd8:	bf2c      	ite	cs
   2acda:	2000      	movcs	r0, #0
   2acdc:	2001      	movcc	r0, #1
}
   2acde:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2ace0:	2000      	movs	r0, #0
   2ace2:	e7fc      	b.n	2acde <nvs_ate_valid+0x2e>

0002ace4 <nvs_close_ate_valid>:
{
   2ace4:	b538      	push	{r3, r4, r5, lr}
   2ace6:	4605      	mov	r5, r0
   2ace8:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2acea:	f7ff ffe1 	bl	2acb0 <nvs_ate_valid>
   2acee:	b1a0      	cbz	r0, 2ad1a <nvs_close_ate_valid+0x36>
   2acf0:	88a0      	ldrh	r0, [r4, #4]
   2acf2:	b998      	cbnz	r0, 2ad1c <nvs_close_ate_valid+0x38>
   2acf4:	8822      	ldrh	r2, [r4, #0]
   2acf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2acfa:	429a      	cmp	r2, r3
   2acfc:	d10d      	bne.n	2ad1a <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2acfe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2ad00:	2108      	movs	r1, #8
   2ad02:	f7ff ffcb 	bl	2ac9c <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2ad06:	8862      	ldrh	r2, [r4, #2]
   2ad08:	89ab      	ldrh	r3, [r5, #12]
   2ad0a:	1a9b      	subs	r3, r3, r2
   2ad0c:	fbb3 f2f0 	udiv	r2, r3, r0
   2ad10:	fb02 3010 	mls	r0, r2, r0, r3
   2ad14:	fab0 f080 	clz	r0, r0
   2ad18:	0940      	lsrs	r0, r0, #5
}
   2ad1a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2ad1c:	2000      	movs	r0, #0
   2ad1e:	e7fc      	b.n	2ad1a <nvs_close_ate_valid+0x36>

0002ad20 <nvs_prev_ate>:
{
   2ad20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ad22:	4604      	mov	r4, r0
   2ad24:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad26:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ad28:	2108      	movs	r1, #8
   2ad2a:	f7ff ffb7 	bl	2ac9c <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad2e:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad30:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad32:	2308      	movs	r3, #8
   2ad34:	4620      	mov	r0, r4
   2ad36:	f7ff ff24 	bl	2ab82 <nvs_flash_rd>
	if (rc) {
   2ad3a:	4606      	mov	r6, r0
   2ad3c:	2800      	cmp	r0, #0
   2ad3e:	d136      	bne.n	2adae <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2ad40:	682b      	ldr	r3, [r5, #0]
   2ad42:	443b      	add	r3, r7
   2ad44:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2ad46:	89a2      	ldrh	r2, [r4, #12]
   2ad48:	b299      	uxth	r1, r3
   2ad4a:	1bd2      	subs	r2, r2, r7
   2ad4c:	4291      	cmp	r1, r2
   2ad4e:	d12e      	bne.n	2adae <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2ad50:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2ad52:	bf03      	ittte	eq
   2ad54:	89e2      	ldrheq	r2, [r4, #14]
   2ad56:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2ad5a:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2ad5e:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2ad62:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad64:	2308      	movs	r3, #8
   2ad66:	466a      	mov	r2, sp
   2ad68:	4620      	mov	r0, r4
   2ad6a:	f7ff ff0a 	bl	2ab82 <nvs_flash_rd>
	if (rc) {
   2ad6e:	b9e8      	cbnz	r0, 2adac <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2ad70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2ad72:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad74:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2ad76:	f813 1b01 	ldrb.w	r1, [r3], #1
   2ad7a:	428a      	cmp	r2, r1
   2ad7c:	d10c      	bne.n	2ad98 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ad7e:	3001      	adds	r0, #1
   2ad80:	2808      	cmp	r0, #8
   2ad82:	d1f8      	bne.n	2ad76 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2ad84:	6863      	ldr	r3, [r4, #4]
   2ad86:	e005      	b.n	2ad94 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2ad88:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2ad8a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2ad8e:	0c1b      	lsrs	r3, r3, #16
   2ad90:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2ad92:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2ad94:	602b      	str	r3, [r5, #0]
		return 0;
   2ad96:	e00a      	b.n	2adae <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2ad98:	4669      	mov	r1, sp
   2ad9a:	4620      	mov	r0, r4
   2ad9c:	f7ff ffa2 	bl	2ace4 <nvs_close_ate_valid>
   2ada0:	2800      	cmp	r0, #0
   2ada2:	d1f1      	bne.n	2ad88 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2ada4:	4629      	mov	r1, r5
   2ada6:	4620      	mov	r0, r4
   2ada8:	f7e8 fa30 	bl	1320c <nvs_recover_last_ate>
   2adac:	4606      	mov	r6, r0
}
   2adae:	4630      	mov	r0, r6
   2adb0:	b003      	add	sp, #12
   2adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002adb4 <nvs_flash_al_wrt>:
{
   2adb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2adb8:	4607      	mov	r7, r0
   2adba:	b089      	sub	sp, #36	; 0x24
   2adbc:	4690      	mov	r8, r2
	if (!len) {
   2adbe:	461e      	mov	r6, r3
   2adc0:	b91b      	cbnz	r3, 2adca <nvs_flash_al_wrt+0x16>
		return 0;
   2adc2:	2000      	movs	r0, #0
}
   2adc4:	b009      	add	sp, #36	; 0x24
   2adc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2adca:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2adcc:	8983      	ldrh	r3, [r0, #12]
   2adce:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2add0:	fa14 f181 	uxtah	r1, r4, r1
   2add4:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2adda:	681d      	ldr	r5, [r3, #0]
   2addc:	426d      	negs	r5, r5
	if (blen > 0) {
   2adde:	4035      	ands	r5, r6
   2ade0:	d00c      	beq.n	2adfc <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2ade2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2ade4:	6883      	ldr	r3, [r0, #8]
   2ade6:	4621      	mov	r1, r4
   2ade8:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2adec:	462b      	mov	r3, r5
   2adee:	47c8      	blx	r9
		if (rc) {
   2adf0:	2800      	cmp	r0, #0
   2adf2:	d1e7      	bne.n	2adc4 <nvs_flash_al_wrt+0x10>
	if (len) {
   2adf4:	1b76      	subs	r6, r6, r5
   2adf6:	d0e4      	beq.n	2adc2 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2adf8:	442c      	add	r4, r5
		data8 += blen;
   2adfa:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2adfc:	4632      	mov	r2, r6
   2adfe:	4641      	mov	r1, r8
   2ae00:	4668      	mov	r0, sp
   2ae02:	f000 fe79 	bl	2baf8 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ae08:	681a      	ldr	r2, [r3, #0]
   2ae0a:	7919      	ldrb	r1, [r3, #4]
   2ae0c:	1b92      	subs	r2, r2, r6
   2ae0e:	eb0d 0006 	add.w	r0, sp, r6
   2ae12:	f000 fe7c 	bl	2bb0e <memset>
				 fs->flash_parameters->write_block_size);
   2ae16:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2ae1a:	681b      	ldr	r3, [r3, #0]
   2ae1c:	6882      	ldr	r2, [r0, #8]
   2ae1e:	4621      	mov	r1, r4
   2ae20:	6855      	ldr	r5, [r2, #4]
   2ae22:	466a      	mov	r2, sp
   2ae24:	47a8      	blx	r5
	return rc;
   2ae26:	e7cd      	b.n	2adc4 <nvs_flash_al_wrt+0x10>

0002ae28 <nvs_flash_ate_wrt>:
{
   2ae28:	b510      	push	{r4, lr}
   2ae2a:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae2c:	2308      	movs	r3, #8
   2ae2e:	6841      	ldr	r1, [r0, #4]
{
   2ae30:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae32:	f7ff ffbf 	bl	2adb4 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae36:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2ae38:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae3c:	f7ff ff2e 	bl	2ac9c <nvs_al_size.isra.0>
   2ae40:	6863      	ldr	r3, [r4, #4]
   2ae42:	1a1b      	subs	r3, r3, r0
   2ae44:	6063      	str	r3, [r4, #4]
}
   2ae46:	4610      	mov	r0, r2
   2ae48:	bd10      	pop	{r4, pc}

0002ae4a <nvs_add_gc_done_ate>:
{
   2ae4a:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2ae4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ae50:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2ae54:	2300      	movs	r3, #0
{
   2ae56:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2ae58:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2ae5c:	6883      	ldr	r3, [r0, #8]
   2ae5e:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2ae62:	4668      	mov	r0, sp
   2ae64:	f7ff ff11 	bl	2ac8a <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2ae68:	4669      	mov	r1, sp
   2ae6a:	4620      	mov	r0, r4
   2ae6c:	f7ff ffdc 	bl	2ae28 <nvs_flash_ate_wrt>
}
   2ae70:	b002      	add	sp, #8
   2ae72:	bd10      	pop	{r4, pc}

0002ae74 <nvs_gc>:
{
   2ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae78:	4604      	mov	r4, r0
   2ae7a:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae7c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2ae7e:	2108      	movs	r1, #8
   2ae80:	f7ff ff0c 	bl	2ac9c <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ae84:	6863      	ldr	r3, [r4, #4]
   2ae86:	0c1b      	lsrs	r3, r3, #16
   2ae88:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae8a:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2ae8c:	a903      	add	r1, sp, #12
   2ae8e:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2ae90:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2ae92:	f7ff fe84 	bl	2ab9e <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2ae96:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2ae9a:	89a6      	ldrh	r6, [r4, #12]
   2ae9c:	445e      	add	r6, fp
   2ae9e:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aea0:	aa06      	add	r2, sp, #24
   2aea2:	2308      	movs	r3, #8
   2aea4:	4631      	mov	r1, r6
   2aea6:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2aea8:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aeaa:	f7ff fe6a 	bl	2ab82 <nvs_flash_rd>
	if (rc < 0) {
   2aeae:	1e02      	subs	r2, r0, #0
   2aeb0:	f2c0 80a9 	blt.w	2b006 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2aeb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2aeb6:	aa06      	add	r2, sp, #24
   2aeb8:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2aeba:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2aebc:	f812 0b01 	ldrb.w	r0, [r2], #1
   2aec0:	4281      	cmp	r1, r0
   2aec2:	f040 808f 	bne.w	2afe4 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2aec6:	3301      	adds	r3, #1
   2aec8:	2b08      	cmp	r3, #8
   2aeca:	d1f7      	bne.n	2aebc <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2aecc:	68a3      	ldr	r3, [r4, #8]
   2aece:	6862      	ldr	r2, [r4, #4]
   2aed0:	442b      	add	r3, r5
   2aed2:	429a      	cmp	r2, r3
   2aed4:	d27e      	bcs.n	2afd4 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2aed6:	4659      	mov	r1, fp
   2aed8:	4620      	mov	r0, r4
   2aeda:	f7ff febc 	bl	2ac56 <nvs_flash_erase_sector>
   2aede:	4602      	mov	r2, r0
	if (rc) {
   2aee0:	e091      	b.n	2b006 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2aee2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2aee6:	0c36      	lsrs	r6, r6, #16
   2aee8:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2aeea:	441e      	add	r6, r3
   2aeec:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2aeee:	aa08      	add	r2, sp, #32
   2aef0:	a904      	add	r1, sp, #16
   2aef2:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2aef4:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2aef8:	f7ff ff12 	bl	2ad20 <nvs_prev_ate>
		if (rc) {
   2aefc:	4602      	mov	r2, r0
   2aefe:	2800      	cmp	r0, #0
   2af00:	f040 8081 	bne.w	2b006 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2af04:	a908      	add	r1, sp, #32
   2af06:	4620      	mov	r0, r4
   2af08:	f7ff fed2 	bl	2acb0 <nvs_ate_valid>
   2af0c:	b918      	cbnz	r0, 2af16 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2af0e:	9b01      	ldr	r3, [sp, #4]
   2af10:	459a      	cmp	sl, r3
   2af12:	d1ec      	bne.n	2aeee <nvs_gc+0x7a>
   2af14:	e7da      	b.n	2aecc <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2af16:	6863      	ldr	r3, [r4, #4]
   2af18:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2af1a:	aa0a      	add	r2, sp, #40	; 0x28
   2af1c:	a905      	add	r1, sp, #20
   2af1e:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2af20:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2af22:	f7ff fefd 	bl	2ad20 <nvs_prev_ate>
			if (rc) {
   2af26:	4602      	mov	r2, r0
   2af28:	2800      	cmp	r0, #0
   2af2a:	d16c      	bne.n	2b006 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2af2c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2af30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2af34:	429a      	cmp	r2, r3
   2af36:	d027      	beq.n	2af88 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2af38:	6862      	ldr	r2, [r4, #4]
   2af3a:	9b05      	ldr	r3, [sp, #20]
   2af3c:	429a      	cmp	r2, r3
   2af3e:	d1ec      	bne.n	2af1a <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2af40:	4556      	cmp	r6, sl
   2af42:	d1e4      	bne.n	2af0e <nvs_gc+0x9a>
   2af44:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2af48:	2b00      	cmp	r3, #0
   2af4a:	d0e0      	beq.n	2af0e <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2af4c:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2af50:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2af54:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2af56:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2af58:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2af5a:	68a3      	ldr	r3, [r4, #8]
   2af5c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2af60:	f7ff fe93 	bl	2ac8a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2af64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2af66:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2af6a:	681e      	ldr	r6, [r3, #0]
   2af6c:	4276      	negs	r6, r6
	block_size =
   2af6e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2af72:	f1b9 0f00 	cmp.w	r9, #0
   2af76:	d10e      	bne.n	2af96 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2af78:	a908      	add	r1, sp, #32
   2af7a:	4620      	mov	r0, r4
   2af7c:	f7ff ff54 	bl	2ae28 <nvs_flash_ate_wrt>
			if (rc) {
   2af80:	4602      	mov	r2, r0
   2af82:	2800      	cmp	r0, #0
   2af84:	d0c3      	beq.n	2af0e <nvs_gc+0x9a>
   2af86:	e03e      	b.n	2b006 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2af88:	a90a      	add	r1, sp, #40	; 0x28
   2af8a:	4620      	mov	r0, r4
   2af8c:	f7ff fe90 	bl	2acb0 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2af90:	2800      	cmp	r0, #0
   2af92:	d0d1      	beq.n	2af38 <nvs_gc+0xc4>
   2af94:	e7d4      	b.n	2af40 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2af96:	454e      	cmp	r6, r9
   2af98:	46b0      	mov	r8, r6
   2af9a:	bf28      	it	cs
   2af9c:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2af9e:	aa0c      	add	r2, sp, #48	; 0x30
   2afa0:	4643      	mov	r3, r8
   2afa2:	4639      	mov	r1, r7
   2afa4:	4620      	mov	r0, r4
   2afa6:	f7ff fdec 	bl	2ab82 <nvs_flash_rd>
		if (rc) {
   2afaa:	4602      	mov	r2, r0
   2afac:	bb58      	cbnz	r0, 2b006 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2afae:	4643      	mov	r3, r8
   2afb0:	68a1      	ldr	r1, [r4, #8]
   2afb2:	aa0c      	add	r2, sp, #48	; 0x30
   2afb4:	4620      	mov	r0, r4
   2afb6:	f7ff fefd 	bl	2adb4 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2afba:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2afbc:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2afbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2afc0:	f7ff fe6c 	bl	2ac9c <nvs_al_size.isra.0>
   2afc4:	68a3      	ldr	r3, [r4, #8]
   2afc6:	4403      	add	r3, r0
   2afc8:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2afca:	b9e2      	cbnz	r2, 2b006 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2afcc:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2afd0:	4447      	add	r7, r8
   2afd2:	e7ce      	b.n	2af72 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2afd4:	4620      	mov	r0, r4
   2afd6:	f7ff ff38 	bl	2ae4a <nvs_add_gc_done_ate>
		if (rc) {
   2afda:	4602      	mov	r2, r0
   2afdc:	2800      	cmp	r0, #0
   2afde:	f43f af7a 	beq.w	2aed6 <nvs_gc+0x62>
   2afe2:	e010      	b.n	2b006 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2afe4:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2afe6:	a906      	add	r1, sp, #24
   2afe8:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2afea:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2afec:	f7ff fe7a 	bl	2ace4 <nvs_close_ate_valid>
   2aff0:	2800      	cmp	r0, #0
   2aff2:	f47f af76 	bne.w	2aee2 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2aff6:	a904      	add	r1, sp, #16
   2aff8:	4620      	mov	r0, r4
   2affa:	f7e8 f907 	bl	1320c <nvs_recover_last_ate>
		if (rc) {
   2affe:	4602      	mov	r2, r0
   2b000:	2800      	cmp	r0, #0
   2b002:	f43f af74 	beq.w	2aeee <nvs_gc+0x7a>
}
   2b006:	4610      	mov	r0, r2
   2b008:	b015      	add	sp, #84	; 0x54
   2b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b00e <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2b00e:	2300      	movs	r3, #0
   2b010:	461a      	mov	r2, r3
   2b012:	f7e8 bac7 	b.w	135a4 <nvs_write>

0002b016 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2b016:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2b018:	2400      	movs	r4, #0
   2b01a:	9400      	str	r4, [sp, #0]
   2b01c:	f7e8 fb96 	bl	1374c <nvs_read_hist>
	return rc;
}
   2b020:	b002      	add	sp, #8
   2b022:	bd10      	pop	{r4, pc}

0002b024 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2b024:	4770      	bx	lr

0002b026 <get_sectors_cb>:
{
   2b026:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2b028:	684c      	ldr	r4, [r1, #4]
   2b02a:	6803      	ldr	r3, [r0, #0]
   2b02c:	42a3      	cmp	r3, r4
   2b02e:	d201      	bcs.n	2b034 <get_sectors_cb+0xe>
		*bail_value = true;
   2b030:	2001      	movs	r0, #1
}
   2b032:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2b034:	688a      	ldr	r2, [r1, #8]
   2b036:	4422      	add	r2, r4
   2b038:	4293      	cmp	r3, r2
   2b03a:	d301      	bcc.n	2b040 <get_sectors_cb+0x1a>
		*bail_value = false;
   2b03c:	2000      	movs	r0, #0
   2b03e:	e7f8      	b.n	2b032 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2b040:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2b044:	694e      	ldr	r6, [r1, #20]
   2b046:	42b5      	cmp	r5, r6
   2b048:	d303      	bcc.n	2b052 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2b04a:	f06f 030b 	mvn.w	r3, #11
   2b04e:	618b      	str	r3, [r1, #24]
		return true;
   2b050:	e7f4      	b.n	2b03c <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2b052:	1b1b      	subs	r3, r3, r4
   2b054:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2b058:	6843      	ldr	r3, [r0, #4]
   2b05a:	6908      	ldr	r0, [r1, #16]
   2b05c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2b060:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2b062:	690b      	ldr	r3, [r1, #16]
   2b064:	3301      	adds	r3, #1
   2b066:	610b      	str	r3, [r1, #16]
	return true;
   2b068:	e7e2      	b.n	2b030 <get_sectors_cb+0xa>

0002b06a <settings_load>:
	return settings_load_subtree(NULL);
   2b06a:	2000      	movs	r0, #0
   2b06c:	f7e8 bc66 	b.w	1393c <settings_load_subtree>

0002b070 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2b070:	2200      	movs	r2, #0
   2b072:	4611      	mov	r1, r2
   2b074:	f7e8 bc28 	b.w	138c8 <settings_save_one>

0002b078 <settings_name_steq>:
{
   2b078:	4603      	mov	r3, r0
   2b07a:	b510      	push	{r4, lr}
   2b07c:	4608      	mov	r0, r1
	if (next) {
   2b07e:	b10a      	cbz	r2, 2b084 <settings_name_steq+0xc>
		*next = NULL;
   2b080:	2100      	movs	r1, #0
   2b082:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2b084:	b153      	cbz	r3, 2b09c <settings_name_steq+0x24>
   2b086:	b1d0      	cbz	r0, 2b0be <settings_name_steq+0x46>
   2b088:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2b08a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b08e:	b180      	cbz	r0, 2b0b2 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2b090:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b094:	42a0      	cmp	r0, r4
   2b096:	d101      	bne.n	2b09c <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2b098:	283d      	cmp	r0, #61	; 0x3d
   2b09a:	d1f6      	bne.n	2b08a <settings_name_steq+0x12>
		return 0;
   2b09c:	2000      	movs	r0, #0
   2b09e:	e00e      	b.n	2b0be <settings_name_steq+0x46>
			*next = name + 1;
   2b0a0:	3301      	adds	r3, #1
   2b0a2:	6013      	str	r3, [r2, #0]
   2b0a4:	e00a      	b.n	2b0bc <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2b0a6:	283d      	cmp	r0, #61	; 0x3d
   2b0a8:	d008      	beq.n	2b0bc <settings_name_steq+0x44>
   2b0aa:	fab0 f080 	clz	r0, r0
   2b0ae:	0940      	lsrs	r0, r0, #5
   2b0b0:	e005      	b.n	2b0be <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2b0b2:	7818      	ldrb	r0, [r3, #0]
   2b0b4:	282f      	cmp	r0, #47	; 0x2f
   2b0b6:	d1f6      	bne.n	2b0a6 <settings_name_steq+0x2e>
		if (next) {
   2b0b8:	2a00      	cmp	r2, #0
   2b0ba:	d1f1      	bne.n	2b0a0 <settings_name_steq+0x28>
		return 1;
   2b0bc:	2001      	movs	r0, #1
}
   2b0be:	bd10      	pop	{r4, pc}

0002b0c0 <settings_name_next>:
{
   2b0c0:	b510      	push	{r4, lr}
	if (next) {
   2b0c2:	b109      	cbz	r1, 2b0c8 <settings_name_next+0x8>
		*next = NULL;
   2b0c4:	2300      	movs	r3, #0
   2b0c6:	600b      	str	r3, [r1, #0]
	if (!name) {
   2b0c8:	b158      	cbz	r0, 2b0e2 <settings_name_next+0x22>
   2b0ca:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2b0cc:	781a      	ldrb	r2, [r3, #0]
   2b0ce:	461c      	mov	r4, r3
   2b0d0:	3301      	adds	r3, #1
   2b0d2:	b12a      	cbz	r2, 2b0e0 <settings_name_next+0x20>
   2b0d4:	2a3d      	cmp	r2, #61	; 0x3d
   2b0d6:	d003      	beq.n	2b0e0 <settings_name_next+0x20>
   2b0d8:	2a2f      	cmp	r2, #47	; 0x2f
   2b0da:	d1f7      	bne.n	2b0cc <settings_name_next+0xc>
		if (next) {
   2b0dc:	b101      	cbz	r1, 2b0e0 <settings_name_next+0x20>
			*next = name + 1;
   2b0de:	600b      	str	r3, [r1, #0]
   2b0e0:	1a20      	subs	r0, r4, r0
}
   2b0e2:	bd10      	pop	{r4, pc}

0002b0e4 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2b0e4:	3008      	adds	r0, #8
   2b0e6:	4770      	bx	lr

0002b0e8 <settings_nvs_read_fn>:
{
   2b0e8:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b0ea:	4613      	mov	r3, r2
{
   2b0ec:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2b0ee:	460a      	mov	r2, r1
   2b0f0:	8881      	ldrh	r1, [r0, #4]
   2b0f2:	6800      	ldr	r0, [r0, #0]
   2b0f4:	f7ff ff8f 	bl	2b016 <nvs_read>
}
   2b0f8:	42a0      	cmp	r0, r4
   2b0fa:	bfa8      	it	ge
   2b0fc:	4620      	movge	r0, r4
   2b0fe:	bd10      	pop	{r4, pc}

0002b100 <settings_nvs_save>:
{
   2b100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b104:	b097      	sub	sp, #92	; 0x5c
   2b106:	4604      	mov	r4, r0
   2b108:	9201      	str	r2, [sp, #4]
   2b10a:	469a      	mov	sl, r3
	if (!name) {
   2b10c:	4689      	mov	r9, r1
   2b10e:	2900      	cmp	r1, #0
   2b110:	d07e      	beq.n	2b210 <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2b112:	b1da      	cbz	r2, 2b14c <settings_nvs_save+0x4c>
   2b114:	faba f78a 	clz	r7, sl
   2b118:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2b11a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2b11c:	3501      	adds	r5, #1
   2b11e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2b120:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b122:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   2b126:	1e6e      	subs	r6, r5, #1
   2b128:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2b12a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2b12e:	d029      	beq.n	2b184 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2b130:	234a      	movs	r3, #74	; 0x4a
   2b132:	aa03      	add	r2, sp, #12
   2b134:	4631      	mov	r1, r6
   2b136:	4658      	mov	r0, fp
   2b138:	f7ff ff6d 	bl	2b016 <nvs_read>
		if (rc < 0) {
   2b13c:	2800      	cmp	r0, #0
   2b13e:	da07      	bge.n	2b150 <settings_nvs_save+0x50>
		name_id--;
   2b140:	f110 0f02 	cmn.w	r0, #2
   2b144:	bf08      	it	eq
   2b146:	46b0      	moveq	r8, r6
   2b148:	4635      	mov	r5, r6
   2b14a:	e7ec      	b.n	2b126 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2b14c:	2701      	movs	r7, #1
   2b14e:	e7e4      	b.n	2b11a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2b150:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2b154:	eb0d 0003 	add.w	r0, sp, r3
   2b158:	2300      	movs	r3, #0
   2b15a:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2b15e:	a903      	add	r1, sp, #12
   2b160:	4648      	mov	r0, r9
   2b162:	f000 fc82 	bl	2ba6a <strcmp>
   2b166:	2800      	cmp	r0, #0
   2b168:	d1ee      	bne.n	2b148 <settings_nvs_save+0x48>
		if (!delete) {
   2b16a:	b32f      	cbz	r7, 2b1b8 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2b16c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b16e:	42b3      	cmp	r3, r6
   2b170:	d00b      	beq.n	2b18a <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2b172:	4631      	mov	r1, r6
   2b174:	4658      	mov	r0, fp
   2b176:	f7ff ff4a 	bl	2b00e <nvs_delete>
		if (rc >= 0) {
   2b17a:	2800      	cmp	r0, #0
   2b17c:	da12      	bge.n	2b1a4 <settings_nvs_save+0xa4>
}
   2b17e:	b017      	add	sp, #92	; 0x5c
   2b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2b184:	b3b7      	cbz	r7, 2b1f4 <settings_nvs_save+0xf4>
			return 0;
   2b186:	2000      	movs	r0, #0
   2b188:	e7f9      	b.n	2b17e <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2b18a:	4622      	mov	r2, r4
   2b18c:	1e73      	subs	r3, r6, #1
   2b18e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2b192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b196:	2302      	movs	r3, #2
   2b198:	4658      	mov	r0, fp
   2b19a:	f7e8 fa03 	bl	135a4 <nvs_write>
			if (rc < 0) {
   2b19e:	2800      	cmp	r0, #0
   2b1a0:	dae7      	bge.n	2b172 <settings_nvs_save+0x72>
   2b1a2:	e7ec      	b.n	2b17e <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2b1a4:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2b1a8:	313f      	adds	r1, #63	; 0x3f
   2b1aa:	b289      	uxth	r1, r1
   2b1ac:	4658      	mov	r0, fp
   2b1ae:	f7ff ff2e 	bl	2b00e <nvs_delete>
	if (rc < 0) {
   2b1b2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2b1b6:	e7e2      	b.n	2b17e <settings_nvs_save+0x7e>
		name_id--;
   2b1b8:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2b1ba:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2b1be:	d02a      	beq.n	2b216 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2b1c0:	f104 0508 	add.w	r5, r4, #8
   2b1c4:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2b1c8:	9a01      	ldr	r2, [sp, #4]
   2b1ca:	4653      	mov	r3, sl
   2b1cc:	b289      	uxth	r1, r1
   2b1ce:	4628      	mov	r0, r5
   2b1d0:	f7e8 f9e8 	bl	135a4 <nvs_write>
	if (rc < 0) {
   2b1d4:	2800      	cmp	r0, #0
   2b1d6:	dbd2      	blt.n	2b17e <settings_nvs_save+0x7e>
	if (write_name) {
   2b1d8:	b977      	cbnz	r7, 2b1f8 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2b1da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2b1dc:	4543      	cmp	r3, r8
   2b1de:	d2d2      	bcs.n	2b186 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2b1e0:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b1e2:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2b1e4:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2b1e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b1ec:	4628      	mov	r0, r5
   2b1ee:	f7e8 f9d9 	bl	135a4 <nvs_write>
   2b1f2:	e7de      	b.n	2b1b2 <settings_nvs_save+0xb2>
	write_name = true;
   2b1f4:	2701      	movs	r7, #1
   2b1f6:	e7e0      	b.n	2b1ba <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2b1f8:	4648      	mov	r0, r9
   2b1fa:	f000 fc26 	bl	2ba4a <strlen>
   2b1fe:	464a      	mov	r2, r9
   2b200:	4603      	mov	r3, r0
   2b202:	4641      	mov	r1, r8
   2b204:	4628      	mov	r0, r5
   2b206:	f7e8 f9cd 	bl	135a4 <nvs_write>
		if (rc < 0) {
   2b20a:	2800      	cmp	r0, #0
   2b20c:	dae5      	bge.n	2b1da <settings_nvs_save+0xda>
   2b20e:	e7b6      	b.n	2b17e <settings_nvs_save+0x7e>
		return -EINVAL;
   2b210:	f06f 0015 	mvn.w	r0, #21
   2b214:	e7b3      	b.n	2b17e <settings_nvs_save+0x7e>
		return -ENOMEM;
   2b216:	f06f 000b 	mvn.w	r0, #11
   2b21a:	e7b0      	b.n	2b17e <settings_nvs_save+0x7e>

0002b21c <settings_nvs_backend_init>:
{
   2b21c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2b21e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2b220:	6303      	str	r3, [r0, #48]	; 0x30
{
   2b222:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   2b224:	b1c3      	cbz	r3, 2b258 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2b226:	f100 0608 	add.w	r6, r0, #8
   2b22a:	4630      	mov	r0, r6
   2b22c:	f7e8 f820 	bl	13270 <nvs_mount>
	if (rc) {
   2b230:	4605      	mov	r5, r0
   2b232:	b970      	cbnz	r0, 2b252 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2b234:	2302      	movs	r3, #2
   2b236:	f10d 0206 	add.w	r2, sp, #6
   2b23a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2b23e:	4630      	mov	r0, r6
   2b240:	f7ff fee9 	bl	2b016 <nvs_read>
	if (rc < 0) {
   2b244:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2b246:	bfac      	ite	ge
   2b248:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2b24c:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2b250:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2b252:	4628      	mov	r0, r5
   2b254:	b002      	add	sp, #8
   2b256:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b258:	f06f 0512 	mvn.w	r5, #18
   2b25c:	e7f9      	b.n	2b252 <settings_nvs_backend_init+0x36>

0002b25e <attr_find_by_handle>:
{
   2b25e:	b570      	push	{r4, r5, r6, lr}
   2b260:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   2b262:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2b266:	b1a8      	cbz	r0, 2b294 <attr_find_by_handle+0x36>
	ssize_t upper = dm->cur_attr_id - 1;
   2b268:	1e45      	subs	r5, r0, #1
	ssize_t lower = 0;
   2b26a:	2600      	movs	r6, #0
	while (upper >= lower) {
   2b26c:	42ae      	cmp	r6, r5
   2b26e:	dd01      	ble.n	2b274 <attr_find_by_handle+0x16>
		return NULL;
   2b270:	2000      	movs	r0, #0
   2b272:	e00f      	b.n	2b294 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   2b274:	1972      	adds	r2, r6, r5
   2b276:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2b27a:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   2b27c:	1cd0      	adds	r0, r2, #3
   2b27e:	00c3      	lsls	r3, r0, #3
   2b280:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2b284:	8900      	ldrh	r0, [r0, #8]
   2b286:	4288      	cmp	r0, r1
   2b288:	d201      	bcs.n	2b28e <attr_find_by_handle+0x30>
			lower = m + 1;
   2b28a:	1c56      	adds	r6, r2, #1
   2b28c:	e7ee      	b.n	2b26c <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   2b28e:	d802      	bhi.n	2b296 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2b290:	3304      	adds	r3, #4
   2b292:	18e0      	adds	r0, r4, r3
}
   2b294:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   2b296:	1e55      	subs	r5, r2, #1
   2b298:	e7e8      	b.n	2b26c <attr_find_by_handle+0xe>

0002b29a <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   2b29a:	2300      	movs	r3, #0
{
   2b29c:	b510      	push	{r4, lr}
   2b29e:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   2b2a0:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   2b2a4:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   2b2a8:	b910      	cbnz	r0, 2b2b0 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   2b2aa:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   2b2ae:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b2b0:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   2b2b4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2b2b6:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b2ba:	4290      	cmp	r0, r2
	list->tail = node;
   2b2bc:	bf08      	it	eq
   2b2be:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   2b2c2:	f003 fe22 	bl	2ef0a <k_free>
   2b2c6:	e7ed      	b.n	2b2a4 <svc_attr_memory_release+0xa>

0002b2c8 <atomic_and>:
{
   2b2c8:	b510      	push	{r4, lr}
   2b2ca:	4603      	mov	r3, r0
}
   2b2cc:	f3bf 8f5b 	dmb	ish
   2b2d0:	e853 0f00 	ldrex	r0, [r3]
   2b2d4:	ea00 0201 	and.w	r2, r0, r1
   2b2d8:	e843 2400 	strex	r4, r2, [r3]
   2b2dc:	2c00      	cmp	r4, #0
   2b2de:	d1f7      	bne.n	2b2d0 <atomic_and+0x8>
   2b2e0:	f3bf 8f5b 	dmb	ish
   2b2e4:	bd10      	pop	{r4, pc}

0002b2e6 <discovery_complete_error>:
{
   2b2e6:	b570      	push	{r4, r5, r6, lr}
   2b2e8:	4604      	mov	r4, r0
   2b2ea:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   2b2ec:	f7ff ffd5 	bl	2b29a <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b2f0:	f06f 0101 	mvn.w	r1, #1
   2b2f4:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2b2f8:	f7ff ffe6 	bl	2b2c8 <atomic_and>
	if (dm->callback->error_found) {
   2b2fc:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2b300:	689b      	ldr	r3, [r3, #8]
   2b302:	b12b      	cbz	r3, 2b310 <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2b304:	6862      	ldr	r2, [r4, #4]
   2b306:	6820      	ldr	r0, [r4, #0]
   2b308:	4629      	mov	r1, r5
}
   2b30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   2b30e:	4718      	bx	r3
}
   2b310:	bd70      	pop	{r4, r5, r6, pc}

0002b312 <discovery_complete_not_found>:
{
   2b312:	b510      	push	{r4, lr}
   2b314:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   2b316:	f7ff ffc0 	bl	2b29a <svc_attr_memory_release>
   2b31a:	f06f 0101 	mvn.w	r1, #1
   2b31e:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2b322:	f7ff ffd1 	bl	2b2c8 <atomic_and>
	if (dm->callback->service_not_found) {
   2b326:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2b32a:	685b      	ldr	r3, [r3, #4]
   2b32c:	b123      	cbz	r3, 2b338 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   2b32e:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   2b332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   2b336:	4718      	bx	r3
}
   2b338:	bd10      	pop	{r4, pc}

0002b33a <bt_gatt_dm_attr_service_val>:
{
   2b33a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b33c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2b340:	6801      	ldr	r1, [r0, #0]
   2b342:	f8ad 3002 	strh.w	r3, [sp, #2]
{
   2b346:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b348:	2400      	movs	r4, #0
   2b34a:	4668      	mov	r0, sp
   2b34c:	f88d 4000 	strb.w	r4, [sp]
   2b350:	f000 fc66 	bl	2bc20 <bt_uuid_cmp>
   2b354:	b918      	cbnz	r0, 2b35e <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   2b356:	6828      	ldr	r0, [r5, #0]
   2b358:	3808      	subs	r0, #8
}
   2b35a:	b003      	add	sp, #12
   2b35c:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2b35e:	f642 0301 	movw	r3, #10241	; 0x2801
   2b362:	6829      	ldr	r1, [r5, #0]
   2b364:	f88d 4004 	strb.w	r4, [sp, #4]
   2b368:	a801      	add	r0, sp, #4
   2b36a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b36e:	f000 fc57 	bl	2bc20 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2b372:	2800      	cmp	r0, #0
   2b374:	d0ef      	beq.n	2b356 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   2b376:	4620      	mov	r0, r4
   2b378:	e7ef      	b.n	2b35a <bt_gatt_dm_attr_service_val+0x20>

0002b37a <bt_gatt_dm_attr_chrc_val>:
{
   2b37a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2b37c:	f642 0303 	movw	r3, #10243	; 0x2803
   2b380:	6801      	ldr	r1, [r0, #0]
   2b382:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   2b386:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2b388:	2400      	movs	r4, #0
   2b38a:	a801      	add	r0, sp, #4
   2b38c:	f88d 4004 	strb.w	r4, [sp, #4]
   2b390:	f000 fc46 	bl	2bc20 <bt_uuid_cmp>
   2b394:	b918      	cbnz	r0, 2b39e <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   2b396:	6828      	ldr	r0, [r5, #0]
   2b398:	3808      	subs	r0, #8
}
   2b39a:	b003      	add	sp, #12
   2b39c:	bd30      	pop	{r4, r5, pc}
	return NULL;
   2b39e:	4620      	mov	r0, r4
   2b3a0:	e7fb      	b.n	2b39a <bt_gatt_dm_attr_chrc_val+0x20>

0002b3a2 <bt_gatt_dm_conn_get>:
}
   2b3a2:	6800      	ldr	r0, [r0, #0]
   2b3a4:	4770      	bx	lr

0002b3a6 <bt_gatt_dm_service_get>:
}
   2b3a6:	301c      	adds	r0, #28
   2b3a8:	4770      	bx	lr

0002b3aa <bt_gatt_dm_char_next>:
{
   2b3aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   2b3ac:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   2b3b0:	b131      	cbz	r1, 2b3c0 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   2b3b2:	42a9      	cmp	r1, r5
   2b3b4:	d203      	bcs.n	2b3be <bt_gatt_dm_char_next+0x14>
	return NULL;
   2b3b6:	2500      	movs	r5, #0
}
   2b3b8:	4628      	mov	r0, r5
   2b3ba:	b003      	add	sp, #12
   2b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b3be:	460d      	mov	r5, r1
		const struct bt_gatt_dm_attr *const end =
   2b3c0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   2b3c4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2b3c8:	f100 041c 	add.w	r4, r0, #28
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2b3cc:	2600      	movs	r6, #0
   2b3ce:	f642 0703 	movw	r7, #10243	; 0x2803
		while (++prev < end) {
   2b3d2:	3508      	adds	r5, #8
   2b3d4:	42ac      	cmp	r4, r5
   2b3d6:	d9ee      	bls.n	2b3b6 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2b3d8:	6829      	ldr	r1, [r5, #0]
   2b3da:	f88d 6004 	strb.w	r6, [sp, #4]
   2b3de:	a801      	add	r0, sp, #4
   2b3e0:	f8ad 7006 	strh.w	r7, [sp, #6]
   2b3e4:	f000 fc1c 	bl	2bc20 <bt_uuid_cmp>
   2b3e8:	2800      	cmp	r0, #0
   2b3ea:	d1f2      	bne.n	2b3d2 <bt_gatt_dm_char_next+0x28>
   2b3ec:	e7e4      	b.n	2b3b8 <bt_gatt_dm_char_next+0xe>

0002b3ee <bt_gatt_dm_attr_next>:
{
   2b3ee:	4603      	mov	r3, r0
		prev = dm->attrs;
   2b3f0:	f100 021c 	add.w	r2, r0, #28
	if (!prev) {
   2b3f4:	b119      	cbz	r1, 2b3fe <bt_gatt_dm_attr_next+0x10>
	if (dm->attrs <= prev) {
   2b3f6:	4291      	cmp	r1, r2
   2b3f8:	d202      	bcs.n	2b400 <bt_gatt_dm_attr_next+0x12>
	return NULL;
   2b3fa:	2000      	movs	r0, #0
}
   2b3fc:	4770      	bx	lr
		prev = dm->attrs;
   2b3fe:	4611      	mov	r1, r2
		const struct bt_gatt_dm_attr *const end =
   2b400:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   2b404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		if (++prev < end) {
   2b408:	f101 0008 	add.w	r0, r1, #8
		const struct bt_gatt_dm_attr *const end =
   2b40c:	331c      	adds	r3, #28
	return NULL;
   2b40e:	4298      	cmp	r0, r3
   2b410:	bf28      	it	cs
   2b412:	2000      	movcs	r0, #0
   2b414:	4770      	bx	lr

0002b416 <bt_gatt_dm_desc_next>:
{
   2b416:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2b418:	f7ff ffe9 	bl	2b3ee <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2b41c:	4604      	mov	r4, r0
   2b41e:	b918      	cbnz	r0, 2b428 <bt_gatt_dm_desc_next+0x12>
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2b420:	2400      	movs	r4, #0
}
   2b422:	4620      	mov	r0, r4
   2b424:	b002      	add	sp, #8
   2b426:	bd10      	pop	{r4, pc}
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2b428:	2300      	movs	r3, #0
   2b42a:	6801      	ldr	r1, [r0, #0]
   2b42c:	f88d 3004 	strb.w	r3, [sp, #4]
   2b430:	a801      	add	r0, sp, #4
   2b432:	f642 0303 	movw	r3, #10243	; 0x2803
   2b436:	f8ad 3006 	strh.w	r3, [sp, #6]
   2b43a:	f000 fbf1 	bl	2bc20 <bt_uuid_cmp>
   2b43e:	2800      	cmp	r0, #0
   2b440:	d1ef      	bne.n	2b422 <bt_gatt_dm_desc_next+0xc>
   2b442:	e7ed      	b.n	2b420 <bt_gatt_dm_desc_next+0xa>

0002b444 <bt_gatt_dm_desc_by_uuid>:
{
   2b444:	b570      	push	{r4, r5, r6, lr}
   2b446:	4605      	mov	r5, r0
   2b448:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   2b44a:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   2b44c:	4621      	mov	r1, r4
   2b44e:	4628      	mov	r0, r5
   2b450:	f7ff ffe1 	bl	2b416 <bt_gatt_dm_desc_next>
   2b454:	4604      	mov	r4, r0
   2b456:	b128      	cbz	r0, 2b464 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   2b458:	6821      	ldr	r1, [r4, #0]
   2b45a:	4630      	mov	r0, r6
   2b45c:	f000 fbe0 	bl	2bc20 <bt_uuid_cmp>
   2b460:	2800      	cmp	r0, #0
   2b462:	d1f3      	bne.n	2b44c <bt_gatt_dm_desc_by_uuid+0x8>
}
   2b464:	4620      	mov	r0, r4
   2b466:	bd70      	pop	{r4, r5, r6, pc}

0002b468 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   2b468:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2b46a:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   2b46e:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b470:	f06f 0102 	mvn.w	r1, #2
   2b474:	4628      	mov	r0, r5
   2b476:	f7ff ff27 	bl	2b2c8 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2b47a:	0783      	lsls	r3, r0, #30
   2b47c:	d509      	bpl.n	2b492 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   2b47e:	4620      	mov	r0, r4
   2b480:	f7ff ff0b 	bl	2b29a <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b484:	f06f 0101 	mvn.w	r1, #1
   2b488:	4628      	mov	r0, r5
   2b48a:	f7ff ff1d 	bl	2b2c8 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   2b48e:	2000      	movs	r0, #0
}
   2b490:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   2b492:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b496:	e7fb      	b.n	2b490 <bt_gatt_dm_data_release+0x28>

0002b498 <adv_data_found>:
{
   2b498:	b510      	push	{r4, lr}
   2b49a:	4604      	mov	r4, r0
   2b49c:	4608      	mov	r0, r1
	switch (data->type) {
   2b49e:	7823      	ldrb	r3, [r4, #0]
   2b4a0:	2b05      	cmp	r3, #5
   2b4a2:	d806      	bhi.n	2b4b2 <adv_data_found+0x1a>
   2b4a4:	2b03      	cmp	r3, #3
   2b4a6:	d80e      	bhi.n	2b4c6 <adv_data_found+0x2e>
   2b4a8:	3b02      	subs	r3, #2
   2b4aa:	2b01      	cmp	r3, #1
   2b4ac:	d906      	bls.n	2b4bc <adv_data_found+0x24>
}
   2b4ae:	2001      	movs	r0, #1
   2b4b0:	bd10      	pop	{r4, pc}
	switch (data->type) {
   2b4b2:	3b06      	subs	r3, #6
   2b4b4:	2b01      	cmp	r3, #1
   2b4b6:	d8fa      	bhi.n	2b4ae <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2b4b8:	2202      	movs	r2, #2
   2b4ba:	e000      	b.n	2b4be <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2b4bc:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2b4be:	4621      	mov	r1, r4
   2b4c0:	f7e9 f830 	bl	14524 <uuid_check>
		break;
   2b4c4:	e7f3      	b.n	2b4ae <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   2b4c6:	2201      	movs	r2, #1
   2b4c8:	e7f9      	b.n	2b4be <adv_data_found+0x26>

0002b4ca <bt_scan_stop>:
	return bt_le_scan_stop();
   2b4ca:	f7ec bcf1 	b.w	17eb0 <bt_le_scan_stop>

0002b4ce <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2b4ce:	b538      	push	{r3, r4, r5, lr}
   2b4d0:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2b4d2:	42ab      	cmp	r3, r5
{
   2b4d4:	4611      	mov	r1, r2
   2b4d6:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2b4d8:	d804      	bhi.n	2b4e4 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2b4da:	461a      	mov	r2, r3
   2b4dc:	f000 fb0c 	bl	2baf8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2b4e0:	4620      	mov	r0, r4
   2b4e2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2b4e4:	2400      	movs	r4, #0
   2b4e6:	e7fb      	b.n	2b4e0 <_copy+0x12>

0002b4e8 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2b4e8:	f000 bb11 	b.w	2bb0e <memset>

0002b4ec <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2b4ec:	09c3      	lsrs	r3, r0, #7
   2b4ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2b4f2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b4f6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2b4fa:	b2c0      	uxtb	r0, r0
   2b4fc:	4770      	bx	lr

0002b4fe <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2b4fe:	78cb      	ldrb	r3, [r1, #3]
   2b500:	7802      	ldrb	r2, [r0, #0]
   2b502:	4053      	eors	r3, r2
   2b504:	7003      	strb	r3, [r0, #0]
   2b506:	884b      	ldrh	r3, [r1, #2]
   2b508:	7842      	ldrb	r2, [r0, #1]
   2b50a:	4053      	eors	r3, r2
   2b50c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2b50e:	680a      	ldr	r2, [r1, #0]
   2b510:	7883      	ldrb	r3, [r0, #2]
   2b512:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b516:	7083      	strb	r3, [r0, #2]
   2b518:	680a      	ldr	r2, [r1, #0]
   2b51a:	78c3      	ldrb	r3, [r0, #3]
   2b51c:	4053      	eors	r3, r2
   2b51e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2b520:	79cb      	ldrb	r3, [r1, #7]
   2b522:	7902      	ldrb	r2, [r0, #4]
   2b524:	4053      	eors	r3, r2
   2b526:	7103      	strb	r3, [r0, #4]
   2b528:	88cb      	ldrh	r3, [r1, #6]
   2b52a:	7942      	ldrb	r2, [r0, #5]
   2b52c:	4053      	eors	r3, r2
   2b52e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2b530:	684a      	ldr	r2, [r1, #4]
   2b532:	7983      	ldrb	r3, [r0, #6]
   2b534:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b538:	7183      	strb	r3, [r0, #6]
   2b53a:	684a      	ldr	r2, [r1, #4]
   2b53c:	79c3      	ldrb	r3, [r0, #7]
   2b53e:	4053      	eors	r3, r2
   2b540:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2b542:	7acb      	ldrb	r3, [r1, #11]
   2b544:	7a02      	ldrb	r2, [r0, #8]
   2b546:	4053      	eors	r3, r2
   2b548:	7203      	strb	r3, [r0, #8]
   2b54a:	7a42      	ldrb	r2, [r0, #9]
   2b54c:	894b      	ldrh	r3, [r1, #10]
   2b54e:	4053      	eors	r3, r2
   2b550:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2b552:	688a      	ldr	r2, [r1, #8]
   2b554:	7a83      	ldrb	r3, [r0, #10]
   2b556:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b55a:	7283      	strb	r3, [r0, #10]
   2b55c:	688a      	ldr	r2, [r1, #8]
   2b55e:	7ac3      	ldrb	r3, [r0, #11]
   2b560:	4053      	eors	r3, r2
   2b562:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2b564:	7bcb      	ldrb	r3, [r1, #15]
   2b566:	7b02      	ldrb	r2, [r0, #12]
   2b568:	4053      	eors	r3, r2
   2b56a:	7303      	strb	r3, [r0, #12]
   2b56c:	89cb      	ldrh	r3, [r1, #14]
   2b56e:	7b42      	ldrb	r2, [r0, #13]
   2b570:	4053      	eors	r3, r2
   2b572:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2b574:	68ca      	ldr	r2, [r1, #12]
   2b576:	7b83      	ldrb	r3, [r0, #14]
   2b578:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2b57c:	7383      	strb	r3, [r0, #14]
   2b57e:	68ca      	ldr	r2, [r1, #12]
   2b580:	7bc3      	ldrb	r3, [r0, #15]
   2b582:	4053      	eors	r3, r2
   2b584:	73c3      	strb	r3, [r0, #15]
}
   2b586:	4770      	bx	lr

0002b588 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2b588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2b58a:	7802      	ldrb	r2, [r0, #0]
   2b58c:	f88d 2000 	strb.w	r2, [sp]
   2b590:	7942      	ldrb	r2, [r0, #5]
   2b592:	f88d 2001 	strb.w	r2, [sp, #1]
   2b596:	7a82      	ldrb	r2, [r0, #10]
   2b598:	f88d 2002 	strb.w	r2, [sp, #2]
   2b59c:	7bc2      	ldrb	r2, [r0, #15]
   2b59e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2b5a2:	7902      	ldrb	r2, [r0, #4]
   2b5a4:	f88d 2004 	strb.w	r2, [sp, #4]
   2b5a8:	7a42      	ldrb	r2, [r0, #9]
   2b5aa:	f88d 2005 	strb.w	r2, [sp, #5]
   2b5ae:	7b82      	ldrb	r2, [r0, #14]
   2b5b0:	f88d 2006 	strb.w	r2, [sp, #6]
   2b5b4:	78c2      	ldrb	r2, [r0, #3]
   2b5b6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2b5ba:	7a02      	ldrb	r2, [r0, #8]
   2b5bc:	f88d 2008 	strb.w	r2, [sp, #8]
   2b5c0:	7b42      	ldrb	r2, [r0, #13]
   2b5c2:	f88d 2009 	strb.w	r2, [sp, #9]
   2b5c6:	7882      	ldrb	r2, [r0, #2]
   2b5c8:	f88d 200a 	strb.w	r2, [sp, #10]
   2b5cc:	79c2      	ldrb	r2, [r0, #7]
   2b5ce:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2b5d2:	7b02      	ldrb	r2, [r0, #12]
   2b5d4:	f88d 200c 	strb.w	r2, [sp, #12]
   2b5d8:	7842      	ldrb	r2, [r0, #1]
   2b5da:	7ac3      	ldrb	r3, [r0, #11]
   2b5dc:	f88d 200d 	strb.w	r2, [sp, #13]
   2b5e0:	7982      	ldrb	r2, [r0, #6]
   2b5e2:	f88d 200e 	strb.w	r2, [sp, #14]
   2b5e6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b5ea:	2310      	movs	r3, #16
   2b5ec:	466a      	mov	r2, sp
   2b5ee:	4619      	mov	r1, r3
   2b5f0:	f7ff ff6d 	bl	2b4ce <_copy>
}
   2b5f4:	b005      	add	sp, #20
   2b5f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b5fa <mult_row_column>:
{
   2b5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5fc:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b5fe:	7808      	ldrb	r0, [r1, #0]
{
   2b600:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2b602:	f7ff ff73 	bl	2b4ec <_double_byte>
   2b606:	4605      	mov	r5, r0
   2b608:	7860      	ldrb	r0, [r4, #1]
   2b60a:	f7ff ff6f 	bl	2b4ec <_double_byte>
   2b60e:	78a2      	ldrb	r2, [r4, #2]
   2b610:	7863      	ldrb	r3, [r4, #1]
   2b612:	4053      	eors	r3, r2
   2b614:	78e2      	ldrb	r2, [r4, #3]
   2b616:	4053      	eors	r3, r2
   2b618:	405d      	eors	r5, r3
   2b61a:	4068      	eors	r0, r5
   2b61c:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2b61e:	7860      	ldrb	r0, [r4, #1]
   2b620:	7827      	ldrb	r7, [r4, #0]
   2b622:	f7ff ff63 	bl	2b4ec <_double_byte>
   2b626:	4605      	mov	r5, r0
   2b628:	78a0      	ldrb	r0, [r4, #2]
   2b62a:	f7ff ff5f 	bl	2b4ec <_double_byte>
   2b62e:	78a3      	ldrb	r3, [r4, #2]
   2b630:	405f      	eors	r7, r3
   2b632:	78e3      	ldrb	r3, [r4, #3]
   2b634:	405f      	eors	r7, r3
   2b636:	407d      	eors	r5, r7
   2b638:	4068      	eors	r0, r5
   2b63a:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2b63c:	7863      	ldrb	r3, [r4, #1]
   2b63e:	7827      	ldrb	r7, [r4, #0]
   2b640:	78a0      	ldrb	r0, [r4, #2]
   2b642:	405f      	eors	r7, r3
   2b644:	f7ff ff52 	bl	2b4ec <_double_byte>
   2b648:	4605      	mov	r5, r0
   2b64a:	78e0      	ldrb	r0, [r4, #3]
   2b64c:	f7ff ff4e 	bl	2b4ec <_double_byte>
   2b650:	78e3      	ldrb	r3, [r4, #3]
   2b652:	405f      	eors	r7, r3
   2b654:	407d      	eors	r5, r7
   2b656:	4068      	eors	r0, r5
   2b658:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2b65a:	7820      	ldrb	r0, [r4, #0]
   2b65c:	f7ff ff46 	bl	2b4ec <_double_byte>
   2b660:	7862      	ldrb	r2, [r4, #1]
   2b662:	7823      	ldrb	r3, [r4, #0]
   2b664:	4053      	eors	r3, r2
   2b666:	78a2      	ldrb	r2, [r4, #2]
   2b668:	4053      	eors	r3, r2
   2b66a:	ea80 0503 	eor.w	r5, r0, r3
   2b66e:	78e0      	ldrb	r0, [r4, #3]
   2b670:	f7ff ff3c 	bl	2b4ec <_double_byte>
   2b674:	b2ed      	uxtb	r5, r5
   2b676:	4045      	eors	r5, r0
   2b678:	70f5      	strb	r5, [r6, #3]
}
   2b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b67c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2b67c:	b570      	push	{r4, r5, r6, lr}
   2b67e:	4614      	mov	r4, r2
   2b680:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2b682:	4605      	mov	r5, r0
   2b684:	2800      	cmp	r0, #0
   2b686:	d049      	beq.n	2b71c <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2b688:	2900      	cmp	r1, #0
   2b68a:	d049      	beq.n	2b720 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2b68c:	2a00      	cmp	r2, #0
   2b68e:	d049      	beq.n	2b724 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2b690:	2310      	movs	r3, #16
   2b692:	460a      	mov	r2, r1
   2b694:	4668      	mov	r0, sp
   2b696:	4619      	mov	r1, r3
   2b698:	f7ff ff19 	bl	2b4ce <_copy>
	add_round_key(state, s->words);
   2b69c:	4621      	mov	r1, r4
   2b69e:	4668      	mov	r0, sp
   2b6a0:	f7ff ff2d 	bl	2b4fe <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2b6a4:	3410      	adds	r4, #16
   2b6a6:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2b6aa:	4668      	mov	r0, sp
   2b6ac:	f7e9 f928 	bl	14900 <sub_bytes>
		shift_rows(state);
   2b6b0:	4668      	mov	r0, sp
   2b6b2:	f7ff ff69 	bl	2b588 <shift_rows>
	mult_row_column(t, s);
   2b6b6:	4669      	mov	r1, sp
   2b6b8:	a804      	add	r0, sp, #16
   2b6ba:	f7ff ff9e 	bl	2b5fa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2b6be:	a901      	add	r1, sp, #4
   2b6c0:	a805      	add	r0, sp, #20
   2b6c2:	f7ff ff9a 	bl	2b5fa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2b6c6:	a902      	add	r1, sp, #8
   2b6c8:	a806      	add	r0, sp, #24
   2b6ca:	f7ff ff96 	bl	2b5fa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2b6ce:	a903      	add	r1, sp, #12
   2b6d0:	a807      	add	r0, sp, #28
   2b6d2:	f7ff ff92 	bl	2b5fa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2b6d6:	2310      	movs	r3, #16
   2b6d8:	4619      	mov	r1, r3
   2b6da:	eb0d 0203 	add.w	r2, sp, r3
   2b6de:	4668      	mov	r0, sp
   2b6e0:	f7ff fef5 	bl	2b4ce <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2b6e4:	4621      	mov	r1, r4
   2b6e6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2b6e8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2b6ea:	f7ff ff08 	bl	2b4fe <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2b6ee:	42b4      	cmp	r4, r6
   2b6f0:	d1db      	bne.n	2b6aa <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2b6f2:	f7e9 f905 	bl	14900 <sub_bytes>
	shift_rows(state);
   2b6f6:	4668      	mov	r0, sp
   2b6f8:	f7ff ff46 	bl	2b588 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2b6fc:	4621      	mov	r1, r4
   2b6fe:	4668      	mov	r0, sp
   2b700:	f7ff fefd 	bl	2b4fe <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2b704:	2310      	movs	r3, #16
   2b706:	4619      	mov	r1, r3
   2b708:	466a      	mov	r2, sp
   2b70a:	4628      	mov	r0, r5
   2b70c:	f7ff fedf 	bl	2b4ce <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2b710:	4668      	mov	r0, sp
   2b712:	2210      	movs	r2, #16
   2b714:	2100      	movs	r1, #0
   2b716:	f7ff fee7 	bl	2b4e8 <_set>

	return TC_CRYPTO_SUCCESS;
   2b71a:	2001      	movs	r0, #1
}
   2b71c:	b008      	add	sp, #32
   2b71e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b720:	4608      	mov	r0, r1
   2b722:	e7fb      	b.n	2b71c <tc_aes_encrypt+0xa0>
   2b724:	4610      	mov	r0, r2
   2b726:	e7f9      	b.n	2b71c <tc_aes_encrypt+0xa0>

0002b728 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2b728:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b72a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2b72c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2b72e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2b732:	2b00      	cmp	r3, #0
   2b734:	bfac      	ite	ge
   2b736:	2300      	movge	r3, #0
   2b738:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2b73a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2b73e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2b742:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2b744:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2b748:	d002      	beq.n	2b750 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2b74a:	7813      	ldrb	r3, [r2, #0]
   2b74c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2b74e:	e7f4      	b.n	2b73a <gf_double+0x12>
	}
}
   2b750:	bd10      	pop	{r4, pc}

0002b752 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2b752:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2b754:	b120      	cbz	r0, 2b760 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2b756:	2258      	movs	r2, #88	; 0x58
   2b758:	2100      	movs	r1, #0
   2b75a:	f7ff fec5 	bl	2b4e8 <_set>
   2b75e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b760:	bd08      	pop	{r3, pc}

0002b762 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2b762:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b764:	4604      	mov	r4, r0
   2b766:	b188      	cbz	r0, 2b78c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b768:	2210      	movs	r2, #16
   2b76a:	2100      	movs	r1, #0
   2b76c:	f7ff febc 	bl	2b4e8 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2b770:	2210      	movs	r2, #16
   2b772:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b776:	2100      	movs	r1, #0
   2b778:	f7ff feb6 	bl	2b4e8 <_set>
	s->leftover_offset = 0;
   2b77c:	2300      	movs	r3, #0
   2b77e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2b780:	2200      	movs	r2, #0
   2b782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2b786:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2b78a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2b78c:	bd10      	pop	{r4, pc}

0002b78e <tc_cmac_setup>:
{
   2b78e:	b570      	push	{r4, r5, r6, lr}
   2b790:	4604      	mov	r4, r0
   2b792:	460d      	mov	r5, r1
   2b794:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2b796:	b310      	cbz	r0, 2b7de <tc_cmac_setup+0x50>
   2b798:	b311      	cbz	r1, 2b7e0 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2b79a:	2258      	movs	r2, #88	; 0x58
   2b79c:	2100      	movs	r1, #0
   2b79e:	f7ff fea3 	bl	2b4e8 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2b7a2:	4629      	mov	r1, r5
	s->sched = sched;
   2b7a4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2b7a6:	4630      	mov	r0, r6
   2b7a8:	f7e9 f8b6 	bl	14918 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b7ac:	2210      	movs	r2, #16
   2b7ae:	2100      	movs	r1, #0
   2b7b0:	4620      	mov	r0, r4
   2b7b2:	f7ff fe99 	bl	2b4e8 <_set>
	gf_double (s->K1, s->iv);
   2b7b6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b7ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b7bc:	4621      	mov	r1, r4
   2b7be:	4620      	mov	r0, r4
   2b7c0:	f7ff ff5c 	bl	2b67c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b7c4:	4621      	mov	r1, r4
   2b7c6:	4628      	mov	r0, r5
   2b7c8:	f7ff ffae 	bl	2b728 <gf_double>
	gf_double (s->K2, s->K1);
   2b7cc:	4629      	mov	r1, r5
   2b7ce:	f104 0020 	add.w	r0, r4, #32
   2b7d2:	f7ff ffa9 	bl	2b728 <gf_double>
	tc_cmac_init(s);
   2b7d6:	4620      	mov	r0, r4
   2b7d8:	f7ff ffc3 	bl	2b762 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b7dc:	2001      	movs	r0, #1
}
   2b7de:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b7e0:	4608      	mov	r0, r1
   2b7e2:	e7fc      	b.n	2b7de <tc_cmac_setup+0x50>

0002b7e4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7e8:	460e      	mov	r6, r1
   2b7ea:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b7ec:	4604      	mov	r4, r0
   2b7ee:	2800      	cmp	r0, #0
   2b7f0:	d060      	beq.n	2b8b4 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b7f2:	b1fa      	cbz	r2, 2b834 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b7f4:	2900      	cmp	r1, #0
   2b7f6:	d05d      	beq.n	2b8b4 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b7f8:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2b7fc:	ea53 0102 	orrs.w	r1, r3, r2
   2b800:	d058      	beq.n	2b8b4 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b802:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2b804:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2b808:	f142 32ff 	adc.w	r2, r2, #4294967295
   2b80c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2b810:	f1b8 0f00 	cmp.w	r8, #0
   2b814:	d02c      	beq.n	2b870 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b816:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b81a:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2b81e:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b820:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2b822:	d20a      	bcs.n	2b83a <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b824:	462b      	mov	r3, r5
   2b826:	4632      	mov	r2, r6
   2b828:	4629      	mov	r1, r5
   2b82a:	f7ff fe50 	bl	2b4ce <_copy>
			s->leftover_offset += data_length;
   2b82e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b830:	442b      	add	r3, r5
   2b832:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2b834:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2b836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2b83a:	463b      	mov	r3, r7
   2b83c:	4632      	mov	r2, r6
   2b83e:	4639      	mov	r1, r7
   2b840:	f7ff fe45 	bl	2b4ce <_copy>
		data_length -= remaining_space;
   2b844:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2b846:	2300      	movs	r3, #0
   2b848:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2b84a:	4445      	add	r5, r8
		data += remaining_space;
   2b84c:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b84e:	1e63      	subs	r3, r4, #1
   2b850:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2b854:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b858:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b85c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2b85e:	ea82 0200 	eor.w	r2, r2, r0
   2b862:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b864:	d1f6      	bne.n	2b854 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b866:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b868:	4621      	mov	r1, r4
   2b86a:	4620      	mov	r0, r4
   2b86c:	f7ff ff06 	bl	2b67c <tc_aes_encrypt>
   2b870:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b874:	2d10      	cmp	r5, #16
   2b876:	d80a      	bhi.n	2b88e <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2b878:	2d00      	cmp	r5, #0
   2b87a:	d0db      	beq.n	2b834 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2b87c:	462b      	mov	r3, r5
   2b87e:	4632      	mov	r2, r6
   2b880:	4629      	mov	r1, r5
   2b882:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b886:	f7ff fe22 	bl	2b4ce <_copy>
		s->leftover_offset = data_length;
   2b88a:	6465      	str	r5, [r4, #68]	; 0x44
   2b88c:	e7d2      	b.n	2b834 <tc_cmac_update+0x50>
   2b88e:	1e63      	subs	r3, r4, #1
   2b890:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2b892:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b896:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b89a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2b89c:	ea82 0200 	eor.w	r2, r2, r0
   2b8a0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8a2:	d1f6      	bne.n	2b892 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b8a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b8a6:	4621      	mov	r1, r4
   2b8a8:	4620      	mov	r0, r4
   2b8aa:	f7ff fee7 	bl	2b67c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b8ae:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b8b0:	3d10      	subs	r5, #16
   2b8b2:	e7df      	b.n	2b874 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2b8b4:	2000      	movs	r0, #0
   2b8b6:	e7be      	b.n	2b836 <tc_cmac_update+0x52>

0002b8b8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2b8b8:	b570      	push	{r4, r5, r6, lr}
   2b8ba:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b8bc:	4605      	mov	r5, r0
   2b8be:	b1e8      	cbz	r0, 2b8fc <tc_cmac_final+0x44>
   2b8c0:	b369      	cbz	r1, 2b91e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b8c2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b8c4:	2a10      	cmp	r2, #16
   2b8c6:	d11a      	bne.n	2b8fe <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b8c8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8ca:	1e63      	subs	r3, r4, #1
   2b8cc:	3901      	subs	r1, #1
   2b8ce:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8d2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2b8d6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2b8da:	4072      	eors	r2, r6
   2b8dc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8e0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b8e2:	ea82 0206 	eor.w	r2, r2, r6
   2b8e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b8e8:	d1f3      	bne.n	2b8d2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b8ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b8ec:	4621      	mov	r1, r4
   2b8ee:	4628      	mov	r0, r5
   2b8f0:	f7ff fec4 	bl	2b67c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b8f4:	4620      	mov	r0, r4
   2b8f6:	f7ff ff2c 	bl	2b752 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b8fa:	2001      	movs	r0, #1
}
   2b8fc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b8fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b902:	2100      	movs	r1, #0
   2b904:	f1c2 0210 	rsb	r2, r2, #16
   2b908:	4420      	add	r0, r4
   2b90a:	f7ff fded 	bl	2b4e8 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b90e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b910:	4423      	add	r3, r4
   2b912:	2280      	movs	r2, #128	; 0x80
   2b914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b918:	f104 0120 	add.w	r1, r4, #32
   2b91c:	e7d5      	b.n	2b8ca <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2b91e:	4608      	mov	r0, r1
   2b920:	e7ec      	b.n	2b8fc <tc_cmac_final+0x44>

0002b922 <abort_function>:
{
   2b922:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2b924:	2000      	movs	r0, #0
   2b926:	f7e7 fbfb 	bl	13120 <sys_reboot>

0002b92a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2b92a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2b92c:	6800      	ldr	r0, [r0, #0]
   2b92e:	f7e9 b951 	b.w	14bd4 <z_arm_fatal_error>

0002b932 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2b932:	2100      	movs	r1, #0
   2b934:	2001      	movs	r0, #1
   2b936:	f7e9 b94d 	b.w	14bd4 <z_arm_fatal_error>

0002b93a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2b93a:	b508      	push	{r3, lr}
	handler();
   2b93c:	f7e9 f9e0 	bl	14d00 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2b940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2b944:	f7e9 bab8 	b.w	14eb8 <z_arm_exc_exit>

0002b948 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b94c:	4684      	mov	ip, r0
   2b94e:	460f      	mov	r7, r1
	register const char *s = nptr;
   2b950:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2b952:	4621      	mov	r1, r4
   2b954:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2b958:	2b20      	cmp	r3, #32
   2b95a:	d0fa      	beq.n	2b952 <strtoul+0xa>
   2b95c:	f1a3 0009 	sub.w	r0, r3, #9
   2b960:	2804      	cmp	r0, #4
   2b962:	d9f6      	bls.n	2b952 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2b964:	2b2d      	cmp	r3, #45	; 0x2d
   2b966:	d125      	bne.n	2b9b4 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   2b968:	784b      	ldrb	r3, [r1, #1]
   2b96a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2b96c:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2b970:	bb3a      	cbnz	r2, 2b9c2 <strtoul+0x7a>
   2b972:	2b30      	cmp	r3, #48	; 0x30
   2b974:	d032      	beq.n	2b9dc <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2b976:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2b978:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2b97c:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2b97e:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2b982:	fb02 f801 	mul.w	r8, r2, r1
   2b986:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   2b98a:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2b98c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   2b990:	2e09      	cmp	r6, #9
   2b992:	d82a      	bhi.n	2b9ea <strtoul+0xa2>
			c -= '0';
   2b994:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2b996:	429a      	cmp	r2, r3
   2b998:	dd37      	ble.n	2ba0a <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2b99a:	1c6e      	adds	r6, r5, #1
   2b99c:	d007      	beq.n	2b9ae <strtoul+0x66>
   2b99e:	4288      	cmp	r0, r1
   2b9a0:	d830      	bhi.n	2ba04 <strtoul+0xbc>
   2b9a2:	d101      	bne.n	2b9a8 <strtoul+0x60>
   2b9a4:	4543      	cmp	r3, r8
   2b9a6:	dc2d      	bgt.n	2ba04 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2b9a8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2b9ac:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   2b9ae:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   2b9b2:	e7eb      	b.n	2b98c <strtoul+0x44>
	} else if (c == '+') {
   2b9b4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2b9b6:	bf04      	itt	eq
   2b9b8:	784b      	ldrbeq	r3, [r1, #1]
   2b9ba:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2b9bc:	f04f 0e00 	mov.w	lr, #0
   2b9c0:	e7d6      	b.n	2b970 <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   2b9c2:	2a10      	cmp	r2, #16
   2b9c4:	d1d8      	bne.n	2b978 <strtoul+0x30>
   2b9c6:	2b30      	cmp	r3, #48	; 0x30
   2b9c8:	d1d6      	bne.n	2b978 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2b9ca:	7821      	ldrb	r1, [r4, #0]
   2b9cc:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2b9d0:	2958      	cmp	r1, #88	; 0x58
   2b9d2:	d1d1      	bne.n	2b978 <strtoul+0x30>
		c = s[1];
   2b9d4:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2b9d6:	2210      	movs	r2, #16
		s += 2;
   2b9d8:	3402      	adds	r4, #2
	if (base == 0) {
   2b9da:	e7cd      	b.n	2b978 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2b9dc:	7822      	ldrb	r2, [r4, #0]
   2b9de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2b9e2:	2a58      	cmp	r2, #88	; 0x58
   2b9e4:	d0f6      	beq.n	2b9d4 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2b9e6:	2208      	movs	r2, #8
   2b9e8:	e7c6      	b.n	2b978 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2b9ea:	f043 0620 	orr.w	r6, r3, #32
   2b9ee:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   2b9f0:	2e19      	cmp	r6, #25
   2b9f2:	d80a      	bhi.n	2ba0a <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2b9f4:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   2b9f8:	2e1a      	cmp	r6, #26
   2b9fa:	bf34      	ite	cc
   2b9fc:	2637      	movcc	r6, #55	; 0x37
   2b9fe:	2657      	movcs	r6, #87	; 0x57
   2ba00:	1b9b      	subs	r3, r3, r6
   2ba02:	e7c8      	b.n	2b996 <strtoul+0x4e>
			any = -1;
   2ba04:	f04f 35ff 	mov.w	r5, #4294967295
   2ba08:	e7d1      	b.n	2b9ae <strtoul+0x66>
		}
	}
	if (any < 0) {
   2ba0a:	1c6b      	adds	r3, r5, #1
   2ba0c:	d107      	bne.n	2ba1e <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2ba0e:	f7f8 fa01 	bl	23e14 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2ba12:	2322      	movs	r3, #34	; 0x22
   2ba14:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2ba16:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2ba18:	b947      	cbnz	r7, 2ba2c <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2ba1e:	f1be 0f00 	cmp.w	lr, #0
   2ba22:	d000      	beq.n	2ba26 <strtoul+0xde>
		acc = -acc;
   2ba24:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2ba26:	2f00      	cmp	r7, #0
   2ba28:	d0f7      	beq.n	2ba1a <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2ba2a:	b10d      	cbz	r5, 2ba30 <strtoul+0xe8>
   2ba2c:	f104 3cff 	add.w	ip, r4, #4294967295
   2ba30:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2ba34:	e7f1      	b.n	2ba1a <strtoul+0xd2>

0002ba36 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2ba36:	3901      	subs	r1, #1
   2ba38:	4603      	mov	r3, r0
   2ba3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2ba3e:	b90a      	cbnz	r2, 2ba44 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2ba40:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2ba42:	4770      	bx	lr
		*d = *s;
   2ba44:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2ba48:	e7f7      	b.n	2ba3a <strcpy+0x4>

0002ba4a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2ba4a:	4603      	mov	r3, r0
	size_t n = 0;
   2ba4c:	2000      	movs	r0, #0

	while (*s != '\0') {
   2ba4e:	5c1a      	ldrb	r2, [r3, r0]
   2ba50:	b902      	cbnz	r2, 2ba54 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2ba52:	4770      	bx	lr
		n++;
   2ba54:	3001      	adds	r0, #1
   2ba56:	e7fa      	b.n	2ba4e <strlen+0x4>

0002ba58 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2ba58:	4603      	mov	r3, r0
	size_t n = 0;
   2ba5a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2ba5c:	5c1a      	ldrb	r2, [r3, r0]
   2ba5e:	b10a      	cbz	r2, 2ba64 <strnlen+0xc>
   2ba60:	4288      	cmp	r0, r1
   2ba62:	d100      	bne.n	2ba66 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2ba64:	4770      	bx	lr
		n++;
   2ba66:	3001      	adds	r0, #1
   2ba68:	e7f8      	b.n	2ba5c <strnlen+0x4>

0002ba6a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2ba6a:	1e43      	subs	r3, r0, #1
   2ba6c:	3901      	subs	r1, #1
   2ba6e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ba72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2ba76:	4282      	cmp	r2, r0
   2ba78:	d101      	bne.n	2ba7e <strcmp+0x14>
   2ba7a:	2a00      	cmp	r2, #0
   2ba7c:	d1f7      	bne.n	2ba6e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2ba7e:	1a10      	subs	r0, r2, r0
   2ba80:	4770      	bx	lr

0002ba82 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2ba82:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2ba84:	460b      	mov	r3, r1
   2ba86:	4605      	mov	r5, r0
   2ba88:	b16a      	cbz	r2, 2baa6 <strncmp+0x24>
   2ba8a:	f810 6b01 	ldrb.w	r6, [r0], #1
   2ba8e:	781c      	ldrb	r4, [r3, #0]
   2ba90:	42b4      	cmp	r4, r6
   2ba92:	f101 0101 	add.w	r1, r1, #1
   2ba96:	d100      	bne.n	2ba9a <strncmp+0x18>
   2ba98:	b91c      	cbnz	r4, 2baa2 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2ba9a:	782a      	ldrb	r2, [r5, #0]
   2ba9c:	781b      	ldrb	r3, [r3, #0]
   2ba9e:	1ad0      	subs	r0, r2, r3
   2baa0:	e002      	b.n	2baa8 <strncmp+0x26>
		n--;
   2baa2:	3a01      	subs	r2, #1
   2baa4:	e7ee      	b.n	2ba84 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   2baa6:	4610      	mov	r0, r2
}
   2baa8:	bd70      	pop	{r4, r5, r6, pc}

0002baaa <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2baaa:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2baac:	b15a      	cbz	r2, 2bac6 <memcmp+0x1c>
   2baae:	3901      	subs	r1, #1
   2bab0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2bab2:	f810 2b01 	ldrb.w	r2, [r0], #1
   2bab6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2baba:	42a0      	cmp	r0, r4
   2babc:	d001      	beq.n	2bac2 <memcmp+0x18>
   2babe:	429a      	cmp	r2, r3
   2bac0:	d0f7      	beq.n	2bab2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2bac2:	1ad0      	subs	r0, r2, r3
}
   2bac4:	bd10      	pop	{r4, pc}
		return 0;
   2bac6:	4610      	mov	r0, r2
   2bac8:	e7fc      	b.n	2bac4 <memcmp+0x1a>

0002baca <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2baca:	1a43      	subs	r3, r0, r1
   2bacc:	4293      	cmp	r3, r2
{
   2bace:	b510      	push	{r4, lr}
   2bad0:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2bad4:	d308      	bcc.n	2bae8 <memmove+0x1e>
   2bad6:	3901      	subs	r1, #1
	char *dest = d;
   2bad8:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2bada:	429a      	cmp	r2, r3
   2badc:	d00b      	beq.n	2baf6 <memmove+0x2c>
			*dest = *src;
   2bade:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2bae2:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2bae6:	e7f8      	b.n	2bada <memmove+0x10>
   2bae8:	440a      	add	r2, r1
			dest[n] = src[n];
   2baea:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2baee:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2baf2:	428a      	cmp	r2, r1
   2baf4:	d1f9      	bne.n	2baea <memmove+0x20>
		}
	}

	return d;
}
   2baf6:	bd10      	pop	{r4, pc}

0002baf8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2baf8:	b510      	push	{r4, lr}
   2bafa:	1e43      	subs	r3, r0, #1
   2bafc:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2bafe:	4291      	cmp	r1, r2
   2bb00:	d100      	bne.n	2bb04 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2bb02:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2bb04:	f811 4b01 	ldrb.w	r4, [r1], #1
   2bb08:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2bb0c:	e7f7      	b.n	2bafe <memcpy+0x6>

0002bb0e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2bb0e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2bb10:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2bb12:	4603      	mov	r3, r0
	while (n > 0) {
   2bb14:	4293      	cmp	r3, r2
   2bb16:	d100      	bne.n	2bb1a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2bb18:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2bb1a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2bb1e:	e7f9      	b.n	2bb14 <memset+0x6>

0002bb20 <_stdout_hook_default>:
}
   2bb20:	f04f 30ff 	mov.w	r0, #4294967295
   2bb24:	4770      	bx	lr

0002bb26 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2bb26:	2806      	cmp	r0, #6
   2bb28:	d108      	bne.n	2bb3c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2bb2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2bb2e:	2201      	movs	r2, #1
   2bb30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2bb34:	f3bf 8f4f 	dsb	sy
        __WFE();
   2bb38:	bf20      	wfe
    while (true)
   2bb3a:	e7fd      	b.n	2bb38 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2bb3c:	4770      	bx	lr

0002bb3e <pm_state_exit_post_ops>:
   2bb3e:	2300      	movs	r3, #0
   2bb40:	f383 8811 	msr	BASEPRI, r3
   2bb44:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2bb48:	4770      	bx	lr

0002bb4a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2bb4a:	b530      	push	{r4, r5, lr}
   2bb4c:	b085      	sub	sp, #20
   2bb4e:	4604      	mov	r4, r0
   2bb50:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2bb52:	4668      	mov	r0, sp
   2bb54:	2203      	movs	r2, #3
   2bb56:	f7ff ffcf 	bl	2baf8 <memcpy>
	(void)memset(res + 3, 0, 13);
   2bb5a:	220d      	movs	r2, #13
   2bb5c:	2100      	movs	r1, #0
   2bb5e:	f10d 0003 	add.w	r0, sp, #3
   2bb62:	f7ff ffd4 	bl	2bb0e <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2bb66:	4620      	mov	r0, r4
   2bb68:	466a      	mov	r2, sp
   2bb6a:	4669      	mov	r1, sp
   2bb6c:	f002 fe78 	bl	2e860 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2bb70:	4604      	mov	r4, r0
   2bb72:	b920      	cbnz	r0, 2bb7e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2bb74:	2203      	movs	r2, #3
   2bb76:	4669      	mov	r1, sp
   2bb78:	4628      	mov	r0, r5
   2bb7a:	f7ff ffbd 	bl	2baf8 <memcpy>

	return 0;
}
   2bb7e:	4620      	mov	r0, r4
   2bb80:	b005      	add	sp, #20
   2bb82:	bd30      	pop	{r4, r5, pc}

0002bb84 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2bb84:	b513      	push	{r0, r1, r4, lr}
   2bb86:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2bb88:	aa01      	add	r2, sp, #4
   2bb8a:	3103      	adds	r1, #3
   2bb8c:	f7ff ffdd 	bl	2bb4a <ah>
	if (err) {
   2bb90:	b948      	cbnz	r0, 2bba6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2bb92:	2203      	movs	r2, #3
   2bb94:	a901      	add	r1, sp, #4
   2bb96:	4620      	mov	r0, r4
   2bb98:	f7ff ff87 	bl	2baaa <memcmp>
   2bb9c:	fab0 f080 	clz	r0, r0
   2bba0:	0940      	lsrs	r0, r0, #5
}
   2bba2:	b002      	add	sp, #8
   2bba4:	bd10      	pop	{r4, pc}
		return false;
   2bba6:	2000      	movs	r0, #0
   2bba8:	e7fb      	b.n	2bba2 <bt_rpa_irk_matches+0x1e>

0002bbaa <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2bbaa:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2bbac:	1cce      	adds	r6, r1, #3
{
   2bbae:	4605      	mov	r5, r0
   2bbb0:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2bbb2:	4630      	mov	r0, r6
   2bbb4:	2103      	movs	r1, #3
   2bbb6:	f7f6 fc31 	bl	2241c <bt_rand>
	if (err) {
   2bbba:	b960      	cbnz	r0, 2bbd6 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2bbbc:	7963      	ldrb	r3, [r4, #5]
   2bbbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2bbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2bbc6:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2bbc8:	4622      	mov	r2, r4
   2bbca:	4631      	mov	r1, r6
   2bbcc:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2bbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2bbd2:	f7ff bfba 	b.w	2bb4a <ah>
}
   2bbd6:	bd70      	pop	{r4, r5, r6, pc}

0002bbd8 <bt_settings_decode_key>:
{
   2bbd8:	b570      	push	{r4, r5, r6, lr}
   2bbda:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2bbdc:	2100      	movs	r1, #0
{
   2bbde:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2bbe0:	f7ff fa6e 	bl	2b0c0 <settings_name_next>
   2bbe4:	280d      	cmp	r0, #13
   2bbe6:	d118      	bne.n	2bc1a <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2bbe8:	7b23      	ldrb	r3, [r4, #12]
   2bbea:	2b30      	cmp	r3, #48	; 0x30
   2bbec:	d013      	beq.n	2bc16 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2bbee:	2b31      	cmp	r3, #49	; 0x31
   2bbf0:	d113      	bne.n	2bc1a <bt_settings_decode_key+0x42>
   2bbf2:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2bbf4:	f805 3b06 	strb.w	r3, [r5], #6
   2bbf8:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2bbfc:	462a      	mov	r2, r5
   2bbfe:	4620      	mov	r0, r4
   2bc00:	2301      	movs	r3, #1
   2bc02:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2bc04:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2bc06:	f7fe fd4c 	bl	2a6a2 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2bc0a:	42b4      	cmp	r4, r6
   2bc0c:	f105 35ff 	add.w	r5, r5, #4294967295
   2bc10:	d1f4      	bne.n	2bbfc <bt_settings_decode_key+0x24>
	return 0;
   2bc12:	2000      	movs	r0, #0
}
   2bc14:	bd70      	pop	{r4, r5, r6, pc}
   2bc16:	2300      	movs	r3, #0
   2bc18:	e7ec      	b.n	2bbf4 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2bc1a:	f06f 0015 	mvn.w	r0, #21
   2bc1e:	e7f9      	b.n	2bc14 <bt_settings_decode_key+0x3c>

0002bc20 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2bc20:	b510      	push	{r4, lr}
   2bc22:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2bc24:	7801      	ldrb	r1, [r0, #0]
   2bc26:	7822      	ldrb	r2, [r4, #0]
   2bc28:	428a      	cmp	r2, r1
{
   2bc2a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2bc2c:	d00f      	beq.n	2bc4e <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2bc2e:	4669      	mov	r1, sp
   2bc30:	f7e9 ff24 	bl	15a7c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2bc34:	a905      	add	r1, sp, #20
   2bc36:	4620      	mov	r0, r4
   2bc38:	f7e9 ff20 	bl	15a7c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2bc3c:	2210      	movs	r2, #16
   2bc3e:	f10d 0115 	add.w	r1, sp, #21
   2bc42:	f10d 0001 	add.w	r0, sp, #1
   2bc46:	f7ff ff30 	bl	2baaa <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2bc4a:	b00a      	add	sp, #40	; 0x28
   2bc4c:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2bc4e:	2a01      	cmp	r2, #1
   2bc50:	d006      	beq.n	2bc60 <bt_uuid_cmp+0x40>
   2bc52:	2a02      	cmp	r2, #2
   2bc54:	d007      	beq.n	2bc66 <bt_uuid_cmp+0x46>
   2bc56:	b972      	cbnz	r2, 2bc76 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2bc58:	8840      	ldrh	r0, [r0, #2]
   2bc5a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2bc5c:	1ac0      	subs	r0, r0, r3
   2bc5e:	e7f4      	b.n	2bc4a <bt_uuid_cmp+0x2a>
   2bc60:	6840      	ldr	r0, [r0, #4]
   2bc62:	6863      	ldr	r3, [r4, #4]
   2bc64:	e7fa      	b.n	2bc5c <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bc66:	2210      	movs	r2, #16
   2bc68:	1c61      	adds	r1, r4, #1
   2bc6a:	3001      	adds	r0, #1
}
   2bc6c:	b00a      	add	sp, #40	; 0x28
   2bc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2bc72:	f7ff bf1a 	b.w	2baaa <memcmp>
	switch (u1->type) {
   2bc76:	f06f 0015 	mvn.w	r0, #21
   2bc7a:	e7e6      	b.n	2bc4a <bt_uuid_cmp+0x2a>

0002bc7c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2bc7c:	2a04      	cmp	r2, #4
{
   2bc7e:	b510      	push	{r4, lr}
	switch (data_len) {
   2bc80:	d00a      	beq.n	2bc98 <bt_uuid_create+0x1c>
   2bc82:	2a10      	cmp	r2, #16
   2bc84:	d00d      	beq.n	2bca2 <bt_uuid_create+0x26>
   2bc86:	2a02      	cmp	r2, #2
   2bc88:	f04f 0300 	mov.w	r3, #0
   2bc8c:	d10f      	bne.n	2bcae <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2bc8e:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2bc90:	880b      	ldrh	r3, [r1, #0]
   2bc92:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2bc94:	2001      	movs	r0, #1
}
   2bc96:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2bc98:	2301      	movs	r3, #1
   2bc9a:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2bc9c:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2bc9e:	6043      	str	r3, [r0, #4]
		break;
   2bca0:	e7f8      	b.n	2bc94 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2bca2:	2302      	movs	r3, #2
   2bca4:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2bca8:	f7ff ff26 	bl	2baf8 <memcpy>
		break;
   2bcac:	e7f2      	b.n	2bc94 <bt_uuid_create+0x18>
	switch (data_len) {
   2bcae:	4618      	mov	r0, r3
   2bcb0:	e7f1      	b.n	2bc96 <bt_uuid_create+0x1a>

0002bcb2 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2bcb2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2bcb4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2bcb6:	2106      	movs	r1, #6
{
   2bcb8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2bcba:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2bcbe:	f7f6 fbad 	bl	2241c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2bcc2:	b918      	cbnz	r0, 2bccc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2bcc4:	79a3      	ldrb	r3, [r4, #6]
   2bcc6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2bcca:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2bccc:	bd10      	pop	{r4, pc}

0002bcce <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2bcce:	280f      	cmp	r0, #15
   2bcd0:	d807      	bhi.n	2bce2 <bt_hci_evt_get_flags+0x14>
   2bcd2:	280d      	cmp	r0, #13
   2bcd4:	d80b      	bhi.n	2bcee <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2bcd6:	2805      	cmp	r0, #5
   2bcd8:	bf08      	it	eq
   2bcda:	2003      	moveq	r0, #3
   2bcdc:	bf18      	it	ne
   2bcde:	2002      	movne	r0, #2
   2bce0:	4770      	bx	lr
	switch (evt) {
   2bce2:	2813      	cmp	r0, #19
   2bce4:	d003      	beq.n	2bcee <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2bce6:	281a      	cmp	r0, #26
   2bce8:	bf08      	it	eq
   2bcea:	2001      	moveq	r0, #1
   2bcec:	e7f6      	b.n	2bcdc <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2bcee:	2001      	movs	r0, #1
	}
}
   2bcf0:	4770      	bx	lr

0002bcf2 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2bcf2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2bcf6:	b183      	cbz	r3, 2bd1a <update_sec_level+0x28>
   2bcf8:	7b5a      	ldrb	r2, [r3, #13]
   2bcfa:	07d1      	lsls	r1, r2, #31
   2bcfc:	d50d      	bpl.n	2bd1a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2bcfe:	06d2      	lsls	r2, r2, #27
   2bd00:	d50d      	bpl.n	2bd1e <update_sec_level+0x2c>
   2bd02:	7b1b      	ldrb	r3, [r3, #12]
   2bd04:	2b10      	cmp	r3, #16
   2bd06:	bf14      	ite	ne
   2bd08:	2303      	movne	r3, #3
   2bd0a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2bd0c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2bd0e:	7a80      	ldrb	r0, [r0, #10]
}
   2bd10:	4298      	cmp	r0, r3
   2bd12:	bf8c      	ite	hi
   2bd14:	2000      	movhi	r0, #0
   2bd16:	2001      	movls	r0, #1
   2bd18:	4770      	bx	lr
   2bd1a:	2302      	movs	r3, #2
   2bd1c:	e7f6      	b.n	2bd0c <update_sec_level+0x1a>
   2bd1e:	2303      	movs	r3, #3
   2bd20:	e7f4      	b.n	2bd0c <update_sec_level+0x1a>

0002bd22 <hci_vendor_event>:
}
   2bd22:	4770      	bx	lr

0002bd24 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2bd24:	2207      	movs	r2, #7
   2bd26:	f7ff bee7 	b.w	2baf8 <memcpy>

0002bd2a <atomic_or>:
{
   2bd2a:	b510      	push	{r4, lr}
   2bd2c:	4603      	mov	r3, r0
}
   2bd2e:	f3bf 8f5b 	dmb	ish
   2bd32:	e853 0f00 	ldrex	r0, [r3]
   2bd36:	ea40 0201 	orr.w	r2, r0, r1
   2bd3a:	e843 2400 	strex	r4, r2, [r3]
   2bd3e:	2c00      	cmp	r4, #0
   2bd40:	d1f7      	bne.n	2bd32 <atomic_or+0x8>
   2bd42:	f3bf 8f5b 	dmb	ish
   2bd46:	bd10      	pop	{r4, pc}

0002bd48 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bd48:	f3bf 8f5b 	dmb	ish
   2bd4c:	e850 3f00 	ldrex	r3, [r0]
   2bd50:	400b      	ands	r3, r1
   2bd52:	e840 3200 	strex	r2, r3, [r0]
   2bd56:	2a00      	cmp	r2, #0
   2bd58:	d1f8      	bne.n	2bd4c <atomic_and.isra.0+0x4>
   2bd5a:	f3bf 8f5b 	dmb	ish
}
   2bd5e:	4770      	bx	lr

0002bd60 <sys_put_le64>:
	dst[1] = val >> 8;
   2bd60:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2bd64:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2bd66:	0e00      	lsrs	r0, r0, #24
   2bd68:	7053      	strb	r3, [r2, #1]
   2bd6a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2bd6c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2bd6e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2bd72:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2bd74:	7093      	strb	r3, [r2, #2]
   2bd76:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2bd78:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2bd7a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2bd7c:	71d1      	strb	r1, [r2, #7]
}
   2bd7e:	4770      	bx	lr

0002bd80 <bt_hci_disconnect>:
{
   2bd80:	b570      	push	{r4, r5, r6, lr}
   2bd82:	4606      	mov	r6, r0
   2bd84:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2bd86:	f240 4006 	movw	r0, #1030	; 0x406
   2bd8a:	2103      	movs	r1, #3
   2bd8c:	f7ea fa58 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2bd90:	4604      	mov	r4, r0
   2bd92:	b168      	cbz	r0, 2bdb0 <bt_hci_disconnect+0x30>
   2bd94:	2103      	movs	r1, #3
   2bd96:	300c      	adds	r0, #12
   2bd98:	f7f3 f98a 	bl	1f0b0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2bd9c:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2bd9e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2bda0:	4621      	mov	r1, r4
   2bda2:	2200      	movs	r2, #0
}
   2bda4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2bda8:	f240 4006 	movw	r0, #1030	; 0x406
   2bdac:	f7ea ba92 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2bdb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2bdb4:	bd70      	pop	{r4, r5, r6, pc}

0002bdb6 <bt_le_set_data_len>:
{
   2bdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bdb8:	4607      	mov	r7, r0
   2bdba:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2bdbc:	f242 0022 	movw	r0, #8226	; 0x2022
   2bdc0:	2106      	movs	r1, #6
{
   2bdc2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2bdc4:	f7ea fa3c 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2bdc8:	4604      	mov	r4, r0
   2bdca:	b178      	cbz	r0, 2bdec <bt_le_set_data_len+0x36>
   2bdcc:	2106      	movs	r1, #6
   2bdce:	300c      	adds	r0, #12
   2bdd0:	f7f3 f96e 	bl	1f0b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2bdd4:	883b      	ldrh	r3, [r7, #0]
   2bdd6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2bdd8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2bdda:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2bddc:	4621      	mov	r1, r4
   2bdde:	2200      	movs	r2, #0
}
   2bde0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2bde4:	f242 0022 	movw	r0, #8226	; 0x2022
   2bde8:	f7ea ba74 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2bdec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2bdf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bdf2 <bt_le_set_phy>:
{
   2bdf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bdf6:	4681      	mov	r9, r0
   2bdf8:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2bdfa:	f242 0032 	movw	r0, #8242	; 0x2032
   2bdfe:	2107      	movs	r1, #7
{
   2be00:	f89d a020 	ldrb.w	sl, [sp, #32]
   2be04:	4617      	mov	r7, r2
   2be06:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2be08:	f7ea fa1a 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2be0c:	4605      	mov	r5, r0
   2be0e:	b1a0      	cbz	r0, 2be3a <bt_le_set_phy+0x48>
   2be10:	2107      	movs	r1, #7
   2be12:	300c      	adds	r0, #12
   2be14:	f7f3 f94c 	bl	1f0b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2be18:	f8b9 3000 	ldrh.w	r3, [r9]
   2be1c:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2be1e:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2be22:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2be24:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2be26:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2be2a:	4629      	mov	r1, r5
   2be2c:	2200      	movs	r2, #0
}
   2be2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2be32:	f242 0032 	movw	r0, #8242	; 0x2032
   2be36:	f7ea ba4d 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2be3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2be3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002be42 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2be42:	68c0      	ldr	r0, [r0, #12]
   2be44:	f7ea bb6a 	b.w	1651c <bt_hci_le_enh_conn_complete>

0002be48 <bt_le_conn_params_valid>:
{
   2be48:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2be4a:	8803      	ldrh	r3, [r0, #0]
   2be4c:	8842      	ldrh	r2, [r0, #2]
   2be4e:	4293      	cmp	r3, r2
   2be50:	d819      	bhi.n	2be86 <bt_le_conn_params_valid+0x3e>
   2be52:	2b05      	cmp	r3, #5
   2be54:	d917      	bls.n	2be86 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2be56:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2be5a:	d814      	bhi.n	2be86 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2be5c:	8883      	ldrh	r3, [r0, #4]
   2be5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2be62:	d210      	bcs.n	2be86 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2be64:	88c0      	ldrh	r0, [r0, #6]
   2be66:	f1a0 010a 	sub.w	r1, r0, #10
   2be6a:	b289      	uxth	r1, r1
   2be6c:	f640 4476 	movw	r4, #3190	; 0xc76
   2be70:	42a1      	cmp	r1, r4
   2be72:	d808      	bhi.n	2be86 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2be74:	3301      	adds	r3, #1
   2be76:	b29b      	uxth	r3, r3
   2be78:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2be7a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2be7e:	bf34      	ite	cc
   2be80:	2001      	movcc	r0, #1
   2be82:	2000      	movcs	r0, #0
}
   2be84:	bd10      	pop	{r4, pc}
		return false;
   2be86:	2000      	movs	r0, #0
   2be88:	e7fc      	b.n	2be84 <bt_le_conn_params_valid+0x3c>

0002be8a <bt_get_appearance>:
}
   2be8a:	2000      	movs	r0, #0
   2be8c:	4770      	bx	lr

0002be8e <bt_addr_le_is_bonded>:
{
   2be8e:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2be90:	f7f2 fc22 	bl	1e6d8 <bt_keys_find_addr>
		return keys && keys->keys;
   2be94:	b118      	cbz	r0, 2be9e <bt_addr_le_is_bonded+0x10>
   2be96:	89c0      	ldrh	r0, [r0, #14]
   2be98:	3800      	subs	r0, #0
   2be9a:	bf18      	it	ne
   2be9c:	2001      	movne	r0, #1
}
   2be9e:	bd08      	pop	{r3, pc}

0002bea0 <bt_addr_le_eq>:
{
   2bea0:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2bea2:	2207      	movs	r2, #7
   2bea4:	f7ff fe01 	bl	2baaa <memcmp>
}
   2bea8:	fab0 f080 	clz	r0, r0
   2beac:	0940      	lsrs	r0, r0, #5
   2beae:	bd08      	pop	{r3, pc}

0002beb0 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2beb0:	2207      	movs	r2, #7
   2beb2:	f7ff be21 	b.w	2baf8 <memcpy>

0002beb6 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2beb6:	7a03      	ldrb	r3, [r0, #8]
   2beb8:	075b      	lsls	r3, r3, #29
{
   2beba:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2bebc:	d505      	bpl.n	2beca <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2bebe:	4601      	mov	r1, r0
   2bec0:	322a      	adds	r2, #42	; 0x2a
   2bec2:	f811 0b01 	ldrb.w	r0, [r1], #1
   2bec6:	f7eb b8bd 	b.w	17044 <hci_id_add>
}
   2beca:	4770      	bx	lr

0002becc <addr_res_enable>:
{
   2becc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2bece:	2101      	movs	r1, #1
{
   2bed0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2bed2:	f242 002d 	movw	r0, #8237	; 0x202d
   2bed6:	f7ea f9b3 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2beda:	4604      	mov	r4, r0
   2bedc:	b158      	cbz	r0, 2bef6 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2bede:	4629      	mov	r1, r5
   2bee0:	300c      	adds	r0, #12
   2bee2:	f002 f82d 	bl	2df40 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2bee6:	4621      	mov	r1, r4
   2bee8:	2200      	movs	r2, #0
}
   2beea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2beee:	f242 002d 	movw	r0, #8237	; 0x202d
   2bef2:	f7ea b9ef 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2bef6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2befa:	bd38      	pop	{r3, r4, r5, pc}

0002befc <bt_lookup_id_addr>:
{
   2befc:	b510      	push	{r4, lr}
   2befe:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2bf00:	b930      	cbnz	r0, 2bf10 <bt_lookup_id_addr+0x14>
   2bf02:	b119      	cbz	r1, 2bf0c <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2bf04:	f7f2 fb96 	bl	1e634 <bt_keys_find_irk>
		if (keys) {
   2bf08:	b100      	cbz	r0, 2bf0c <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2bf0a:	1c44      	adds	r4, r0, #1
}
   2bf0c:	4620      	mov	r0, r4
   2bf0e:	bd10      	pop	{r4, pc}
		return NULL;
   2bf10:	2400      	movs	r4, #0
   2bf12:	e7fb      	b.n	2bf0c <bt_lookup_id_addr+0x10>

0002bf14 <bt_id_scan_random_addr_check>:
}
   2bf14:	2001      	movs	r0, #1
   2bf16:	4770      	bx	lr

0002bf18 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2bf18:	7a03      	ldrb	r3, [r0, #8]
   2bf1a:	07d9      	lsls	r1, r3, #31
   2bf1c:	d504      	bpl.n	2bf28 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2bf1e:	f023 0301 	bic.w	r3, r3, #1
   2bf22:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2bf24:	f7eb ba7a 	b.w	1741c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2bf28:	0799      	lsls	r1, r3, #30
   2bf2a:	d504      	bpl.n	2bf36 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2bf2c:	f023 0302 	bic.w	r3, r3, #2
   2bf30:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2bf32:	f7eb bb25 	b.w	17580 <bt_id_del>
}
   2bf36:	4770      	bx	lr

0002bf38 <atomic_and>:
{
   2bf38:	b510      	push	{r4, lr}
   2bf3a:	4603      	mov	r3, r0
}
   2bf3c:	f3bf 8f5b 	dmb	ish
   2bf40:	e853 0f00 	ldrex	r0, [r3]
   2bf44:	ea00 0201 	and.w	r2, r0, r1
   2bf48:	e843 2400 	strex	r4, r2, [r3]
   2bf4c:	2c00      	cmp	r4, #0
   2bf4e:	d1f7      	bne.n	2bf40 <atomic_and+0x8>
   2bf50:	f3bf 8f5b 	dmb	ish
   2bf54:	bd10      	pop	{r4, pc}

0002bf56 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2bf56:	f7eb bd5d 	b.w	17a14 <bt_le_scan_set_enable_legacy>

0002bf5a <sys_slist_find_and_remove>:
	return list->head;
   2bf5a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf5c:	2200      	movs	r2, #0
   2bf5e:	b90b      	cbnz	r3, 2bf64 <sys_slist_find_and_remove+0xa>
   2bf60:	4618      	mov	r0, r3
   2bf62:	4770      	bx	lr
   2bf64:	428b      	cmp	r3, r1
   2bf66:	d110      	bne.n	2bf8a <sys_slist_find_and_remove+0x30>
	return node->next;
   2bf68:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bf6a:	b942      	cbnz	r2, 2bf7e <sys_slist_find_and_remove+0x24>
   2bf6c:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2bf6e:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bf70:	4291      	cmp	r1, r2
   2bf72:	d100      	bne.n	2bf76 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2bf74:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2bf76:	2300      	movs	r3, #0
   2bf78:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf7a:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2bf7c:	4770      	bx	lr
	parent->next = child;
   2bf7e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bf80:	6843      	ldr	r3, [r0, #4]
   2bf82:	4299      	cmp	r1, r3
	list->tail = node;
   2bf84:	bf08      	it	eq
   2bf86:	6042      	streq	r2, [r0, #4]
}
   2bf88:	e7f5      	b.n	2bf76 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2bf8a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bf8c:	681b      	ldr	r3, [r3, #0]
   2bf8e:	e7e6      	b.n	2bf5e <sys_slist_find_and_remove+0x4>

0002bf90 <atomic_and>:
{
   2bf90:	b510      	push	{r4, lr}
   2bf92:	4603      	mov	r3, r0
}
   2bf94:	f3bf 8f5b 	dmb	ish
   2bf98:	e853 0f00 	ldrex	r0, [r3]
   2bf9c:	ea00 0201 	and.w	r2, r0, r1
   2bfa0:	e843 2400 	strex	r4, r2, [r3]
   2bfa4:	2c00      	cmp	r4, #0
   2bfa6:	d1f7      	bne.n	2bf98 <atomic_and+0x8>
   2bfa8:	f3bf 8f5b 	dmb	ish
   2bfac:	bd10      	pop	{r4, pc}

0002bfae <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bfae:	f3bf 8f5b 	dmb	ish
   2bfb2:	6800      	ldr	r0, [r0, #0]
   2bfb4:	f3bf 8f5b 	dmb	ish
}
   2bfb8:	4770      	bx	lr

0002bfba <tx_complete_work>:
	tx_notify(conn);
   2bfba:	3828      	subs	r0, #40	; 0x28
   2bfbc:	f7ec b8fc 	b.w	181b8 <tx_notify>

0002bfc0 <bt_conn_reset_rx_state>:
{
   2bfc0:	b510      	push	{r4, lr}
   2bfc2:	4604      	mov	r4, r0
	if (!conn->rx) {
   2bfc4:	6900      	ldr	r0, [r0, #16]
   2bfc6:	b118      	cbz	r0, 2bfd0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2bfc8:	f7f2 ff6c 	bl	1eea4 <net_buf_unref>
	conn->rx = NULL;
   2bfcc:	2300      	movs	r3, #0
   2bfce:	6123      	str	r3, [r4, #16]
}
   2bfd0:	bd10      	pop	{r4, pc}

0002bfd2 <conn_lookup_handle>:
{
   2bfd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bfd6:	4607      	mov	r7, r0
   2bfd8:	460e      	mov	r6, r1
   2bfda:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2bfdc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2bfde:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2bfe2:	42b4      	cmp	r4, r6
   2bfe4:	d103      	bne.n	2bfee <conn_lookup_handle+0x1c>
	return NULL;
   2bfe6:	2300      	movs	r3, #0
}
   2bfe8:	4618      	mov	r0, r3
   2bfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2bfee:	fb09 7004 	mla	r0, r9, r4, r7
   2bff2:	f7ec fb43 	bl	1867c <bt_conn_ref>
   2bff6:	4603      	mov	r3, r0
		if (!conn) {
   2bff8:	b158      	cbz	r0, 2c012 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2bffa:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2bffc:	2d01      	cmp	r5, #1
   2bffe:	d002      	beq.n	2c006 <conn_lookup_handle+0x34>
   2c000:	3d07      	subs	r5, #7
   2c002:	2d01      	cmp	r5, #1
   2c004:	d803      	bhi.n	2c00e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2c006:	881a      	ldrh	r2, [r3, #0]
   2c008:	4542      	cmp	r2, r8
   2c00a:	d0ed      	beq.n	2bfe8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2c00c:	4618      	mov	r0, r3
   2c00e:	f7ec fb61 	bl	186d4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2c012:	3401      	adds	r4, #1
   2c014:	e7e5      	b.n	2bfe2 <conn_lookup_handle+0x10>

0002c016 <bt_conn_connected>:
{
   2c016:	b510      	push	{r4, lr}
   2c018:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2c01a:	f7ed f937 	bl	1928c <bt_l2cap_connected>
	notify_connected(conn);
   2c01e:	4620      	mov	r0, r4
}
   2c020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2c024:	f7ec b89a 	b.w	1815c <notify_connected>

0002c028 <bt_conn_le_start_encryption>:
{
   2c028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c02c:	4682      	mov	sl, r0
   2c02e:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2c030:	f242 0019 	movw	r0, #8217	; 0x2019
   2c034:	211c      	movs	r1, #28
{
   2c036:	9e08      	ldr	r6, [sp, #32]
   2c038:	4690      	mov	r8, r2
   2c03a:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2c03c:	f7ea f900 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2c040:	4605      	mov	r5, r0
   2c042:	b340      	cbz	r0, 2c096 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   2c044:	211c      	movs	r1, #28
   2c046:	300c      	adds	r0, #12
   2c048:	f7f3 f832 	bl	1f0b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c04c:	f8ba 3000 	ldrh.w	r3, [sl]
   2c050:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2c052:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   2c054:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2c058:	4649      	mov	r1, r9
   2c05a:	f7ff fd4d 	bl	2baf8 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2c05e:	2202      	movs	r2, #2
   2c060:	4641      	mov	r1, r8
   2c062:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   2c066:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2c068:	f7ff fd46 	bl	2baf8 <memcpy>
	memcpy(cp->ltk, ltk, len);
   2c06c:	4632      	mov	r2, r6
   2c06e:	4639      	mov	r1, r7
   2c070:	4620      	mov	r0, r4
   2c072:	f7ff fd41 	bl	2baf8 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2c076:	2e0f      	cmp	r6, #15
   2c078:	d805      	bhi.n	2c086 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   2c07a:	f1c6 0210 	rsb	r2, r6, #16
   2c07e:	2100      	movs	r1, #0
   2c080:	19a0      	adds	r0, r4, r6
   2c082:	f7ff fd44 	bl	2bb0e <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2c086:	4629      	mov	r1, r5
   2c088:	2200      	movs	r2, #0
}
   2c08a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2c08e:	f242 0019 	movw	r0, #8217	; 0x2019
   2c092:	f7ea b91f 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2c096:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c09e <bt_conn_set_security>:
{
   2c09e:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2c0a0:	7b43      	ldrb	r3, [r0, #13]
   2c0a2:	2b07      	cmp	r3, #7
{
   2c0a4:	4604      	mov	r4, r0
   2c0a6:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2c0a8:	d126      	bne.n	2c0f8 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2c0aa:	7a43      	ldrb	r3, [r0, #9]
   2c0ac:	428b      	cmp	r3, r1
   2c0ae:	d219      	bcs.n	2c0e4 <bt_conn_set_security+0x46>
   2c0b0:	7a83      	ldrb	r3, [r0, #10]
   2c0b2:	428b      	cmp	r3, r1
   2c0b4:	d216      	bcs.n	2c0e4 <bt_conn_set_security+0x46>
	if (val) {
   2c0b6:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2c0b8:	f100 0004 	add.w	r0, r0, #4
   2c0bc:	d514      	bpl.n	2c0e8 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c0be:	f3bf 8f5b 	dmb	ish
   2c0c2:	e850 3f00 	ldrex	r3, [r0]
   2c0c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2c0ca:	e840 3200 	strex	r2, r3, [r0]
   2c0ce:	2a00      	cmp	r2, #0
   2c0d0:	d1f7      	bne.n	2c0c2 <bt_conn_set_security+0x24>
   2c0d2:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2c0d6:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2c0da:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2c0dc:	4620      	mov	r0, r4
   2c0de:	f001 fd6f 	bl	2dbc0 <bt_smp_start_security>
	if (err) {
   2c0e2:	b930      	cbnz	r0, 2c0f2 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   2c0e4:	2000      	movs	r0, #0
}
   2c0e6:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c0e8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2c0ec:	f7ff ff50 	bl	2bf90 <atomic_and>
   2c0f0:	e7f1      	b.n	2c0d6 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   2c0f2:	7a63      	ldrb	r3, [r4, #9]
   2c0f4:	72a3      	strb	r3, [r4, #10]
   2c0f6:	e7f6      	b.n	2c0e6 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2c0f8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c0fc:	e7f3      	b.n	2c0e6 <bt_conn_set_security+0x48>

0002c0fe <bt_conn_get_security>:
}
   2c0fe:	7a40      	ldrb	r0, [r0, #9]
   2c100:	4770      	bx	lr

0002c102 <bt_conn_is_peer_addr_le>:
{
   2c102:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2c104:	7a03      	ldrb	r3, [r0, #8]
   2c106:	428b      	cmp	r3, r1
{
   2c108:	4604      	mov	r4, r0
   2c10a:	4615      	mov	r5, r2
	if (id != conn->id) {
   2c10c:	d115      	bne.n	2c13a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2c10e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c112:	2207      	movs	r2, #7
   2c114:	4628      	mov	r0, r5
   2c116:	f7ff fcc8 	bl	2baaa <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2c11a:	b180      	cbz	r0, 2c13e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c11c:	78e3      	ldrb	r3, [r4, #3]
   2c11e:	2207      	movs	r2, #7
   2c120:	b943      	cbnz	r3, 2c134 <bt_conn_is_peer_addr_le+0x32>
   2c122:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2c126:	4628      	mov	r0, r5
   2c128:	f7ff fcbf 	bl	2baaa <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2c12c:	fab0 f080 	clz	r0, r0
   2c130:	0940      	lsrs	r0, r0, #5
}
   2c132:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2c134:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2c138:	e7f5      	b.n	2c126 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2c13a:	2000      	movs	r0, #0
   2c13c:	e7f9      	b.n	2c132 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2c13e:	2001      	movs	r0, #1
   2c140:	e7f7      	b.n	2c132 <bt_conn_is_peer_addr_le+0x30>

0002c142 <bt_conn_get_dst>:
}
   2c142:	3090      	adds	r0, #144	; 0x90
   2c144:	4770      	bx	lr

0002c146 <bt_conn_disconnect>:
{
   2c146:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c148:	7883      	ldrb	r3, [r0, #2]
   2c14a:	2b01      	cmp	r3, #1
{
   2c14c:	4604      	mov	r4, r0
   2c14e:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c150:	d103      	bne.n	2c15a <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2c152:	2100      	movs	r1, #0
   2c154:	3090      	adds	r0, #144	; 0x90
   2c156:	f7ec fe73 	bl	18e40 <bt_le_set_auto_conn>
	switch (conn->state) {
   2c15a:	7b63      	ldrb	r3, [r4, #13]
   2c15c:	3b02      	subs	r3, #2
   2c15e:	2b06      	cmp	r3, #6
   2c160:	d825      	bhi.n	2c1ae <bt_conn_disconnect+0x68>
   2c162:	e8df f003 	tbb	[pc, r3]
   2c166:	2404      	.short	0x2404
   2c168:	160e2424 	.word	0x160e2424
   2c16c:	0c          	.byte	0x0c
   2c16d:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c16e:	4620      	mov	r0, r4
		conn->err = reason;
   2c170:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c172:	2100      	movs	r1, #0
   2c174:	f7ec fad6 	bl	18724 <bt_conn_set_state>
			bt_le_scan_update(false);
   2c178:	2000      	movs	r0, #0
   2c17a:	f7eb fcd7 	bl	17b2c <bt_le_scan_update>
{
   2c17e:	2000      	movs	r0, #0
}
   2c180:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   2c182:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2c186:	f7f9 fa53 	bl	25630 <k_work_cancel_delayable>
}
   2c18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2c18e:	f7ea b9ab 	b.w	164e8 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2c192:	8820      	ldrh	r0, [r4, #0]
   2c194:	4629      	mov	r1, r5
   2c196:	f7ff fdf3 	bl	2bd80 <bt_hci_disconnect>
	if (err) {
   2c19a:	2800      	cmp	r0, #0
   2c19c:	d1f0      	bne.n	2c180 <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   2c19e:	7b63      	ldrb	r3, [r4, #13]
   2c1a0:	2b07      	cmp	r3, #7
   2c1a2:	d1ec      	bne.n	2c17e <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2c1a4:	2108      	movs	r1, #8
   2c1a6:	4620      	mov	r0, r4
   2c1a8:	f7ec fabc 	bl	18724 <bt_conn_set_state>
   2c1ac:	e7e7      	b.n	2c17e <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   2c1ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c1b2:	e7e5      	b.n	2c180 <bt_conn_disconnect+0x3a>

0002c1b4 <bt_conn_le_conn_update>:
{
   2c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c1b6:	4607      	mov	r7, r0
   2c1b8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2c1ba:	f242 0013 	movw	r0, #8211	; 0x2013
   2c1be:	210e      	movs	r1, #14
   2c1c0:	f7ea f83e 	bl	16240 <bt_hci_cmd_create>
	if (!buf) {
   2c1c4:	4606      	mov	r6, r0
   2c1c6:	b1d0      	cbz	r0, 2c1fe <bt_conn_le_conn_update+0x4a>
   2c1c8:	210e      	movs	r1, #14
   2c1ca:	300c      	adds	r0, #12
   2c1cc:	f7f2 ff70 	bl	1f0b0 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2c1d0:	220e      	movs	r2, #14
   2c1d2:	4604      	mov	r4, r0
   2c1d4:	2100      	movs	r1, #0
   2c1d6:	f7ff fc9a 	bl	2bb0e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2c1da:	883b      	ldrh	r3, [r7, #0]
   2c1dc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2c1de:	882b      	ldrh	r3, [r5, #0]
   2c1e0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2c1e2:	886b      	ldrh	r3, [r5, #2]
   2c1e4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2c1e6:	88ab      	ldrh	r3, [r5, #4]
   2c1e8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2c1ea:	88eb      	ldrh	r3, [r5, #6]
   2c1ec:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c1ee:	4631      	mov	r1, r6
   2c1f0:	2200      	movs	r2, #0
}
   2c1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2c1f6:	f242 0013 	movw	r0, #8211	; 0x2013
   2c1fa:	f7ea b86b 	b.w	162d4 <bt_hci_cmd_send_sync>
}
   2c1fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c204 <l2cap_connected>:
}
   2c204:	4770      	bx	lr

0002c206 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2c206:	4770      	bx	lr

0002c208 <bt_l2cap_chan_del>:
{
   2c208:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2c20a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2c20e:	4604      	mov	r4, r0
	if (!chan->conn) {
   2c210:	b123      	cbz	r3, 2c21c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2c212:	686b      	ldr	r3, [r5, #4]
   2c214:	b103      	cbz	r3, 2c218 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2c216:	4798      	blx	r3
	chan->conn = NULL;
   2c218:	2300      	movs	r3, #0
   2c21a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2c21c:	68e3      	ldr	r3, [r4, #12]
   2c21e:	b10b      	cbz	r3, 2c224 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2c220:	4620      	mov	r0, r4
   2c222:	4798      	blx	r3
	if (ops->released) {
   2c224:	6a2b      	ldr	r3, [r5, #32]
   2c226:	b11b      	cbz	r3, 2c230 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2c228:	4620      	mov	r0, r4
}
   2c22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2c22e:	4718      	bx	r3
}
   2c230:	bd70      	pop	{r4, r5, r6, pc}

0002c232 <bt_l2cap_disconnected>:
{
   2c232:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c234:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c236:	b130      	cbz	r0, 2c246 <bt_l2cap_disconnected+0x14>
	return node->next;
   2c238:	f850 4908 	ldr.w	r4, [r0], #-8
   2c23c:	b104      	cbz	r4, 2c240 <bt_l2cap_disconnected+0xe>
   2c23e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2c240:	f7ff ffe2 	bl	2c208 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c244:	b904      	cbnz	r4, 2c248 <bt_l2cap_disconnected+0x16>
}
   2c246:	bd38      	pop	{r3, r4, r5, pc}
   2c248:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c24a:	b12d      	cbz	r5, 2c258 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2c24c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c24e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2c250:	f7ff ffda 	bl	2c208 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c254:	462c      	mov	r4, r5
   2c256:	e7f7      	b.n	2c248 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2c258:	4620      	mov	r0, r4
}
   2c25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2c25e:	f7ff bfd3 	b.w	2c208 <bt_l2cap_chan_del>

0002c262 <bt_l2cap_security_changed>:
{
   2c262:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2c264:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2c266:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c268:	b1bb      	cbz	r3, 2c29a <bt_l2cap_security_changed+0x38>
   2c26a:	4618      	mov	r0, r3
	return node->next;
   2c26c:	f850 4908 	ldr.w	r4, [r0], #-8
   2c270:	b104      	cbz	r4, 2c274 <bt_l2cap_security_changed+0x12>
   2c272:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c274:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2c278:	689b      	ldr	r3, [r3, #8]
   2c27a:	b10b      	cbz	r3, 2c280 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2c27c:	4629      	mov	r1, r5
   2c27e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c280:	b15c      	cbz	r4, 2c29a <bt_l2cap_security_changed+0x38>
   2c282:	4620      	mov	r0, r4
   2c284:	68a4      	ldr	r4, [r4, #8]
   2c286:	6843      	ldr	r3, [r0, #4]
   2c288:	b124      	cbz	r4, 2c294 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2c28a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2c28c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2c28e:	2b00      	cmp	r3, #0
   2c290:	d1f4      	bne.n	2c27c <bt_l2cap_security_changed+0x1a>
   2c292:	e7f6      	b.n	2c282 <bt_l2cap_security_changed+0x20>
   2c294:	689b      	ldr	r3, [r3, #8]
   2c296:	2b00      	cmp	r3, #0
   2c298:	d1f0      	bne.n	2c27c <bt_l2cap_security_changed+0x1a>
}
   2c29a:	bd38      	pop	{r3, r4, r5, pc}

0002c29c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2c29c:	3104      	adds	r1, #4
   2c29e:	f7ec bb5d 	b.w	1895c <bt_conn_create_pdu_timeout>

0002c2a2 <bt_l2cap_send_cb>:
{
   2c2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c2a6:	4614      	mov	r4, r2
   2c2a8:	4605      	mov	r5, r0
   2c2aa:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2c2ac:	f102 000c 	add.w	r0, r2, #12
   2c2b0:	2104      	movs	r1, #4
   2c2b2:	461e      	mov	r6, r3
   2c2b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2c2b8:	f7f2 feaa 	bl	1f010 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c2bc:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2c2be:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c2c0:	3a04      	subs	r2, #4
   2c2c2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c2c4:	4643      	mov	r3, r8
   2c2c6:	4632      	mov	r2, r6
   2c2c8:	4621      	mov	r1, r4
   2c2ca:	4628      	mov	r0, r5
}
   2c2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2c2d0:	f7ec b948 	b.w	18564 <bt_conn_send_cb>

0002c2d4 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2c2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c2d6:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2c2d8:	2202      	movs	r2, #2
   2c2da:	2001      	movs	r0, #1
   2c2dc:	f7ec ffb8 	bl	19250 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2c2e0:	4604      	mov	r4, r0
   2c2e2:	b198      	cbz	r0, 2c30c <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2c2e4:	2102      	movs	r1, #2
   2c2e6:	300c      	adds	r0, #12
   2c2e8:	f7f2 fee2 	bl	1f0b0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2c2ec:	2300      	movs	r3, #0
   2c2ee:	7003      	strb	r3, [r0, #0]
   2c2f0:	7043      	strb	r3, [r0, #1]
   2c2f2:	4622      	mov	r2, r4
   2c2f4:	9300      	str	r3, [sp, #0]
   2c2f6:	2105      	movs	r1, #5
   2c2f8:	4628      	mov	r0, r5
   2c2fa:	f7ff ffd2 	bl	2c2a2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2c2fe:	b128      	cbz	r0, 2c30c <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2c300:	4620      	mov	r0, r4
}
   2c302:	b003      	add	sp, #12
   2c304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c308:	f7f2 bdcc 	b.w	1eea4 <net_buf_unref>
}
   2c30c:	b003      	add	sp, #12
   2c30e:	bd30      	pop	{r4, r5, pc}

0002c310 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2c310:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c312:	b130      	cbz	r0, 2c322 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c314:	8b83      	ldrh	r3, [r0, #28]
   2c316:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c318:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2c31c:	d001      	beq.n	2c322 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2c31e:	6880      	ldr	r0, [r0, #8]
   2c320:	e7f7      	b.n	2c312 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2c322:	4770      	bx	lr

0002c324 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2c324:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c326:	b130      	cbz	r0, 2c336 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c328:	8983      	ldrh	r3, [r0, #12]
   2c32a:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2c32c:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2c330:	d001      	beq.n	2c336 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2c332:	6880      	ldr	r0, [r0, #8]
   2c334:	e7f7      	b.n	2c326 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2c336:	4770      	bx	lr

0002c338 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2c338:	4770      	bx	lr

0002c33a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2c33a:	4603      	mov	r3, r0
	return list->head;
   2c33c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2c33e:	b128      	cbz	r0, 2c34c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c340:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2c342:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2c344:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c346:	4288      	cmp	r0, r1
	list->tail = node;
   2c348:	bf08      	it	eq
   2c34a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2c34c:	4770      	bx	lr

0002c34e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2c34e:	4603      	mov	r3, r0
	size_t bytes = 0;
   2c350:	2000      	movs	r0, #0

	while (buf) {
   2c352:	b903      	cbnz	r3, 2c356 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2c354:	4770      	bx	lr
		bytes += buf->len;
   2c356:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2c358:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2c35a:	4410      	add	r0, r2
		buf = buf->frags;
   2c35c:	e7f9      	b.n	2c352 <net_buf_frags_len+0x4>

0002c35e <attr_read_type_cb>:
{
   2c35e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2c360:	68d4      	ldr	r4, [r2, #12]
   2c362:	7823      	ldrb	r3, [r4, #0]
   2c364:	3102      	adds	r1, #2
   2c366:	b913      	cbnz	r3, 2c36e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2c368:	7021      	strb	r1, [r4, #0]
	return true;
   2c36a:	2001      	movs	r0, #1
}
   2c36c:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2c36e:	428b      	cmp	r3, r1
   2c370:	d0fb      	beq.n	2c36a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2c372:	8a03      	ldrh	r3, [r0, #16]
   2c374:	3b02      	subs	r3, #2
   2c376:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2c378:	2000      	movs	r0, #0
   2c37a:	6110      	str	r0, [r2, #16]
		return false;
   2c37c:	e7f6      	b.n	2c36c <attr_read_type_cb+0xe>

0002c37e <att_prepare_write_req>:
}
   2c37e:	2006      	movs	r0, #6
   2c380:	4770      	bx	lr

0002c382 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c382:	f3bf 8f5b 	dmb	ish
   2c386:	6800      	ldr	r0, [r0, #0]
   2c388:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c38c:	4108      	asrs	r0, r1
}
   2c38e:	f000 0001 	and.w	r0, r0, #1
   2c392:	4770      	bx	lr

0002c394 <att_notify_mult>:
{
   2c394:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2c396:	6803      	ldr	r3, [r0, #0]
   2c398:	8a0a      	ldrh	r2, [r1, #16]
   2c39a:	6818      	ldr	r0, [r3, #0]
   2c39c:	68c9      	ldr	r1, [r1, #12]
   2c39e:	f7f0 fab3 	bl	1c908 <bt_gatt_mult_notification>
}
   2c3a2:	2000      	movs	r0, #0
   2c3a4:	bd08      	pop	{r3, pc}

0002c3a6 <att_notify>:
{
   2c3a6:	b538      	push	{r3, r4, r5, lr}
   2c3a8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2c3aa:	f101 000c 	add.w	r0, r1, #12
   2c3ae:	460c      	mov	r4, r1
   2c3b0:	f001 fda6 	bl	2df00 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2c3b4:	682d      	ldr	r5, [r5, #0]
   2c3b6:	8a23      	ldrh	r3, [r4, #16]
   2c3b8:	68e2      	ldr	r2, [r4, #12]
   2c3ba:	4601      	mov	r1, r0
   2c3bc:	6828      	ldr	r0, [r5, #0]
   2c3be:	f001 f94a 	bl	2d656 <bt_gatt_notification>
}
   2c3c2:	2000      	movs	r0, #0
   2c3c4:	bd38      	pop	{r3, r4, r5, pc}

0002c3c6 <att_chan_mtu_updated>:
{
   2c3c6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2c3c8:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2c3ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c3cc:	b352      	cbz	r2, 2c424 <att_chan_mtu_updated+0x5e>
	return node->next;
   2c3ce:	6813      	ldr	r3, [r2, #0]
   2c3d0:	b103      	cbz	r3, 2c3d4 <att_chan_mtu_updated+0xe>
   2c3d2:	3bf0      	subs	r3, #240	; 0xf0
   2c3d4:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2c3d8:	2200      	movs	r2, #0
   2c3da:	4611      	mov	r1, r2
   2c3dc:	e000      	b.n	2c3e0 <att_chan_mtu_updated+0x1a>
   2c3de:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2c3e0:	4284      	cmp	r4, r0
   2c3e2:	d007      	beq.n	2c3f4 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c3e4:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c3e6:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2c3e8:	42b1      	cmp	r1, r6
   2c3ea:	bf38      	it	cc
   2c3ec:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2c3ee:	42a2      	cmp	r2, r4
   2c3f0:	bf38      	it	cc
   2c3f2:	4622      	movcc	r2, r4
   2c3f4:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c3f6:	b12b      	cbz	r3, 2c404 <att_chan_mtu_updated+0x3e>
   2c3f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c3fc:	2b00      	cmp	r3, #0
   2c3fe:	d1ee      	bne.n	2c3de <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2c400:	4284      	cmp	r4, r0
   2c402:	d1ef      	bne.n	2c3e4 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c404:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2c406:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2c408:	428b      	cmp	r3, r1
   2c40a:	d801      	bhi.n	2c410 <att_chan_mtu_updated+0x4a>
   2c40c:	4290      	cmp	r0, r2
   2c40e:	d90b      	bls.n	2c428 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c410:	4282      	cmp	r2, r0
   2c412:	bf38      	it	cc
   2c414:	4602      	movcc	r2, r0
   2c416:	4299      	cmp	r1, r3
   2c418:	6828      	ldr	r0, [r5, #0]
   2c41a:	bf38      	it	cc
   2c41c:	4619      	movcc	r1, r3
}
   2c41e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2c420:	f7f0 bb2c 	b.w	1ca7c <bt_gatt_att_max_mtu_changed>
   2c424:	4611      	mov	r1, r2
   2c426:	e7ed      	b.n	2c404 <att_chan_mtu_updated+0x3e>
}
   2c428:	bc70      	pop	{r4, r5, r6}
   2c42a:	4770      	bx	lr

0002c42c <write_cb>:
{
   2c42c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c42e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c430:	4601      	mov	r1, r0
{
   2c432:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2c434:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2c438:	6820      	ldr	r0, [r4, #0]
   2c43a:	f001 f84e 	bl	2d4da <bt_gatt_check_perm>
   2c43e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2c440:	bb00      	cbnz	r0, 2c484 <write_cb+0x58>
	if (!data->req) {
   2c442:	7a23      	ldrb	r3, [r4, #8]
   2c444:	b1b3      	cbz	r3, 2c474 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2c446:	f1a3 0218 	sub.w	r2, r3, #24
   2c44a:	4253      	negs	r3, r2
   2c44c:	4153      	adcs	r3, r2
   2c44e:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2c450:	9301      	str	r3, [sp, #4]
   2c452:	8a63      	ldrh	r3, [r4, #18]
   2c454:	9300      	str	r3, [sp, #0]
   2c456:	68ae      	ldr	r6, [r5, #8]
   2c458:	8a23      	ldrh	r3, [r4, #16]
   2c45a:	68e2      	ldr	r2, [r4, #12]
   2c45c:	6820      	ldr	r0, [r4, #0]
   2c45e:	4629      	mov	r1, r5
   2c460:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2c462:	2800      	cmp	r0, #0
   2c464:	db08      	blt.n	2c478 <write_cb+0x4c>
   2c466:	8a23      	ldrh	r3, [r4, #16]
   2c468:	4298      	cmp	r0, r3
   2c46a:	d10e      	bne.n	2c48a <write_cb+0x5e>
	data->err = 0U;
   2c46c:	2300      	movs	r3, #0
   2c46e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2c470:	2001      	movs	r0, #1
   2c472:	e008      	b.n	2c486 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2c474:	2302      	movs	r3, #2
   2c476:	e7eb      	b.n	2c450 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2c478:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2c47c:	d305      	bcc.n	2c48a <write_cb+0x5e>
		return -err;
   2c47e:	4240      	negs	r0, r0
   2c480:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2c482:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2c484:	2000      	movs	r0, #0
}
   2c486:	b002      	add	sp, #8
   2c488:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2c48a:	200e      	movs	r0, #14
   2c48c:	e7f9      	b.n	2c482 <write_cb+0x56>

0002c48e <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2c48e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c490:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c494:	2300      	movs	r3, #0
   2c496:	9300      	str	r3, [sp, #0]
   2c498:	461a      	mov	r2, r3
   2c49a:	f7ee fed7 	bl	1b24c <bt_gatt_foreach_attr_type>
				  user_data);
}
   2c49e:	b005      	add	sp, #20
   2c4a0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c4a4 <find_info_cb>:
{
   2c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2c4a6:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2c4a8:	6817      	ldr	r7, [r2, #0]
{
   2c4aa:	4605      	mov	r5, r0
   2c4ac:	460e      	mov	r6, r1
   2c4ae:	4614      	mov	r4, r2
	if (!data->rsp) {
   2c4b0:	b963      	cbnz	r3, 2c4cc <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2c4b2:	6850      	ldr	r0, [r2, #4]
   2c4b4:	2101      	movs	r1, #1
   2c4b6:	300c      	adds	r0, #12
   2c4b8:	f7f2 fdfa 	bl	1f0b0 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2c4bc:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2c4be:	682b      	ldr	r3, [r5, #0]
   2c4c0:	781b      	ldrb	r3, [r3, #0]
   2c4c2:	2b00      	cmp	r3, #0
   2c4c4:	bf14      	ite	ne
   2c4c6:	2302      	movne	r3, #2
   2c4c8:	2301      	moveq	r3, #1
   2c4ca:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2c4cc:	68a3      	ldr	r3, [r4, #8]
   2c4ce:	781b      	ldrb	r3, [r3, #0]
   2c4d0:	2b01      	cmp	r3, #1
   2c4d2:	d003      	beq.n	2c4dc <find_info_cb+0x38>
   2c4d4:	2b02      	cmp	r3, #2
   2c4d6:	d019      	beq.n	2c50c <find_info_cb+0x68>
   2c4d8:	2000      	movs	r0, #0
   2c4da:	e016      	b.n	2c50a <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2c4dc:	682b      	ldr	r3, [r5, #0]
   2c4de:	781b      	ldrb	r3, [r3, #0]
   2c4e0:	2b00      	cmp	r3, #0
   2c4e2:	d1f9      	bne.n	2c4d8 <find_info_cb+0x34>
   2c4e4:	6860      	ldr	r0, [r4, #4]
   2c4e6:	2104      	movs	r1, #4
   2c4e8:	300c      	adds	r0, #12
   2c4ea:	f7f2 fde1 	bl	1f0b0 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2c4ee:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2c4f0:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2c4f2:	682a      	ldr	r2, [r5, #0]
   2c4f4:	68e3      	ldr	r3, [r4, #12]
   2c4f6:	8852      	ldrh	r2, [r2, #2]
   2c4f8:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2c4fa:	6863      	ldr	r3, [r4, #4]
   2c4fc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2c4fe:	8a1b      	ldrh	r3, [r3, #16]
   2c500:	1ac0      	subs	r0, r0, r3
   2c502:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2c504:	bf94      	ite	ls
   2c506:	2000      	movls	r0, #0
   2c508:	2001      	movhi	r0, #1
}
   2c50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2c50c:	682b      	ldr	r3, [r5, #0]
   2c50e:	781b      	ldrb	r3, [r3, #0]
   2c510:	2b02      	cmp	r3, #2
   2c512:	d1e1      	bne.n	2c4d8 <find_info_cb+0x34>
   2c514:	6860      	ldr	r0, [r4, #4]
   2c516:	2112      	movs	r1, #18
   2c518:	300c      	adds	r0, #12
   2c51a:	f7f2 fdc9 	bl	1f0b0 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2c51e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2c520:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2c522:	6829      	ldr	r1, [r5, #0]
   2c524:	68e0      	ldr	r0, [r4, #12]
   2c526:	2210      	movs	r2, #16
   2c528:	3101      	adds	r1, #1
   2c52a:	3002      	adds	r0, #2
   2c52c:	f7ff fae4 	bl	2baf8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2c530:	6863      	ldr	r3, [r4, #4]
   2c532:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2c534:	8a1b      	ldrh	r3, [r3, #16]
   2c536:	1ac0      	subs	r0, r0, r3
   2c538:	2812      	cmp	r0, #18
   2c53a:	e7e3      	b.n	2c504 <find_info_cb+0x60>

0002c53c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2c53c:	68d0      	ldr	r0, [r2, #12]
   2c53e:	7803      	ldrb	r3, [r0, #0]
   2c540:	3104      	adds	r1, #4
   2c542:	b913      	cbnz	r3, 2c54a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2c544:	7001      	strb	r1, [r0, #0]
	return true;
   2c546:	2001      	movs	r0, #1
   2c548:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2c54a:	428b      	cmp	r3, r1
   2c54c:	d0fb      	beq.n	2c546 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2c54e:	6891      	ldr	r1, [r2, #8]
   2c550:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2c552:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2c554:	3b04      	subs	r3, #4
   2c556:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2c558:	6110      	str	r0, [r2, #16]
}
   2c55a:	4770      	bx	lr

0002c55c <chan_req_send>:
{
   2c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c55e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2c560:	6888      	ldr	r0, [r1, #8]
   2c562:	f7ff fef4 	bl	2c34e <net_buf_frags_len>
   2c566:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2c568:	4283      	cmp	r3, r0
{
   2c56a:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2c56c:	d30d      	bcc.n	2c58a <chan_req_send+0x2e>
	chan->req = req;
   2c56e:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2c572:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2c574:	2600      	movs	r6, #0
   2c576:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2c578:	4628      	mov	r0, r5
   2c57a:	4639      	mov	r1, r7
   2c57c:	f7ed f8fa 	bl	19774 <chan_send>
	if (err) {
   2c580:	b110      	cbz	r0, 2c588 <chan_req_send+0x2c>
		req->buf = buf;
   2c582:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2c584:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2c588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2c58a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2c58e:	e7fb      	b.n	2c588 <chan_req_send+0x2c>

0002c590 <bt_att_chan_send_rsp>:
{
   2c590:	b538      	push	{r3, r4, r5, lr}
   2c592:	4604      	mov	r4, r0
   2c594:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2c596:	f7ed f8ed 	bl	19774 <chan_send>
	if (err) {
   2c59a:	b130      	cbz	r0, 2c5aa <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2c59c:	4629      	mov	r1, r5
   2c59e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2c5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2c5a6:	f7f2 bc5d 	b.w	1ee64 <net_buf_put>
}
   2c5aa:	bd38      	pop	{r3, r4, r5, pc}

0002c5ac <process_queue>:
{
   2c5ac:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2c5ae:	2200      	movs	r2, #0
{
   2c5b0:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2c5b2:	2300      	movs	r3, #0
   2c5b4:	4608      	mov	r0, r1
{
   2c5b6:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2c5b8:	f001 fc92 	bl	2dee0 <net_buf_get>
	if (buf) {
   2c5bc:	4605      	mov	r5, r0
   2c5be:	b158      	cbz	r0, 2c5d8 <process_queue+0x2c>
	return chan_send(chan, buf);
   2c5c0:	4601      	mov	r1, r0
   2c5c2:	4620      	mov	r0, r4
   2c5c4:	f7ed f8d6 	bl	19774 <chan_send>
		if (err) {
   2c5c8:	4604      	mov	r4, r0
   2c5ca:	b118      	cbz	r0, 2c5d4 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2c5cc:	4629      	mov	r1, r5
   2c5ce:	4630      	mov	r0, r6
   2c5d0:	f002 faf6 	bl	2ebc0 <k_queue_prepend>
}
   2c5d4:	4620      	mov	r0, r4
   2c5d6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2c5d8:	f06f 0401 	mvn.w	r4, #1
   2c5dc:	e7fa      	b.n	2c5d4 <process_queue+0x28>

0002c5de <att_chan_read>:
{
   2c5de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5e2:	4680      	mov	r8, r0
   2c5e4:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c5e6:	4610      	mov	r0, r2
{
   2c5e8:	4699      	mov	r9, r3
   2c5ea:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c5ec:	f7ff feaf 	bl	2c34e <net_buf_frags_len>
   2c5f0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2c5f4:	4283      	cmp	r3, r0
{
   2c5f6:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2c5f8:	d97a      	bls.n	2c6f0 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2c5fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2c5fe:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2c600:	4630      	mov	r0, r6
   2c602:	f7f2 fca7 	bl	1ef54 <net_buf_frag_last>
	size_t len, total = 0;
   2c606:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2c60a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c60c:	4630      	mov	r0, r6
   2c60e:	f7ff fe9e 	bl	2c34e <net_buf_frags_len>
   2c612:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2c616:	f105 070c 	add.w	r7, r5, #12
   2c61a:	1a24      	subs	r4, r4, r0
   2c61c:	4638      	mov	r0, r7
   2c61e:	f001 fc7b 	bl	2df18 <net_buf_simple_tailroom>
   2c622:	4284      	cmp	r4, r0
   2c624:	d211      	bcs.n	2c64a <att_chan_read+0x6c>
   2c626:	4630      	mov	r0, r6
   2c628:	f7ff fe91 	bl	2c34e <net_buf_frags_len>
   2c62c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c630:	1a24      	subs	r4, r4, r0
		if (!len) {
   2c632:	bb34      	cbnz	r4, 2c682 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2c634:	7ab0      	ldrb	r0, [r6, #10]
   2c636:	f7f2 fa53 	bl	1eae0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2c63a:	2200      	movs	r2, #0
   2c63c:	2300      	movs	r3, #0
   2c63e:	f001 fc4a 	bl	2ded6 <net_buf_alloc_fixed>
			if (!frag) {
   2c642:	4605      	mov	r5, r0
   2c644:	b930      	cbnz	r0, 2c654 <att_chan_read+0x76>
	return total;
   2c646:	4657      	mov	r7, sl
   2c648:	e02c      	b.n	2c6a4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2c64a:	4638      	mov	r0, r7
   2c64c:	f001 fc64 	bl	2df18 <net_buf_simple_tailroom>
   2c650:	4604      	mov	r4, r0
   2c652:	e7ee      	b.n	2c632 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2c654:	4601      	mov	r1, r0
   2c656:	4630      	mov	r0, r6
   2c658:	f7f2 fcba 	bl	1efd0 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2c65c:	4630      	mov	r0, r6
   2c65e:	f7ff fe76 	bl	2c34e <net_buf_frags_len>
   2c662:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c666:	f105 070c 	add.w	r7, r5, #12
   2c66a:	1a24      	subs	r4, r4, r0
   2c66c:	4638      	mov	r0, r7
   2c66e:	f001 fc53 	bl	2df18 <net_buf_simple_tailroom>
   2c672:	4284      	cmp	r4, r0
   2c674:	d21a      	bcs.n	2c6ac <att_chan_read+0xce>
   2c676:	4630      	mov	r0, r6
   2c678:	f7ff fe69 	bl	2c34e <net_buf_frags_len>
   2c67c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2c680:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2c682:	68e9      	ldr	r1, [r5, #12]
   2c684:	8a2a      	ldrh	r2, [r5, #16]
   2c686:	f8cd 9000 	str.w	r9, [sp]
   2c68a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2c68e:	9803      	ldr	r0, [sp, #12]
   2c690:	440a      	add	r2, r1
   2c692:	b2a3      	uxth	r3, r4
   2c694:	4659      	mov	r1, fp
   2c696:	47b8      	blx	r7
		if (read < 0) {
   2c698:	1e07      	subs	r7, r0, #0
   2c69a:	da0c      	bge.n	2c6b6 <att_chan_read+0xd8>
				return total;
   2c69c:	f1ba 0f00 	cmp.w	sl, #0
   2c6a0:	bf18      	it	ne
   2c6a2:	4657      	movne	r7, sl
}
   2c6a4:	4638      	mov	r0, r7
   2c6a6:	b005      	add	sp, #20
   2c6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6ac:	4638      	mov	r0, r7
   2c6ae:	f001 fc33 	bl	2df18 <net_buf_simple_tailroom>
   2c6b2:	4604      	mov	r4, r0
   2c6b4:	e7e5      	b.n	2c682 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2c6b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c6b8:	b993      	cbnz	r3, 2c6e0 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2c6ba:	4639      	mov	r1, r7
   2c6bc:	f105 000c 	add.w	r0, r5, #12
   2c6c0:	f7f2 fcf6 	bl	1f0b0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c6c4:	4630      	mov	r0, r6
   2c6c6:	f7ff fe42 	bl	2c34e <net_buf_frags_len>
   2c6ca:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2c6ce:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c6d0:	4283      	cmp	r3, r0
		total += read;
   2c6d2:	44ba      	add	sl, r7
		offset += read;
   2c6d4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2c6d8:	d9b5      	bls.n	2c646 <att_chan_read+0x68>
   2c6da:	42a7      	cmp	r7, r4
   2c6dc:	d096      	beq.n	2c60c <att_chan_read+0x2e>
   2c6de:	e7b2      	b.n	2c646 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2c6e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c6e4:	4639      	mov	r1, r7
   2c6e6:	4628      	mov	r0, r5
   2c6e8:	4798      	blx	r3
   2c6ea:	2800      	cmp	r0, #0
   2c6ec:	d1e5      	bne.n	2c6ba <att_chan_read+0xdc>
   2c6ee:	e7aa      	b.n	2c646 <att_chan_read+0x68>
		return 0;
   2c6f0:	2700      	movs	r7, #0
   2c6f2:	e7d7      	b.n	2c6a4 <att_chan_read+0xc6>

0002c6f4 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   2c6f4:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c6f6:	2200      	movs	r2, #0
   2c6f8:	b903      	cbnz	r3, 2c6fc <sys_slist_find_and_remove.isra.0+0x8>
   2c6fa:	4770      	bx	lr
   2c6fc:	428b      	cmp	r3, r1
   2c6fe:	d10f      	bne.n	2c720 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2c700:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c702:	b93a      	cbnz	r2, 2c714 <sys_slist_find_and_remove.isra.0+0x20>
   2c704:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2c706:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c708:	4291      	cmp	r1, r2
   2c70a:	d100      	bne.n	2c70e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2c70c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2c70e:	2300      	movs	r3, #0
   2c710:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c712:	4770      	bx	lr
	parent->next = child;
   2c714:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c716:	6843      	ldr	r3, [r0, #4]
   2c718:	4299      	cmp	r1, r3
	list->tail = node;
   2c71a:	bf08      	it	eq
   2c71c:	6042      	streq	r2, [r0, #4]
}
   2c71e:	e7f6      	b.n	2c70e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2c720:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c722:	681b      	ldr	r3, [r3, #0]
   2c724:	e7e8      	b.n	2c6f8 <sys_slist_find_and_remove.isra.0+0x4>

0002c726 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2c726:	2006      	movs	r0, #6
   2c728:	4770      	bx	lr

0002c72a <read_cb>:
{
   2c72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2c72c:	6816      	ldr	r6, [r2, #0]
{
   2c72e:	4605      	mov	r5, r0
	data->err = 0x00;
   2c730:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2c732:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   2c734:	7313      	strb	r3, [r2, #12]
{
   2c736:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c738:	4629      	mov	r1, r5
   2c73a:	2295      	movs	r2, #149	; 0x95
   2c73c:	f000 fecd 	bl	2d4da <bt_gatt_check_perm>
   2c740:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c742:	b980      	cbnz	r0, 2c766 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c744:	e9cd 0000 	strd	r0, r0, [sp]
   2c748:	4629      	mov	r1, r5
   2c74a:	88a3      	ldrh	r3, [r4, #4]
   2c74c:	68a2      	ldr	r2, [r4, #8]
   2c74e:	4630      	mov	r0, r6
   2c750:	f7ff ff45 	bl	2c5de <att_chan_read>
	if (ret < 0) {
   2c754:	2800      	cmp	r0, #0
   2c756:	da09      	bge.n	2c76c <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2c758:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2c75c:	bf26      	itte	cs
   2c75e:	4240      	negcs	r0, r0
   2c760:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2c762:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2c764:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c766:	2000      	movs	r0, #0
}
   2c768:	b002      	add	sp, #8
   2c76a:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2c76c:	2001      	movs	r0, #1
   2c76e:	e7fb      	b.n	2c768 <read_cb+0x3e>

0002c770 <read_vl_cb>:
{
   2c770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2c774:	f8d2 8000 	ldr.w	r8, [r2]
{
   2c778:	4606      	mov	r6, r0
	data->err = 0x00;
   2c77a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2c77c:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2c780:	7313      	strb	r3, [r2, #12]
{
   2c782:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2c784:	4631      	mov	r1, r6
   2c786:	2295      	movs	r2, #149	; 0x95
   2c788:	f000 fea7 	bl	2d4da <bt_gatt_check_perm>
   2c78c:	4605      	mov	r5, r0
   2c78e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2c790:	b9e0      	cbnz	r0, 2c7cc <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2c792:	68a0      	ldr	r0, [r4, #8]
   2c794:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2c798:	8a02      	ldrh	r2, [r0, #16]
   2c79a:	1a9b      	subs	r3, r3, r2
   2c79c:	2b01      	cmp	r3, #1
   2c79e:	dd15      	ble.n	2c7cc <read_vl_cb+0x5c>
   2c7a0:	2102      	movs	r1, #2
   2c7a2:	300c      	adds	r0, #12
   2c7a4:	f7f2 fc84 	bl	1f0b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2c7a8:	e9cd 5500 	strd	r5, r5, [sp]
   2c7ac:	4607      	mov	r7, r0
   2c7ae:	88a3      	ldrh	r3, [r4, #4]
   2c7b0:	68a2      	ldr	r2, [r4, #8]
   2c7b2:	4631      	mov	r1, r6
   2c7b4:	4640      	mov	r0, r8
   2c7b6:	f7ff ff12 	bl	2c5de <att_chan_read>
	if (read < 0) {
   2c7ba:	1e03      	subs	r3, r0, #0
   2c7bc:	da0a      	bge.n	2c7d4 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2c7be:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2c7c2:	bf26      	itte	cs
   2c7c4:	425b      	negcs	r3, r3
   2c7c6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2c7c8:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2c7ca:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2c7cc:	2000      	movs	r0, #0
}
   2c7ce:	b002      	add	sp, #8
   2c7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2c7d4:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2c7d6:	2001      	movs	r0, #1
   2c7d8:	e7f9      	b.n	2c7ce <read_vl_cb+0x5e>

0002c7da <bt_att_sent>:
{
   2c7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c7dc:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2c7de:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c7e0:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   2c7e4:	f850 4c04 	ldr.w	r4, [r0, #-4]
   2c7e8:	f3bf 8f5b 	dmb	ish
   2c7ec:	e853 1f00 	ldrex	r1, [r3]
   2c7f0:	f021 0110 	bic.w	r1, r1, #16
   2c7f4:	e843 1200 	strex	r2, r1, [r3]
   2c7f8:	2a00      	cmp	r2, #0
   2c7fa:	d1f7      	bne.n	2c7ec <bt_att_sent+0x12>
   2c7fc:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2c800:	b30c      	cbz	r4, 2c846 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2c802:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2c806:	b98b      	cbnz	r3, 2c82c <bt_att_sent+0x52>
   2c808:	6863      	ldr	r3, [r4, #4]
   2c80a:	b17b      	cbz	r3, 2c82c <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2c80c:	1d20      	adds	r0, r4, #4
   2c80e:	f7ff fd94 	bl	2c33a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c812:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2c814:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c816:	4638      	mov	r0, r7
   2c818:	f7ff fea0 	bl	2c55c <chan_req_send>
   2c81c:	2800      	cmp	r0, #0
   2c81e:	da12      	bge.n	2c846 <bt_att_sent+0x6c>
	return list->head;
   2c820:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2c822:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c824:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2c826:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c828:	b903      	cbnz	r3, 2c82c <bt_att_sent+0x52>
	list->tail = node;
   2c82a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2c82c:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2c830:	4638      	mov	r0, r7
   2c832:	f7ff febb 	bl	2c5ac <process_queue>
	if (!err) {
   2c836:	b130      	cbz	r0, 2c846 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   2c838:	f104 010c 	add.w	r1, r4, #12
   2c83c:	4638      	mov	r0, r7
}
   2c83e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2c842:	f7ff beb3 	b.w	2c5ac <process_queue>
}
   2c846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c848 <att_req_send_process>:
{
   2c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2c84c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2c84e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c850:	2c00      	cmp	r4, #0
   2c852:	d03b      	beq.n	2c8cc <att_req_send_process+0x84>
	return node->next;
   2c854:	f854 69f0 	ldr.w	r6, [r4], #-240
   2c858:	b106      	cbz	r6, 2c85c <att_req_send_process+0x14>
   2c85a:	3ef0      	subs	r6, #240	; 0xf0
{
   2c85c:	2300      	movs	r3, #0
   2c85e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2c860:	f108 0704 	add.w	r7, r8, #4
   2c864:	e013      	b.n	2c88e <att_req_send_process+0x46>
		if (!req && prev &&
   2c866:	b1c3      	cbz	r3, 2c89a <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2c868:	2103      	movs	r1, #3
   2c86a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2c86e:	f7ff fd88 	bl	2c382 <atomic_test_bit>
   2c872:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2c874:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2c878:	f7ff fd83 	bl	2c382 <atomic_test_bit>
		if (!req && prev &&
   2c87c:	4282      	cmp	r2, r0
   2c87e:	d10c      	bne.n	2c89a <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c880:	b326      	cbz	r6, 2c8cc <att_req_send_process+0x84>
   2c882:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2c886:	b102      	cbz	r2, 2c88a <att_req_send_process+0x42>
   2c888:	3af0      	subs	r2, #240	; 0xf0
{
   2c88a:	4634      	mov	r4, r6
   2c88c:	4616      	mov	r6, r2
		if (chan->req) {
   2c88e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2c892:	2a00      	cmp	r2, #0
   2c894:	d1f4      	bne.n	2c880 <att_req_send_process+0x38>
		if (!req && prev &&
   2c896:	2d00      	cmp	r5, #0
   2c898:	d0e5      	beq.n	2c866 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2c89a:	4638      	mov	r0, r7
   2c89c:	f7ff fd4d 	bl	2c33a <sys_slist_get>
	if (node) {
   2c8a0:	4605      	mov	r5, r0
   2c8a2:	b908      	cbnz	r0, 2c8a8 <att_req_send_process+0x60>
   2c8a4:	4623      	mov	r3, r4
   2c8a6:	e7eb      	b.n	2c880 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2c8a8:	4601      	mov	r1, r0
   2c8aa:	4620      	mov	r0, r4
   2c8ac:	f7ec ffc2 	bl	19834 <bt_att_chan_req_send>
   2c8b0:	2800      	cmp	r0, #0
   2c8b2:	da0b      	bge.n	2c8cc <att_req_send_process+0x84>
	return list->head;
   2c8b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2c8b8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2c8be:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c8c2:	2b00      	cmp	r3, #0
   2c8c4:	d1ee      	bne.n	2c8a4 <att_req_send_process+0x5c>
	list->tail = node;
   2c8c6:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2c8ca:	e7eb      	b.n	2c8a4 <att_req_send_process+0x5c>
}
   2c8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c8d0 <bt_att_status>:
{
   2c8d0:	b538      	push	{r3, r4, r5, lr}
   2c8d2:	4605      	mov	r5, r0
   2c8d4:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2c8d6:	2100      	movs	r1, #0
   2c8d8:	f7ff fd53 	bl	2c382 <atomic_test_bit>
   2c8dc:	b1c0      	cbz	r0, 2c910 <bt_att_status+0x40>
	if (!chan->att) {
   2c8de:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2c8e2:	b1a8      	cbz	r0, 2c910 <bt_att_status+0x40>
	if (chan->req) {
   2c8e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2c8e8:	b993      	cbnz	r3, 2c910 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2c8ea:	3004      	adds	r0, #4
   2c8ec:	f7ff fd25 	bl	2c33a <sys_slist_get>
	if (!node) {
   2c8f0:	4604      	mov	r4, r0
   2c8f2:	b168      	cbz	r0, 2c910 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2c8f4:	4601      	mov	r1, r0
   2c8f6:	1f28      	subs	r0, r5, #4
   2c8f8:	f7ec ff9c 	bl	19834 <bt_att_chan_req_send>
   2c8fc:	2800      	cmp	r0, #0
   2c8fe:	da07      	bge.n	2c910 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2c900:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2c904:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2c906:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c908:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2c90a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c90c:	b902      	cbnz	r2, 2c910 <bt_att_status+0x40>
	list->tail = node;
   2c90e:	609c      	str	r4, [r3, #8]
}
   2c910:	bd38      	pop	{r3, r4, r5, pc}

0002c912 <atomic_test_and_set_bit>:
{
   2c912:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c914:	2301      	movs	r3, #1
   2c916:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c91a:	f3bf 8f5b 	dmb	ish
   2c91e:	e850 3f00 	ldrex	r3, [r0]
   2c922:	ea43 0201 	orr.w	r2, r3, r1
   2c926:	e840 2400 	strex	r4, r2, [r0]
   2c92a:	2c00      	cmp	r4, #0
   2c92c:	d1f7      	bne.n	2c91e <atomic_test_and_set_bit+0xc>
   2c92e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c932:	4219      	tst	r1, r3
}
   2c934:	bf14      	ite	ne
   2c936:	2001      	movne	r0, #1
   2c938:	2000      	moveq	r0, #0
   2c93a:	bd10      	pop	{r4, pc}

0002c93c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2c93c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2c93e:	6883      	ldr	r3, [r0, #8]
   2c940:	699b      	ldr	r3, [r3, #24]
   2c942:	b10b      	cbz	r3, 2c948 <att_sent+0xc>
		chan->ops->sent(chan);
   2c944:	3004      	adds	r0, #4
   2c946:	4718      	bx	r3
}
   2c948:	4770      	bx	lr

0002c94a <att_tx_complete>:
{
   2c94a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c94e:	4606      	mov	r6, r0
   2c950:	460d      	mov	r5, r1
	if (!err) {
   2c952:	4614      	mov	r4, r2
   2c954:	b122      	cbz	r2, 2c960 <att_tx_complete+0x16>
}
   2c956:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2c95a:	4608      	mov	r0, r1
   2c95c:	f7ec beee 	b.w	1973c <tx_meta_data_free>
		att_sent(conn, user_data);
   2c960:	f7ff ffec 	bl	2c93c <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2c964:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2c966:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2c96a:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2c96e:	4628      	mov	r0, r5
   2c970:	f7ec fee4 	bl	1973c <tx_meta_data_free>
	if (!err && func) {
   2c974:	b92f      	cbnz	r7, 2c982 <att_tx_complete+0x38>
}
   2c976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2c97a:	4649      	mov	r1, r9
   2c97c:	4630      	mov	r0, r6
   2c97e:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2c980:	3401      	adds	r4, #1
   2c982:	b2a3      	uxth	r3, r4
   2c984:	4543      	cmp	r3, r8
   2c986:	d3f8      	bcc.n	2c97a <att_tx_complete+0x30>
   2c988:	e7f5      	b.n	2c976 <att_tx_complete+0x2c>

0002c98a <att_req_sent>:
{
   2c98a:	b510      	push	{r4, lr}
   2c98c:	460c      	mov	r4, r1
	if (!err) {
   2c98e:	b90a      	cbnz	r2, 2c994 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2c990:	f7ff ffd4 	bl	2c93c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2c994:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2c996:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2c99a:	b12b      	cbz	r3, 2c9a8 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2c99c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c9a0:	2300      	movs	r3, #0
   2c9a2:	30c0      	adds	r0, #192	; 0xc0
   2c9a4:	f7f8 fe3e 	bl	25624 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2c9a8:	4620      	mov	r0, r4
}
   2c9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2c9ae:	f7ec bec5 	b.w	1973c <tx_meta_data_free>

0002c9b2 <att_cfm_sent>:
{
   2c9b2:	b510      	push	{r4, lr}
   2c9b4:	460c      	mov	r4, r1
	if (!err) {
   2c9b6:	b90a      	cbnz	r2, 2c9bc <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2c9b8:	f7ff ffc0 	bl	2c93c <att_sent>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c9bc:	6823      	ldr	r3, [r4, #0]
   2c9be:	f3bf 8f5b 	dmb	ish
   2c9c2:	3398      	adds	r3, #152	; 0x98
   2c9c4:	e853 1f00 	ldrex	r1, [r3]
   2c9c8:	f021 0102 	bic.w	r1, r1, #2
   2c9cc:	e843 1200 	strex	r2, r1, [r3]
   2c9d0:	2a00      	cmp	r2, #0
   2c9d2:	d1f7      	bne.n	2c9c4 <att_cfm_sent+0x12>
   2c9d4:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2c9d8:	4620      	mov	r0, r4
}
   2c9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2c9de:	f7ec bead 	b.w	1973c <tx_meta_data_free>

0002c9e2 <att_rsp_sent>:
{
   2c9e2:	b510      	push	{r4, lr}
   2c9e4:	460c      	mov	r4, r1
	if (!err) {
   2c9e6:	b90a      	cbnz	r2, 2c9ec <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2c9e8:	f7ff ffa8 	bl	2c93c <att_sent>
   2c9ec:	6823      	ldr	r3, [r4, #0]
   2c9ee:	f3bf 8f5b 	dmb	ish
   2c9f2:	3398      	adds	r3, #152	; 0x98
   2c9f4:	e853 1f00 	ldrex	r1, [r3]
   2c9f8:	f021 0101 	bic.w	r1, r1, #1
   2c9fc:	e843 1200 	strex	r2, r1, [r3]
   2ca00:	2a00      	cmp	r2, #0
   2ca02:	d1f7      	bne.n	2c9f4 <att_rsp_sent+0x12>
   2ca04:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2ca08:	4620      	mov	r0, r4
}
   2ca0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2ca0e:	f7ec be95 	b.w	1973c <tx_meta_data_free>

0002ca12 <att_indicate>:
{
   2ca12:	b570      	push	{r4, r5, r6, lr}
   2ca14:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   2ca16:	f101 000c 	add.w	r0, r1, #12
   2ca1a:	460d      	mov	r5, r1
   2ca1c:	f001 fa70 	bl	2df00 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2ca20:	6826      	ldr	r6, [r4, #0]
   2ca22:	8a2b      	ldrh	r3, [r5, #16]
   2ca24:	68ea      	ldr	r2, [r5, #12]
   2ca26:	4601      	mov	r1, r0
   2ca28:	6830      	ldr	r0, [r6, #0]
   2ca2a:	f000 fe14 	bl	2d656 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   2ca2e:	211e      	movs	r1, #30
   2ca30:	2200      	movs	r2, #0
   2ca32:	4620      	mov	r0, r4
   2ca34:	f7ed f86a 	bl	19b0c <bt_att_chan_create_pdu>
	if (!buf) {
   2ca38:	4601      	mov	r1, r0
   2ca3a:	b110      	cbz	r0, 2ca42 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   2ca3c:	4620      	mov	r0, r4
   2ca3e:	f7ff fda7 	bl	2c590 <bt_att_chan_send_rsp>
}
   2ca42:	2000      	movs	r0, #0
   2ca44:	bd70      	pop	{r4, r5, r6, pc}

0002ca46 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ca46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca4a:	4688      	mov	r8, r1
   2ca4c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ca4e:	2101      	movs	r1, #1
   2ca50:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2ca52:	4605      	mov	r5, r0
   2ca54:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2ca56:	f7ed f859 	bl	19b0c <bt_att_chan_create_pdu>
	if (!buf) {
   2ca5a:	4604      	mov	r4, r0
   2ca5c:	b170      	cbz	r0, 2ca7c <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   2ca5e:	2104      	movs	r1, #4
   2ca60:	300c      	adds	r0, #12
   2ca62:	f7f2 fb25 	bl	1f0b0 <net_buf_simple_add>
	rsp->request = req;
   2ca66:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2ca6a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2ca6e:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2ca70:	4621      	mov	r1, r4
   2ca72:	4628      	mov	r0, r5
}
   2ca74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2ca78:	f7ff bd8a 	b.w	2c590 <bt_att_chan_send_rsp>
}
   2ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ca80 <att_write_req>:
{
   2ca80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ca82:	460c      	mov	r4, r1
   2ca84:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2ca86:	f101 000c 	add.w	r0, r1, #12
   2ca8a:	f001 fa39 	bl	2df00 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2ca8e:	8a22      	ldrh	r2, [r4, #16]
   2ca90:	9201      	str	r2, [sp, #4]
   2ca92:	68e2      	ldr	r2, [r4, #12]
   2ca94:	9200      	str	r2, [sp, #0]
   2ca96:	4603      	mov	r3, r0
   2ca98:	2213      	movs	r2, #19
   2ca9a:	2112      	movs	r1, #18
   2ca9c:	4628      	mov	r0, r5
   2ca9e:	f7ed f8fb 	bl	19c98 <att_write_rsp.constprop.0>
}
   2caa2:	b003      	add	sp, #12
   2caa4:	bd30      	pop	{r4, r5, pc}

0002caa6 <att_write_cmd>:
{
   2caa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2caa8:	460c      	mov	r4, r1
   2caaa:	4605      	mov	r5, r0
   2caac:	f101 000c 	add.w	r0, r1, #12
   2cab0:	f001 fa26 	bl	2df00 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2cab4:	8a22      	ldrh	r2, [r4, #16]
   2cab6:	9201      	str	r2, [sp, #4]
   2cab8:	68e2      	ldr	r2, [r4, #12]
   2caba:	9200      	str	r2, [sp, #0]
   2cabc:	2200      	movs	r2, #0
   2cabe:	4603      	mov	r3, r0
   2cac0:	4611      	mov	r1, r2
   2cac2:	4628      	mov	r0, r5
   2cac4:	f7ed f8e8 	bl	19c98 <att_write_rsp.constprop.0>
}
   2cac8:	b003      	add	sp, #12
   2caca:	bd30      	pop	{r4, r5, pc}

0002cacc <att_read_blob_req>:
{
   2cacc:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2cace:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2cad0:	8813      	ldrh	r3, [r2, #0]
   2cad2:	8852      	ldrh	r2, [r2, #2]
   2cad4:	9200      	str	r2, [sp, #0]
   2cad6:	210c      	movs	r1, #12
   2cad8:	220d      	movs	r2, #13
   2cada:	f7ed fa95 	bl	1a008 <att_read_rsp>
}
   2cade:	b003      	add	sp, #12
   2cae0:	f85d fb04 	ldr.w	pc, [sp], #4

0002cae4 <att_read_req>:
{
   2cae4:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2cae6:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2cae8:	2200      	movs	r2, #0
   2caea:	881b      	ldrh	r3, [r3, #0]
   2caec:	9200      	str	r2, [sp, #0]
   2caee:	210a      	movs	r1, #10
   2caf0:	220b      	movs	r2, #11
   2caf2:	f7ed fa89 	bl	1a008 <att_read_rsp>
}
   2caf6:	b003      	add	sp, #12
   2caf8:	f85d fb04 	ldr.w	pc, [sp], #4

0002cafc <att_mtu_req>:
{
   2cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cb00:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2cb02:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2cb06:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cb08:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2cb0a:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2cb0c:	f7ff fc39 	bl	2c382 <atomic_test_bit>
   2cb10:	4604      	mov	r4, r0
   2cb12:	bb60      	cbnz	r0, 2cb6e <att_mtu_req+0x72>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2cb14:	68db      	ldr	r3, [r3, #12]
   2cb16:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2cb18:	2f16      	cmp	r7, #22
   2cb1a:	d92a      	bls.n	2cb72 <att_mtu_req+0x76>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2cb1c:	2202      	movs	r2, #2
   2cb1e:	4630      	mov	r0, r6
   2cb20:	f7ed f91e 	bl	19d60 <bt_att_create_pdu>
	if (!pdu) {
   2cb24:	4680      	mov	r8, r0
   2cb26:	b330      	cbz	r0, 2cb76 <att_mtu_req+0x7a>
	return net_buf_simple_add(&buf->b, len);
   2cb28:	2102      	movs	r1, #2
   2cb2a:	300c      	adds	r0, #12
   2cb2c:	f7f2 fac0 	bl	1f0b0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2cb30:	2341      	movs	r3, #65	; 0x41
   2cb32:	7003      	strb	r3, [r0, #0]
   2cb34:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2cb36:	4641      	mov	r1, r8
   2cb38:	4628      	mov	r0, r5
   2cb3a:	f7ff fd29 	bl	2c590 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2cb3e:	2f41      	cmp	r7, #65	; 0x41
   2cb40:	bf28      	it	cs
   2cb42:	2741      	movcs	r7, #65	; 0x41
   2cb44:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cb46:	856f      	strh	r7, [r5, #42]	; 0x2a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cb48:	3604      	adds	r6, #4
   2cb4a:	f3bf 8f5b 	dmb	ish
   2cb4e:	e856 3f00 	ldrex	r3, [r6]
   2cb52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2cb56:	e846 3200 	strex	r2, r3, [r6]
   2cb5a:	2a00      	cmp	r2, #0
   2cb5c:	d1f7      	bne.n	2cb4e <att_mtu_req+0x52>
   2cb5e:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   2cb62:	4628      	mov	r0, r5
   2cb64:	f7ff fc2f 	bl	2c3c6 <att_chan_mtu_updated>
	return 0;
   2cb68:	4620      	mov	r0, r4
}
   2cb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2cb6e:	2006      	movs	r0, #6
   2cb70:	e7fb      	b.n	2cb6a <att_mtu_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
   2cb72:	2004      	movs	r0, #4
   2cb74:	e7f9      	b.n	2cb6a <att_mtu_req+0x6e>
		return BT_ATT_ERR_UNLIKELY;
   2cb76:	200e      	movs	r0, #14
   2cb78:	e7f7      	b.n	2cb6a <att_mtu_req+0x6e>

0002cb7a <bt_att_get_mtu>:
{
   2cb7a:	b508      	push	{r3, lr}
	att = att_get(conn);
   2cb7c:	f7ec fd02 	bl	19584 <att_get>
	if (!att) {
   2cb80:	b138      	cbz	r0, 2cb92 <bt_att_get_mtu+0x18>
	return list->head;
   2cb82:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cb84:	b128      	cbz	r0, 2cb92 <bt_att_get_mtu+0x18>
	return node->next;
   2cb86:	6803      	ldr	r3, [r0, #0]
   2cb88:	b103      	cbz	r3, 2cb8c <bt_att_get_mtu+0x12>
   2cb8a:	3bf0      	subs	r3, #240	; 0xf0
		if (chan->chan.tx.mtu > mtu) {
   2cb8c:	f830 0cc6 	ldrh.w	r0, [r0, #-198]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cb90:	b903      	cbnz	r3, 2cb94 <bt_att_get_mtu+0x1a>
}
   2cb92:	bd08      	pop	{r3, pc}
   2cb94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2cb98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   2cb9a:	4298      	cmp	r0, r3
   2cb9c:	bf38      	it	cc
   2cb9e:	4618      	movcc	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2cba0:	2a00      	cmp	r2, #0
   2cba2:	d0f6      	beq.n	2cb92 <bt_att_get_mtu+0x18>
   2cba4:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
   2cba8:	e7f4      	b.n	2cb94 <bt_att_get_mtu+0x1a>

0002cbaa <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2cbaa:	8a0a      	ldrh	r2, [r1, #16]
   2cbac:	68c9      	ldr	r1, [r1, #12]
   2cbae:	2300      	movs	r3, #0
   2cbb0:	f7ed bbd6 	b.w	1a360 <att_handle_rsp>

0002cbb4 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   2cbb4:	f7ff bff9 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbb8 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   2cbb8:	f7ff bff7 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbbc <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   2cbbc:	f7ff bff5 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbc0 <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   2cbc0:	f7ff bff3 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbc4 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   2cbc4:	f7ff bff1 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbc8 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   2cbc8:	f7ff bfef 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbcc <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   2cbcc:	f7ff bfed 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbd0 <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   2cbd0:	f7ff bfeb 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbd4 <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   2cbd4:	f7ff bfe9 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbd8 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   2cbd8:	f7ff bfe7 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbdc <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   2cbdc:	f7ff bfe5 	b.w	2cbaa <att_handle_find_info_rsp>

0002cbe0 <att_mtu_rsp>:
{
   2cbe0:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2cbe2:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2cbe4:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2cbe6:	2b16      	cmp	r3, #22
{
   2cbe8:	4604      	mov	r4, r0
   2cbea:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2cbec:	d806      	bhi.n	2cbfc <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2cbee:	2200      	movs	r2, #0
   2cbf0:	2304      	movs	r3, #4
   2cbf2:	4611      	mov	r1, r2
}
   2cbf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2cbf8:	f7ed bbb2 	b.w	1a360 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2cbfc:	2b41      	cmp	r3, #65	; 0x41
   2cbfe:	bf28      	it	cs
   2cc00:	2341      	movcs	r3, #65	; 0x41
   2cc02:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2cc04:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2cc06:	f7ff fbde 	bl	2c3c6 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2cc0a:	8a2a      	ldrh	r2, [r5, #16]
   2cc0c:	2300      	movs	r3, #0
   2cc0e:	4631      	mov	r1, r6
   2cc10:	4620      	mov	r0, r4
   2cc12:	e7ef      	b.n	2cbf4 <att_mtu_rsp+0x14>

0002cc14 <bt_att_encrypt_change>:
{
   2cc14:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2cc16:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2cc18:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2cc1c:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2cc20:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2cc22:	2b00      	cmp	r3, #0
   2cc24:	d038      	beq.n	2cc98 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2cc26:	b141      	cbz	r1, 2cc3a <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2cc28:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2cc2c:	2b00      	cmp	r3, #0
   2cc2e:	d033      	beq.n	2cc98 <bt_att_encrypt_change+0x84>
   2cc30:	7c1b      	ldrb	r3, [r3, #16]
   2cc32:	07da      	lsls	r2, r3, #31
   2cc34:	d530      	bpl.n	2cc98 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2cc36:	2305      	movs	r3, #5
   2cc38:	e021      	b.n	2cc7e <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2cc3a:	4628      	mov	r0, r5
   2cc3c:	f7ef ff32 	bl	1caa4 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2cc40:	7a6b      	ldrb	r3, [r5, #9]
   2cc42:	2b01      	cmp	r3, #1
   2cc44:	d028      	beq.n	2cc98 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2cc46:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2cc4a:	b32d      	cbz	r5, 2cc98 <bt_att_encrypt_change+0x84>
   2cc4c:	7c2b      	ldrb	r3, [r5, #16]
   2cc4e:	07db      	lsls	r3, r3, #31
   2cc50:	d522      	bpl.n	2cc98 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2cc52:	68eb      	ldr	r3, [r5, #12]
   2cc54:	2b00      	cmp	r3, #0
   2cc56:	d0ee      	beq.n	2cc36 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2cc58:	696a      	ldr	r2, [r5, #20]
   2cc5a:	7c69      	ldrb	r1, [r5, #17]
   2cc5c:	4630      	mov	r0, r6
   2cc5e:	f7ec ff55 	bl	19b0c <bt_att_chan_create_pdu>
	if (!buf) {
   2cc62:	4604      	mov	r4, r0
   2cc64:	b150      	cbz	r0, 2cc7c <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2cc66:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2cc6a:	68eb      	ldr	r3, [r5, #12]
   2cc6c:	4798      	blx	r3
   2cc6e:	b168      	cbz	r0, 2cc8c <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2cc70:	69a0      	ldr	r0, [r4, #24]
   2cc72:	f7ec fd63 	bl	1973c <tx_meta_data_free>
		net_buf_unref(buf);
   2cc76:	4620      	mov	r0, r4
   2cc78:	f7f2 f914 	bl	1eea4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2cc7c:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2cc7e:	2200      	movs	r2, #0
   2cc80:	4630      	mov	r0, r6
   2cc82:	4611      	mov	r1, r2
}
   2cc84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2cc88:	f7ed bb6a 	b.w	1a360 <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2cc8c:	4621      	mov	r1, r4
   2cc8e:	4630      	mov	r0, r6
   2cc90:	f7ec fd70 	bl	19774 <chan_send>
   2cc94:	2800      	cmp	r0, #0
   2cc96:	d1eb      	bne.n	2cc70 <bt_att_encrypt_change+0x5c>
}
   2cc98:	bd70      	pop	{r4, r5, r6, pc}

0002cc9a <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2cc9a:	b510      	push	{r4, lr}
   2cc9c:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2cc9e:	f7ec fc71 	bl	19584 <att_get>
	if (!att) {
   2cca2:	b198      	cbz	r0, 2cccc <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2cca4:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2cca6:	b14b      	cbz	r3, 2ccbc <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2cca8:	f853 2c54 	ldr.w	r2, [r3, #-84]
   2ccac:	6991      	ldr	r1, [r2, #24]
   2ccae:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2ccb0:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (chan->req->user_data == user_data) {
   2ccb4:	d009      	beq.n	2ccca <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2ccb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2ccba:	e7f4      	b.n	2cca6 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2ccbc:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2ccbe:	b128      	cbz	r0, 2cccc <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2ccc0:	6983      	ldr	r3, [r0, #24]
   2ccc2:	42a3      	cmp	r3, r4
   2ccc4:	d002      	beq.n	2cccc <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2ccc6:	6800      	ldr	r0, [r0, #0]
   2ccc8:	e7f9      	b.n	2ccbe <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   2ccca:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2cccc:	bd10      	pop	{r4, pc}

0002ccce <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2ccce:	2001      	movs	r0, #1
   2ccd0:	4770      	bx	lr

0002ccd2 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2ccd2:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2ccd4:	f7ec fc56 	bl	19584 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2ccd8:	b198      	cbz	r0, 2cd02 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2ccda:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2ccdc:	b18b      	cbz	r3, 2cd02 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ccde:	f3bf 8f5b 	dmb	ish
   2cce2:	3bf0      	subs	r3, #240	; 0xf0
   2cce4:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2cce8:	e852 0f00 	ldrex	r0, [r2]
   2ccec:	f020 0020 	bic.w	r0, r0, #32
   2ccf0:	e842 0100 	strex	r1, r0, [r2]
   2ccf4:	2900      	cmp	r1, #0
   2ccf6:	d1f7      	bne.n	2cce8 <bt_att_clear_out_of_sync_sent+0x16>
   2ccf8:	f3bf 8f5b 	dmb	ish
	return node->next;
   2ccfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2cd00:	e7ec      	b.n	2ccdc <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2cd02:	bd08      	pop	{r3, pc}

0002cd04 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2cd04:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2cd06:	2104      	movs	r1, #4
   2cd08:	f7ff fb0c 	bl	2c324 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2cd0c:	b128      	cbz	r0, 2cd1a <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2cd0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2cd12:	2105      	movs	r1, #5
   2cd14:	3094      	adds	r0, #148	; 0x94
   2cd16:	f7ff bb34 	b.w	2c382 <atomic_test_bit>
}
   2cd1a:	bd08      	pop	{r3, pc}

0002cd1c <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2cd1c:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2cd1e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2cd22:	2201      	movs	r2, #1
   2cd24:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2cd26:	7403      	strb	r3, [r0, #16]
}
   2cd28:	4770      	bx	lr

0002cd2a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2cd2a:	6010      	str	r0, [r2, #0]
}
   2cd2c:	2000      	movs	r0, #0
   2cd2e:	4770      	bx	lr

0002cd30 <gatt_ccc_changed>:
{
   2cd30:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2cd32:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2cd34:	895a      	ldrh	r2, [r3, #10]
   2cd36:	428a      	cmp	r2, r1
   2cd38:	d003      	beq.n	2cd42 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2cd3a:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2cd3c:	68db      	ldr	r3, [r3, #12]
   2cd3e:	b103      	cbz	r3, 2cd42 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2cd40:	4718      	bx	r3
}
   2cd42:	4770      	bx	lr

0002cd44 <gatt_indicate_rsp>:
{
   2cd44:	b510      	push	{r4, lr}
   2cd46:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2cd48:	68a3      	ldr	r3, [r4, #8]
{
   2cd4a:	460a      	mov	r2, r1
	if (params->func) {
   2cd4c:	b10b      	cbz	r3, 2cd52 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2cd4e:	4621      	mov	r1, r4
   2cd50:	4798      	blx	r3
	params->_ref--;
   2cd52:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2cd54:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2cd56:	3b01      	subs	r3, #1
   2cd58:	b2db      	uxtb	r3, r3
   2cd5a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2cd5c:	b122      	cbz	r2, 2cd68 <gatt_indicate_rsp+0x24>
   2cd5e:	b91b      	cbnz	r3, 2cd68 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2cd60:	4620      	mov	r0, r4
}
   2cd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2cd66:	4710      	bx	r2
}
   2cd68:	bd10      	pop	{r4, pc}

0002cd6a <match_uuid>:
	data->attr = attr;
   2cd6a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2cd6c:	8091      	strh	r1, [r2, #4]
}
   2cd6e:	2000      	movs	r0, #0
   2cd70:	4770      	bx	lr

0002cd72 <gatt_write_rsp>:
{
   2cd72:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2cd74:	6813      	ldr	r3, [r2, #0]
   2cd76:	4718      	bx	r3

0002cd78 <ccc_set_cb>:
}
   2cd78:	2000      	movs	r0, #0
   2cd7a:	4770      	bx	lr

0002cd7c <gen_hash_m>:
{
   2cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2cd7e:	6807      	ldr	r7, [r0, #0]
   2cd80:	783d      	ldrb	r5, [r7, #0]
{
   2cd82:	b089      	sub	sp, #36	; 0x24
   2cd84:	4606      	mov	r6, r0
   2cd86:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2cd88:	b9dd      	cbnz	r5, 2cdc2 <gen_hash_m+0x46>
	switch (u16->val) {
   2cd8a:	887b      	ldrh	r3, [r7, #2]
   2cd8c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2cd90:	d004      	beq.n	2cd9c <gen_hash_m+0x20>
   2cd92:	d810      	bhi.n	2cdb6 <gen_hash_m+0x3a>
   2cd94:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2cd98:	2b03      	cmp	r3, #3
   2cd9a:	d812      	bhi.n	2cdc2 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2cd9c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cda0:	2202      	movs	r2, #2
   2cda2:	f10d 010a 	add.w	r1, sp, #10
   2cda6:	4620      	mov	r0, r4
   2cda8:	f7fe fd1c 	bl	2b7e4 <tc_cmac_update>
   2cdac:	b968      	cbnz	r0, 2cdca <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2cdae:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2cdb2:	65a2      	str	r2, [r4, #88]	; 0x58
   2cdb4:	e006      	b.n	2cdc4 <gen_hash_m+0x48>
	switch (u16->val) {
   2cdb6:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2cdba:	33ff      	adds	r3, #255	; 0xff
   2cdbc:	b29b      	uxth	r3, r3
   2cdbe:	2b04      	cmp	r3, #4
   2cdc0:	d91e      	bls.n	2ce00 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2cdc2:	2501      	movs	r5, #1
}
   2cdc4:	4628      	mov	r0, r5
   2cdc6:	b009      	add	sp, #36	; 0x24
   2cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2cdca:	887b      	ldrh	r3, [r7, #2]
   2cdcc:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cdd0:	2202      	movs	r2, #2
   2cdd2:	f10d 010a 	add.w	r1, sp, #10
   2cdd6:	4620      	mov	r0, r4
   2cdd8:	f7fe fd04 	bl	2b7e4 <tc_cmac_update>
   2cddc:	2800      	cmp	r0, #0
   2cdde:	d0e6      	beq.n	2cdae <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2cde0:	2000      	movs	r0, #0
   2cde2:	9000      	str	r0, [sp, #0]
   2cde4:	aa03      	add	r2, sp, #12
   2cde6:	6877      	ldr	r7, [r6, #4]
   2cde8:	2313      	movs	r3, #19
   2cdea:	4631      	mov	r1, r6
   2cdec:	47b8      	blx	r7
		if (len < 0) {
   2cdee:	1e02      	subs	r2, r0, #0
   2cdf0:	dbdf      	blt.n	2cdb2 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2cdf2:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2cdf4:	4620      	mov	r0, r4
   2cdf6:	f7fe fcf5 	bl	2b7e4 <tc_cmac_update>
   2cdfa:	2800      	cmp	r0, #0
   2cdfc:	d1e1      	bne.n	2cdc2 <gen_hash_m+0x46>
   2cdfe:	e7d6      	b.n	2cdae <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2ce00:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce04:	2202      	movs	r2, #2
   2ce06:	f10d 010a 	add.w	r1, sp, #10
   2ce0a:	4620      	mov	r0, r4
   2ce0c:	f7fe fcea 	bl	2b7e4 <tc_cmac_update>
   2ce10:	2800      	cmp	r0, #0
   2ce12:	d0cc      	beq.n	2cdae <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2ce14:	887b      	ldrh	r3, [r7, #2]
   2ce16:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2ce1a:	2202      	movs	r2, #2
   2ce1c:	f10d 010a 	add.w	r1, sp, #10
   2ce20:	e7e8      	b.n	2cdf4 <gen_hash_m+0x78>

0002ce22 <bt_addr_le_eq>:
{
   2ce22:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2ce24:	2207      	movs	r2, #7
   2ce26:	f7fe fe40 	bl	2baaa <memcmp>
}
   2ce2a:	fab0 f080 	clz	r0, r0
   2ce2e:	0940      	lsrs	r0, r0, #5
   2ce30:	bd08      	pop	{r3, pc}

0002ce32 <ccc_find_cfg>:
{
   2ce32:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2ce34:	7803      	ldrb	r3, [r0, #0]
   2ce36:	4293      	cmp	r3, r2
{
   2ce38:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2ce3a:	d105      	bne.n	2ce48 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2ce3c:	3001      	adds	r0, #1
   2ce3e:	f7ff fff0 	bl	2ce22 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2ce42:	b108      	cbz	r0, 2ce48 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2ce44:	4620      	mov	r0, r4
}
   2ce46:	bd10      	pop	{r4, pc}
	return NULL;
   2ce48:	2000      	movs	r0, #0
   2ce4a:	e7fc      	b.n	2ce46 <ccc_find_cfg+0x14>

0002ce4c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ce4c:	f3bf 8f5b 	dmb	ish
   2ce50:	6800      	ldr	r0, [r0, #0]
   2ce52:	f3bf 8f5b 	dmb	ish
}
   2ce56:	4770      	bx	lr

0002ce58 <atomic_or>:
{
   2ce58:	b510      	push	{r4, lr}
   2ce5a:	4603      	mov	r3, r0
}
   2ce5c:	f3bf 8f5b 	dmb	ish
   2ce60:	e853 0f00 	ldrex	r0, [r3]
   2ce64:	ea40 0201 	orr.w	r2, r0, r1
   2ce68:	e843 2400 	strex	r4, r2, [r3]
   2ce6c:	2c00      	cmp	r4, #0
   2ce6e:	d1f7      	bne.n	2ce60 <atomic_or+0x8>
   2ce70:	f3bf 8f5b 	dmb	ish
   2ce74:	bd10      	pop	{r4, pc}

0002ce76 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2ce76:	2207      	movs	r2, #7
   2ce78:	f7fe be3e 	b.w	2baf8 <memcpy>

0002ce7c <atomic_and>:
{
   2ce7c:	b510      	push	{r4, lr}
   2ce7e:	4603      	mov	r3, r0
}
   2ce80:	f3bf 8f5b 	dmb	ish
   2ce84:	e853 0f00 	ldrex	r0, [r3]
   2ce88:	ea00 0201 	and.w	r2, r0, r1
   2ce8c:	e843 2400 	strex	r4, r2, [r3]
   2ce90:	2c00      	cmp	r4, #0
   2ce92:	d1f7      	bne.n	2ce84 <atomic_and+0x8>
   2ce94:	f3bf 8f5b 	dmb	ish
   2ce98:	bd10      	pop	{r4, pc}

0002ce9a <read_included_uuid_encode>:
{
   2ce9a:	b510      	push	{r4, lr}
   2ce9c:	2102      	movs	r1, #2
   2ce9e:	300c      	adds	r0, #12
   2cea0:	4614      	mov	r4, r2
   2cea2:	f7f2 f905 	bl	1f0b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2cea6:	8963      	ldrh	r3, [r4, #10]
   2cea8:	8003      	strh	r3, [r0, #0]
}
   2ceaa:	2000      	movs	r0, #0
   2ceac:	bd10      	pop	{r4, pc}

0002ceae <gatt_find_info_encode>:
{
   2ceae:	b510      	push	{r4, lr}
   2ceb0:	2104      	movs	r1, #4
   2ceb2:	300c      	adds	r0, #12
   2ceb4:	4614      	mov	r4, r2
   2ceb6:	f7f2 f8fb 	bl	1f0b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2ceba:	8923      	ldrh	r3, [r4, #8]
   2cebc:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cebe:	89e3      	ldrh	r3, [r4, #14]
   2cec0:	8043      	strh	r3, [r0, #2]
}
   2cec2:	2000      	movs	r0, #0
   2cec4:	bd10      	pop	{r4, pc}

0002cec6 <gatt_read_encode>:
{
   2cec6:	b510      	push	{r4, lr}
   2cec8:	2102      	movs	r1, #2
   2ceca:	300c      	adds	r0, #12
   2cecc:	4614      	mov	r4, r2
   2cece:	f7f2 f8ef 	bl	1f0b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2ced2:	8923      	ldrh	r3, [r4, #8]
   2ced4:	8003      	strh	r3, [r0, #0]
}
   2ced6:	2000      	movs	r0, #0
   2ced8:	bd10      	pop	{r4, pc}

0002ceda <gatt_read_blob_encode>:
{
   2ceda:	b510      	push	{r4, lr}
   2cedc:	2104      	movs	r1, #4
   2cede:	300c      	adds	r0, #12
   2cee0:	4614      	mov	r4, r2
   2cee2:	f7f2 f8e5 	bl	1f0b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2cee6:	8923      	ldrh	r3, [r4, #8]
   2cee8:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   2ceea:	8963      	ldrh	r3, [r4, #10]
   2ceec:	8043      	strh	r3, [r0, #2]
}
   2ceee:	2000      	movs	r0, #0
   2cef0:	bd10      	pop	{r4, pc}

0002cef2 <gatt_cancel_encode>:
{
   2cef2:	b508      	push	{r3, lr}
   2cef4:	2101      	movs	r1, #1
   2cef6:	300c      	adds	r0, #12
   2cef8:	f7f2 f8da 	bl	1f0b0 <net_buf_simple_add>
   2cefc:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2cefe:	2000      	movs	r0, #0
   2cf00:	7018      	strb	r0, [r3, #0]
}
   2cf02:	bd08      	pop	{r3, pc}

0002cf04 <gatt_exec_encode>:
{
   2cf04:	b508      	push	{r3, lr}
   2cf06:	2101      	movs	r1, #1
   2cf08:	300c      	adds	r0, #12
   2cf0a:	f7f2 f8d1 	bl	1f0b0 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2cf0e:	2301      	movs	r3, #1
   2cf10:	7003      	strb	r3, [r0, #0]
}
   2cf12:	2000      	movs	r0, #0
   2cf14:	bd08      	pop	{r3, pc}

0002cf16 <gatt_read_group_encode>:
{
   2cf16:	b538      	push	{r3, r4, r5, lr}
   2cf18:	f100 040c 	add.w	r4, r0, #12
   2cf1c:	2104      	movs	r1, #4
   2cf1e:	4620      	mov	r0, r4
   2cf20:	4615      	mov	r5, r2
   2cf22:	f7f2 f8c5 	bl	1f0b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2cf26:	892b      	ldrh	r3, [r5, #8]
   2cf28:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cf2a:	89eb      	ldrh	r3, [r5, #14]
   2cf2c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2cf2e:	7c2b      	ldrb	r3, [r5, #16]
   2cf30:	b933      	cbnz	r3, 2cf40 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2cf32:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2cf36:	4620      	mov	r0, r4
   2cf38:	f001 f809 	bl	2df4e <net_buf_simple_add_le16>
}
   2cf3c:	2000      	movs	r0, #0
   2cf3e:	bd38      	pop	{r3, r4, r5, pc}
   2cf40:	f642 0101 	movw	r1, #10241	; 0x2801
   2cf44:	e7f7      	b.n	2cf36 <gatt_read_group_encode+0x20>

0002cf46 <gatt_read_type_encode>:
{
   2cf46:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2cf48:	f100 040c 	add.w	r4, r0, #12
   2cf4c:	2104      	movs	r1, #4
   2cf4e:	4620      	mov	r0, r4
   2cf50:	4615      	mov	r5, r2
   2cf52:	f7f2 f8ad 	bl	1f0b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2cf56:	892b      	ldrh	r3, [r5, #8]
   2cf58:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2cf5a:	89eb      	ldrh	r3, [r5, #14]
   2cf5c:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2cf5e:	7c2b      	ldrb	r3, [r5, #16]
   2cf60:	2b02      	cmp	r3, #2
   2cf62:	d004      	beq.n	2cf6e <gatt_read_type_encode+0x28>
   2cf64:	2b03      	cmp	r3, #3
   2cf66:	d009      	beq.n	2cf7c <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2cf68:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2cf6a:	8859      	ldrh	r1, [r3, #2]
   2cf6c:	e001      	b.n	2cf72 <gatt_read_type_encode+0x2c>
   2cf6e:	f642 0102 	movw	r1, #10242	; 0x2802
   2cf72:	4620      	mov	r0, r4
   2cf74:	f000 ffeb 	bl	2df4e <net_buf_simple_add_le16>
}
   2cf78:	2000      	movs	r0, #0
   2cf7a:	bd38      	pop	{r3, r4, r5, pc}
   2cf7c:	f642 0103 	movw	r1, #10243	; 0x2803
   2cf80:	e7f7      	b.n	2cf72 <gatt_read_type_encode+0x2c>

0002cf82 <gatt_read_mult_encode>:
{
   2cf82:	b570      	push	{r4, r5, r6, lr}
   2cf84:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   2cf86:	2500      	movs	r5, #0
   2cf88:	f100 060c 	add.w	r6, r0, #12
   2cf8c:	6862      	ldr	r2, [r4, #4]
   2cf8e:	b2eb      	uxtb	r3, r5
   2cf90:	429a      	cmp	r2, r3
   2cf92:	f105 0501 	add.w	r5, r5, #1
   2cf96:	d801      	bhi.n	2cf9c <gatt_read_mult_encode+0x1a>
}
   2cf98:	2000      	movs	r0, #0
   2cf9a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   2cf9c:	68a2      	ldr	r2, [r4, #8]
   2cf9e:	4630      	mov	r0, r6
   2cfa0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   2cfa4:	f000 ffd3 	bl	2df4e <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   2cfa8:	e7f0      	b.n	2cf8c <gatt_read_mult_encode+0xa>

0002cfaa <gatt_read_mult_vl_encode>:
static int gatt_read_mult_vl_encode(struct net_buf *buf, size_t len,
   2cfaa:	f7ff bfea 	b.w	2cf82 <gatt_read_mult_encode>

0002cfae <gatt_write_encode>:
{
   2cfae:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2cfb0:	2102      	movs	r1, #2
   2cfb2:	b085      	sub	sp, #20
   2cfb4:	4605      	mov	r5, r0
   2cfb6:	300c      	adds	r0, #12
   2cfb8:	4614      	mov	r4, r2
   2cfba:	f7f2 f879 	bl	1f0b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2cfbe:	88a3      	ldrh	r3, [r4, #4]
   2cfc0:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2cfc2:	2300      	movs	r3, #0
   2cfc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2cfc8:	2200      	movs	r2, #0
   2cfca:	2300      	movs	r3, #0
   2cfcc:	e9cd 2300 	strd	r2, r3, [sp]
   2cfd0:	4628      	mov	r0, r5
   2cfd2:	68a2      	ldr	r2, [r4, #8]
   2cfd4:	89a1      	ldrh	r1, [r4, #12]
   2cfd6:	f7f2 f889 	bl	1f0ec <net_buf_append_bytes>
	if (write != params->length) {
   2cfda:	89a3      	ldrh	r3, [r4, #12]
	return 0;
   2cfdc:	4283      	cmp	r3, r0
}
   2cfde:	bf14      	ite	ne
   2cfe0:	f06f 000b 	mvnne.w	r0, #11
   2cfe4:	2000      	moveq	r0, #0
   2cfe6:	b005      	add	sp, #20
   2cfe8:	bd30      	pop	{r4, r5, pc}

0002cfea <gatt_prepare_write_encode>:
{
   2cfea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2cfec:	4606      	mov	r6, r0
   2cfee:	460c      	mov	r4, r1
   2cff0:	300c      	adds	r0, #12
   2cff2:	2104      	movs	r1, #4
   2cff4:	4615      	mov	r5, r2
   2cff6:	f7f2 f85b 	bl	1f0b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2cffa:	88ab      	ldrh	r3, [r5, #4]
   2cffc:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2cffe:	88eb      	ldrh	r3, [r5, #6]
   2d000:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2d002:	2300      	movs	r3, #0
   2d004:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2d008:	2200      	movs	r2, #0
   2d00a:	2300      	movs	r3, #0
   2d00c:	e9cd 2300 	strd	r2, r3, [sp]
   2d010:	3c04      	subs	r4, #4
   2d012:	68aa      	ldr	r2, [r5, #8]
   2d014:	4621      	mov	r1, r4
   2d016:	4630      	mov	r0, r6
   2d018:	f7f2 f868 	bl	1f0ec <net_buf_append_bytes>
	return 0;
   2d01c:	4284      	cmp	r4, r0
}
   2d01e:	bf14      	ite	ne
   2d020:	f06f 000b 	mvnne.w	r0, #11
   2d024:	2000      	moveq	r0, #0
   2d026:	b004      	add	sp, #16
   2d028:	bd70      	pop	{r4, r5, r6, pc}

0002d02a <gatt_read_mult_rsp>:
{
   2d02a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d02c:	9d08      	ldr	r5, [sp, #32]
   2d02e:	4606      	mov	r6, r0
	params->func(conn, 0, params, pdu, length);
   2d030:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   2d032:	460c      	mov	r4, r1
   2d034:	b901      	cbnz	r1, 2d038 <gatt_read_mult_rsp+0xe>
   2d036:	b94b      	cbnz	r3, 2d04c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   2d038:	2300      	movs	r3, #0
   2d03a:	9308      	str	r3, [sp, #32]
   2d03c:	462a      	mov	r2, r5
   2d03e:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   2d040:	4630      	mov	r0, r6
   2d042:	46bc      	mov	ip, r7
}
   2d044:	b003      	add	sp, #12
   2d046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2d04a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2d04c:	9300      	str	r3, [sp, #0]
   2d04e:	4613      	mov	r3, r2
   2d050:	462a      	mov	r2, r5
   2d052:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   2d054:	9408      	str	r4, [sp, #32]
   2d056:	682f      	ldr	r7, [r5, #0]
   2d058:	4623      	mov	r3, r4
   2d05a:	462a      	mov	r2, r5
   2d05c:	4621      	mov	r1, r4
   2d05e:	e7ef      	b.n	2d040 <gatt_read_mult_rsp+0x16>

0002d060 <gatt_sub_remove>:
{
   2d060:	b538      	push	{r3, r4, r5, lr}
   2d062:	460c      	mov	r4, r1
	if (params) {
   2d064:	4619      	mov	r1, r3
   2d066:	b16b      	cbz	r3, 2d084 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2d068:	f103 0518 	add.w	r5, r3, #24
   2d06c:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   2d06e:	b982      	cbnz	r2, 2d092 <gatt_sub_remove+0x32>
   2d070:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2d072:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2d074:	4295      	cmp	r5, r2
   2d076:	d100      	bne.n	2d07a <gatt_sub_remove+0x1a>
	list->tail = node;
   2d078:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2d07a:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2d07c:	680d      	ldr	r5, [r1, #0]
   2d07e:	618b      	str	r3, [r1, #24]
   2d080:	461a      	mov	r2, r3
   2d082:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2d084:	68a3      	ldr	r3, [r4, #8]
   2d086:	b953      	cbnz	r3, 2d09e <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   2d088:	4620      	mov	r0, r4
}
   2d08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2d08e:	f7ed bd55 	b.w	1ab3c <gatt_sub_free>
   2d092:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2d094:	68e3      	ldr	r3, [r4, #12]
   2d096:	429d      	cmp	r5, r3
	list->tail = node;
   2d098:	bf08      	it	eq
   2d09a:	60e2      	streq	r2, [r4, #12]
}
   2d09c:	e7ed      	b.n	2d07a <gatt_sub_remove+0x1a>
}
   2d09e:	bd38      	pop	{r3, r4, r5, pc}

0002d0a0 <gatt_read_mult_vl_rsp>:
{
   2d0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d0a2:	b087      	sub	sp, #28
   2d0a4:	4605      	mov	r5, r0
   2d0a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d0a8:	4610      	mov	r0, r2
   2d0aa:	461a      	mov	r2, r3
	if (err || !length) {
   2d0ac:	b901      	cbnz	r1, 2d0b0 <gatt_read_mult_vl_rsp+0x10>
   2d0ae:	b94b      	cbnz	r3, 2d0c4 <gatt_read_mult_vl_rsp+0x24>
		params->func(conn, err, params, NULL, 0);
   2d0b0:	2300      	movs	r3, #0
   2d0b2:	930c      	str	r3, [sp, #48]	; 0x30
   2d0b4:	6826      	ldr	r6, [r4, #0]
   2d0b6:	4622      	mov	r2, r4
   2d0b8:	4628      	mov	r0, r5
   2d0ba:	46b4      	mov	ip, r6
}
   2d0bc:	b007      	add	sp, #28
   2d0be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, err, params, NULL, 0);
   2d0c2:	4760      	bx	ip
	net_buf_simple_init_with_data(&buf, (void *)pdu, length);
   2d0c4:	4601      	mov	r1, r0
   2d0c6:	a803      	add	r0, sp, #12
   2d0c8:	f000 ff0c 	bl	2dee4 <net_buf_simple_init_with_data>
	while (buf.len >= sizeof(*rsp)) {
   2d0cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2d0d0:	2b01      	cmp	r3, #1
   2d0d2:	d808      	bhi.n	2d0e6 <gatt_read_mult_vl_rsp+0x46>
	params->func(conn, 0, params, NULL, 0);
   2d0d4:	2300      	movs	r3, #0
   2d0d6:	9300      	str	r3, [sp, #0]
   2d0d8:	6826      	ldr	r6, [r4, #0]
   2d0da:	4622      	mov	r2, r4
   2d0dc:	4619      	mov	r1, r3
   2d0de:	4628      	mov	r0, r5
   2d0e0:	47b0      	blx	r6
}
   2d0e2:	b007      	add	sp, #28
   2d0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rsp = net_buf_simple_pull_mem(&buf, sizeof(*rsp));
   2d0e6:	2102      	movs	r1, #2
   2d0e8:	a803      	add	r0, sp, #12
   2d0ea:	f7f1 ffc7 	bl	1f07c <net_buf_simple_pull_mem>
		len = sys_le16_to_cpu(rsp->len);
   2d0ee:	4603      	mov	r3, r0
   2d0f0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2d0f4:	f833 7b02 	ldrh.w	r7, [r3], #2
   2d0f8:	4297      	cmp	r7, r2
   2d0fa:	bf28      	it	cs
   2d0fc:	4617      	movcs	r7, r2
		params->func(conn, 0, params, rsp->value, len);
   2d0fe:	9700      	str	r7, [sp, #0]
   2d100:	6826      	ldr	r6, [r4, #0]
   2d102:	4622      	mov	r2, r4
   2d104:	2100      	movs	r1, #0
   2d106:	4628      	mov	r0, r5
   2d108:	47b0      	blx	r6
		net_buf_simple_pull_mem(&buf, len);
   2d10a:	4639      	mov	r1, r7
   2d10c:	a803      	add	r0, sp, #12
   2d10e:	f7f1 ffb5 	bl	1f07c <net_buf_simple_pull_mem>
   2d112:	e7db      	b.n	2d0cc <gatt_read_mult_vl_rsp+0x2c>

0002d114 <gatt_find_type_encode>:
{
   2d114:	b538      	push	{r3, r4, r5, lr}
   2d116:	f100 050c 	add.w	r5, r0, #12
   2d11a:	2106      	movs	r1, #6
   2d11c:	4628      	mov	r0, r5
   2d11e:	4614      	mov	r4, r2
   2d120:	f7f1 ffc6 	bl	1f0b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2d124:	8923      	ldrh	r3, [r4, #8]
   2d126:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2d128:	89e3      	ldrh	r3, [r4, #14]
   2d12a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d12c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   2d12e:	2b00      	cmp	r3, #0
   2d130:	f642 0301 	movw	r3, #10241	; 0x2801
   2d134:	bf08      	it	eq
   2d136:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2d13a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2d13c:	6821      	ldr	r1, [r4, #0]
   2d13e:	780b      	ldrb	r3, [r1, #0]
   2d140:	b11b      	cbz	r3, 2d14a <gatt_find_type_encode+0x36>
   2d142:	2b02      	cmp	r3, #2
   2d144:	d006      	beq.n	2d154 <gatt_find_type_encode+0x40>
}
   2d146:	2000      	movs	r0, #0
   2d148:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2d14a:	8849      	ldrh	r1, [r1, #2]
   2d14c:	4628      	mov	r0, r5
   2d14e:	f000 fefe 	bl	2df4e <net_buf_simple_add_le16>
}
   2d152:	e7f8      	b.n	2d146 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d154:	2210      	movs	r2, #16
   2d156:	3101      	adds	r1, #1
   2d158:	4628      	mov	r0, r5
   2d15a:	f000 fee5 	bl	2df28 <net_buf_simple_add_mem>
   2d15e:	e7f2      	b.n	2d146 <gatt_find_type_encode+0x32>

0002d160 <gatt_read_uuid_encode>:
{
   2d160:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2d162:	f100 040c 	add.w	r4, r0, #12
   2d166:	2104      	movs	r1, #4
   2d168:	4620      	mov	r0, r4
   2d16a:	4615      	mov	r5, r2
   2d16c:	f7f1 ffa0 	bl	1f0b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   2d170:	892b      	ldrh	r3, [r5, #8]
   2d172:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   2d174:	896b      	ldrh	r3, [r5, #10]
   2d176:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2d178:	68e9      	ldr	r1, [r5, #12]
   2d17a:	780b      	ldrb	r3, [r1, #0]
   2d17c:	b92b      	cbnz	r3, 2d18a <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2d17e:	8849      	ldrh	r1, [r1, #2]
   2d180:	4620      	mov	r0, r4
   2d182:	f000 fee4 	bl	2df4e <net_buf_simple_add_le16>
}
   2d186:	2000      	movs	r0, #0
   2d188:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2d18a:	2210      	movs	r2, #16
   2d18c:	3101      	adds	r1, #1
   2d18e:	4620      	mov	r0, r4
   2d190:	f000 feca 	bl	2df28 <net_buf_simple_add_mem>
   2d194:	e7f7      	b.n	2d186 <gatt_read_uuid_encode+0x26>

0002d196 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2d196:	2a02      	cmp	r2, #2
{
   2d198:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2d19a:	d108      	bne.n	2d1ae <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2d19c:	2300      	movs	r3, #0
   2d19e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2d1a2:	461a      	mov	r2, r3
   2d1a4:	7a00      	ldrb	r0, [r0, #8]
   2d1a6:	f7ed fc0d 	bl	1a9c4 <sc_save>
}
   2d1aa:	2002      	movs	r0, #2
   2d1ac:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2d1ae:	f7ed fe4f 	bl	1ae50 <sc_clear>
   2d1b2:	e7fa      	b.n	2d1aa <sc_ccc_cfg_write+0x14>

0002d1b4 <read_central_addr_res>:
{
   2d1b4:	b513      	push	{r0, r1, r4, lr}
   2d1b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2d1ba:	4610      	mov	r0, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2d1bc:	2201      	movs	r2, #1
	if (offset > value_len) {
   2d1be:	4291      	cmp	r1, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2d1c0:	f88d 2007 	strb.w	r2, [sp, #7]
	if (offset > value_len) {
   2d1c4:	d80c      	bhi.n	2d1e0 <read_central_addr_res+0x2c>
	len = MIN(buf_len, value_len - offset);
   2d1c6:	1a54      	subs	r4, r2, r1
   2d1c8:	429c      	cmp	r4, r3
   2d1ca:	bfa8      	it	ge
   2d1cc:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2d1ce:	f10d 0307 	add.w	r3, sp, #7
   2d1d2:	4622      	mov	r2, r4
   2d1d4:	4419      	add	r1, r3
   2d1d6:	f7fe fc8f 	bl	2baf8 <memcpy>
}
   2d1da:	4620      	mov	r0, r4
   2d1dc:	b002      	add	sp, #8
   2d1de:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d1e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2d1e4:	e7f9      	b.n	2d1da <read_central_addr_res+0x26>

0002d1e6 <read_appearance>:
{
   2d1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d1e8:	4615      	mov	r5, r2
   2d1ea:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2d1ee:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d1f0:	f7fe fe4b 	bl	2be8a <bt_get_appearance>
	if (offset > value_len) {
   2d1f4:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2d1f6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2d1fa:	d80e      	bhi.n	2d21a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2d1fc:	f1c6 0402 	rsb	r4, r6, #2
   2d200:	42bc      	cmp	r4, r7
   2d202:	bfa8      	it	ge
   2d204:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d206:	f10d 0306 	add.w	r3, sp, #6
   2d20a:	4622      	mov	r2, r4
   2d20c:	1999      	adds	r1, r3, r6
   2d20e:	4628      	mov	r0, r5
   2d210:	f7fe fc72 	bl	2baf8 <memcpy>
}
   2d214:	4620      	mov	r0, r4
   2d216:	b003      	add	sp, #12
   2d218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d21a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2d21e:	e7f9      	b.n	2d214 <read_appearance+0x2e>

0002d220 <read_name>:
{
   2d220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d224:	4698      	mov	r8, r3
   2d226:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2d22a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2d22c:	f7e9 fea0 	bl	16f70 <bt_get_name>
   2d230:	4607      	mov	r7, r0
				 strlen(name));
   2d232:	f7fe fc0a 	bl	2ba4a <strlen>
	if (offset > value_len) {
   2d236:	b283      	uxth	r3, r0
   2d238:	42b3      	cmp	r3, r6
   2d23a:	d30c      	bcc.n	2d256 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2d23c:	1b9c      	subs	r4, r3, r6
   2d23e:	4544      	cmp	r4, r8
   2d240:	bfa8      	it	ge
   2d242:	4644      	movge	r4, r8
   2d244:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2d246:	4622      	mov	r2, r4
   2d248:	19b9      	adds	r1, r7, r6
   2d24a:	4628      	mov	r0, r5
   2d24c:	f7fe fc54 	bl	2baf8 <memcpy>
}
   2d250:	4620      	mov	r0, r4
   2d252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d256:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2d25a:	e7f9      	b.n	2d250 <read_name+0x30>

0002d25c <cf_read>:
{
   2d25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d25e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2d260:	2300      	movs	r3, #0
{
   2d262:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2d266:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2d26a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2d26c:	f7ed fa3e 	bl	1a6ec <find_cf_cfg>
	if (cfg) {
   2d270:	b128      	cbz	r0, 2d27e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2d272:	f100 0108 	add.w	r1, r0, #8
   2d276:	2201      	movs	r2, #1
   2d278:	a801      	add	r0, sp, #4
   2d27a:	f7fe fc3d 	bl	2baf8 <memcpy>
	if (offset > value_len) {
   2d27e:	2e01      	cmp	r6, #1
   2d280:	d80d      	bhi.n	2d29e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2d282:	f1c6 0401 	rsb	r4, r6, #1
   2d286:	42bc      	cmp	r4, r7
   2d288:	bfa8      	it	ge
   2d28a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d28c:	ab01      	add	r3, sp, #4
   2d28e:	4622      	mov	r2, r4
   2d290:	1999      	adds	r1, r3, r6
   2d292:	4628      	mov	r0, r5
   2d294:	f7fe fc30 	bl	2baf8 <memcpy>
}
   2d298:	4620      	mov	r0, r4
   2d29a:	b003      	add	sp, #12
   2d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d29e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2d2a2:	e7f9      	b.n	2d298 <cf_read+0x3c>

0002d2a4 <bt_gatt_attr_read_service>:
{
   2d2a4:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2d2a6:	68c9      	ldr	r1, [r1, #12]
{
   2d2a8:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2d2aa:	780a      	ldrb	r2, [r1, #0]
{
   2d2ac:	461c      	mov	r4, r3
   2d2ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2d2b2:	b992      	cbnz	r2, 2d2da <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2d2b4:	884a      	ldrh	r2, [r1, #2]
   2d2b6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2d2ba:	2b02      	cmp	r3, #2
   2d2bc:	d818      	bhi.n	2d2f0 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2d2be:	f1c3 0202 	rsb	r2, r3, #2
   2d2c2:	4294      	cmp	r4, r2
   2d2c4:	bfa8      	it	ge
   2d2c6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2d2c8:	4622      	mov	r2, r4
   2d2ca:	f10d 0106 	add.w	r1, sp, #6
   2d2ce:	4419      	add	r1, r3
   2d2d0:	f7fe fc12 	bl	2baf8 <memcpy>
}
   2d2d4:	4620      	mov	r0, r4
   2d2d6:	b002      	add	sp, #8
   2d2d8:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2d2da:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2d2dc:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2d2e0:	d806      	bhi.n	2d2f0 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2d2e2:	f1c3 0210 	rsb	r2, r3, #16
   2d2e6:	4294      	cmp	r4, r2
   2d2e8:	bfa8      	it	ge
   2d2ea:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2d2ec:	4622      	mov	r2, r4
   2d2ee:	e7ee      	b.n	2d2ce <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d2f0:	f06f 0406 	mvn.w	r4, #6
   2d2f4:	e7ee      	b.n	2d2d4 <bt_gatt_attr_read_service+0x30>

0002d2f6 <bt_gatt_attr_read_ccc>:
{
   2d2f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2d2f8:	68c9      	ldr	r1, [r1, #12]
{
   2d2fa:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2d2fe:	4615      	mov	r5, r2
   2d300:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2d302:	f7ed fa43 	bl	1a78c <find_ccc_cfg>
	if (cfg) {
   2d306:	b100      	cbz	r0, 2d30a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2d308:	8900      	ldrh	r0, [r0, #8]
   2d30a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2d30e:	2e02      	cmp	r6, #2
   2d310:	d80e      	bhi.n	2d330 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2d312:	f1c6 0402 	rsb	r4, r6, #2
   2d316:	42bc      	cmp	r4, r7
   2d318:	bfa8      	it	ge
   2d31a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2d31c:	f10d 0306 	add.w	r3, sp, #6
   2d320:	4622      	mov	r2, r4
   2d322:	1999      	adds	r1, r3, r6
   2d324:	4628      	mov	r0, r5
   2d326:	f7fe fbe7 	bl	2baf8 <memcpy>
}
   2d32a:	4620      	mov	r0, r4
   2d32c:	b003      	add	sp, #12
   2d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d330:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2d334:	e7f9      	b.n	2d32a <bt_gatt_attr_read_ccc+0x34>

0002d336 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d33a:	4606      	mov	r6, r0
   2d33c:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d33e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2d342:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2d344:	f89d a020 	ldrb.w	sl, [sp, #32]
   2d348:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2d34c:	4690      	mov	r8, r2
   2d34e:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2d350:	f7ec ffcc 	bl	1a2ec <bt_att_req_alloc>
	if (!req) {
   2d354:	4604      	mov	r4, r0
   2d356:	b188      	cbz	r0, 2d37c <gatt_req_send.constprop.0+0x46>
	req->func = func;
   2d358:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   2d35a:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   2d35e:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   2d362:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   2d364:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2d368:	464a      	mov	r2, r9
   2d36a:	4651      	mov	r1, sl
   2d36c:	4630      	mov	r0, r6
   2d36e:	f7ec fcf7 	bl	19d60 <bt_att_create_pdu>
   2d372:	4605      	mov	r5, r0
	if (!buf) {
   2d374:	b938      	cbnz	r0, 2d386 <gatt_req_send.constprop.0+0x50>
		bt_att_req_free(req);
   2d376:	4620      	mov	r0, r4
   2d378:	f7ec ffda 	bl	1a330 <bt_att_req_free>
		return -ENOMEM;
   2d37c:	f06f 050b 	mvn.w	r5, #11
}
   2d380:	4628      	mov	r0, r5
   2d382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2d386:	2200      	movs	r2, #0
   2d388:	4611      	mov	r1, r2
   2d38a:	2301      	movs	r3, #1
   2d38c:	f7ff fcc6 	bl	2cd1c <bt_att_set_tx_meta_data>
	req->buf = buf;
   2d390:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   2d392:	4628      	mov	r0, r5
   2d394:	4642      	mov	r2, r8
   2d396:	4649      	mov	r1, r9
   2d398:	47b8      	blx	r7
	if (err) {
   2d39a:	4605      	mov	r5, r0
   2d39c:	b118      	cbz	r0, 2d3a6 <gatt_req_send.constprop.0+0x70>
		bt_att_req_free(req);
   2d39e:	4620      	mov	r0, r4
   2d3a0:	f7ec ffc6 	bl	1a330 <bt_att_req_free>
   2d3a4:	e7ec      	b.n	2d380 <gatt_req_send.constprop.0+0x4a>
	err = bt_att_req_send(conn, req);
   2d3a6:	4621      	mov	r1, r4
   2d3a8:	4630      	mov	r0, r6
   2d3aa:	f7ed f915 	bl	1a5d8 <bt_att_req_send>
	if (err) {
   2d3ae:	4605      	mov	r5, r0
   2d3b0:	2800      	cmp	r0, #0
   2d3b2:	d0e5      	beq.n	2d380 <gatt_req_send.constprop.0+0x4a>
   2d3b4:	e7f3      	b.n	2d39e <gatt_req_send.constprop.0+0x68>

0002d3b6 <gatt_write_ccc_buf>:
{
   2d3b6:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2d3b8:	f100 050c 	add.w	r5, r0, #12
   2d3bc:	2102      	movs	r1, #2
   2d3be:	4628      	mov	r0, r5
   2d3c0:	4614      	mov	r4, r2
   2d3c2:	f7f1 fe75 	bl	1f0b0 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2d3c6:	89e3      	ldrh	r3, [r4, #14]
   2d3c8:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2d3ca:	8a21      	ldrh	r1, [r4, #16]
   2d3cc:	4628      	mov	r0, r5
   2d3ce:	f000 fdbe 	bl	2df4e <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d3d2:	2104      	movs	r1, #4
   2d3d4:	f104 0014 	add.w	r0, r4, #20
   2d3d8:	f7ff fd3e 	bl	2ce58 <atomic_or>
}
   2d3dc:	2000      	movs	r0, #0
   2d3de:	bd38      	pop	{r3, r4, r5, pc}

0002d3e0 <sc_restore_rsp>:
{
   2d3e0:	b538      	push	{r3, r4, r5, lr}
   2d3e2:	4604      	mov	r4, r0
   2d3e4:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2d3e6:	f7ff fc72 	bl	2ccce <bt_att_fixed_chan_only>
   2d3ea:	b150      	cbz	r0, 2d402 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2d3ec:	4620      	mov	r0, r4
   2d3ee:	f7ed f97d 	bl	1a6ec <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2d3f2:	b130      	cbz	r0, 2d402 <sc_restore_rsp+0x22>
   2d3f4:	7a03      	ldrb	r3, [r0, #8]
   2d3f6:	07db      	lsls	r3, r3, #31
   2d3f8:	d503      	bpl.n	2d402 <sc_restore_rsp+0x22>
   2d3fa:	2101      	movs	r1, #1
   2d3fc:	300c      	adds	r0, #12
   2d3fe:	f7ff fd2b 	bl	2ce58 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2d402:	b985      	cbnz	r5, 2d426 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2d404:	7a20      	ldrb	r0, [r4, #8]
   2d406:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2d40a:	f7ed f99d 	bl	1a748 <find_sc_cfg>
		if (sc_cfg) {
   2d40e:	4604      	mov	r4, r0
   2d410:	b148      	cbz	r0, 2d426 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2d412:	4629      	mov	r1, r5
   2d414:	2204      	movs	r2, #4
   2d416:	3008      	adds	r0, #8
   2d418:	f7fe fb79 	bl	2bb0e <memset>
		sc_store(cfg);
   2d41c:	4620      	mov	r0, r4
}
   2d41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2d422:	f7ed baa7 	b.w	1a974 <sc_store>
}
   2d426:	bd38      	pop	{r3, r4, r5, pc}

0002d428 <bt_gatt_attr_value_handle>:
{
   2d428:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d42a:	4604      	mov	r4, r0
   2d42c:	b910      	cbnz	r0, 2d434 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2d42e:	2000      	movs	r0, #0
}
   2d430:	b002      	add	sp, #8
   2d432:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2d434:	2300      	movs	r3, #0
   2d436:	f88d 3004 	strb.w	r3, [sp, #4]
   2d43a:	6800      	ldr	r0, [r0, #0]
   2d43c:	f642 0303 	movw	r3, #10243	; 0x2803
   2d440:	a901      	add	r1, sp, #4
   2d442:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d446:	f7fe fbeb 	bl	2bc20 <bt_uuid_cmp>
   2d44a:	2800      	cmp	r0, #0
   2d44c:	d1ef      	bne.n	2d42e <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2d44e:	68e3      	ldr	r3, [r4, #12]
   2d450:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2d452:	2800      	cmp	r0, #0
   2d454:	d1ec      	bne.n	2d430 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2d456:	4620      	mov	r0, r4
   2d458:	f7ed feb8 	bl	1b1cc <bt_gatt_attr_get_handle>
   2d45c:	3001      	adds	r0, #1
   2d45e:	b280      	uxth	r0, r0
	return handle;
   2d460:	e7e6      	b.n	2d430 <bt_gatt_attr_value_handle+0x8>

0002d462 <bt_gatt_attr_read_chrc>:
{
   2d462:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2d464:	68cc      	ldr	r4, [r1, #12]
{
   2d466:	b087      	sub	sp, #28
   2d468:	4608      	mov	r0, r1
   2d46a:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2d46c:	79a3      	ldrb	r3, [r4, #6]
   2d46e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2d472:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2d476:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2d478:	f7ff ffd6 	bl	2d428 <bt_gatt_attr_value_handle>
   2d47c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2d480:	6821      	ldr	r1, [r4, #0]
   2d482:	780b      	ldrb	r3, [r1, #0]
   2d484:	b99b      	cbnz	r3, 2d4ae <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2d486:	884b      	ldrh	r3, [r1, #2]
   2d488:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2d48c:	2405      	movs	r4, #5
	if (offset > value_len) {
   2d48e:	42b4      	cmp	r4, r6
   2d490:	d315      	bcc.n	2d4be <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2d492:	1ba4      	subs	r4, r4, r6
   2d494:	42bc      	cmp	r4, r7
   2d496:	bfa8      	it	ge
   2d498:	463c      	movge	r4, r7
   2d49a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2d49c:	ab01      	add	r3, sp, #4
   2d49e:	4622      	mov	r2, r4
   2d4a0:	1999      	adds	r1, r3, r6
   2d4a2:	4628      	mov	r0, r5
   2d4a4:	f7fe fb28 	bl	2baf8 <memcpy>
}
   2d4a8:	4620      	mov	r0, r4
   2d4aa:	b007      	add	sp, #28
   2d4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2d4ae:	2210      	movs	r2, #16
   2d4b0:	3101      	adds	r1, #1
   2d4b2:	f10d 0007 	add.w	r0, sp, #7
   2d4b6:	f7fe fb1f 	bl	2baf8 <memcpy>
		value_len += 16U;
   2d4ba:	2413      	movs	r4, #19
   2d4bc:	e7e7      	b.n	2d48e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2d4be:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2d4c2:	e7f1      	b.n	2d4a8 <bt_gatt_attr_read_chrc+0x46>

0002d4c4 <bt_gatt_foreach_attr>:
{
   2d4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2d4c6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2d4ca:	2300      	movs	r3, #0
   2d4cc:	9300      	str	r3, [sp, #0]
   2d4ce:	461a      	mov	r2, r3
   2d4d0:	f7ed febc 	bl	1b24c <bt_gatt_foreach_attr_type>
}
   2d4d4:	b005      	add	sp, #20
   2d4d6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d4da <bt_gatt_check_perm>:
{
   2d4da:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2d4dc:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d4de:	8a4b      	ldrh	r3, [r1, #18]
{
   2d4e0:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2d4e2:	d504      	bpl.n	2d4ee <bt_gatt_check_perm+0x14>
   2d4e4:	f013 0f95 	tst.w	r3, #149	; 0x95
   2d4e8:	d027      	beq.n	2d53a <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2d4ea:	6848      	ldr	r0, [r1, #4]
   2d4ec:	b328      	cbz	r0, 2d53a <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2d4ee:	0790      	lsls	r0, r2, #30
   2d4f0:	d504      	bpl.n	2d4fc <bt_gatt_check_perm+0x22>
   2d4f2:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2d4f6:	d022      	beq.n	2d53e <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2d4f8:	6889      	ldr	r1, [r1, #8]
   2d4fa:	b301      	cbz	r1, 2d53e <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2d4fc:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2d500:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2d504:	d007      	beq.n	2d516 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d506:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2d50a:	b90b      	cbnz	r3, 2d510 <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2d50c:	2005      	movs	r0, #5
}
   2d50e:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2d510:	7b5b      	ldrb	r3, [r3, #13]
   2d512:	06db      	lsls	r3, r3, #27
   2d514:	d5fa      	bpl.n	2d50c <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2d516:	f014 0f30 	tst.w	r4, #48	; 0x30
   2d51a:	d108      	bne.n	2d52e <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2d51c:	f014 000c 	ands.w	r0, r4, #12
   2d520:	d0f5      	beq.n	2d50e <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2d522:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2d524:	2b00      	cmp	r3, #0
   2d526:	bf14      	ite	ne
   2d528:	2000      	movne	r0, #0
   2d52a:	200f      	moveq	r0, #15
   2d52c:	e7ef      	b.n	2d50e <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2d52e:	4628      	mov	r0, r5
   2d530:	f7fe fde5 	bl	2c0fe <bt_conn_get_security>
   2d534:	2802      	cmp	r0, #2
   2d536:	d8f1      	bhi.n	2d51c <bt_gatt_check_perm+0x42>
   2d538:	e7e8      	b.n	2d50c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2d53a:	2002      	movs	r0, #2
   2d53c:	e7e7      	b.n	2d50e <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2d53e:	2003      	movs	r0, #3
   2d540:	e7e5      	b.n	2d50e <bt_gatt_check_perm+0x34>

0002d542 <gatt_discover_next>:
{
   2d542:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   2d544:	460b      	mov	r3, r1
{
   2d546:	4605      	mov	r5, r0
   2d548:	4614      	mov	r4, r2
	if (!last_handle)
   2d54a:	b929      	cbnz	r1, 2d558 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   2d54c:	4621      	mov	r1, r4
   2d54e:	4628      	mov	r0, r5
   2d550:	f7ee fb8a 	bl	1bc68 <bt_gatt_discover>
   2d554:	b928      	cbnz	r0, 2d562 <gatt_discover_next+0x20>
}
   2d556:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2d558:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2d55c:	4291      	cmp	r1, r2
   2d55e:	d107      	bne.n	2d570 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   2d560:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2d562:	6863      	ldr	r3, [r4, #4]
   2d564:	4622      	mov	r2, r4
   2d566:	4628      	mov	r0, r5
   2d568:	2100      	movs	r1, #0
}
   2d56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2d56e:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2d570:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2d572:	3301      	adds	r3, #1
   2d574:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2d576:	429a      	cmp	r2, r3
		params->start_handle++;
   2d578:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2d57a:	d2e7      	bcs.n	2d54c <gatt_discover_next+0xa>
   2d57c:	e7f1      	b.n	2d562 <gatt_discover_next+0x20>

0002d57e <gatt_find_type_rsp>:
{
   2d57e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d582:	b089      	sub	sp, #36	; 0x24
   2d584:	4606      	mov	r6, r0
   2d586:	9f12      	ldr	r7, [sp, #72]	; 0x48
   2d588:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2d58a:	b911      	cbnz	r1, 2d592 <gatt_find_type_rsp+0x14>
   2d58c:	f013 0803 	ands.w	r8, r3, #3
   2d590:	d007      	beq.n	2d5a2 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   2d592:	687b      	ldr	r3, [r7, #4]
   2d594:	463a      	mov	r2, r7
   2d596:	2100      	movs	r1, #0
   2d598:	4630      	mov	r0, r6
}
   2d59a:	b009      	add	sp, #36	; 0x24
   2d59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   2d5a0:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2d5a2:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2d5a6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d5aa:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d5ac:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2d5b0:	42ac      	cmp	r4, r5
   2d5b2:	d107      	bne.n	2d5c4 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2d5b4:	463a      	mov	r2, r7
   2d5b6:	4641      	mov	r1, r8
   2d5b8:	4630      	mov	r0, r6
}
   2d5ba:	b009      	add	sp, #36	; 0x24
   2d5bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   2d5c0:	f7ff bfbf 	b.w	2d542 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2d5c4:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d5c6:	8863      	ldrh	r3, [r4, #2]
		value.end_handle = end_handle;
   2d5c8:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2d5cc:	2a00      	cmp	r2, #0
   2d5ce:	bf14      	ite	ne
   2d5d0:	4652      	movne	r2, sl
   2d5d2:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   2d5d6:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   2d5da:	2210      	movs	r2, #16
   2d5dc:	2100      	movs	r1, #0
   2d5de:	eb0d 0002 	add.w	r0, sp, r2
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2d5e2:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2d5e6:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2d5e8:	f8b4 b000 	ldrh.w	fp, [r4]
		value.uuid = params->uuid;
   2d5ec:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2d5ee:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   2d5f2:	f7fe fa8c 	bl	2bb0e <memset>
   2d5f6:	ab01      	add	r3, sp, #4
   2d5f8:	9306      	str	r3, [sp, #24]
   2d5fa:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d5fe:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   2d600:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2d604:	463a      	mov	r2, r7
   2d606:	a903      	add	r1, sp, #12
   2d608:	4630      	mov	r0, r6
   2d60a:	4798      	blx	r3
   2d60c:	3404      	adds	r4, #4
   2d60e:	2800      	cmp	r0, #0
   2d610:	d1ce      	bne.n	2d5b0 <gatt_find_type_rsp+0x32>
}
   2d612:	b009      	add	sp, #36	; 0x24
   2d614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d618 <bt_gatt_cancel>:
{
   2d618:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d61a:	4604      	mov	r4, r0
   2d61c:	460d      	mov	r5, r1
	k_sched_lock();
   2d61e:	f7f8 fa77 	bl	25b10 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2d622:	4629      	mov	r1, r5
   2d624:	4620      	mov	r0, r4
   2d626:	f7ff fb38 	bl	2cc9a <bt_att_find_req_by_user_data>
	if (req) {
   2d62a:	4601      	mov	r1, r0
   2d62c:	b920      	cbnz	r0, 2d638 <bt_gatt_cancel+0x20>
}
   2d62e:	b002      	add	sp, #8
   2d630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2d634:	f7f8 bab8 	b.w	25ba8 <k_sched_unlock>
		func = req->func;
   2d638:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2d63a:	4620      	mov	r0, r4
   2d63c:	f7ec fffc 	bl	1a638 <bt_att_req_cancel>
	k_sched_unlock();
   2d640:	f7f8 fab2 	bl	25ba8 <k_sched_unlock>
	if (func) {
   2d644:	b12e      	cbz	r6, 2d652 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2d646:	2300      	movs	r3, #0
   2d648:	9500      	str	r5, [sp, #0]
   2d64a:	461a      	mov	r2, r3
   2d64c:	210e      	movs	r1, #14
   2d64e:	4620      	mov	r0, r4
   2d650:	47b0      	blx	r6
}
   2d652:	b002      	add	sp, #8
   2d654:	bd70      	pop	{r4, r5, r6, pc}

0002d656 <bt_gatt_notification>:
{
   2d656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d65a:	4606      	mov	r6, r0
   2d65c:	4688      	mov	r8, r1
   2d65e:	4691      	mov	r9, r2
   2d660:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2d662:	f7ed f8a7 	bl	1a7b4 <gatt_sub_find>
	if (!sub) {
   2d666:	b320      	cbz	r0, 2d6b2 <bt_gatt_notification+0x5c>
	return list->head;
   2d668:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d66a:	b314      	cbz	r4, 2d6b2 <bt_gatt_notification+0x5c>
	return node->next;
   2d66c:	6825      	ldr	r5, [r4, #0]
   2d66e:	b105      	cbz	r5, 2d672 <bt_gatt_notification+0x1c>
   2d670:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   2d672:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   2d676:	4543      	cmp	r3, r8
   2d678:	d118      	bne.n	2d6ac <bt_gatt_notification+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d67a:	3c18      	subs	r4, #24
   2d67c:	e007      	b.n	2d68e <bt_gatt_notification+0x38>
   2d67e:	462c      	mov	r4, r5
   2d680:	69ad      	ldr	r5, [r5, #24]
   2d682:	89a3      	ldrh	r3, [r4, #12]
   2d684:	b1bd      	cbz	r5, 2d6b6 <bt_gatt_notification+0x60>
		if (handle != params->value_handle) {
   2d686:	4543      	cmp	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d688:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   2d68c:	d1f7      	bne.n	2d67e <bt_gatt_notification+0x28>
		if (check_subscribe_security_level(conn, params)) {
   2d68e:	7a72      	ldrb	r2, [r6, #9]
   2d690:	7ca3      	ldrb	r3, [r4, #18]
   2d692:	429a      	cmp	r2, r3
   2d694:	d30a      	bcc.n	2d6ac <bt_gatt_notification+0x56>
			if (params->notify(conn, params, data, length) ==
   2d696:	6827      	ldr	r7, [r4, #0]
   2d698:	4653      	mov	r3, sl
   2d69a:	464a      	mov	r2, r9
   2d69c:	4621      	mov	r1, r4
   2d69e:	4630      	mov	r0, r6
   2d6a0:	47b8      	blx	r7
   2d6a2:	b918      	cbnz	r0, 2d6ac <bt_gatt_notification+0x56>
				bt_gatt_unsubscribe(conn, params);
   2d6a4:	4621      	mov	r1, r4
   2d6a6:	4630      	mov	r0, r6
   2d6a8:	f7ef f8ac 	bl	1c804 <bt_gatt_unsubscribe>
   2d6ac:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2d6ae:	2d00      	cmp	r5, #0
   2d6b0:	d1e6      	bne.n	2d680 <bt_gatt_notification+0x2a>
}
   2d6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   2d6b6:	4543      	cmp	r3, r8
   2d6b8:	d0e9      	beq.n	2d68e <bt_gatt_notification+0x38>
   2d6ba:	e7fa      	b.n	2d6b2 <bt_gatt_notification+0x5c>

0002d6bc <bt_gatt_change_aware>:
{
   2d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d6be:	4605      	mov	r5, r0
   2d6c0:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2d6c2:	f7ed f813 	bl	1a6ec <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2d6c6:	b1d0      	cbz	r0, 2d6fe <bt_gatt_change_aware+0x42>
   2d6c8:	7a03      	ldrb	r3, [r0, #8]
   2d6ca:	07db      	lsls	r3, r3, #31
   2d6cc:	d517      	bpl.n	2d6fe <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2d6ce:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2d6d2:	4620      	mov	r0, r4
   2d6d4:	f7ff fbba 	bl	2ce4c <atomic_get>
   2d6d8:	f010 0601 	ands.w	r6, r0, #1
   2d6dc:	d10f      	bne.n	2d6fe <bt_gatt_change_aware+0x42>
	if (!req) {
   2d6de:	b17f      	cbz	r7, 2d700 <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d6e0:	f06f 0102 	mvn.w	r1, #2
   2d6e4:	4620      	mov	r0, r4
   2d6e6:	f7ff fbc9 	bl	2ce7c <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d6ea:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2d6ee:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2d6f0:	d008      	beq.n	2d704 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2d6f2:	f7ff faee 	bl	2ccd2 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d6f6:	2101      	movs	r1, #1
   2d6f8:	4620      	mov	r0, r4
   2d6fa:	f7ff fbad 	bl	2ce58 <atomic_or>
		return true;
   2d6fe:	2601      	movs	r6, #1
}
   2d700:	4630      	mov	r0, r6
   2d702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2d704:	f7ff fae3 	bl	2ccce <bt_att_fixed_chan_only>
   2d708:	2800      	cmp	r0, #0
   2d70a:	d0f9      	beq.n	2d700 <bt_gatt_change_aware+0x44>
   2d70c:	4628      	mov	r0, r5
   2d70e:	f7ff faf9 	bl	2cd04 <bt_att_out_of_sync_sent_on_fixed>
   2d712:	2800      	cmp	r0, #0
   2d714:	d0f4      	beq.n	2d700 <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d716:	f06f 0102 	mvn.w	r1, #2
   2d71a:	4620      	mov	r0, r4
   2d71c:	f7ff fbae 	bl	2ce7c <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2d720:	4628      	mov	r0, r5
   2d722:	e7e6      	b.n	2d6f2 <bt_gatt_change_aware+0x36>

0002d724 <ccc_delayed_store>:
{
   2d724:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2d726:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2d72a:	4605      	mov	r5, r0
		if (!conn) {
   2d72c:	b184      	cbz	r4, 2d750 <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2d72e:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2d732:	7a20      	ldrb	r0, [r4, #8]
   2d734:	4631      	mov	r1, r6
   2d736:	f7fe fbaa 	bl	2be8e <bt_addr_le_is_bonded>
   2d73a:	b148      	cbz	r0, 2d750 <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2d73c:	2300      	movs	r3, #0
   2d73e:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2d742:	7a20      	ldrb	r0, [r4, #8]
   2d744:	4631      	mov	r1, r6
   2d746:	f7ef f9bd 	bl	1cac4 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2d74a:	4620      	mov	r0, r4
   2d74c:	f7ea ffc2 	bl	186d4 <bt_conn_unref>
}
   2d750:	bd70      	pop	{r4, r5, r6, pc}

0002d752 <smp_pairing_req>:
}
   2d752:	2007      	movs	r0, #7
   2d754:	4770      	bx	lr

0002d756 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d756:	f3bf 8f5b 	dmb	ish
   2d75a:	6800      	ldr	r0, [r0, #0]
   2d75c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d760:	4108      	asrs	r0, r1
}
   2d762:	f000 0001 	and.w	r0, r0, #1
   2d766:	4770      	bx	lr

0002d768 <update_keys_check>:
{
   2d768:	b510      	push	{r4, lr}
   2d76a:	4603      	mov	r3, r0
	if (!keys ||
   2d76c:	b1d9      	cbz	r1, 2d7a6 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2d76e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2d770:	f010 0f24 	tst.w	r0, #36	; 0x24
   2d774:	d017      	beq.n	2d7a6 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2d776:	7d1a      	ldrb	r2, [r3, #20]
   2d778:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2d77a:	7b09      	ldrb	r1, [r1, #12]
   2d77c:	42a2      	cmp	r2, r4
   2d77e:	bf28      	it	cs
   2d780:	4622      	movcs	r2, r4
   2d782:	4291      	cmp	r1, r2
   2d784:	d901      	bls.n	2d78a <update_keys_check+0x22>
			return false;
   2d786:	2000      	movs	r0, #0
}
   2d788:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d78a:	0682      	lsls	r2, r0, #26
   2d78c:	d404      	bmi.n	2d798 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2d78e:	7a18      	ldrb	r0, [r3, #8]
   2d790:	3800      	subs	r0, #0
   2d792:	bf18      	it	ne
   2d794:	2001      	movne	r0, #1
   2d796:	e7f7      	b.n	2d788 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2d798:	2105      	movs	r1, #5
   2d79a:	1d18      	adds	r0, r3, #4
   2d79c:	f7ff ffdb 	bl	2d756 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2d7a0:	2800      	cmp	r0, #0
   2d7a2:	d1f4      	bne.n	2d78e <update_keys_check+0x26>
   2d7a4:	e7ef      	b.n	2d786 <update_keys_check+0x1e>
	return true;
   2d7a6:	2001      	movs	r0, #1
   2d7a8:	e7ee      	b.n	2d788 <update_keys_check+0x20>

0002d7aa <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d7aa:	2301      	movs	r3, #1
   2d7ac:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d7ae:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d7b0:	f3bf 8f5b 	dmb	ish
   2d7b4:	e850 2f00 	ldrex	r2, [r0]
   2d7b8:	401a      	ands	r2, r3
   2d7ba:	e840 2100 	strex	r1, r2, [r0]
   2d7be:	2900      	cmp	r1, #0
   2d7c0:	d1f8      	bne.n	2d7b4 <atomic_clear_bit+0xa>
   2d7c2:	f3bf 8f5b 	dmb	ish
}
   2d7c6:	4770      	bx	lr

0002d7c8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d7ca:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d7cc:	2200      	movs	r2, #0
   2d7ce:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2d7d0:	4604      	mov	r4, r0
   2d7d2:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2d7d4:	460a      	mov	r2, r1
   2d7d6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2d7da:	2106      	movs	r1, #6
   2d7dc:	f7fe fd61 	bl	2c2a2 <bt_l2cap_send_cb>
   2d7e0:	b128      	cbz	r0, 2d7ee <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2d7e2:	4628      	mov	r0, r5
}
   2d7e4:	b003      	add	sp, #12
   2d7e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2d7ea:	f7f1 bb5b 	b.w	1eea4 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d7ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d7f2:	2300      	movs	r3, #0
   2d7f4:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2d7f8:	b003      	add	sp, #12
   2d7fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2d7fe:	f7f7 bf11 	b.w	25624 <k_work_reschedule>

0002d802 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2d802:	2007      	movs	r0, #7
   2d804:	4770      	bx	lr

0002d806 <atomic_test_and_clear_bit>:
{
   2d806:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d808:	2301      	movs	r3, #1
   2d80a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d80e:	43ca      	mvns	r2, r1
   2d810:	f3bf 8f5b 	dmb	ish
   2d814:	e850 3f00 	ldrex	r3, [r0]
   2d818:	ea03 0402 	and.w	r4, r3, r2
   2d81c:	e840 4500 	strex	r5, r4, [r0]
   2d820:	2d00      	cmp	r5, #0
   2d822:	d1f7      	bne.n	2d814 <atomic_test_and_clear_bit+0xe>
   2d824:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2d828:	4219      	tst	r1, r3
}
   2d82a:	bf14      	ite	ne
   2d82c:	2001      	movne	r0, #1
   2d82e:	2000      	moveq	r0, #0
   2d830:	bd30      	pop	{r4, r5, pc}

0002d832 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d832:	2301      	movs	r3, #1
   2d834:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d836:	f3bf 8f5b 	dmb	ish
   2d83a:	e850 2f00 	ldrex	r2, [r0]
   2d83e:	431a      	orrs	r2, r3
   2d840:	e840 2100 	strex	r1, r2, [r0]
   2d844:	2900      	cmp	r1, #0
   2d846:	d1f8      	bne.n	2d83a <atomic_set_bit+0x8>
   2d848:	f3bf 8f5b 	dmb	ish
}
   2d84c:	4770      	bx	lr

0002d84e <smp_keypress_notif>:
{
   2d84e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2d850:	210e      	movs	r1, #14
   2d852:	f7ff ffee 	bl	2d832 <atomic_set_bit>
}
   2d856:	2000      	movs	r0, #0
   2d858:	bd08      	pop	{r3, pc}

0002d85a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d85a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d85c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2d85e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2d860:	4628      	mov	r0, r5
   2d862:	2104      	movs	r1, #4
   2d864:	f7ff ff77 	bl	2d756 <atomic_test_bit>
   2d868:	b168      	cbz	r0, 2d886 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2d86a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d86c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2d86e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2d870:	4608      	mov	r0, r1
   2d872:	f7fe fd13 	bl	2c29c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2d876:	4604      	mov	r4, r0
   2d878:	b940      	cbnz	r0, 2d88c <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2d87a:	2104      	movs	r1, #4
   2d87c:	4628      	mov	r0, r5
   2d87e:	f7ff ffd8 	bl	2d832 <atomic_set_bit>
}
   2d882:	4620      	mov	r0, r4
   2d884:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2d886:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2d88a:	e7ef      	b.n	2d86c <smp_create_pdu.constprop.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   2d88c:	2101      	movs	r1, #1
   2d88e:	300c      	adds	r0, #12
   2d890:	f7f1 fc0e 	bl	1f0b0 <net_buf_simple_add>
	hdr->code = op;
   2d894:	7006      	strb	r6, [r0, #0]
	return buf;
   2d896:	e7f4      	b.n	2d882 <smp_create_pdu.constprop.0+0x28>

0002d898 <smp_send_pairing_random>:
{
   2d898:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d89a:	2104      	movs	r1, #4
{
   2d89c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2d89e:	f7ff ffdc 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2d8a2:	4604      	mov	r4, r0
   2d8a4:	b178      	cbz	r0, 2d8c6 <smp_send_pairing_random+0x2e>
   2d8a6:	2110      	movs	r1, #16
   2d8a8:	300c      	adds	r0, #12
   2d8aa:	f7f1 fc01 	bl	1f0b0 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2d8ae:	2210      	movs	r2, #16
   2d8b0:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2d8b4:	f7fe f920 	bl	2baf8 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2d8b8:	4628      	mov	r0, r5
   2d8ba:	2200      	movs	r2, #0
   2d8bc:	4621      	mov	r1, r4
   2d8be:	f7ff ff83 	bl	2d7c8 <smp_send.constprop.0>
	return 0;
   2d8c2:	2000      	movs	r0, #0
}
   2d8c4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2d8c6:	2008      	movs	r0, #8
   2d8c8:	e7fc      	b.n	2d8c4 <smp_send_pairing_random+0x2c>

0002d8ca <smp_pairing_confirm>:
{
   2d8ca:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2d8cc:	68cd      	ldr	r5, [r1, #12]
{
   2d8ce:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2d8d0:	210b      	movs	r1, #11
   2d8d2:	3004      	adds	r0, #4
   2d8d4:	f7ff ff69 	bl	2d7aa <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2d8d8:	2210      	movs	r2, #16
   2d8da:	4629      	mov	r1, r5
   2d8dc:	f104 0017 	add.w	r0, r4, #23
   2d8e0:	f7fe f90a 	bl	2baf8 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2d8e4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2d8e8:	78db      	ldrb	r3, [r3, #3]
   2d8ea:	b93b      	cbnz	r3, 2d8fc <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2d8ec:	4620      	mov	r0, r4
   2d8ee:	2104      	movs	r1, #4
   2d8f0:	f7ff ff9f 	bl	2d832 <atomic_set_bit>
}
   2d8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   2d8f8:	f7ff bfce 	b.w	2d898 <smp_send_pairing_random>
}
   2d8fc:	2000      	movs	r0, #0
   2d8fe:	bd38      	pop	{r3, r4, r5, pc}

0002d900 <smp_reset>:
{
   2d900:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d902:	1d03      	adds	r3, r0, #4
   2d904:	4604      	mov	r4, r0
   2d906:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2d908:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   2d90c:	f3bf 8f5b 	dmb	ish
   2d910:	e853 2f00 	ldrex	r2, [r3]
   2d914:	e843 5100 	strex	r1, r5, [r3]
   2d918:	2900      	cmp	r1, #0
   2d91a:	d1f9      	bne.n	2d910 <smp_reset+0x10>
   2d91c:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2d920:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2d924:	f7f7 fe84 	bl	25630 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2d928:	7225      	strb	r5, [r4, #8]
   2d92a:	f3bf 8f5b 	dmb	ish
   2d92e:	e854 3f00 	ldrex	r3, [r4]
   2d932:	e844 5200 	strex	r2, r5, [r4]
   2d936:	2a00      	cmp	r2, #0
   2d938:	d1f9      	bne.n	2d92e <smp_reset+0x2e>
   2d93a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2d93e:	78f3      	ldrb	r3, [r6, #3]
   2d940:	b92b      	cbnz	r3, 2d94e <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2d942:	4620      	mov	r0, r4
   2d944:	210b      	movs	r1, #11
}
   2d946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2d94a:	f7ff bf72 	b.w	2d832 <atomic_set_bit>
}
   2d94e:	bd70      	pop	{r4, r5, r6, pc}

0002d950 <smp_c1>:
{
   2d950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d954:	b089      	sub	sp, #36	; 0x24
   2d956:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d95a:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2d95c:	783b      	ldrb	r3, [r7, #0]
{
   2d95e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2d960:	f88d 3000 	strb.w	r3, [sp]
{
   2d964:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2d966:	f898 3000 	ldrb.w	r3, [r8]
   2d96a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2d96e:	4611      	mov	r1, r2
   2d970:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2d972:	2207      	movs	r2, #7
   2d974:	f10d 0002 	add.w	r0, sp, #2
   2d978:	f7fe f8be 	bl	2baf8 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2d97c:	2207      	movs	r2, #7
   2d97e:	4649      	mov	r1, r9
   2d980:	f10d 0009 	add.w	r0, sp, #9
   2d984:	f7fe f8b8 	bl	2baf8 <memcpy>
	while (len--) {
   2d988:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2d98c:	462a      	mov	r2, r5
   2d98e:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   2d990:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d994:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2d998:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2d99a:	ea83 030c 	eor.w	r3, r3, ip
   2d99e:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2d9a2:	d1f5      	bne.n	2d990 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2d9a4:	462a      	mov	r2, r5
   2d9a6:	4629      	mov	r1, r5
   2d9a8:	4630      	mov	r0, r6
   2d9aa:	f000 ff59 	bl	2e860 <bt_encrypt_le>
	if (err) {
   2d9ae:	4604      	mov	r4, r0
   2d9b0:	bb20      	cbnz	r0, 2d9fc <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   2d9b2:	2206      	movs	r2, #6
   2d9b4:	f108 0101 	add.w	r1, r8, #1
   2d9b8:	a804      	add	r0, sp, #16
   2d9ba:	f7fe f89d 	bl	2baf8 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2d9be:	2206      	movs	r2, #6
   2d9c0:	1c79      	adds	r1, r7, #1
   2d9c2:	f10d 0016 	add.w	r0, sp, #22
   2d9c6:	f7fe f897 	bl	2baf8 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2d9ca:	2204      	movs	r2, #4
   2d9cc:	4621      	mov	r1, r4
   2d9ce:	a807      	add	r0, sp, #28
   2d9d0:	f7fe f89d 	bl	2bb0e <memset>
	while (len--) {
   2d9d4:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2d9d8:	462a      	mov	r2, r5
   2d9da:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2d9dc:	f812 1b01 	ldrb.w	r1, [r2], #1
   2d9e0:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   2d9e4:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2d9e6:	ea81 0104 	eor.w	r1, r1, r4
   2d9ea:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   2d9ee:	d1f5      	bne.n	2d9dc <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   2d9f0:	462a      	mov	r2, r5
   2d9f2:	4629      	mov	r1, r5
   2d9f4:	4630      	mov	r0, r6
   2d9f6:	f000 ff33 	bl	2e860 <bt_encrypt_le>
   2d9fa:	4604      	mov	r4, r0
}
   2d9fc:	4620      	mov	r0, r4
   2d9fe:	b009      	add	sp, #36	; 0x24
   2da00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002da04 <legacy_send_pairing_confirm>:
{
   2da04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2da06:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2da08:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   2da0c:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2da0e:	f7ff ff24 	bl	2d85a <smp_create_pdu.constprop.0>
	if (!buf) {
   2da12:	4606      	mov	r6, r0
   2da14:	b1c0      	cbz	r0, 2da48 <legacy_send_pairing_confirm+0x44>
   2da16:	2110      	movs	r1, #16
   2da18:	300c      	adds	r0, #12
   2da1a:	f7f1 fb49 	bl	1f0b0 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2da1e:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2da22:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2da24:	9002      	str	r0, [sp, #8]
   2da26:	9301      	str	r3, [sp, #4]
   2da28:	9400      	str	r4, [sp, #0]
   2da2a:	f105 0310 	add.w	r3, r5, #16
   2da2e:	f105 0209 	add.w	r2, r5, #9
   2da32:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2da36:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2da3a:	f7ff ff89 	bl	2d950 <smp_c1>
   2da3e:	4604      	mov	r4, r0
   2da40:	b128      	cbz	r0, 2da4e <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
   2da42:	4630      	mov	r0, r6
   2da44:	f7f1 fa2e 	bl	1eea4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2da48:	2008      	movs	r0, #8
}
   2da4a:	b004      	add	sp, #16
   2da4c:	bd70      	pop	{r4, r5, r6, pc}
	smp_send(smp, buf, NULL, NULL);
   2da4e:	4602      	mov	r2, r0
   2da50:	4631      	mov	r1, r6
   2da52:	4628      	mov	r0, r5
   2da54:	f7ff feb8 	bl	2d7c8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2da58:	1d28      	adds	r0, r5, #4
   2da5a:	4621      	mov	r1, r4
   2da5c:	f7ff fea5 	bl	2d7aa <atomic_clear_bit>
	return 0;
   2da60:	4620      	mov	r0, r4
   2da62:	e7f2      	b.n	2da4a <legacy_send_pairing_confirm+0x46>

0002da64 <bt_smp_request_ltk>:
{
   2da64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2da68:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2da6a:	e9cd 2300 	strd	r2, r3, [sp]
   2da6e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2da70:	f7ef f95e 	bl	1cd30 <smp_chan_get>
	if (!smp) {
   2da74:	4605      	mov	r5, r0
   2da76:	2800      	cmp	r0, #0
   2da78:	d07c      	beq.n	2db74 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2da7a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2da7e:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2da80:	f1b8 0f00 	cmp.w	r8, #0
   2da84:	d128      	bne.n	2dad8 <bt_smp_request_ltk+0x74>
   2da86:	e9dd 3200 	ldrd	r3, r2, [sp]
   2da8a:	4313      	orrs	r3, r2
   2da8c:	d124      	bne.n	2dad8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2da8e:	2103      	movs	r1, #3
   2da90:	4630      	mov	r0, r6
   2da92:	f7ff fe60 	bl	2d756 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2da96:	b1f8      	cbz	r0, 2dad8 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2da98:	2101      	movs	r1, #1
   2da9a:	4630      	mov	r0, r6
   2da9c:	f7ff fe5b 	bl	2d756 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2daa0:	b1d0      	cbz	r0, 2dad8 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2daa2:	7d2c      	ldrb	r4, [r5, #20]
   2daa4:	7b6b      	ldrb	r3, [r5, #13]
   2daa6:	429c      	cmp	r4, r3
   2daa8:	bf28      	it	cs
   2daaa:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2daac:	4622      	mov	r2, r4
   2daae:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2dab2:	4638      	mov	r0, r7
   2dab4:	f7fe f820 	bl	2baf8 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2dab8:	2c0f      	cmp	r4, #15
   2daba:	d805      	bhi.n	2dac8 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2dabc:	f1c4 0210 	rsb	r2, r4, #16
   2dac0:	4641      	mov	r1, r8
   2dac2:	1938      	adds	r0, r7, r4
   2dac4:	f7fe f823 	bl	2bb0e <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2dac8:	4630      	mov	r0, r6
   2daca:	2101      	movs	r1, #1
   2dacc:	f7ff feb1 	bl	2d832 <atomic_set_bit>
		return true;
   2dad0:	2001      	movs	r0, #1
}
   2dad2:	b002      	add	sp, #8
   2dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2dad8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2dadc:	b983      	cbnz	r3, 2db00 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2dade:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2dae2:	7a21      	ldrb	r1, [r4, #8]
   2dae4:	4642      	mov	r2, r8
   2dae6:	2020      	movs	r0, #32
   2dae8:	f7f0 fd78 	bl	1e5dc <bt_keys_find>
   2daec:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2daf0:	b930      	cbnz	r0, 2db00 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2daf2:	7a21      	ldrb	r1, [r4, #8]
   2daf4:	4642      	mov	r2, r8
   2daf6:	2001      	movs	r0, #1
   2daf8:	f7f0 fd70 	bl	1e5dc <bt_keys_find>
   2dafc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2db00:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2db04:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2db08:	f1b8 0f00 	cmp.w	r8, #0
   2db0c:	d10c      	bne.n	2db28 <bt_smp_request_ltk+0xc4>
   2db0e:	e9dd 3200 	ldrd	r3, r2, [sp]
   2db12:	4313      	orrs	r3, r2
   2db14:	d108      	bne.n	2db28 <bt_smp_request_ltk+0xc4>
   2db16:	b300      	cbz	r0, 2db5a <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2db18:	89c3      	ldrh	r3, [r0, #14]
   2db1a:	069a      	lsls	r2, r3, #26
   2db1c:	d505      	bpl.n	2db2a <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2db1e:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2db20:	f100 011a 	add.w	r1, r0, #26
   2db24:	4622      	mov	r2, r4
   2db26:	e7c4      	b.n	2dab2 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2db28:	b1b8      	cbz	r0, 2db5a <bt_smp_request_ltk+0xf6>
   2db2a:	89c3      	ldrh	r3, [r0, #14]
   2db2c:	07db      	lsls	r3, r3, #31
   2db2e:	d514      	bpl.n	2db5a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2db30:	2208      	movs	r2, #8
   2db32:	4669      	mov	r1, sp
   2db34:	3040      	adds	r0, #64	; 0x40
   2db36:	f7fd ffb8 	bl	2baaa <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2db3a:	b970      	cbnz	r0, 2db5a <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2db3c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2db40:	2202      	movs	r2, #2
   2db42:	a908      	add	r1, sp, #32
   2db44:	3048      	adds	r0, #72	; 0x48
   2db46:	f7fd ffb0 	bl	2baaa <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2db4a:	4680      	mov	r8, r0
   2db4c:	b928      	cbnz	r0, 2db5a <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2db4e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2db52:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2db54:	314a      	adds	r1, #74	; 0x4a
   2db56:	4622      	mov	r2, r4
   2db58:	e7ab      	b.n	2dab2 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2db5a:	210f      	movs	r1, #15
   2db5c:	4630      	mov	r0, r6
   2db5e:	f7ff fdfa 	bl	2d756 <atomic_test_bit>
   2db62:	b120      	cbz	r0, 2db6e <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2db64:	2202      	movs	r2, #2
   2db66:	2106      	movs	r1, #6
   2db68:	4620      	mov	r0, r4
   2db6a:	f7eb f803 	bl	18b74 <bt_conn_security_changed>
	smp_reset(smp);
   2db6e:	4628      	mov	r0, r5
   2db70:	f7ff fec6 	bl	2d900 <smp_reset>
		return false;
   2db74:	2000      	movs	r0, #0
   2db76:	e7ac      	b.n	2dad2 <bt_smp_request_ltk+0x6e>

0002db78 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2db78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2db7c:	4770      	bx	lr

0002db7e <bt_smp_irk_get>:
{
   2db7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2db80:	2500      	movs	r5, #0
{
   2db82:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2db84:	2210      	movs	r2, #16
   2db86:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2db88:	e9cd 5500 	strd	r5, r5, [sp]
   2db8c:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2db90:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2db92:	f7fd ff8a 	bl	2baaa <memcmp>
   2db96:	b180      	cbz	r0, 2dbba <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2db98:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2db9a:	220c      	movs	r2, #12
   2db9c:	4629      	mov	r1, r5
   2db9e:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2dba0:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2dba2:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2dba4:	70e5      	strb	r5, [r4, #3]
   2dba6:	1d20      	adds	r0, r4, #4
   2dba8:	f7fd ffb1 	bl	2bb0e <memset>
	err = bt_encrypt_le(key, res, res);
   2dbac:	4622      	mov	r2, r4
   2dbae:	4621      	mov	r1, r4
   2dbb0:	4630      	mov	r0, r6
   2dbb2:	f000 fe55 	bl	2e860 <bt_encrypt_le>
}
   2dbb6:	b004      	add	sp, #16
   2dbb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2dbba:	f06f 0015 	mvn.w	r0, #21
   2dbbe:	e7fa      	b.n	2dbb6 <bt_smp_irk_get+0x38>

0002dbc0 <bt_smp_start_security>:
{
   2dbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2dbc2:	78c3      	ldrb	r3, [r0, #3]
{
   2dbc4:	4604      	mov	r4, r0
	switch (conn->role) {
   2dbc6:	2b00      	cmp	r3, #0
   2dbc8:	d15f      	bne.n	2dc8a <bt_smp_start_security+0xca>
		smp = smp_chan_get(conn);
   2dbca:	f7ef f8b1 	bl	1cd30 <smp_chan_get>
		if (!smp) {
   2dbce:	4605      	mov	r5, r0
   2dbd0:	2800      	cmp	r0, #0
   2dbd2:	d05d      	beq.n	2dc90 <bt_smp_start_security+0xd0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2dbd4:	1d06      	adds	r6, r0, #4
   2dbd6:	2103      	movs	r1, #3
   2dbd8:	4630      	mov	r0, r6
   2dbda:	f7ff fdbc 	bl	2d756 <atomic_test_bit>
   2dbde:	b120      	cbz	r0, 2dbea <bt_smp_start_security+0x2a>
			return -EBUSY;
   2dbe0:	f06f 040f 	mvn.w	r4, #15
}
   2dbe4:	4620      	mov	r0, r4
   2dbe6:	b003      	add	sp, #12
   2dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2dbea:	2101      	movs	r1, #1
   2dbec:	4630      	mov	r0, r6
   2dbee:	f7ff fdb2 	bl	2d756 <atomic_test_bit>
   2dbf2:	2800      	cmp	r0, #0
   2dbf4:	d1f4      	bne.n	2dbe0 <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2dbf6:	210b      	movs	r1, #11
   2dbf8:	1d20      	adds	r0, r4, #4
   2dbfa:	f7ff fdac 	bl	2d756 <atomic_test_bit>
   2dbfe:	b128      	cbz	r0, 2dc0c <bt_smp_start_security+0x4c>
			return smp_send_pairing_req(conn);
   2dc00:	4620      	mov	r0, r4
}
   2dc02:	b003      	add	sp, #12
   2dc04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2dc08:	f7ef baac 	b.w	1d164 <smp_send_pairing_req>
	if (!conn->le.keys) {
   2dc0c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2dc10:	b983      	cbnz	r3, 2dc34 <bt_smp_start_security+0x74>
						     conn->id, &conn->le.dst);
   2dc12:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2dc16:	7a21      	ldrb	r1, [r4, #8]
   2dc18:	463a      	mov	r2, r7
   2dc1a:	2020      	movs	r0, #32
   2dc1c:	f7f0 fcde 	bl	1e5dc <bt_keys_find>
   2dc20:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2dc24:	b930      	cbnz	r0, 2dc34 <bt_smp_start_security+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2dc26:	7a21      	ldrb	r1, [r4, #8]
   2dc28:	463a      	mov	r2, r7
   2dc2a:	2004      	movs	r0, #4
   2dc2c:	f7f0 fcd6 	bl	1e5dc <bt_keys_find>
   2dc30:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   2dc34:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2dc38:	2900      	cmp	r1, #0
   2dc3a:	d0e1      	beq.n	2dc00 <bt_smp_start_security+0x40>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2dc3c:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   2dc3e:	f013 0f24 	tst.w	r3, #36	; 0x24
   2dc42:	d0dd      	beq.n	2dc00 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2dc44:	7aa2      	ldrb	r2, [r4, #10]
   2dc46:	2a02      	cmp	r2, #2
   2dc48:	d909      	bls.n	2dc5e <bt_smp_start_security+0x9e>
   2dc4a:	7b48      	ldrb	r0, [r1, #13]
   2dc4c:	07c0      	lsls	r0, r0, #31
   2dc4e:	d5d7      	bpl.n	2dc00 <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2dc50:	2a03      	cmp	r2, #3
   2dc52:	d004      	beq.n	2dc5e <bt_smp_start_security+0x9e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2dc54:	069b      	lsls	r3, r3, #26
   2dc56:	d5d3      	bpl.n	2dc00 <bt_smp_start_security+0x40>
   2dc58:	7b0b      	ldrb	r3, [r1, #12]
   2dc5a:	2b10      	cmp	r3, #16
   2dc5c:	d1d0      	bne.n	2dc00 <bt_smp_start_security+0x40>
		err = bt_conn_le_start_encryption(conn,
   2dc5e:	7b0b      	ldrb	r3, [r1, #12]
   2dc60:	9300      	str	r3, [sp, #0]
   2dc62:	f101 0218 	add.w	r2, r1, #24
   2dc66:	f101 031a 	add.w	r3, r1, #26
   2dc6a:	4620      	mov	r0, r4
   2dc6c:	3110      	adds	r1, #16
   2dc6e:	f7fe f9db 	bl	2c028 <bt_conn_le_start_encryption>
		if (err) {
   2dc72:	4604      	mov	r4, r0
   2dc74:	2800      	cmp	r0, #0
   2dc76:	d1b5      	bne.n	2dbe4 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2dc78:	4628      	mov	r0, r5
   2dc7a:	210b      	movs	r1, #11
   2dc7c:	f7ff fdd9 	bl	2d832 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2dc80:	2101      	movs	r1, #1
   2dc82:	4630      	mov	r0, r6
   2dc84:	f7ff fdd5 	bl	2d832 <atomic_set_bit>
		return 0;
   2dc88:	e7ac      	b.n	2dbe4 <bt_smp_start_security+0x24>
		return -EINVAL;
   2dc8a:	f06f 0415 	mvn.w	r4, #21
   2dc8e:	e7a9      	b.n	2dbe4 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2dc90:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2dc94:	e7a6      	b.n	2dbe4 <bt_smp_start_security+0x24>

0002dc96 <bt_smp_dhkey_ready>:
{
   2dc96:	b570      	push	{r4, r5, r6, lr}
   2dc98:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2dc9a:	2008      	movs	r0, #8
   2dc9c:	f7ee fff6 	bl	1cc8c <smp_find>
	if (smp) {
   2dca0:	4604      	mov	r4, r0
   2dca2:	b1b8      	cbz	r0, 2dcd4 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2dca4:	1d05      	adds	r5, r0, #4
   2dca6:	2108      	movs	r1, #8
   2dca8:	4628      	mov	r0, r5
   2dcaa:	f7ff fd7e 	bl	2d7aa <atomic_clear_bit>
	if (!dhkey) {
   2dcae:	b3b6      	cbz	r6, 2dd1e <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2dcb0:	2107      	movs	r1, #7
   2dcb2:	f7ff fd7a 	bl	2d7aa <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2dcb6:	4631      	mov	r1, r6
   2dcb8:	2220      	movs	r2, #32
   2dcba:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2dcbe:	f7fd ff1b 	bl	2baf8 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2dcc2:	210a      	movs	r1, #10
   2dcc4:	4628      	mov	r0, r5
   2dcc6:	f7ff fd46 	bl	2d756 <atomic_test_bit>
   2dcca:	b168      	cbz	r0, 2dce8 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2dccc:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2dcce:	4628      	mov	r0, r5
   2dcd0:	f7ff fdaf 	bl	2d832 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2dcd4:	2007      	movs	r0, #7
   2dcd6:	f7ee ffd9 	bl	1cc8c <smp_find>
		if (smp) {
   2dcda:	4604      	mov	r4, r0
   2dcdc:	b118      	cbz	r0, 2dce6 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2dcde:	f7ef f8f9 	bl	1ced4 <smp_dhkey_generate>
			if (err) {
   2dce2:	4601      	mov	r1, r0
   2dce4:	b9b8      	cbnz	r0, 2dd16 <bt_smp_dhkey_ready+0x80>
}
   2dce6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2dce8:	2110      	movs	r1, #16
   2dcea:	4628      	mov	r0, r5
   2dcec:	f7ff fd33 	bl	2d756 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2dcf0:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2dcf2:	2800      	cmp	r0, #0
   2dcf4:	d1eb      	bne.n	2dcce <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2dcf6:	4628      	mov	r0, r5
   2dcf8:	f7ff fd2d 	bl	2d756 <atomic_test_bit>
   2dcfc:	2800      	cmp	r0, #0
   2dcfe:	d0e9      	beq.n	2dcd4 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2dd00:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2dd04:	78db      	ldrb	r3, [r3, #3]
   2dd06:	2b00      	cmp	r3, #0
   2dd08:	d1e4      	bne.n	2dcd4 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   2dd0a:	4620      	mov	r0, r4
   2dd0c:	f7ef fcd0 	bl	1d6b0 <compute_and_send_central_dhcheck>
		if (err) {
   2dd10:	4601      	mov	r1, r0
   2dd12:	2800      	cmp	r0, #0
   2dd14:	d0de      	beq.n	2dcd4 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2dd16:	4620      	mov	r0, r4
   2dd18:	f7f0 f86c 	bl	1ddf4 <smp_error>
   2dd1c:	e7da      	b.n	2dcd4 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2dd1e:	210b      	movs	r1, #11
   2dd20:	e7f9      	b.n	2dd16 <bt_smp_dhkey_ready+0x80>

0002dd22 <smp_id_sent>:
	if (!err) {
   2dd22:	b912      	cbnz	r2, 2dd2a <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2dd24:	2102      	movs	r1, #2
   2dd26:	f7f0 b9fb 	b.w	1e120 <smp_check_complete>
}
   2dd2a:	4770      	bx	lr

0002dd2c <smp_ident_sent>:
	if (!err) {
   2dd2c:	b912      	cbnz	r2, 2dd34 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2dd2e:	2101      	movs	r1, #1
   2dd30:	f7f0 b9f6 	b.w	1e120 <smp_check_complete>
}
   2dd34:	4770      	bx	lr

0002dd36 <bt_smp_disconnected>:
{
   2dd36:	b570      	push	{r4, r5, r6, lr}
   2dd38:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2dd3a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2dd3e:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dd42:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2dd44:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2dd48:	f7f7 fc72 	bl	25630 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dd4c:	2103      	movs	r1, #3
   2dd4e:	4620      	mov	r0, r4
   2dd50:	f7ff fd01 	bl	2d756 <atomic_test_bit>
   2dd54:	b1a0      	cbz	r0, 2dd80 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2dd56:	2108      	movs	r1, #8
   2dd58:	4630      	mov	r0, r6
   2dd5a:	f7ef ffc7 	bl	1dcec <smp_pairing_complete>
	if (keys) {
   2dd5e:	b13d      	cbz	r5, 2dd70 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2dd60:	89eb      	ldrh	r3, [r5, #14]
   2dd62:	b113      	cbz	r3, 2dd6a <bt_smp_disconnected+0x34>
   2dd64:	7b6b      	ldrb	r3, [r5, #13]
   2dd66:	079b      	lsls	r3, r3, #30
   2dd68:	d502      	bpl.n	2dd70 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2dd6a:	4628      	mov	r0, r5
   2dd6c:	f7f0 fd0c 	bl	1e788 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2dd70:	4630      	mov	r0, r6
   2dd72:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   2dd76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2dd7a:	2100      	movs	r1, #0
   2dd7c:	f7fd bec7 	b.w	2bb0e <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2dd80:	2101      	movs	r1, #1
   2dd82:	4620      	mov	r0, r4
   2dd84:	f7ff fce7 	bl	2d756 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2dd88:	2800      	cmp	r0, #0
   2dd8a:	d1e4      	bne.n	2dd56 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2dd8c:	210f      	movs	r1, #15
   2dd8e:	4620      	mov	r0, r4
   2dd90:	f7ff fce1 	bl	2d756 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2dd94:	2800      	cmp	r0, #0
   2dd96:	d1de      	bne.n	2dd56 <bt_smp_disconnected+0x20>
   2dd98:	e7e1      	b.n	2dd5e <bt_smp_disconnected+0x28>

0002dd9a <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2dd9a:	b510      	push	{r4, lr}
   2dd9c:	1e43      	subs	r3, r0, #1
   2dd9e:	f100 0210 	add.w	r2, r0, #16
   2dda2:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2dda4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2dda8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2ddac:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2ddae:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2ddb0:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2ddb2:	d1f7      	bne.n	2dda4 <sys_mem_swap.constprop.0+0xa>
	}
}
   2ddb4:	bd10      	pop	{r4, pc}

0002ddb6 <bt_crypto_aes_cmac>:
{
   2ddb6:	b570      	push	{r4, r5, r6, lr}
   2ddb8:	b0c2      	sub	sp, #264	; 0x108
   2ddba:	460d      	mov	r5, r1
   2ddbc:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ddbe:	4601      	mov	r1, r0
   2ddc0:	aa16      	add	r2, sp, #88	; 0x58
   2ddc2:	4668      	mov	r0, sp
{
   2ddc4:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2ddc6:	f7fd fce2 	bl	2b78e <tc_cmac_setup>
   2ddca:	b918      	cbnz	r0, 2ddd4 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2ddcc:	f06f 0004 	mvn.w	r0, #4
}
   2ddd0:	b042      	add	sp, #264	; 0x108
   2ddd2:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2ddd4:	4632      	mov	r2, r6
   2ddd6:	4629      	mov	r1, r5
   2ddd8:	4668      	mov	r0, sp
   2ddda:	f7fd fd03 	bl	2b7e4 <tc_cmac_update>
   2ddde:	2800      	cmp	r0, #0
   2dde0:	d0f4      	beq.n	2ddcc <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2dde2:	4669      	mov	r1, sp
   2dde4:	4620      	mov	r0, r4
   2dde6:	f7fd fd67 	bl	2b8b8 <tc_cmac_final>
   2ddea:	2800      	cmp	r0, #0
   2ddec:	d0ee      	beq.n	2ddcc <bt_crypto_aes_cmac+0x16>
	return 0;
   2ddee:	2000      	movs	r0, #0
   2ddf0:	e7ee      	b.n	2ddd0 <bt_crypto_aes_cmac+0x1a>

0002ddf2 <bt_crypto_f4>:
{
   2ddf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ddf4:	b097      	sub	sp, #92	; 0x5c
   2ddf6:	4614      	mov	r4, r2
   2ddf8:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2ddfa:	2220      	movs	r2, #32
   2ddfc:	4601      	mov	r1, r0
   2ddfe:	a805      	add	r0, sp, #20
{
   2de00:	461d      	mov	r5, r3
   2de02:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2de04:	f7f0 fdac 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2de08:	2220      	movs	r2, #32
   2de0a:	4631      	mov	r1, r6
   2de0c:	a80d      	add	r0, sp, #52	; 0x34
   2de0e:	f7f0 fda7 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2de12:	4621      	mov	r1, r4
   2de14:	2210      	movs	r2, #16
   2de16:	a801      	add	r0, sp, #4
	m[64] = z;
   2de18:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2de1c:	f7f0 fda0 	bl	1e960 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2de20:	463b      	mov	r3, r7
   2de22:	2241      	movs	r2, #65	; 0x41
   2de24:	a905      	add	r1, sp, #20
   2de26:	a801      	add	r0, sp, #4
   2de28:	f7ff ffc5 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   2de2c:	4604      	mov	r4, r0
   2de2e:	b910      	cbnz	r0, 2de36 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2de30:	4638      	mov	r0, r7
   2de32:	f7ff ffb2 	bl	2dd9a <sys_mem_swap.constprop.0>
}
   2de36:	4620      	mov	r0, r4
   2de38:	b017      	add	sp, #92	; 0x5c
   2de3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002de3c <bt_crypto_f6>:
{
   2de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de3e:	b097      	sub	sp, #92	; 0x5c
   2de40:	4605      	mov	r5, r0
   2de42:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2de44:	a805      	add	r0, sp, #20
   2de46:	2210      	movs	r2, #16
{
   2de48:	461c      	mov	r4, r3
   2de4a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2de4c:	f7f0 fd88 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2de50:	2210      	movs	r2, #16
   2de52:	4631      	mov	r1, r6
   2de54:	a809      	add	r0, sp, #36	; 0x24
   2de56:	f7f0 fd83 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2de5a:	4621      	mov	r1, r4
   2de5c:	2210      	movs	r2, #16
   2de5e:	a80d      	add	r0, sp, #52	; 0x34
   2de60:	f7f0 fd7e 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2de64:	991c      	ldr	r1, [sp, #112]	; 0x70
   2de66:	2203      	movs	r2, #3
   2de68:	a811      	add	r0, sp, #68	; 0x44
   2de6a:	f7f0 fd79 	bl	1e960 <sys_memcpy_swap>
	m[51] = a1->type;
   2de6e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2de70:	f814 3b01 	ldrb.w	r3, [r4], #1
   2de74:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2de78:	4621      	mov	r1, r4
   2de7a:	2206      	movs	r2, #6
   2de7c:	a812      	add	r0, sp, #72	; 0x48
   2de7e:	f7fd fe3b 	bl	2baf8 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2de82:	4621      	mov	r1, r4
   2de84:	2206      	movs	r2, #6
   2de86:	a812      	add	r0, sp, #72	; 0x48
   2de88:	f7f0 fd6a 	bl	1e960 <sys_memcpy_swap>
	m[58] = a2->type;
   2de8c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2de8e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2de92:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2de96:	4621      	mov	r1, r4
   2de98:	2206      	movs	r2, #6
   2de9a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2de9e:	f7fd fe2b 	bl	2baf8 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2dea2:	4621      	mov	r1, r4
   2dea4:	2206      	movs	r2, #6
   2dea6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2deaa:	f7f0 fd59 	bl	1e960 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2deae:	2210      	movs	r2, #16
   2deb0:	4629      	mov	r1, r5
   2deb2:	a801      	add	r0, sp, #4
   2deb4:	f7f0 fd54 	bl	1e960 <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2deb8:	463b      	mov	r3, r7
   2deba:	2241      	movs	r2, #65	; 0x41
   2debc:	a905      	add	r1, sp, #20
   2debe:	a801      	add	r0, sp, #4
   2dec0:	f7ff ff79 	bl	2ddb6 <bt_crypto_aes_cmac>
	if (err) {
   2dec4:	4604      	mov	r4, r0
   2dec6:	b910      	cbnz	r0, 2dece <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2dec8:	4638      	mov	r0, r7
   2deca:	f7ff ff66 	bl	2dd9a <sys_mem_swap.constprop.0>
}
   2dece:	4620      	mov	r0, r4
   2ded0:	b017      	add	sp, #92	; 0x5c
   2ded2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ded4 <fixed_data_unref>:
}
   2ded4:	4770      	bx	lr

0002ded6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2ded6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2ded8:	6849      	ldr	r1, [r1, #4]
   2deda:	6809      	ldr	r1, [r1, #0]
   2dedc:	f7f0 be32 	b.w	1eb44 <net_buf_alloc_len>

0002dee0 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2dee0:	f7f6 beb8 	b.w	24c54 <z_impl_k_queue_get>

0002dee4 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2dee4:	b292      	uxth	r2, r2
	buf->__buf = data;
   2dee6:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2dee8:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2deea:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2deec:	8082      	strh	r2, [r0, #4]
}
   2deee:	4770      	bx	lr

0002def0 <net_buf_simple_pull_u8>:
{
   2def0:	b510      	push	{r4, lr}
	val = buf->data[0];
   2def2:	6803      	ldr	r3, [r0, #0]
   2def4:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2def6:	2101      	movs	r1, #1
   2def8:	f7f1 f8a6 	bl	1f048 <net_buf_simple_pull>
}
   2defc:	4620      	mov	r0, r4
   2defe:	bd10      	pop	{r4, pc}

0002df00 <net_buf_simple_pull_le16>:
{
   2df00:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2df02:	6803      	ldr	r3, [r0, #0]
   2df04:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2df06:	2102      	movs	r1, #2
   2df08:	f7f1 f89e 	bl	1f048 <net_buf_simple_pull>
}
   2df0c:	4620      	mov	r0, r4
   2df0e:	bd10      	pop	{r4, pc}

0002df10 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2df10:	6802      	ldr	r2, [r0, #0]
   2df12:	6880      	ldr	r0, [r0, #8]
}
   2df14:	1a10      	subs	r0, r2, r0
   2df16:	4770      	bx	lr

0002df18 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2df18:	8883      	ldrh	r3, [r0, #4]
   2df1a:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2df1c:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2df1e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2df20:	6803      	ldr	r3, [r0, #0]
   2df22:	1a5b      	subs	r3, r3, r1
}
   2df24:	1ad0      	subs	r0, r2, r3
   2df26:	4770      	bx	lr

0002df28 <net_buf_simple_add_mem>:
{
   2df28:	b538      	push	{r3, r4, r5, lr}
   2df2a:	460d      	mov	r5, r1
   2df2c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2df2e:	4611      	mov	r1, r2
   2df30:	f7f1 f8be 	bl	1f0b0 <net_buf_simple_add>
   2df34:	4622      	mov	r2, r4
   2df36:	4629      	mov	r1, r5
}
   2df38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2df3c:	f7fd bddc 	b.w	2baf8 <memcpy>

0002df40 <net_buf_simple_add_u8>:
{
   2df40:	b510      	push	{r4, lr}
   2df42:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2df44:	2101      	movs	r1, #1
   2df46:	f7f1 f8b3 	bl	1f0b0 <net_buf_simple_add>
	*u8 = val;
   2df4a:	7004      	strb	r4, [r0, #0]
}
   2df4c:	bd10      	pop	{r4, pc}

0002df4e <net_buf_simple_add_le16>:
{
   2df4e:	b510      	push	{r4, lr}
   2df50:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2df52:	2102      	movs	r1, #2
   2df54:	f7f1 f8ac 	bl	1f0b0 <net_buf_simple_add>
	dst[0] = val;
   2df58:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2df5a:	0a24      	lsrs	r4, r4, #8
   2df5c:	7044      	strb	r4, [r0, #1]
}
   2df5e:	bd10      	pop	{r4, pc}

0002df60 <set_on_state>:
	__asm__ volatile(
   2df60:	f04f 0340 	mov.w	r3, #64	; 0x40
   2df64:	f3ef 8211 	mrs	r2, BASEPRI
   2df68:	f383 8812 	msr	BASEPRI_MAX, r3
   2df6c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2df70:	6803      	ldr	r3, [r0, #0]
   2df72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2df76:	f043 0302 	orr.w	r3, r3, #2
   2df7a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2df7c:	f382 8811 	msr	BASEPRI, r2
   2df80:	f3bf 8f6f 	isb	sy
}
   2df84:	4770      	bx	lr

0002df86 <async_start>:
{
   2df86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df88:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2df8a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2df8c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2df8e:	f04f 0540 	mov.w	r5, #64	; 0x40
   2df92:	f3ef 8611 	mrs	r6, BASEPRI
   2df96:	f385 8812 	msr	BASEPRI_MAX, r5
   2df9a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2df9e:	250c      	movs	r5, #12
   2dfa0:	4369      	muls	r1, r5
   2dfa2:	440c      	add	r4, r1
   2dfa4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2dfa6:	f005 0c07 	and.w	ip, r5, #7
   2dfaa:	f1bc 0f01 	cmp.w	ip, #1
   2dfae:	d10b      	bne.n	2dfc8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2dfb0:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   2dfb2:	f386 8811 	msr	BASEPRI, r6
   2dfb6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2dfba:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2dfbe:	6843      	ldr	r3, [r0, #4]
   2dfc0:	585b      	ldr	r3, [r3, r1]
   2dfc2:	4798      	blx	r3
	return 0;
   2dfc4:	2000      	movs	r0, #0
}
   2dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2dfc8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2dfcc:	42af      	cmp	r7, r5
   2dfce:	f386 8811 	msr	BASEPRI, r6
   2dfd2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2dfd6:	bf0c      	ite	eq
   2dfd8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2dfdc:	f04f 30ff 	movne.w	r0, #4294967295
   2dfe0:	e7f1      	b.n	2dfc6 <async_start+0x40>

0002dfe2 <api_start>:
{
   2dfe2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2dfe4:	2480      	movs	r4, #128	; 0x80
   2dfe6:	9400      	str	r4, [sp, #0]
   2dfe8:	f7ff ffcd 	bl	2df86 <async_start>
}
   2dfec:	b002      	add	sp, #8
   2dfee:	bd10      	pop	{r4, pc}

0002dff0 <onoff_started_callback>:
	return &data->mgr[type];
   2dff0:	6900      	ldr	r0, [r0, #16]
   2dff2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2dff4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2dff8:	2100      	movs	r1, #0
   2dffa:	4710      	bx	r2

0002dffc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2dffc:	2000      	movs	r0, #0
   2dffe:	f7f4 bc4d 	b.w	2289c <nrfx_clock_start>

0002e002 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2e002:	2000      	movs	r0, #0
   2e004:	f7f4 bc6a 	b.w	228dc <nrfx_clock_stop>

0002e008 <blocking_start_callback>:
{
   2e008:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2e00a:	f7f6 be7b 	b.w	24d04 <z_impl_k_sem_give>

0002e00e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2e00e:	2280      	movs	r2, #128	; 0x80
   2e010:	f7f1 b8ee 	b.w	1f1f0 <stop>

0002e014 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e014:	6843      	ldr	r3, [r0, #4]
   2e016:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2e018:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2e01c:	600b      	str	r3, [r1, #0]
}
   2e01e:	2000      	movs	r0, #0
   2e020:	4770      	bx	lr

0002e022 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e022:	6843      	ldr	r3, [r0, #4]
   2e024:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2e026:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2e02a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2e02e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e032:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2e036:	2000      	movs	r0, #0
   2e038:	4770      	bx	lr

0002e03a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e03a:	6843      	ldr	r3, [r0, #4]
   2e03c:	685b      	ldr	r3, [r3, #4]
}
   2e03e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2e040:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2e044:	4770      	bx	lr

0002e046 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e046:	6843      	ldr	r3, [r0, #4]
   2e048:	685b      	ldr	r3, [r3, #4]
}
   2e04a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2e04c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2e050:	4770      	bx	lr

0002e052 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2e052:	6843      	ldr	r3, [r0, #4]
   2e054:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2e056:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2e05a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2e05e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2e060:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2e064:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2e068:	2000      	movs	r0, #0
   2e06a:	4770      	bx	lr

0002e06c <k_sem_give>:
   2e06c:	f7f6 be4a 	b.w	24d04 <z_impl_k_sem_give>

0002e070 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2e070:	b918      	cbnz	r0, 2e07a <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2e072:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2e076:	f7ff bff9 	b.w	2e06c <k_sem_give>
}
   2e07a:	4770      	bx	lr

0002e07c <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2e07c:	f04f 32ff 	mov.w	r2, #4294967295
   2e080:	f04f 33ff 	mov.w	r3, #4294967295
   2e084:	3018      	adds	r0, #24
   2e086:	f7f6 be77 	b.w	24d78 <z_impl_k_sem_take>

0002e08a <qspi_trans_lock.isra.0>:
   2e08a:	f04f 32ff 	mov.w	r2, #4294967295
   2e08e:	f04f 33ff 	mov.w	r3, #4294967295
   2e092:	f7f6 be71 	b.w	24d78 <z_impl_k_sem_take>

0002e096 <qspi_nor_write_protection_set>:
{
   2e096:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2e098:	2200      	movs	r2, #0
   2e09a:	4291      	cmp	r1, r2
   2e09c:	bf0c      	ite	eq
   2e09e:	2306      	moveq	r3, #6
   2e0a0:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e0a2:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2e0a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2e0a8:	9203      	str	r2, [sp, #12]
   2e0aa:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2e0ae:	f7f1 fc9d 	bl	1f9ec <qspi_send_cmd>
		ret = -EIO;
   2e0b2:	2800      	cmp	r0, #0
}
   2e0b4:	bf18      	it	ne
   2e0b6:	f06f 0004 	mvnne.w	r0, #4
   2e0ba:	b005      	add	sp, #20
   2e0bc:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0c0 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2e0c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2e0c2:	23ff      	movs	r3, #255	; 0xff
   2e0c4:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2e0c8:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2e0cc:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2e0ce:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2e0d0:	2301      	movs	r3, #1
   2e0d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2e0d6:	2305      	movs	r3, #5
   2e0d8:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e0dc:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2e0de:	ab01      	add	r3, sp, #4
   2e0e0:	9204      	str	r2, [sp, #16]
   2e0e2:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2e0e4:	f7f1 fc82 	bl	1f9ec <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2e0e8:	2800      	cmp	r0, #0
   2e0ea:	bfa8      	it	ge
   2e0ec:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2e0f0:	b007      	add	sp, #28
   2e0f2:	f85d fb04 	ldr.w	pc, [sp], #4

0002e0f6 <is_regular_addr_valid>:
{
   2e0f6:	b538      	push	{r3, r4, r5, lr}
   2e0f8:	4605      	mov	r5, r0
   2e0fa:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2e0fc:	f000 fcaf 	bl	2ea5e <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2e100:	2d00      	cmp	r5, #0
   2e102:	db07      	blt.n	2e114 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2e104:	42a8      	cmp	r0, r5
   2e106:	d905      	bls.n	2e114 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2e108:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2e10a:	4284      	cmp	r4, r0
   2e10c:	bf8c      	ite	hi
   2e10e:	2000      	movhi	r0, #0
   2e110:	2001      	movls	r0, #1
}
   2e112:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2e114:	2000      	movs	r0, #0
   2e116:	e7fc      	b.n	2e112 <is_regular_addr_valid+0x1c>

0002e118 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2e118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e11a:	461c      	mov	r4, r3
   2e11c:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2e11e:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   2e120:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2e122:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2e124:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2e126:	6913      	ldr	r3, [r2, #16]
{
   2e128:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   2e12a:	aa01      	add	r2, sp, #4
   2e12c:	4669      	mov	r1, sp
   2e12e:	4798      	blx	r3

	while (layout_size--) {
   2e130:	9b01      	ldr	r3, [sp, #4]
   2e132:	1e5a      	subs	r2, r3, #1
   2e134:	9201      	str	r2, [sp, #4]
   2e136:	b91b      	cbnz	r3, 2e140 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2e138:	f06f 0015 	mvn.w	r0, #21
}
   2e13c:	b003      	add	sp, #12
   2e13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2e140:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2e142:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2e144:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2e146:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2e148:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2e14a:	b985      	cbnz	r5, 2e16e <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2e14c:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2e14e:	f8d0 c000 	ldr.w	ip, [r0]
   2e152:	4563      	cmp	r3, ip
   2e154:	bf28      	it	cs
   2e156:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2e158:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2e15a:	fb03 1107 	mla	r1, r3, r7, r1
   2e15e:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2e160:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2e162:	6802      	ldr	r2, [r0, #0]
   2e164:	429a      	cmp	r2, r3
   2e166:	d806      	bhi.n	2e176 <flash_get_page_info+0x5e>
		layout++;
   2e168:	3008      	adds	r0, #8
   2e16a:	9000      	str	r0, [sp, #0]
   2e16c:	e7e0      	b.n	2e130 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2e16e:	1a6b      	subs	r3, r5, r1
   2e170:	fbb3 f3f7 	udiv	r3, r3, r7
   2e174:	e7eb      	b.n	2e14e <flash_get_page_info+0x36>
			return 0;
   2e176:	2000      	movs	r0, #0
   2e178:	e7e0      	b.n	2e13c <flash_get_page_info+0x24>

0002e17a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2e17a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2e17c:	2200      	movs	r2, #0
   2e17e:	f7ff bfcb 	b.w	2e118 <flash_get_page_info>

0002e182 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2e182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2e186:	6883      	ldr	r3, [r0, #8]
{
   2e188:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2e18a:	691b      	ldr	r3, [r3, #16]
{
   2e18c:	4688      	mov	r8, r1
   2e18e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2e190:	a901      	add	r1, sp, #4
   2e192:	aa02      	add	r2, sp, #8
   2e194:	4798      	blx	r3
	off_t off = 0;
   2e196:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2e198:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2e19a:	4625      	mov	r5, r4
   2e19c:	9b02      	ldr	r3, [sp, #8]
   2e19e:	42ab      	cmp	r3, r5
   2e1a0:	d802      	bhi.n	2e1a8 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2e1a2:	b006      	add	sp, #24
   2e1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2e1a8:	9f01      	ldr	r7, [sp, #4]
   2e1aa:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2e1ae:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2e1b0:	687b      	ldr	r3, [r7, #4]
   2e1b2:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e1b4:	683a      	ldr	r2, [r7, #0]
   2e1b6:	42b2      	cmp	r2, r6
   2e1b8:	eb0a 0306 	add.w	r3, sl, r6
   2e1bc:	d802      	bhi.n	2e1c4 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2e1be:	3501      	adds	r5, #1
   2e1c0:	469a      	mov	sl, r3
   2e1c2:	e7eb      	b.n	2e19c <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2e1c4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2e1c6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2e1c8:	4649      	mov	r1, r9
   2e1ca:	a803      	add	r0, sp, #12
   2e1cc:	47c0      	blx	r8
   2e1ce:	2800      	cmp	r0, #0
   2e1d0:	d0e7      	beq.n	2e1a2 <flash_page_foreach+0x20>
			off += page_info.size;
   2e1d2:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2e1d4:	3601      	adds	r6, #1
			off += page_info.size;
   2e1d6:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2e1d8:	e7ec      	b.n	2e1b4 <flash_page_foreach+0x32>

0002e1da <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2e1da:	6902      	ldr	r2, [r0, #16]
{
   2e1dc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2e1de:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2e1e2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2e1e6:	2000      	movs	r0, #0
   2e1e8:	4770      	bx	lr

0002e1ea <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2e1ea:	6843      	ldr	r3, [r0, #4]
   2e1ec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2e1ee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2e1f2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2e1f6:	4770      	bx	lr

0002e1f8 <tx_start>:
{
   2e1f8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2e1fa:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2e1fc:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2e1fe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2e202:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e206:	2200      	movs	r2, #0
   2e208:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e20c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2e210:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2e214:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2e218:	6862      	ldr	r2, [r4, #4]
   2e21a:	06d2      	lsls	r2, r2, #27
   2e21c:	d511      	bpl.n	2e242 <tx_start+0x4a>
	if (data->async) {
   2e21e:	6902      	ldr	r2, [r0, #16]
   2e220:	68d2      	ldr	r2, [r2, #12]
   2e222:	b12a      	cbz	r2, 2e230 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2e224:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2e228:	f041 0101 	orr.w	r1, r1, #1
   2e22c:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   2e230:	6842      	ldr	r2, [r0, #4]
   2e232:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2e234:	2108      	movs	r1, #8
   2e236:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2e23a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2e23e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e242:	2201      	movs	r2, #1
   2e244:	609a      	str	r2, [r3, #8]
}
   2e246:	bd10      	pop	{r4, pc}

0002e248 <user_callback>:
	if (data->async->user_callback) {
   2e248:	6903      	ldr	r3, [r0, #16]
   2e24a:	68da      	ldr	r2, [r3, #12]
   2e24c:	6813      	ldr	r3, [r2, #0]
   2e24e:	b10b      	cbz	r3, 2e254 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2e250:	6852      	ldr	r2, [r2, #4]
   2e252:	4718      	bx	r3
}
   2e254:	4770      	bx	lr

0002e256 <notify_uart_rx_rdy>:
{
   2e256:	b570      	push	{r4, r5, r6, lr}
   2e258:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   2e25a:	6906      	ldr	r6, [r0, #16]
{
   2e25c:	4604      	mov	r4, r0
   2e25e:	460d      	mov	r5, r1
	struct uart_event evt = {
   2e260:	2214      	movs	r2, #20
   2e262:	2100      	movs	r1, #0
   2e264:	a801      	add	r0, sp, #4
   2e266:	f7fd fc52 	bl	2bb0e <memset>
   2e26a:	2302      	movs	r3, #2
   2e26c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2e270:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2e272:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2e276:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2e278:	a901      	add	r1, sp, #4
   2e27a:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e27c:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2e280:	f7ff ffe2 	bl	2e248 <user_callback>
}
   2e284:	b006      	add	sp, #24
   2e286:	bd70      	pop	{r4, r5, r6, pc}

0002e288 <rx_buf_release>:
{
   2e288:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   2e28a:	680e      	ldr	r6, [r1, #0]
{
   2e28c:	b086      	sub	sp, #24
   2e28e:	4605      	mov	r5, r0
   2e290:	460c      	mov	r4, r1
	if (*buf) {
   2e292:	b17e      	cbz	r6, 2e2b4 <rx_buf_release+0x2c>
		struct uart_event evt = {
   2e294:	2214      	movs	r2, #20
   2e296:	2100      	movs	r1, #0
   2e298:	a801      	add	r0, sp, #4
   2e29a:	f7fd fc38 	bl	2bb0e <memset>
   2e29e:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2e2a0:	eb0d 0103 	add.w	r1, sp, r3
   2e2a4:	4628      	mov	r0, r5
		struct uart_event evt = {
   2e2a6:	f88d 3004 	strb.w	r3, [sp, #4]
   2e2aa:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   2e2ac:	f7ff ffcc 	bl	2e248 <user_callback>
		*buf = NULL;
   2e2b0:	2300      	movs	r3, #0
   2e2b2:	6023      	str	r3, [r4, #0]
}
   2e2b4:	b006      	add	sp, #24
   2e2b6:	bd70      	pop	{r4, r5, r6, pc}

0002e2b8 <notify_rx_disable>:
{
   2e2b8:	b510      	push	{r4, lr}
   2e2ba:	b086      	sub	sp, #24
   2e2bc:	4604      	mov	r4, r0
	struct uart_event evt = {
   2e2be:	2214      	movs	r2, #20
   2e2c0:	2100      	movs	r1, #0
   2e2c2:	a801      	add	r0, sp, #4
   2e2c4:	f7fd fc23 	bl	2bb0e <memset>
   2e2c8:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2e2ca:	a901      	add	r1, sp, #4
   2e2cc:	4620      	mov	r0, r4
	struct uart_event evt = {
   2e2ce:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2e2d2:	f7ff ffb9 	bl	2e248 <user_callback>
}
   2e2d6:	b006      	add	sp, #24
   2e2d8:	bd10      	pop	{r4, pc}

0002e2da <uarte_nrfx_rx_buf_rsp>:
{
   2e2da:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2e2dc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e2de:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e2e0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2e2e2:	f04f 0040 	mov.w	r0, #64	; 0x40
   2e2e6:	f3ef 8611 	mrs	r6, BASEPRI
   2e2ea:	f380 8812 	msr	BASEPRI_MAX, r0
   2e2ee:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2e2f2:	68ec      	ldr	r4, [r5, #12]
   2e2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e2f6:	b198      	cbz	r0, 2e320 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2e2f8:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2e2fa:	b9a0      	cbnz	r0, 2e326 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2e2fc:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   2e2fe:	68ec      	ldr	r4, [r5, #12]
   2e300:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e302:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2e306:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2e30a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2e30e:	f042 0220 	orr.w	r2, r2, #32
   2e312:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2e316:	f386 8811 	msr	BASEPRI, r6
   2e31a:	f3bf 8f6f 	isb	sy
}
   2e31e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   2e320:	f06f 000c 	mvn.w	r0, #12
   2e324:	e7f7      	b.n	2e316 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   2e326:	f06f 000f 	mvn.w	r0, #15
   2e32a:	e7f4      	b.n	2e316 <uarte_nrfx_rx_buf_rsp+0x3c>

0002e32c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2e32c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   2e32e:	68d8      	ldr	r0, [r3, #12]
   2e330:	b120      	cbz	r0, 2e33c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   2e332:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   2e334:	68db      	ldr	r3, [r3, #12]
	return 0;
   2e336:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2e338:	605a      	str	r2, [r3, #4]
	return 0;
   2e33a:	4770      	bx	lr
		return -ENOTSUP;
   2e33c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e340:	4770      	bx	lr

0002e342 <uarte_nrfx_poll_in>:
{
   2e342:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   2e344:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2e346:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2e348:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2e34a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2e34c:	b960      	cbnz	r0, 2e368 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e34e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e352:	b164      	cbz	r4, 2e36e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   2e354:	6992      	ldr	r2, [r2, #24]
   2e356:	7812      	ldrb	r2, [r2, #0]
   2e358:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e35a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2e35e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e362:	2201      	movs	r2, #1
   2e364:	601a      	str	r2, [r3, #0]
}
   2e366:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2e368:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e36c:	e7fb      	b.n	2e366 <uarte_nrfx_poll_in+0x24>
		return -1;
   2e36e:	f04f 30ff 	mov.w	r0, #4294967295
   2e372:	e7f8      	b.n	2e366 <uarte_nrfx_poll_in+0x24>

0002e374 <uarte_nrfx_rx_disable>:
{
   2e374:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e376:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e378:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2e37a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2e37c:	68eb      	ldr	r3, [r5, #12]
   2e37e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2e380:	b1ba      	cbz	r2, 2e3b2 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2e382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2e384:	b153      	cbz	r3, 2e39c <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2e386:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2e38a:	f023 0320 	bic.w	r3, r3, #32
   2e38e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e392:	2300      	movs	r3, #0
   2e394:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2e398:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   2e39c:	68e8      	ldr	r0, [r5, #12]
   2e39e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2e3a0:	f000 fcf5 	bl	2ed8e <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2e3a4:	68eb      	ldr	r3, [r5, #12]
   2e3a6:	2000      	movs	r0, #0
   2e3a8:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e3ac:	2301      	movs	r3, #1
   2e3ae:	6063      	str	r3, [r4, #4]
}
   2e3b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e3b2:	f06f 000d 	mvn.w	r0, #13
   2e3b6:	e7fb      	b.n	2e3b0 <uarte_nrfx_rx_disable+0x3c>

0002e3b8 <setup_tx_cache>:
{
   2e3b8:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   2e3ba:	68c3      	ldr	r3, [r0, #12]
   2e3bc:	68da      	ldr	r2, [r3, #12]
   2e3be:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2e3c0:	1a52      	subs	r2, r2, r1
   2e3c2:	d00f      	beq.n	2e3e4 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2e3c4:	2a08      	cmp	r2, #8
   2e3c6:	bf28      	it	cs
   2e3c8:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   2e3ca:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2e3cc:	68c3      	ldr	r3, [r0, #12]
   2e3ce:	6999      	ldr	r1, [r3, #24]
   2e3d0:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2e3d2:	68c3      	ldr	r3, [r0, #12]
   2e3d4:	6898      	ldr	r0, [r3, #8]
   2e3d6:	69d9      	ldr	r1, [r3, #28]
   2e3d8:	4401      	add	r1, r0
   2e3da:	6998      	ldr	r0, [r3, #24]
   2e3dc:	f7fd fb8c 	bl	2baf8 <memcpy>
	return true;
   2e3e0:	2001      	movs	r0, #1
}
   2e3e2:	bd08      	pop	{r3, pc}
		return false;
   2e3e4:	4610      	mov	r0, r2
   2e3e6:	e7fc      	b.n	2e3e2 <setup_tx_cache+0x2a>

0002e3e8 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   2e3ea:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   2e3ec:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   2e3ee:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2e3f2:	460c      	mov	r4, r1
   2e3f4:	b1e9      	cbz	r1, 2e432 <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   2e3f6:	2100      	movs	r1, #0
   2e3f8:	4620      	mov	r0, r4
   2e3fa:	f7fd fb88 	bl	2bb0e <memset>
		flush_len = len;
   2e3fe:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2e400:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e404:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   2e406:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e40a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e40c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   2e410:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e414:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e416:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2e41a:	2900      	cmp	r1, #0
   2e41c:	d0fb      	beq.n	2e416 <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e41e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   2e422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2e426:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   2e42a:	b92c      	cbnz	r4, 2e438 <rx_flush.isra.0+0x50>
			return rx_amount;
   2e42c:	b2c0      	uxtb	r0, r0
}
   2e42e:	b003      	add	sp, #12
   2e430:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   2e432:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   2e434:	466b      	mov	r3, sp
   2e436:	e7e3      	b.n	2e400 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   2e438:	4286      	cmp	r6, r0
   2e43a:	d1f7      	bne.n	2e42c <rx_flush.isra.0+0x44>
   2e43c:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   2e43e:	42a2      	cmp	r2, r4
   2e440:	d101      	bne.n	2e446 <rx_flush.isra.0+0x5e>
	return 0;
   2e442:	2000      	movs	r0, #0
   2e444:	e7f3      	b.n	2e42e <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   2e446:	f814 3b01 	ldrb.w	r3, [r4], #1
   2e44a:	2b00      	cmp	r3, #0
   2e44c:	d0f7      	beq.n	2e43e <rx_flush.isra.0+0x56>
   2e44e:	e7ed      	b.n	2e42c <rx_flush.isra.0+0x44>

0002e450 <async_uart_release>:
{
   2e450:	b570      	push	{r4, r5, r6, lr}
   2e452:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   2e454:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   2e456:	f04f 0340 	mov.w	r3, #64	; 0x40
   2e45a:	f3ef 8611 	mrs	r6, BASEPRI
   2e45e:	f383 8812 	msr	BASEPRI_MAX, r3
   2e462:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   2e466:	68d0      	ldr	r0, [r2, #12]
   2e468:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2e46c:	ea23 0301 	bic.w	r3, r3, r1
   2e470:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   2e474:	68d5      	ldr	r5, [r2, #12]
   2e476:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   2e47a:	b973      	cbnz	r3, 2e49a <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   2e47c:	2902      	cmp	r1, #2
   2e47e:	d107      	bne.n	2e490 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2e480:	6860      	ldr	r0, [r4, #4]
   2e482:	2205      	movs	r2, #5
   2e484:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2e488:	f7ff ffae 	bl	2e3e8 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   2e48c:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   2e490:	6863      	ldr	r3, [r4, #4]
   2e492:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2e494:	2200      	movs	r2, #0
   2e496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2e49a:	f386 8811 	msr	BASEPRI, r6
   2e49e:	f3bf 8f6f 	isb	sy
}
   2e4a2:	bd70      	pop	{r4, r5, r6, pc}

0002e4a4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2e4a4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2e4a6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2e4a8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e4ac:	b940      	cbnz	r0, 2e4c0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2e4ae:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2e4b0:	079b      	lsls	r3, r3, #30
   2e4b2:	d406      	bmi.n	2e4c2 <is_tx_ready.isra.0+0x1e>
   2e4b4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2e4b8:	3800      	subs	r0, #0
   2e4ba:	bf18      	it	ne
   2e4bc:	2001      	movne	r0, #1
   2e4be:	4770      	bx	lr
   2e4c0:	2001      	movs	r0, #1
}
   2e4c2:	4770      	bx	lr

0002e4c4 <start_tx_locked>:
{
   2e4c4:	b510      	push	{r4, lr}
   2e4c6:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   2e4c8:	6840      	ldr	r0, [r0, #4]
   2e4ca:	f7ff ffeb 	bl	2e4a4 <is_tx_ready.isra.0>
   2e4ce:	68cb      	ldr	r3, [r1, #12]
   2e4d0:	b918      	cbnz	r0, 2e4da <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2e4d2:	2201      	movs	r2, #1
   2e4d4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   2e4d8:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   2e4da:	2200      	movs	r2, #0
   2e4dc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   2e4e0:	68cb      	ldr	r3, [r1, #12]
   2e4e2:	f04f 32ff 	mov.w	r2, #4294967295
   2e4e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e4ea:	68cb      	ldr	r3, [r1, #12]
   2e4ec:	4620      	mov	r0, r4
   2e4ee:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   2e4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2e4f6:	f7ff be7f 	b.w	2e1f8 <tx_start>

0002e4fa <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2e4fa:	b510      	push	{r4, lr}
   2e4fc:	2200      	movs	r2, #0
   2e4fe:	4604      	mov	r4, r0
   2e500:	2101      	movs	r1, #1
   2e502:	2028      	movs	r0, #40	; 0x28
   2e504:	f7e6 fbc4 	bl	14c90 <z_arm_irq_priority_set>
   2e508:	2028      	movs	r0, #40	; 0x28
   2e50a:	f7e6 fb91 	bl	14c30 <arch_irq_enable>
   2e50e:	4620      	mov	r0, r4
   2e510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e514:	f7f2 b81a 	b.w	2054c <uarte_instance_init.constprop.0>

0002e518 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2e518:	b510      	push	{r4, lr}
   2e51a:	2200      	movs	r2, #0
   2e51c:	4604      	mov	r4, r0
   2e51e:	2101      	movs	r1, #1
   2e520:	2002      	movs	r0, #2
   2e522:	f7e6 fbb5 	bl	14c90 <z_arm_irq_priority_set>
   2e526:	2002      	movs	r0, #2
   2e528:	f7e6 fb82 	bl	14c30 <arch_irq_enable>
   2e52c:	4620      	mov	r0, r4
   2e52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e532:	f7f2 b80b 	b.w	2054c <uarte_instance_init.constprop.0>

0002e536 <rx_timeout>:
{
   2e536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   2e538:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2e53a:	68e3      	ldr	r3, [r4, #12]
   2e53c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   2e540:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   2e544:	bb13      	cbnz	r3, 2e58c <rx_timeout+0x56>
	const struct device *dev = data->dev;
   2e546:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   2e548:	6873      	ldr	r3, [r6, #4]
   2e54a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2e54c:	2210      	movs	r2, #16
   2e54e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2e552:	68e3      	ldr	r3, [r4, #12]
   2e554:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   2e558:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   2e55a:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2e55c:	bf1f      	itttt	ne
   2e55e:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2e560:	68e3      	ldrne	r3, [r4, #12]
   2e562:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   2e564:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   2e566:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   2e568:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   2e56c:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e56e:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2e570:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2e572:	da0c      	bge.n	2e58e <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2e574:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e578:	68e3      	ldr	r3, [r4, #12]
   2e57a:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e57e:	4281      	cmp	r1, r0
   2e580:	d80b      	bhi.n	2e59a <rx_timeout+0x64>
	return config->uarte_regs;
   2e582:	6873      	ldr	r3, [r6, #4]
   2e584:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2e586:	2210      	movs	r2, #16
   2e588:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2e58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2e58e:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2e592:	eb02 0c01 	add.w	ip, r2, r1
   2e596:	4584      	cmp	ip, r0
   2e598:	d904      	bls.n	2e5a4 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2e59a:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   2e59c:	2d00      	cmp	r5, #0
   2e59e:	ddf0      	ble.n	2e582 <rx_timeout+0x4c>
		clipped = true;
   2e5a0:	2701      	movs	r7, #1
   2e5a2:	e005      	b.n	2e5b0 <rx_timeout+0x7a>
	if (len > 0) {
   2e5a4:	2a00      	cmp	r2, #0
   2e5a6:	d0ec      	beq.n	2e582 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   2e5a8:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2e5ac:	428a      	cmp	r2, r1
   2e5ae:	da12      	bge.n	2e5d6 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   2e5b0:	4629      	mov	r1, r5
   2e5b2:	4630      	mov	r0, r6
   2e5b4:	f7ff fe4f 	bl	2e256 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2e5b8:	68e2      	ldr	r2, [r4, #12]
   2e5ba:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2e5bc:	442b      	add	r3, r5
   2e5be:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   2e5c0:	68e2      	ldr	r2, [r4, #12]
   2e5c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2e5c4:	442b      	add	r3, r5
   2e5c6:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   2e5c8:	2f00      	cmp	r7, #0
   2e5ca:	d0da      	beq.n	2e582 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2e5cc:	68e0      	ldr	r0, [r4, #12]
   2e5ce:	3080      	adds	r0, #128	; 0x80
   2e5d0:	f000 fbdd 	bl	2ed8e <z_impl_k_timer_stop>
}
   2e5d4:	e7d5      	b.n	2e582 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   2e5d6:	1a52      	subs	r2, r2, r1
   2e5d8:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2e5da:	e7d2      	b.n	2e582 <rx_timeout+0x4c>

0002e5dc <uarte_nrfx_tx_abort>:
{
   2e5dc:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2e5de:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2e5e0:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   2e5e2:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   2e5e4:	68da      	ldr	r2, [r3, #12]
   2e5e6:	6891      	ldr	r1, [r2, #8]
   2e5e8:	b151      	cbz	r1, 2e600 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2e5ea:	2400      	movs	r4, #0
   2e5ec:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   2e5f0:	68d8      	ldr	r0, [r3, #12]
   2e5f2:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   2e5f4:	f000 fbcb 	bl	2ed8e <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e5f8:	2301      	movs	r3, #1
   2e5fa:	60eb      	str	r3, [r5, #12]
	return 0;
   2e5fc:	4620      	mov	r0, r4
}
   2e5fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2e600:	f06f 000d 	mvn.w	r0, #13
   2e604:	e7fb      	b.n	2e5fe <uarte_nrfx_tx_abort+0x22>

0002e606 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2e606:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2e608:	6818      	ldr	r0, [r3, #0]
   2e60a:	f7ff bfe7 	b.w	2e5dc <uarte_nrfx_tx_abort>

0002e60e <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2e60e:	2000      	movs	r0, #0
   2e610:	4770      	bx	lr

0002e612 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2e612:	b538      	push	{r3, r4, r5, lr}
   2e614:	460c      	mov	r4, r1
   2e616:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2e618:	f7e8 fc9e 	bl	16f58 <bt_is_ready>
   2e61c:	b128      	cbz	r0, 2e62a <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2e61e:	4629      	mov	r1, r5
   2e620:	4620      	mov	r0, r4
}
   2e622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2e626:	f7e7 bed5 	b.w	163d4 <bt_hci_le_rand>
}
   2e62a:	f06f 000a 	mvn.w	r0, #10
   2e62e:	bd38      	pop	{r3, r4, r5, pc}

0002e630 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e630:	2200      	movs	r2, #0
{
   2e632:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2e634:	4611      	mov	r1, r2
   2e636:	4610      	mov	r0, r2
   2e638:	f7f9 fb40 	bl	27cbc <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2e63c:	2800      	cmp	r0, #0
	}

	return 0;
}
   2e63e:	bf18      	it	ne
   2e640:	f06f 0015 	mvnne.w	r0, #21
   2e644:	bd08      	pop	{r3, pc}

0002e646 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2e646:	4770      	bx	lr

0002e648 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2e648:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2e64a:	6843      	ldr	r3, [r0, #4]
   2e64c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2e64e:	7a05      	ldrb	r5, [r0, #8]
   2e650:	6844      	ldr	r4, [r0, #4]
   2e652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2e656:	42a3      	cmp	r3, r4
   2e658:	d302      	bcc.n	2e660 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2e65a:	f06f 0001 	mvn.w	r0, #1
}
   2e65e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2e660:	795c      	ldrb	r4, [r3, #5]
   2e662:	428c      	cmp	r4, r1
   2e664:	d001      	beq.n	2e66a <pinctrl_lookup_state+0x22>
		(*state)++;
   2e666:	3308      	adds	r3, #8
   2e668:	e7f0      	b.n	2e64c <pinctrl_lookup_state+0x4>
			return 0;
   2e66a:	2000      	movs	r0, #0
   2e66c:	e7f7      	b.n	2e65e <pinctrl_lookup_state+0x16>

0002e66e <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2e66e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e672:	4615      	mov	r5, r2
   2e674:	b085      	sub	sp, #20
   2e676:	4682      	mov	sl, r0
   2e678:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e67c:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e680:	45d0      	cmp	r8, sl
   2e682:	d103      	bne.n	2e68c <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2e684:	2000      	movs	r0, #0
}
   2e686:	b005      	add	sp, #20
   2e688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e68c:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2e690:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2e694:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2e698:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2e69a:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2e69e:	bf08      	it	eq
   2e6a0:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2e6a4:	2b22      	cmp	r3, #34	; 0x22
   2e6a6:	f200 808e 	bhi.w	2e7c6 <pinctrl_configure_pins+0x158>
   2e6aa:	e8df f003 	tbb	[pc, r3]
   2e6ae:	1f12      	.short	0x1f12
   2e6b0:	36273a24 	.word	0x36273a24
   2e6b4:	8c8c8c3a 	.word	0x8c8c8c3a
   2e6b8:	8c623d8c 	.word	0x8c623d8c
   2e6bc:	8c8c8c8c 	.word	0x8c8c8c8c
   2e6c0:	8c8c8c8c 	.word	0x8c8c8c8c
   2e6c4:	74716e65 	.word	0x74716e65
   2e6c8:	778c8c8c 	.word	0x778c8c8c
   2e6cc:	8683807d 	.word	0x8683807d
   2e6d0:	89          	.byte	0x89
   2e6d1:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2e6d2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e6d6:	a803      	add	r0, sp, #12
   2e6d8:	9403      	str	r4, [sp, #12]
   2e6da:	f7f2 fe2f 	bl	2133c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2e6de:	9b03      	ldr	r3, [sp, #12]
   2e6e0:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2e6e4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   2e6e8:	2601      	movs	r6, #1
   2e6ea:	e002      	b.n	2e6f2 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   2e6ec:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e6f0:	2600      	movs	r6, #0
   2e6f2:	46b3      	mov	fp, r6
   2e6f4:	e01f      	b.n	2e736 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   2e6f6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2e6fa:	e7ec      	b.n	2e6d6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2e6fc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e700:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e702:	a803      	add	r0, sp, #12
   2e704:	9403      	str	r4, [sp, #12]
   2e706:	f7f2 fe19 	bl	2133c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2e70a:	9b03      	ldr	r3, [sp, #12]
   2e70c:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2e710:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   2e714:	f04f 0b01 	mov.w	fp, #1
   2e718:	e00d      	b.n	2e736 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2e71a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2e71e:	2601      	movs	r6, #1
   2e720:	e7ef      	b.n	2e702 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2e722:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2e726:	e7e3      	b.n	2e6f0 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2e728:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2e72c:	2f00      	cmp	r7, #0
   2e72e:	d1df      	bne.n	2e6f0 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2e730:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e732:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   2e734:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2e736:	f85a 3b04 	ldr.w	r3, [sl], #4
   2e73a:	9301      	str	r3, [sp, #4]
   2e73c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e740:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e742:	a803      	add	r0, sp, #12
   2e744:	bf1c      	itt	ne
   2e746:	2601      	movne	r6, #1
   2e748:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2e74c:	9403      	str	r4, [sp, #12]
   2e74e:	f7f2 fdf5 	bl	2133c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e752:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2e754:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e756:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   2e75a:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2e75e:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e760:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
   2e764:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2e768:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2e76c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2e770:	e786      	b.n	2e680 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2e772:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2e776:	e7d9      	b.n	2e72c <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2e778:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2e77c:	f8da 3000 	ldr.w	r3, [sl]
   2e780:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2e784:	2b00      	cmp	r3, #0
   2e786:	d0ca      	beq.n	2e71e <pinctrl_configure_pins+0xb0>
   2e788:	e7a5      	b.n	2e6d6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2e78a:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2e78e:	e7f5      	b.n	2e77c <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2e790:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2e794:	e7f2      	b.n	2e77c <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2e796:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2e79a:	e7ef      	b.n	2e77c <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2e79c:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2e7a0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2e7a2:	f04f 0b00 	mov.w	fp, #0
   2e7a6:	e7c6      	b.n	2e736 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2e7a8:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2e7ac:	e793      	b.n	2e6d6 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2e7ae:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2e7b2:	e7f5      	b.n	2e7a0 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2e7b4:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2e7b8:	e7f2      	b.n	2e7a0 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2e7ba:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2e7be:	e7ef      	b.n	2e7a0 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2e7c0:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2e7c4:	e7ec      	b.n	2e7a0 <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
   2e7c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2e7ca:	e75c      	b.n	2e686 <pinctrl_configure_pins+0x18>

0002e7cc <hci_driver_close>:
{
   2e7cc:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2e7ce:	f7f3 ff85 	bl	226dc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2e7d2:	f04f 30ff 	mov.w	r0, #4294967295
   2e7d6:	f04f 31ff 	mov.w	r1, #4294967295
   2e7da:	f7f3 f88f 	bl	218fc <multithreading_lock_acquire>
	if (err) {
   2e7de:	4604      	mov	r4, r0
   2e7e0:	b920      	cbnz	r0, 2e7ec <hci_driver_close+0x20>
	err = sdc_disable();
   2e7e2:	f7d2 f8bb 	bl	95c <sdc_disable>
	if (err) {
   2e7e6:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2e7e8:	f7f3 f890 	bl	2190c <multithreading_lock_release>
}
   2e7ec:	4620      	mov	r0, r4
   2e7ee:	bd10      	pop	{r4, pc}

0002e7f0 <hci_driver_send>:
{
   2e7f0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2e7f2:	8a03      	ldrh	r3, [r0, #16]
{
   2e7f4:	4605      	mov	r5, r0
	if (!buf->len) {
   2e7f6:	b373      	cbz	r3, 2e856 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e7f8:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2e7fa:	b1a3      	cbz	r3, 2e826 <hci_driver_send+0x36>
   2e7fc:	2b02      	cmp	r3, #2
   2e7fe:	d12a      	bne.n	2e856 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e800:	f04f 30ff 	mov.w	r0, #4294967295
   2e804:	f04f 31ff 	mov.w	r1, #4294967295
   2e808:	f7f3 f878 	bl	218fc <multithreading_lock_acquire>
	if (!errcode) {
   2e80c:	4604      	mov	r4, r0
   2e80e:	b940      	cbnz	r0, 2e822 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2e810:	68e8      	ldr	r0, [r5, #12]
   2e812:	f7de fe5d 	bl	d4d0 <sdc_hci_data_put>
   2e816:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e818:	f7f3 f878 	bl	2190c <multithreading_lock_release>
		if (errcode) {
   2e81c:	b1b4      	cbz	r4, 2e84c <hci_driver_send+0x5c>
			receive_signal_raise();
   2e81e:	f7f3 f98f 	bl	21b40 <receive_signal_raise>
}
   2e822:	4620      	mov	r0, r4
   2e824:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e826:	f04f 30ff 	mov.w	r0, #4294967295
   2e82a:	f04f 31ff 	mov.w	r1, #4294967295
   2e82e:	f7f3 f865 	bl	218fc <multithreading_lock_acquire>
	if (!errcode) {
   2e832:	4604      	mov	r4, r0
   2e834:	2800      	cmp	r0, #0
   2e836:	d1f4      	bne.n	2e822 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2e838:	68e8      	ldr	r0, [r5, #12]
   2e83a:	f7f3 fa13 	bl	21c64 <hci_internal_cmd_put>
   2e83e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e840:	f7f3 f864 	bl	2190c <multithreading_lock_release>
	if (errcode) {
   2e844:	2c00      	cmp	r4, #0
   2e846:	d1ec      	bne.n	2e822 <hci_driver_send+0x32>
	receive_signal_raise();
   2e848:	f7f3 f97a 	bl	21b40 <receive_signal_raise>
		net_buf_unref(buf);
   2e84c:	4628      	mov	r0, r5
   2e84e:	f7f0 fb29 	bl	1eea4 <net_buf_unref>
   2e852:	2400      	movs	r4, #0
   2e854:	e7e5      	b.n	2e822 <hci_driver_send+0x32>
	switch (type) {
   2e856:	f06f 0415 	mvn.w	r4, #21
   2e85a:	e7e2      	b.n	2e822 <hci_driver_send+0x32>

0002e85c <receive_work_handler>:
	hci_driver_receive_process();
   2e85c:	f7f3 b998 	b.w	21b90 <hci_driver_receive_process>

0002e860 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2e860:	b530      	push	{r4, r5, lr}
   2e862:	b08d      	sub	sp, #52	; 0x34
   2e864:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	LOG_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2e866:	4601      	mov	r1, r0
   2e868:	4668      	mov	r0, sp
{
   2e86a:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2e86c:	f7f3 fdb2 	bl	223d4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2e870:	4621      	mov	r1, r4
   2e872:	a804      	add	r0, sp, #16
   2e874:	f7f3 fdae 	bl	223d4 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2e878:	f04f 30ff 	mov.w	r0, #4294967295
   2e87c:	f04f 31ff 	mov.w	r1, #4294967295
   2e880:	f7f3 f83c 	bl	218fc <multithreading_lock_acquire>

	if (!errcode) {
   2e884:	4604      	mov	r4, r0
   2e886:	b960      	cbnz	r0, 2e8a2 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2e888:	aa08      	add	r2, sp, #32
   2e88a:	a904      	add	r1, sp, #16
   2e88c:	4668      	mov	r0, sp
   2e88e:	f7de fafb 	bl	ce88 <sdc_soc_ecb_block_encrypt>
   2e892:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2e894:	f7f3 f83a 	bl	2190c <multithreading_lock_release>
	}

	if (!errcode) {
   2e898:	b91c      	cbnz	r4, 2e8a2 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2e89a:	a908      	add	r1, sp, #32
   2e89c:	4628      	mov	r0, r5
   2e89e:	f7f3 fd99 	bl	223d4 <sys_memcpy_swap.constprop.0>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2e8a2:	4620      	mov	r0, r4
   2e8a4:	b00d      	add	sp, #52	; 0x34
   2e8a6:	bd30      	pop	{r4, r5, pc}

0002e8a8 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2e8a8:	2100      	movs	r1, #0
   2e8aa:	f7f3 bf39 	b.w	22720 <cmd_le_generate_dhkey>

0002e8ae <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2e8ae:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2e8b2:	2901      	cmp	r1, #1
   2e8b4:	d801      	bhi.n	2e8ba <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2e8b6:	f7f3 bf33 	b.w	22720 <cmd_le_generate_dhkey>
}
   2e8ba:	2012      	movs	r0, #18
   2e8bc:	4770      	bx	lr

0002e8be <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2e8be:	4668      	mov	r0, sp
   2e8c0:	f020 0107 	bic.w	r1, r0, #7
   2e8c4:	468d      	mov	sp, r1
   2e8c6:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2e8c8:	f7dc ffc0 	bl	b84c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2e8cc:	f7e6 fa0a 	bl	14ce4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2e8d0:	f7e6 faf2 	bl	14eb8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2e8d4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e8d8:	4685      	mov	sp, r0
   2e8da:	4770      	bx	lr

0002e8dc <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2e8dc:	4668      	mov	r0, sp
   2e8de:	f020 0107 	bic.w	r1, r0, #7
   2e8e2:	468d      	mov	sp, r1
   2e8e4:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2e8e6:	f7dc ff27 	bl	b738 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2e8ea:	f7e6 f9fb 	bl	14ce4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2e8ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e8f2:	4685      	mov	sp, r0
   2e8f4:	4770      	bx	lr

0002e8f6 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2e8f6:	4668      	mov	r0, sp
   2e8f8:	f020 0107 	bic.w	r1, r0, #7
   2e8fc:	468d      	mov	sp, r1
   2e8fe:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2e900:	f7da fc5c 	bl	91bc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2e904:	f7e6 f9ee 	bl	14ce4 <_arch_isr_direct_pm>
   2e908:	f7e6 fad6 	bl	14eb8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2e90c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2e910:	4685      	mov	sp, r0
   2e912:	4770      	bx	lr

0002e914 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2e914:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2e916:	f7e2 fc1b 	bl	11150 <mpsl_fem_init>

	return 0;
}
   2e91a:	2000      	movs	r0, #0
   2e91c:	bd08      	pop	{r3, pc}

0002e91e <nrfx_clock_enable>:
}
   2e91e:	4770      	bx	lr

0002e920 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2e920:	f7dd bc32 	b.w	c188 <MPSL_IRQ_CLOCK_Handler>

0002e924 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2e924:	f7dd bfec 	b.w	c900 <mpsl_is_initialized>

0002e928 <nrf_flash_sync_get_timestamp_begin>:
}
   2e928:	4770      	bx	lr

0002e92a <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2e92a:	f7f9 b971 	b.w	27c10 <nrf_cc3xx_platform_init>

0002e92e <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2e92e:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2e930:	f7e6 f844 	bl	149bc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2e934:	f7e6 f918 	bl	14b68 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2e938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2e93c:	f7f9 b968 	b.w	27c10 <nrf_cc3xx_platform_init>

0002e940 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2e940:	4700      	bx	r0

0002e942 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2e942:	f000 b9f2 	b.w	2ed2a <z_impl_k_busy_wait>

0002e946 <nrf_gpio_pin_present_check>:
    switch (port)
   2e946:	0943      	lsrs	r3, r0, #5
   2e948:	d00b      	beq.n	2e962 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2e94a:	2b01      	cmp	r3, #1
   2e94c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e950:	bf18      	it	ne
   2e952:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2e954:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2e958:	fa23 f000 	lsr.w	r0, r3, r0
}
   2e95c:	f000 0001 	and.w	r0, r0, #1
   2e960:	4770      	bx	lr
    switch (port)
   2e962:	f04f 33ff 	mov.w	r3, #4294967295
   2e966:	e7f5      	b.n	2e954 <nrf_gpio_pin_present_check+0xe>

0002e968 <pin_is_task_output>:
{
   2e968:	b508      	push	{r3, lr}
   2e96a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2e96c:	f7f4 fa52 	bl	22e14 <pin_is_output>
   2e970:	b110      	cbz	r0, 2e978 <pin_is_task_output+0x10>
   2e972:	4610      	mov	r0, r2
   2e974:	f7f4 fa38 	bl	22de8 <pin_in_use_by_te>
}
   2e978:	f000 0001 	and.w	r0, r0, #1
   2e97c:	bd08      	pop	{r3, pc}

0002e97e <nrf_gpio_reconfigure>:
{
   2e97e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e982:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e984:	a801      	add	r0, sp, #4
{
   2e986:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2e98a:	460c      	mov	r4, r1
   2e98c:	4617      	mov	r7, r2
   2e98e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2e990:	f7f4 fac0 	bl	22f14 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2e994:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2e996:	1e39      	subs	r1, r7, #0
   2e998:	bf18      	it	ne
   2e99a:	2101      	movne	r1, #1
   2e99c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e9a0:	1e23      	subs	r3, r4, #0
   2e9a2:	bf18      	it	ne
   2e9a4:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e9a6:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e9a8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e9ac:	bf14      	ite	ne
   2e9ae:	210c      	movne	r1, #12
   2e9b0:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2e9b2:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2e9b4:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2e9b8:	bf14      	ite	ne
   2e9ba:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2e9be:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2e9c0:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2e9c4:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2e9c8:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2e9cc:	bf14      	ite	ne
   2e9ce:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2e9d2:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2e9d4:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2e9d6:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2e9da:	b104      	cbz	r4, 2e9de <nrf_gpio_reconfigure+0x60>
   2e9dc:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2e9de:	b10f      	cbz	r7, 2e9e4 <nrf_gpio_reconfigure+0x66>
   2e9e0:	783f      	ldrb	r7, [r7, #0]
   2e9e2:	007f      	lsls	r7, r7, #1
   2e9e4:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2e9e6:	b10e      	cbz	r6, 2e9ec <nrf_gpio_reconfigure+0x6e>
   2e9e8:	7836      	ldrb	r6, [r6, #0]
   2e9ea:	00b6      	lsls	r6, r6, #2
   2e9ec:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2e9ee:	b18d      	cbz	r5, 2ea14 <nrf_gpio_reconfigure+0x96>
   2e9f0:	7829      	ldrb	r1, [r5, #0]
   2e9f2:	0209      	lsls	r1, r1, #8
   2e9f4:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2e9f6:	f1b8 0f00 	cmp.w	r8, #0
   2e9fa:	d003      	beq.n	2ea04 <nrf_gpio_reconfigure+0x86>
   2e9fc:	f898 8000 	ldrb.w	r8, [r8]
   2ea00:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2ea04:	4321      	orrs	r1, r4
   2ea06:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2ea0a:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   2ea0e:	b002      	add	sp, #8
   2ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2ea14:	4629      	mov	r1, r5
   2ea16:	e7ed      	b.n	2e9f4 <nrf_gpio_reconfigure+0x76>

0002ea18 <nrf_gpio_cfg_sense_set>:
{
   2ea18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ea1a:	f10d 030f 	add.w	r3, sp, #15
   2ea1e:	9301      	str	r3, [sp, #4]
   2ea20:	2300      	movs	r3, #0
{
   2ea22:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2ea26:	9300      	str	r3, [sp, #0]
   2ea28:	461a      	mov	r2, r3
   2ea2a:	4619      	mov	r1, r3
   2ea2c:	f7ff ffa7 	bl	2e97e <nrf_gpio_reconfigure>
}
   2ea30:	b005      	add	sp, #20
   2ea32:	f85d fb04 	ldr.w	pc, [sp], #4

0002ea36 <is_valid_address>:
{
   2ea36:	4603      	mov	r3, r0
   2ea38:	4608      	mov	r0, r1
   2ea3a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2ea3e:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   2ea40:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   2ea42:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2ea44:	4293      	cmp	r3, r2
   2ea46:	d308      	bcc.n	2ea5a <is_valid_address+0x24>
    if (uicr_allowed &&
   2ea48:	b140      	cbz	r0, 2ea5c <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2ea4a:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2ea4e:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   2ea52:	bf2c      	ite	cs
   2ea54:	2000      	movcs	r0, #0
   2ea56:	2001      	movcc	r0, #1
   2ea58:	4770      	bx	lr
        return true;
   2ea5a:	2001      	movs	r0, #1
}
   2ea5c:	4770      	bx	lr

0002ea5e <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2ea5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea62:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2ea64:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2ea66:	4350      	muls	r0, r2
   2ea68:	4770      	bx	lr

0002ea6a <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2ea6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea6e:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2ea70:	4770      	bx	lr

0002ea72 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2ea72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ea76:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2ea78:	4770      	bx	lr

0002ea7a <nrf_gpio_cfg_default>:
{
   2ea7a:	b507      	push	{r0, r1, r2, lr}
   2ea7c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ea7e:	a801      	add	r0, sp, #4
   2ea80:	f7f4 fe08 	bl	23694 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2ea84:	9b01      	ldr	r3, [sp, #4]
   2ea86:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2ea8a:	2202      	movs	r2, #2
   2ea8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2ea90:	b003      	add	sp, #12
   2ea92:	f85d fb04 	ldr.w	pc, [sp], #4

0002ea96 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2ea96:	2302      	movs	r3, #2
   2ea98:	f7f4 be26 	b.w	236e8 <qspi_xfer>

0002ea9c <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2ea9c:	2303      	movs	r3, #3
   2ea9e:	f7f4 be23 	b.w	236e8 <qspi_xfer>

0002eaa2 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2eaa2:	2100      	movs	r1, #0
   2eaa4:	2002      	movs	r0, #2
   2eaa6:	f7f5 b907 	b.w	23cb8 <nrfx_qspi_erase>

0002eaaa <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2eaaa:	f7f5 b97d 	b.w	23da8 <_DoInit>

0002eaae <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2eaae:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2eab0:	f7ff fffb 	bl	2eaaa <SEGGER_RTT_Init>

	return 0;
}
   2eab4:	2000      	movs	r0, #0
   2eab6:	bd08      	pop	{r3, pc}

0002eab8 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2eab8:	4770      	bx	lr

0002eaba <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2eaba:	b140      	cbz	r0, 2eace <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2eabc:	68c3      	ldr	r3, [r0, #12]
   2eabe:	7858      	ldrb	r0, [r3, #1]
   2eac0:	f010 0001 	ands.w	r0, r0, #1
   2eac4:	bf1e      	ittt	ne
   2eac6:	7818      	ldrbne	r0, [r3, #0]
   2eac8:	fab0 f080 	clzne	r0, r0
   2eacc:	0940      	lsrne	r0, r0, #5
}
   2eace:	4770      	bx	lr

0002ead0 <z_early_memset>:
	(void) memset(dst, c, n);
   2ead0:	f7fd b81d 	b.w	2bb0e <memset>

0002ead4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2ead4:	f7fd b810 	b.w	2baf8 <memcpy>

0002ead8 <k_heap_init>:
{
   2ead8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2eada:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2eade:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2eae2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2eae4:	f7e3 bc74 	b.w	123d0 <sys_heap_init>

0002eae8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2eae8:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2eaec:	4313      	orrs	r3, r2
   2eaee:	f013 0303 	ands.w	r3, r3, #3
   2eaf2:	d10c      	bne.n	2eb0e <create_free_list+0x26>
	slab->free_list = NULL;
   2eaf4:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2eaf6:	68c1      	ldr	r1, [r0, #12]
   2eaf8:	4299      	cmp	r1, r3
   2eafa:	d801      	bhi.n	2eb00 <create_free_list+0x18>
	return 0;
   2eafc:	2000      	movs	r0, #0
   2eafe:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2eb00:	6981      	ldr	r1, [r0, #24]
   2eb02:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2eb04:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2eb06:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2eb08:	3301      	adds	r3, #1
		p += slab->block_size;
   2eb0a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2eb0c:	e7f3      	b.n	2eaf6 <create_free_list+0xe>
		return -EINVAL;
   2eb0e:	f06f 0015 	mvn.w	r0, #21
}
   2eb12:	4770      	bx	lr

0002eb14 <k_mem_slab_init>:
{
   2eb14:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2eb16:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   2eb1a:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2eb1c:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2eb1e:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2eb20:	6083      	str	r3, [r0, #8]
{
   2eb22:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2eb24:	f7ff ffe0 	bl	2eae8 <create_free_list>
	if (rc < 0) {
   2eb28:	2800      	cmp	r0, #0
   2eb2a:	bfa8      	it	ge
   2eb2c:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2eb30:	bd10      	pop	{r4, pc}

0002eb32 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2eb32:	f3ef 8005 	mrs	r0, IPSR
}
   2eb36:	3800      	subs	r0, #0
   2eb38:	bf18      	it	ne
   2eb3a:	2001      	movne	r0, #1
   2eb3c:	4770      	bx	lr

0002eb3e <z_impl_k_thread_name_set>:
}
   2eb3e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2eb42:	4770      	bx	lr

0002eb44 <k_thread_name_get>:
}
   2eb44:	2000      	movs	r0, #0
   2eb46:	4770      	bx	lr

0002eb48 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2eb48:	f7f6 bfa2 	b.w	25a90 <z_sched_start>

0002eb4c <z_pm_save_idle_exit>:
{
   2eb4c:	b508      	push	{r3, lr}
	pm_system_resume();
   2eb4e:	f7e5 f941 	bl	13dd4 <pm_system_resume>
}
   2eb52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2eb56:	f7ff bd76 	b.w	2e646 <sys_clock_idle_exit>

0002eb5a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2eb5a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2eb5e:	428b      	cmp	r3, r1
   2eb60:	d001      	beq.n	2eb66 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2eb62:	f7f7 ba0f 	b.w	25f84 <z_set_prio>
}
   2eb66:	2000      	movs	r0, #0
   2eb68:	4770      	bx	lr

0002eb6a <z_impl_k_mutex_init>:
{
   2eb6a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2eb6c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2eb6e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2eb72:	e9c3 3300 	strd	r3, r3, [r3]
}
   2eb76:	4770      	bx	lr

0002eb78 <z_queue_node_peek>:
{
   2eb78:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2eb7a:	4604      	mov	r4, r0
   2eb7c:	b130      	cbz	r0, 2eb8c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2eb7e:	6802      	ldr	r2, [r0, #0]
   2eb80:	0793      	lsls	r3, r2, #30
   2eb82:	d003      	beq.n	2eb8c <z_queue_node_peek+0x14>
		ret = anode->data;
   2eb84:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2eb86:	b109      	cbz	r1, 2eb8c <z_queue_node_peek+0x14>
			k_free(anode);
   2eb88:	f000 f9bf 	bl	2ef0a <k_free>
}
   2eb8c:	4620      	mov	r0, r4
   2eb8e:	bd10      	pop	{r4, pc}

0002eb90 <z_impl_k_queue_init>:
	list->head = NULL;
   2eb90:	2300      	movs	r3, #0
	list->tail = NULL;
   2eb92:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2eb96:	6083      	str	r3, [r0, #8]
   2eb98:	f100 030c 	add.w	r3, r0, #12
   2eb9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2eba0:	f100 0314 	add.w	r3, r0, #20
   2eba4:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2eba8:	4770      	bx	lr

0002ebaa <k_queue_append>:
{
   2ebaa:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2ebac:	2301      	movs	r3, #1
   2ebae:	9300      	str	r3, [sp, #0]
   2ebb0:	2300      	movs	r3, #0
{
   2ebb2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2ebb4:	4619      	mov	r1, r3
   2ebb6:	f7f5 ffc5 	bl	24b44 <queue_insert>
}
   2ebba:	b003      	add	sp, #12
   2ebbc:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebc0 <k_queue_prepend>:
{
   2ebc0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2ebc2:	2300      	movs	r3, #0
{
   2ebc4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2ebc6:	9300      	str	r3, [sp, #0]
   2ebc8:	4619      	mov	r1, r3
   2ebca:	f7f5 ffbb 	bl	24b44 <queue_insert>
}
   2ebce:	b003      	add	sp, #12
   2ebd0:	f85d fb04 	ldr.w	pc, [sp], #4

0002ebd4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ebd4:	b15a      	cbz	r2, 2ebee <z_impl_k_sem_init+0x1a>
   2ebd6:	428a      	cmp	r2, r1
   2ebd8:	d309      	bcc.n	2ebee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ebda:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ebde:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ebe2:	e9c0 0000 	strd	r0, r0, [r0]
   2ebe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ebea:	2000      	movs	r0, #0
   2ebec:	4770      	bx	lr
		return -EINVAL;
   2ebee:	f06f 0015 	mvn.w	r0, #21
}
   2ebf2:	4770      	bx	lr

0002ebf4 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2ebf4:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2ebf6:	2301      	movs	r3, #1
   2ebf8:	408b      	lsls	r3, r1
   2ebfa:	ea22 0303 	bic.w	r3, r2, r3
   2ebfe:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2ec00:	fa22 f001 	lsr.w	r0, r2, r1
}
   2ec04:	f000 0001 	and.w	r0, r0, #1
   2ec08:	4770      	bx	lr

0002ec0a <unschedule_locked>:
{
   2ec0a:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ec0c:	2103      	movs	r1, #3
{
   2ec0e:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ec10:	300c      	adds	r0, #12
   2ec12:	f7ff ffef 	bl	2ebf4 <flag_test_and_clear>
   2ec16:	4604      	mov	r4, r0
   2ec18:	b118      	cbz	r0, 2ec22 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ec1a:	f105 0010 	add.w	r0, r5, #16
   2ec1e:	f7f7 ff0b 	bl	26a38 <z_abort_timeout>
}
   2ec22:	4620      	mov	r0, r4
   2ec24:	bd38      	pop	{r3, r4, r5, pc}

0002ec26 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2ec26:	b120      	cbz	r0, 2ec32 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ec28:	2200      	movs	r2, #0
   2ec2a:	4611      	mov	r1, r2
   2ec2c:	3088      	adds	r0, #136	; 0x88
   2ec2e:	f7f7 bd6d 	b.w	2670c <z_sched_wake>
}
   2ec32:	4770      	bx	lr

0002ec34 <cancel_async_locked>:
{
   2ec34:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2ec36:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ec38:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2ec3c:	079b      	lsls	r3, r3, #30
{
   2ec3e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ec40:	d416      	bmi.n	2ec70 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2ec42:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ec44:	2102      	movs	r1, #2
   2ec46:	300c      	adds	r0, #12
   2ec48:	f7ff ffd4 	bl	2ebf4 <flag_test_and_clear>
   2ec4c:	b180      	cbz	r0, 2ec70 <cancel_async_locked+0x3c>
	return list->head;
   2ec4e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ec52:	b16a      	cbz	r2, 2ec70 <cancel_async_locked+0x3c>
   2ec54:	4294      	cmp	r4, r2
   2ec56:	d11d      	bne.n	2ec94 <cancel_async_locked+0x60>
	return node->next;
   2ec58:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ec5a:	b99e      	cbnz	r6, 2ec84 <cancel_async_locked+0x50>
   2ec5c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2ec60:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2ec64:	429c      	cmp	r4, r3
   2ec66:	d101      	bne.n	2ec6c <cancel_async_locked+0x38>
	list->tail = node;
   2ec68:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2ec6c:	2300      	movs	r3, #0
   2ec6e:	6023      	str	r3, [r4, #0]
	return *flagp;
   2ec70:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2ec72:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2ec76:	bf1e      	ittt	ne
   2ec78:	f043 0302 	orrne.w	r3, r3, #2
   2ec7c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ec7e:	f040 0002 	orrne.w	r0, r0, #2
}
   2ec82:	bd70      	pop	{r4, r5, r6, pc}
   2ec84:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ec86:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2ec8a:	4294      	cmp	r4, r2
	list->tail = node;
   2ec8c:	bf08      	it	eq
   2ec8e:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   2ec92:	e7eb      	b.n	2ec6c <cancel_async_locked+0x38>
	return node->next;
   2ec94:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ec96:	6812      	ldr	r2, [r2, #0]
   2ec98:	e7db      	b.n	2ec52 <cancel_async_locked+0x1e>

0002ec9a <k_work_submit_to_queue>:
{
   2ec9a:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2ec9c:	f7f6 fb16 	bl	252cc <z_work_submit_to_queue>
	if (ret > 0) {
   2eca0:	1e04      	subs	r4, r0, #0
   2eca2:	dd09      	ble.n	2ecb8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2eca4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2eca8:	f3ef 8011 	mrs	r0, BASEPRI
   2ecac:	f383 8812 	msr	BASEPRI_MAX, r3
   2ecb0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ecb4:	f000 f80d 	bl	2ecd2 <z_reschedule_irqlock>
}
   2ecb8:	4620      	mov	r0, r4
   2ecba:	bd10      	pop	{r4, pc}

0002ecbc <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2ecbc:	f7f6 bad2 	b.w	25264 <k_work_busy_get>

0002ecc0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2ecc0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ecc4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ecc8:	4283      	cmp	r3, r0
		return b2 - b1;
   2ecca:	bf14      	ite	ne
   2eccc:	1ac0      	subne	r0, r0, r3
	return 0;
   2ecce:	2000      	moveq	r0, #0
}
   2ecd0:	4770      	bx	lr

0002ecd2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ecd2:	4603      	mov	r3, r0
   2ecd4:	b920      	cbnz	r0, 2ece0 <z_reschedule_irqlock+0xe>
   2ecd6:	f3ef 8205 	mrs	r2, IPSR
   2ecda:	b90a      	cbnz	r2, 2ece0 <z_reschedule_irqlock+0xe>
   2ecdc:	f7e6 b830 	b.w	14d40 <arch_swap>
	__asm__ volatile(
   2ece0:	f383 8811 	msr	BASEPRI, r3
   2ece4:	f3bf 8f6f 	isb	sy
}
   2ece8:	4770      	bx	lr

0002ecea <z_reschedule_unlocked>:
	__asm__ volatile(
   2ecea:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ecee:	f3ef 8011 	mrs	r0, BASEPRI
   2ecf2:	f383 8812 	msr	BASEPRI_MAX, r3
   2ecf6:	f3bf 8f6f 	isb	sy
   2ecfa:	f7ff bfea 	b.w	2ecd2 <z_reschedule_irqlock>

0002ecfe <z_unpend_all>:
{
   2ecfe:	b538      	push	{r3, r4, r5, lr}
   2ed00:	4605      	mov	r5, r0
	int need_sched = 0;
   2ed02:	2000      	movs	r0, #0
	return list->head == list;
   2ed04:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ed06:	42a5      	cmp	r5, r4
   2ed08:	d000      	beq.n	2ed0c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ed0a:	b904      	cbnz	r4, 2ed0e <z_unpend_all+0x10>
}
   2ed0c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ed0e:	4620      	mov	r0, r4
   2ed10:	f7f7 fa28 	bl	26164 <z_unpend_thread>
		z_ready_thread(thread);
   2ed14:	4620      	mov	r0, r4
   2ed16:	f7f6 fe1f 	bl	25958 <z_ready_thread>
		need_sched = 1;
   2ed1a:	2001      	movs	r0, #1
   2ed1c:	e7f2      	b.n	2ed04 <z_unpend_all+0x6>

0002ed1e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ed1e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ed20:	f7f7 fffc 	bl	26d1c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ed24:	bd08      	pop	{r3, pc}

0002ed26 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ed26:	f7f7 bff9 	b.w	26d1c <sys_clock_tick_get>

0002ed2a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ed2a:	b108      	cbz	r0, 2ed30 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ed2c:	f7e6 bcf0 	b.w	15710 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ed30:	4770      	bx	lr

0002ed32 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ed32:	f1b1 3fff 	cmp.w	r1, #4294967295
   2ed36:	bf08      	it	eq
   2ed38:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ed3c:	b538      	push	{r3, r4, r5, lr}
   2ed3e:	460c      	mov	r4, r1
   2ed40:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ed42:	d014      	beq.n	2ed6e <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ed44:	4308      	orrs	r0, r1
   2ed46:	d103      	bne.n	2ed50 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ed48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ed4c:	f7f7 bfe6 	b.w	26d1c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2ed50:	f06f 0001 	mvn.w	r0, #1
   2ed54:	1b40      	subs	r0, r0, r5
   2ed56:	f04f 33ff 	mov.w	r3, #4294967295
   2ed5a:	eb63 0101 	sbc.w	r1, r3, r1
   2ed5e:	2900      	cmp	r1, #0
   2ed60:	da04      	bge.n	2ed6c <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2ed62:	f7f7 ffdb 	bl	26d1c <sys_clock_tick_get>
   2ed66:	1940      	adds	r0, r0, r5
   2ed68:	eb41 0104 	adc.w	r1, r1, r4
}
   2ed6c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2ed6e:	f04f 30ff 	mov.w	r0, #4294967295
   2ed72:	4601      	mov	r1, r0
   2ed74:	e7fa      	b.n	2ed6c <sys_clock_timeout_end_calc+0x3a>

0002ed76 <k_timer_init>:
	timer->status = 0U;
   2ed76:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2ed78:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2ed7c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2ed80:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2ed84:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2ed88:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2ed8a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2ed8c:	4770      	bx	lr

0002ed8e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2ed8e:	b510      	push	{r4, lr}
   2ed90:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2ed92:	f7f7 fe51 	bl	26a38 <z_abort_timeout>

	if (inactive) {
   2ed96:	b9b0      	cbnz	r0, 2edc6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ed98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ed9a:	b10b      	cbz	r3, 2eda0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2ed9c:	4620      	mov	r0, r4
   2ed9e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2eda0:	f104 0018 	add.w	r0, r4, #24
   2eda4:	f7f7 fa5c 	bl	26260 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2eda8:	b168      	cbz	r0, 2edc6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2edaa:	f7f6 fdd5 	bl	25958 <z_ready_thread>
   2edae:	f04f 0340 	mov.w	r3, #64	; 0x40
   2edb2:	f3ef 8011 	mrs	r0, BASEPRI
   2edb6:	f383 8812 	msr	BASEPRI_MAX, r3
   2edba:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2edbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2edc2:	f7ff bf86 	b.w	2ecd2 <z_reschedule_irqlock>
   2edc6:	bd10      	pop	{r4, pc}

0002edc8 <add_event>:
{
   2edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2edca:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2edcc:	e9d0 1300 	ldrd	r1, r3, [r0]
   2edd0:	4288      	cmp	r0, r1
   2edd2:	4604      	mov	r4, r0
   2edd4:	d105      	bne.n	2ede2 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2edd6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2edd8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2eddc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2edde:	6065      	str	r5, [r4, #4]
   2ede0:	e01d      	b.n	2ee1e <add_event+0x56>
	if ((pending == NULL) ||
   2ede2:	2b00      	cmp	r3, #0
   2ede4:	d0f7      	beq.n	2edd6 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ede6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ede8:	b100      	cbz	r0, 2edec <add_event+0x24>
   2edea:	3860      	subs	r0, #96	; 0x60
   2edec:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2edf0:	4639      	mov	r1, r7
   2edf2:	f7ff ff65 	bl	2ecc0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2edf6:	2800      	cmp	r0, #0
   2edf8:	dced      	bgt.n	2edd6 <add_event+0xe>
	return list->head == list;
   2edfa:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2edfc:	42b4      	cmp	r4, r6
   2edfe:	d0ea      	beq.n	2edd6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ee00:	2e00      	cmp	r6, #0
   2ee02:	d0e8      	beq.n	2edd6 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ee04:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ee06:	b101      	cbz	r1, 2ee0a <add_event+0x42>
   2ee08:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2ee0a:	4638      	mov	r0, r7
   2ee0c:	f7ff ff58 	bl	2ecc0 <z_sched_prio_cmp>
   2ee10:	2800      	cmp	r0, #0
   2ee12:	dd05      	ble.n	2ee20 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2ee14:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2ee16:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2ee1a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2ee1c:	6075      	str	r5, [r6, #4]
}
   2ee1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2ee20:	6863      	ldr	r3, [r4, #4]
   2ee22:	429e      	cmp	r6, r3
   2ee24:	d0d7      	beq.n	2edd6 <add_event+0xe>
   2ee26:	6836      	ldr	r6, [r6, #0]
   2ee28:	e7ea      	b.n	2ee00 <add_event+0x38>

0002ee2a <signal_poll_event>:
{
   2ee2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2ee2e:	6884      	ldr	r4, [r0, #8]
{
   2ee30:	4605      	mov	r5, r0
   2ee32:	460e      	mov	r6, r1
	if (poller != NULL) {
   2ee34:	b144      	cbz	r4, 2ee48 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2ee36:	7863      	ldrb	r3, [r4, #1]
   2ee38:	2b01      	cmp	r3, #1
   2ee3a:	d12e      	bne.n	2ee9a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2ee3c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ee40:	f013 0302 	ands.w	r3, r3, #2
   2ee44:	d10a      	bne.n	2ee5c <signal_poll_event+0x32>
		poller->is_polling = false;
   2ee46:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2ee48:	68eb      	ldr	r3, [r5, #12]
   2ee4a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2ee4e:	4316      	orrs	r6, r2
	event->poller = NULL;
   2ee50:	2000      	movs	r0, #0
	event->state |= state;
   2ee52:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2ee56:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2ee58:	60eb      	str	r3, [r5, #12]
	return retcode;
   2ee5a:	e03e      	b.n	2eeda <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2ee5c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2ee60:	f1b3 3fff 	cmp.w	r3, #4294967295
   2ee64:	bf08      	it	eq
   2ee66:	f112 0f02 	cmneq.w	r2, #2
   2ee6a:	d032      	beq.n	2eed2 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ee6c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2ee70:	4640      	mov	r0, r8
   2ee72:	f7f7 f977 	bl	26164 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2ee76:	2e08      	cmp	r6, #8
   2ee78:	bf0c      	ite	eq
   2ee7a:	f06f 0303 	mvneq.w	r3, #3
   2ee7e:	2300      	movne	r3, #0
   2ee80:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ee82:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2ee86:	06db      	lsls	r3, r3, #27
   2ee88:	d109      	bne.n	2ee9e <signal_poll_event+0x74>
   2ee8a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2ee8e:	b937      	cbnz	r7, 2ee9e <signal_poll_event+0x74>
	z_ready_thread(thread);
   2ee90:	4640      	mov	r0, r8
   2ee92:	f7f6 fd61 	bl	25958 <z_ready_thread>
		poller->is_polling = false;
   2ee96:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2ee98:	e7d6      	b.n	2ee48 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2ee9a:	2b02      	cmp	r3, #2
   2ee9c:	d001      	beq.n	2eea2 <signal_poll_event+0x78>
		poller->is_polling = false;
   2ee9e:	2300      	movs	r3, #0
   2eea0:	e7d1      	b.n	2ee46 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2eea2:	7823      	ldrb	r3, [r4, #0]
   2eea4:	2b00      	cmp	r3, #0
   2eea6:	d0cf      	beq.n	2ee48 <signal_poll_event+0x1e>
   2eea8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2eeac:	2f00      	cmp	r7, #0
   2eeae:	d0f2      	beq.n	2ee96 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2eeb0:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2eeb4:	f1a4 0914 	sub.w	r9, r4, #20
   2eeb8:	f104 0014 	add.w	r0, r4, #20
   2eebc:	f7f7 fdbc 	bl	26a38 <z_abort_timeout>
		twork->poll_result = 0;
   2eec0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2eec4:	4649      	mov	r1, r9
   2eec6:	4638      	mov	r0, r7
   2eec8:	f7f6 fa00 	bl	252cc <z_work_submit_to_queue>
		poller->is_polling = false;
   2eecc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2eed0:	e7ba      	b.n	2ee48 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2eed2:	2300      	movs	r3, #0
   2eed4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2eed6:	f06f 000a 	mvn.w	r0, #10
}
   2eeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002eede <z_handle_obj_poll_events>:
{
   2eede:	4603      	mov	r3, r0
	return list->head == list;
   2eee0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2eee2:	4283      	cmp	r3, r0
   2eee4:	d008      	beq.n	2eef8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2eee6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2eeea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2eeec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2eeee:	2300      	movs	r3, #0
	node->prev = NULL;
   2eef0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2eef4:	f7ff bf99 	b.w	2ee2a <signal_poll_event>
}
   2eef8:	4770      	bx	lr

0002eefa <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2eefa:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2eefc:	e9c0 0000 	strd	r0, r0, [r0]
   2ef00:	6083      	str	r3, [r0, #8]
}
   2ef02:	4770      	bx	lr

0002ef04 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2ef04:	2300      	movs	r3, #0
   2ef06:	6083      	str	r3, [r0, #8]
}
   2ef08:	4770      	bx	lr

0002ef0a <k_free>:
	if (ptr != NULL) {
   2ef0a:	b120      	cbz	r0, 2ef16 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2ef0c:	1f01      	subs	r1, r0, #4
   2ef0e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2ef12:	f7f5 b977 	b.w	24204 <k_heap_free>
}
   2ef16:	4770      	bx	lr

0002ef18 <k_malloc>:
{
   2ef18:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2ef1a:	2004      	movs	r0, #4
   2ef1c:	f7f8 bac8 	b.w	274b0 <k_aligned_alloc>

0002ef20 <k_calloc>:
{
   2ef20:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2ef22:	fba0 5401 	umull	r5, r4, r0, r1
   2ef26:	b924      	cbnz	r4, 2ef32 <k_calloc+0x12>
	ret = k_malloc(bounds);
   2ef28:	4628      	mov	r0, r5
   2ef2a:	f7ff fff5 	bl	2ef18 <k_malloc>
	if (ret != NULL) {
   2ef2e:	4606      	mov	r6, r0
   2ef30:	b910      	cbnz	r0, 2ef38 <k_calloc+0x18>
		return NULL;
   2ef32:	2600      	movs	r6, #0
}
   2ef34:	4630      	mov	r0, r6
   2ef36:	bd70      	pop	{r4, r5, r6, pc}
		(void)memset(ret, 0, bounds);
   2ef38:	462a      	mov	r2, r5
   2ef3a:	4621      	mov	r1, r4
   2ef3c:	f7fc fde7 	bl	2bb0e <memset>
   2ef40:	e7f8      	b.n	2ef34 <k_calloc+0x14>

0002ef42 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2ef42:	4770      	bx	lr
